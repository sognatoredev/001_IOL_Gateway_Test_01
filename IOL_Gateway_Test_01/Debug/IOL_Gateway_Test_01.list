
IOL_Gateway_Test_01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cc20  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f0  0800ce00  0800ce00  0000de00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d0f0  0800d0f0  0000f274  2**0
                  CONTENTS
  4 .ARM          00000008  0800d0f0  0800d0f0  0000e0f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d0f8  0800d0f8  0000f274  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d0f8  0800d0f8  0000e0f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d0fc  0800d0fc  0000e0fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000274  20000000  0800d100  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000026ec  20000274  0800d374  0000f274  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002960  0800d374  0000f960  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f274  2**0
                  CONTENTS, READONLY
 12 .debug_info   000227d4  00000000  00000000  0000f2a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000055d8  00000000  00000000  00031a78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b50  00000000  00000000  00037050  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000014d3  00000000  00000000  00038ba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002476a  00000000  00000000  0003a073  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000250ca  00000000  00000000  0005e7dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ce97a  00000000  00000000  000838a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00152221  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000077d4  00000000  00000000  00152264  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  00159a38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000274 	.word	0x20000274
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800cde8 	.word	0x0800cde8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000278 	.word	0x20000278
 800021c:	0800cde8 	.word	0x0800cde8

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <Decode_MC_ReadWrite>:

static uint8_t Page1_seq = 0;
static uint8_t PreOP_seq_cnt = 0;

static uint8_t Decode_MC_ReadWrite (uint8_t Data)
{
 80005b0:	b480      	push	{r7}
 80005b2:	b085      	sub	sp, #20
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	4603      	mov	r3, r0
 80005b8:	71fb      	strb	r3, [r7, #7]
    uint8_t MCdata = 0;
 80005ba:	2300      	movs	r3, #0
 80005bc:	73fb      	strb	r3, [r7, #15]

    MCdata = Data;
 80005be:	79fb      	ldrb	r3, [r7, #7]
 80005c0:	73fb      	strb	r3, [r7, #15]
    MCdata = (MCdata >> 7) & 0x01;
 80005c2:	7bfb      	ldrb	r3, [r7, #15]
 80005c4:	09db      	lsrs	r3, r3, #7
 80005c6:	73fb      	strb	r3, [r7, #15]

    switch (MCdata)
 80005c8:	7bfb      	ldrb	r3, [r7, #15]
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d002      	beq.n	80005d4 <Decode_MC_ReadWrite+0x24>
 80005ce:	2b01      	cmp	r3, #1
 80005d0:	d002      	beq.n	80005d8 <Decode_MC_ReadWrite+0x28>
 80005d2:	e003      	b.n	80005dc <Decode_MC_ReadWrite+0x2c>
    {
        case 0 :
            return IOL_RW_Write;
 80005d4:	2300      	movs	r3, #0
 80005d6:	e002      	b.n	80005de <Decode_MC_ReadWrite+0x2e>
        case 1 :
            return IOL_RW_Read;
 80005d8:	2301      	movs	r3, #1
 80005da:	e000      	b.n	80005de <Decode_MC_ReadWrite+0x2e>
        default :
            // printf("Unexpected value\n");
            return 'X';
 80005dc:	2358      	movs	r3, #88	@ 0x58
    }
}
 80005de:	4618      	mov	r0, r3
 80005e0:	3714      	adds	r7, #20
 80005e2:	46bd      	mov	sp, r7
 80005e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e8:	4770      	bx	lr
	...

080005ec <Decode_MC_CommunicationChannel>:

static uint8_t Decode_MC_CommunicationChannel (uint8_t Data)
{
 80005ec:	b480      	push	{r7}
 80005ee:	b085      	sub	sp, #20
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	4603      	mov	r3, r0
 80005f4:	71fb      	strb	r3, [r7, #7]
    uint8_t MCdata = 0;
 80005f6:	2300      	movs	r3, #0
 80005f8:	73fb      	strb	r3, [r7, #15]

    MCdata = Data;
 80005fa:	79fb      	ldrb	r3, [r7, #7]
 80005fc:	73fb      	strb	r3, [r7, #15]
    MCdata = (MCdata >> 5) & 0x03;
 80005fe:	7bfb      	ldrb	r3, [r7, #15]
 8000600:	095b      	lsrs	r3, r3, #5
 8000602:	b2db      	uxtb	r3, r3
 8000604:	f003 0303 	and.w	r3, r3, #3
 8000608:	73fb      	strb	r3, [r7, #15]
    
    switch (MCdata)
 800060a:	7bfb      	ldrb	r3, [r7, #15]
 800060c:	2b03      	cmp	r3, #3
 800060e:	d813      	bhi.n	8000638 <Decode_MC_CommunicationChannel+0x4c>
 8000610:	a201      	add	r2, pc, #4	@ (adr r2, 8000618 <Decode_MC_CommunicationChannel+0x2c>)
 8000612:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000616:	bf00      	nop
 8000618:	08000629 	.word	0x08000629
 800061c:	0800062d 	.word	0x0800062d
 8000620:	08000631 	.word	0x08000631
 8000624:	08000635 	.word	0x08000635
    {
        case 0 :
            // printf("%s,", CommunicationChannel.MC_Com_Ch_0);
            return IOL_Channel_Process;
 8000628:	2300      	movs	r3, #0
 800062a:	e005      	b.n	8000638 <Decode_MC_CommunicationChannel+0x4c>
        case 1 :
            // printf("%s,", CommunicationChannel.MC_Com_Ch_1);
            return IOL_Channel_Page;
 800062c:	2301      	movs	r3, #1
 800062e:	e003      	b.n	8000638 <Decode_MC_CommunicationChannel+0x4c>
        case 2 :
            // printf("%s,", CommunicationChannel.MC_Com_Ch_2);
            return IOL_Channel_Diagnosis;
 8000630:	2302      	movs	r3, #2
 8000632:	e001      	b.n	8000638 <Decode_MC_CommunicationChannel+0x4c>
        case 3 :
            // printf("%s,", CommunicationChannel.MC_Com_Ch_3);
            return IOL_Channel_ISDU;
 8000634:	2303      	movs	r3, #3
 8000636:	e7ff      	b.n	8000638 <Decode_MC_CommunicationChannel+0x4c>
    }
}
 8000638:	4618      	mov	r0, r3
 800063a:	3714      	adds	r7, #20
 800063c:	46bd      	mov	sp, r7
 800063e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000642:	4770      	bx	lr

08000644 <Decode_MC_Address>:

static uint8_t Decode_MC_Address (uint8_t Data)
{
 8000644:	b480      	push	{r7}
 8000646:	b085      	sub	sp, #20
 8000648:	af00      	add	r7, sp, #0
 800064a:	4603      	mov	r3, r0
 800064c:	71fb      	strb	r3, [r7, #7]
    uint8_t MCdata = 0;
 800064e:	2300      	movs	r3, #0
 8000650:	73fb      	strb	r3, [r7, #15]

    MCdata = Data;
 8000652:	79fb      	ldrb	r3, [r7, #7]
 8000654:	73fb      	strb	r3, [r7, #15]
    
    return MCdata & 0x1F;
 8000656:	7bfb      	ldrb	r3, [r7, #15]
 8000658:	f003 031f 	and.w	r3, r3, #31
 800065c:	b2db      	uxtb	r3, r3
}
 800065e:	4618      	mov	r0, r3
 8000660:	3714      	adds	r7, #20
 8000662:	46bd      	mov	sp, r7
 8000664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000668:	4770      	bx	lr

0800066a <Decode_CKT_Type>:

static uint8_t Decode_CKT_Type (uint8_t Data)
{
 800066a:	b480      	push	{r7}
 800066c:	b085      	sub	sp, #20
 800066e:	af00      	add	r7, sp, #0
 8000670:	4603      	mov	r3, r0
 8000672:	71fb      	strb	r3, [r7, #7]
    uint8_t MCdata = 0;
 8000674:	2300      	movs	r3, #0
 8000676:	73fb      	strb	r3, [r7, #15]
    
    MCdata = Data;
 8000678:	79fb      	ldrb	r3, [r7, #7]
 800067a:	73fb      	strb	r3, [r7, #15]

    return (MCdata >> 6) & 0x03;
 800067c:	7bfb      	ldrb	r3, [r7, #15]
 800067e:	099b      	lsrs	r3, r3, #6
 8000680:	b2db      	uxtb	r3, r3
}
 8000682:	4618      	mov	r0, r3
 8000684:	3714      	adds	r7, #20
 8000686:	46bd      	mov	sp, r7
 8000688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068c:	4770      	bx	lr

0800068e <Decode_CKT_Checksum>:

static uint8_t Decode_CKT_Checksum (uint8_t Data)
{
 800068e:	b480      	push	{r7}
 8000690:	b085      	sub	sp, #20
 8000692:	af00      	add	r7, sp, #0
 8000694:	4603      	mov	r3, r0
 8000696:	71fb      	strb	r3, [r7, #7]
    uint8_t MCdata = 0;
 8000698:	2300      	movs	r3, #0
 800069a:	73fb      	strb	r3, [r7, #15]

    MCdata = Data;
 800069c:	79fb      	ldrb	r3, [r7, #7]
 800069e:	73fb      	strb	r3, [r7, #15]

    return MCdata & 0x3F;
 80006a0:	7bfb      	ldrb	r3, [r7, #15]
 80006a2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80006a6:	b2db      	uxtb	r3, r3
}
 80006a8:	4618      	mov	r0, r3
 80006aa:	3714      	adds	r7, #20
 80006ac:	46bd      	mov	sp, r7
 80006ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b2:	4770      	bx	lr

080006b4 <Decode_CKS_GetChecksum>:

static uint8_t Decode_CKS_GetChecksum (const uint8_t * pData, uint8_t length)
{
 80006b4:	b480      	push	{r7}
 80006b6:	b087      	sub	sp, #28
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
 80006bc:	460b      	mov	r3, r1
 80006be:	70fb      	strb	r3, [r7, #3]
    uint8_t ck8 = 0x52;
 80006c0:	2352      	movs	r3, #82	@ 0x52
 80006c2:	75fb      	strb	r3, [r7, #23]
    uint8_t checksumsize = 0;
 80006c4:	2300      	movs	r3, #0
 80006c6:	757b      	strb	r3, [r7, #21]

    checksumsize = length;
 80006c8:	78fb      	ldrb	r3, [r7, #3]
 80006ca:	757b      	strb	r3, [r7, #21]

    for (uint8_t i = 0; i < checksumsize; i++)
 80006cc:	2300      	movs	r3, #0
 80006ce:	75bb      	strb	r3, [r7, #22]
 80006d0:	e009      	b.n	80006e6 <Decode_CKS_GetChecksum+0x32>
    {
        ck8 ^= *pData++;
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	1c5a      	adds	r2, r3, #1
 80006d6:	607a      	str	r2, [r7, #4]
 80006d8:	781a      	ldrb	r2, [r3, #0]
 80006da:	7dfb      	ldrb	r3, [r7, #23]
 80006dc:	4053      	eors	r3, r2
 80006de:	75fb      	strb	r3, [r7, #23]
    for (uint8_t i = 0; i < checksumsize; i++)
 80006e0:	7dbb      	ldrb	r3, [r7, #22]
 80006e2:	3301      	adds	r3, #1
 80006e4:	75bb      	strb	r3, [r7, #22]
 80006e6:	7dba      	ldrb	r2, [r7, #22]
 80006e8:	7d7b      	ldrb	r3, [r7, #21]
 80006ea:	429a      	cmp	r2, r3
 80006ec:	d3f1      	bcc.n	80006d2 <Decode_CKS_GetChecksum+0x1e>
    }

    //Section A.1.6
    uint8_t bit5 = ((ck8 >> 7) & 1U) ^ ((ck8 >> 5) & 1U) ^ ((ck8 >> 3) & 1U) ^ ((ck8 >> 1) & 1U);
 80006ee:	7dfb      	ldrb	r3, [r7, #23]
 80006f0:	09db      	lsrs	r3, r3, #7
 80006f2:	b2da      	uxtb	r2, r3
 80006f4:	7dfb      	ldrb	r3, [r7, #23]
 80006f6:	095b      	lsrs	r3, r3, #5
 80006f8:	b2db      	uxtb	r3, r3
 80006fa:	4053      	eors	r3, r2
 80006fc:	b2da      	uxtb	r2, r3
 80006fe:	7dfb      	ldrb	r3, [r7, #23]
 8000700:	08db      	lsrs	r3, r3, #3
 8000702:	b2db      	uxtb	r3, r3
 8000704:	4053      	eors	r3, r2
 8000706:	b2da      	uxtb	r2, r3
 8000708:	7dfb      	ldrb	r3, [r7, #23]
 800070a:	085b      	lsrs	r3, r3, #1
 800070c:	b2db      	uxtb	r3, r3
 800070e:	4053      	eors	r3, r2
 8000710:	b2db      	uxtb	r3, r3
 8000712:	f003 0301 	and.w	r3, r3, #1
 8000716:	753b      	strb	r3, [r7, #20]
    uint8_t bit4 = ((ck8 >> 6) & 1U) ^ ((ck8 >> 4) & 1U) ^ ((ck8 >> 2) & 1U) ^ (ck8 & 1U);
 8000718:	7dfb      	ldrb	r3, [r7, #23]
 800071a:	099b      	lsrs	r3, r3, #6
 800071c:	b2da      	uxtb	r2, r3
 800071e:	7dfb      	ldrb	r3, [r7, #23]
 8000720:	091b      	lsrs	r3, r3, #4
 8000722:	b2db      	uxtb	r3, r3
 8000724:	4053      	eors	r3, r2
 8000726:	b2da      	uxtb	r2, r3
 8000728:	7dfb      	ldrb	r3, [r7, #23]
 800072a:	089b      	lsrs	r3, r3, #2
 800072c:	b2db      	uxtb	r3, r3
 800072e:	4053      	eors	r3, r2
 8000730:	b2da      	uxtb	r2, r3
 8000732:	7dfb      	ldrb	r3, [r7, #23]
 8000734:	4053      	eors	r3, r2
 8000736:	b2db      	uxtb	r3, r3
 8000738:	f003 0301 	and.w	r3, r3, #1
 800073c:	74fb      	strb	r3, [r7, #19]
    uint8_t bit3 = ((ck8 >> 7) & 1U) ^ ((ck8 >> 6) & 1U);
 800073e:	7dfb      	ldrb	r3, [r7, #23]
 8000740:	09db      	lsrs	r3, r3, #7
 8000742:	b2da      	uxtb	r2, r3
 8000744:	7dfb      	ldrb	r3, [r7, #23]
 8000746:	099b      	lsrs	r3, r3, #6
 8000748:	b2db      	uxtb	r3, r3
 800074a:	4053      	eors	r3, r2
 800074c:	b2db      	uxtb	r3, r3
 800074e:	f003 0301 	and.w	r3, r3, #1
 8000752:	74bb      	strb	r3, [r7, #18]
    uint8_t bit2 = ((ck8 >> 5) & 1U) ^ ((ck8 >> 4) & 1U);
 8000754:	7dfb      	ldrb	r3, [r7, #23]
 8000756:	095b      	lsrs	r3, r3, #5
 8000758:	b2da      	uxtb	r2, r3
 800075a:	7dfb      	ldrb	r3, [r7, #23]
 800075c:	091b      	lsrs	r3, r3, #4
 800075e:	b2db      	uxtb	r3, r3
 8000760:	4053      	eors	r3, r2
 8000762:	b2db      	uxtb	r3, r3
 8000764:	f003 0301 	and.w	r3, r3, #1
 8000768:	747b      	strb	r3, [r7, #17]
    uint8_t bit1 = ((ck8 >> 3) & 1U) ^ ((ck8 >> 2) & 1U);
 800076a:	7dfb      	ldrb	r3, [r7, #23]
 800076c:	08db      	lsrs	r3, r3, #3
 800076e:	b2da      	uxtb	r2, r3
 8000770:	7dfb      	ldrb	r3, [r7, #23]
 8000772:	089b      	lsrs	r3, r3, #2
 8000774:	b2db      	uxtb	r3, r3
 8000776:	4053      	eors	r3, r2
 8000778:	b2db      	uxtb	r3, r3
 800077a:	f003 0301 	and.w	r3, r3, #1
 800077e:	743b      	strb	r3, [r7, #16]
    uint8_t bit0 = ((ck8 >> 1) & 1U) ^ ((ck8 & 1U));
 8000780:	7dfb      	ldrb	r3, [r7, #23]
 8000782:	085b      	lsrs	r3, r3, #1
 8000784:	b2da      	uxtb	r2, r3
 8000786:	7dfb      	ldrb	r3, [r7, #23]
 8000788:	4053      	eors	r3, r2
 800078a:	b2db      	uxtb	r3, r3
 800078c:	f003 0301 	and.w	r3, r3, #1
 8000790:	73fb      	strb	r3, [r7, #15]
    uint8_t ck6 =   bit5 << 5 |
 8000792:	7d3b      	ldrb	r3, [r7, #20]
 8000794:	015b      	lsls	r3, r3, #5
 8000796:	b25a      	sxtb	r2, r3
                    bit4 << 4 |
 8000798:	7cfb      	ldrb	r3, [r7, #19]
 800079a:	011b      	lsls	r3, r3, #4
    uint8_t ck6 =   bit5 << 5 |
 800079c:	b25b      	sxtb	r3, r3
 800079e:	4313      	orrs	r3, r2
 80007a0:	b25a      	sxtb	r2, r3
                    bit3 << 3 |
 80007a2:	7cbb      	ldrb	r3, [r7, #18]
 80007a4:	00db      	lsls	r3, r3, #3
                    bit4 << 4 |
 80007a6:	b25b      	sxtb	r3, r3
 80007a8:	4313      	orrs	r3, r2
 80007aa:	b25a      	sxtb	r2, r3
                    bit2 << 2 |
 80007ac:	7c7b      	ldrb	r3, [r7, #17]
 80007ae:	009b      	lsls	r3, r3, #2
                    bit3 << 3 |
 80007b0:	b25b      	sxtb	r3, r3
 80007b2:	4313      	orrs	r3, r2
 80007b4:	b25a      	sxtb	r2, r3
                    bit1 << 1 |
 80007b6:	7c3b      	ldrb	r3, [r7, #16]
 80007b8:	005b      	lsls	r3, r3, #1
                    bit2 << 2 |
 80007ba:	b25b      	sxtb	r3, r3
 80007bc:	4313      	orrs	r3, r2
 80007be:	b25a      	sxtb	r2, r3
                    bit1 << 1 |
 80007c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007c4:	4313      	orrs	r3, r2
 80007c6:	b25b      	sxtb	r3, r3
    uint8_t ck6 =   bit5 << 5 |
 80007c8:	73bb      	strb	r3, [r7, #14]
                    bit0;
    return ck6;
 80007ca:	7bbb      	ldrb	r3, [r7, #14]
}
 80007cc:	4618      	mov	r0, r3
 80007ce:	371c      	adds	r7, #28
 80007d0:	46bd      	mov	sp, r7
 80007d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d6:	4770      	bx	lr

080007d8 <OP_CKS_GetChecksum>:

//OP 모드 Event 비트 포함 CKS 생성
uint8_t OP_CKS_GetChecksum (const uint8_t * pData, uint8_t length, uint8_t eventflag)
{
 80007d8:	b480      	push	{r7}
 80007da:	b089      	sub	sp, #36	@ 0x24
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
 80007e0:	460b      	mov	r3, r1
 80007e2:	70fb      	strb	r3, [r7, #3]
 80007e4:	4613      	mov	r3, r2
 80007e6:	70bb      	strb	r3, [r7, #2]
    uint8_t ck8 = 0x52;
 80007e8:	2352      	movs	r3, #82	@ 0x52
 80007ea:	77fb      	strb	r3, [r7, #31]
    uint8_t checksumsize = 0;
 80007ec:	2300      	movs	r3, #0
 80007ee:	773b      	strb	r3, [r7, #28]
    uint8_t eventbitset = 0x80;
 80007f0:	2380      	movs	r3, #128	@ 0x80
 80007f2:	76fb      	strb	r3, [r7, #27]

    checksumsize = length;
 80007f4:	78fb      	ldrb	r3, [r7, #3]
 80007f6:	773b      	strb	r3, [r7, #28]

    if (eventflag == 0)
 80007f8:	78bb      	ldrb	r3, [r7, #2]
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	f040 8081 	bne.w	8000902 <OP_CKS_GetChecksum+0x12a>
    {
        for (uint8_t i = 0; i < checksumsize; i++)
 8000800:	2300      	movs	r3, #0
 8000802:	77bb      	strb	r3, [r7, #30]
 8000804:	e009      	b.n	800081a <OP_CKS_GetChecksum+0x42>
        {
            ck8 ^= *pData++;
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	1c5a      	adds	r2, r3, #1
 800080a:	607a      	str	r2, [r7, #4]
 800080c:	781a      	ldrb	r2, [r3, #0]
 800080e:	7ffb      	ldrb	r3, [r7, #31]
 8000810:	4053      	eors	r3, r2
 8000812:	77fb      	strb	r3, [r7, #31]
        for (uint8_t i = 0; i < checksumsize; i++)
 8000814:	7fbb      	ldrb	r3, [r7, #30]
 8000816:	3301      	adds	r3, #1
 8000818:	77bb      	strb	r3, [r7, #30]
 800081a:	7fba      	ldrb	r2, [r7, #30]
 800081c:	7f3b      	ldrb	r3, [r7, #28]
 800081e:	429a      	cmp	r2, r3
 8000820:	d3f1      	bcc.n	8000806 <OP_CKS_GetChecksum+0x2e>
        }
        //Section A.1.6
        uint8_t bit5 = ((ck8 >> 7) & 1U) ^ ((ck8 >> 5) & 1U) ^ ((ck8 >> 3) & 1U) ^ ((ck8 >> 1) & 1U);
 8000822:	7ffb      	ldrb	r3, [r7, #31]
 8000824:	09db      	lsrs	r3, r3, #7
 8000826:	b2da      	uxtb	r2, r3
 8000828:	7ffb      	ldrb	r3, [r7, #31]
 800082a:	095b      	lsrs	r3, r3, #5
 800082c:	b2db      	uxtb	r3, r3
 800082e:	4053      	eors	r3, r2
 8000830:	b2da      	uxtb	r2, r3
 8000832:	7ffb      	ldrb	r3, [r7, #31]
 8000834:	08db      	lsrs	r3, r3, #3
 8000836:	b2db      	uxtb	r3, r3
 8000838:	4053      	eors	r3, r2
 800083a:	b2da      	uxtb	r2, r3
 800083c:	7ffb      	ldrb	r3, [r7, #31]
 800083e:	085b      	lsrs	r3, r3, #1
 8000840:	b2db      	uxtb	r3, r3
 8000842:	4053      	eors	r3, r2
 8000844:	b2db      	uxtb	r3, r3
 8000846:	f003 0301 	and.w	r3, r3, #1
 800084a:	74fb      	strb	r3, [r7, #19]
        uint8_t bit4 = ((ck8 >> 6) & 1U) ^ ((ck8 >> 4) & 1U) ^ ((ck8 >> 2) & 1U) ^ (ck8 & 1U);
 800084c:	7ffb      	ldrb	r3, [r7, #31]
 800084e:	099b      	lsrs	r3, r3, #6
 8000850:	b2da      	uxtb	r2, r3
 8000852:	7ffb      	ldrb	r3, [r7, #31]
 8000854:	091b      	lsrs	r3, r3, #4
 8000856:	b2db      	uxtb	r3, r3
 8000858:	4053      	eors	r3, r2
 800085a:	b2da      	uxtb	r2, r3
 800085c:	7ffb      	ldrb	r3, [r7, #31]
 800085e:	089b      	lsrs	r3, r3, #2
 8000860:	b2db      	uxtb	r3, r3
 8000862:	4053      	eors	r3, r2
 8000864:	b2da      	uxtb	r2, r3
 8000866:	7ffb      	ldrb	r3, [r7, #31]
 8000868:	4053      	eors	r3, r2
 800086a:	b2db      	uxtb	r3, r3
 800086c:	f003 0301 	and.w	r3, r3, #1
 8000870:	74bb      	strb	r3, [r7, #18]
        uint8_t bit3 = ((ck8 >> 7) & 1U) ^ ((ck8 >> 6) & 1U);
 8000872:	7ffb      	ldrb	r3, [r7, #31]
 8000874:	09db      	lsrs	r3, r3, #7
 8000876:	b2da      	uxtb	r2, r3
 8000878:	7ffb      	ldrb	r3, [r7, #31]
 800087a:	099b      	lsrs	r3, r3, #6
 800087c:	b2db      	uxtb	r3, r3
 800087e:	4053      	eors	r3, r2
 8000880:	b2db      	uxtb	r3, r3
 8000882:	f003 0301 	and.w	r3, r3, #1
 8000886:	747b      	strb	r3, [r7, #17]
        uint8_t bit2 = ((ck8 >> 5) & 1U) ^ ((ck8 >> 4) & 1U);
 8000888:	7ffb      	ldrb	r3, [r7, #31]
 800088a:	095b      	lsrs	r3, r3, #5
 800088c:	b2da      	uxtb	r2, r3
 800088e:	7ffb      	ldrb	r3, [r7, #31]
 8000890:	091b      	lsrs	r3, r3, #4
 8000892:	b2db      	uxtb	r3, r3
 8000894:	4053      	eors	r3, r2
 8000896:	b2db      	uxtb	r3, r3
 8000898:	f003 0301 	and.w	r3, r3, #1
 800089c:	743b      	strb	r3, [r7, #16]
        uint8_t bit1 = ((ck8 >> 3) & 1U) ^ ((ck8 >> 2) & 1U);
 800089e:	7ffb      	ldrb	r3, [r7, #31]
 80008a0:	08db      	lsrs	r3, r3, #3
 80008a2:	b2da      	uxtb	r2, r3
 80008a4:	7ffb      	ldrb	r3, [r7, #31]
 80008a6:	089b      	lsrs	r3, r3, #2
 80008a8:	b2db      	uxtb	r3, r3
 80008aa:	4053      	eors	r3, r2
 80008ac:	b2db      	uxtb	r3, r3
 80008ae:	f003 0301 	and.w	r3, r3, #1
 80008b2:	73fb      	strb	r3, [r7, #15]
        uint8_t bit0 = ((ck8 >> 1) & 1U) ^ ((ck8 & 1U));
 80008b4:	7ffb      	ldrb	r3, [r7, #31]
 80008b6:	085b      	lsrs	r3, r3, #1
 80008b8:	b2da      	uxtb	r2, r3
 80008ba:	7ffb      	ldrb	r3, [r7, #31]
 80008bc:	4053      	eors	r3, r2
 80008be:	b2db      	uxtb	r3, r3
 80008c0:	f003 0301 	and.w	r3, r3, #1
 80008c4:	73bb      	strb	r3, [r7, #14]
        uint8_t ck6 =   bit5 << 5 |
 80008c6:	7cfb      	ldrb	r3, [r7, #19]
 80008c8:	015b      	lsls	r3, r3, #5
 80008ca:	b25a      	sxtb	r2, r3
                        bit4 << 4 |
 80008cc:	7cbb      	ldrb	r3, [r7, #18]
 80008ce:	011b      	lsls	r3, r3, #4
        uint8_t ck6 =   bit5 << 5 |
 80008d0:	b25b      	sxtb	r3, r3
 80008d2:	4313      	orrs	r3, r2
 80008d4:	b25a      	sxtb	r2, r3
                        bit3 << 3 |
 80008d6:	7c7b      	ldrb	r3, [r7, #17]
 80008d8:	00db      	lsls	r3, r3, #3
                        bit4 << 4 |
 80008da:	b25b      	sxtb	r3, r3
 80008dc:	4313      	orrs	r3, r2
 80008de:	b25a      	sxtb	r2, r3
                        bit2 << 2 |
 80008e0:	7c3b      	ldrb	r3, [r7, #16]
 80008e2:	009b      	lsls	r3, r3, #2
                        bit3 << 3 |
 80008e4:	b25b      	sxtb	r3, r3
 80008e6:	4313      	orrs	r3, r2
 80008e8:	b25a      	sxtb	r2, r3
                        bit1 << 1 |
 80008ea:	7bfb      	ldrb	r3, [r7, #15]
 80008ec:	005b      	lsls	r3, r3, #1
                        bit2 << 2 |
 80008ee:	b25b      	sxtb	r3, r3
 80008f0:	4313      	orrs	r3, r2
 80008f2:	b25a      	sxtb	r2, r3
                        bit1 << 1 |
 80008f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80008f8:	4313      	orrs	r3, r2
 80008fa:	b25b      	sxtb	r3, r3
        uint8_t ck6 =   bit5 << 5 |
 80008fc:	737b      	strb	r3, [r7, #13]
                        bit0;
        
        return ck6;
 80008fe:	7b7b      	ldrb	r3, [r7, #13]
 8000900:	e08b      	b.n	8000a1a <OP_CKS_GetChecksum+0x242>
    }
    else if (eventflag == 1)
 8000902:	78bb      	ldrb	r3, [r7, #2]
 8000904:	2b01      	cmp	r3, #1
 8000906:	f040 8088 	bne.w	8000a1a <OP_CKS_GetChecksum+0x242>
    {
        for (uint8_t i = 0; i < checksumsize; i++)
 800090a:	2300      	movs	r3, #0
 800090c:	777b      	strb	r3, [r7, #29]
 800090e:	e009      	b.n	8000924 <OP_CKS_GetChecksum+0x14c>
        {
            ck8 ^= *pData++;
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	1c5a      	adds	r2, r3, #1
 8000914:	607a      	str	r2, [r7, #4]
 8000916:	781a      	ldrb	r2, [r3, #0]
 8000918:	7ffb      	ldrb	r3, [r7, #31]
 800091a:	4053      	eors	r3, r2
 800091c:	77fb      	strb	r3, [r7, #31]
        for (uint8_t i = 0; i < checksumsize; i++)
 800091e:	7f7b      	ldrb	r3, [r7, #29]
 8000920:	3301      	adds	r3, #1
 8000922:	777b      	strb	r3, [r7, #29]
 8000924:	7f7a      	ldrb	r2, [r7, #29]
 8000926:	7f3b      	ldrb	r3, [r7, #28]
 8000928:	429a      	cmp	r2, r3
 800092a:	d3f1      	bcc.n	8000910 <OP_CKS_GetChecksum+0x138>
        }

        ck8 ^= eventbitset;
 800092c:	7ffa      	ldrb	r2, [r7, #31]
 800092e:	7efb      	ldrb	r3, [r7, #27]
 8000930:	4053      	eors	r3, r2
 8000932:	77fb      	strb	r3, [r7, #31]

        //Section A.1.6
        uint8_t bit5 = ((ck8 >> 7) & 1U) ^ ((ck8 >> 5) & 1U) ^ ((ck8 >> 3) & 1U) ^ ((ck8 >> 1) & 1U);
 8000934:	7ffb      	ldrb	r3, [r7, #31]
 8000936:	09db      	lsrs	r3, r3, #7
 8000938:	b2da      	uxtb	r2, r3
 800093a:	7ffb      	ldrb	r3, [r7, #31]
 800093c:	095b      	lsrs	r3, r3, #5
 800093e:	b2db      	uxtb	r3, r3
 8000940:	4053      	eors	r3, r2
 8000942:	b2da      	uxtb	r2, r3
 8000944:	7ffb      	ldrb	r3, [r7, #31]
 8000946:	08db      	lsrs	r3, r3, #3
 8000948:	b2db      	uxtb	r3, r3
 800094a:	4053      	eors	r3, r2
 800094c:	b2da      	uxtb	r2, r3
 800094e:	7ffb      	ldrb	r3, [r7, #31]
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	b2db      	uxtb	r3, r3
 8000954:	4053      	eors	r3, r2
 8000956:	b2db      	uxtb	r3, r3
 8000958:	f003 0301 	and.w	r3, r3, #1
 800095c:	76bb      	strb	r3, [r7, #26]
        uint8_t bit4 = ((ck8 >> 6) & 1U) ^ ((ck8 >> 4) & 1U) ^ ((ck8 >> 2) & 1U) ^ (ck8 & 1U);
 800095e:	7ffb      	ldrb	r3, [r7, #31]
 8000960:	099b      	lsrs	r3, r3, #6
 8000962:	b2da      	uxtb	r2, r3
 8000964:	7ffb      	ldrb	r3, [r7, #31]
 8000966:	091b      	lsrs	r3, r3, #4
 8000968:	b2db      	uxtb	r3, r3
 800096a:	4053      	eors	r3, r2
 800096c:	b2da      	uxtb	r2, r3
 800096e:	7ffb      	ldrb	r3, [r7, #31]
 8000970:	089b      	lsrs	r3, r3, #2
 8000972:	b2db      	uxtb	r3, r3
 8000974:	4053      	eors	r3, r2
 8000976:	b2da      	uxtb	r2, r3
 8000978:	7ffb      	ldrb	r3, [r7, #31]
 800097a:	4053      	eors	r3, r2
 800097c:	b2db      	uxtb	r3, r3
 800097e:	f003 0301 	and.w	r3, r3, #1
 8000982:	767b      	strb	r3, [r7, #25]
        uint8_t bit3 = ((ck8 >> 7) & 1U) ^ ((ck8 >> 6) & 1U);
 8000984:	7ffb      	ldrb	r3, [r7, #31]
 8000986:	09db      	lsrs	r3, r3, #7
 8000988:	b2da      	uxtb	r2, r3
 800098a:	7ffb      	ldrb	r3, [r7, #31]
 800098c:	099b      	lsrs	r3, r3, #6
 800098e:	b2db      	uxtb	r3, r3
 8000990:	4053      	eors	r3, r2
 8000992:	b2db      	uxtb	r3, r3
 8000994:	f003 0301 	and.w	r3, r3, #1
 8000998:	763b      	strb	r3, [r7, #24]
        uint8_t bit2 = ((ck8 >> 5) & 1U) ^ ((ck8 >> 4) & 1U);
 800099a:	7ffb      	ldrb	r3, [r7, #31]
 800099c:	095b      	lsrs	r3, r3, #5
 800099e:	b2da      	uxtb	r2, r3
 80009a0:	7ffb      	ldrb	r3, [r7, #31]
 80009a2:	091b      	lsrs	r3, r3, #4
 80009a4:	b2db      	uxtb	r3, r3
 80009a6:	4053      	eors	r3, r2
 80009a8:	b2db      	uxtb	r3, r3
 80009aa:	f003 0301 	and.w	r3, r3, #1
 80009ae:	75fb      	strb	r3, [r7, #23]
        uint8_t bit1 = ((ck8 >> 3) & 1U) ^ ((ck8 >> 2) & 1U);
 80009b0:	7ffb      	ldrb	r3, [r7, #31]
 80009b2:	08db      	lsrs	r3, r3, #3
 80009b4:	b2da      	uxtb	r2, r3
 80009b6:	7ffb      	ldrb	r3, [r7, #31]
 80009b8:	089b      	lsrs	r3, r3, #2
 80009ba:	b2db      	uxtb	r3, r3
 80009bc:	4053      	eors	r3, r2
 80009be:	b2db      	uxtb	r3, r3
 80009c0:	f003 0301 	and.w	r3, r3, #1
 80009c4:	75bb      	strb	r3, [r7, #22]
        uint8_t bit0 = ((ck8 >> 1) & 1U) ^ ((ck8 & 1U));
 80009c6:	7ffb      	ldrb	r3, [r7, #31]
 80009c8:	085b      	lsrs	r3, r3, #1
 80009ca:	b2da      	uxtb	r2, r3
 80009cc:	7ffb      	ldrb	r3, [r7, #31]
 80009ce:	4053      	eors	r3, r2
 80009d0:	b2db      	uxtb	r3, r3
 80009d2:	f003 0301 	and.w	r3, r3, #1
 80009d6:	757b      	strb	r3, [r7, #21]
        uint8_t ck6 =   bit5 << 5 |
 80009d8:	7ebb      	ldrb	r3, [r7, #26]
 80009da:	015b      	lsls	r3, r3, #5
 80009dc:	b25a      	sxtb	r2, r3
                        bit4 << 4 |
 80009de:	7e7b      	ldrb	r3, [r7, #25]
 80009e0:	011b      	lsls	r3, r3, #4
        uint8_t ck6 =   bit5 << 5 |
 80009e2:	b25b      	sxtb	r3, r3
 80009e4:	4313      	orrs	r3, r2
 80009e6:	b25a      	sxtb	r2, r3
                        bit3 << 3 |
 80009e8:	7e3b      	ldrb	r3, [r7, #24]
 80009ea:	00db      	lsls	r3, r3, #3
                        bit4 << 4 |
 80009ec:	b25b      	sxtb	r3, r3
 80009ee:	4313      	orrs	r3, r2
 80009f0:	b25a      	sxtb	r2, r3
                        bit2 << 2 |
 80009f2:	7dfb      	ldrb	r3, [r7, #23]
 80009f4:	009b      	lsls	r3, r3, #2
                        bit3 << 3 |
 80009f6:	b25b      	sxtb	r3, r3
 80009f8:	4313      	orrs	r3, r2
 80009fa:	b25a      	sxtb	r2, r3
                        bit1 << 1 |
 80009fc:	7dbb      	ldrb	r3, [r7, #22]
 80009fe:	005b      	lsls	r3, r3, #1
                        bit2 << 2 |
 8000a00:	b25b      	sxtb	r3, r3
 8000a02:	4313      	orrs	r3, r2
 8000a04:	b25a      	sxtb	r2, r3
                        bit1 << 1 |
 8000a06:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000a0a:	4313      	orrs	r3, r2
 8000a0c:	b25b      	sxtb	r3, r3
        uint8_t ck6 =   bit5 << 5 |
 8000a0e:	753b      	strb	r3, [r7, #20]
                        bit0;
        
        return eventbitset | ck6;
 8000a10:	7efa      	ldrb	r2, [r7, #27]
 8000a12:	7d3b      	ldrb	r3, [r7, #20]
 8000a14:	4313      	orrs	r3, r2
 8000a16:	b2db      	uxtb	r3, r3
 8000a18:	e7ff      	b.n	8000a1a <OP_CKS_GetChecksum+0x242>
    }
}
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	3724      	adds	r7, #36	@ 0x24
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a24:	4770      	bx	lr
	...

08000a28 <IOL_StartUp_Read_MakePacket>:

static uint8_t* IOL_StartUp_Read_MakePacket (uint8_t * pData)
{
 8000a28:	b590      	push	{r4, r7, lr}
 8000a2a:	b085      	sub	sp, #20
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
    uint8_t i = 0;
 8000a30:	2300      	movs	r3, #0
 8000a32:	73fb      	strb	r3, [r7, #15]
    
    pData[0] = IOL_Page1_SeqValue[Page1_seq++];
 8000a34:	4b0b      	ldr	r3, [pc, #44]	@ (8000a64 <IOL_StartUp_Read_MakePacket+0x3c>)
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	1c5a      	adds	r2, r3, #1
 8000a3a:	b2d1      	uxtb	r1, r2
 8000a3c:	4a09      	ldr	r2, [pc, #36]	@ (8000a64 <IOL_StartUp_Read_MakePacket+0x3c>)
 8000a3e:	7011      	strb	r1, [r2, #0]
 8000a40:	461a      	mov	r2, r3
 8000a42:	4b09      	ldr	r3, [pc, #36]	@ (8000a68 <IOL_StartUp_Read_MakePacket+0x40>)
 8000a44:	5c9a      	ldrb	r2, [r3, r2]
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	701a      	strb	r2, [r3, #0]
    pData[1] = Decode_CKS_GetChecksum(&pData[0], 1);
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	1c5c      	adds	r4, r3, #1
 8000a4e:	2101      	movs	r1, #1
 8000a50:	6878      	ldr	r0, [r7, #4]
 8000a52:	f7ff fe2f 	bl	80006b4 <Decode_CKS_GetChecksum>
 8000a56:	4603      	mov	r3, r0
 8000a58:	7023      	strb	r3, [r4, #0]
    
    return pData;
 8000a5a:	687b      	ldr	r3, [r7, #4]
}
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	3714      	adds	r7, #20
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd90      	pop	{r4, r7, pc}
 8000a64:	20000290 	.word	0x20000290
 8000a68:	20000004 	.word	0x20000004

08000a6c <IOL_StartUp_Write_MakePacket>:

static uint8_t* IOL_StartUp_Write_MakePacket (uint8_t * pData)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b084      	sub	sp, #16
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
    uint8_t i = 0;
 8000a74:	2300      	movs	r3, #0
 8000a76:	73fb      	strb	r3, [r7, #15]
    
    pData[0] = Decode_CKS_GetChecksum(&IOL_Checksum_SeedValue, 0);
 8000a78:	2100      	movs	r1, #0
 8000a7a:	4806      	ldr	r0, [pc, #24]	@ (8000a94 <IOL_StartUp_Write_MakePacket+0x28>)
 8000a7c:	f7ff fe1a 	bl	80006b4 <Decode_CKS_GetChecksum>
 8000a80:	4603      	mov	r3, r0
 8000a82:	461a      	mov	r2, r3
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	701a      	strb	r2, [r3, #0]
    
    return pData;
 8000a88:	687b      	ldr	r3, [r7, #4]
}
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	3710      	adds	r7, #16
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	20000000 	.word	0x20000000

08000a98 <IOL_State_StartUp>:

static uint8_t IOL_State_StartUp (void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b084      	sub	sp, #16
 8000a9c:	af00      	add	r7, sp, #0
    uint8_t Page_ChecksumValue = 0;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	71fb      	strb	r3, [r7, #7]
    uint8_t Length = 0;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	73fb      	strb	r3, [r7, #15]
    uint8_t * pData;

    switch (IOL_M2D_rxpacket.rw)
 8000aa6:	4b19      	ldr	r3, [pc, #100]	@ (8000b0c <IOL_State_StartUp+0x74>)
 8000aa8:	781b      	ldrb	r3, [r3, #0]
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d008      	beq.n	8000ac0 <IOL_State_StartUp+0x28>
 8000aae:	2b01      	cmp	r3, #1
 8000ab0:	d10d      	bne.n	8000ace <IOL_State_StartUp+0x36>
    {
        case IOL_RW_Read :
            //to do
            Length = 2;
 8000ab2:	2302      	movs	r3, #2
 8000ab4:	73fb      	strb	r3, [r7, #15]
            pData = IOL_StartUp_Read_MakePacket(uart1_rx_IDLE_buf);
 8000ab6:	4816      	ldr	r0, [pc, #88]	@ (8000b10 <IOL_State_StartUp+0x78>)
 8000ab8:	f7ff ffb6 	bl	8000a28 <IOL_StartUp_Read_MakePacket>
 8000abc:	60b8      	str	r0, [r7, #8]
            break;
 8000abe:	e006      	b.n	8000ace <IOL_State_StartUp+0x36>
        case IOL_RW_Write :
            // to do
            Length = 1;
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	73fb      	strb	r3, [r7, #15]
            pData = IOL_StartUp_Write_MakePacket(uart1_rx_IDLE_buf);
 8000ac4:	4812      	ldr	r0, [pc, #72]	@ (8000b10 <IOL_State_StartUp+0x78>)
 8000ac6:	f7ff ffd1 	bl	8000a6c <IOL_StartUp_Write_MakePacket>
 8000aca:	60b8      	str	r0, [r7, #8]
            break;
 8000acc:	bf00      	nop
    }

    IOL_ENABLE;
 8000ace:	2201      	movs	r2, #1
 8000ad0:	2140      	movs	r1, #64	@ 0x40
 8000ad2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ad6:	f002 f933 	bl	8002d40 <HAL_GPIO_WritePin>
    if (HAL_UART_Transmit_IT(&huart1, (uint8_t *) pData, Length) != HAL_OK)
 8000ada:	7bfb      	ldrb	r3, [r7, #15]
 8000adc:	b29b      	uxth	r3, r3
 8000ade:	461a      	mov	r2, r3
 8000ae0:	68b9      	ldr	r1, [r7, #8]
 8000ae2:	480c      	ldr	r0, [pc, #48]	@ (8000b14 <IOL_State_StartUp+0x7c>)
 8000ae4:	f005 fbd8 	bl	8006298 <HAL_UART_Transmit_IT>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <IOL_State_StartUp+0x5a>
    {
        Error_Handler();
 8000aee:	f000 fd46 	bl	800157e <Error_Handler>
    }

    //Master Command to PreOP.
    if (uart1_rx_IDLE_buf[2] == 0x9A)
 8000af2:	4b07      	ldr	r3, [pc, #28]	@ (8000b10 <IOL_State_StartUp+0x78>)
 8000af4:	789b      	ldrb	r3, [r3, #2]
 8000af6:	2b9a      	cmp	r3, #154	@ 0x9a
 8000af8:	d102      	bne.n	8000b00 <IOL_State_StartUp+0x68>
    {
        stateIOLseq = IOL_PreOP;
 8000afa:	4b07      	ldr	r3, [pc, #28]	@ (8000b18 <IOL_State_StartUp+0x80>)
 8000afc:	2201      	movs	r2, #1
 8000afe:	701a      	strb	r2, [r3, #0]
    }

    return ;
 8000b00:	bf00      	nop
 8000b02:	bf00      	nop
}
 8000b04:	4618      	mov	r0, r3
 8000b06:	3710      	adds	r7, #16
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	20000e9c 	.word	0x20000e9c
 8000b10:	20000abc 	.word	0x20000abc
 8000b14:	20000f90 	.word	0x20000f90
 8000b18:	20001034 	.word	0x20001034

08000b1c <IOL_State_PreOP_Read_Channel>:

//  OP 모드 Read 인 경우 Channel 별로 프로세스 처리
static uint8_t IOL_State_PreOP_Read_Channel (void)
{
 8000b1c:	b590      	push	{r4, r7, lr}
 8000b1e:	b083      	sub	sp, #12
 8000b20:	af00      	add	r7, sp, #0
    uint8_t i, j = 0;
 8000b22:	2300      	movs	r3, #0
 8000b24:	71bb      	strb	r3, [r7, #6]
    uint8_t IOL_Commchannel_value = 0;
 8000b26:	2300      	movs	r3, #0
 8000b28:	717b      	strb	r3, [r7, #5]
    static uint8_t preop_data_arr[PREOP_DATA_LENGTH + 1] = {0}; // + 1   CKS 

    for (i=0; i < PREOP_DATA_LENGTH; i++)
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	71fb      	strb	r3, [r7, #7]
 8000b2e:	e00e      	b.n	8000b4e <IOL_State_PreOP_Read_Channel+0x32>
    {
        preop_data_arr[i]= IOL_PreOP_Packet[PreOP_seq_cnt][i];
 8000b30:	4b34      	ldr	r3, [pc, #208]	@ (8000c04 <IOL_State_PreOP_Read_Channel+0xe8>)
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	4619      	mov	r1, r3
 8000b36:	79fa      	ldrb	r2, [r7, #7]
 8000b38:	79fb      	ldrb	r3, [r7, #7]
 8000b3a:	4833      	ldr	r0, [pc, #204]	@ (8000c08 <IOL_State_PreOP_Read_Channel+0xec>)
 8000b3c:	00c9      	lsls	r1, r1, #3
 8000b3e:	4401      	add	r1, r0
 8000b40:	440a      	add	r2, r1
 8000b42:	7811      	ldrb	r1, [r2, #0]
 8000b44:	4a31      	ldr	r2, [pc, #196]	@ (8000c0c <IOL_State_PreOP_Read_Channel+0xf0>)
 8000b46:	54d1      	strb	r1, [r2, r3]
    for (i=0; i < PREOP_DATA_LENGTH; i++)
 8000b48:	79fb      	ldrb	r3, [r7, #7]
 8000b4a:	3301      	adds	r3, #1
 8000b4c:	71fb      	strb	r3, [r7, #7]
 8000b4e:	79fb      	ldrb	r3, [r7, #7]
 8000b50:	2b07      	cmp	r3, #7
 8000b52:	d9ed      	bls.n	8000b30 <IOL_State_PreOP_Read_Channel+0x14>
    }

    switch (IOL_M2D_rxpacket.commchannel)
 8000b54:	4b2e      	ldr	r3, [pc, #184]	@ (8000c10 <IOL_State_PreOP_Read_Channel+0xf4>)
 8000b56:	785b      	ldrb	r3, [r3, #1]
 8000b58:	2b03      	cmp	r3, #3
 8000b5a:	d837      	bhi.n	8000bcc <IOL_State_PreOP_Read_Channel+0xb0>
 8000b5c:	a201      	add	r2, pc, #4	@ (adr r2, 8000b64 <IOL_State_PreOP_Read_Channel+0x48>)
 8000b5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b62:	bf00      	nop
 8000b64:	08000b75 	.word	0x08000b75
 8000b68:	08000b8b 	.word	0x08000b8b
 8000b6c:	08000ba1 	.word	0x08000ba1
 8000b70:	08000bb7 	.word	0x08000bb7
    {
        case IOL_Channel_Process :
            preop_data_arr[i] = OP_CKS_GetChecksum(&preop_data_arr[0], PREOP_DATA_LENGTH, 0);
 8000b74:	79fc      	ldrb	r4, [r7, #7]
 8000b76:	2200      	movs	r2, #0
 8000b78:	2108      	movs	r1, #8
 8000b7a:	4824      	ldr	r0, [pc, #144]	@ (8000c0c <IOL_State_PreOP_Read_Channel+0xf0>)
 8000b7c:	f7ff fe2c 	bl	80007d8 <OP_CKS_GetChecksum>
 8000b80:	4603      	mov	r3, r0
 8000b82:	461a      	mov	r2, r3
 8000b84:	4b21      	ldr	r3, [pc, #132]	@ (8000c0c <IOL_State_PreOP_Read_Channel+0xf0>)
 8000b86:	551a      	strb	r2, [r3, r4]
            break;
 8000b88:	e020      	b.n	8000bcc <IOL_State_PreOP_Read_Channel+0xb0>

        case IOL_Channel_Page :
            preop_data_arr[i] = OP_CKS_GetChecksum(&preop_data_arr[0], PREOP_DATA_LENGTH, 0);
 8000b8a:	79fc      	ldrb	r4, [r7, #7]
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	2108      	movs	r1, #8
 8000b90:	481e      	ldr	r0, [pc, #120]	@ (8000c0c <IOL_State_PreOP_Read_Channel+0xf0>)
 8000b92:	f7ff fe21 	bl	80007d8 <OP_CKS_GetChecksum>
 8000b96:	4603      	mov	r3, r0
 8000b98:	461a      	mov	r2, r3
 8000b9a:	4b1c      	ldr	r3, [pc, #112]	@ (8000c0c <IOL_State_PreOP_Read_Channel+0xf0>)
 8000b9c:	551a      	strb	r2, [r3, r4]
            break;
 8000b9e:	e015      	b.n	8000bcc <IOL_State_PreOP_Read_Channel+0xb0>

        case IOL_Channel_Diagnosis :
            preop_data_arr[i] = OP_CKS_GetChecksum(&preop_data_arr[0], PREOP_DATA_LENGTH, 1);
 8000ba0:	79fc      	ldrb	r4, [r7, #7]
 8000ba2:	2201      	movs	r2, #1
 8000ba4:	2108      	movs	r1, #8
 8000ba6:	4819      	ldr	r0, [pc, #100]	@ (8000c0c <IOL_State_PreOP_Read_Channel+0xf0>)
 8000ba8:	f7ff fe16 	bl	80007d8 <OP_CKS_GetChecksum>
 8000bac:	4603      	mov	r3, r0
 8000bae:	461a      	mov	r2, r3
 8000bb0:	4b16      	ldr	r3, [pc, #88]	@ (8000c0c <IOL_State_PreOP_Read_Channel+0xf0>)
 8000bb2:	551a      	strb	r2, [r3, r4]
            break;
 8000bb4:	e00a      	b.n	8000bcc <IOL_State_PreOP_Read_Channel+0xb0>

        case IOL_Channel_ISDU :
            preop_data_arr[i] = OP_CKS_GetChecksum(&preop_data_arr[0], PREOP_DATA_LENGTH, 0);
 8000bb6:	79fc      	ldrb	r4, [r7, #7]
 8000bb8:	2200      	movs	r2, #0
 8000bba:	2108      	movs	r1, #8
 8000bbc:	4813      	ldr	r0, [pc, #76]	@ (8000c0c <IOL_State_PreOP_Read_Channel+0xf0>)
 8000bbe:	f7ff fe0b 	bl	80007d8 <OP_CKS_GetChecksum>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	461a      	mov	r2, r3
 8000bc6:	4b11      	ldr	r3, [pc, #68]	@ (8000c0c <IOL_State_PreOP_Read_Channel+0xf0>)
 8000bc8:	551a      	strb	r2, [r3, r4]
            break;
 8000bca:	bf00      	nop
    }

    PreOP_seq_cnt++;
 8000bcc:	4b0d      	ldr	r3, [pc, #52]	@ (8000c04 <IOL_State_PreOP_Read_Channel+0xe8>)
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	3301      	adds	r3, #1
 8000bd2:	b2da      	uxtb	r2, r3
 8000bd4:	4b0b      	ldr	r3, [pc, #44]	@ (8000c04 <IOL_State_PreOP_Read_Channel+0xe8>)
 8000bd6:	701a      	strb	r2, [r3, #0]

    IOL_ENABLE;
 8000bd8:	2201      	movs	r2, #1
 8000bda:	2140      	movs	r1, #64	@ 0x40
 8000bdc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000be0:	f002 f8ae 	bl	8002d40 <HAL_GPIO_WritePin>
    if (HAL_UART_Transmit_IT(&huart1, preop_data_arr, 9) != HAL_OK)
 8000be4:	2209      	movs	r2, #9
 8000be6:	4909      	ldr	r1, [pc, #36]	@ (8000c0c <IOL_State_PreOP_Read_Channel+0xf0>)
 8000be8:	480a      	ldr	r0, [pc, #40]	@ (8000c14 <IOL_State_PreOP_Read_Channel+0xf8>)
 8000bea:	f005 fb55 	bl	8006298 <HAL_UART_Transmit_IT>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d001      	beq.n	8000bf8 <IOL_State_PreOP_Read_Channel+0xdc>
    {
        Error_Handler();
 8000bf4:	f000 fcc3 	bl	800157e <Error_Handler>
    }

    return ;
 8000bf8:	bf00      	nop
 8000bfa:	bf00      	nop
}
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	370c      	adds	r7, #12
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd90      	pop	{r4, r7, pc}
 8000c04:	20000291 	.word	0x20000291
 8000c08:	20000014 	.word	0x20000014
 8000c0c:	20000294 	.word	0x20000294
 8000c10:	20000e9c 	.word	0x20000e9c
 8000c14:	20000f90 	.word	0x20000f90

08000c18 <IOL_State_PreOP_Write_Channel>:

//  OP 모드 Write 인 경우 Channel 별로 프로세스 처리
static uint8_t IOL_State_PreOP_Write_Channel (void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
    uint8_t i, j = 0;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	71fb      	strb	r3, [r7, #7]
    uint8_t IOL_Commchannel_value = 0;
 8000c22:	2300      	movs	r3, #0
 8000c24:	71bb      	strb	r3, [r7, #6]
    static uint8_t preop_data_arr[PREOP_DATA_LENGTH + 1] = {0}; // + 1   CKS 

    switch (IOL_M2D_rxpacket.commchannel)
 8000c26:	4b2a      	ldr	r3, [pc, #168]	@ (8000cd0 <IOL_State_PreOP_Write_Channel+0xb8>)
 8000c28:	785b      	ldrb	r3, [r3, #1]
 8000c2a:	2b03      	cmp	r3, #3
 8000c2c:	d832      	bhi.n	8000c94 <IOL_State_PreOP_Write_Channel+0x7c>
 8000c2e:	a201      	add	r2, pc, #4	@ (adr r2, 8000c34 <IOL_State_PreOP_Write_Channel+0x1c>)
 8000c30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c34:	08000c45 	.word	0x08000c45
 8000c38:	08000c59 	.word	0x08000c59
 8000c3c:	08000c6d 	.word	0x08000c6d
 8000c40:	08000c81 	.word	0x08000c81
    {
        case IOL_Channel_Process :
            preop_data_arr[0] = OP_CKS_GetChecksum(&preop_data_arr[0], 0, 0);
 8000c44:	2200      	movs	r2, #0
 8000c46:	2100      	movs	r1, #0
 8000c48:	4822      	ldr	r0, [pc, #136]	@ (8000cd4 <IOL_State_PreOP_Write_Channel+0xbc>)
 8000c4a:	f7ff fdc5 	bl	80007d8 <OP_CKS_GetChecksum>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	461a      	mov	r2, r3
 8000c52:	4b20      	ldr	r3, [pc, #128]	@ (8000cd4 <IOL_State_PreOP_Write_Channel+0xbc>)
 8000c54:	701a      	strb	r2, [r3, #0]
            break;
 8000c56:	e01d      	b.n	8000c94 <IOL_State_PreOP_Write_Channel+0x7c>

        case IOL_Channel_Page :
            preop_data_arr[0] = OP_CKS_GetChecksum(&preop_data_arr[0], 0, 0);
 8000c58:	2200      	movs	r2, #0
 8000c5a:	2100      	movs	r1, #0
 8000c5c:	481d      	ldr	r0, [pc, #116]	@ (8000cd4 <IOL_State_PreOP_Write_Channel+0xbc>)
 8000c5e:	f7ff fdbb 	bl	80007d8 <OP_CKS_GetChecksum>
 8000c62:	4603      	mov	r3, r0
 8000c64:	461a      	mov	r2, r3
 8000c66:	4b1b      	ldr	r3, [pc, #108]	@ (8000cd4 <IOL_State_PreOP_Write_Channel+0xbc>)
 8000c68:	701a      	strb	r2, [r3, #0]
            break;
 8000c6a:	e013      	b.n	8000c94 <IOL_State_PreOP_Write_Channel+0x7c>

        case IOL_Channel_Diagnosis :
            preop_data_arr[0] = OP_CKS_GetChecksum(&preop_data_arr[0], 0, 1);
 8000c6c:	2201      	movs	r2, #1
 8000c6e:	2100      	movs	r1, #0
 8000c70:	4818      	ldr	r0, [pc, #96]	@ (8000cd4 <IOL_State_PreOP_Write_Channel+0xbc>)
 8000c72:	f7ff fdb1 	bl	80007d8 <OP_CKS_GetChecksum>
 8000c76:	4603      	mov	r3, r0
 8000c78:	461a      	mov	r2, r3
 8000c7a:	4b16      	ldr	r3, [pc, #88]	@ (8000cd4 <IOL_State_PreOP_Write_Channel+0xbc>)
 8000c7c:	701a      	strb	r2, [r3, #0]
            break;
 8000c7e:	e009      	b.n	8000c94 <IOL_State_PreOP_Write_Channel+0x7c>

        case IOL_Channel_ISDU :
            preop_data_arr[0] = OP_CKS_GetChecksum(&preop_data_arr[0], 0, 1);
 8000c80:	2201      	movs	r2, #1
 8000c82:	2100      	movs	r1, #0
 8000c84:	4813      	ldr	r0, [pc, #76]	@ (8000cd4 <IOL_State_PreOP_Write_Channel+0xbc>)
 8000c86:	f7ff fda7 	bl	80007d8 <OP_CKS_GetChecksum>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	461a      	mov	r2, r3
 8000c8e:	4b11      	ldr	r3, [pc, #68]	@ (8000cd4 <IOL_State_PreOP_Write_Channel+0xbc>)
 8000c90:	701a      	strb	r2, [r3, #0]
            break;
 8000c92:	bf00      	nop
    }

    //Master Command to OP.
    if(uart1_rx_IDLE_buf[2] == 0x99)
 8000c94:	4b10      	ldr	r3, [pc, #64]	@ (8000cd8 <IOL_State_PreOP_Write_Channel+0xc0>)
 8000c96:	789b      	ldrb	r3, [r3, #2]
 8000c98:	2b99      	cmp	r3, #153	@ 0x99
 8000c9a:	d102      	bne.n	8000ca2 <IOL_State_PreOP_Write_Channel+0x8a>
    {
        stateIOLseq = IOL_OP;
 8000c9c:	4b0f      	ldr	r3, [pc, #60]	@ (8000cdc <IOL_State_PreOP_Write_Channel+0xc4>)
 8000c9e:	2202      	movs	r2, #2
 8000ca0:	701a      	strb	r2, [r3, #0]
    }
    
    IOL_ENABLE;
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	2140      	movs	r1, #64	@ 0x40
 8000ca6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000caa:	f002 f849 	bl	8002d40 <HAL_GPIO_WritePin>
    if (HAL_UART_Transmit_IT(&huart1, (uint8_t *) preop_data_arr, 1) != HAL_OK)
 8000cae:	2201      	movs	r2, #1
 8000cb0:	4908      	ldr	r1, [pc, #32]	@ (8000cd4 <IOL_State_PreOP_Write_Channel+0xbc>)
 8000cb2:	480b      	ldr	r0, [pc, #44]	@ (8000ce0 <IOL_State_PreOP_Write_Channel+0xc8>)
 8000cb4:	f005 faf0 	bl	8006298 <HAL_UART_Transmit_IT>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <IOL_State_PreOP_Write_Channel+0xaa>
    {
        Error_Handler();
 8000cbe:	f000 fc5e 	bl	800157e <Error_Handler>
    }
    return ;
 8000cc2:	bf00      	nop
 8000cc4:	bf00      	nop
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	3708      	adds	r7, #8
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	20000e9c 	.word	0x20000e9c
 8000cd4:	200002a0 	.word	0x200002a0
 8000cd8:	20000abc 	.word	0x20000abc
 8000cdc:	20001034 	.word	0x20001034
 8000ce0:	20000f90 	.word	0x20000f90

08000ce4 <IOL_State_PreOP_Process>:

static uint8_t IOL_State_PreOP_Process (void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0

    switch ( IOL_M2D_rxpacket.rw)
 8000ce8:	4b07      	ldr	r3, [pc, #28]	@ (8000d08 <IOL_State_PreOP_Process+0x24>)
 8000cea:	781b      	ldrb	r3, [r3, #0]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d004      	beq.n	8000cfa <IOL_State_PreOP_Process+0x16>
 8000cf0:	2b01      	cmp	r3, #1
 8000cf2:	d105      	bne.n	8000d00 <IOL_State_PreOP_Process+0x1c>
    {
        case IOL_RW_Read :
            IOL_State_PreOP_Read_Channel();
 8000cf4:	f7ff ff12 	bl	8000b1c <IOL_State_PreOP_Read_Channel>
            break;
 8000cf8:	e002      	b.n	8000d00 <IOL_State_PreOP_Process+0x1c>
        case IOL_RW_Write :
            IOL_State_PreOP_Write_Channel();
 8000cfa:	f7ff ff8d 	bl	8000c18 <IOL_State_PreOP_Write_Channel>
            break;
 8000cfe:	bf00      	nop
    }

    return ;
 8000d00:	bf00      	nop
 8000d02:	bf00      	nop
}
 8000d04:	4618      	mov	r0, r3
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	20000e9c 	.word	0x20000e9c

08000d0c <IOL_State_OP_Read_Channel>:


//  OP 모드 Read 인 경우 Channel 별로 프로세스 처리
static uint8_t IOL_State_OP_Read_Channel (void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
    switch (IOL_M2D_rxpacket.commchannel)
 8000d10:	4b0d      	ldr	r3, [pc, #52]	@ (8000d48 <IOL_State_OP_Read_Channel+0x3c>)
 8000d12:	785b      	ldrb	r3, [r3, #1]
 8000d14:	2b03      	cmp	r3, #3
 8000d16:	d812      	bhi.n	8000d3e <IOL_State_OP_Read_Channel+0x32>
 8000d18:	a201      	add	r2, pc, #4	@ (adr r2, 8000d20 <IOL_State_OP_Read_Channel+0x14>)
 8000d1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d1e:	bf00      	nop
 8000d20:	08000d3d 	.word	0x08000d3d
 8000d24:	08000d31 	.word	0x08000d31
 8000d28:	08000d3d 	.word	0x08000d3d
 8000d2c:	08000d37 	.word	0x08000d37
        case IOL_Channel_Process :
            
            break;

        case IOL_Channel_Page :
            IOL_State_OP_Page_ReadProcess();
 8000d30:	f000 fa94 	bl	800125c <IOL_State_OP_Page_ReadProcess>

            break;
 8000d34:	e003      	b.n	8000d3e <IOL_State_OP_Read_Channel+0x32>
            

            break;

        case IOL_Channel_ISDU :
            IOL_State_OP_ISDU_ReadProcess();
 8000d36:	f000 f9fb 	bl	8001130 <IOL_State_OP_ISDU_ReadProcess>

            break;
 8000d3a:	e000      	b.n	8000d3e <IOL_State_OP_Read_Channel+0x32>
            break;
 8000d3c:	bf00      	nop
    }

    return ;
 8000d3e:	bf00      	nop
 8000d40:	bf00      	nop
}
 8000d42:	4618      	mov	r0, r3
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	20000e9c 	.word	0x20000e9c

08000d4c <IOL_State_OP_Write_Channel>:

//  OP 모드 Write 인 경우 Channel 별로 프로세스 처리
static uint8_t IOL_State_OP_Write_Channel (void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
    switch (IOL_M2D_rxpacket.commchannel)
 8000d50:	4b0d      	ldr	r3, [pc, #52]	@ (8000d88 <IOL_State_OP_Write_Channel+0x3c>)
 8000d52:	785b      	ldrb	r3, [r3, #1]
 8000d54:	2b03      	cmp	r3, #3
 8000d56:	d812      	bhi.n	8000d7e <IOL_State_OP_Write_Channel+0x32>
 8000d58:	a201      	add	r2, pc, #4	@ (adr r2, 8000d60 <IOL_State_OP_Write_Channel+0x14>)
 8000d5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d5e:	bf00      	nop
 8000d60:	08000d7d 	.word	0x08000d7d
 8000d64:	08000d7d 	.word	0x08000d7d
 8000d68:	08000d7d 	.word	0x08000d7d
 8000d6c:	08000d71 	.word	0x08000d71
            

            break;

        case IOL_Channel_ISDU :
            IOL_Get_ISDU_WR_ODArr(uart1_rx_IDLE_buf);
 8000d70:	4806      	ldr	r0, [pc, #24]	@ (8000d8c <IOL_State_OP_Write_Channel+0x40>)
 8000d72:	f000 f919 	bl	8000fa8 <IOL_Get_ISDU_WR_ODArr>
            IOL_State_OP_ISDU_WriteProcess();
 8000d76:	f000 fa0b 	bl	8001190 <IOL_State_OP_ISDU_WriteProcess>

            break;
 8000d7a:	e000      	b.n	8000d7e <IOL_State_OP_Write_Channel+0x32>
            break;
 8000d7c:	bf00      	nop
    }

    return ;
 8000d7e:	bf00      	nop
 8000d80:	bf00      	nop
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	20000e9c 	.word	0x20000e9c
 8000d8c:	20000abc 	.word	0x20000abc

08000d90 <IOL_State_OP_Process>:

static uint8_t IOL_State_OP_Process (void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	af00      	add	r7, sp, #0
    switch ( IOL_M2D_rxpacket.rw)
 8000d94:	4b07      	ldr	r3, [pc, #28]	@ (8000db4 <IOL_State_OP_Process+0x24>)
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d004      	beq.n	8000da6 <IOL_State_OP_Process+0x16>
 8000d9c:	2b01      	cmp	r3, #1
 8000d9e:	d105      	bne.n	8000dac <IOL_State_OP_Process+0x1c>
    {
        case IOL_RW_Read :
            IOL_State_OP_Read_Channel();
 8000da0:	f7ff ffb4 	bl	8000d0c <IOL_State_OP_Read_Channel>
            break;
 8000da4:	e002      	b.n	8000dac <IOL_State_OP_Process+0x1c>
        case IOL_RW_Write :
            IOL_State_OP_Write_Channel();
 8000da6:	f7ff ffd1 	bl	8000d4c <IOL_State_OP_Write_Channel>
            break;
 8000daa:	bf00      	nop
    }

    return ;
 8000dac:	bf00      	nop
 8000dae:	bf00      	nop
}
 8000db0:	4618      	mov	r0, r3
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	20000e9c 	.word	0x20000e9c

08000db8 <IOL_StateM_Process>:

uint8_t IOL_StateM_Process (void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
    switch (stateIOLseq)
 8000dbc:	4b0b      	ldr	r3, [pc, #44]	@ (8000dec <IOL_StateM_Process+0x34>)
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	2b02      	cmp	r3, #2
 8000dc2:	d00c      	beq.n	8000dde <IOL_StateM_Process+0x26>
 8000dc4:	2b02      	cmp	r3, #2
 8000dc6:	dc0d      	bgt.n	8000de4 <IOL_StateM_Process+0x2c>
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d002      	beq.n	8000dd2 <IOL_StateM_Process+0x1a>
 8000dcc:	2b01      	cmp	r3, #1
 8000dce:	d003      	beq.n	8000dd8 <IOL_StateM_Process+0x20>
            // IOL_Get_ISDU_WR_ODArr(uart1_rx_IDLE_buf);
            IOL_State_OP_Process();
            break;
    }

    return ;
 8000dd0:	e008      	b.n	8000de4 <IOL_StateM_Process+0x2c>
            IOL_State_StartUp();
 8000dd2:	f7ff fe61 	bl	8000a98 <IOL_State_StartUp>
            break;
 8000dd6:	e005      	b.n	8000de4 <IOL_StateM_Process+0x2c>
            IOL_State_PreOP_Process();
 8000dd8:	f7ff ff84 	bl	8000ce4 <IOL_State_PreOP_Process>
            break;
 8000ddc:	e002      	b.n	8000de4 <IOL_StateM_Process+0x2c>
            IOL_State_OP_Process();
 8000dde:	f7ff ffd7 	bl	8000d90 <IOL_State_OP_Process>
            break;
 8000de2:	bf00      	nop
    return ;
 8000de4:	bf00      	nop
 8000de6:	bf00      	nop
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	20001034 	.word	0x20001034

08000df0 <IOL_Parse_Rx_data>:

// 마스터로부터 받은 데이터를 분석하기 위해 파싱하여 해당 구조체멤버에 넣어줌
uint8_t IOL_Parse_Rx_data (uint8_t * pData)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b082      	sub	sp, #8
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
    IOL_M2D_rxpacket.rw = Decode_MC_ReadWrite(*pData);
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f7ff fbd7 	bl	80005b0 <Decode_MC_ReadWrite>
 8000e02:	4603      	mov	r3, r0
 8000e04:	461a      	mov	r2, r3
 8000e06:	4b17      	ldr	r3, [pc, #92]	@ (8000e64 <IOL_Parse_Rx_data+0x74>)
 8000e08:	701a      	strb	r2, [r3, #0]
    IOL_M2D_rxpacket.commchannel = Decode_MC_CommunicationChannel(*pData);
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	781b      	ldrb	r3, [r3, #0]
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f7ff fbec 	bl	80005ec <Decode_MC_CommunicationChannel>
 8000e14:	4603      	mov	r3, r0
 8000e16:	461a      	mov	r2, r3
 8000e18:	4b12      	ldr	r3, [pc, #72]	@ (8000e64 <IOL_Parse_Rx_data+0x74>)
 8000e1a:	705a      	strb	r2, [r3, #1]
    IOL_M2D_rxpacket.addr = Decode_MC_Address(*pData);
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	4618      	mov	r0, r3
 8000e22:	f7ff fc0f 	bl	8000644 <Decode_MC_Address>
 8000e26:	4603      	mov	r3, r0
 8000e28:	461a      	mov	r2, r3
 8000e2a:	4b0e      	ldr	r3, [pc, #56]	@ (8000e64 <IOL_Parse_Rx_data+0x74>)
 8000e2c:	709a      	strb	r2, [r3, #2]

    IOL_M2D_rxpacket.mseqtype = Decode_CKT_Type(*(++pData));
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	3301      	adds	r3, #1
 8000e32:	607b      	str	r3, [r7, #4]
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f7ff fc16 	bl	800066a <Decode_CKT_Type>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	461a      	mov	r2, r3
 8000e42:	4b08      	ldr	r3, [pc, #32]	@ (8000e64 <IOL_Parse_Rx_data+0x74>)
 8000e44:	70da      	strb	r2, [r3, #3]
    IOL_M2D_rxpacket.ckt = Decode_CKT_Checksum(*pData);
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	781b      	ldrb	r3, [r3, #0]
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f7ff fc1f 	bl	800068e <Decode_CKT_Checksum>
 8000e50:	4603      	mov	r3, r0
 8000e52:	461a      	mov	r2, r3
 8000e54:	4b03      	ldr	r3, [pc, #12]	@ (8000e64 <IOL_Parse_Rx_data+0x74>)
 8000e56:	711a      	strb	r2, [r3, #4]

    return 0;
 8000e58:	2300      	movs	r3, #0
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	3708      	adds	r7, #8
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	20000e9c 	.word	0x20000e9c

08000e68 <IOL_Print_ParsingM2Ddata>:

void IOL_Print_ParsingM2Ddata (void)
{
 8000e68:	b590      	push	{r4, r7, lr}
 8000e6a:	b083      	sub	sp, #12
 8000e6c:	af02      	add	r7, sp, #8
    printf("M2D Rx Data Parsing :  %02X, %02X, %02X, %02X, %02X\r\n", IOL_M2D_rxpacket.rw
 8000e6e:	4b0f      	ldr	r3, [pc, #60]	@ (8000eac <IOL_Print_ParsingM2Ddata+0x44>)
 8000e70:	781b      	ldrb	r3, [r3, #0]
 8000e72:	4619      	mov	r1, r3
                                                                    , IOL_M2D_rxpacket.commchannel
 8000e74:	4b0d      	ldr	r3, [pc, #52]	@ (8000eac <IOL_Print_ParsingM2Ddata+0x44>)
 8000e76:	785b      	ldrb	r3, [r3, #1]
    printf("M2D Rx Data Parsing :  %02X, %02X, %02X, %02X, %02X\r\n", IOL_M2D_rxpacket.rw
 8000e78:	4618      	mov	r0, r3
                                                                    , IOL_M2D_rxpacket.addr
 8000e7a:	4b0c      	ldr	r3, [pc, #48]	@ (8000eac <IOL_Print_ParsingM2Ddata+0x44>)
 8000e7c:	789b      	ldrb	r3, [r3, #2]
    printf("M2D Rx Data Parsing :  %02X, %02X, %02X, %02X, %02X\r\n", IOL_M2D_rxpacket.rw
 8000e7e:	461c      	mov	r4, r3
                                                                    , IOL_M2D_rxpacket.mseqtype
 8000e80:	4b0a      	ldr	r3, [pc, #40]	@ (8000eac <IOL_Print_ParsingM2Ddata+0x44>)
 8000e82:	78db      	ldrb	r3, [r3, #3]
    printf("M2D Rx Data Parsing :  %02X, %02X, %02X, %02X, %02X\r\n", IOL_M2D_rxpacket.rw
 8000e84:	461a      	mov	r2, r3
                                                                    , IOL_M2D_rxpacket.ckt);
 8000e86:	4b09      	ldr	r3, [pc, #36]	@ (8000eac <IOL_Print_ParsingM2Ddata+0x44>)
 8000e88:	791b      	ldrb	r3, [r3, #4]
    printf("M2D Rx Data Parsing :  %02X, %02X, %02X, %02X, %02X\r\n", IOL_M2D_rxpacket.rw
 8000e8a:	9301      	str	r3, [sp, #4]
 8000e8c:	9200      	str	r2, [sp, #0]
 8000e8e:	4623      	mov	r3, r4
 8000e90:	4602      	mov	r2, r0
 8000e92:	4807      	ldr	r0, [pc, #28]	@ (8000eb0 <IOL_Print_ParsingM2Ddata+0x48>)
 8000e94:	f00b f8ce 	bl	800c034 <iprintf>

    printf("Device State : %d\r\n", stateIOLseq);
 8000e98:	4b06      	ldr	r3, [pc, #24]	@ (8000eb4 <IOL_Print_ParsingM2Ddata+0x4c>)
 8000e9a:	781b      	ldrb	r3, [r3, #0]
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	4806      	ldr	r0, [pc, #24]	@ (8000eb8 <IOL_Print_ParsingM2Ddata+0x50>)
 8000ea0:	f00b f8c8 	bl	800c034 <iprintf>
}
 8000ea4:	bf00      	nop
 8000ea6:	3704      	adds	r7, #4
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd90      	pop	{r4, r7, pc}
 8000eac:	20000e9c 	.word	0x20000e9c
 8000eb0:	0800ce00 	.word	0x0800ce00
 8000eb4:	20001034 	.word	0x20001034
 8000eb8:	0800ce38 	.word	0x0800ce38

08000ebc <IOL_Get_ISDU_Iservice>:
    {0xb1, 0x00},
};

//IO-Link ISDU 의 Iservice
static uint8_t IOL_Get_ISDU_Iservice (uint8_t * pData)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b085      	sub	sp, #20
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
    uint8_t first_od = 0;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	73fb      	strb	r3, [r7, #15]
    // IOL_ISDUPacket_t isdudata;

    first_od = pData[IOL_OP_ISDU_IN_PROCESSDATALENGTH - 1];
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	799b      	ldrb	r3, [r3, #6]
 8000ecc:	73fb      	strb	r3, [r7, #15]
    first_od = (first_od >> 4 ) & 0x0F;
 8000ece:	7bfb      	ldrb	r3, [r7, #15]
 8000ed0:	091b      	lsrs	r3, r3, #4
 8000ed2:	73fb      	strb	r3, [r7, #15]

    isdudata.iservice = first_od;
 8000ed4:	4a05      	ldr	r2, [pc, #20]	@ (8000eec <IOL_Get_ISDU_Iservice+0x30>)
 8000ed6:	7bfb      	ldrb	r3, [r7, #15]
 8000ed8:	7013      	strb	r3, [r2, #0]
  
    return isdudata.iservice;
 8000eda:	4b04      	ldr	r3, [pc, #16]	@ (8000eec <IOL_Get_ISDU_Iservice+0x30>)
 8000edc:	781b      	ldrb	r3, [r3, #0]
}
 8000ede:	4618      	mov	r0, r3
 8000ee0:	3714      	adds	r7, #20
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop
 8000eec:	20000ea8 	.word	0x20000ea8

08000ef0 <IOL_Get_ISDU_ExtLength>:

// IO-lInk ISDU 의 extLength 
static uint8_t IOL_Get_ISDU_ExtLength (uint8_t * pData)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b085      	sub	sp, #20
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
    uint8_t od_extlength = 0;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	73fb      	strb	r3, [r7, #15]

    od_extlength = pData[IOL_OP_ISDU_IN_PROCESSDATALENGTH];
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	79db      	ldrb	r3, [r3, #7]
 8000f00:	73fb      	strb	r3, [r7, #15]
    
    return od_extlength;
 8000f02:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f04:	4618      	mov	r0, r3
 8000f06:	3714      	adds	r7, #20
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr

08000f10 <IOL_Get_ISDU_Length>:

// IO-Link ISDU 의 Length
static uint8_t IOL_Get_ISDU_Length (uint8_t * pData)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b084      	sub	sp, #16
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
    uint8_t first_od = 0;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	73fb      	strb	r3, [r7, #15]
    uint8_t extlength = 0;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	73bb      	strb	r3, [r7, #14]
    // IOL_ISDUPacket_t isdudata;

    first_od = pData[IOL_OP_ISDU_IN_PROCESSDATALENGTH - 1];
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	799b      	ldrb	r3, [r3, #6]
 8000f24:	73fb      	strb	r3, [r7, #15]
    extlength = first_od & 0x0F;
 8000f26:	7bfb      	ldrb	r3, [r7, #15]
 8000f28:	f003 030f 	and.w	r3, r3, #15
 8000f2c:	73bb      	strb	r3, [r7, #14]

    // extlength 있는 경우
    if (extlength == 1)
 8000f2e:	7bbb      	ldrb	r3, [r7, #14]
 8000f30:	2b01      	cmp	r3, #1
 8000f32:	d10b      	bne.n	8000f4c <IOL_Get_ISDU_Length+0x3c>
    {
        extlength_flag = 1;
 8000f34:	4b0a      	ldr	r3, [pc, #40]	@ (8000f60 <IOL_Get_ISDU_Length+0x50>)
 8000f36:	2201      	movs	r2, #1
 8000f38:	701a      	strb	r2, [r3, #0]
        extlength = IOL_Get_ISDU_ExtLength(pData);
 8000f3a:	6878      	ldr	r0, [r7, #4]
 8000f3c:	f7ff ffd8 	bl	8000ef0 <IOL_Get_ISDU_ExtLength>
 8000f40:	4603      	mov	r3, r0
 8000f42:	73bb      	strb	r3, [r7, #14]
        isdudata.length = extlength;
 8000f44:	4a07      	ldr	r2, [pc, #28]	@ (8000f64 <IOL_Get_ISDU_Length+0x54>)
 8000f46:	7bbb      	ldrb	r3, [r7, #14]
 8000f48:	7053      	strb	r3, [r2, #1]
 8000f4a:	e002      	b.n	8000f52 <IOL_Get_ISDU_Length+0x42>
    }
    else // extlegnth 없는 경우
    {
        isdudata.length = extlength;
 8000f4c:	4a05      	ldr	r2, [pc, #20]	@ (8000f64 <IOL_Get_ISDU_Length+0x54>)
 8000f4e:	7bbb      	ldrb	r3, [r7, #14]
 8000f50:	7053      	strb	r3, [r2, #1]
    }

    return isdudata.length;
 8000f52:	4b04      	ldr	r3, [pc, #16]	@ (8000f64 <IOL_Get_ISDU_Length+0x54>)
 8000f54:	785b      	ldrb	r3, [r3, #1]
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	3710      	adds	r7, #16
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	200002a9 	.word	0x200002a9
 8000f64:	20000ea8 	.word	0x20000ea8

08000f68 <IOL_Get_ISDU_Index>:

static uint8_t IOL_Get_ISDU_Index (uint8_t * pData)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b083      	sub	sp, #12
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
    //extlegnth 있는 경우
    if (extlength_flag == 1)
 8000f70:	4b0b      	ldr	r3, [pc, #44]	@ (8000fa0 <IOL_Get_ISDU_Index+0x38>)
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	2b01      	cmp	r3, #1
 8000f76:	d107      	bne.n	8000f88 <IOL_Get_ISDU_Index+0x20>
    {
        isdudata.index = isdudata.isdu_od[2];
 8000f78:	4b0a      	ldr	r3, [pc, #40]	@ (8000fa4 <IOL_Get_ISDU_Index+0x3c>)
 8000f7a:	79da      	ldrb	r2, [r3, #7]
 8000f7c:	4b09      	ldr	r3, [pc, #36]	@ (8000fa4 <IOL_Get_ISDU_Index+0x3c>)
 8000f7e:	709a      	strb	r2, [r3, #2]
        extlength_flag = 0;
 8000f80:	4b07      	ldr	r3, [pc, #28]	@ (8000fa0 <IOL_Get_ISDU_Index+0x38>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	701a      	strb	r2, [r3, #0]
 8000f86:	e003      	b.n	8000f90 <IOL_Get_ISDU_Index+0x28>
    }
    else // extlength 없는 경우
    {
        isdudata.index = isdudata.isdu_od[1];
 8000f88:	4b06      	ldr	r3, [pc, #24]	@ (8000fa4 <IOL_Get_ISDU_Index+0x3c>)
 8000f8a:	799a      	ldrb	r2, [r3, #6]
 8000f8c:	4b05      	ldr	r3, [pc, #20]	@ (8000fa4 <IOL_Get_ISDU_Index+0x3c>)
 8000f8e:	709a      	strb	r2, [r3, #2]
    }

    return isdudata.index;
 8000f90:	4b04      	ldr	r3, [pc, #16]	@ (8000fa4 <IOL_Get_ISDU_Index+0x3c>)
 8000f92:	789b      	ldrb	r3, [r3, #2]
}
 8000f94:	4618      	mov	r0, r3
 8000f96:	370c      	adds	r7, #12
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr
 8000fa0:	200002a9 	.word	0x200002a9
 8000fa4:	20000ea8 	.word	0x20000ea8

08000fa8 <IOL_Get_ISDU_WR_ODArr>:

// ISDU Write OD 데이터 수신 처리
uint8_t IOL_Get_ISDU_WR_ODArr (uint8_t * pData)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
    
    isdudata.isdu_od[isdudata.isdu_od_cnt++] = pData[IOL_OP_ISDU_IN_PROCESSDATALENGTH - 1];
 8000fb0:	4b20      	ldr	r3, [pc, #128]	@ (8001034 <IOL_Get_ISDU_WR_ODArr+0x8c>)
 8000fb2:	f893 3037 	ldrb.w	r3, [r3, #55]	@ 0x37
 8000fb6:	1c5a      	adds	r2, r3, #1
 8000fb8:	b2d1      	uxtb	r1, r2
 8000fba:	4a1e      	ldr	r2, [pc, #120]	@ (8001034 <IOL_Get_ISDU_WR_ODArr+0x8c>)
 8000fbc:	f882 1037 	strb.w	r1, [r2, #55]	@ 0x37
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	799a      	ldrb	r2, [r3, #6]
 8000fc6:	4b1b      	ldr	r3, [pc, #108]	@ (8001034 <IOL_Get_ISDU_WR_ODArr+0x8c>)
 8000fc8:	440b      	add	r3, r1
 8000fca:	715a      	strb	r2, [r3, #5]
    isdudata.isdu_od[isdudata.isdu_od_cnt++] = pData[IOL_OP_ISDU_IN_PROCESSDATALENGTH];
 8000fcc:	4b19      	ldr	r3, [pc, #100]	@ (8001034 <IOL_Get_ISDU_WR_ODArr+0x8c>)
 8000fce:	f893 3037 	ldrb.w	r3, [r3, #55]	@ 0x37
 8000fd2:	1c5a      	adds	r2, r3, #1
 8000fd4:	b2d1      	uxtb	r1, r2
 8000fd6:	4a17      	ldr	r2, [pc, #92]	@ (8001034 <IOL_Get_ISDU_WR_ODArr+0x8c>)
 8000fd8:	f882 1037 	strb.w	r1, [r2, #55]	@ 0x37
 8000fdc:	4619      	mov	r1, r3
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	79da      	ldrb	r2, [r3, #7]
 8000fe2:	4b14      	ldr	r3, [pc, #80]	@ (8001034 <IOL_Get_ISDU_WR_ODArr+0x8c>)
 8000fe4:	440b      	add	r3, r1
 8000fe6:	715a      	strb	r2, [r3, #5]
    
    // 첫 OD 데이터 수신시 Iservice값과 ISDU의 데이터 길이를 구하기 위함
    if (isdudata.isdu_od_cnt == 2)
 8000fe8:	4b12      	ldr	r3, [pc, #72]	@ (8001034 <IOL_Get_ISDU_WR_ODArr+0x8c>)
 8000fea:	f893 3037 	ldrb.w	r3, [r3, #55]	@ 0x37
 8000fee:	2b02      	cmp	r3, #2
 8000ff0:	d105      	bne.n	8000ffe <IOL_Get_ISDU_WR_ODArr+0x56>
    {
        IOL_Get_ISDU_Iservice(pData);
 8000ff2:	6878      	ldr	r0, [r7, #4]
 8000ff4:	f7ff ff62 	bl	8000ebc <IOL_Get_ISDU_Iservice>
        IOL_Get_ISDU_Length(pData);
 8000ff8:	6878      	ldr	r0, [r7, #4]
 8000ffa:	f7ff ff89 	bl	8000f10 <IOL_Get_ISDU_Length>
    }

    // OD 데이터의 길이까지 데이터 쌓은 경우.
    if (isdudata.isdu_od_cnt >= isdudata.length)
 8000ffe:	4b0d      	ldr	r3, [pc, #52]	@ (8001034 <IOL_Get_ISDU_WR_ODArr+0x8c>)
 8001000:	f893 2037 	ldrb.w	r2, [r3, #55]	@ 0x37
 8001004:	4b0b      	ldr	r3, [pc, #44]	@ (8001034 <IOL_Get_ISDU_WR_ODArr+0x8c>)
 8001006:	785b      	ldrb	r3, [r3, #1]
 8001008:	429a      	cmp	r2, r3
 800100a:	d30d      	bcc.n	8001028 <IOL_Get_ISDU_WR_ODArr+0x80>
    {
        IOL_Get_ISDU_Index(pData);
 800100c:	6878      	ldr	r0, [r7, #4]
 800100e:	f7ff ffab 	bl	8000f68 <IOL_Get_ISDU_Index>

        isdudata.length = 0;
 8001012:	4b08      	ldr	r3, [pc, #32]	@ (8001034 <IOL_Get_ISDU_WR_ODArr+0x8c>)
 8001014:	2200      	movs	r2, #0
 8001016:	705a      	strb	r2, [r3, #1]
        isdudata.isdu_od_cnt = 0; // od length clear
 8001018:	4b06      	ldr	r3, [pc, #24]	@ (8001034 <IOL_Get_ISDU_WR_ODArr+0x8c>)
 800101a:	2200      	movs	r2, #0
 800101c:	f883 2037 	strb.w	r2, [r3, #55]	@ 0x37
        isdudata.isdu_od_rxcplt = 1;
 8001020:	4b04      	ldr	r3, [pc, #16]	@ (8001034 <IOL_Get_ISDU_WR_ODArr+0x8c>)
 8001022:	2201      	movs	r2, #1
 8001024:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    }

    return ;
 8001028:	bf00      	nop
 800102a:	bf00      	nop
}
 800102c:	4618      	mov	r0, r3
 800102e:	3708      	adds	r7, #8
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	20000ea8 	.word	0x20000ea8

08001038 <IOL_Make_Resp_ProductName>:

    return ;
}

static void IOL_Make_Resp_ProductName (void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
    device_ProcessDataIn_arr[0] = IOL_OP_ProductName[IOL_OP_ISDU_OD_Res_cnt][0];   // OD 데이터를  Index에 대한 응답 ISDU 구조의 사이즈에 맞게 나눠서 보내기 위함  
 800103c:	4b15      	ldr	r3, [pc, #84]	@ (8001094 <IOL_Make_Resp_ProductName+0x5c>)
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	461a      	mov	r2, r3
 8001042:	4b15      	ldr	r3, [pc, #84]	@ (8001098 <IOL_Make_Resp_ProductName+0x60>)
 8001044:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 8001048:	4b14      	ldr	r3, [pc, #80]	@ (800109c <IOL_Make_Resp_ProductName+0x64>)
 800104a:	701a      	strb	r2, [r3, #0]
    device_ProcessDataIn_arr[1] = IOL_OP_ProductName[IOL_OP_ISDU_OD_Res_cnt][1];   // 현재 씬그립 디바이스의 IODD는 2 octet.
 800104c:	4b11      	ldr	r3, [pc, #68]	@ (8001094 <IOL_Make_Resp_ProductName+0x5c>)
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	4a11      	ldr	r2, [pc, #68]	@ (8001098 <IOL_Make_Resp_ProductName+0x60>)
 8001052:	005b      	lsls	r3, r3, #1
 8001054:	4413      	add	r3, r2
 8001056:	785a      	ldrb	r2, [r3, #1]
 8001058:	4b10      	ldr	r3, [pc, #64]	@ (800109c <IOL_Make_Resp_ProductName+0x64>)
 800105a:	705a      	strb	r2, [r3, #1]
    IOL_OP_ISDU_OD_Res_cnt++;        // ISDU 요청에 대한 Index 응답의 사이즈에 맞게 나눠서 보내기 위한 카운트값.
 800105c:	4b0d      	ldr	r3, [pc, #52]	@ (8001094 <IOL_Make_Resp_ProductName+0x5c>)
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	3301      	adds	r3, #1
 8001062:	b2da      	uxtb	r2, r3
 8001064:	4b0b      	ldr	r3, [pc, #44]	@ (8001094 <IOL_Make_Resp_ProductName+0x5c>)
 8001066:	701a      	strb	r2, [r3, #0]

    if (IOL_OP_ISDU_OD_Res_cnt >= 13)
 8001068:	4b0a      	ldr	r3, [pc, #40]	@ (8001094 <IOL_Make_Resp_ProductName+0x5c>)
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	2b0c      	cmp	r3, #12
 800106e:	d906      	bls.n	800107e <IOL_Make_Resp_ProductName+0x46>
    {
        isdudata.isdu_od_writereq_flag = 0;
 8001070:	4b0b      	ldr	r3, [pc, #44]	@ (80010a0 <IOL_Make_Resp_ProductName+0x68>)
 8001072:	2200      	movs	r2, #0
 8001074:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        IOL_OP_ISDU_OD_Res_cnt = 0;
 8001078:	4b06      	ldr	r3, [pc, #24]	@ (8001094 <IOL_Make_Resp_ProductName+0x5c>)
 800107a:	2200      	movs	r2, #0
 800107c:	701a      	strb	r2, [r3, #0]
    }

    device_ProcessDataIn_arr[IOL_OP_ISDU_IN_PROCESSDATALENGTH - 1] = OP_CKS_GetChecksum(&device_ProcessDataIn_arr[0], (IOL_OP_ISDU_IN_PROCESSDATALENGTH - 1), 0);
 800107e:	2200      	movs	r2, #0
 8001080:	2106      	movs	r1, #6
 8001082:	4806      	ldr	r0, [pc, #24]	@ (800109c <IOL_Make_Resp_ProductName+0x64>)
 8001084:	f7ff fba8 	bl	80007d8 <OP_CKS_GetChecksum>
 8001088:	4603      	mov	r3, r0
 800108a:	461a      	mov	r2, r3
 800108c:	4b03      	ldr	r3, [pc, #12]	@ (800109c <IOL_Make_Resp_ProductName+0x64>)
 800108e:	719a      	strb	r2, [r3, #6]
}
 8001090:	bf00      	nop
 8001092:	bd80      	pop	{r7, pc}
 8001094:	200002aa 	.word	0x200002aa
 8001098:	20000054 	.word	0x20000054
 800109c:	200002ac 	.word	0x200002ac
 80010a0:	20000ea8 	.word	0x20000ea8

080010a4 <IOL_Make_Resp_SerialNumber>:

static void IOL_Make_Resp_SerialNumber (void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
    device_ProcessDataIn_arr[0] = IOL_OP_ProductName[IOL_OP_ISDU_OD_Res_cnt][0];   // OD 데이터를  Index에 대한 응답 ISDU 구조의 사이즈에 맞게 나눠서 보내기 위함  
 80010a8:	4b15      	ldr	r3, [pc, #84]	@ (8001100 <IOL_Make_Resp_SerialNumber+0x5c>)
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	461a      	mov	r2, r3
 80010ae:	4b15      	ldr	r3, [pc, #84]	@ (8001104 <IOL_Make_Resp_SerialNumber+0x60>)
 80010b0:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 80010b4:	4b14      	ldr	r3, [pc, #80]	@ (8001108 <IOL_Make_Resp_SerialNumber+0x64>)
 80010b6:	701a      	strb	r2, [r3, #0]
    device_ProcessDataIn_arr[1] = IOL_OP_ProductName[IOL_OP_ISDU_OD_Res_cnt][1];   // 현재 씬그립 디바이스의 IODD는 2 octet.
 80010b8:	4b11      	ldr	r3, [pc, #68]	@ (8001100 <IOL_Make_Resp_SerialNumber+0x5c>)
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	4a11      	ldr	r2, [pc, #68]	@ (8001104 <IOL_Make_Resp_SerialNumber+0x60>)
 80010be:	005b      	lsls	r3, r3, #1
 80010c0:	4413      	add	r3, r2
 80010c2:	785a      	ldrb	r2, [r3, #1]
 80010c4:	4b10      	ldr	r3, [pc, #64]	@ (8001108 <IOL_Make_Resp_SerialNumber+0x64>)
 80010c6:	705a      	strb	r2, [r3, #1]
    IOL_OP_ISDU_OD_Res_cnt++;        // ISDU 요청에 대한 Index 응답의 사이즈에 맞게 나눠서 보내기 위한 카운트값.
 80010c8:	4b0d      	ldr	r3, [pc, #52]	@ (8001100 <IOL_Make_Resp_SerialNumber+0x5c>)
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	3301      	adds	r3, #1
 80010ce:	b2da      	uxtb	r2, r3
 80010d0:	4b0b      	ldr	r3, [pc, #44]	@ (8001100 <IOL_Make_Resp_SerialNumber+0x5c>)
 80010d2:	701a      	strb	r2, [r3, #0]

    if (IOL_OP_ISDU_OD_Res_cnt >= 10)
 80010d4:	4b0a      	ldr	r3, [pc, #40]	@ (8001100 <IOL_Make_Resp_SerialNumber+0x5c>)
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	2b09      	cmp	r3, #9
 80010da:	d906      	bls.n	80010ea <IOL_Make_Resp_SerialNumber+0x46>
    {
        isdudata.isdu_od_writereq_flag = 0;
 80010dc:	4b0b      	ldr	r3, [pc, #44]	@ (800110c <IOL_Make_Resp_SerialNumber+0x68>)
 80010de:	2200      	movs	r2, #0
 80010e0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        IOL_OP_ISDU_OD_Res_cnt = 0;
 80010e4:	4b06      	ldr	r3, [pc, #24]	@ (8001100 <IOL_Make_Resp_SerialNumber+0x5c>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	701a      	strb	r2, [r3, #0]
    }

    device_ProcessDataIn_arr[IOL_OP_ISDU_IN_PROCESSDATALENGTH - 1] = OP_CKS_GetChecksum(&device_ProcessDataIn_arr[0], (IOL_OP_ISDU_IN_PROCESSDATALENGTH - 1), 0);
 80010ea:	2200      	movs	r2, #0
 80010ec:	2106      	movs	r1, #6
 80010ee:	4806      	ldr	r0, [pc, #24]	@ (8001108 <IOL_Make_Resp_SerialNumber+0x64>)
 80010f0:	f7ff fb72 	bl	80007d8 <OP_CKS_GetChecksum>
 80010f4:	4603      	mov	r3, r0
 80010f6:	461a      	mov	r2, r3
 80010f8:	4b03      	ldr	r3, [pc, #12]	@ (8001108 <IOL_Make_Resp_SerialNumber+0x64>)
 80010fa:	719a      	strb	r2, [r3, #6]
}
 80010fc:	bf00      	nop
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	200002aa 	.word	0x200002aa
 8001104:	20000054 	.word	0x20000054
 8001108:	200002ac 	.word	0x200002ac
 800110c:	20000ea8 	.word	0x20000ea8

08001110 <IOL_Make_Resp_default>:

static void IOL_Make_Resp_default (void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
    // device_ProcessDataIn_arr[OP_ISDU_IN_PROCESSDATALENGTH - 2] = ProcessDataIn_cnt++; // Test cnt Value 
    // device_ProcessDataIn_arr[OP_ISDU_IN_PROCESSDATALENGTH - 2] = ProcessDataIn_cnt; // Test cnt Value 
    device_ProcessDataIn_arr[IOL_OP_ISDU_IN_PROCESSDATALENGTH - 1] = OP_CKS_GetChecksum(&device_ProcessDataIn_arr[0], (IOL_OP_ISDU_IN_PROCESSDATALENGTH - 1), 0);
 8001114:	2200      	movs	r2, #0
 8001116:	2106      	movs	r1, #6
 8001118:	4804      	ldr	r0, [pc, #16]	@ (800112c <IOL_Make_Resp_default+0x1c>)
 800111a:	f7ff fb5d 	bl	80007d8 <OP_CKS_GetChecksum>
 800111e:	4603      	mov	r3, r0
 8001120:	461a      	mov	r2, r3
 8001122:	4b02      	ldr	r3, [pc, #8]	@ (800112c <IOL_Make_Resp_default+0x1c>)
 8001124:	719a      	strb	r2, [r3, #6]
}
 8001126:	bf00      	nop
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	200002ac 	.word	0x200002ac

08001130 <IOL_State_OP_ISDU_ReadProcess>:

// ISDU OD Process
uint8_t IOL_State_OP_ISDU_ReadProcess (void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
    if (isdudata.isdu_od_writereq_flag == 1)
 8001134:	4b13      	ldr	r3, [pc, #76]	@ (8001184 <IOL_State_OP_ISDU_ReadProcess+0x54>)
 8001136:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800113a:	2b01      	cmp	r3, #1
 800113c:	d10c      	bne.n	8001158 <IOL_State_OP_ISDU_ReadProcess+0x28>
    {
        // isdudata.isdudata.isdu_od_writereq_flag = 0;

        switch (isdudata.index)
 800113e:	4b11      	ldr	r3, [pc, #68]	@ (8001184 <IOL_State_OP_ISDU_ReadProcess+0x54>)
 8001140:	789b      	ldrb	r3, [r3, #2]
 8001142:	2b12      	cmp	r3, #18
 8001144:	d002      	beq.n	800114c <IOL_State_OP_ISDU_ReadProcess+0x1c>
 8001146:	2b15      	cmp	r3, #21
 8001148:	d003      	beq.n	8001152 <IOL_State_OP_ISDU_ReadProcess+0x22>
 800114a:	e007      	b.n	800115c <IOL_State_OP_ISDU_ReadProcess+0x2c>
        {
            case IOL_Index_ProductName :
                IOL_Make_Resp_ProductName();
 800114c:	f7ff ff74 	bl	8001038 <IOL_Make_Resp_ProductName>
                break;
 8001150:	e004      	b.n	800115c <IOL_State_OP_ISDU_ReadProcess+0x2c>

            case IOL_Index_SerialNumber :
                IOL_Make_Resp_SerialNumber();
 8001152:	f7ff ffa7 	bl	80010a4 <IOL_Make_Resp_SerialNumber>
                break;
 8001156:	e001      	b.n	800115c <IOL_State_OP_ISDU_ReadProcess+0x2c>
        }
        // device_ProcessDataOut_arr[IOL_OP_ISDU_OUT_PROCESSDATALENGTH - 1] = OP_CKS_GetChecksum(&device_ProcessDataOut_arr[0], IOL_OP_ISDU_OUT_PROCESSDATALENGTH - 1, 0); // CKS 생성
    }
    else
    {
        IOL_Make_Resp_default();
 8001158:	f7ff ffda 	bl	8001110 <IOL_Make_Resp_default>
    }

    IOL_ENABLE;
 800115c:	2201      	movs	r2, #1
 800115e:	2140      	movs	r1, #64	@ 0x40
 8001160:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001164:	f001 fdec 	bl	8002d40 <HAL_GPIO_WritePin>
    
    if (HAL_UART_Transmit_IT(&huart1, device_ProcessDataIn_arr, IOL_OP_ISDU_IN_PROCESSDATALENGTH) != HAL_OK)
 8001168:	2207      	movs	r2, #7
 800116a:	4907      	ldr	r1, [pc, #28]	@ (8001188 <IOL_State_OP_ISDU_ReadProcess+0x58>)
 800116c:	4807      	ldr	r0, [pc, #28]	@ (800118c <IOL_State_OP_ISDU_ReadProcess+0x5c>)
 800116e:	f005 f893 	bl	8006298 <HAL_UART_Transmit_IT>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d001      	beq.n	800117c <IOL_State_OP_ISDU_ReadProcess+0x4c>
    {
        Error_Handler();
 8001178:	f000 fa01 	bl	800157e <Error_Handler>
    }

    return ;
 800117c:	bf00      	nop
 800117e:	bf00      	nop
}
 8001180:	4618      	mov	r0, r3
 8001182:	bd80      	pop	{r7, pc}
 8001184:	20000ea8 	.word	0x20000ea8
 8001188:	200002ac 	.word	0x200002ac
 800118c:	20000f90 	.word	0x20000f90

08001190 <IOL_State_OP_ISDU_WriteProcess>:

// ISDU OD Process
uint8_t IOL_State_OP_ISDU_WriteProcess (void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0
    if (isdudata.isdu_od_rxcplt == 1)
 8001194:	4b14      	ldr	r3, [pc, #80]	@ (80011e8 <IOL_State_OP_ISDU_WriteProcess+0x58>)
 8001196:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800119a:	2b01      	cmp	r3, #1
 800119c:	d107      	bne.n	80011ae <IOL_State_OP_ISDU_WriteProcess+0x1e>
    {
        isdudata.isdu_od_rxcplt = 0;
 800119e:	4b12      	ldr	r3, [pc, #72]	@ (80011e8 <IOL_State_OP_ISDU_WriteProcess+0x58>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        isdudata.isdu_od_writereq_flag = 1;
 80011a6:	4b10      	ldr	r3, [pc, #64]	@ (80011e8 <IOL_State_OP_ISDU_WriteProcess+0x58>)
 80011a8:	2201      	movs	r2, #1
 80011aa:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
    }
    device_ProcessDataOut_arr[IOL_OP_ISDU_OUT_PROCESSDATALENGTH - 1] = OP_CKS_GetChecksum(&device_ProcessDataOut_arr[0], IOL_OP_ISDU_OUT_PROCESSDATALENGTH - 1, 0); // CKS 생성
 80011ae:	2200      	movs	r2, #0
 80011b0:	2104      	movs	r1, #4
 80011b2:	480e      	ldr	r0, [pc, #56]	@ (80011ec <IOL_State_OP_ISDU_WriteProcess+0x5c>)
 80011b4:	f7ff fb10 	bl	80007d8 <OP_CKS_GetChecksum>
 80011b8:	4603      	mov	r3, r0
 80011ba:	461a      	mov	r2, r3
 80011bc:	4b0b      	ldr	r3, [pc, #44]	@ (80011ec <IOL_State_OP_ISDU_WriteProcess+0x5c>)
 80011be:	711a      	strb	r2, [r3, #4]

    IOL_ENABLE;
 80011c0:	2201      	movs	r2, #1
 80011c2:	2140      	movs	r1, #64	@ 0x40
 80011c4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011c8:	f001 fdba 	bl	8002d40 <HAL_GPIO_WritePin>
    
    if (HAL_UART_Transmit_IT(&huart1, device_ProcessDataOut_arr, IOL_OP_ISDU_OUT_PROCESSDATALENGTH) != HAL_OK)
 80011cc:	2205      	movs	r2, #5
 80011ce:	4907      	ldr	r1, [pc, #28]	@ (80011ec <IOL_State_OP_ISDU_WriteProcess+0x5c>)
 80011d0:	4807      	ldr	r0, [pc, #28]	@ (80011f0 <IOL_State_OP_ISDU_WriteProcess+0x60>)
 80011d2:	f005 f861 	bl	8006298 <HAL_UART_Transmit_IT>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d001      	beq.n	80011e0 <IOL_State_OP_ISDU_WriteProcess+0x50>
    {
        Error_Handler();
 80011dc:	f000 f9cf 	bl	800157e <Error_Handler>
    }

    return ;
 80011e0:	bf00      	nop
 80011e2:	bf00      	nop
}
 80011e4:	4618      	mov	r0, r3
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	20000ea8 	.word	0x20000ea8
 80011ec:	200002b4 	.word	0x200002b4
 80011f0:	20000f90 	.word	0x20000f90

080011f4 <IOL_ConnectToIFM_Read>:



// for 문 수정이 필요. j 카운트 부분이 쓸모없이 중복 실행.
void IOL_ConnectToIFM_Read (void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b083      	sub	sp, #12
 80011f8:	af00      	add	r7, sp, #0
    uint8_t i, j = 0;
 80011fa:	2300      	movs	r3, #0
 80011fc:	71bb      	strb	r3, [r7, #6]
    uint8_t setpage1first[2] = {0x00, 0x22};
 80011fe:	f44f 5308 	mov.w	r3, #8704	@ 0x2200
 8001202:	80bb      	strh	r3, [r7, #4]
    // uint8_t Pagevalue[16] = { 0 };

    for (i = 2; i < 16; i++)
 8001204:	2302      	movs	r3, #2
 8001206:	71fb      	strb	r3, [r7, #7]
 8001208:	e01a      	b.n	8001240 <IOL_ConnectToIFM_Read+0x4c>
    {
        for(j = 0; j < 2; j++)
 800120a:	2300      	movs	r3, #0
 800120c:	71bb      	strb	r3, [r7, #6]
 800120e:	e00a      	b.n	8001226 <IOL_ConnectToIFM_Read+0x32>
        {
            IOL_ISDUPage_value[j] = setpage1first[j];
 8001210:	79ba      	ldrb	r2, [r7, #6]
 8001212:	79bb      	ldrb	r3, [r7, #6]
 8001214:	3208      	adds	r2, #8
 8001216:	443a      	add	r2, r7
 8001218:	f812 1c04 	ldrb.w	r1, [r2, #-4]
 800121c:	4a0d      	ldr	r2, [pc, #52]	@ (8001254 <IOL_ConnectToIFM_Read+0x60>)
 800121e:	54d1      	strb	r1, [r2, r3]
        for(j = 0; j < 2; j++)
 8001220:	79bb      	ldrb	r3, [r7, #6]
 8001222:	3301      	adds	r3, #1
 8001224:	71bb      	strb	r3, [r7, #6]
 8001226:	79bb      	ldrb	r3, [r7, #6]
 8001228:	2b01      	cmp	r3, #1
 800122a:	d9f1      	bls.n	8001210 <IOL_ConnectToIFM_Read+0x1c>
        }
        IOL_ISDUPage_value[i] = IOL_Page1_SeqValue[i - 1];
 800122c:	79fb      	ldrb	r3, [r7, #7]
 800122e:	1e5a      	subs	r2, r3, #1
 8001230:	79fb      	ldrb	r3, [r7, #7]
 8001232:	4909      	ldr	r1, [pc, #36]	@ (8001258 <IOL_ConnectToIFM_Read+0x64>)
 8001234:	5c89      	ldrb	r1, [r1, r2]
 8001236:	4a07      	ldr	r2, [pc, #28]	@ (8001254 <IOL_ConnectToIFM_Read+0x60>)
 8001238:	54d1      	strb	r1, [r2, r3]
    for (i = 2; i < 16; i++)
 800123a:	79fb      	ldrb	r3, [r7, #7]
 800123c:	3301      	adds	r3, #1
 800123e:	71fb      	strb	r3, [r7, #7]
 8001240:	79fb      	ldrb	r3, [r7, #7]
 8001242:	2b0f      	cmp	r3, #15
 8001244:	d9e1      	bls.n	800120a <IOL_ConnectToIFM_Read+0x16>
    }
}
 8001246:	bf00      	nop
 8001248:	bf00      	nop
 800124a:	370c      	adds	r7, #12
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr
 8001254:	200002bc 	.word	0x200002bc
 8001258:	20000084 	.word	0x20000084

0800125c <IOL_State_OP_Page_ReadProcess>:

uint8_t IOL_State_OP_Page_ReadProcess (void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	af00      	add	r7, sp, #0
    IOL_ConnectToIFM_Read();
 8001260:	f7ff ffc8 	bl	80011f4 <IOL_ConnectToIFM_Read>

    device_Page_OD_arr[0] = IOL_ISDUPage_value[IOL_OP_OD_Page_Res_cnt];
 8001264:	4b1b      	ldr	r3, [pc, #108]	@ (80012d4 <IOL_State_OP_Page_ReadProcess+0x78>)
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	461a      	mov	r2, r3
 800126a:	4b1b      	ldr	r3, [pc, #108]	@ (80012d8 <IOL_State_OP_Page_ReadProcess+0x7c>)
 800126c:	5c9a      	ldrb	r2, [r3, r2]
 800126e:	4b1b      	ldr	r3, [pc, #108]	@ (80012dc <IOL_State_OP_Page_ReadProcess+0x80>)
 8001270:	701a      	strb	r2, [r3, #0]
    device_Page_OD_arr[1] = IOL_ISDUPage_value[IOL_OP_OD_Page_Res_cnt + 1];
 8001272:	4b18      	ldr	r3, [pc, #96]	@ (80012d4 <IOL_State_OP_Page_ReadProcess+0x78>)
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	3301      	adds	r3, #1
 8001278:	4a17      	ldr	r2, [pc, #92]	@ (80012d8 <IOL_State_OP_Page_ReadProcess+0x7c>)
 800127a:	5cd2      	ldrb	r2, [r2, r3]
 800127c:	4b17      	ldr	r3, [pc, #92]	@ (80012dc <IOL_State_OP_Page_ReadProcess+0x80>)
 800127e:	705a      	strb	r2, [r3, #1]
    IOL_OP_OD_Page_Res_cnt++;
 8001280:	4b14      	ldr	r3, [pc, #80]	@ (80012d4 <IOL_State_OP_Page_ReadProcess+0x78>)
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	3301      	adds	r3, #1
 8001286:	b2da      	uxtb	r2, r3
 8001288:	4b12      	ldr	r3, [pc, #72]	@ (80012d4 <IOL_State_OP_Page_ReadProcess+0x78>)
 800128a:	701a      	strb	r2, [r3, #0]

    if (IOL_OP_OD_Page_Res_cnt >= 16)
 800128c:	4b11      	ldr	r3, [pc, #68]	@ (80012d4 <IOL_State_OP_Page_ReadProcess+0x78>)
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	2b0f      	cmp	r3, #15
 8001292:	d902      	bls.n	800129a <IOL_State_OP_Page_ReadProcess+0x3e>
    {
        IOL_OP_OD_Page_Res_cnt = 0;
 8001294:	4b0f      	ldr	r3, [pc, #60]	@ (80012d4 <IOL_State_OP_Page_ReadProcess+0x78>)
 8001296:	2200      	movs	r2, #0
 8001298:	701a      	strb	r2, [r3, #0]
    }

    device_Page_OD_arr[IOL_OP_ISDU_IN_PROCESSDATALENGTH - 1] = OP_CKS_GetChecksum(&device_Page_OD_arr[0], (IOL_OP_ISDU_IN_PROCESSDATALENGTH - 1), 0);
 800129a:	2200      	movs	r2, #0
 800129c:	2106      	movs	r1, #6
 800129e:	480f      	ldr	r0, [pc, #60]	@ (80012dc <IOL_State_OP_Page_ReadProcess+0x80>)
 80012a0:	f7ff fa9a 	bl	80007d8 <OP_CKS_GetChecksum>
 80012a4:	4603      	mov	r3, r0
 80012a6:	461a      	mov	r2, r3
 80012a8:	4b0c      	ldr	r3, [pc, #48]	@ (80012dc <IOL_State_OP_Page_ReadProcess+0x80>)
 80012aa:	719a      	strb	r2, [r3, #6]

    IOL_ENABLE;
 80012ac:	2201      	movs	r2, #1
 80012ae:	2140      	movs	r1, #64	@ 0x40
 80012b0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012b4:	f001 fd44 	bl	8002d40 <HAL_GPIO_WritePin>
    
    if (HAL_UART_Transmit_IT(&huart1, device_Page_OD_arr, IOL_OP_ISDU_IN_PROCESSDATALENGTH) != HAL_OK)
 80012b8:	2207      	movs	r2, #7
 80012ba:	4908      	ldr	r1, [pc, #32]	@ (80012dc <IOL_State_OP_Page_ReadProcess+0x80>)
 80012bc:	4808      	ldr	r0, [pc, #32]	@ (80012e0 <IOL_State_OP_Page_ReadProcess+0x84>)
 80012be:	f004 ffeb 	bl	8006298 <HAL_UART_Transmit_IT>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d001      	beq.n	80012cc <IOL_State_OP_Page_ReadProcess+0x70>
    {
        Error_Handler();
 80012c8:	f000 f959 	bl	800157e <Error_Handler>
    }
}
 80012cc:	bf00      	nop
 80012ce:	4618      	mov	r0, r3
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	200002cc 	.word	0x200002cc
 80012d8:	200002bc 	.word	0x200002bc
 80012dc:	200002d0 	.word	0x200002d0
 80012e0:	20000f90 	.word	0x20000f90

080012e4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80012ea:	4b12      	ldr	r3, [pc, #72]	@ (8001334 <MX_DMA_Init+0x50>)
 80012ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80012ee:	4a11      	ldr	r2, [pc, #68]	@ (8001334 <MX_DMA_Init+0x50>)
 80012f0:	f043 0304 	orr.w	r3, r3, #4
 80012f4:	6493      	str	r3, [r2, #72]	@ 0x48
 80012f6:	4b0f      	ldr	r3, [pc, #60]	@ (8001334 <MX_DMA_Init+0x50>)
 80012f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80012fa:	f003 0304 	and.w	r3, r3, #4
 80012fe:	607b      	str	r3, [r7, #4]
 8001300:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001302:	4b0c      	ldr	r3, [pc, #48]	@ (8001334 <MX_DMA_Init+0x50>)
 8001304:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001306:	4a0b      	ldr	r2, [pc, #44]	@ (8001334 <MX_DMA_Init+0x50>)
 8001308:	f043 0301 	orr.w	r3, r3, #1
 800130c:	6493      	str	r3, [r2, #72]	@ 0x48
 800130e:	4b09      	ldr	r3, [pc, #36]	@ (8001334 <MX_DMA_Init+0x50>)
 8001310:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001312:	f003 0301 	and.w	r3, r3, #1
 8001316:	603b      	str	r3, [r7, #0]
 8001318:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800131a:	2200      	movs	r2, #0
 800131c:	2100      	movs	r1, #0
 800131e:	200b      	movs	r0, #11
 8001320:	f001 f825 	bl	800236e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001324:	200b      	movs	r0, #11
 8001326:	f001 f83c 	bl	80023a2 <HAL_NVIC_EnableIRQ>

}
 800132a:	bf00      	nop
 800132c:	3708      	adds	r7, #8
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	40021000 	.word	0x40021000

08001338 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b08a      	sub	sp, #40	@ 0x28
 800133c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800133e:	f107 0314 	add.w	r3, r7, #20
 8001342:	2200      	movs	r2, #0
 8001344:	601a      	str	r2, [r3, #0]
 8001346:	605a      	str	r2, [r3, #4]
 8001348:	609a      	str	r2, [r3, #8]
 800134a:	60da      	str	r2, [r3, #12]
 800134c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800134e:	4b43      	ldr	r3, [pc, #268]	@ (800145c <MX_GPIO_Init+0x124>)
 8001350:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001352:	4a42      	ldr	r2, [pc, #264]	@ (800145c <MX_GPIO_Init+0x124>)
 8001354:	f043 0304 	orr.w	r3, r3, #4
 8001358:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800135a:	4b40      	ldr	r3, [pc, #256]	@ (800145c <MX_GPIO_Init+0x124>)
 800135c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800135e:	f003 0304 	and.w	r3, r3, #4
 8001362:	613b      	str	r3, [r7, #16]
 8001364:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001366:	4b3d      	ldr	r3, [pc, #244]	@ (800145c <MX_GPIO_Init+0x124>)
 8001368:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800136a:	4a3c      	ldr	r2, [pc, #240]	@ (800145c <MX_GPIO_Init+0x124>)
 800136c:	f043 0320 	orr.w	r3, r3, #32
 8001370:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001372:	4b3a      	ldr	r3, [pc, #232]	@ (800145c <MX_GPIO_Init+0x124>)
 8001374:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001376:	f003 0320 	and.w	r3, r3, #32
 800137a:	60fb      	str	r3, [r7, #12]
 800137c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800137e:	4b37      	ldr	r3, [pc, #220]	@ (800145c <MX_GPIO_Init+0x124>)
 8001380:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001382:	4a36      	ldr	r2, [pc, #216]	@ (800145c <MX_GPIO_Init+0x124>)
 8001384:	f043 0301 	orr.w	r3, r3, #1
 8001388:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800138a:	4b34      	ldr	r3, [pc, #208]	@ (800145c <MX_GPIO_Init+0x124>)
 800138c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800138e:	f003 0301 	and.w	r3, r3, #1
 8001392:	60bb      	str	r3, [r7, #8]
 8001394:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001396:	4b31      	ldr	r3, [pc, #196]	@ (800145c <MX_GPIO_Init+0x124>)
 8001398:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800139a:	4a30      	ldr	r2, [pc, #192]	@ (800145c <MX_GPIO_Init+0x124>)
 800139c:	f043 0302 	orr.w	r3, r3, #2
 80013a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013a2:	4b2e      	ldr	r3, [pc, #184]	@ (800145c <MX_GPIO_Init+0x124>)
 80013a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013a6:	f003 0302 	and.w	r3, r3, #2
 80013aa:	607b      	str	r3, [r7, #4]
 80013ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80013ae:	2200      	movs	r2, #0
 80013b0:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 80013b4:	482a      	ldr	r0, [pc, #168]	@ (8001460 <MX_GPIO_Init+0x128>)
 80013b6:	f001 fcc3 	bl	8002d40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 80013ba:	2200      	movs	r2, #0
 80013bc:	2140      	movs	r1, #64	@ 0x40
 80013be:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013c2:	f001 fcbd 	bl	8002d40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80013c6:	2200      	movs	r2, #0
 80013c8:	2101      	movs	r1, #1
 80013ca:	4826      	ldr	r0, [pc, #152]	@ (8001464 <MX_GPIO_Init+0x12c>)
 80013cc:	f001 fcb8 	bl	8002d40 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80013d0:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80013d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013d6:	2301      	movs	r3, #1
 80013d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013da:	2300      	movs	r3, #0
 80013dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013de:	2300      	movs	r3, #0
 80013e0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013e2:	f107 0314 	add.w	r3, r7, #20
 80013e6:	4619      	mov	r1, r3
 80013e8:	481d      	ldr	r0, [pc, #116]	@ (8001460 <MX_GPIO_Init+0x128>)
 80013ea:	f001 fb27 	bl	8002a3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80013ee:	23a0      	movs	r3, #160	@ 0xa0
 80013f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013f2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80013f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f8:	2300      	movs	r3, #0
 80013fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013fc:	f107 0314 	add.w	r3, r7, #20
 8001400:	4619      	mov	r1, r3
 8001402:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001406:	f001 fb19 	bl	8002a3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800140a:	2340      	movs	r3, #64	@ 0x40
 800140c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800140e:	2301      	movs	r3, #1
 8001410:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001412:	2300      	movs	r3, #0
 8001414:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001416:	2300      	movs	r3, #0
 8001418:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800141a:	f107 0314 	add.w	r3, r7, #20
 800141e:	4619      	mov	r1, r3
 8001420:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001424:	f001 fb0a 	bl	8002a3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001428:	2301      	movs	r3, #1
 800142a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800142c:	2301      	movs	r3, #1
 800142e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001430:	2300      	movs	r3, #0
 8001432:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001434:	2300      	movs	r3, #0
 8001436:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001438:	f107 0314 	add.w	r3, r7, #20
 800143c:	4619      	mov	r1, r3
 800143e:	4809      	ldr	r0, [pc, #36]	@ (8001464 <MX_GPIO_Init+0x12c>)
 8001440:	f001 fafc 	bl	8002a3c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001444:	2200      	movs	r2, #0
 8001446:	2100      	movs	r1, #0
 8001448:	2017      	movs	r0, #23
 800144a:	f000 ff90 	bl	800236e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800144e:	2017      	movs	r0, #23
 8001450:	f000 ffa7 	bl	80023a2 <HAL_NVIC_EnableIRQ>

}
 8001454:	bf00      	nop
 8001456:	3728      	adds	r7, #40	@ 0x28
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	40021000 	.word	0x40021000
 8001460:	48000800 	.word	0x48000800
 8001464:	48000400 	.word	0x48000400

08001468 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800146c:	f000 fe11 	bl	8002092 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001470:	f000 f83a 	bl	80014e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001474:	f7ff ff60 	bl	8001338 <MX_GPIO_Init>
  MX_DMA_Init();
 8001478:	f7ff ff34 	bl	80012e4 <MX_DMA_Init>
  MX_USART1_UART_Init();
 800147c:	f000 fc34 	bl	8001ce8 <MX_USART1_UART_Init>
  MX_USB_Device_Init();
 8001480:	f009 fff4 	bl	800b46c <MX_USB_Device_Init>
  MX_TIM1_Init();
 8001484:	f000 fbb6 	bl	8001bf4 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  Q_Init(&USB_TX_Q, (uint8_t *) USB_TX_Data, quedata_arraylength);
 8001488:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800148c:	4910      	ldr	r1, [pc, #64]	@ (80014d0 <main+0x68>)
 800148e:	4811      	ldr	r0, [pc, #68]	@ (80014d4 <main+0x6c>)
 8001490:	f000 f87b 	bl	800158a <Q_Init>

  HAL_Delay(3000);
 8001494:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8001498:	f000 fe6c 	bl	8002174 <HAL_Delay>
  HAL_TIM_Base_Start_IT(&htim1);
 800149c:	480e      	ldr	r0, [pc, #56]	@ (80014d8 <main+0x70>)
 800149e:	f004 f9cf 	bl	8005840 <HAL_TIM_Base_Start_IT>
  GetClockSourcePrint();
 80014a2:	f000 fd79 	bl	8001f98 <GetClockSourcePrint>
  BootMessagePrint();
 80014a6:	f000 fd47 	bl	8001f38 <BootMessagePrint>

  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, (uint8_t *)uart1_rx_IDLE_buf, UART_RX_IDLE_BUFSIZE);
 80014aa:	2264      	movs	r2, #100	@ 0x64
 80014ac:	490b      	ldr	r1, [pc, #44]	@ (80014dc <main+0x74>)
 80014ae:	480c      	ldr	r0, [pc, #48]	@ (80014e0 <main+0x78>)
 80014b0:	f006 fc60 	bl	8007d74 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 80014b4:	4b0b      	ldr	r3, [pc, #44]	@ (80014e4 <main+0x7c>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	681a      	ldr	r2, [r3, #0]
 80014ba:	4b0a      	ldr	r3, [pc, #40]	@ (80014e4 <main+0x7c>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f022 0204 	bic.w	r2, r2, #4
 80014c2:	601a      	str	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    User_Toggle_Led();
 80014c4:	f000 fd00 	bl	8001ec8 <User_Toggle_Led>
    ProcessDataIn_IncreaseCntValue();
 80014c8:	f000 fd14 	bl	8001ef4 <ProcessDataIn_IncreaseCntValue>
    User_Toggle_Led();
 80014cc:	bf00      	nop
 80014ce:	e7f9      	b.n	80014c4 <main+0x5c>
 80014d0:	200006d0 	.word	0x200006d0
 80014d4:	20001024 	.word	0x20001024
 80014d8:	20000ee4 	.word	0x20000ee4
 80014dc:	20000abc 	.word	0x20000abc
 80014e0:	20000f90 	.word	0x20000f90
 80014e4:	20000f30 	.word	0x20000f30

080014e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b094      	sub	sp, #80	@ 0x50
 80014ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014ee:	f107 0318 	add.w	r3, r7, #24
 80014f2:	2238      	movs	r2, #56	@ 0x38
 80014f4:	2100      	movs	r1, #0
 80014f6:	4618      	mov	r0, r3
 80014f8:	f00a fee4 	bl	800c2c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014fc:	1d3b      	adds	r3, r7, #4
 80014fe:	2200      	movs	r2, #0
 8001500:	601a      	str	r2, [r3, #0]
 8001502:	605a      	str	r2, [r3, #4]
 8001504:	609a      	str	r2, [r3, #8]
 8001506:	60da      	str	r2, [r3, #12]
 8001508:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800150a:	2000      	movs	r0, #0
 800150c:	f003 f96e 	bl	80047ec <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8001510:	2321      	movs	r3, #33	@ 0x21
 8001512:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001514:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8001518:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800151a:	2301      	movs	r3, #1
 800151c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800151e:	2302      	movs	r3, #2
 8001520:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001522:	2303      	movs	r3, #3
 8001524:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 8001526:	2306      	movs	r3, #6
 8001528:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800152a:	2355      	movs	r3, #85	@ 0x55
 800152c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800152e:	2302      	movs	r3, #2
 8001530:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 8001532:	2304      	movs	r3, #4
 8001534:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001536:	2302      	movs	r3, #2
 8001538:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800153a:	f107 0318 	add.w	r3, r7, #24
 800153e:	4618      	mov	r0, r3
 8001540:	f003 fa08 	bl	8004954 <HAL_RCC_OscConfig>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800154a:	f000 f818 	bl	800157e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800154e:	230f      	movs	r3, #15
 8001550:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001552:	2303      	movs	r3, #3
 8001554:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001556:	2300      	movs	r3, #0
 8001558:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800155a:	2300      	movs	r3, #0
 800155c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800155e:	2300      	movs	r3, #0
 8001560:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001562:	1d3b      	adds	r3, r7, #4
 8001564:	2104      	movs	r1, #4
 8001566:	4618      	mov	r0, r3
 8001568:	f003 fd06 	bl	8004f78 <HAL_RCC_ClockConfig>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001572:	f000 f804 	bl	800157e <Error_Handler>
  }
}
 8001576:	bf00      	nop
 8001578:	3750      	adds	r7, #80	@ 0x50
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}

0800157e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800157e:	b480      	push	{r7}
 8001580:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001582:	b672      	cpsid	i
}
 8001584:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001586:	bf00      	nop
 8001588:	e7fd      	b.n	8001586 <Error_Handler+0x8>

0800158a <Q_Init>:
#include "queue.h"

void Q_Init(Q_queue_t *queue, uint8_t *data, uint16_t len){
 800158a:	b480      	push	{r7}
 800158c:	b085      	sub	sp, #20
 800158e:	af00      	add	r7, sp, #0
 8001590:	60f8      	str	r0, [r7, #12]
 8001592:	60b9      	str	r1, [r7, #8]
 8001594:	4613      	mov	r3, r2
 8001596:	80fb      	strh	r3, [r7, #6]
    queue->idx_read = 0;
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	2200      	movs	r2, #0
 800159c:	809a      	strh	r2, [r3, #4]
    queue->idx_write = 0;
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	2200      	movs	r2, #0
 80015a2:	805a      	strh	r2, [r3, #2]
    queue->count_full = 0;
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	2200      	movs	r2, #0
 80015a8:	80da      	strh	r2, [r3, #6]
    queue->count_empty = 0;
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	2200      	movs	r2, #0
 80015ae:	811a      	strh	r2, [r3, #8]
    queue->size = len;
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	88fa      	ldrh	r2, [r7, #6]
 80015b4:	801a      	strh	r2, [r3, #0]
    queue->data = data;
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	68ba      	ldr	r2, [r7, #8]
 80015ba:	60da      	str	r2, [r3, #12]
}
 80015bc:	bf00      	nop
 80015be:	3714      	adds	r7, #20
 80015c0:	46bd      	mov	sp, r7
 80015c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c6:	4770      	bx	lr

080015c8 <Q_Write>:

void Q_Clear(Q_queue_t *queue){
    queue->idx_write = queue->idx_read;
}

bool Q_Write(Q_queue_t *queue, uint8_t *data, uint16_t len){
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b088      	sub	sp, #32
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	60f8      	str	r0, [r7, #12]
 80015d0:	60b9      	str	r1, [r7, #8]
 80015d2:	4613      	mov	r3, r2
 80015d4:	80fb      	strh	r3, [r7, #6]
    int empty_bytes;
    uint16_t next_idx;
    uint16_t num_first;
    bool ret = false;
 80015d6:	2300      	movs	r3, #0
 80015d8:	77fb      	strb	r3, [r7, #31]
    
    empty_bytes = Q_NumEmptyBytes(queue);  
 80015da:	68f8      	ldr	r0, [r7, #12]
 80015dc:	f000 f8ea 	bl	80017b4 <Q_NumEmptyBytes>
 80015e0:	4603      	mov	r3, r0
 80015e2:	61bb      	str	r3, [r7, #24]
    if(empty_bytes >= len){
 80015e4:	88fb      	ldrh	r3, [r7, #6]
 80015e6:	69ba      	ldr	r2, [r7, #24]
 80015e8:	429a      	cmp	r2, r3
 80015ea:	db44      	blt.n	8001676 <Q_Write+0xae>
        next_idx = queue->idx_write + len;
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80015f2:	b29a      	uxth	r2, r3
 80015f4:	88fb      	ldrh	r3, [r7, #6]
 80015f6:	4413      	add	r3, r2
 80015f8:	82fb      	strh	r3, [r7, #22]
        if(next_idx < queue->size){
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	881b      	ldrh	r3, [r3, #0]
 80015fe:	8afa      	ldrh	r2, [r7, #22]
 8001600:	429a      	cmp	r2, r3
 8001602:	d20b      	bcs.n	800161c <Q_Write+0x54>
            memcpy(&(queue->data[queue->idx_write]),data,len);  //memcpy(dest,source,num)
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	68db      	ldr	r3, [r3, #12]
 8001608:	68fa      	ldr	r2, [r7, #12]
 800160a:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 800160e:	4413      	add	r3, r2
 8001610:	88fa      	ldrh	r2, [r7, #6]
 8001612:	68b9      	ldr	r1, [r7, #8]
 8001614:	4618      	mov	r0, r3
 8001616:	f00a fed0 	bl	800c3ba <memcpy>
 800161a:	e01d      	b.n	8001658 <Q_Write+0x90>
        }
        else{
            num_first = queue->size-queue->idx_write;
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	881a      	ldrh	r2, [r3, #0]
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001626:	b29b      	uxth	r3, r3
 8001628:	1ad3      	subs	r3, r2, r3
 800162a:	82bb      	strh	r3, [r7, #20]
            memcpy(&(queue->data[queue->idx_write]),data,num_first);
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	68db      	ldr	r3, [r3, #12]
 8001630:	68fa      	ldr	r2, [r7, #12]
 8001632:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8001636:	4413      	add	r3, r2
 8001638:	8aba      	ldrh	r2, [r7, #20]
 800163a:	68b9      	ldr	r1, [r7, #8]
 800163c:	4618      	mov	r0, r3
 800163e:	f00a febc 	bl	800c3ba <memcpy>
            memcpy(&(queue->data[0]),&(data[num_first]),len-num_first);
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	68d8      	ldr	r0, [r3, #12]
 8001646:	8abb      	ldrh	r3, [r7, #20]
 8001648:	68ba      	ldr	r2, [r7, #8]
 800164a:	18d1      	adds	r1, r2, r3
 800164c:	88fa      	ldrh	r2, [r7, #6]
 800164e:	8abb      	ldrh	r3, [r7, #20]
 8001650:	1ad3      	subs	r3, r2, r3
 8001652:	461a      	mov	r2, r3
 8001654:	f00a feb1 	bl	800c3ba <memcpy>
        }        
        queue->idx_write = next_idx % queue->size;
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	881a      	ldrh	r2, [r3, #0]
 800165c:	8afb      	ldrh	r3, [r7, #22]
 800165e:	fbb3 f1f2 	udiv	r1, r3, r2
 8001662:	fb01 f202 	mul.w	r2, r1, r2
 8001666:	1a9b      	subs	r3, r3, r2
 8001668:	b29b      	uxth	r3, r3
 800166a:	b21a      	sxth	r2, r3
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	805a      	strh	r2, [r3, #2]
        ret = true;        
 8001670:	2301      	movs	r3, #1
 8001672:	77fb      	strb	r3, [r7, #31]
 8001674:	e00e      	b.n	8001694 <Q_Write+0xcc>
    }
    else    queue->count_full = _upperlimit(queue->count_full+1,0xFFFF);      
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	88db      	ldrh	r3, [r3, #6]
 800167a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800167e:	4293      	cmp	r3, r2
 8001680:	d004      	beq.n	800168c <Q_Write+0xc4>
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	88db      	ldrh	r3, [r3, #6]
 8001686:	3301      	adds	r3, #1
 8001688:	b29a      	uxth	r2, r3
 800168a:	e001      	b.n	8001690 <Q_Write+0xc8>
 800168c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	80da      	strh	r2, [r3, #6]
    return ret;    
 8001694:	7ffb      	ldrb	r3, [r7, #31]
}
 8001696:	4618      	mov	r0, r3
 8001698:	3720      	adds	r7, #32
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}

0800169e <Q_Read>:
    }
    else    queue->count_full = _upperlimit(queue->count_full+1,0xFFFF);
    return ret;    
}

bool Q_Read(Q_queue_t *queue, uint8_t *data, uint16_t len){
 800169e:	b580      	push	{r7, lr}
 80016a0:	b086      	sub	sp, #24
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	60f8      	str	r0, [r7, #12]
 80016a6:	60b9      	str	r1, [r7, #8]
 80016a8:	4613      	mov	r3, r2
 80016aa:	80fb      	strh	r3, [r7, #6]
    bool ret;
    uint16_t next_idx;
    uint16_t num_first;

    if(Q_NumContents(queue) >= len){
 80016ac:	68f8      	ldr	r0, [r7, #12]
 80016ae:	f000 f864 	bl	800177a <Q_NumContents>
 80016b2:	4603      	mov	r3, r0
 80016b4:	461a      	mov	r2, r3
 80016b6:	88fb      	ldrh	r3, [r7, #6]
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d848      	bhi.n	800174e <Q_Read+0xb0>
        next_idx = queue->idx_read + len;
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80016c2:	b29a      	uxth	r2, r3
 80016c4:	88fb      	ldrh	r3, [r7, #6]
 80016c6:	4413      	add	r3, r2
 80016c8:	82bb      	strh	r3, [r7, #20]
        if(next_idx < queue->size){
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	881b      	ldrh	r3, [r3, #0]
 80016ce:	8aba      	ldrh	r2, [r7, #20]
 80016d0:	429a      	cmp	r2, r3
 80016d2:	d20b      	bcs.n	80016ec <Q_Read+0x4e>
            memcpy(data,&(queue->data[queue->idx_read]),len);  //memcpy(dest,source,num)
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	68db      	ldr	r3, [r3, #12]
 80016d8:	68fa      	ldr	r2, [r7, #12]
 80016da:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 80016de:	4413      	add	r3, r2
 80016e0:	88fa      	ldrh	r2, [r7, #6]
 80016e2:	4619      	mov	r1, r3
 80016e4:	68b8      	ldr	r0, [r7, #8]
 80016e6:	f00a fe68 	bl	800c3ba <memcpy>
 80016ea:	e01d      	b.n	8001728 <Q_Read+0x8a>
        }
        else{
            num_first = queue->size-queue->idx_read;
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	881a      	ldrh	r2, [r3, #0]
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80016f6:	b29b      	uxth	r3, r3
 80016f8:	1ad3      	subs	r3, r2, r3
 80016fa:	827b      	strh	r3, [r7, #18]
            memcpy(data,&(queue->data[queue->idx_read]),num_first);  //memcpy(dest,source,num)
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	68db      	ldr	r3, [r3, #12]
 8001700:	68fa      	ldr	r2, [r7, #12]
 8001702:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8001706:	4413      	add	r3, r2
 8001708:	8a7a      	ldrh	r2, [r7, #18]
 800170a:	4619      	mov	r1, r3
 800170c:	68b8      	ldr	r0, [r7, #8]
 800170e:	f00a fe54 	bl	800c3ba <memcpy>
            memcpy(&(data[num_first]),&(queue->data[0]),len-num_first);
 8001712:	8a7b      	ldrh	r3, [r7, #18]
 8001714:	68ba      	ldr	r2, [r7, #8]
 8001716:	18d0      	adds	r0, r2, r3
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	68d9      	ldr	r1, [r3, #12]
 800171c:	88fa      	ldrh	r2, [r7, #6]
 800171e:	8a7b      	ldrh	r3, [r7, #18]
 8001720:	1ad3      	subs	r3, r2, r3
 8001722:	461a      	mov	r2, r3
 8001724:	f00a fe49 	bl	800c3ba <memcpy>
        }        
        queue->idx_read = (queue->idx_read+len)%queue->size;
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800172e:	461a      	mov	r2, r3
 8001730:	88fb      	ldrh	r3, [r7, #6]
 8001732:	4413      	add	r3, r2
 8001734:	68fa      	ldr	r2, [r7, #12]
 8001736:	8812      	ldrh	r2, [r2, #0]
 8001738:	fb93 f1f2 	sdiv	r1, r3, r2
 800173c:	fb01 f202 	mul.w	r2, r1, r2
 8001740:	1a9b      	subs	r3, r3, r2
 8001742:	b21a      	sxth	r2, r3
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	809a      	strh	r2, [r3, #4]
        ret = true;
 8001748:	2301      	movs	r3, #1
 800174a:	75fb      	strb	r3, [r7, #23]
 800174c:	e010      	b.n	8001770 <Q_Read+0xd2>
    }
    else{
        queue->count_empty = _upperlimit(queue->count_empty+1,0xFFFF);
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	891b      	ldrh	r3, [r3, #8]
 8001752:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001756:	4293      	cmp	r3, r2
 8001758:	d004      	beq.n	8001764 <Q_Read+0xc6>
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	891b      	ldrh	r3, [r3, #8]
 800175e:	3301      	adds	r3, #1
 8001760:	b29a      	uxth	r2, r3
 8001762:	e001      	b.n	8001768 <Q_Read+0xca>
 8001764:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	811a      	strh	r2, [r3, #8]
        ret = false;
 800176c:	2300      	movs	r3, #0
 800176e:	75fb      	strb	r3, [r7, #23]
    }
    return ret;
 8001770:	7dfb      	ldrb	r3, [r7, #23]
}
 8001772:	4618      	mov	r0, r3
 8001774:	3718      	adds	r7, #24
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}

0800177a <Q_NumContents>:
    else    queue->count_empty = _upperlimit(queue->count_empty+1,0xFFFF);
    return ret;
}


uint16_t Q_NumContents(Q_queue_t *queue){
 800177a:	b480      	push	{r7}
 800177c:	b083      	sub	sp, #12
 800177e:	af00      	add	r7, sp, #0
 8001780:	6078      	str	r0, [r7, #4]
    return (uint16_t)((queue->size + queue->idx_write - queue->idx_read)%(queue->size));    
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	881b      	ldrh	r3, [r3, #0]
 8001786:	461a      	mov	r2, r3
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800178e:	4413      	add	r3, r2
 8001790:	687a      	ldr	r2, [r7, #4]
 8001792:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8001796:	1a9b      	subs	r3, r3, r2
 8001798:	687a      	ldr	r2, [r7, #4]
 800179a:	8812      	ldrh	r2, [r2, #0]
 800179c:	fb93 f1f2 	sdiv	r1, r3, r2
 80017a0:	fb01 f202 	mul.w	r2, r1, r2
 80017a4:	1a9b      	subs	r3, r3, r2
 80017a6:	b29b      	uxth	r3, r3
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	370c      	adds	r7, #12
 80017ac:	46bd      	mov	sp, r7
 80017ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b2:	4770      	bx	lr

080017b4 <Q_NumEmptyBytes>:

uint16_t Q_NumEmptyBytes(Q_queue_t *queue){
 80017b4:	b590      	push	{r4, r7, lr}
 80017b6:	b083      	sub	sp, #12
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
    return queue->size - (int)Q_NumContents(queue) - 1;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	881c      	ldrh	r4, [r3, #0]
 80017c0:	6878      	ldr	r0, [r7, #4]
 80017c2:	f7ff ffda 	bl	800177a <Q_NumContents>
 80017c6:	4603      	mov	r3, r0
 80017c8:	1ae3      	subs	r3, r4, r3
 80017ca:	b29b      	uxth	r3, r3
 80017cc:	3b01      	subs	r3, #1
 80017ce:	b29b      	uxth	r3, r3
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	370c      	adds	r7, #12
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd90      	pop	{r4, r7, pc}

080017d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b082      	sub	sp, #8
 80017dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017de:	4b0f      	ldr	r3, [pc, #60]	@ (800181c <HAL_MspInit+0x44>)
 80017e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017e2:	4a0e      	ldr	r2, [pc, #56]	@ (800181c <HAL_MspInit+0x44>)
 80017e4:	f043 0301 	orr.w	r3, r3, #1
 80017e8:	6613      	str	r3, [r2, #96]	@ 0x60
 80017ea:	4b0c      	ldr	r3, [pc, #48]	@ (800181c <HAL_MspInit+0x44>)
 80017ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017ee:	f003 0301 	and.w	r3, r3, #1
 80017f2:	607b      	str	r3, [r7, #4]
 80017f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017f6:	4b09      	ldr	r3, [pc, #36]	@ (800181c <HAL_MspInit+0x44>)
 80017f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017fa:	4a08      	ldr	r2, [pc, #32]	@ (800181c <HAL_MspInit+0x44>)
 80017fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001800:	6593      	str	r3, [r2, #88]	@ 0x58
 8001802:	4b06      	ldr	r3, [pc, #24]	@ (800181c <HAL_MspInit+0x44>)
 8001804:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001806:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800180a:	603b      	str	r3, [r7, #0]
 800180c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800180e:	f003 f891 	bl	8004934 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001812:	bf00      	nop
 8001814:	3708      	adds	r7, #8
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	40021000 	.word	0x40021000

08001820 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001824:	bf00      	nop
 8001826:	e7fd      	b.n	8001824 <NMI_Handler+0x4>

08001828 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800182c:	bf00      	nop
 800182e:	e7fd      	b.n	800182c <HardFault_Handler+0x4>

08001830 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001834:	bf00      	nop
 8001836:	e7fd      	b.n	8001834 <MemManage_Handler+0x4>

08001838 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800183c:	bf00      	nop
 800183e:	e7fd      	b.n	800183c <BusFault_Handler+0x4>

08001840 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001844:	bf00      	nop
 8001846:	e7fd      	b.n	8001844 <UsageFault_Handler+0x4>

08001848 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800184c:	bf00      	nop
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr

08001856 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001856:	b480      	push	{r7}
 8001858:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800185a:	bf00      	nop
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr

08001864 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001868:	bf00      	nop
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr

08001872 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001872:	b580      	push	{r7, lr}
 8001874:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001876:	f000 fc5f 	bl	8002138 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800187a:	bf00      	nop
 800187c:	bd80      	pop	{r7, pc}
	...

08001880 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001884:	4802      	ldr	r0, [pc, #8]	@ (8001890 <DMA1_Channel1_IRQHandler+0x10>)
 8001886:	f000 ff8a 	bl	800279e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800188a:	bf00      	nop
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	20000f30 	.word	0x20000f30

08001894 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001898:	4802      	ldr	r0, [pc, #8]	@ (80018a4 <USB_LP_IRQHandler+0x10>)
 800189a:	f001 fb96 	bl	8002fca <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 800189e:	bf00      	nop
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	20002684 	.word	0x20002684

080018a8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80018ac:	2020      	movs	r0, #32
 80018ae:	f001 fa79 	bl	8002da4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80018b2:	2080      	movs	r0, #128	@ 0x80
 80018b4:	f001 fa76 	bl	8002da4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80018b8:	bf00      	nop
 80018ba:	bd80      	pop	{r7, pc}

080018bc <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80018c0:	4802      	ldr	r0, [pc, #8]	@ (80018cc <TIM1_UP_TIM16_IRQHandler+0x10>)
 80018c2:	f004 f827 	bl	8005914 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80018c6:	bf00      	nop
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	20000ee4 	.word	0x20000ee4

080018d0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
  if ((__HAL_UART_GET_FLAG(&huart1, UART_FLAG_FE)) || (__HAL_UART_GET_FLAG(&huart1, UART_FLAG_ORE)))
 80018d4:	4b0d      	ldr	r3, [pc, #52]	@ (800190c <USART1_IRQHandler+0x3c>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	69db      	ldr	r3, [r3, #28]
 80018da:	f003 0302 	and.w	r3, r3, #2
 80018de:	2b02      	cmp	r3, #2
 80018e0:	d006      	beq.n	80018f0 <USART1_IRQHandler+0x20>
 80018e2:	4b0a      	ldr	r3, [pc, #40]	@ (800190c <USART1_IRQHandler+0x3c>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	69db      	ldr	r3, [r3, #28]
 80018e8:	f003 0308 	and.w	r3, r3, #8
 80018ec:	2b08      	cmp	r3, #8
 80018ee:	d107      	bne.n	8001900 <USART1_IRQHandler+0x30>
  {
    __HAL_UART_CLEAR_OREFLAG(&huart1);
 80018f0:	4b06      	ldr	r3, [pc, #24]	@ (800190c <USART1_IRQHandler+0x3c>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	2208      	movs	r2, #8
 80018f6:	621a      	str	r2, [r3, #32]
    __HAL_UART_CLEAR_FEFLAG(&huart1);
 80018f8:	4b04      	ldr	r3, [pc, #16]	@ (800190c <USART1_IRQHandler+0x3c>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	2202      	movs	r2, #2
 80018fe:	621a      	str	r2, [r3, #32]
  }
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001900:	4802      	ldr	r0, [pc, #8]	@ (800190c <USART1_IRQHandler+0x3c>)
 8001902:	f004 fd5d 	bl	80063c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001906:	bf00      	nop
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	20000f90 	.word	0x20000f90

08001910 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 1 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b084      	sub	sp, #16
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  uint16_t num = 0;
 8001918:	2300      	movs	r3, #0
 800191a:	81fb      	strh	r3, [r7, #14]

  if ( (num = Q_NumContents(&USB_TX_Q)) > 0 )
 800191c:	4818      	ldr	r0, [pc, #96]	@ (8001980 <HAL_TIM_PeriodElapsedCallback+0x70>)
 800191e:	f7ff ff2c 	bl	800177a <Q_NumContents>
 8001922:	4603      	mov	r3, r0
 8001924:	81fb      	strh	r3, [r7, #14]
 8001926:	89fb      	ldrh	r3, [r7, #14]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d016      	beq.n	800195a <HAL_TIM_PeriodElapsedCallback+0x4a>
  {
    if (CDC_Transmit_Is_Busy() != USBD_BUSY)
 800192c:	f009 fe94 	bl	800b658 <CDC_Transmit_Is_Busy>
 8001930:	4603      	mov	r3, r0
 8001932:	2b01      	cmp	r3, #1
 8001934:	d011      	beq.n	800195a <HAL_TIM_PeriodElapsedCallback+0x4a>
    {
      queDataNum += num;
 8001936:	4b13      	ldr	r3, [pc, #76]	@ (8001984 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8001938:	881a      	ldrh	r2, [r3, #0]
 800193a:	89fb      	ldrh	r3, [r7, #14]
 800193c:	4413      	add	r3, r2
 800193e:	b29a      	uxth	r2, r3
 8001940:	4b10      	ldr	r3, [pc, #64]	@ (8001984 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8001942:	801a      	strh	r2, [r3, #0]

      Q_Read(&USB_TX_Q, (uint8_t *)queData, num);
 8001944:	89fb      	ldrh	r3, [r7, #14]
 8001946:	461a      	mov	r2, r3
 8001948:	490f      	ldr	r1, [pc, #60]	@ (8001988 <HAL_TIM_PeriodElapsedCallback+0x78>)
 800194a:	480d      	ldr	r0, [pc, #52]	@ (8001980 <HAL_TIM_PeriodElapsedCallback+0x70>)
 800194c:	f7ff fea7 	bl	800169e <Q_Read>

      CDC_Transmit_FS(queData, num);
 8001950:	89fb      	ldrh	r3, [r7, #14]
 8001952:	4619      	mov	r1, r3
 8001954:	480c      	ldr	r0, [pc, #48]	@ (8001988 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8001956:	f009 fe47 	bl	800b5e8 <CDC_Transmit_FS>
    }
  }

  if (htim->Instance == TIM1)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a0b      	ldr	r2, [pc, #44]	@ (800198c <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8001960:	4293      	cmp	r3, r2
 8001962:	d109      	bne.n	8001978 <HAL_TIM_PeriodElapsedCallback+0x68>
  {
    TIM1_CNT_1++;
 8001964:	4b0a      	ldr	r3, [pc, #40]	@ (8001990 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	3301      	adds	r3, #1
 800196a:	4a09      	ldr	r2, [pc, #36]	@ (8001990 <HAL_TIM_PeriodElapsedCallback+0x80>)
 800196c:	6013      	str	r3, [r2, #0]
    TIM1_CNT_2++;
 800196e:	4b09      	ldr	r3, [pc, #36]	@ (8001994 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	3301      	adds	r3, #1
 8001974:	4a07      	ldr	r2, [pc, #28]	@ (8001994 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001976:	6013      	str	r3, [r2, #0]
  }
}
 8001978:	bf00      	nop
 800197a:	3710      	adds	r7, #16
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}
 8001980:	20001024 	.word	0x20001024
 8001984:	200002e6 	.word	0x200002e6
 8001988:	200002e8 	.word	0x200002e8
 800198c:	40012c00 	.word	0x40012c00
 8001990:	200002dc 	.word	0x200002dc
 8001994:	200002e0 	.word	0x200002e0

08001998 <HAL_UARTEx_RxEventCallback>:

uint8_t IOL_Rx_IDLEFlag = 0;
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b088      	sub	sp, #32
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
 80019a0:	460b      	mov	r3, r1
 80019a2:	807b      	strh	r3, [r7, #2]
  uart_rx_IDLE_TotalCnt += Size;
 80019a4:	887a      	ldrh	r2, [r7, #2]
 80019a6:	4b33      	ldr	r3, [pc, #204]	@ (8001a74 <HAL_UARTEx_RxEventCallback+0xdc>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4413      	add	r3, r2
 80019ac:	4a31      	ldr	r2, [pc, #196]	@ (8001a74 <HAL_UARTEx_RxEventCallback+0xdc>)
 80019ae:	6013      	str	r3, [r2, #0]
  
  if (huart->Instance == USART1)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a30      	ldr	r2, [pc, #192]	@ (8001a78 <HAL_UARTEx_RxEventCallback+0xe0>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d158      	bne.n	8001a6c <HAL_UARTEx_RxEventCallback+0xd4>
  {


    if (uart_rx_IDLE_TotalCnt >= 3)
 80019ba:	4b2e      	ldr	r3, [pc, #184]	@ (8001a74 <HAL_UARTEx_RxEventCallback+0xdc>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	2b02      	cmp	r3, #2
 80019c0:	d917      	bls.n	80019f2 <HAL_UARTEx_RxEventCallback+0x5a>
    {
      // DEBUG_GPIO_TOGGLE;
      if (IOL_Rx_IDLEFlag == 1)
 80019c2:	4b2e      	ldr	r3, [pc, #184]	@ (8001a7c <HAL_UARTEx_RxEventCallback+0xe4>)
 80019c4:	781b      	ldrb	r3, [r3, #0]
 80019c6:	2b01      	cmp	r3, #1
 80019c8:	d103      	bne.n	80019d2 <HAL_UARTEx_RxEventCallback+0x3a>
      {
        IOL_Rx_IDLEFlag = 0;
 80019ca:	4b2c      	ldr	r3, [pc, #176]	@ (8001a7c <HAL_UARTEx_RxEventCallback+0xe4>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	701a      	strb	r2, [r3, #0]
 80019d0:	e00f      	b.n	80019f2 <HAL_UARTEx_RxEventCallback+0x5a>
      }
      else
      {
        DEBUG_GPIO_TOGGLE;
 80019d2:	2101      	movs	r1, #1
 80019d4:	482a      	ldr	r0, [pc, #168]	@ (8001a80 <HAL_UARTEx_RxEventCallback+0xe8>)
 80019d6:	f001 f9cb 	bl	8002d70 <HAL_GPIO_TogglePin>
        IOL_Rx_IDLEFlag = 1;
 80019da:	4b28      	ldr	r3, [pc, #160]	@ (8001a7c <HAL_UARTEx_RxEventCallback+0xe4>)
 80019dc:	2201      	movs	r2, #1
 80019de:	701a      	strb	r2, [r3, #0]
        // IOL_PageTest(Size);
        IOL_Parse_Rx_data(uart1_rx_IDLE_buf);
 80019e0:	4828      	ldr	r0, [pc, #160]	@ (8001a84 <HAL_UARTEx_RxEventCallback+0xec>)
 80019e2:	f7ff fa05 	bl	8000df0 <IOL_Parse_Rx_data>
        // IOL_Parse_Rx_data();
        IOL_StateM_Process();
 80019e6:	f7ff f9e7 	bl	8000db8 <IOL_StateM_Process>
        DEBUG_GPIO_TOGGLE;
 80019ea:	2101      	movs	r1, #1
 80019ec:	4824      	ldr	r0, [pc, #144]	@ (8001a80 <HAL_UARTEx_RxEventCallback+0xe8>)
 80019ee:	f001 f9bf 	bl	8002d70 <HAL_GPIO_TogglePin>
        // IOL_StartUp_Seq_Page(Size);
      }

    }

    __HAL_DMA_DISABLE(&hdma_usart1_rx);
 80019f2:	4b25      	ldr	r3, [pc, #148]	@ (8001a88 <HAL_UARTEx_RxEventCallback+0xf0>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	681a      	ldr	r2, [r3, #0]
 80019f8:	4b23      	ldr	r3, [pc, #140]	@ (8001a88 <HAL_UARTEx_RxEventCallback+0xf0>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f022 0201 	bic.w	r2, r2, #1
 8001a00:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Instance->CNDTR = UART_RX_IDLE_BUFSIZE;
 8001a02:	4b21      	ldr	r3, [pc, #132]	@ (8001a88 <HAL_UARTEx_RxEventCallback+0xf0>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	2264      	movs	r2, #100	@ 0x64
 8001a08:	605a      	str	r2, [r3, #4]
    __HAL_DMA_ENABLE(&hdma_usart1_rx);
 8001a0a:	4b1f      	ldr	r3, [pc, #124]	@ (8001a88 <HAL_UARTEx_RxEventCallback+0xf0>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	681a      	ldr	r2, [r3, #0]
 8001a10:	4b1d      	ldr	r3, [pc, #116]	@ (8001a88 <HAL_UARTEx_RxEventCallback+0xf0>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f042 0201 	orr.w	r2, r2, #1
 8001a18:	601a      	str	r2, [r3, #0]

    __HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	69db      	ldr	r3, [r3, #28]
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	e853 3f00 	ldrex	r3, [r3]
 8001a2c:	60bb      	str	r3, [r7, #8]
   return(result);
 8001a2e:	68bb      	ldr	r3, [r7, #8]
 8001a30:	f043 0310 	orr.w	r3, r3, #16
 8001a34:	61fb      	str	r3, [r7, #28]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	461a      	mov	r2, r3
 8001a3c:	69fb      	ldr	r3, [r7, #28]
 8001a3e:	61bb      	str	r3, [r7, #24]
 8001a40:	617a      	str	r2, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001a42:	6979      	ldr	r1, [r7, #20]
 8001a44:	69ba      	ldr	r2, [r7, #24]
 8001a46:	e841 2300 	strex	r3, r2, [r1]
 8001a4a:	613b      	str	r3, [r7, #16]
   return(result);
 8001a4c:	693b      	ldr	r3, [r7, #16]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d1e6      	bne.n	8001a20 <HAL_UARTEx_RxEventCallback+0x88>
    HAL_UARTEx_ReceiveToIdle_DMA(&huart1, (uint8_t *) uart1_rx_IDLE_buf, UART_RX_IDLE_BUFSIZE);
 8001a52:	2264      	movs	r2, #100	@ 0x64
 8001a54:	490b      	ldr	r1, [pc, #44]	@ (8001a84 <HAL_UARTEx_RxEventCallback+0xec>)
 8001a56:	480d      	ldr	r0, [pc, #52]	@ (8001a8c <HAL_UARTEx_RxEventCallback+0xf4>)
 8001a58:	f006 f98c 	bl	8007d74 <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8001a5c:	4b0a      	ldr	r3, [pc, #40]	@ (8001a88 <HAL_UARTEx_RxEventCallback+0xf0>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	681a      	ldr	r2, [r3, #0]
 8001a62:	4b09      	ldr	r3, [pc, #36]	@ (8001a88 <HAL_UARTEx_RxEventCallback+0xf0>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f022 0204 	bic.w	r2, r2, #4
 8001a6a:	601a      	str	r2, [r3, #0]

    // HAL_NVIC_EnableIRQ(USART1_IRQn);
    // HAL_UART_DMAResume(&huart1);

  }
}
 8001a6c:	bf00      	nop
 8001a6e:	3720      	adds	r7, #32
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	20000ab8 	.word	0x20000ab8
 8001a78:	40013800 	.word	0x40013800
 8001a7c:	200002d7 	.word	0x200002d7
 8001a80:	48000400 	.word	0x48000400
 8001a84:	20000abc 	.word	0x20000abc
 8001a88:	20000f30 	.word	0x20000f30
 8001a8c:	20000f90 	.word	0x20000f90

08001a90 <HAL_UART_TxCpltCallback>:


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b082      	sub	sp, #8
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART1)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a07      	ldr	r2, [pc, #28]	@ (8001abc <HAL_UART_TxCpltCallback+0x2c>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d107      	bne.n	8001ab2 <HAL_UART_TxCpltCallback+0x22>
  {
    IOL_DISABLE;
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	2140      	movs	r1, #64	@ 0x40
 8001aa6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001aaa:	f001 f949 	bl	8002d40 <HAL_GPIO_WritePin>
    IOL_PD_Buffer_Clear();
 8001aae:	f000 fab5 	bl	800201c <IOL_PD_Buffer_Clear>
    // __HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE);
    // ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
    // HAL_UARTEx_ReceiveToIdle_DMA(&huart1, (uint8_t *) uart1_rx_IDLE_buf, UART_RX_IDLE_BUFSIZE);
    // __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
  }
}
 8001ab2:	bf00      	nop
 8001ab4:	3708      	adds	r7, #8
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	40013800 	.word	0x40013800

08001ac0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b086      	sub	sp, #24
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	60f8      	str	r0, [r7, #12]
 8001ac8:	60b9      	str	r1, [r7, #8]
 8001aca:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001acc:	2300      	movs	r3, #0
 8001ace:	617b      	str	r3, [r7, #20]
 8001ad0:	e00a      	b.n	8001ae8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001ad2:	f3af 8000 	nop.w
 8001ad6:	4601      	mov	r1, r0
 8001ad8:	68bb      	ldr	r3, [r7, #8]
 8001ada:	1c5a      	adds	r2, r3, #1
 8001adc:	60ba      	str	r2, [r7, #8]
 8001ade:	b2ca      	uxtb	r2, r1
 8001ae0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	3301      	adds	r3, #1
 8001ae6:	617b      	str	r3, [r7, #20]
 8001ae8:	697a      	ldr	r2, [r7, #20]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	429a      	cmp	r2, r3
 8001aee:	dbf0      	blt.n	8001ad2 <_read+0x12>
  }

  return len;
 8001af0:	687b      	ldr	r3, [r7, #4]
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3718      	adds	r7, #24
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}

08001afa <_close>:
  }
  return len;
}

int _close(int file)
{
 8001afa:	b480      	push	{r7}
 8001afc:	b083      	sub	sp, #12
 8001afe:	af00      	add	r7, sp, #0
 8001b00:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b02:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	370c      	adds	r7, #12
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr

08001b12 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b12:	b480      	push	{r7}
 8001b14:	b083      	sub	sp, #12
 8001b16:	af00      	add	r7, sp, #0
 8001b18:	6078      	str	r0, [r7, #4]
 8001b1a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001b22:	605a      	str	r2, [r3, #4]
  return 0;
 8001b24:	2300      	movs	r3, #0
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	370c      	adds	r7, #12
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr

08001b32 <_isatty>:

int _isatty(int file)
{
 8001b32:	b480      	push	{r7}
 8001b34:	b083      	sub	sp, #12
 8001b36:	af00      	add	r7, sp, #0
 8001b38:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001b3a:	2301      	movs	r3, #1
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	370c      	adds	r7, #12
 8001b40:	46bd      	mov	sp, r7
 8001b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b46:	4770      	bx	lr

08001b48 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b085      	sub	sp, #20
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	60f8      	str	r0, [r7, #12]
 8001b50:	60b9      	str	r1, [r7, #8]
 8001b52:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b54:	2300      	movs	r3, #0
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3714      	adds	r7, #20
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr
	...

08001b64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b086      	sub	sp, #24
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b6c:	4a14      	ldr	r2, [pc, #80]	@ (8001bc0 <_sbrk+0x5c>)
 8001b6e:	4b15      	ldr	r3, [pc, #84]	@ (8001bc4 <_sbrk+0x60>)
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b78:	4b13      	ldr	r3, [pc, #76]	@ (8001bc8 <_sbrk+0x64>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d102      	bne.n	8001b86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b80:	4b11      	ldr	r3, [pc, #68]	@ (8001bc8 <_sbrk+0x64>)
 8001b82:	4a12      	ldr	r2, [pc, #72]	@ (8001bcc <_sbrk+0x68>)
 8001b84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b86:	4b10      	ldr	r3, [pc, #64]	@ (8001bc8 <_sbrk+0x64>)
 8001b88:	681a      	ldr	r2, [r3, #0]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	4413      	add	r3, r2
 8001b8e:	693a      	ldr	r2, [r7, #16]
 8001b90:	429a      	cmp	r2, r3
 8001b92:	d207      	bcs.n	8001ba4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b94:	f00a fbe4 	bl	800c360 <__errno>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	220c      	movs	r2, #12
 8001b9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b9e:	f04f 33ff 	mov.w	r3, #4294967295
 8001ba2:	e009      	b.n	8001bb8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ba4:	4b08      	ldr	r3, [pc, #32]	@ (8001bc8 <_sbrk+0x64>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001baa:	4b07      	ldr	r3, [pc, #28]	@ (8001bc8 <_sbrk+0x64>)
 8001bac:	681a      	ldr	r2, [r3, #0]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	4413      	add	r3, r2
 8001bb2:	4a05      	ldr	r2, [pc, #20]	@ (8001bc8 <_sbrk+0x64>)
 8001bb4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bb6:	68fb      	ldr	r3, [r7, #12]
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	3718      	adds	r7, #24
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}
 8001bc0:	20008000 	.word	0x20008000
 8001bc4:	00000400 	.word	0x00000400
 8001bc8:	200002d8 	.word	0x200002d8
 8001bcc:	20002960 	.word	0x20002960

08001bd0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001bd4:	4b06      	ldr	r3, [pc, #24]	@ (8001bf0 <SystemInit+0x20>)
 8001bd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001bda:	4a05      	ldr	r2, [pc, #20]	@ (8001bf0 <SystemInit+0x20>)
 8001bdc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001be0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001be4:	bf00      	nop
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr
 8001bee:	bf00      	nop
 8001bf0:	e000ed00 	.word	0xe000ed00

08001bf4 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b088      	sub	sp, #32
 8001bf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bfa:	f107 0310 	add.w	r3, r7, #16
 8001bfe:	2200      	movs	r2, #0
 8001c00:	601a      	str	r2, [r3, #0]
 8001c02:	605a      	str	r2, [r3, #4]
 8001c04:	609a      	str	r2, [r3, #8]
 8001c06:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c08:	1d3b      	adds	r3, r7, #4
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	601a      	str	r2, [r3, #0]
 8001c0e:	605a      	str	r2, [r3, #4]
 8001c10:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001c12:	4b20      	ldr	r3, [pc, #128]	@ (8001c94 <MX_TIM1_Init+0xa0>)
 8001c14:	4a20      	ldr	r2, [pc, #128]	@ (8001c98 <MX_TIM1_Init+0xa4>)
 8001c16:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1000-1;
 8001c18:	4b1e      	ldr	r3, [pc, #120]	@ (8001c94 <MX_TIM1_Init+0xa0>)
 8001c1a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001c1e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c20:	4b1c      	ldr	r3, [pc, #112]	@ (8001c94 <MX_TIM1_Init+0xa0>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 169;
 8001c26:	4b1b      	ldr	r3, [pc, #108]	@ (8001c94 <MX_TIM1_Init+0xa0>)
 8001c28:	22a9      	movs	r2, #169	@ 0xa9
 8001c2a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c2c:	4b19      	ldr	r3, [pc, #100]	@ (8001c94 <MX_TIM1_Init+0xa0>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001c32:	4b18      	ldr	r3, [pc, #96]	@ (8001c94 <MX_TIM1_Init+0xa0>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c38:	4b16      	ldr	r3, [pc, #88]	@ (8001c94 <MX_TIM1_Init+0xa0>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001c3e:	4815      	ldr	r0, [pc, #84]	@ (8001c94 <MX_TIM1_Init+0xa0>)
 8001c40:	f003 fda6 	bl	8005790 <HAL_TIM_Base_Init>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d001      	beq.n	8001c4e <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8001c4a:	f7ff fc98 	bl	800157e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c4e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c52:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001c54:	f107 0310 	add.w	r3, r7, #16
 8001c58:	4619      	mov	r1, r3
 8001c5a:	480e      	ldr	r0, [pc, #56]	@ (8001c94 <MX_TIM1_Init+0xa0>)
 8001c5c:	f003 ffaa 	bl	8005bb4 <HAL_TIM_ConfigClockSource>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d001      	beq.n	8001c6a <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8001c66:	f7ff fc8a 	bl	800157e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c72:	2300      	movs	r3, #0
 8001c74:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001c76:	1d3b      	adds	r3, r7, #4
 8001c78:	4619      	mov	r1, r3
 8001c7a:	4806      	ldr	r0, [pc, #24]	@ (8001c94 <MX_TIM1_Init+0xa0>)
 8001c7c:	f004 f9f4 	bl	8006068 <HAL_TIMEx_MasterConfigSynchronization>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d001      	beq.n	8001c8a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001c86:	f7ff fc7a 	bl	800157e <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001c8a:	bf00      	nop
 8001c8c:	3720      	adds	r7, #32
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	20000ee4 	.word	0x20000ee4
 8001c98:	40012c00 	.word	0x40012c00

08001c9c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b084      	sub	sp, #16
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a0d      	ldr	r2, [pc, #52]	@ (8001ce0 <HAL_TIM_Base_MspInit+0x44>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d113      	bne.n	8001cd6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001cae:	4b0d      	ldr	r3, [pc, #52]	@ (8001ce4 <HAL_TIM_Base_MspInit+0x48>)
 8001cb0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001cb2:	4a0c      	ldr	r2, [pc, #48]	@ (8001ce4 <HAL_TIM_Base_MspInit+0x48>)
 8001cb4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001cb8:	6613      	str	r3, [r2, #96]	@ 0x60
 8001cba:	4b0a      	ldr	r3, [pc, #40]	@ (8001ce4 <HAL_TIM_Base_MspInit+0x48>)
 8001cbc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001cbe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001cc2:	60fb      	str	r3, [r7, #12]
 8001cc4:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	2100      	movs	r1, #0
 8001cca:	2019      	movs	r0, #25
 8001ccc:	f000 fb4f 	bl	800236e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001cd0:	2019      	movs	r0, #25
 8001cd2:	f000 fb66 	bl	80023a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001cd6:	bf00      	nop
 8001cd8:	3710      	adds	r7, #16
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	40012c00 	.word	0x40012c00
 8001ce4:	40021000 	.word	0x40021000

08001ce8 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001cec:	4b23      	ldr	r3, [pc, #140]	@ (8001d7c <MX_USART1_UART_Init+0x94>)
 8001cee:	4a24      	ldr	r2, [pc, #144]	@ (8001d80 <MX_USART1_UART_Init+0x98>)
 8001cf0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 230400;
 8001cf2:	4b22      	ldr	r3, [pc, #136]	@ (8001d7c <MX_USART1_UART_Init+0x94>)
 8001cf4:	f44f 3261 	mov.w	r2, #230400	@ 0x38400
 8001cf8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 8001cfa:	4b20      	ldr	r3, [pc, #128]	@ (8001d7c <MX_USART1_UART_Init+0x94>)
 8001cfc:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001d00:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001d02:	4b1e      	ldr	r3, [pc, #120]	@ (8001d7c <MX_USART1_UART_Init+0x94>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_EVEN;
 8001d08:	4b1c      	ldr	r3, [pc, #112]	@ (8001d7c <MX_USART1_UART_Init+0x94>)
 8001d0a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001d0e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001d10:	4b1a      	ldr	r3, [pc, #104]	@ (8001d7c <MX_USART1_UART_Init+0x94>)
 8001d12:	220c      	movs	r2, #12
 8001d14:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d16:	4b19      	ldr	r3, [pc, #100]	@ (8001d7c <MX_USART1_UART_Init+0x94>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d1c:	4b17      	ldr	r3, [pc, #92]	@ (8001d7c <MX_USART1_UART_Init+0x94>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d22:	4b16      	ldr	r3, [pc, #88]	@ (8001d7c <MX_USART1_UART_Init+0x94>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001d28:	4b14      	ldr	r3, [pc, #80]	@ (8001d7c <MX_USART1_UART_Init+0x94>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d2e:	4b13      	ldr	r3, [pc, #76]	@ (8001d7c <MX_USART1_UART_Init+0x94>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001d34:	4811      	ldr	r0, [pc, #68]	@ (8001d7c <MX_USART1_UART_Init+0x94>)
 8001d36:	f004 fa5f 	bl	80061f8 <HAL_UART_Init>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d001      	beq.n	8001d44 <MX_USART1_UART_Init+0x5c>
  {
    Error_Handler();
 8001d40:	f7ff fc1d 	bl	800157e <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d44:	2100      	movs	r1, #0
 8001d46:	480d      	ldr	r0, [pc, #52]	@ (8001d7c <MX_USART1_UART_Init+0x94>)
 8001d48:	f005 ff98 	bl	8007c7c <HAL_UARTEx_SetTxFifoThreshold>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d001      	beq.n	8001d56 <MX_USART1_UART_Init+0x6e>
  {
    Error_Handler();
 8001d52:	f7ff fc14 	bl	800157e <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d56:	2100      	movs	r1, #0
 8001d58:	4808      	ldr	r0, [pc, #32]	@ (8001d7c <MX_USART1_UART_Init+0x94>)
 8001d5a:	f005 ffcd 	bl	8007cf8 <HAL_UARTEx_SetRxFifoThreshold>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d001      	beq.n	8001d68 <MX_USART1_UART_Init+0x80>
  {
    Error_Handler();
 8001d64:	f7ff fc0b 	bl	800157e <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001d68:	4804      	ldr	r0, [pc, #16]	@ (8001d7c <MX_USART1_UART_Init+0x94>)
 8001d6a:	f005 ff4e 	bl	8007c0a <HAL_UARTEx_DisableFifoMode>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d001      	beq.n	8001d78 <MX_USART1_UART_Init+0x90>
  {
    Error_Handler();
 8001d74:	f7ff fc03 	bl	800157e <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001d78:	bf00      	nop
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	20000f90 	.word	0x20000f90
 8001d80:	40013800 	.word	0x40013800

08001d84 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b09a      	sub	sp, #104	@ 0x68
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d8c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001d90:	2200      	movs	r2, #0
 8001d92:	601a      	str	r2, [r3, #0]
 8001d94:	605a      	str	r2, [r3, #4]
 8001d96:	609a      	str	r2, [r3, #8]
 8001d98:	60da      	str	r2, [r3, #12]
 8001d9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d9c:	f107 0310 	add.w	r3, r7, #16
 8001da0:	2244      	movs	r2, #68	@ 0x44
 8001da2:	2100      	movs	r1, #0
 8001da4:	4618      	mov	r0, r3
 8001da6:	f00a fa8d 	bl	800c2c4 <memset>
  if(uartHandle->Instance==USART1)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a38      	ldr	r2, [pc, #224]	@ (8001e90 <HAL_UART_MspInit+0x10c>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d169      	bne.n	8001e88 <HAL_UART_MspInit+0x104>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001db4:	2301      	movs	r3, #1
 8001db6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001db8:	2300      	movs	r3, #0
 8001dba:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001dbc:	f107 0310 	add.w	r3, r7, #16
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f003 faf5 	bl	80053b0 <HAL_RCCEx_PeriphCLKConfig>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d001      	beq.n	8001dd0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001dcc:	f7ff fbd7 	bl	800157e <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001dd0:	4b30      	ldr	r3, [pc, #192]	@ (8001e94 <HAL_UART_MspInit+0x110>)
 8001dd2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001dd4:	4a2f      	ldr	r2, [pc, #188]	@ (8001e94 <HAL_UART_MspInit+0x110>)
 8001dd6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001dda:	6613      	str	r3, [r2, #96]	@ 0x60
 8001ddc:	4b2d      	ldr	r3, [pc, #180]	@ (8001e94 <HAL_UART_MspInit+0x110>)
 8001dde:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001de0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001de4:	60fb      	str	r3, [r7, #12]
 8001de6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001de8:	4b2a      	ldr	r3, [pc, #168]	@ (8001e94 <HAL_UART_MspInit+0x110>)
 8001dea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dec:	4a29      	ldr	r2, [pc, #164]	@ (8001e94 <HAL_UART_MspInit+0x110>)
 8001dee:	f043 0301 	orr.w	r3, r3, #1
 8001df2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001df4:	4b27      	ldr	r3, [pc, #156]	@ (8001e94 <HAL_UART_MspInit+0x110>)
 8001df6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001df8:	f003 0301 	and.w	r3, r3, #1
 8001dfc:	60bb      	str	r3, [r7, #8]
 8001dfe:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001e00:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001e04:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e06:	2302      	movs	r3, #2
 8001e08:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001e12:	2307      	movs	r3, #7
 8001e14:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e16:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001e1a:	4619      	mov	r1, r3
 8001e1c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e20:	f000 fe0c 	bl	8002a3c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 8001e24:	4b1c      	ldr	r3, [pc, #112]	@ (8001e98 <HAL_UART_MspInit+0x114>)
 8001e26:	4a1d      	ldr	r2, [pc, #116]	@ (8001e9c <HAL_UART_MspInit+0x118>)
 8001e28:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8001e2a:	4b1b      	ldr	r3, [pc, #108]	@ (8001e98 <HAL_UART_MspInit+0x114>)
 8001e2c:	2218      	movs	r2, #24
 8001e2e:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e30:	4b19      	ldr	r3, [pc, #100]	@ (8001e98 <HAL_UART_MspInit+0x114>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e36:	4b18      	ldr	r3, [pc, #96]	@ (8001e98 <HAL_UART_MspInit+0x114>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001e3c:	4b16      	ldr	r3, [pc, #88]	@ (8001e98 <HAL_UART_MspInit+0x114>)
 8001e3e:	2280      	movs	r2, #128	@ 0x80
 8001e40:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e42:	4b15      	ldr	r3, [pc, #84]	@ (8001e98 <HAL_UART_MspInit+0x114>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e48:	4b13      	ldr	r3, [pc, #76]	@ (8001e98 <HAL_UART_MspInit+0x114>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001e4e:	4b12      	ldr	r3, [pc, #72]	@ (8001e98 <HAL_UART_MspInit+0x114>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001e54:	4b10      	ldr	r3, [pc, #64]	@ (8001e98 <HAL_UART_MspInit+0x114>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001e5a:	480f      	ldr	r0, [pc, #60]	@ (8001e98 <HAL_UART_MspInit+0x114>)
 8001e5c:	f000 fabc 	bl	80023d8 <HAL_DMA_Init>
 8001e60:	4603      	mov	r3, r0
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d001      	beq.n	8001e6a <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 8001e66:	f7ff fb8a 	bl	800157e <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	4a0a      	ldr	r2, [pc, #40]	@ (8001e98 <HAL_UART_MspInit+0x114>)
 8001e6e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8001e72:	4a09      	ldr	r2, [pc, #36]	@ (8001e98 <HAL_UART_MspInit+0x114>)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001e78:	2200      	movs	r2, #0
 8001e7a:	2100      	movs	r1, #0
 8001e7c:	2025      	movs	r0, #37	@ 0x25
 8001e7e:	f000 fa76 	bl	800236e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001e82:	2025      	movs	r0, #37	@ 0x25
 8001e84:	f000 fa8d 	bl	80023a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001e88:	bf00      	nop
 8001e8a:	3768      	adds	r7, #104	@ 0x68
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	40013800 	.word	0x40013800
 8001e94:	40021000 	.word	0x40021000
 8001e98:	20000f30 	.word	0x20000f30
 8001e9c:	40020008 	.word	0x40020008

08001ea0 <_write>:
uint8_t TestValue[10] = {0x70, 0x5D, 0x93, 0x15, 0x86, 0x00, 0x00, 0x00, 0x00, 0x00};             //checksum Test.

uint8_t UserButton_Flag = 0;

int _write(int file, char *ptr, int len)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b084      	sub	sp, #16
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	60f8      	str	r0, [r7, #12]
 8001ea8:	60b9      	str	r1, [r7, #8]
 8001eaa:	607a      	str	r2, [r7, #4]
    // CDC_Transmit_FS(ptr, len);
    Q_Write(&USB_TX_Q, ptr, len);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	b29b      	uxth	r3, r3
 8001eb0:	461a      	mov	r2, r3
 8001eb2:	68b9      	ldr	r1, [r7, #8]
 8001eb4:	4803      	ldr	r0, [pc, #12]	@ (8001ec4 <_write+0x24>)
 8001eb6:	f7ff fb87 	bl	80015c8 <Q_Write>
    // User_CDC_Transmit_FS(ptr, len);
    return (len);
 8001eba:	687b      	ldr	r3, [r7, #4]
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	3710      	adds	r7, #16
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	20001024 	.word	0x20001024

08001ec8 <User_Toggle_Led>:

void User_Toggle_Led (void)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	af00      	add	r7, sp, #0
    if (TIM1_CNT_1 >= 1000)
 8001ecc:	4b07      	ldr	r3, [pc, #28]	@ (8001eec <User_Toggle_Led+0x24>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001ed4:	d307      	bcc.n	8001ee6 <User_Toggle_Led+0x1e>
    {
        TIM1_CNT_1 = 0;
 8001ed6:	4b05      	ldr	r3, [pc, #20]	@ (8001eec <User_Toggle_Led+0x24>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	601a      	str	r2, [r3, #0]
        // HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_14);
        LED_ALL_TOGGLE;
 8001edc:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 8001ee0:	4803      	ldr	r0, [pc, #12]	@ (8001ef0 <User_Toggle_Led+0x28>)
 8001ee2:	f000 ff45 	bl	8002d70 <HAL_GPIO_TogglePin>
    }
}
 8001ee6:	bf00      	nop
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	200002dc 	.word	0x200002dc
 8001ef0:	48000800 	.word	0x48000800

08001ef4 <ProcessDataIn_IncreaseCntValue>:

void ProcessDataIn_IncreaseCntValue (void)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	af00      	add	r7, sp, #0
    if ( TIM1_CNT_2 >= 1000)
 8001ef8:	4b0b      	ldr	r3, [pc, #44]	@ (8001f28 <ProcessDataIn_IncreaseCntValue+0x34>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001f00:	d310      	bcc.n	8001f24 <ProcessDataIn_IncreaseCntValue+0x30>
    {
        TIM1_CNT_2 = 0;
 8001f02:	4b09      	ldr	r3, [pc, #36]	@ (8001f28 <ProcessDataIn_IncreaseCntValue+0x34>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	601a      	str	r2, [r3, #0]
        ProcessDataIn_cnt++;
 8001f08:	4b08      	ldr	r3, [pc, #32]	@ (8001f2c <ProcessDataIn_IncreaseCntValue+0x38>)
 8001f0a:	781b      	ldrb	r3, [r3, #0]
 8001f0c:	3301      	adds	r3, #1
 8001f0e:	b2da      	uxtb	r2, r3
 8001f10:	4b06      	ldr	r3, [pc, #24]	@ (8001f2c <ProcessDataIn_IncreaseCntValue+0x38>)
 8001f12:	701a      	strb	r2, [r3, #0]

        printf("Master to Device Temp Value :   %d\r\n", Test_M2D_TempValue);
 8001f14:	4b06      	ldr	r3, [pc, #24]	@ (8001f30 <ProcessDataIn_IncreaseCntValue+0x3c>)
 8001f16:	781b      	ldrb	r3, [r3, #0]
 8001f18:	4619      	mov	r1, r3
 8001f1a:	4806      	ldr	r0, [pc, #24]	@ (8001f34 <ProcessDataIn_IncreaseCntValue+0x40>)
 8001f1c:	f00a f88a 	bl	800c034 <iprintf>
        IOL_Print_ParsingM2Ddata();
 8001f20:	f7fe ffa2 	bl	8000e68 <IOL_Print_ParsingM2Ddata>
    }
}
 8001f24:	bf00      	nop
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	200002e0 	.word	0x200002e0
 8001f2c:	200002e4 	.word	0x200002e4
 8001f30:	20000b2d 	.word	0x20000b2d
 8001f34:	0800ce4c 	.word	0x0800ce4c

08001f38 <BootMessagePrint>:
    User_CDC_Transmit_FS((uint8_t *) USB_CdcTxBuffer_FS, strlen(USB_CdcTxBuffer_FS));
}
#else
/* Display Boot Message */
void BootMessagePrint (void)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	af00      	add	r7, sp, #0
    printf("-------------------------------------------------------------------\r\n");
 8001f3c:	480c      	ldr	r0, [pc, #48]	@ (8001f70 <BootMessagePrint+0x38>)
 8001f3e:	f00a f8e1 	bl	800c104 <puts>
    
    printf(" Project Name        : %s\r\n", PROJECT_NAME );
 8001f42:	490c      	ldr	r1, [pc, #48]	@ (8001f74 <BootMessagePrint+0x3c>)
 8001f44:	480c      	ldr	r0, [pc, #48]	@ (8001f78 <BootMessagePrint+0x40>)
 8001f46:	f00a f875 	bl	800c034 <iprintf>
    
    printf(" - HW VERSION        : %s\r\n", STR_HW_VER );
 8001f4a:	490c      	ldr	r1, [pc, #48]	@ (8001f7c <BootMessagePrint+0x44>)
 8001f4c:	480c      	ldr	r0, [pc, #48]	@ (8001f80 <BootMessagePrint+0x48>)
 8001f4e:	f00a f871 	bl	800c034 <iprintf>
    
    printf(" - FW VERSION        : %s\r\n", STR_FW_VER );
 8001f52:	490c      	ldr	r1, [pc, #48]	@ (8001f84 <BootMessagePrint+0x4c>)
 8001f54:	480c      	ldr	r0, [pc, #48]	@ (8001f88 <BootMessagePrint+0x50>)
 8001f56:	f00a f86d 	bl	800c034 <iprintf>
    
    printf(" - BUILD TIME        : %s, %s\r\n", __DATE__, __TIME__ );
 8001f5a:	4a0c      	ldr	r2, [pc, #48]	@ (8001f8c <BootMessagePrint+0x54>)
 8001f5c:	490c      	ldr	r1, [pc, #48]	@ (8001f90 <BootMessagePrint+0x58>)
 8001f5e:	480d      	ldr	r0, [pc, #52]	@ (8001f94 <BootMessagePrint+0x5c>)
 8001f60:	f00a f868 	bl	800c034 <iprintf>
    
    printf("-------------------------------------------------------------------\r\n" );
 8001f64:	4802      	ldr	r0, [pc, #8]	@ (8001f70 <BootMessagePrint+0x38>)
 8001f66:	f00a f8cd 	bl	800c104 <puts>
}
 8001f6a:	bf00      	nop
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	0800ce74 	.word	0x0800ce74
 8001f74:	0800cebc 	.word	0x0800cebc
 8001f78:	0800cecc 	.word	0x0800cecc
 8001f7c:	0800cee8 	.word	0x0800cee8
 8001f80:	0800cef0 	.word	0x0800cef0
 8001f84:	0800cf0c 	.word	0x0800cf0c
 8001f88:	0800cf20 	.word	0x0800cf20
 8001f8c:	0800cf3c 	.word	0x0800cf3c
 8001f90:	0800cf48 	.word	0x0800cf48
 8001f94:	0800cf54 	.word	0x0800cf54

08001f98 <GetClockSourcePrint>:

/* Display Clcok Source Message */
void GetClockSourcePrint (void)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	af00      	add	r7, sp, #0
    printf("-------------------------------------------------------------------\r\n");
 8001f9c:	4819      	ldr	r0, [pc, #100]	@ (8002004 <GetClockSourcePrint+0x6c>)
 8001f9e:	f00a f8b1 	bl	800c104 <puts>
    
    printf(" - SYSTEM Clock Frequency        : %lu MHz\r\n", (HAL_RCC_GetSysClockFreq() /1000000));
 8001fa2:	f003 f925 	bl	80051f0 <HAL_RCC_GetSysClockFreq>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	4a17      	ldr	r2, [pc, #92]	@ (8002008 <GetClockSourcePrint+0x70>)
 8001faa:	fba2 2303 	umull	r2, r3, r2, r3
 8001fae:	0c9b      	lsrs	r3, r3, #18
 8001fb0:	4619      	mov	r1, r3
 8001fb2:	4816      	ldr	r0, [pc, #88]	@ (800200c <GetClockSourcePrint+0x74>)
 8001fb4:	f00a f83e 	bl	800c034 <iprintf>
    
    printf(" - HCLK Clock   Frequency        : %lu MHz\r\n", (HAL_RCC_GetHCLKFreq() / 1000000));
 8001fb8:	f003 f97c 	bl	80052b4 <HAL_RCC_GetHCLKFreq>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	4a12      	ldr	r2, [pc, #72]	@ (8002008 <GetClockSourcePrint+0x70>)
 8001fc0:	fba2 2303 	umull	r2, r3, r2, r3
 8001fc4:	0c9b      	lsrs	r3, r3, #18
 8001fc6:	4619      	mov	r1, r3
 8001fc8:	4811      	ldr	r0, [pc, #68]	@ (8002010 <GetClockSourcePrint+0x78>)
 8001fca:	f00a f833 	bl	800c034 <iprintf>
    
    printf(" - PCLK1 Clock  Frequency        : %lu MHz\r\n", (HAL_RCC_GetPCLK1Freq() / 1000000));
 8001fce:	f003 f97d 	bl	80052cc <HAL_RCC_GetPCLK1Freq>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	4a0c      	ldr	r2, [pc, #48]	@ (8002008 <GetClockSourcePrint+0x70>)
 8001fd6:	fba2 2303 	umull	r2, r3, r2, r3
 8001fda:	0c9b      	lsrs	r3, r3, #18
 8001fdc:	4619      	mov	r1, r3
 8001fde:	480d      	ldr	r0, [pc, #52]	@ (8002014 <GetClockSourcePrint+0x7c>)
 8001fe0:	f00a f828 	bl	800c034 <iprintf>
    
    printf(" - PCLK2 Clock  Frequency        : %lu MHz\r\n", (HAL_RCC_GetPCLK2Freq() / 1000000));
 8001fe4:	f003 f988 	bl	80052f8 <HAL_RCC_GetPCLK2Freq>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	4a07      	ldr	r2, [pc, #28]	@ (8002008 <GetClockSourcePrint+0x70>)
 8001fec:	fba2 2303 	umull	r2, r3, r2, r3
 8001ff0:	0c9b      	lsrs	r3, r3, #18
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	4808      	ldr	r0, [pc, #32]	@ (8002018 <GetClockSourcePrint+0x80>)
 8001ff6:	f00a f81d 	bl	800c034 <iprintf>
    
    printf("-------------------------------------------------------------------\r\n" );
 8001ffa:	4802      	ldr	r0, [pc, #8]	@ (8002004 <GetClockSourcePrint+0x6c>)
 8001ffc:	f00a f882 	bl	800c104 <puts>
}
 8002000:	bf00      	nop
 8002002:	bd80      	pop	{r7, pc}
 8002004:	0800ce74 	.word	0x0800ce74
 8002008:	431bde83 	.word	0x431bde83
 800200c:	0800cf74 	.word	0x0800cf74
 8002010:	0800cfa4 	.word	0x0800cfa4
 8002014:	0800cfd4 	.word	0x0800cfd4
 8002018:	0800d004 	.word	0x0800d004

0800201c <IOL_PD_Buffer_Clear>:
{
    return ;
}

void IOL_PD_Buffer_Clear (void)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	af00      	add	r7, sp, #0
    memset(device_ProcessDataIn_arr, 0, sizeof(device_ProcessDataIn_arr));
 8002020:	2207      	movs	r2, #7
 8002022:	2100      	movs	r1, #0
 8002024:	4804      	ldr	r0, [pc, #16]	@ (8002038 <IOL_PD_Buffer_Clear+0x1c>)
 8002026:	f00a f94d 	bl	800c2c4 <memset>
    memset(device_ProcessDataOut_arr, 0, sizeof(device_ProcessDataOut_arr));
 800202a:	2205      	movs	r2, #5
 800202c:	2100      	movs	r1, #0
 800202e:	4803      	ldr	r0, [pc, #12]	@ (800203c <IOL_PD_Buffer_Clear+0x20>)
 8002030:	f00a f948 	bl	800c2c4 <memset>
}
 8002034:	bf00      	nop
 8002036:	bd80      	pop	{r7, pc}
 8002038:	20000b20 	.word	0x20000b20
 800203c:	20000b28 	.word	0x20000b28

08002040 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002040:	480d      	ldr	r0, [pc, #52]	@ (8002078 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002042:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8002044:	f7ff fdc4 	bl	8001bd0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002048:	480c      	ldr	r0, [pc, #48]	@ (800207c <LoopForever+0x6>)
  ldr r1, =_edata
 800204a:	490d      	ldr	r1, [pc, #52]	@ (8002080 <LoopForever+0xa>)
  ldr r2, =_sidata
 800204c:	4a0d      	ldr	r2, [pc, #52]	@ (8002084 <LoopForever+0xe>)
  movs r3, #0
 800204e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002050:	e002      	b.n	8002058 <LoopCopyDataInit>

08002052 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002052:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002054:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002056:	3304      	adds	r3, #4

08002058 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002058:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800205a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800205c:	d3f9      	bcc.n	8002052 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800205e:	4a0a      	ldr	r2, [pc, #40]	@ (8002088 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002060:	4c0a      	ldr	r4, [pc, #40]	@ (800208c <LoopForever+0x16>)
  movs r3, #0
 8002062:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002064:	e001      	b.n	800206a <LoopFillZerobss>

08002066 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002066:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002068:	3204      	adds	r2, #4

0800206a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800206a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800206c:	d3fb      	bcc.n	8002066 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 800206e:	f00a f97d 	bl	800c36c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002072:	f7ff f9f9 	bl	8001468 <main>

08002076 <LoopForever>:

LoopForever:
    b LoopForever
 8002076:	e7fe      	b.n	8002076 <LoopForever>
  ldr   r0, =_estack
 8002078:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800207c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002080:	20000274 	.word	0x20000274
  ldr r2, =_sidata
 8002084:	0800d100 	.word	0x0800d100
  ldr r2, =_sbss
 8002088:	20000274 	.word	0x20000274
  ldr r4, =_ebss
 800208c:	20002960 	.word	0x20002960

08002090 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002090:	e7fe      	b.n	8002090 <ADC1_2_IRQHandler>

08002092 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002092:	b580      	push	{r7, lr}
 8002094:	b082      	sub	sp, #8
 8002096:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002098:	2300      	movs	r3, #0
 800209a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800209c:	2003      	movs	r0, #3
 800209e:	f000 f95b 	bl	8002358 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80020a2:	200f      	movs	r0, #15
 80020a4:	f000 f80e 	bl	80020c4 <HAL_InitTick>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d002      	beq.n	80020b4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	71fb      	strb	r3, [r7, #7]
 80020b2:	e001      	b.n	80020b8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80020b4:	f7ff fb90 	bl	80017d8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80020b8:	79fb      	ldrb	r3, [r7, #7]

}
 80020ba:	4618      	mov	r0, r3
 80020bc:	3708      	adds	r7, #8
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
	...

080020c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b084      	sub	sp, #16
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80020cc:	2300      	movs	r3, #0
 80020ce:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80020d0:	4b16      	ldr	r3, [pc, #88]	@ (800212c <HAL_InitTick+0x68>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d022      	beq.n	800211e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80020d8:	4b15      	ldr	r3, [pc, #84]	@ (8002130 <HAL_InitTick+0x6c>)
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	4b13      	ldr	r3, [pc, #76]	@ (800212c <HAL_InitTick+0x68>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80020e4:	fbb1 f3f3 	udiv	r3, r1, r3
 80020e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80020ec:	4618      	mov	r0, r3
 80020ee:	f000 f966 	bl	80023be <HAL_SYSTICK_Config>
 80020f2:	4603      	mov	r3, r0
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d10f      	bne.n	8002118 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2b0f      	cmp	r3, #15
 80020fc:	d809      	bhi.n	8002112 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020fe:	2200      	movs	r2, #0
 8002100:	6879      	ldr	r1, [r7, #4]
 8002102:	f04f 30ff 	mov.w	r0, #4294967295
 8002106:	f000 f932 	bl	800236e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800210a:	4a0a      	ldr	r2, [pc, #40]	@ (8002134 <HAL_InitTick+0x70>)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6013      	str	r3, [r2, #0]
 8002110:	e007      	b.n	8002122 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	73fb      	strb	r3, [r7, #15]
 8002116:	e004      	b.n	8002122 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002118:	2301      	movs	r3, #1
 800211a:	73fb      	strb	r3, [r7, #15]
 800211c:	e001      	b.n	8002122 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002122:	7bfb      	ldrb	r3, [r7, #15]
}
 8002124:	4618      	mov	r0, r3
 8002126:	3710      	adds	r7, #16
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}
 800212c:	2000009c 	.word	0x2000009c
 8002130:	20000094 	.word	0x20000094
 8002134:	20000098 	.word	0x20000098

08002138 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002138:	b480      	push	{r7}
 800213a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800213c:	4b05      	ldr	r3, [pc, #20]	@ (8002154 <HAL_IncTick+0x1c>)
 800213e:	681a      	ldr	r2, [r3, #0]
 8002140:	4b05      	ldr	r3, [pc, #20]	@ (8002158 <HAL_IncTick+0x20>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4413      	add	r3, r2
 8002146:	4a03      	ldr	r2, [pc, #12]	@ (8002154 <HAL_IncTick+0x1c>)
 8002148:	6013      	str	r3, [r2, #0]
}
 800214a:	bf00      	nop
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr
 8002154:	200019b0 	.word	0x200019b0
 8002158:	2000009c 	.word	0x2000009c

0800215c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800215c:	b480      	push	{r7}
 800215e:	af00      	add	r7, sp, #0
  return uwTick;
 8002160:	4b03      	ldr	r3, [pc, #12]	@ (8002170 <HAL_GetTick+0x14>)
 8002162:	681b      	ldr	r3, [r3, #0]
}
 8002164:	4618      	mov	r0, r3
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr
 800216e:	bf00      	nop
 8002170:	200019b0 	.word	0x200019b0

08002174 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b084      	sub	sp, #16
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800217c:	f7ff ffee 	bl	800215c <HAL_GetTick>
 8002180:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	f1b3 3fff 	cmp.w	r3, #4294967295
 800218c:	d004      	beq.n	8002198 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800218e:	4b09      	ldr	r3, [pc, #36]	@ (80021b4 <HAL_Delay+0x40>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	68fa      	ldr	r2, [r7, #12]
 8002194:	4413      	add	r3, r2
 8002196:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002198:	bf00      	nop
 800219a:	f7ff ffdf 	bl	800215c <HAL_GetTick>
 800219e:	4602      	mov	r2, r0
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	1ad3      	subs	r3, r2, r3
 80021a4:	68fa      	ldr	r2, [r7, #12]
 80021a6:	429a      	cmp	r2, r3
 80021a8:	d8f7      	bhi.n	800219a <HAL_Delay+0x26>
  {
  }
}
 80021aa:	bf00      	nop
 80021ac:	bf00      	nop
 80021ae:	3710      	adds	r7, #16
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}
 80021b4:	2000009c 	.word	0x2000009c

080021b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b085      	sub	sp, #20
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	f003 0307 	and.w	r3, r3, #7
 80021c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021c8:	4b0c      	ldr	r3, [pc, #48]	@ (80021fc <__NVIC_SetPriorityGrouping+0x44>)
 80021ca:	68db      	ldr	r3, [r3, #12]
 80021cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021ce:	68ba      	ldr	r2, [r7, #8]
 80021d0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80021d4:	4013      	ands	r3, r2
 80021d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021e0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80021e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80021e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021ea:	4a04      	ldr	r2, [pc, #16]	@ (80021fc <__NVIC_SetPriorityGrouping+0x44>)
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	60d3      	str	r3, [r2, #12]
}
 80021f0:	bf00      	nop
 80021f2:	3714      	adds	r7, #20
 80021f4:	46bd      	mov	sp, r7
 80021f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fa:	4770      	bx	lr
 80021fc:	e000ed00 	.word	0xe000ed00

08002200 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002200:	b480      	push	{r7}
 8002202:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002204:	4b04      	ldr	r3, [pc, #16]	@ (8002218 <__NVIC_GetPriorityGrouping+0x18>)
 8002206:	68db      	ldr	r3, [r3, #12]
 8002208:	0a1b      	lsrs	r3, r3, #8
 800220a:	f003 0307 	and.w	r3, r3, #7
}
 800220e:	4618      	mov	r0, r3
 8002210:	46bd      	mov	sp, r7
 8002212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002216:	4770      	bx	lr
 8002218:	e000ed00 	.word	0xe000ed00

0800221c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800221c:	b480      	push	{r7}
 800221e:	b083      	sub	sp, #12
 8002220:	af00      	add	r7, sp, #0
 8002222:	4603      	mov	r3, r0
 8002224:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002226:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800222a:	2b00      	cmp	r3, #0
 800222c:	db0b      	blt.n	8002246 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800222e:	79fb      	ldrb	r3, [r7, #7]
 8002230:	f003 021f 	and.w	r2, r3, #31
 8002234:	4907      	ldr	r1, [pc, #28]	@ (8002254 <__NVIC_EnableIRQ+0x38>)
 8002236:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800223a:	095b      	lsrs	r3, r3, #5
 800223c:	2001      	movs	r0, #1
 800223e:	fa00 f202 	lsl.w	r2, r0, r2
 8002242:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002246:	bf00      	nop
 8002248:	370c      	adds	r7, #12
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr
 8002252:	bf00      	nop
 8002254:	e000e100 	.word	0xe000e100

08002258 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002258:	b480      	push	{r7}
 800225a:	b083      	sub	sp, #12
 800225c:	af00      	add	r7, sp, #0
 800225e:	4603      	mov	r3, r0
 8002260:	6039      	str	r1, [r7, #0]
 8002262:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002264:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002268:	2b00      	cmp	r3, #0
 800226a:	db0a      	blt.n	8002282 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	b2da      	uxtb	r2, r3
 8002270:	490c      	ldr	r1, [pc, #48]	@ (80022a4 <__NVIC_SetPriority+0x4c>)
 8002272:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002276:	0112      	lsls	r2, r2, #4
 8002278:	b2d2      	uxtb	r2, r2
 800227a:	440b      	add	r3, r1
 800227c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002280:	e00a      	b.n	8002298 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	b2da      	uxtb	r2, r3
 8002286:	4908      	ldr	r1, [pc, #32]	@ (80022a8 <__NVIC_SetPriority+0x50>)
 8002288:	79fb      	ldrb	r3, [r7, #7]
 800228a:	f003 030f 	and.w	r3, r3, #15
 800228e:	3b04      	subs	r3, #4
 8002290:	0112      	lsls	r2, r2, #4
 8002292:	b2d2      	uxtb	r2, r2
 8002294:	440b      	add	r3, r1
 8002296:	761a      	strb	r2, [r3, #24]
}
 8002298:	bf00      	nop
 800229a:	370c      	adds	r7, #12
 800229c:	46bd      	mov	sp, r7
 800229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a2:	4770      	bx	lr
 80022a4:	e000e100 	.word	0xe000e100
 80022a8:	e000ed00 	.word	0xe000ed00

080022ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b089      	sub	sp, #36	@ 0x24
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	60f8      	str	r0, [r7, #12]
 80022b4:	60b9      	str	r1, [r7, #8]
 80022b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	f003 0307 	and.w	r3, r3, #7
 80022be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022c0:	69fb      	ldr	r3, [r7, #28]
 80022c2:	f1c3 0307 	rsb	r3, r3, #7
 80022c6:	2b04      	cmp	r3, #4
 80022c8:	bf28      	it	cs
 80022ca:	2304      	movcs	r3, #4
 80022cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022ce:	69fb      	ldr	r3, [r7, #28]
 80022d0:	3304      	adds	r3, #4
 80022d2:	2b06      	cmp	r3, #6
 80022d4:	d902      	bls.n	80022dc <NVIC_EncodePriority+0x30>
 80022d6:	69fb      	ldr	r3, [r7, #28]
 80022d8:	3b03      	subs	r3, #3
 80022da:	e000      	b.n	80022de <NVIC_EncodePriority+0x32>
 80022dc:	2300      	movs	r3, #0
 80022de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022e0:	f04f 32ff 	mov.w	r2, #4294967295
 80022e4:	69bb      	ldr	r3, [r7, #24]
 80022e6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ea:	43da      	mvns	r2, r3
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	401a      	ands	r2, r3
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022f4:	f04f 31ff 	mov.w	r1, #4294967295
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	fa01 f303 	lsl.w	r3, r1, r3
 80022fe:	43d9      	mvns	r1, r3
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002304:	4313      	orrs	r3, r2
         );
}
 8002306:	4618      	mov	r0, r3
 8002308:	3724      	adds	r7, #36	@ 0x24
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr
	...

08002314 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b082      	sub	sp, #8
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	3b01      	subs	r3, #1
 8002320:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002324:	d301      	bcc.n	800232a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002326:	2301      	movs	r3, #1
 8002328:	e00f      	b.n	800234a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800232a:	4a0a      	ldr	r2, [pc, #40]	@ (8002354 <SysTick_Config+0x40>)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	3b01      	subs	r3, #1
 8002330:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002332:	210f      	movs	r1, #15
 8002334:	f04f 30ff 	mov.w	r0, #4294967295
 8002338:	f7ff ff8e 	bl	8002258 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800233c:	4b05      	ldr	r3, [pc, #20]	@ (8002354 <SysTick_Config+0x40>)
 800233e:	2200      	movs	r2, #0
 8002340:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002342:	4b04      	ldr	r3, [pc, #16]	@ (8002354 <SysTick_Config+0x40>)
 8002344:	2207      	movs	r2, #7
 8002346:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002348:	2300      	movs	r3, #0
}
 800234a:	4618      	mov	r0, r3
 800234c:	3708      	adds	r7, #8
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop
 8002354:	e000e010 	.word	0xe000e010

08002358 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b082      	sub	sp, #8
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002360:	6878      	ldr	r0, [r7, #4]
 8002362:	f7ff ff29 	bl	80021b8 <__NVIC_SetPriorityGrouping>
}
 8002366:	bf00      	nop
 8002368:	3708      	adds	r7, #8
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}

0800236e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800236e:	b580      	push	{r7, lr}
 8002370:	b086      	sub	sp, #24
 8002372:	af00      	add	r7, sp, #0
 8002374:	4603      	mov	r3, r0
 8002376:	60b9      	str	r1, [r7, #8]
 8002378:	607a      	str	r2, [r7, #4]
 800237a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800237c:	f7ff ff40 	bl	8002200 <__NVIC_GetPriorityGrouping>
 8002380:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002382:	687a      	ldr	r2, [r7, #4]
 8002384:	68b9      	ldr	r1, [r7, #8]
 8002386:	6978      	ldr	r0, [r7, #20]
 8002388:	f7ff ff90 	bl	80022ac <NVIC_EncodePriority>
 800238c:	4602      	mov	r2, r0
 800238e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002392:	4611      	mov	r1, r2
 8002394:	4618      	mov	r0, r3
 8002396:	f7ff ff5f 	bl	8002258 <__NVIC_SetPriority>
}
 800239a:	bf00      	nop
 800239c:	3718      	adds	r7, #24
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}

080023a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023a2:	b580      	push	{r7, lr}
 80023a4:	b082      	sub	sp, #8
 80023a6:	af00      	add	r7, sp, #0
 80023a8:	4603      	mov	r3, r0
 80023aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023b0:	4618      	mov	r0, r3
 80023b2:	f7ff ff33 	bl	800221c <__NVIC_EnableIRQ>
}
 80023b6:	bf00      	nop
 80023b8:	3708      	adds	r7, #8
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}

080023be <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023be:	b580      	push	{r7, lr}
 80023c0:	b082      	sub	sp, #8
 80023c2:	af00      	add	r7, sp, #0
 80023c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023c6:	6878      	ldr	r0, [r7, #4]
 80023c8:	f7ff ffa4 	bl	8002314 <SysTick_Config>
 80023cc:	4603      	mov	r3, r0
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	3708      	adds	r7, #8
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
	...

080023d8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b084      	sub	sp, #16
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d101      	bne.n	80023ea <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e08d      	b.n	8002506 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	461a      	mov	r2, r3
 80023f0:	4b47      	ldr	r3, [pc, #284]	@ (8002510 <HAL_DMA_Init+0x138>)
 80023f2:	429a      	cmp	r2, r3
 80023f4:	d80f      	bhi.n	8002416 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	461a      	mov	r2, r3
 80023fc:	4b45      	ldr	r3, [pc, #276]	@ (8002514 <HAL_DMA_Init+0x13c>)
 80023fe:	4413      	add	r3, r2
 8002400:	4a45      	ldr	r2, [pc, #276]	@ (8002518 <HAL_DMA_Init+0x140>)
 8002402:	fba2 2303 	umull	r2, r3, r2, r3
 8002406:	091b      	lsrs	r3, r3, #4
 8002408:	009a      	lsls	r2, r3, #2
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	4a42      	ldr	r2, [pc, #264]	@ (800251c <HAL_DMA_Init+0x144>)
 8002412:	641a      	str	r2, [r3, #64]	@ 0x40
 8002414:	e00e      	b.n	8002434 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	461a      	mov	r2, r3
 800241c:	4b40      	ldr	r3, [pc, #256]	@ (8002520 <HAL_DMA_Init+0x148>)
 800241e:	4413      	add	r3, r2
 8002420:	4a3d      	ldr	r2, [pc, #244]	@ (8002518 <HAL_DMA_Init+0x140>)
 8002422:	fba2 2303 	umull	r2, r3, r2, r3
 8002426:	091b      	lsrs	r3, r3, #4
 8002428:	009a      	lsls	r2, r3, #2
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	4a3c      	ldr	r2, [pc, #240]	@ (8002524 <HAL_DMA_Init+0x14c>)
 8002432:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2202      	movs	r2, #2
 8002438:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800244a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800244e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002458:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	691b      	ldr	r3, [r3, #16]
 800245e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002464:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	699b      	ldr	r3, [r3, #24]
 800246a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002470:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6a1b      	ldr	r3, [r3, #32]
 8002476:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002478:	68fa      	ldr	r2, [r7, #12]
 800247a:	4313      	orrs	r3, r2
 800247c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	68fa      	ldr	r2, [r7, #12]
 8002484:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002486:	6878      	ldr	r0, [r7, #4]
 8002488:	f000 fa76 	bl	8002978 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002494:	d102      	bne.n	800249c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2200      	movs	r2, #0
 800249a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	685a      	ldr	r2, [r3, #4]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80024a4:	b2d2      	uxtb	r2, r2
 80024a6:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024ac:	687a      	ldr	r2, [r7, #4]
 80024ae:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80024b0:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d010      	beq.n	80024dc <HAL_DMA_Init+0x104>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	2b04      	cmp	r3, #4
 80024c0:	d80c      	bhi.n	80024dc <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80024c2:	6878      	ldr	r0, [r7, #4]
 80024c4:	f000 fa96 	bl	80029f4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024cc:	2200      	movs	r2, #0
 80024ce:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024d4:	687a      	ldr	r2, [r7, #4]
 80024d6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80024d8:	605a      	str	r2, [r3, #4]
 80024da:	e008      	b.n	80024ee <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2200      	movs	r2, #0
 80024e0:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2200      	movs	r2, #0
 80024e6:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2200      	movs	r2, #0
 80024ec:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2200      	movs	r2, #0
 80024f2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2201      	movs	r2, #1
 80024f8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2200      	movs	r2, #0
 8002500:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002504:	2300      	movs	r3, #0
}
 8002506:	4618      	mov	r0, r3
 8002508:	3710      	adds	r7, #16
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}
 800250e:	bf00      	nop
 8002510:	40020407 	.word	0x40020407
 8002514:	bffdfff8 	.word	0xbffdfff8
 8002518:	cccccccd 	.word	0xcccccccd
 800251c:	40020000 	.word	0x40020000
 8002520:	bffdfbf8 	.word	0xbffdfbf8
 8002524:	40020400 	.word	0x40020400

08002528 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b086      	sub	sp, #24
 800252c:	af00      	add	r7, sp, #0
 800252e:	60f8      	str	r0, [r7, #12]
 8002530:	60b9      	str	r1, [r7, #8]
 8002532:	607a      	str	r2, [r7, #4]
 8002534:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002536:	2300      	movs	r3, #0
 8002538:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002540:	2b01      	cmp	r3, #1
 8002542:	d101      	bne.n	8002548 <HAL_DMA_Start_IT+0x20>
 8002544:	2302      	movs	r3, #2
 8002546:	e066      	b.n	8002616 <HAL_DMA_Start_IT+0xee>
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	2201      	movs	r2, #1
 800254c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002556:	b2db      	uxtb	r3, r3
 8002558:	2b01      	cmp	r3, #1
 800255a:	d155      	bne.n	8002608 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	2202      	movs	r2, #2
 8002560:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	2200      	movs	r2, #0
 8002568:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f022 0201 	bic.w	r2, r2, #1
 8002578:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	687a      	ldr	r2, [r7, #4]
 800257e:	68b9      	ldr	r1, [r7, #8]
 8002580:	68f8      	ldr	r0, [r7, #12]
 8002582:	f000 f9bb 	bl	80028fc <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800258a:	2b00      	cmp	r3, #0
 800258c:	d008      	beq.n	80025a0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	681a      	ldr	r2, [r3, #0]
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f042 020e 	orr.w	r2, r2, #14
 800259c:	601a      	str	r2, [r3, #0]
 800259e:	e00f      	b.n	80025c0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	681a      	ldr	r2, [r3, #0]
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f022 0204 	bic.w	r2, r2, #4
 80025ae:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	681a      	ldr	r2, [r3, #0]
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f042 020a 	orr.w	r2, r2, #10
 80025be:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d007      	beq.n	80025de <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025d2:	681a      	ldr	r2, [r3, #0]
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025d8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80025dc:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d007      	beq.n	80025f6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025ea:	681a      	ldr	r2, [r3, #0]
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025f0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80025f4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	681a      	ldr	r2, [r3, #0]
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f042 0201 	orr.w	r2, r2, #1
 8002604:	601a      	str	r2, [r3, #0]
 8002606:	e005      	b.n	8002614 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	2200      	movs	r2, #0
 800260c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002610:	2302      	movs	r3, #2
 8002612:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002614:	7dfb      	ldrb	r3, [r7, #23]
}
 8002616:	4618      	mov	r0, r3
 8002618:	3718      	adds	r7, #24
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}

0800261e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800261e:	b480      	push	{r7}
 8002620:	b085      	sub	sp, #20
 8002622:	af00      	add	r7, sp, #0
 8002624:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002626:	2300      	movs	r3, #0
 8002628:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002630:	b2db      	uxtb	r3, r3
 8002632:	2b02      	cmp	r3, #2
 8002634:	d005      	beq.n	8002642 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2204      	movs	r2, #4
 800263a:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	73fb      	strb	r3, [r7, #15]
 8002640:	e037      	b.n	80026b2 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	681a      	ldr	r2, [r3, #0]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f022 020e 	bic.w	r2, r2, #14
 8002650:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800265c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002660:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f022 0201 	bic.w	r2, r2, #1
 8002670:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002676:	f003 021f 	and.w	r2, r3, #31
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800267e:	2101      	movs	r1, #1
 8002680:	fa01 f202 	lsl.w	r2, r1, r2
 8002684:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800268a:	687a      	ldr	r2, [r7, #4]
 800268c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800268e:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002694:	2b00      	cmp	r3, #0
 8002696:	d00c      	beq.n	80026b2 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800269c:	681a      	ldr	r2, [r3, #0]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026a2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80026a6:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026ac:	687a      	ldr	r2, [r7, #4]
 80026ae:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80026b0:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2201      	movs	r2, #1
 80026b6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2200      	movs	r2, #0
 80026be:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 80026c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	3714      	adds	r7, #20
 80026c8:	46bd      	mov	sp, r7
 80026ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ce:	4770      	bx	lr

080026d0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b084      	sub	sp, #16
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80026d8:	2300      	movs	r3, #0
 80026da:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80026e2:	b2db      	uxtb	r3, r3
 80026e4:	2b02      	cmp	r3, #2
 80026e6:	d00d      	beq.n	8002704 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2204      	movs	r2, #4
 80026ec:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2201      	movs	r2, #1
 80026f2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2200      	movs	r2, #0
 80026fa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	73fb      	strb	r3, [r7, #15]
 8002702:	e047      	b.n	8002794 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f022 020e 	bic.w	r2, r2, #14
 8002712:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f022 0201 	bic.w	r2, r2, #1
 8002722:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002728:	681a      	ldr	r2, [r3, #0]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800272e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002732:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002738:	f003 021f 	and.w	r2, r3, #31
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002740:	2101      	movs	r1, #1
 8002742:	fa01 f202 	lsl.w	r2, r1, r2
 8002746:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800274c:	687a      	ldr	r2, [r7, #4]
 800274e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002750:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002756:	2b00      	cmp	r3, #0
 8002758:	d00c      	beq.n	8002774 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800275e:	681a      	ldr	r2, [r3, #0]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002764:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002768:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800276e:	687a      	ldr	r2, [r7, #4]
 8002770:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002772:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2201      	movs	r2, #1
 8002778:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2200      	movs	r2, #0
 8002780:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002788:	2b00      	cmp	r3, #0
 800278a:	d003      	beq.n	8002794 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002790:	6878      	ldr	r0, [r7, #4]
 8002792:	4798      	blx	r3
    }
  }
  return status;
 8002794:	7bfb      	ldrb	r3, [r7, #15]
}
 8002796:	4618      	mov	r0, r3
 8002798:	3710      	adds	r7, #16
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}

0800279e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800279e:	b580      	push	{r7, lr}
 80027a0:	b084      	sub	sp, #16
 80027a2:	af00      	add	r7, sp, #0
 80027a4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027ba:	f003 031f 	and.w	r3, r3, #31
 80027be:	2204      	movs	r2, #4
 80027c0:	409a      	lsls	r2, r3
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	4013      	ands	r3, r2
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d026      	beq.n	8002818 <HAL_DMA_IRQHandler+0x7a>
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	f003 0304 	and.w	r3, r3, #4
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d021      	beq.n	8002818 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f003 0320 	and.w	r3, r3, #32
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d107      	bne.n	80027f2 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f022 0204 	bic.w	r2, r2, #4
 80027f0:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027f6:	f003 021f 	and.w	r2, r3, #31
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027fe:	2104      	movs	r1, #4
 8002800:	fa01 f202 	lsl.w	r2, r1, r2
 8002804:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800280a:	2b00      	cmp	r3, #0
 800280c:	d071      	beq.n	80028f2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002812:	6878      	ldr	r0, [r7, #4]
 8002814:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002816:	e06c      	b.n	80028f2 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800281c:	f003 031f 	and.w	r3, r3, #31
 8002820:	2202      	movs	r2, #2
 8002822:	409a      	lsls	r2, r3
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	4013      	ands	r3, r2
 8002828:	2b00      	cmp	r3, #0
 800282a:	d02e      	beq.n	800288a <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	f003 0302 	and.w	r3, r3, #2
 8002832:	2b00      	cmp	r3, #0
 8002834:	d029      	beq.n	800288a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f003 0320 	and.w	r3, r3, #32
 8002840:	2b00      	cmp	r3, #0
 8002842:	d10b      	bne.n	800285c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	681a      	ldr	r2, [r3, #0]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f022 020a 	bic.w	r2, r2, #10
 8002852:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2201      	movs	r2, #1
 8002858:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002860:	f003 021f 	and.w	r2, r3, #31
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002868:	2102      	movs	r1, #2
 800286a:	fa01 f202 	lsl.w	r2, r1, r2
 800286e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2200      	movs	r2, #0
 8002874:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800287c:	2b00      	cmp	r3, #0
 800287e:	d038      	beq.n	80028f2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002884:	6878      	ldr	r0, [r7, #4]
 8002886:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002888:	e033      	b.n	80028f2 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800288e:	f003 031f 	and.w	r3, r3, #31
 8002892:	2208      	movs	r2, #8
 8002894:	409a      	lsls	r2, r3
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	4013      	ands	r3, r2
 800289a:	2b00      	cmp	r3, #0
 800289c:	d02a      	beq.n	80028f4 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800289e:	68bb      	ldr	r3, [r7, #8]
 80028a0:	f003 0308 	and.w	r3, r3, #8
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d025      	beq.n	80028f4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	681a      	ldr	r2, [r3, #0]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f022 020e 	bic.w	r2, r2, #14
 80028b6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028bc:	f003 021f 	and.w	r2, r3, #31
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028c4:	2101      	movs	r1, #1
 80028c6:	fa01 f202 	lsl.w	r2, r1, r2
 80028ca:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2201      	movs	r2, #1
 80028d0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2201      	movs	r2, #1
 80028d6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2200      	movs	r2, #0
 80028de:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d004      	beq.n	80028f4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028ee:	6878      	ldr	r0, [r7, #4]
 80028f0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80028f2:	bf00      	nop
 80028f4:	bf00      	nop
}
 80028f6:	3710      	adds	r7, #16
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd80      	pop	{r7, pc}

080028fc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b085      	sub	sp, #20
 8002900:	af00      	add	r7, sp, #0
 8002902:	60f8      	str	r0, [r7, #12]
 8002904:	60b9      	str	r1, [r7, #8]
 8002906:	607a      	str	r2, [r7, #4]
 8002908:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800290e:	68fa      	ldr	r2, [r7, #12]
 8002910:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002912:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002918:	2b00      	cmp	r3, #0
 800291a:	d004      	beq.n	8002926 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002920:	68fa      	ldr	r2, [r7, #12]
 8002922:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002924:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800292a:	f003 021f 	and.w	r2, r3, #31
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002932:	2101      	movs	r1, #1
 8002934:	fa01 f202 	lsl.w	r2, r1, r2
 8002938:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	683a      	ldr	r2, [r7, #0]
 8002940:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	2b10      	cmp	r3, #16
 8002948:	d108      	bne.n	800295c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	687a      	ldr	r2, [r7, #4]
 8002950:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	68ba      	ldr	r2, [r7, #8]
 8002958:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800295a:	e007      	b.n	800296c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	68ba      	ldr	r2, [r7, #8]
 8002962:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	687a      	ldr	r2, [r7, #4]
 800296a:	60da      	str	r2, [r3, #12]
}
 800296c:	bf00      	nop
 800296e:	3714      	adds	r7, #20
 8002970:	46bd      	mov	sp, r7
 8002972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002976:	4770      	bx	lr

08002978 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002978:	b480      	push	{r7}
 800297a:	b087      	sub	sp, #28
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	461a      	mov	r2, r3
 8002986:	4b16      	ldr	r3, [pc, #88]	@ (80029e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8002988:	429a      	cmp	r2, r3
 800298a:	d802      	bhi.n	8002992 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800298c:	4b15      	ldr	r3, [pc, #84]	@ (80029e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800298e:	617b      	str	r3, [r7, #20]
 8002990:	e001      	b.n	8002996 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G411xB) || defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8002992:	4b15      	ldr	r3, [pc, #84]	@ (80029e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8002994:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	b2db      	uxtb	r3, r3
 80029a0:	3b08      	subs	r3, #8
 80029a2:	4a12      	ldr	r2, [pc, #72]	@ (80029ec <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80029a4:	fba2 2303 	umull	r2, r3, r2, r3
 80029a8:	091b      	lsrs	r3, r3, #4
 80029aa:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029b0:	089b      	lsrs	r3, r3, #2
 80029b2:	009a      	lsls	r2, r3, #2
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	4413      	add	r3, r2
 80029b8:	461a      	mov	r2, r3
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	4a0b      	ldr	r2, [pc, #44]	@ (80029f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80029c2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	f003 031f 	and.w	r3, r3, #31
 80029ca:	2201      	movs	r2, #1
 80029cc:	409a      	lsls	r2, r3
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80029d2:	bf00      	nop
 80029d4:	371c      	adds	r7, #28
 80029d6:	46bd      	mov	sp, r7
 80029d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029dc:	4770      	bx	lr
 80029de:	bf00      	nop
 80029e0:	40020407 	.word	0x40020407
 80029e4:	40020800 	.word	0x40020800
 80029e8:	40020820 	.word	0x40020820
 80029ec:	cccccccd 	.word	0xcccccccd
 80029f0:	40020880 	.word	0x40020880

080029f4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b085      	sub	sp, #20
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002a04:	68fa      	ldr	r2, [r7, #12]
 8002a06:	4b0b      	ldr	r3, [pc, #44]	@ (8002a34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002a08:	4413      	add	r3, r2
 8002a0a:	009b      	lsls	r3, r3, #2
 8002a0c:	461a      	mov	r2, r3
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	4a08      	ldr	r2, [pc, #32]	@ (8002a38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002a16:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	3b01      	subs	r3, #1
 8002a1c:	f003 031f 	and.w	r3, r3, #31
 8002a20:	2201      	movs	r2, #1
 8002a22:	409a      	lsls	r2, r3
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8002a28:	bf00      	nop
 8002a2a:	3714      	adds	r7, #20
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a32:	4770      	bx	lr
 8002a34:	1000823f 	.word	0x1000823f
 8002a38:	40020940 	.word	0x40020940

08002a3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b087      	sub	sp, #28
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
 8002a44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002a46:	2300      	movs	r3, #0
 8002a48:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002a4a:	e15a      	b.n	8002d02 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	681a      	ldr	r2, [r3, #0]
 8002a50:	2101      	movs	r1, #1
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	fa01 f303 	lsl.w	r3, r1, r3
 8002a58:	4013      	ands	r3, r2
 8002a5a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	f000 814c 	beq.w	8002cfc <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	f003 0303 	and.w	r3, r3, #3
 8002a6c:	2b01      	cmp	r3, #1
 8002a6e:	d005      	beq.n	8002a7c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002a78:	2b02      	cmp	r3, #2
 8002a7a:	d130      	bne.n	8002ade <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	005b      	lsls	r3, r3, #1
 8002a86:	2203      	movs	r2, #3
 8002a88:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8c:	43db      	mvns	r3, r3
 8002a8e:	693a      	ldr	r2, [r7, #16]
 8002a90:	4013      	ands	r3, r2
 8002a92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	68da      	ldr	r2, [r3, #12]
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	005b      	lsls	r3, r3, #1
 8002a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa0:	693a      	ldr	r2, [r7, #16]
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	693a      	ldr	r2, [r7, #16]
 8002aaa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aba:	43db      	mvns	r3, r3
 8002abc:	693a      	ldr	r2, [r7, #16]
 8002abe:	4013      	ands	r3, r2
 8002ac0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	091b      	lsrs	r3, r3, #4
 8002ac8:	f003 0201 	and.w	r2, r3, #1
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad2:	693a      	ldr	r2, [r7, #16]
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	693a      	ldr	r2, [r7, #16]
 8002adc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	f003 0303 	and.w	r3, r3, #3
 8002ae6:	2b03      	cmp	r3, #3
 8002ae8:	d017      	beq.n	8002b1a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	68db      	ldr	r3, [r3, #12]
 8002aee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	005b      	lsls	r3, r3, #1
 8002af4:	2203      	movs	r2, #3
 8002af6:	fa02 f303 	lsl.w	r3, r2, r3
 8002afa:	43db      	mvns	r3, r3
 8002afc:	693a      	ldr	r2, [r7, #16]
 8002afe:	4013      	ands	r3, r2
 8002b00:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	689a      	ldr	r2, [r3, #8]
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	005b      	lsls	r3, r3, #1
 8002b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0e:	693a      	ldr	r2, [r7, #16]
 8002b10:	4313      	orrs	r3, r2
 8002b12:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	693a      	ldr	r2, [r7, #16]
 8002b18:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	f003 0303 	and.w	r3, r3, #3
 8002b22:	2b02      	cmp	r3, #2
 8002b24:	d123      	bne.n	8002b6e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	08da      	lsrs	r2, r3, #3
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	3208      	adds	r2, #8
 8002b2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b32:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	f003 0307 	and.w	r3, r3, #7
 8002b3a:	009b      	lsls	r3, r3, #2
 8002b3c:	220f      	movs	r2, #15
 8002b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b42:	43db      	mvns	r3, r3
 8002b44:	693a      	ldr	r2, [r7, #16]
 8002b46:	4013      	ands	r3, r2
 8002b48:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	691a      	ldr	r2, [r3, #16]
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	f003 0307 	and.w	r3, r3, #7
 8002b54:	009b      	lsls	r3, r3, #2
 8002b56:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5a:	693a      	ldr	r2, [r7, #16]
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	08da      	lsrs	r2, r3, #3
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	3208      	adds	r2, #8
 8002b68:	6939      	ldr	r1, [r7, #16]
 8002b6a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	005b      	lsls	r3, r3, #1
 8002b78:	2203      	movs	r2, #3
 8002b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b7e:	43db      	mvns	r3, r3
 8002b80:	693a      	ldr	r2, [r7, #16]
 8002b82:	4013      	ands	r3, r2
 8002b84:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	f003 0203 	and.w	r2, r3, #3
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	005b      	lsls	r3, r3, #1
 8002b92:	fa02 f303 	lsl.w	r3, r2, r3
 8002b96:	693a      	ldr	r2, [r7, #16]
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	693a      	ldr	r2, [r7, #16]
 8002ba0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	f000 80a6 	beq.w	8002cfc <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bb0:	4b5b      	ldr	r3, [pc, #364]	@ (8002d20 <HAL_GPIO_Init+0x2e4>)
 8002bb2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bb4:	4a5a      	ldr	r2, [pc, #360]	@ (8002d20 <HAL_GPIO_Init+0x2e4>)
 8002bb6:	f043 0301 	orr.w	r3, r3, #1
 8002bba:	6613      	str	r3, [r2, #96]	@ 0x60
 8002bbc:	4b58      	ldr	r3, [pc, #352]	@ (8002d20 <HAL_GPIO_Init+0x2e4>)
 8002bbe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bc0:	f003 0301 	and.w	r3, r3, #1
 8002bc4:	60bb      	str	r3, [r7, #8]
 8002bc6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002bc8:	4a56      	ldr	r2, [pc, #344]	@ (8002d24 <HAL_GPIO_Init+0x2e8>)
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	089b      	lsrs	r3, r3, #2
 8002bce:	3302      	adds	r3, #2
 8002bd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bd4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	f003 0303 	and.w	r3, r3, #3
 8002bdc:	009b      	lsls	r3, r3, #2
 8002bde:	220f      	movs	r2, #15
 8002be0:	fa02 f303 	lsl.w	r3, r2, r3
 8002be4:	43db      	mvns	r3, r3
 8002be6:	693a      	ldr	r2, [r7, #16]
 8002be8:	4013      	ands	r3, r2
 8002bea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002bf2:	d01f      	beq.n	8002c34 <HAL_GPIO_Init+0x1f8>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	4a4c      	ldr	r2, [pc, #304]	@ (8002d28 <HAL_GPIO_Init+0x2ec>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d019      	beq.n	8002c30 <HAL_GPIO_Init+0x1f4>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	4a4b      	ldr	r2, [pc, #300]	@ (8002d2c <HAL_GPIO_Init+0x2f0>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d013      	beq.n	8002c2c <HAL_GPIO_Init+0x1f0>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	4a4a      	ldr	r2, [pc, #296]	@ (8002d30 <HAL_GPIO_Init+0x2f4>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d00d      	beq.n	8002c28 <HAL_GPIO_Init+0x1ec>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	4a49      	ldr	r2, [pc, #292]	@ (8002d34 <HAL_GPIO_Init+0x2f8>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d007      	beq.n	8002c24 <HAL_GPIO_Init+0x1e8>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	4a48      	ldr	r2, [pc, #288]	@ (8002d38 <HAL_GPIO_Init+0x2fc>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d101      	bne.n	8002c20 <HAL_GPIO_Init+0x1e4>
 8002c1c:	2305      	movs	r3, #5
 8002c1e:	e00a      	b.n	8002c36 <HAL_GPIO_Init+0x1fa>
 8002c20:	2306      	movs	r3, #6
 8002c22:	e008      	b.n	8002c36 <HAL_GPIO_Init+0x1fa>
 8002c24:	2304      	movs	r3, #4
 8002c26:	e006      	b.n	8002c36 <HAL_GPIO_Init+0x1fa>
 8002c28:	2303      	movs	r3, #3
 8002c2a:	e004      	b.n	8002c36 <HAL_GPIO_Init+0x1fa>
 8002c2c:	2302      	movs	r3, #2
 8002c2e:	e002      	b.n	8002c36 <HAL_GPIO_Init+0x1fa>
 8002c30:	2301      	movs	r3, #1
 8002c32:	e000      	b.n	8002c36 <HAL_GPIO_Init+0x1fa>
 8002c34:	2300      	movs	r3, #0
 8002c36:	697a      	ldr	r2, [r7, #20]
 8002c38:	f002 0203 	and.w	r2, r2, #3
 8002c3c:	0092      	lsls	r2, r2, #2
 8002c3e:	4093      	lsls	r3, r2
 8002c40:	693a      	ldr	r2, [r7, #16]
 8002c42:	4313      	orrs	r3, r2
 8002c44:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c46:	4937      	ldr	r1, [pc, #220]	@ (8002d24 <HAL_GPIO_Init+0x2e8>)
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	089b      	lsrs	r3, r3, #2
 8002c4c:	3302      	adds	r3, #2
 8002c4e:	693a      	ldr	r2, [r7, #16]
 8002c50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002c54:	4b39      	ldr	r3, [pc, #228]	@ (8002d3c <HAL_GPIO_Init+0x300>)
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	43db      	mvns	r3, r3
 8002c5e:	693a      	ldr	r2, [r7, #16]
 8002c60:	4013      	ands	r3, r2
 8002c62:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d003      	beq.n	8002c78 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002c70:	693a      	ldr	r2, [r7, #16]
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	4313      	orrs	r3, r2
 8002c76:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002c78:	4a30      	ldr	r2, [pc, #192]	@ (8002d3c <HAL_GPIO_Init+0x300>)
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002c7e:	4b2f      	ldr	r3, [pc, #188]	@ (8002d3c <HAL_GPIO_Init+0x300>)
 8002c80:	68db      	ldr	r3, [r3, #12]
 8002c82:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	43db      	mvns	r3, r3
 8002c88:	693a      	ldr	r2, [r7, #16]
 8002c8a:	4013      	ands	r3, r2
 8002c8c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d003      	beq.n	8002ca2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002c9a:	693a      	ldr	r2, [r7, #16]
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002ca2:	4a26      	ldr	r2, [pc, #152]	@ (8002d3c <HAL_GPIO_Init+0x300>)
 8002ca4:	693b      	ldr	r3, [r7, #16]
 8002ca6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002ca8:	4b24      	ldr	r3, [pc, #144]	@ (8002d3c <HAL_GPIO_Init+0x300>)
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	43db      	mvns	r3, r3
 8002cb2:	693a      	ldr	r2, [r7, #16]
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d003      	beq.n	8002ccc <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002cc4:	693a      	ldr	r2, [r7, #16]
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002ccc:	4a1b      	ldr	r2, [pc, #108]	@ (8002d3c <HAL_GPIO_Init+0x300>)
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002cd2:	4b1a      	ldr	r3, [pc, #104]	@ (8002d3c <HAL_GPIO_Init+0x300>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	43db      	mvns	r3, r3
 8002cdc:	693a      	ldr	r2, [r7, #16]
 8002cde:	4013      	ands	r3, r2
 8002ce0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d003      	beq.n	8002cf6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002cee:	693a      	ldr	r2, [r7, #16]
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002cf6:	4a11      	ldr	r2, [pc, #68]	@ (8002d3c <HAL_GPIO_Init+0x300>)
 8002cf8:	693b      	ldr	r3, [r7, #16]
 8002cfa:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	3301      	adds	r3, #1
 8002d00:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	681a      	ldr	r2, [r3, #0]
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	fa22 f303 	lsr.w	r3, r2, r3
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	f47f ae9d 	bne.w	8002a4c <HAL_GPIO_Init+0x10>
  }
}
 8002d12:	bf00      	nop
 8002d14:	bf00      	nop
 8002d16:	371c      	adds	r7, #28
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1e:	4770      	bx	lr
 8002d20:	40021000 	.word	0x40021000
 8002d24:	40010000 	.word	0x40010000
 8002d28:	48000400 	.word	0x48000400
 8002d2c:	48000800 	.word	0x48000800
 8002d30:	48000c00 	.word	0x48000c00
 8002d34:	48001000 	.word	0x48001000
 8002d38:	48001400 	.word	0x48001400
 8002d3c:	40010400 	.word	0x40010400

08002d40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d40:	b480      	push	{r7}
 8002d42:	b083      	sub	sp, #12
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
 8002d48:	460b      	mov	r3, r1
 8002d4a:	807b      	strh	r3, [r7, #2]
 8002d4c:	4613      	mov	r3, r2
 8002d4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002d50:	787b      	ldrb	r3, [r7, #1]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d003      	beq.n	8002d5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002d56:	887a      	ldrh	r2, [r7, #2]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002d5c:	e002      	b.n	8002d64 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002d5e:	887a      	ldrh	r2, [r7, #2]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002d64:	bf00      	nop
 8002d66:	370c      	adds	r7, #12
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6e:	4770      	bx	lr

08002d70 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002d70:	b480      	push	{r7}
 8002d72:	b085      	sub	sp, #20
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
 8002d78:	460b      	mov	r3, r1
 8002d7a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	695b      	ldr	r3, [r3, #20]
 8002d80:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002d82:	887a      	ldrh	r2, [r7, #2]
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	4013      	ands	r3, r2
 8002d88:	041a      	lsls	r2, r3, #16
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	43d9      	mvns	r1, r3
 8002d8e:	887b      	ldrh	r3, [r7, #2]
 8002d90:	400b      	ands	r3, r1
 8002d92:	431a      	orrs	r2, r3
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	619a      	str	r2, [r3, #24]
}
 8002d98:	bf00      	nop
 8002d9a:	3714      	adds	r7, #20
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da2:	4770      	bx	lr

08002da4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b082      	sub	sp, #8
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	4603      	mov	r3, r0
 8002dac:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002dae:	4b08      	ldr	r3, [pc, #32]	@ (8002dd0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002db0:	695a      	ldr	r2, [r3, #20]
 8002db2:	88fb      	ldrh	r3, [r7, #6]
 8002db4:	4013      	ands	r3, r2
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d006      	beq.n	8002dc8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002dba:	4a05      	ldr	r2, [pc, #20]	@ (8002dd0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002dbc:	88fb      	ldrh	r3, [r7, #6]
 8002dbe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002dc0:	88fb      	ldrh	r3, [r7, #6]
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f000 f806 	bl	8002dd4 <HAL_GPIO_EXTI_Callback>
  }
}
 8002dc8:	bf00      	nop
 8002dca:	3708      	adds	r7, #8
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}
 8002dd0:	40010400 	.word	0x40010400

08002dd4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b083      	sub	sp, #12
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	4603      	mov	r3, r0
 8002ddc:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002dde:	bf00      	nop
 8002de0:	370c      	adds	r7, #12
 8002de2:	46bd      	mov	sp, r7
 8002de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de8:	4770      	bx	lr

08002dea <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002dea:	b580      	push	{r7, lr}
 8002dec:	b084      	sub	sp, #16
 8002dee:	af00      	add	r7, sp, #0
 8002df0:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d101      	bne.n	8002dfc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	e0c0      	b.n	8002f7e <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8002e02:	b2db      	uxtb	r3, r3
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d106      	bne.n	8002e16 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002e10:	6878      	ldr	r0, [r7, #4]
 8002e12:	f008 fd49 	bl	800b8a8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2203      	movs	r2, #3
 8002e1a:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4618      	mov	r0, r3
 8002e24:	f005 f85f 	bl	8007ee6 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e28:	2300      	movs	r3, #0
 8002e2a:	73fb      	strb	r3, [r7, #15]
 8002e2c:	e03e      	b.n	8002eac <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002e2e:	7bfa      	ldrb	r2, [r7, #15]
 8002e30:	6879      	ldr	r1, [r7, #4]
 8002e32:	4613      	mov	r3, r2
 8002e34:	009b      	lsls	r3, r3, #2
 8002e36:	4413      	add	r3, r2
 8002e38:	00db      	lsls	r3, r3, #3
 8002e3a:	440b      	add	r3, r1
 8002e3c:	3311      	adds	r3, #17
 8002e3e:	2201      	movs	r2, #1
 8002e40:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002e42:	7bfa      	ldrb	r2, [r7, #15]
 8002e44:	6879      	ldr	r1, [r7, #4]
 8002e46:	4613      	mov	r3, r2
 8002e48:	009b      	lsls	r3, r3, #2
 8002e4a:	4413      	add	r3, r2
 8002e4c:	00db      	lsls	r3, r3, #3
 8002e4e:	440b      	add	r3, r1
 8002e50:	3310      	adds	r3, #16
 8002e52:	7bfa      	ldrb	r2, [r7, #15]
 8002e54:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002e56:	7bfa      	ldrb	r2, [r7, #15]
 8002e58:	6879      	ldr	r1, [r7, #4]
 8002e5a:	4613      	mov	r3, r2
 8002e5c:	009b      	lsls	r3, r3, #2
 8002e5e:	4413      	add	r3, r2
 8002e60:	00db      	lsls	r3, r3, #3
 8002e62:	440b      	add	r3, r1
 8002e64:	3313      	adds	r3, #19
 8002e66:	2200      	movs	r2, #0
 8002e68:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002e6a:	7bfa      	ldrb	r2, [r7, #15]
 8002e6c:	6879      	ldr	r1, [r7, #4]
 8002e6e:	4613      	mov	r3, r2
 8002e70:	009b      	lsls	r3, r3, #2
 8002e72:	4413      	add	r3, r2
 8002e74:	00db      	lsls	r3, r3, #3
 8002e76:	440b      	add	r3, r1
 8002e78:	3320      	adds	r3, #32
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002e7e:	7bfa      	ldrb	r2, [r7, #15]
 8002e80:	6879      	ldr	r1, [r7, #4]
 8002e82:	4613      	mov	r3, r2
 8002e84:	009b      	lsls	r3, r3, #2
 8002e86:	4413      	add	r3, r2
 8002e88:	00db      	lsls	r3, r3, #3
 8002e8a:	440b      	add	r3, r1
 8002e8c:	3324      	adds	r3, #36	@ 0x24
 8002e8e:	2200      	movs	r2, #0
 8002e90:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002e92:	7bfb      	ldrb	r3, [r7, #15]
 8002e94:	6879      	ldr	r1, [r7, #4]
 8002e96:	1c5a      	adds	r2, r3, #1
 8002e98:	4613      	mov	r3, r2
 8002e9a:	009b      	lsls	r3, r3, #2
 8002e9c:	4413      	add	r3, r2
 8002e9e:	00db      	lsls	r3, r3, #3
 8002ea0:	440b      	add	r3, r1
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ea6:	7bfb      	ldrb	r3, [r7, #15]
 8002ea8:	3301      	adds	r3, #1
 8002eaa:	73fb      	strb	r3, [r7, #15]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	791b      	ldrb	r3, [r3, #4]
 8002eb0:	7bfa      	ldrb	r2, [r7, #15]
 8002eb2:	429a      	cmp	r2, r3
 8002eb4:	d3bb      	bcc.n	8002e2e <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	73fb      	strb	r3, [r7, #15]
 8002eba:	e044      	b.n	8002f46 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002ebc:	7bfa      	ldrb	r2, [r7, #15]
 8002ebe:	6879      	ldr	r1, [r7, #4]
 8002ec0:	4613      	mov	r3, r2
 8002ec2:	009b      	lsls	r3, r3, #2
 8002ec4:	4413      	add	r3, r2
 8002ec6:	00db      	lsls	r3, r3, #3
 8002ec8:	440b      	add	r3, r1
 8002eca:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8002ece:	2200      	movs	r2, #0
 8002ed0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002ed2:	7bfa      	ldrb	r2, [r7, #15]
 8002ed4:	6879      	ldr	r1, [r7, #4]
 8002ed6:	4613      	mov	r3, r2
 8002ed8:	009b      	lsls	r3, r3, #2
 8002eda:	4413      	add	r3, r2
 8002edc:	00db      	lsls	r3, r3, #3
 8002ede:	440b      	add	r3, r1
 8002ee0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002ee4:	7bfa      	ldrb	r2, [r7, #15]
 8002ee6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002ee8:	7bfa      	ldrb	r2, [r7, #15]
 8002eea:	6879      	ldr	r1, [r7, #4]
 8002eec:	4613      	mov	r3, r2
 8002eee:	009b      	lsls	r3, r3, #2
 8002ef0:	4413      	add	r3, r2
 8002ef2:	00db      	lsls	r3, r3, #3
 8002ef4:	440b      	add	r3, r1
 8002ef6:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8002efa:	2200      	movs	r2, #0
 8002efc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002efe:	7bfa      	ldrb	r2, [r7, #15]
 8002f00:	6879      	ldr	r1, [r7, #4]
 8002f02:	4613      	mov	r3, r2
 8002f04:	009b      	lsls	r3, r3, #2
 8002f06:	4413      	add	r3, r2
 8002f08:	00db      	lsls	r3, r3, #3
 8002f0a:	440b      	add	r3, r1
 8002f0c:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8002f10:	2200      	movs	r2, #0
 8002f12:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002f14:	7bfa      	ldrb	r2, [r7, #15]
 8002f16:	6879      	ldr	r1, [r7, #4]
 8002f18:	4613      	mov	r3, r2
 8002f1a:	009b      	lsls	r3, r3, #2
 8002f1c:	4413      	add	r3, r2
 8002f1e:	00db      	lsls	r3, r3, #3
 8002f20:	440b      	add	r3, r1
 8002f22:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8002f26:	2200      	movs	r2, #0
 8002f28:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002f2a:	7bfa      	ldrb	r2, [r7, #15]
 8002f2c:	6879      	ldr	r1, [r7, #4]
 8002f2e:	4613      	mov	r3, r2
 8002f30:	009b      	lsls	r3, r3, #2
 8002f32:	4413      	add	r3, r2
 8002f34:	00db      	lsls	r3, r3, #3
 8002f36:	440b      	add	r3, r1
 8002f38:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f40:	7bfb      	ldrb	r3, [r7, #15]
 8002f42:	3301      	adds	r3, #1
 8002f44:	73fb      	strb	r3, [r7, #15]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	791b      	ldrb	r3, [r3, #4]
 8002f4a:	7bfa      	ldrb	r2, [r7, #15]
 8002f4c:	429a      	cmp	r2, r3
 8002f4e:	d3b5      	bcc.n	8002ebc <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6818      	ldr	r0, [r3, #0]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	3304      	adds	r3, #4
 8002f58:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002f5c:	f004 ffde 	bl	8007f1c <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2200      	movs	r2, #0
 8002f64:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2201      	movs	r2, #1
 8002f6a:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	7a9b      	ldrb	r3, [r3, #10]
 8002f72:	2b01      	cmp	r3, #1
 8002f74:	d102      	bne.n	8002f7c <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002f76:	6878      	ldr	r0, [r7, #4]
 8002f78:	f001 fc0e 	bl	8004798 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8002f7c:	2300      	movs	r3, #0
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	3710      	adds	r7, #16
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}

08002f86 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002f86:	b580      	push	{r7, lr}
 8002f88:	b082      	sub	sp, #8
 8002f8a:	af00      	add	r7, sp, #0
 8002f8c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002f94:	2b01      	cmp	r3, #1
 8002f96:	d101      	bne.n	8002f9c <HAL_PCD_Start+0x16>
 8002f98:	2302      	movs	r3, #2
 8002f9a:	e012      	b.n	8002fc2 <HAL_PCD_Start+0x3c>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f004 ff85 	bl	8007eb8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f006 fd62 	bl	8009a7c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2200      	movs	r2, #0
 8002fbc:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002fc0:	2300      	movs	r3, #0
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	3708      	adds	r7, #8
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}

08002fca <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002fca:	b580      	push	{r7, lr}
 8002fcc:	b084      	sub	sp, #16
 8002fce:	af00      	add	r7, sp, #0
 8002fd0:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f006 fd67 	bl	8009aaa <USB_ReadInterrupts>
 8002fdc:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d003      	beq.n	8002ff0 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002fe8:	6878      	ldr	r0, [r7, #4]
 8002fea:	f000 fb06 	bl	80035fa <PCD_EP_ISR_Handler>

    return;
 8002fee:	e110      	b.n	8003212 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d013      	beq.n	8003022 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003002:	b29a      	uxth	r2, r3
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800300c:	b292      	uxth	r2, r2
 800300e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	f008 fcd9 	bl	800b9ca <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003018:	2100      	movs	r1, #0
 800301a:	6878      	ldr	r0, [r7, #4]
 800301c:	f000 f8fc 	bl	8003218 <HAL_PCD_SetAddress>

    return;
 8003020:	e0f7      	b.n	8003212 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003028:	2b00      	cmp	r3, #0
 800302a:	d00c      	beq.n	8003046 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003034:	b29a      	uxth	r2, r3
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800303e:	b292      	uxth	r2, r2
 8003040:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8003044:	e0e5      	b.n	8003212 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800304c:	2b00      	cmp	r3, #0
 800304e:	d00c      	beq.n	800306a <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003058:	b29a      	uxth	r2, r3
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003062:	b292      	uxth	r2, r2
 8003064:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8003068:	e0d3      	b.n	8003212 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003070:	2b00      	cmp	r3, #0
 8003072:	d034      	beq.n	80030de <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800307c:	b29a      	uxth	r2, r3
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f022 0204 	bic.w	r2, r2, #4
 8003086:	b292      	uxth	r2, r2
 8003088:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003094:	b29a      	uxth	r2, r3
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f022 0208 	bic.w	r2, r2, #8
 800309e:	b292      	uxth	r2, r2
 80030a0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 80030aa:	2b01      	cmp	r3, #1
 80030ac:	d107      	bne.n	80030be <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2200      	movs	r2, #0
 80030b2:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80030b6:	2100      	movs	r1, #0
 80030b8:	6878      	ldr	r0, [r7, #4]
 80030ba:	f008 fe79 	bl	800bdb0 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	f008 fcbc 	bl	800ba3c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80030cc:	b29a      	uxth	r2, r3
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80030d6:	b292      	uxth	r2, r2
 80030d8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80030dc:	e099      	b.n	8003212 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d027      	beq.n	8003138 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80030f0:	b29a      	uxth	r2, r3
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f042 0208 	orr.w	r2, r2, #8
 80030fa:	b292      	uxth	r2, r2
 80030fc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003108:	b29a      	uxth	r2, r3
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003112:	b292      	uxth	r2, r2
 8003114:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003120:	b29a      	uxth	r2, r3
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f042 0204 	orr.w	r2, r2, #4
 800312a:	b292      	uxth	r2, r2
 800312c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8003130:	6878      	ldr	r0, [r7, #4]
 8003132:	f008 fc69 	bl	800ba08 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003136:	e06c      	b.n	8003212 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800313e:	2b00      	cmp	r3, #0
 8003140:	d040      	beq.n	80031c4 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800314a:	b29a      	uxth	r2, r3
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003154:	b292      	uxth	r2, r2
 8003156:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8003160:	2b00      	cmp	r3, #0
 8003162:	d12b      	bne.n	80031bc <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800316c:	b29a      	uxth	r2, r3
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f042 0204 	orr.w	r2, r2, #4
 8003176:	b292      	uxth	r2, r2
 8003178:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003184:	b29a      	uxth	r2, r3
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f042 0208 	orr.w	r2, r2, #8
 800318e:	b292      	uxth	r2, r2
 8003190:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2201      	movs	r2, #1
 8003198:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80031a4:	b29b      	uxth	r3, r3
 80031a6:	089b      	lsrs	r3, r3, #2
 80031a8:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80031b2:	2101      	movs	r1, #1
 80031b4:	6878      	ldr	r0, [r7, #4]
 80031b6:	f008 fdfb 	bl	800bdb0 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 80031ba:	e02a      	b.n	8003212 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 80031bc:	6878      	ldr	r0, [r7, #4]
 80031be:	f008 fc23 	bl	800ba08 <HAL_PCD_SuspendCallback>
    return;
 80031c2:	e026      	b.n	8003212 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d00f      	beq.n	80031ee <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80031d6:	b29a      	uxth	r2, r3
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80031e0:	b292      	uxth	r2, r2
 80031e2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80031e6:	6878      	ldr	r0, [r7, #4]
 80031e8:	f008 fbe1 	bl	800b9ae <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80031ec:	e011      	b.n	8003212 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d00c      	beq.n	8003212 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003200:	b29a      	uxth	r2, r3
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800320a:	b292      	uxth	r2, r2
 800320c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8003210:	bf00      	nop
  }
}
 8003212:	3710      	adds	r7, #16
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}

08003218 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b082      	sub	sp, #8
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
 8003220:	460b      	mov	r3, r1
 8003222:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800322a:	2b01      	cmp	r3, #1
 800322c:	d101      	bne.n	8003232 <HAL_PCD_SetAddress+0x1a>
 800322e:	2302      	movs	r3, #2
 8003230:	e012      	b.n	8003258 <HAL_PCD_SetAddress+0x40>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2201      	movs	r2, #1
 8003236:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	78fa      	ldrb	r2, [r7, #3]
 800323e:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	78fa      	ldrb	r2, [r7, #3]
 8003246:	4611      	mov	r1, r2
 8003248:	4618      	mov	r0, r3
 800324a:	f006 fc03 	bl	8009a54 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2200      	movs	r2, #0
 8003252:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003256:	2300      	movs	r3, #0
}
 8003258:	4618      	mov	r0, r3
 800325a:	3708      	adds	r7, #8
 800325c:	46bd      	mov	sp, r7
 800325e:	bd80      	pop	{r7, pc}

08003260 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b084      	sub	sp, #16
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
 8003268:	4608      	mov	r0, r1
 800326a:	4611      	mov	r1, r2
 800326c:	461a      	mov	r2, r3
 800326e:	4603      	mov	r3, r0
 8003270:	70fb      	strb	r3, [r7, #3]
 8003272:	460b      	mov	r3, r1
 8003274:	803b      	strh	r3, [r7, #0]
 8003276:	4613      	mov	r3, r2
 8003278:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800327a:	2300      	movs	r3, #0
 800327c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800327e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003282:	2b00      	cmp	r3, #0
 8003284:	da0e      	bge.n	80032a4 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003286:	78fb      	ldrb	r3, [r7, #3]
 8003288:	f003 0207 	and.w	r2, r3, #7
 800328c:	4613      	mov	r3, r2
 800328e:	009b      	lsls	r3, r3, #2
 8003290:	4413      	add	r3, r2
 8003292:	00db      	lsls	r3, r3, #3
 8003294:	3310      	adds	r3, #16
 8003296:	687a      	ldr	r2, [r7, #4]
 8003298:	4413      	add	r3, r2
 800329a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2201      	movs	r2, #1
 80032a0:	705a      	strb	r2, [r3, #1]
 80032a2:	e00e      	b.n	80032c2 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80032a4:	78fb      	ldrb	r3, [r7, #3]
 80032a6:	f003 0207 	and.w	r2, r3, #7
 80032aa:	4613      	mov	r3, r2
 80032ac:	009b      	lsls	r3, r3, #2
 80032ae:	4413      	add	r3, r2
 80032b0:	00db      	lsls	r3, r3, #3
 80032b2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80032b6:	687a      	ldr	r2, [r7, #4]
 80032b8:	4413      	add	r3, r2
 80032ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	2200      	movs	r2, #0
 80032c0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80032c2:	78fb      	ldrb	r3, [r7, #3]
 80032c4:	f003 0307 	and.w	r3, r3, #7
 80032c8:	b2da      	uxtb	r2, r3
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80032ce:	883b      	ldrh	r3, [r7, #0]
 80032d0:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	78ba      	ldrb	r2, [r7, #2]
 80032dc:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80032de:	78bb      	ldrb	r3, [r7, #2]
 80032e0:	2b02      	cmp	r3, #2
 80032e2:	d102      	bne.n	80032ea <HAL_PCD_EP_Open+0x8a>
  {
    ep->data_pid_start = 0U;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	2200      	movs	r2, #0
 80032e8:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80032f0:	2b01      	cmp	r3, #1
 80032f2:	d101      	bne.n	80032f8 <HAL_PCD_EP_Open+0x98>
 80032f4:	2302      	movs	r3, #2
 80032f6:	e00e      	b.n	8003316 <HAL_PCD_EP_Open+0xb6>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2201      	movs	r2, #1
 80032fc:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	68f9      	ldr	r1, [r7, #12]
 8003306:	4618      	mov	r0, r3
 8003308:	f004 fe26 	bl	8007f58 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2200      	movs	r2, #0
 8003310:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8003314:	7afb      	ldrb	r3, [r7, #11]
}
 8003316:	4618      	mov	r0, r3
 8003318:	3710      	adds	r7, #16
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}

0800331e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800331e:	b580      	push	{r7, lr}
 8003320:	b084      	sub	sp, #16
 8003322:	af00      	add	r7, sp, #0
 8003324:	6078      	str	r0, [r7, #4]
 8003326:	460b      	mov	r3, r1
 8003328:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800332a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800332e:	2b00      	cmp	r3, #0
 8003330:	da0e      	bge.n	8003350 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003332:	78fb      	ldrb	r3, [r7, #3]
 8003334:	f003 0207 	and.w	r2, r3, #7
 8003338:	4613      	mov	r3, r2
 800333a:	009b      	lsls	r3, r3, #2
 800333c:	4413      	add	r3, r2
 800333e:	00db      	lsls	r3, r3, #3
 8003340:	3310      	adds	r3, #16
 8003342:	687a      	ldr	r2, [r7, #4]
 8003344:	4413      	add	r3, r2
 8003346:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	2201      	movs	r2, #1
 800334c:	705a      	strb	r2, [r3, #1]
 800334e:	e00e      	b.n	800336e <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003350:	78fb      	ldrb	r3, [r7, #3]
 8003352:	f003 0207 	and.w	r2, r3, #7
 8003356:	4613      	mov	r3, r2
 8003358:	009b      	lsls	r3, r3, #2
 800335a:	4413      	add	r3, r2
 800335c:	00db      	lsls	r3, r3, #3
 800335e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003362:	687a      	ldr	r2, [r7, #4]
 8003364:	4413      	add	r3, r2
 8003366:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	2200      	movs	r2, #0
 800336c:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800336e:	78fb      	ldrb	r3, [r7, #3]
 8003370:	f003 0307 	and.w	r3, r3, #7
 8003374:	b2da      	uxtb	r2, r3
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003380:	2b01      	cmp	r3, #1
 8003382:	d101      	bne.n	8003388 <HAL_PCD_EP_Close+0x6a>
 8003384:	2302      	movs	r3, #2
 8003386:	e00e      	b.n	80033a6 <HAL_PCD_EP_Close+0x88>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2201      	movs	r2, #1
 800338c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	68f9      	ldr	r1, [r7, #12]
 8003396:	4618      	mov	r0, r3
 8003398:	f005 fac6 	bl	8008928 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2200      	movs	r2, #0
 80033a0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 80033a4:	2300      	movs	r3, #0
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	3710      	adds	r7, #16
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}

080033ae <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80033ae:	b580      	push	{r7, lr}
 80033b0:	b086      	sub	sp, #24
 80033b2:	af00      	add	r7, sp, #0
 80033b4:	60f8      	str	r0, [r7, #12]
 80033b6:	607a      	str	r2, [r7, #4]
 80033b8:	603b      	str	r3, [r7, #0]
 80033ba:	460b      	mov	r3, r1
 80033bc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80033be:	7afb      	ldrb	r3, [r7, #11]
 80033c0:	f003 0207 	and.w	r2, r3, #7
 80033c4:	4613      	mov	r3, r2
 80033c6:	009b      	lsls	r3, r3, #2
 80033c8:	4413      	add	r3, r2
 80033ca:	00db      	lsls	r3, r3, #3
 80033cc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80033d0:	68fa      	ldr	r2, [r7, #12]
 80033d2:	4413      	add	r3, r2
 80033d4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	687a      	ldr	r2, [r7, #4]
 80033da:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	683a      	ldr	r2, [r7, #0]
 80033e0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	2200      	movs	r2, #0
 80033e6:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	2200      	movs	r2, #0
 80033ec:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80033ee:	7afb      	ldrb	r3, [r7, #11]
 80033f0:	f003 0307 	and.w	r3, r3, #7
 80033f4:	b2da      	uxtb	r2, r3
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	6979      	ldr	r1, [r7, #20]
 8003400:	4618      	mov	r0, r3
 8003402:	f005 fc7e 	bl	8008d02 <USB_EPStartXfer>

  return HAL_OK;
 8003406:	2300      	movs	r3, #0
}
 8003408:	4618      	mov	r0, r3
 800340a:	3718      	adds	r7, #24
 800340c:	46bd      	mov	sp, r7
 800340e:	bd80      	pop	{r7, pc}

08003410 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003410:	b480      	push	{r7}
 8003412:	b083      	sub	sp, #12
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
 8003418:	460b      	mov	r3, r1
 800341a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800341c:	78fb      	ldrb	r3, [r7, #3]
 800341e:	f003 0207 	and.w	r2, r3, #7
 8003422:	6879      	ldr	r1, [r7, #4]
 8003424:	4613      	mov	r3, r2
 8003426:	009b      	lsls	r3, r3, #2
 8003428:	4413      	add	r3, r2
 800342a:	00db      	lsls	r3, r3, #3
 800342c:	440b      	add	r3, r1
 800342e:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8003432:	681b      	ldr	r3, [r3, #0]
}
 8003434:	4618      	mov	r0, r3
 8003436:	370c      	adds	r7, #12
 8003438:	46bd      	mov	sp, r7
 800343a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343e:	4770      	bx	lr

08003440 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b086      	sub	sp, #24
 8003444:	af00      	add	r7, sp, #0
 8003446:	60f8      	str	r0, [r7, #12]
 8003448:	607a      	str	r2, [r7, #4]
 800344a:	603b      	str	r3, [r7, #0]
 800344c:	460b      	mov	r3, r1
 800344e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003450:	7afb      	ldrb	r3, [r7, #11]
 8003452:	f003 0207 	and.w	r2, r3, #7
 8003456:	4613      	mov	r3, r2
 8003458:	009b      	lsls	r3, r3, #2
 800345a:	4413      	add	r3, r2
 800345c:	00db      	lsls	r3, r3, #3
 800345e:	3310      	adds	r3, #16
 8003460:	68fa      	ldr	r2, [r7, #12]
 8003462:	4413      	add	r3, r2
 8003464:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003466:	697b      	ldr	r3, [r7, #20]
 8003468:	687a      	ldr	r2, [r7, #4]
 800346a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800346c:	697b      	ldr	r3, [r7, #20]
 800346e:	683a      	ldr	r2, [r7, #0]
 8003470:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	2201      	movs	r2, #1
 8003476:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	683a      	ldr	r2, [r7, #0]
 800347e:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8003480:	697b      	ldr	r3, [r7, #20]
 8003482:	2200      	movs	r2, #0
 8003484:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	2201      	movs	r2, #1
 800348a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800348c:	7afb      	ldrb	r3, [r7, #11]
 800348e:	f003 0307 	and.w	r3, r3, #7
 8003492:	b2da      	uxtb	r2, r3
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	6979      	ldr	r1, [r7, #20]
 800349e:	4618      	mov	r0, r3
 80034a0:	f005 fc2f 	bl	8008d02 <USB_EPStartXfer>

  return HAL_OK;
 80034a4:	2300      	movs	r3, #0
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	3718      	adds	r7, #24
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}

080034ae <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80034ae:	b580      	push	{r7, lr}
 80034b0:	b084      	sub	sp, #16
 80034b2:	af00      	add	r7, sp, #0
 80034b4:	6078      	str	r0, [r7, #4]
 80034b6:	460b      	mov	r3, r1
 80034b8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80034ba:	78fb      	ldrb	r3, [r7, #3]
 80034bc:	f003 0307 	and.w	r3, r3, #7
 80034c0:	687a      	ldr	r2, [r7, #4]
 80034c2:	7912      	ldrb	r2, [r2, #4]
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d901      	bls.n	80034cc <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80034c8:	2301      	movs	r3, #1
 80034ca:	e03e      	b.n	800354a <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80034cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	da0e      	bge.n	80034f2 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80034d4:	78fb      	ldrb	r3, [r7, #3]
 80034d6:	f003 0207 	and.w	r2, r3, #7
 80034da:	4613      	mov	r3, r2
 80034dc:	009b      	lsls	r3, r3, #2
 80034de:	4413      	add	r3, r2
 80034e0:	00db      	lsls	r3, r3, #3
 80034e2:	3310      	adds	r3, #16
 80034e4:	687a      	ldr	r2, [r7, #4]
 80034e6:	4413      	add	r3, r2
 80034e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	2201      	movs	r2, #1
 80034ee:	705a      	strb	r2, [r3, #1]
 80034f0:	e00c      	b.n	800350c <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80034f2:	78fa      	ldrb	r2, [r7, #3]
 80034f4:	4613      	mov	r3, r2
 80034f6:	009b      	lsls	r3, r3, #2
 80034f8:	4413      	add	r3, r2
 80034fa:	00db      	lsls	r3, r3, #3
 80034fc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003500:	687a      	ldr	r2, [r7, #4]
 8003502:	4413      	add	r3, r2
 8003504:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	2200      	movs	r2, #0
 800350a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	2201      	movs	r2, #1
 8003510:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003512:	78fb      	ldrb	r3, [r7, #3]
 8003514:	f003 0307 	and.w	r3, r3, #7
 8003518:	b2da      	uxtb	r2, r3
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003524:	2b01      	cmp	r3, #1
 8003526:	d101      	bne.n	800352c <HAL_PCD_EP_SetStall+0x7e>
 8003528:	2302      	movs	r3, #2
 800352a:	e00e      	b.n	800354a <HAL_PCD_EP_SetStall+0x9c>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2201      	movs	r2, #1
 8003530:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	68f9      	ldr	r1, [r7, #12]
 800353a:	4618      	mov	r0, r3
 800353c:	f006 f990 	bl	8009860 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2200      	movs	r2, #0
 8003544:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003548:	2300      	movs	r3, #0
}
 800354a:	4618      	mov	r0, r3
 800354c:	3710      	adds	r7, #16
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}

08003552 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003552:	b580      	push	{r7, lr}
 8003554:	b084      	sub	sp, #16
 8003556:	af00      	add	r7, sp, #0
 8003558:	6078      	str	r0, [r7, #4]
 800355a:	460b      	mov	r3, r1
 800355c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800355e:	78fb      	ldrb	r3, [r7, #3]
 8003560:	f003 030f 	and.w	r3, r3, #15
 8003564:	687a      	ldr	r2, [r7, #4]
 8003566:	7912      	ldrb	r2, [r2, #4]
 8003568:	4293      	cmp	r3, r2
 800356a:	d901      	bls.n	8003570 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800356c:	2301      	movs	r3, #1
 800356e:	e040      	b.n	80035f2 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003570:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003574:	2b00      	cmp	r3, #0
 8003576:	da0e      	bge.n	8003596 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003578:	78fb      	ldrb	r3, [r7, #3]
 800357a:	f003 0207 	and.w	r2, r3, #7
 800357e:	4613      	mov	r3, r2
 8003580:	009b      	lsls	r3, r3, #2
 8003582:	4413      	add	r3, r2
 8003584:	00db      	lsls	r3, r3, #3
 8003586:	3310      	adds	r3, #16
 8003588:	687a      	ldr	r2, [r7, #4]
 800358a:	4413      	add	r3, r2
 800358c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	2201      	movs	r2, #1
 8003592:	705a      	strb	r2, [r3, #1]
 8003594:	e00e      	b.n	80035b4 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003596:	78fb      	ldrb	r3, [r7, #3]
 8003598:	f003 0207 	and.w	r2, r3, #7
 800359c:	4613      	mov	r3, r2
 800359e:	009b      	lsls	r3, r3, #2
 80035a0:	4413      	add	r3, r2
 80035a2:	00db      	lsls	r3, r3, #3
 80035a4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80035a8:	687a      	ldr	r2, [r7, #4]
 80035aa:	4413      	add	r3, r2
 80035ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	2200      	movs	r2, #0
 80035b2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2200      	movs	r2, #0
 80035b8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80035ba:	78fb      	ldrb	r3, [r7, #3]
 80035bc:	f003 0307 	and.w	r3, r3, #7
 80035c0:	b2da      	uxtb	r2, r3
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80035cc:	2b01      	cmp	r3, #1
 80035ce:	d101      	bne.n	80035d4 <HAL_PCD_EP_ClrStall+0x82>
 80035d0:	2302      	movs	r3, #2
 80035d2:	e00e      	b.n	80035f2 <HAL_PCD_EP_ClrStall+0xa0>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2201      	movs	r2, #1
 80035d8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	68f9      	ldr	r1, [r7, #12]
 80035e2:	4618      	mov	r0, r3
 80035e4:	f006 f98d 	bl	8009902 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2200      	movs	r2, #0
 80035ec:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80035f0:	2300      	movs	r3, #0
}
 80035f2:	4618      	mov	r0, r3
 80035f4:	3710      	adds	r7, #16
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}

080035fa <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80035fa:	b580      	push	{r7, lr}
 80035fc:	b092      	sub	sp, #72	@ 0x48
 80035fe:	af00      	add	r7, sp, #0
 8003600:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003602:	e333      	b.n	8003c6c <PCD_EP_ISR_Handler+0x672>
  {
    wIstr = hpcd->Instance->ISTR;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800360c:	877b      	strh	r3, [r7, #58]	@ 0x3a

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800360e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8003610:	b2db      	uxtb	r3, r3
 8003612:	f003 030f 	and.w	r3, r3, #15
 8003616:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39

    if (epindex == 0U)
 800361a:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800361e:	2b00      	cmp	r3, #0
 8003620:	f040 8108 	bne.w	8003834 <PCD_EP_ISR_Handler+0x23a>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003624:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8003626:	f003 0310 	and.w	r3, r3, #16
 800362a:	2b00      	cmp	r3, #0
 800362c:	d14c      	bne.n	80036c8 <PCD_EP_ISR_Handler+0xce>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	881b      	ldrh	r3, [r3, #0]
 8003634:	b29b      	uxth	r3, r3
 8003636:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 800363a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800363e:	813b      	strh	r3, [r7, #8]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	893b      	ldrh	r3, [r7, #8]
 8003646:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800364a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800364e:	b29b      	uxth	r3, r3
 8003650:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	3310      	adds	r3, #16
 8003656:	643b      	str	r3, [r7, #64]	@ 0x40

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003660:	b29b      	uxth	r3, r3
 8003662:	461a      	mov	r2, r3
 8003664:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003666:	781b      	ldrb	r3, [r3, #0]
 8003668:	00db      	lsls	r3, r3, #3
 800366a:	4413      	add	r3, r2
 800366c:	687a      	ldr	r2, [r7, #4]
 800366e:	6812      	ldr	r2, [r2, #0]
 8003670:	4413      	add	r3, r2
 8003672:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003676:	881b      	ldrh	r3, [r3, #0]
 8003678:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800367c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800367e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003680:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003682:	695a      	ldr	r2, [r3, #20]
 8003684:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003686:	69db      	ldr	r3, [r3, #28]
 8003688:	441a      	add	r2, r3
 800368a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800368c:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800368e:	2100      	movs	r1, #0
 8003690:	6878      	ldr	r0, [r7, #4]
 8003692:	f008 f972 	bl	800b97a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	7b1b      	ldrb	r3, [r3, #12]
 800369a:	b2db      	uxtb	r3, r3
 800369c:	2b00      	cmp	r3, #0
 800369e:	f000 82e5 	beq.w	8003c6c <PCD_EP_ISR_Handler+0x672>
 80036a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80036a4:	699b      	ldr	r3, [r3, #24]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	f040 82e0 	bne.w	8003c6c <PCD_EP_ISR_Handler+0x672>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	7b1b      	ldrb	r3, [r3, #12]
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80036b6:	b2da      	uxtb	r2, r3
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2200      	movs	r2, #0
 80036c4:	731a      	strb	r2, [r3, #12]
 80036c6:	e2d1      	b.n	8003c6c <PCD_EP_ISR_Handler+0x672>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80036ce:	643b      	str	r3, [r7, #64]	@ 0x40
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	881b      	ldrh	r3, [r3, #0]
 80036d6:	86fb      	strh	r3, [r7, #54]	@ 0x36

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80036d8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80036da:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d032      	beq.n	8003748 <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80036ea:	b29b      	uxth	r3, r3
 80036ec:	461a      	mov	r2, r3
 80036ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80036f0:	781b      	ldrb	r3, [r3, #0]
 80036f2:	00db      	lsls	r3, r3, #3
 80036f4:	4413      	add	r3, r2
 80036f6:	687a      	ldr	r2, [r7, #4]
 80036f8:	6812      	ldr	r2, [r2, #0]
 80036fa:	4413      	add	r3, r2
 80036fc:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003700:	881b      	ldrh	r3, [r3, #0]
 8003702:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003706:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003708:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6818      	ldr	r0, [r3, #0]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8003714:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003716:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003718:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800371a:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800371c:	b29b      	uxth	r3, r3
 800371e:	f006 fa16 	bl	8009b4e <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	881b      	ldrh	r3, [r3, #0]
 8003728:	b29a      	uxth	r2, r3
 800372a:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800372e:	4013      	ands	r3, r2
 8003730:	817b      	strh	r3, [r7, #10]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	897a      	ldrh	r2, [r7, #10]
 8003738:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800373c:	b292      	uxth	r2, r2
 800373e:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003740:	6878      	ldr	r0, [r7, #4]
 8003742:	f008 f8ed 	bl	800b920 <HAL_PCD_SetupStageCallback>
 8003746:	e291      	b.n	8003c6c <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003748:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 800374c:	2b00      	cmp	r3, #0
 800374e:	f280 828d 	bge.w	8003c6c <PCD_EP_ISR_Handler+0x672>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	881b      	ldrh	r3, [r3, #0]
 8003758:	b29a      	uxth	r2, r3
 800375a:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800375e:	4013      	ands	r3, r2
 8003760:	81fb      	strh	r3, [r7, #14]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	89fa      	ldrh	r2, [r7, #14]
 8003768:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800376c:	b292      	uxth	r2, r2
 800376e:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003778:	b29b      	uxth	r3, r3
 800377a:	461a      	mov	r2, r3
 800377c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800377e:	781b      	ldrb	r3, [r3, #0]
 8003780:	00db      	lsls	r3, r3, #3
 8003782:	4413      	add	r3, r2
 8003784:	687a      	ldr	r2, [r7, #4]
 8003786:	6812      	ldr	r2, [r2, #0]
 8003788:	4413      	add	r3, r2
 800378a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800378e:	881b      	ldrh	r3, [r3, #0]
 8003790:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003794:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003796:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003798:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800379a:	69db      	ldr	r3, [r3, #28]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d019      	beq.n	80037d4 <PCD_EP_ISR_Handler+0x1da>
 80037a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80037a2:	695b      	ldr	r3, [r3, #20]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d015      	beq.n	80037d4 <PCD_EP_ISR_Handler+0x1da>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6818      	ldr	r0, [r3, #0]
 80037ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80037ae:	6959      	ldr	r1, [r3, #20]
 80037b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80037b2:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80037b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80037b6:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80037b8:	b29b      	uxth	r3, r3
 80037ba:	f006 f9c8 	bl	8009b4e <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80037be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80037c0:	695a      	ldr	r2, [r3, #20]
 80037c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80037c4:	69db      	ldr	r3, [r3, #28]
 80037c6:	441a      	add	r2, r3
 80037c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80037ca:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80037cc:	2100      	movs	r1, #0
 80037ce:	6878      	ldr	r0, [r7, #4]
 80037d0:	f008 f8b8 	bl	800b944 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	881b      	ldrh	r3, [r3, #0]
 80037da:	86fb      	strh	r3, [r7, #54]	@ 0x36

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80037dc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80037de:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	f040 8242 	bne.w	8003c6c <PCD_EP_ISR_Handler+0x672>
 80037e8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80037ea:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80037ee:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80037f2:	f000 823b 	beq.w	8003c6c <PCD_EP_ISR_Handler+0x672>
          {
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	881b      	ldrh	r3, [r3, #0]
 80037fc:	b29b      	uxth	r3, r3
 80037fe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003802:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003806:	81bb      	strh	r3, [r7, #12]
 8003808:	89bb      	ldrh	r3, [r7, #12]
 800380a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800380e:	81bb      	strh	r3, [r7, #12]
 8003810:	89bb      	ldrh	r3, [r7, #12]
 8003812:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003816:	81bb      	strh	r3, [r7, #12]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681a      	ldr	r2, [r3, #0]
 800381c:	89bb      	ldrh	r3, [r7, #12]
 800381e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003822:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003826:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800382a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800382e:	b29b      	uxth	r3, r3
 8003830:	8013      	strh	r3, [r2, #0]
 8003832:	e21b      	b.n	8003c6c <PCD_EP_ISR_Handler+0x672>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	461a      	mov	r2, r3
 800383a:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800383e:	009b      	lsls	r3, r3, #2
 8003840:	4413      	add	r3, r2
 8003842:	881b      	ldrh	r3, [r3, #0]
 8003844:	86fb      	strh	r3, [r7, #54]	@ 0x36

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003846:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 800384a:	2b00      	cmp	r3, #0
 800384c:	f280 80f1 	bge.w	8003a32 <PCD_EP_ISR_Handler+0x438>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	461a      	mov	r2, r3
 8003856:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800385a:	009b      	lsls	r3, r3, #2
 800385c:	4413      	add	r3, r2
 800385e:	881b      	ldrh	r3, [r3, #0]
 8003860:	b29a      	uxth	r2, r3
 8003862:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003866:	4013      	ands	r3, r2
 8003868:	86bb      	strh	r3, [r7, #52]	@ 0x34
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	461a      	mov	r2, r3
 8003870:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8003874:	009b      	lsls	r3, r3, #2
 8003876:	4413      	add	r3, r2
 8003878:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800387a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800387e:	b292      	uxth	r2, r2
 8003880:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003882:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8003886:	4613      	mov	r3, r2
 8003888:	009b      	lsls	r3, r3, #2
 800388a:	4413      	add	r3, r2
 800388c:	00db      	lsls	r3, r3, #3
 800388e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003892:	687a      	ldr	r2, [r7, #4]
 8003894:	4413      	add	r3, r2
 8003896:	643b      	str	r3, [r7, #64]	@ 0x40

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8003898:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800389a:	7b1b      	ldrb	r3, [r3, #12]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d123      	bne.n	80038e8 <PCD_EP_ISR_Handler+0x2ee>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80038a8:	b29b      	uxth	r3, r3
 80038aa:	461a      	mov	r2, r3
 80038ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80038ae:	781b      	ldrb	r3, [r3, #0]
 80038b0:	00db      	lsls	r3, r3, #3
 80038b2:	4413      	add	r3, r2
 80038b4:	687a      	ldr	r2, [r7, #4]
 80038b6:	6812      	ldr	r2, [r2, #0]
 80038b8:	4413      	add	r3, r2
 80038ba:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80038be:	881b      	ldrh	r3, [r3, #0]
 80038c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80038c4:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

          if (count != 0U)
 80038c8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	f000 808b 	beq.w	80039e8 <PCD_EP_ISR_Handler+0x3ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6818      	ldr	r0, [r3, #0]
 80038d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80038d8:	6959      	ldr	r1, [r3, #20]
 80038da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80038dc:	88da      	ldrh	r2, [r3, #6]
 80038de:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80038e2:	f006 f934 	bl	8009b4e <USB_ReadPMA>
 80038e6:	e07f      	b.n	80039e8 <PCD_EP_ISR_Handler+0x3ee>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80038e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80038ea:	78db      	ldrb	r3, [r3, #3]
 80038ec:	2b02      	cmp	r3, #2
 80038ee:	d109      	bne.n	8003904 <PCD_EP_ISR_Handler+0x30a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80038f0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80038f2:	461a      	mov	r2, r3
 80038f4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	f000 f9c6 	bl	8003c88 <HAL_PCD_EP_DB_Receive>
 80038fc:	4603      	mov	r3, r0
 80038fe:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8003902:	e071      	b.n	80039e8 <PCD_EP_ISR_Handler+0x3ee>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	461a      	mov	r2, r3
 800390a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800390c:	781b      	ldrb	r3, [r3, #0]
 800390e:	009b      	lsls	r3, r3, #2
 8003910:	4413      	add	r3, r2
 8003912:	881b      	ldrh	r3, [r3, #0]
 8003914:	b29b      	uxth	r3, r3
 8003916:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800391a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800391e:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	461a      	mov	r2, r3
 8003926:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003928:	781b      	ldrb	r3, [r3, #0]
 800392a:	009b      	lsls	r3, r3, #2
 800392c:	441a      	add	r2, r3
 800392e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8003930:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003934:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003938:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800393c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003940:	b29b      	uxth	r3, r3
 8003942:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	461a      	mov	r2, r3
 800394a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800394c:	781b      	ldrb	r3, [r3, #0]
 800394e:	009b      	lsls	r3, r3, #2
 8003950:	4413      	add	r3, r2
 8003952:	881b      	ldrh	r3, [r3, #0]
 8003954:	b29b      	uxth	r3, r3
 8003956:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800395a:	2b00      	cmp	r3, #0
 800395c:	d022      	beq.n	80039a4 <PCD_EP_ISR_Handler+0x3aa>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003966:	b29b      	uxth	r3, r3
 8003968:	461a      	mov	r2, r3
 800396a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800396c:	781b      	ldrb	r3, [r3, #0]
 800396e:	00db      	lsls	r3, r3, #3
 8003970:	4413      	add	r3, r2
 8003972:	687a      	ldr	r2, [r7, #4]
 8003974:	6812      	ldr	r2, [r2, #0]
 8003976:	4413      	add	r3, r2
 8003978:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800397c:	881b      	ldrh	r3, [r3, #0]
 800397e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003982:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 8003986:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800398a:	2b00      	cmp	r3, #0
 800398c:	d02c      	beq.n	80039e8 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6818      	ldr	r0, [r3, #0]
 8003992:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003994:	6959      	ldr	r1, [r3, #20]
 8003996:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003998:	891a      	ldrh	r2, [r3, #8]
 800399a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800399e:	f006 f8d6 	bl	8009b4e <USB_ReadPMA>
 80039a2:	e021      	b.n	80039e8 <PCD_EP_ISR_Handler+0x3ee>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80039ac:	b29b      	uxth	r3, r3
 80039ae:	461a      	mov	r2, r3
 80039b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80039b2:	781b      	ldrb	r3, [r3, #0]
 80039b4:	00db      	lsls	r3, r3, #3
 80039b6:	4413      	add	r3, r2
 80039b8:	687a      	ldr	r2, [r7, #4]
 80039ba:	6812      	ldr	r2, [r2, #0]
 80039bc:	4413      	add	r3, r2
 80039be:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80039c2:	881b      	ldrh	r3, [r3, #0]
 80039c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80039c8:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 80039cc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d009      	beq.n	80039e8 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6818      	ldr	r0, [r3, #0]
 80039d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80039da:	6959      	ldr	r1, [r3, #20]
 80039dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80039de:	895a      	ldrh	r2, [r3, #10]
 80039e0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80039e4:	f006 f8b3 	bl	8009b4e <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80039e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80039ea:	69da      	ldr	r2, [r3, #28]
 80039ec:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80039f0:	441a      	add	r2, r3
 80039f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80039f4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80039f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80039f8:	695a      	ldr	r2, [r3, #20]
 80039fa:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80039fe:	441a      	add	r2, r3
 8003a00:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a02:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003a04:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a06:	699b      	ldr	r3, [r3, #24]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d005      	beq.n	8003a18 <PCD_EP_ISR_Handler+0x41e>
 8003a0c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8003a10:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a12:	691b      	ldr	r3, [r3, #16]
 8003a14:	429a      	cmp	r2, r3
 8003a16:	d206      	bcs.n	8003a26 <PCD_EP_ISR_Handler+0x42c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003a18:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a1a:	781b      	ldrb	r3, [r3, #0]
 8003a1c:	4619      	mov	r1, r3
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	f007 ff90 	bl	800b944 <HAL_PCD_DataOutStageCallback>
 8003a24:	e005      	b.n	8003a32 <PCD_EP_ISR_Handler+0x438>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	f005 f968 	bl	8008d02 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003a32:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003a34:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	f000 8117 	beq.w	8003c6c <PCD_EP_ISR_Handler+0x672>
      {
        ep = &hpcd->IN_ep[epindex];
 8003a3e:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8003a42:	4613      	mov	r3, r2
 8003a44:	009b      	lsls	r3, r3, #2
 8003a46:	4413      	add	r3, r2
 8003a48:	00db      	lsls	r3, r3, #3
 8003a4a:	3310      	adds	r3, #16
 8003a4c:	687a      	ldr	r2, [r7, #4]
 8003a4e:	4413      	add	r3, r2
 8003a50:	643b      	str	r3, [r7, #64]	@ 0x40

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	461a      	mov	r2, r3
 8003a58:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8003a5c:	009b      	lsls	r3, r3, #2
 8003a5e:	4413      	add	r3, r2
 8003a60:	881b      	ldrh	r3, [r3, #0]
 8003a62:	b29b      	uxth	r3, r3
 8003a64:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8003a68:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a6c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	461a      	mov	r2, r3
 8003a74:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8003a78:	009b      	lsls	r3, r3, #2
 8003a7a:	441a      	add	r2, r3
 8003a7c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8003a7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a86:	b29b      	uxth	r3, r3
 8003a88:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8003a8a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a8c:	78db      	ldrb	r3, [r3, #3]
 8003a8e:	2b01      	cmp	r3, #1
 8003a90:	f040 80a1 	bne.w	8003bd6 <PCD_EP_ISR_Handler+0x5dc>
        {
          ep->xfer_len = 0U;
 8003a94:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a96:	2200      	movs	r2, #0
 8003a98:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8003a9a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a9c:	7b1b      	ldrb	r3, [r3, #12]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	f000 8092 	beq.w	8003bc8 <PCD_EP_ISR_Handler+0x5ce>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003aa4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003aa6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d046      	beq.n	8003b3c <PCD_EP_ISR_Handler+0x542>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003aae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ab0:	785b      	ldrb	r3, [r3, #1]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d126      	bne.n	8003b04 <PCD_EP_ISR_Handler+0x50a>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	617b      	str	r3, [r7, #20]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003ac4:	b29b      	uxth	r3, r3
 8003ac6:	461a      	mov	r2, r3
 8003ac8:	697b      	ldr	r3, [r7, #20]
 8003aca:	4413      	add	r3, r2
 8003acc:	617b      	str	r3, [r7, #20]
 8003ace:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ad0:	781b      	ldrb	r3, [r3, #0]
 8003ad2:	00da      	lsls	r2, r3, #3
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	4413      	add	r3, r2
 8003ad8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003adc:	613b      	str	r3, [r7, #16]
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	881b      	ldrh	r3, [r3, #0]
 8003ae2:	b29b      	uxth	r3, r3
 8003ae4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ae8:	b29a      	uxth	r2, r3
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	801a      	strh	r2, [r3, #0]
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	881b      	ldrh	r3, [r3, #0]
 8003af2:	b29b      	uxth	r3, r3
 8003af4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003af8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003afc:	b29a      	uxth	r2, r3
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	801a      	strh	r2, [r3, #0]
 8003b02:	e061      	b.n	8003bc8 <PCD_EP_ISR_Handler+0x5ce>
 8003b04:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003b06:	785b      	ldrb	r3, [r3, #1]
 8003b08:	2b01      	cmp	r3, #1
 8003b0a:	d15d      	bne.n	8003bc8 <PCD_EP_ISR_Handler+0x5ce>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	61fb      	str	r3, [r7, #28]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003b1a:	b29b      	uxth	r3, r3
 8003b1c:	461a      	mov	r2, r3
 8003b1e:	69fb      	ldr	r3, [r7, #28]
 8003b20:	4413      	add	r3, r2
 8003b22:	61fb      	str	r3, [r7, #28]
 8003b24:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003b26:	781b      	ldrb	r3, [r3, #0]
 8003b28:	00da      	lsls	r2, r3, #3
 8003b2a:	69fb      	ldr	r3, [r7, #28]
 8003b2c:	4413      	add	r3, r2
 8003b2e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003b32:	61bb      	str	r3, [r7, #24]
 8003b34:	69bb      	ldr	r3, [r7, #24]
 8003b36:	2200      	movs	r2, #0
 8003b38:	801a      	strh	r2, [r3, #0]
 8003b3a:	e045      	b.n	8003bc8 <PCD_EP_ISR_Handler+0x5ce>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003b42:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003b44:	785b      	ldrb	r3, [r3, #1]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d126      	bne.n	8003b98 <PCD_EP_ISR_Handler+0x59e>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003b58:	b29b      	uxth	r3, r3
 8003b5a:	461a      	mov	r2, r3
 8003b5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b5e:	4413      	add	r3, r2
 8003b60:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b62:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003b64:	781b      	ldrb	r3, [r3, #0]
 8003b66:	00da      	lsls	r2, r3, #3
 8003b68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b6a:	4413      	add	r3, r2
 8003b6c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003b70:	623b      	str	r3, [r7, #32]
 8003b72:	6a3b      	ldr	r3, [r7, #32]
 8003b74:	881b      	ldrh	r3, [r3, #0]
 8003b76:	b29b      	uxth	r3, r3
 8003b78:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b7c:	b29a      	uxth	r2, r3
 8003b7e:	6a3b      	ldr	r3, [r7, #32]
 8003b80:	801a      	strh	r2, [r3, #0]
 8003b82:	6a3b      	ldr	r3, [r7, #32]
 8003b84:	881b      	ldrh	r3, [r3, #0]
 8003b86:	b29b      	uxth	r3, r3
 8003b88:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b8c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b90:	b29a      	uxth	r2, r3
 8003b92:	6a3b      	ldr	r3, [r7, #32]
 8003b94:	801a      	strh	r2, [r3, #0]
 8003b96:	e017      	b.n	8003bc8 <PCD_EP_ISR_Handler+0x5ce>
 8003b98:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003b9a:	785b      	ldrb	r3, [r3, #1]
 8003b9c:	2b01      	cmp	r3, #1
 8003b9e:	d113      	bne.n	8003bc8 <PCD_EP_ISR_Handler+0x5ce>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003ba8:	b29b      	uxth	r3, r3
 8003baa:	461a      	mov	r2, r3
 8003bac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003bae:	4413      	add	r3, r2
 8003bb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003bb2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003bb4:	781b      	ldrb	r3, [r3, #0]
 8003bb6:	00da      	lsls	r2, r3, #3
 8003bb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003bba:	4413      	add	r3, r2
 8003bbc:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003bc0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003bc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003bc8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003bca:	781b      	ldrb	r3, [r3, #0]
 8003bcc:	4619      	mov	r1, r3
 8003bce:	6878      	ldr	r0, [r7, #4]
 8003bd0:	f007 fed3 	bl	800b97a <HAL_PCD_DataInStageCallback>
 8003bd4:	e04a      	b.n	8003c6c <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8003bd6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003bd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d13f      	bne.n	8003c60 <PCD_EP_ISR_Handler+0x666>
          {
            /* Multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003be8:	b29b      	uxth	r3, r3
 8003bea:	461a      	mov	r2, r3
 8003bec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003bee:	781b      	ldrb	r3, [r3, #0]
 8003bf0:	00db      	lsls	r3, r3, #3
 8003bf2:	4413      	add	r3, r2
 8003bf4:	687a      	ldr	r2, [r7, #4]
 8003bf6:	6812      	ldr	r2, [r2, #0]
 8003bf8:	4413      	add	r3, r2
 8003bfa:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003bfe:	881b      	ldrh	r3, [r3, #0]
 8003c00:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c04:	867b      	strh	r3, [r7, #50]	@ 0x32

            if (ep->xfer_len > TxPctSize)
 8003c06:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c08:	699a      	ldr	r2, [r3, #24]
 8003c0a:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8003c0c:	429a      	cmp	r2, r3
 8003c0e:	d906      	bls.n	8003c1e <PCD_EP_ISR_Handler+0x624>
            {
              ep->xfer_len -= TxPctSize;
 8003c10:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c12:	699a      	ldr	r2, [r3, #24]
 8003c14:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8003c16:	1ad2      	subs	r2, r2, r3
 8003c18:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c1a:	619a      	str	r2, [r3, #24]
 8003c1c:	e002      	b.n	8003c24 <PCD_EP_ISR_Handler+0x62a>
            }
            else
            {
              ep->xfer_len = 0U;
 8003c1e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c20:	2200      	movs	r2, #0
 8003c22:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8003c24:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c26:	699b      	ldr	r3, [r3, #24]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d106      	bne.n	8003c3a <PCD_EP_ISR_Handler+0x640>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003c2c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c2e:	781b      	ldrb	r3, [r3, #0]
 8003c30:	4619      	mov	r1, r3
 8003c32:	6878      	ldr	r0, [r7, #4]
 8003c34:	f007 fea1 	bl	800b97a <HAL_PCD_DataInStageCallback>
 8003c38:	e018      	b.n	8003c6c <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8003c3a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c3c:	695a      	ldr	r2, [r3, #20]
 8003c3e:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8003c40:	441a      	add	r2, r3
 8003c42:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c44:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8003c46:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c48:	69da      	ldr	r2, [r3, #28]
 8003c4a:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8003c4c:	441a      	add	r2, r3
 8003c4e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c50:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003c58:	4618      	mov	r0, r3
 8003c5a:	f005 f852 	bl	8008d02 <USB_EPStartXfer>
 8003c5e:	e005      	b.n	8003c6c <PCD_EP_ISR_Handler+0x672>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003c60:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003c62:	461a      	mov	r2, r3
 8003c64:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003c66:	6878      	ldr	r0, [r7, #4]
 8003c68:	f000 f917 	bl	8003e9a <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003c74:	b29b      	uxth	r3, r3
 8003c76:	b21b      	sxth	r3, r3
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	f6ff acc3 	blt.w	8003604 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003c7e:	2300      	movs	r3, #0
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	3748      	adds	r7, #72	@ 0x48
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bd80      	pop	{r7, pc}

08003c88 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b088      	sub	sp, #32
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	60f8      	str	r0, [r7, #12]
 8003c90:	60b9      	str	r1, [r7, #8]
 8003c92:	4613      	mov	r3, r2
 8003c94:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003c96:	88fb      	ldrh	r3, [r7, #6]
 8003c98:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d07c      	beq.n	8003d9a <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003ca8:	b29b      	uxth	r3, r3
 8003caa:	461a      	mov	r2, r3
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	781b      	ldrb	r3, [r3, #0]
 8003cb0:	00db      	lsls	r3, r3, #3
 8003cb2:	4413      	add	r3, r2
 8003cb4:	68fa      	ldr	r2, [r7, #12]
 8003cb6:	6812      	ldr	r2, [r2, #0]
 8003cb8:	4413      	add	r3, r2
 8003cba:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003cbe:	881b      	ldrh	r3, [r3, #0]
 8003cc0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003cc4:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	699a      	ldr	r2, [r3, #24]
 8003cca:	8b7b      	ldrh	r3, [r7, #26]
 8003ccc:	429a      	cmp	r2, r3
 8003cce:	d306      	bcc.n	8003cde <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	699a      	ldr	r2, [r3, #24]
 8003cd4:	8b7b      	ldrh	r3, [r7, #26]
 8003cd6:	1ad2      	subs	r2, r2, r3
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	619a      	str	r2, [r3, #24]
 8003cdc:	e002      	b.n	8003ce4 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	699b      	ldr	r3, [r3, #24]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d123      	bne.n	8003d34 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* Set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	461a      	mov	r2, r3
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	781b      	ldrb	r3, [r3, #0]
 8003cf6:	009b      	lsls	r3, r3, #2
 8003cf8:	4413      	add	r3, r2
 8003cfa:	881b      	ldrh	r3, [r3, #0]
 8003cfc:	b29b      	uxth	r3, r3
 8003cfe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003d02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d06:	833b      	strh	r3, [r7, #24]
 8003d08:	8b3b      	ldrh	r3, [r7, #24]
 8003d0a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003d0e:	833b      	strh	r3, [r7, #24]
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	461a      	mov	r2, r3
 8003d16:	68bb      	ldr	r3, [r7, #8]
 8003d18:	781b      	ldrb	r3, [r3, #0]
 8003d1a:	009b      	lsls	r3, r3, #2
 8003d1c:	441a      	add	r2, r3
 8003d1e:	8b3b      	ldrh	r3, [r7, #24]
 8003d20:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003d24:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003d28:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003d2c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003d30:	b29b      	uxth	r3, r3
 8003d32:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003d34:	88fb      	ldrh	r3, [r7, #6]
 8003d36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d01f      	beq.n	8003d7e <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	461a      	mov	r2, r3
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	781b      	ldrb	r3, [r3, #0]
 8003d48:	009b      	lsls	r3, r3, #2
 8003d4a:	4413      	add	r3, r2
 8003d4c:	881b      	ldrh	r3, [r3, #0]
 8003d4e:	b29b      	uxth	r3, r3
 8003d50:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003d54:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d58:	82fb      	strh	r3, [r7, #22]
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	461a      	mov	r2, r3
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	781b      	ldrb	r3, [r3, #0]
 8003d64:	009b      	lsls	r3, r3, #2
 8003d66:	441a      	add	r2, r3
 8003d68:	8afb      	ldrh	r3, [r7, #22]
 8003d6a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003d6e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003d72:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003d76:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003d7a:	b29b      	uxth	r3, r3
 8003d7c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003d7e:	8b7b      	ldrh	r3, [r7, #26]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	f000 8085 	beq.w	8003e90 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	6818      	ldr	r0, [r3, #0]
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	6959      	ldr	r1, [r3, #20]
 8003d8e:	68bb      	ldr	r3, [r7, #8]
 8003d90:	891a      	ldrh	r2, [r3, #8]
 8003d92:	8b7b      	ldrh	r3, [r7, #26]
 8003d94:	f005 fedb 	bl	8009b4e <USB_ReadPMA>
 8003d98:	e07a      	b.n	8003e90 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003da2:	b29b      	uxth	r3, r3
 8003da4:	461a      	mov	r2, r3
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	781b      	ldrb	r3, [r3, #0]
 8003daa:	00db      	lsls	r3, r3, #3
 8003dac:	4413      	add	r3, r2
 8003dae:	68fa      	ldr	r2, [r7, #12]
 8003db0:	6812      	ldr	r2, [r2, #0]
 8003db2:	4413      	add	r3, r2
 8003db4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003db8:	881b      	ldrh	r3, [r3, #0]
 8003dba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003dbe:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	699a      	ldr	r2, [r3, #24]
 8003dc4:	8b7b      	ldrh	r3, [r7, #26]
 8003dc6:	429a      	cmp	r2, r3
 8003dc8:	d306      	bcc.n	8003dd8 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8003dca:	68bb      	ldr	r3, [r7, #8]
 8003dcc:	699a      	ldr	r2, [r3, #24]
 8003dce:	8b7b      	ldrh	r3, [r7, #26]
 8003dd0:	1ad2      	subs	r2, r2, r3
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	619a      	str	r2, [r3, #24]
 8003dd6:	e002      	b.n	8003dde <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003dde:	68bb      	ldr	r3, [r7, #8]
 8003de0:	699b      	ldr	r3, [r3, #24]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d123      	bne.n	8003e2e <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* Set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	461a      	mov	r2, r3
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	781b      	ldrb	r3, [r3, #0]
 8003df0:	009b      	lsls	r3, r3, #2
 8003df2:	4413      	add	r3, r2
 8003df4:	881b      	ldrh	r3, [r3, #0]
 8003df6:	b29b      	uxth	r3, r3
 8003df8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003dfc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e00:	83fb      	strh	r3, [r7, #30]
 8003e02:	8bfb      	ldrh	r3, [r7, #30]
 8003e04:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003e08:	83fb      	strh	r3, [r7, #30]
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	461a      	mov	r2, r3
 8003e10:	68bb      	ldr	r3, [r7, #8]
 8003e12:	781b      	ldrb	r3, [r3, #0]
 8003e14:	009b      	lsls	r3, r3, #2
 8003e16:	441a      	add	r2, r3
 8003e18:	8bfb      	ldrh	r3, [r7, #30]
 8003e1a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003e1e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003e22:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003e26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003e2a:	b29b      	uxth	r3, r3
 8003e2c:	8013      	strh	r3, [r2, #0]
    }

    /* Need to FreeUser Buffer */
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003e2e:	88fb      	ldrh	r3, [r7, #6]
 8003e30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d11f      	bne.n	8003e78 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	461a      	mov	r2, r3
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	781b      	ldrb	r3, [r3, #0]
 8003e42:	009b      	lsls	r3, r3, #2
 8003e44:	4413      	add	r3, r2
 8003e46:	881b      	ldrh	r3, [r3, #0]
 8003e48:	b29b      	uxth	r3, r3
 8003e4a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003e4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e52:	83bb      	strh	r3, [r7, #28]
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	461a      	mov	r2, r3
 8003e5a:	68bb      	ldr	r3, [r7, #8]
 8003e5c:	781b      	ldrb	r3, [r3, #0]
 8003e5e:	009b      	lsls	r3, r3, #2
 8003e60:	441a      	add	r2, r3
 8003e62:	8bbb      	ldrh	r3, [r7, #28]
 8003e64:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003e68:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003e6c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003e70:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003e74:	b29b      	uxth	r3, r3
 8003e76:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003e78:	8b7b      	ldrh	r3, [r7, #26]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d008      	beq.n	8003e90 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	6818      	ldr	r0, [r3, #0]
 8003e82:	68bb      	ldr	r3, [r7, #8]
 8003e84:	6959      	ldr	r1, [r3, #20]
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	895a      	ldrh	r2, [r3, #10]
 8003e8a:	8b7b      	ldrh	r3, [r7, #26]
 8003e8c:	f005 fe5f 	bl	8009b4e <USB_ReadPMA>
    }
  }

  return count;
 8003e90:	8b7b      	ldrh	r3, [r7, #26]
}
 8003e92:	4618      	mov	r0, r3
 8003e94:	3720      	adds	r7, #32
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}

08003e9a <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003e9a:	b580      	push	{r7, lr}
 8003e9c:	b0a6      	sub	sp, #152	@ 0x98
 8003e9e:	af00      	add	r7, sp, #0
 8003ea0:	60f8      	str	r0, [r7, #12]
 8003ea2:	60b9      	str	r1, [r7, #8]
 8003ea4:	4613      	mov	r3, r2
 8003ea6:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003ea8:	88fb      	ldrh	r3, [r7, #6]
 8003eaa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	f000 81f7 	beq.w	80042a2 <HAL_PCD_EP_DB_Transmit+0x408>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003ebc:	b29b      	uxth	r3, r3
 8003ebe:	461a      	mov	r2, r3
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	781b      	ldrb	r3, [r3, #0]
 8003ec4:	00db      	lsls	r3, r3, #3
 8003ec6:	4413      	add	r3, r2
 8003ec8:	68fa      	ldr	r2, [r7, #12]
 8003eca:	6812      	ldr	r2, [r2, #0]
 8003ecc:	4413      	add	r3, r2
 8003ece:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003ed2:	881b      	ldrh	r3, [r3, #0]
 8003ed4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ed8:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len > TxPctSize)
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	699a      	ldr	r2, [r3, #24]
 8003ee0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8003ee4:	429a      	cmp	r2, r3
 8003ee6:	d907      	bls.n	8003ef8 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	699a      	ldr	r2, [r3, #24]
 8003eec:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8003ef0:	1ad2      	subs	r2, r2, r3
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	619a      	str	r2, [r3, #24]
 8003ef6:	e002      	b.n	8003efe <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	2200      	movs	r2, #0
 8003efc:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003efe:	68bb      	ldr	r3, [r7, #8]
 8003f00:	699b      	ldr	r3, [r3, #24]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	f040 80e1 	bne.w	80040ca <HAL_PCD_EP_DB_Transmit+0x230>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	785b      	ldrb	r3, [r3, #1]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d126      	bne.n	8003f5e <HAL_PCD_EP_DB_Transmit+0xc4>
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	633b      	str	r3, [r7, #48]	@ 0x30
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003f1e:	b29b      	uxth	r3, r3
 8003f20:	461a      	mov	r2, r3
 8003f22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f24:	4413      	add	r3, r2
 8003f26:	633b      	str	r3, [r7, #48]	@ 0x30
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	781b      	ldrb	r3, [r3, #0]
 8003f2c:	00da      	lsls	r2, r3, #3
 8003f2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f30:	4413      	add	r3, r2
 8003f32:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003f36:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003f38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f3a:	881b      	ldrh	r3, [r3, #0]
 8003f3c:	b29b      	uxth	r3, r3
 8003f3e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f42:	b29a      	uxth	r2, r3
 8003f44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f46:	801a      	strh	r2, [r3, #0]
 8003f48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f4a:	881b      	ldrh	r3, [r3, #0]
 8003f4c:	b29b      	uxth	r3, r3
 8003f4e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f52:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f56:	b29a      	uxth	r2, r3
 8003f58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f5a:	801a      	strh	r2, [r3, #0]
 8003f5c:	e01a      	b.n	8003f94 <HAL_PCD_EP_DB_Transmit+0xfa>
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	785b      	ldrb	r3, [r3, #1]
 8003f62:	2b01      	cmp	r3, #1
 8003f64:	d116      	bne.n	8003f94 <HAL_PCD_EP_DB_Transmit+0xfa>
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003f74:	b29b      	uxth	r3, r3
 8003f76:	461a      	mov	r2, r3
 8003f78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f7a:	4413      	add	r3, r2
 8003f7c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	781b      	ldrb	r3, [r3, #0]
 8003f82:	00da      	lsls	r2, r3, #3
 8003f84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f86:	4413      	add	r3, r2
 8003f88:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003f8c:	637b      	str	r3, [r7, #52]	@ 0x34
 8003f8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f90:	2200      	movs	r2, #0
 8003f92:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	785b      	ldrb	r3, [r3, #1]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d126      	bne.n	8003ff0 <HAL_PCD_EP_DB_Transmit+0x156>
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	623b      	str	r3, [r7, #32]
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003fb0:	b29b      	uxth	r3, r3
 8003fb2:	461a      	mov	r2, r3
 8003fb4:	6a3b      	ldr	r3, [r7, #32]
 8003fb6:	4413      	add	r3, r2
 8003fb8:	623b      	str	r3, [r7, #32]
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	781b      	ldrb	r3, [r3, #0]
 8003fbe:	00da      	lsls	r2, r3, #3
 8003fc0:	6a3b      	ldr	r3, [r7, #32]
 8003fc2:	4413      	add	r3, r2
 8003fc4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003fc8:	61fb      	str	r3, [r7, #28]
 8003fca:	69fb      	ldr	r3, [r7, #28]
 8003fcc:	881b      	ldrh	r3, [r3, #0]
 8003fce:	b29b      	uxth	r3, r3
 8003fd0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003fd4:	b29a      	uxth	r2, r3
 8003fd6:	69fb      	ldr	r3, [r7, #28]
 8003fd8:	801a      	strh	r2, [r3, #0]
 8003fda:	69fb      	ldr	r3, [r7, #28]
 8003fdc:	881b      	ldrh	r3, [r3, #0]
 8003fde:	b29b      	uxth	r3, r3
 8003fe0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003fe4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003fe8:	b29a      	uxth	r2, r3
 8003fea:	69fb      	ldr	r3, [r7, #28]
 8003fec:	801a      	strh	r2, [r3, #0]
 8003fee:	e017      	b.n	8004020 <HAL_PCD_EP_DB_Transmit+0x186>
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	785b      	ldrb	r3, [r3, #1]
 8003ff4:	2b01      	cmp	r3, #1
 8003ff6:	d113      	bne.n	8004020 <HAL_PCD_EP_DB_Transmit+0x186>
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004000:	b29b      	uxth	r3, r3
 8004002:	461a      	mov	r2, r3
 8004004:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004006:	4413      	add	r3, r2
 8004008:	62bb      	str	r3, [r7, #40]	@ 0x28
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	781b      	ldrb	r3, [r3, #0]
 800400e:	00da      	lsls	r2, r3, #3
 8004010:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004012:	4413      	add	r3, r2
 8004014:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004018:	627b      	str	r3, [r7, #36]	@ 0x24
 800401a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800401c:	2200      	movs	r2, #0
 800401e:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	78db      	ldrb	r3, [r3, #3]
 8004024:	2b02      	cmp	r3, #2
 8004026:	d123      	bne.n	8004070 <HAL_PCD_EP_DB_Transmit+0x1d6>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	461a      	mov	r2, r3
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	781b      	ldrb	r3, [r3, #0]
 8004032:	009b      	lsls	r3, r3, #2
 8004034:	4413      	add	r3, r2
 8004036:	881b      	ldrh	r3, [r3, #0]
 8004038:	b29b      	uxth	r3, r3
 800403a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800403e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004042:	837b      	strh	r3, [r7, #26]
 8004044:	8b7b      	ldrh	r3, [r7, #26]
 8004046:	f083 0320 	eor.w	r3, r3, #32
 800404a:	837b      	strh	r3, [r7, #26]
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	461a      	mov	r2, r3
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	781b      	ldrb	r3, [r3, #0]
 8004056:	009b      	lsls	r3, r3, #2
 8004058:	441a      	add	r2, r3
 800405a:	8b7b      	ldrh	r3, [r7, #26]
 800405c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004060:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004064:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004068:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800406c:	b29b      	uxth	r3, r3
 800406e:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	781b      	ldrb	r3, [r3, #0]
 8004074:	4619      	mov	r1, r3
 8004076:	68f8      	ldr	r0, [r7, #12]
 8004078:	f007 fc7f 	bl	800b97a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800407c:	88fb      	ldrh	r3, [r7, #6]
 800407e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004082:	2b00      	cmp	r3, #0
 8004084:	d01f      	beq.n	80040c6 <HAL_PCD_EP_DB_Transmit+0x22c>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	461a      	mov	r2, r3
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	781b      	ldrb	r3, [r3, #0]
 8004090:	009b      	lsls	r3, r3, #2
 8004092:	4413      	add	r3, r2
 8004094:	881b      	ldrh	r3, [r3, #0]
 8004096:	b29b      	uxth	r3, r3
 8004098:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800409c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80040a0:	833b      	strh	r3, [r7, #24]
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	461a      	mov	r2, r3
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	781b      	ldrb	r3, [r3, #0]
 80040ac:	009b      	lsls	r3, r3, #2
 80040ae:	441a      	add	r2, r3
 80040b0:	8b3b      	ldrh	r3, [r7, #24]
 80040b2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80040b6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80040ba:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80040be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80040c2:	b29b      	uxth	r3, r3
 80040c4:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 80040c6:	2300      	movs	r3, #0
 80040c8:	e31f      	b.n	800470a <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80040ca:	88fb      	ldrh	r3, [r7, #6]
 80040cc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d021      	beq.n	8004118 <HAL_PCD_EP_DB_Transmit+0x27e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	461a      	mov	r2, r3
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	781b      	ldrb	r3, [r3, #0]
 80040de:	009b      	lsls	r3, r3, #2
 80040e0:	4413      	add	r3, r2
 80040e2:	881b      	ldrh	r3, [r3, #0]
 80040e4:	b29b      	uxth	r3, r3
 80040e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80040ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80040ee:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	461a      	mov	r2, r3
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	781b      	ldrb	r3, [r3, #0]
 80040fc:	009b      	lsls	r3, r3, #2
 80040fe:	441a      	add	r2, r3
 8004100:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8004104:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004108:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800410c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004110:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004114:	b29b      	uxth	r3, r3
 8004116:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800411e:	2b01      	cmp	r3, #1
 8004120:	f040 82ca 	bne.w	80046b8 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	695a      	ldr	r2, [r3, #20]
 8004128:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800412c:	441a      	add	r2, r3
 800412e:	68bb      	ldr	r3, [r7, #8]
 8004130:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	69da      	ldr	r2, [r3, #28]
 8004136:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800413a:	441a      	add	r2, r3
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004140:	68bb      	ldr	r3, [r7, #8]
 8004142:	6a1a      	ldr	r2, [r3, #32]
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	691b      	ldr	r3, [r3, #16]
 8004148:	429a      	cmp	r2, r3
 800414a:	d309      	bcc.n	8004160 <HAL_PCD_EP_DB_Transmit+0x2c6>
        {
          len = ep->maxpacket;
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	691b      	ldr	r3, [r3, #16]
 8004150:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	6a1a      	ldr	r2, [r3, #32]
 8004156:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004158:	1ad2      	subs	r2, r2, r3
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	621a      	str	r2, [r3, #32]
 800415e:	e015      	b.n	800418c <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else if (ep->xfer_len_db == 0U)
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	6a1b      	ldr	r3, [r3, #32]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d107      	bne.n	8004178 <HAL_PCD_EP_DB_Transmit+0x2de>
        {
          len = TxPctSize;
 8004168:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800416c:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	2200      	movs	r2, #0
 8004172:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8004176:	e009      	b.n	800418c <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	2200      	movs	r2, #0
 800417c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	6a1b      	ldr	r3, [r3, #32]
 8004184:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	2200      	movs	r2, #0
 800418a:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer0 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	785b      	ldrb	r3, [r3, #1]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d15f      	bne.n	8004254 <HAL_PCD_EP_DB_Transmit+0x3ba>
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	643b      	str	r3, [r7, #64]	@ 0x40
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80041a2:	b29b      	uxth	r3, r3
 80041a4:	461a      	mov	r2, r3
 80041a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80041a8:	4413      	add	r3, r2
 80041aa:	643b      	str	r3, [r7, #64]	@ 0x40
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	781b      	ldrb	r3, [r3, #0]
 80041b0:	00da      	lsls	r2, r3, #3
 80041b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80041b4:	4413      	add	r3, r2
 80041b6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80041ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80041bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80041be:	881b      	ldrh	r3, [r3, #0]
 80041c0:	b29b      	uxth	r3, r3
 80041c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80041c6:	b29a      	uxth	r2, r3
 80041c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80041ca:	801a      	strh	r2, [r3, #0]
 80041cc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d10a      	bne.n	80041e8 <HAL_PCD_EP_DB_Transmit+0x34e>
 80041d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80041d4:	881b      	ldrh	r3, [r3, #0]
 80041d6:	b29b      	uxth	r3, r3
 80041d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80041dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80041e0:	b29a      	uxth	r2, r3
 80041e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80041e4:	801a      	strh	r2, [r3, #0]
 80041e6:	e051      	b.n	800428c <HAL_PCD_EP_DB_Transmit+0x3f2>
 80041e8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80041ea:	2b3e      	cmp	r3, #62	@ 0x3e
 80041ec:	d816      	bhi.n	800421c <HAL_PCD_EP_DB_Transmit+0x382>
 80041ee:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80041f0:	085b      	lsrs	r3, r3, #1
 80041f2:	653b      	str	r3, [r7, #80]	@ 0x50
 80041f4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80041f6:	f003 0301 	and.w	r3, r3, #1
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d002      	beq.n	8004204 <HAL_PCD_EP_DB_Transmit+0x36a>
 80041fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004200:	3301      	adds	r3, #1
 8004202:	653b      	str	r3, [r7, #80]	@ 0x50
 8004204:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004206:	881b      	ldrh	r3, [r3, #0]
 8004208:	b29a      	uxth	r2, r3
 800420a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800420c:	b29b      	uxth	r3, r3
 800420e:	029b      	lsls	r3, r3, #10
 8004210:	b29b      	uxth	r3, r3
 8004212:	4313      	orrs	r3, r2
 8004214:	b29a      	uxth	r2, r3
 8004216:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004218:	801a      	strh	r2, [r3, #0]
 800421a:	e037      	b.n	800428c <HAL_PCD_EP_DB_Transmit+0x3f2>
 800421c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800421e:	095b      	lsrs	r3, r3, #5
 8004220:	653b      	str	r3, [r7, #80]	@ 0x50
 8004222:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004224:	f003 031f 	and.w	r3, r3, #31
 8004228:	2b00      	cmp	r3, #0
 800422a:	d102      	bne.n	8004232 <HAL_PCD_EP_DB_Transmit+0x398>
 800422c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800422e:	3b01      	subs	r3, #1
 8004230:	653b      	str	r3, [r7, #80]	@ 0x50
 8004232:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004234:	881b      	ldrh	r3, [r3, #0]
 8004236:	b29a      	uxth	r2, r3
 8004238:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800423a:	b29b      	uxth	r3, r3
 800423c:	029b      	lsls	r3, r3, #10
 800423e:	b29b      	uxth	r3, r3
 8004240:	4313      	orrs	r3, r2
 8004242:	b29b      	uxth	r3, r3
 8004244:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004248:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800424c:	b29a      	uxth	r2, r3
 800424e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004250:	801a      	strh	r2, [r3, #0]
 8004252:	e01b      	b.n	800428c <HAL_PCD_EP_DB_Transmit+0x3f2>
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	785b      	ldrb	r3, [r3, #1]
 8004258:	2b01      	cmp	r3, #1
 800425a:	d117      	bne.n	800428c <HAL_PCD_EP_DB_Transmit+0x3f2>
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800426a:	b29b      	uxth	r3, r3
 800426c:	461a      	mov	r2, r3
 800426e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004270:	4413      	add	r3, r2
 8004272:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	781b      	ldrb	r3, [r3, #0]
 8004278:	00da      	lsls	r2, r3, #3
 800427a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800427c:	4413      	add	r3, r2
 800427e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004282:	647b      	str	r3, [r7, #68]	@ 0x44
 8004284:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004286:	b29a      	uxth	r2, r3
 8004288:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800428a:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	6818      	ldr	r0, [r3, #0]
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	6959      	ldr	r1, [r3, #20]
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	891a      	ldrh	r2, [r3, #8]
 8004298:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800429a:	b29b      	uxth	r3, r3
 800429c:	f005 fc15 	bl	8009aca <USB_WritePMA>
 80042a0:	e20a      	b.n	80046b8 <HAL_PCD_EP_DB_Transmit+0x81e>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80042aa:	b29b      	uxth	r3, r3
 80042ac:	461a      	mov	r2, r3
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	781b      	ldrb	r3, [r3, #0]
 80042b2:	00db      	lsls	r3, r3, #3
 80042b4:	4413      	add	r3, r2
 80042b6:	68fa      	ldr	r2, [r7, #12]
 80042b8:	6812      	ldr	r2, [r2, #0]
 80042ba:	4413      	add	r3, r2
 80042bc:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80042c0:	881b      	ldrh	r3, [r3, #0]
 80042c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80042c6:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len >= TxPctSize)
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	699a      	ldr	r2, [r3, #24]
 80042ce:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80042d2:	429a      	cmp	r2, r3
 80042d4:	d307      	bcc.n	80042e6 <HAL_PCD_EP_DB_Transmit+0x44c>
    {
      ep->xfer_len -= TxPctSize;
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	699a      	ldr	r2, [r3, #24]
 80042da:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80042de:	1ad2      	subs	r2, r2, r3
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	619a      	str	r2, [r3, #24]
 80042e4:	e002      	b.n	80042ec <HAL_PCD_EP_DB_Transmit+0x452>
    }
    else
    {
      ep->xfer_len = 0U;
 80042e6:	68bb      	ldr	r3, [r7, #8]
 80042e8:	2200      	movs	r2, #0
 80042ea:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	699b      	ldr	r3, [r3, #24]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	f040 80f6 	bne.w	80044e2 <HAL_PCD_EP_DB_Transmit+0x648>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	785b      	ldrb	r3, [r3, #1]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d126      	bne.n	800434c <HAL_PCD_EP_DB_Transmit+0x4b2>
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	677b      	str	r3, [r7, #116]	@ 0x74
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800430c:	b29b      	uxth	r3, r3
 800430e:	461a      	mov	r2, r3
 8004310:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004312:	4413      	add	r3, r2
 8004314:	677b      	str	r3, [r7, #116]	@ 0x74
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	781b      	ldrb	r3, [r3, #0]
 800431a:	00da      	lsls	r2, r3, #3
 800431c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800431e:	4413      	add	r3, r2
 8004320:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004324:	673b      	str	r3, [r7, #112]	@ 0x70
 8004326:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004328:	881b      	ldrh	r3, [r3, #0]
 800432a:	b29b      	uxth	r3, r3
 800432c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004330:	b29a      	uxth	r2, r3
 8004332:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004334:	801a      	strh	r2, [r3, #0]
 8004336:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004338:	881b      	ldrh	r3, [r3, #0]
 800433a:	b29b      	uxth	r3, r3
 800433c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004340:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004344:	b29a      	uxth	r2, r3
 8004346:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004348:	801a      	strh	r2, [r3, #0]
 800434a:	e01a      	b.n	8004382 <HAL_PCD_EP_DB_Transmit+0x4e8>
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	785b      	ldrb	r3, [r3, #1]
 8004350:	2b01      	cmp	r3, #1
 8004352:	d116      	bne.n	8004382 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004362:	b29b      	uxth	r3, r3
 8004364:	461a      	mov	r2, r3
 8004366:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004368:	4413      	add	r3, r2
 800436a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	781b      	ldrb	r3, [r3, #0]
 8004370:	00da      	lsls	r2, r3, #3
 8004372:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004374:	4413      	add	r3, r2
 8004376:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800437a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800437c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800437e:	2200      	movs	r2, #0
 8004380:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	785b      	ldrb	r3, [r3, #1]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d12f      	bne.n	80043f2 <HAL_PCD_EP_DB_Transmit+0x558>
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80043a2:	b29b      	uxth	r3, r3
 80043a4:	461a      	mov	r2, r3
 80043a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80043aa:	4413      	add	r3, r2
 80043ac:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	781b      	ldrb	r3, [r3, #0]
 80043b4:	00da      	lsls	r2, r3, #3
 80043b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80043ba:	4413      	add	r3, r2
 80043bc:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80043c0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80043c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80043c8:	881b      	ldrh	r3, [r3, #0]
 80043ca:	b29b      	uxth	r3, r3
 80043cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80043d0:	b29a      	uxth	r2, r3
 80043d2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80043d6:	801a      	strh	r2, [r3, #0]
 80043d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80043dc:	881b      	ldrh	r3, [r3, #0]
 80043de:	b29b      	uxth	r3, r3
 80043e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80043e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80043e8:	b29a      	uxth	r2, r3
 80043ea:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80043ee:	801a      	strh	r2, [r3, #0]
 80043f0:	e01c      	b.n	800442c <HAL_PCD_EP_DB_Transmit+0x592>
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	785b      	ldrb	r3, [r3, #1]
 80043f6:	2b01      	cmp	r3, #1
 80043f8:	d118      	bne.n	800442c <HAL_PCD_EP_DB_Transmit+0x592>
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004402:	b29b      	uxth	r3, r3
 8004404:	461a      	mov	r2, r3
 8004406:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800440a:	4413      	add	r3, r2
 800440c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	781b      	ldrb	r3, [r3, #0]
 8004414:	00da      	lsls	r2, r3, #3
 8004416:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800441a:	4413      	add	r3, r2
 800441c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004420:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004424:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004428:	2200      	movs	r2, #0
 800442a:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	78db      	ldrb	r3, [r3, #3]
 8004430:	2b02      	cmp	r3, #2
 8004432:	d127      	bne.n	8004484 <HAL_PCD_EP_DB_Transmit+0x5ea>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	461a      	mov	r2, r3
 800443a:	68bb      	ldr	r3, [r7, #8]
 800443c:	781b      	ldrb	r3, [r3, #0]
 800443e:	009b      	lsls	r3, r3, #2
 8004440:	4413      	add	r3, r2
 8004442:	881b      	ldrh	r3, [r3, #0]
 8004444:	b29b      	uxth	r3, r3
 8004446:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800444a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800444e:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8004452:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8004456:	f083 0320 	eor.w	r3, r3, #32
 800445a:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	461a      	mov	r2, r3
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	781b      	ldrb	r3, [r3, #0]
 8004468:	009b      	lsls	r3, r3, #2
 800446a:	441a      	add	r2, r3
 800446c:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8004470:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004474:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004478:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800447c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004480:	b29b      	uxth	r3, r3
 8004482:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	781b      	ldrb	r3, [r3, #0]
 8004488:	4619      	mov	r1, r3
 800448a:	68f8      	ldr	r0, [r7, #12]
 800448c:	f007 fa75 	bl	800b97a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004490:	88fb      	ldrh	r3, [r7, #6]
 8004492:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004496:	2b00      	cmp	r3, #0
 8004498:	d121      	bne.n	80044de <HAL_PCD_EP_DB_Transmit+0x644>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	461a      	mov	r2, r3
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	781b      	ldrb	r3, [r3, #0]
 80044a4:	009b      	lsls	r3, r3, #2
 80044a6:	4413      	add	r3, r2
 80044a8:	881b      	ldrh	r3, [r3, #0]
 80044aa:	b29b      	uxth	r3, r3
 80044ac:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80044b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044b4:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	461a      	mov	r2, r3
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	781b      	ldrb	r3, [r3, #0]
 80044c2:	009b      	lsls	r3, r3, #2
 80044c4:	441a      	add	r2, r3
 80044c6:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 80044ca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80044ce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80044d2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80044d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80044da:	b29b      	uxth	r3, r3
 80044dc:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 80044de:	2300      	movs	r3, #0
 80044e0:	e113      	b.n	800470a <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80044e2:	88fb      	ldrh	r3, [r7, #6]
 80044e4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d121      	bne.n	8004530 <HAL_PCD_EP_DB_Transmit+0x696>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	461a      	mov	r2, r3
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	781b      	ldrb	r3, [r3, #0]
 80044f6:	009b      	lsls	r3, r3, #2
 80044f8:	4413      	add	r3, r2
 80044fa:	881b      	ldrh	r3, [r3, #0]
 80044fc:	b29b      	uxth	r3, r3
 80044fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004502:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004506:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	461a      	mov	r2, r3
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	781b      	ldrb	r3, [r3, #0]
 8004514:	009b      	lsls	r3, r3, #2
 8004516:	441a      	add	r2, r3
 8004518:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800451c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004520:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004524:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004528:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800452c:	b29b      	uxth	r3, r3
 800452e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004536:	2b01      	cmp	r3, #1
 8004538:	f040 80be 	bne.w	80046b8 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	695a      	ldr	r2, [r3, #20]
 8004540:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8004544:	441a      	add	r2, r3
 8004546:	68bb      	ldr	r3, [r7, #8]
 8004548:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	69da      	ldr	r2, [r3, #28]
 800454e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8004552:	441a      	add	r2, r3
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	6a1a      	ldr	r2, [r3, #32]
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	691b      	ldr	r3, [r3, #16]
 8004560:	429a      	cmp	r2, r3
 8004562:	d309      	bcc.n	8004578 <HAL_PCD_EP_DB_Transmit+0x6de>
        {
          len = ep->maxpacket;
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	691b      	ldr	r3, [r3, #16]
 8004568:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	6a1a      	ldr	r2, [r3, #32]
 800456e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004570:	1ad2      	subs	r2, r2, r3
 8004572:	68bb      	ldr	r3, [r7, #8]
 8004574:	621a      	str	r2, [r3, #32]
 8004576:	e015      	b.n	80045a4 <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else if (ep->xfer_len_db == 0U)
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	6a1b      	ldr	r3, [r3, #32]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d107      	bne.n	8004590 <HAL_PCD_EP_DB_Transmit+0x6f6>
        {
          len = TxPctSize;
 8004580:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8004584:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	2200      	movs	r2, #0
 800458a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800458e:	e009      	b.n	80045a4 <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else
        {
          len = ep->xfer_len_db;
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	6a1b      	ldr	r3, [r3, #32]
 8004594:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 8004596:	68bb      	ldr	r3, [r7, #8]
 8004598:	2200      	movs	r2, #0
 800459a:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	2200      	movs	r2, #0
 80045a0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	785b      	ldrb	r3, [r3, #1]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d15f      	bne.n	8004672 <HAL_PCD_EP_DB_Transmit+0x7d8>
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80045c0:	b29b      	uxth	r3, r3
 80045c2:	461a      	mov	r2, r3
 80045c4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80045c6:	4413      	add	r3, r2
 80045c8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	781b      	ldrb	r3, [r3, #0]
 80045ce:	00da      	lsls	r2, r3, #3
 80045d0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80045d2:	4413      	add	r3, r2
 80045d4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80045d8:	667b      	str	r3, [r7, #100]	@ 0x64
 80045da:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80045dc:	881b      	ldrh	r3, [r3, #0]
 80045de:	b29b      	uxth	r3, r3
 80045e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80045e4:	b29a      	uxth	r2, r3
 80045e6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80045e8:	801a      	strh	r2, [r3, #0]
 80045ea:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d10a      	bne.n	8004606 <HAL_PCD_EP_DB_Transmit+0x76c>
 80045f0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80045f2:	881b      	ldrh	r3, [r3, #0]
 80045f4:	b29b      	uxth	r3, r3
 80045f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80045fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80045fe:	b29a      	uxth	r2, r3
 8004600:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004602:	801a      	strh	r2, [r3, #0]
 8004604:	e04e      	b.n	80046a4 <HAL_PCD_EP_DB_Transmit+0x80a>
 8004606:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004608:	2b3e      	cmp	r3, #62	@ 0x3e
 800460a:	d816      	bhi.n	800463a <HAL_PCD_EP_DB_Transmit+0x7a0>
 800460c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800460e:	085b      	lsrs	r3, r3, #1
 8004610:	663b      	str	r3, [r7, #96]	@ 0x60
 8004612:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004614:	f003 0301 	and.w	r3, r3, #1
 8004618:	2b00      	cmp	r3, #0
 800461a:	d002      	beq.n	8004622 <HAL_PCD_EP_DB_Transmit+0x788>
 800461c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800461e:	3301      	adds	r3, #1
 8004620:	663b      	str	r3, [r7, #96]	@ 0x60
 8004622:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004624:	881b      	ldrh	r3, [r3, #0]
 8004626:	b29a      	uxth	r2, r3
 8004628:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800462a:	b29b      	uxth	r3, r3
 800462c:	029b      	lsls	r3, r3, #10
 800462e:	b29b      	uxth	r3, r3
 8004630:	4313      	orrs	r3, r2
 8004632:	b29a      	uxth	r2, r3
 8004634:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004636:	801a      	strh	r2, [r3, #0]
 8004638:	e034      	b.n	80046a4 <HAL_PCD_EP_DB_Transmit+0x80a>
 800463a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800463c:	095b      	lsrs	r3, r3, #5
 800463e:	663b      	str	r3, [r7, #96]	@ 0x60
 8004640:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004642:	f003 031f 	and.w	r3, r3, #31
 8004646:	2b00      	cmp	r3, #0
 8004648:	d102      	bne.n	8004650 <HAL_PCD_EP_DB_Transmit+0x7b6>
 800464a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800464c:	3b01      	subs	r3, #1
 800464e:	663b      	str	r3, [r7, #96]	@ 0x60
 8004650:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004652:	881b      	ldrh	r3, [r3, #0]
 8004654:	b29a      	uxth	r2, r3
 8004656:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004658:	b29b      	uxth	r3, r3
 800465a:	029b      	lsls	r3, r3, #10
 800465c:	b29b      	uxth	r3, r3
 800465e:	4313      	orrs	r3, r2
 8004660:	b29b      	uxth	r3, r3
 8004662:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004666:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800466a:	b29a      	uxth	r2, r3
 800466c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800466e:	801a      	strh	r2, [r3, #0]
 8004670:	e018      	b.n	80046a4 <HAL_PCD_EP_DB_Transmit+0x80a>
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	785b      	ldrb	r3, [r3, #1]
 8004676:	2b01      	cmp	r3, #1
 8004678:	d114      	bne.n	80046a4 <HAL_PCD_EP_DB_Transmit+0x80a>
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004682:	b29b      	uxth	r3, r3
 8004684:	461a      	mov	r2, r3
 8004686:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004688:	4413      	add	r3, r2
 800468a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	781b      	ldrb	r3, [r3, #0]
 8004690:	00da      	lsls	r2, r3, #3
 8004692:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004694:	4413      	add	r3, r2
 8004696:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800469a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800469c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800469e:	b29a      	uxth	r2, r3
 80046a0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80046a2:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	6818      	ldr	r0, [r3, #0]
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	6959      	ldr	r1, [r3, #20]
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	895a      	ldrh	r2, [r3, #10]
 80046b0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80046b2:	b29b      	uxth	r3, r3
 80046b4:	f005 fa09 	bl	8009aca <USB_WritePMA>
      }
    }
  }

  /* Enable endpoint IN */
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	461a      	mov	r2, r3
 80046be:	68bb      	ldr	r3, [r7, #8]
 80046c0:	781b      	ldrb	r3, [r3, #0]
 80046c2:	009b      	lsls	r3, r3, #2
 80046c4:	4413      	add	r3, r2
 80046c6:	881b      	ldrh	r3, [r3, #0]
 80046c8:	b29b      	uxth	r3, r3
 80046ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80046ce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80046d2:	82fb      	strh	r3, [r7, #22]
 80046d4:	8afb      	ldrh	r3, [r7, #22]
 80046d6:	f083 0310 	eor.w	r3, r3, #16
 80046da:	82fb      	strh	r3, [r7, #22]
 80046dc:	8afb      	ldrh	r3, [r7, #22]
 80046de:	f083 0320 	eor.w	r3, r3, #32
 80046e2:	82fb      	strh	r3, [r7, #22]
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	461a      	mov	r2, r3
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	781b      	ldrb	r3, [r3, #0]
 80046ee:	009b      	lsls	r3, r3, #2
 80046f0:	441a      	add	r2, r3
 80046f2:	8afb      	ldrh	r3, [r7, #22]
 80046f4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80046f8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80046fc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004700:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004704:	b29b      	uxth	r3, r3
 8004706:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8004708:	2300      	movs	r3, #0
}
 800470a:	4618      	mov	r0, r3
 800470c:	3798      	adds	r7, #152	@ 0x98
 800470e:	46bd      	mov	sp, r7
 8004710:	bd80      	pop	{r7, pc}

08004712 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8004712:	b480      	push	{r7}
 8004714:	b087      	sub	sp, #28
 8004716:	af00      	add	r7, sp, #0
 8004718:	60f8      	str	r0, [r7, #12]
 800471a:	607b      	str	r3, [r7, #4]
 800471c:	460b      	mov	r3, r1
 800471e:	817b      	strh	r3, [r7, #10]
 8004720:	4613      	mov	r3, r2
 8004722:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004724:	897b      	ldrh	r3, [r7, #10]
 8004726:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800472a:	b29b      	uxth	r3, r3
 800472c:	2b00      	cmp	r3, #0
 800472e:	d00b      	beq.n	8004748 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004730:	897b      	ldrh	r3, [r7, #10]
 8004732:	f003 0207 	and.w	r2, r3, #7
 8004736:	4613      	mov	r3, r2
 8004738:	009b      	lsls	r3, r3, #2
 800473a:	4413      	add	r3, r2
 800473c:	00db      	lsls	r3, r3, #3
 800473e:	3310      	adds	r3, #16
 8004740:	68fa      	ldr	r2, [r7, #12]
 8004742:	4413      	add	r3, r2
 8004744:	617b      	str	r3, [r7, #20]
 8004746:	e009      	b.n	800475c <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004748:	897a      	ldrh	r2, [r7, #10]
 800474a:	4613      	mov	r3, r2
 800474c:	009b      	lsls	r3, r3, #2
 800474e:	4413      	add	r3, r2
 8004750:	00db      	lsls	r3, r3, #3
 8004752:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004756:	68fa      	ldr	r2, [r7, #12]
 8004758:	4413      	add	r3, r2
 800475a:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800475c:	893b      	ldrh	r3, [r7, #8]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d107      	bne.n	8004772 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004762:	697b      	ldr	r3, [r7, #20]
 8004764:	2200      	movs	r2, #0
 8004766:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	b29a      	uxth	r2, r3
 800476c:	697b      	ldr	r3, [r7, #20]
 800476e:	80da      	strh	r2, [r3, #6]
 8004770:	e00b      	b.n	800478a <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	2201      	movs	r2, #1
 8004776:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	b29a      	uxth	r2, r3
 800477c:	697b      	ldr	r3, [r7, #20]
 800477e:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	0c1b      	lsrs	r3, r3, #16
 8004784:	b29a      	uxth	r2, r3
 8004786:	697b      	ldr	r3, [r7, #20]
 8004788:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800478a:	2300      	movs	r3, #0
}
 800478c:	4618      	mov	r0, r3
 800478e:	371c      	adds	r7, #28
 8004790:	46bd      	mov	sp, r7
 8004792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004796:	4770      	bx	lr

08004798 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004798:	b480      	push	{r7}
 800479a:	b085      	sub	sp, #20
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2201      	movs	r2, #1
 80047aa:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2200      	movs	r2, #0
 80047b2:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80047bc:	b29b      	uxth	r3, r3
 80047be:	f043 0301 	orr.w	r3, r3, #1
 80047c2:	b29a      	uxth	r2, r3
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80047d0:	b29b      	uxth	r3, r3
 80047d2:	f043 0302 	orr.w	r3, r3, #2
 80047d6:	b29a      	uxth	r2, r3
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 80047de:	2300      	movs	r3, #0
}
 80047e0:	4618      	mov	r0, r3
 80047e2:	3714      	adds	r7, #20
 80047e4:	46bd      	mov	sp, r7
 80047e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ea:	4770      	bx	lr

080047ec <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80047ec:	b480      	push	{r7}
 80047ee:	b085      	sub	sp, #20
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d141      	bne.n	800487e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80047fa:	4b4b      	ldr	r3, [pc, #300]	@ (8004928 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004802:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004806:	d131      	bne.n	800486c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004808:	4b47      	ldr	r3, [pc, #284]	@ (8004928 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800480a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800480e:	4a46      	ldr	r2, [pc, #280]	@ (8004928 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004810:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004814:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004818:	4b43      	ldr	r3, [pc, #268]	@ (8004928 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004820:	4a41      	ldr	r2, [pc, #260]	@ (8004928 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004822:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004826:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004828:	4b40      	ldr	r3, [pc, #256]	@ (800492c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	2232      	movs	r2, #50	@ 0x32
 800482e:	fb02 f303 	mul.w	r3, r2, r3
 8004832:	4a3f      	ldr	r2, [pc, #252]	@ (8004930 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004834:	fba2 2303 	umull	r2, r3, r2, r3
 8004838:	0c9b      	lsrs	r3, r3, #18
 800483a:	3301      	adds	r3, #1
 800483c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800483e:	e002      	b.n	8004846 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	3b01      	subs	r3, #1
 8004844:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004846:	4b38      	ldr	r3, [pc, #224]	@ (8004928 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004848:	695b      	ldr	r3, [r3, #20]
 800484a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800484e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004852:	d102      	bne.n	800485a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d1f2      	bne.n	8004840 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800485a:	4b33      	ldr	r3, [pc, #204]	@ (8004928 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800485c:	695b      	ldr	r3, [r3, #20]
 800485e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004862:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004866:	d158      	bne.n	800491a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004868:	2303      	movs	r3, #3
 800486a:	e057      	b.n	800491c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800486c:	4b2e      	ldr	r3, [pc, #184]	@ (8004928 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800486e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004872:	4a2d      	ldr	r2, [pc, #180]	@ (8004928 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004874:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004878:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800487c:	e04d      	b.n	800491a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004884:	d141      	bne.n	800490a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004886:	4b28      	ldr	r3, [pc, #160]	@ (8004928 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800488e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004892:	d131      	bne.n	80048f8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004894:	4b24      	ldr	r3, [pc, #144]	@ (8004928 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004896:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800489a:	4a23      	ldr	r2, [pc, #140]	@ (8004928 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800489c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80048a0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80048a4:	4b20      	ldr	r3, [pc, #128]	@ (8004928 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80048ac:	4a1e      	ldr	r2, [pc, #120]	@ (8004928 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048ae:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80048b2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80048b4:	4b1d      	ldr	r3, [pc, #116]	@ (800492c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	2232      	movs	r2, #50	@ 0x32
 80048ba:	fb02 f303 	mul.w	r3, r2, r3
 80048be:	4a1c      	ldr	r2, [pc, #112]	@ (8004930 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80048c0:	fba2 2303 	umull	r2, r3, r2, r3
 80048c4:	0c9b      	lsrs	r3, r3, #18
 80048c6:	3301      	adds	r3, #1
 80048c8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80048ca:	e002      	b.n	80048d2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	3b01      	subs	r3, #1
 80048d0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80048d2:	4b15      	ldr	r3, [pc, #84]	@ (8004928 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048d4:	695b      	ldr	r3, [r3, #20]
 80048d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80048de:	d102      	bne.n	80048e6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d1f2      	bne.n	80048cc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80048e6:	4b10      	ldr	r3, [pc, #64]	@ (8004928 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048e8:	695b      	ldr	r3, [r3, #20]
 80048ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80048f2:	d112      	bne.n	800491a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80048f4:	2303      	movs	r3, #3
 80048f6:	e011      	b.n	800491c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80048f8:	4b0b      	ldr	r3, [pc, #44]	@ (8004928 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80048fe:	4a0a      	ldr	r2, [pc, #40]	@ (8004928 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004900:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004904:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004908:	e007      	b.n	800491a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800490a:	4b07      	ldr	r3, [pc, #28]	@ (8004928 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004912:	4a05      	ldr	r2, [pc, #20]	@ (8004928 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004914:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004918:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800491a:	2300      	movs	r3, #0
}
 800491c:	4618      	mov	r0, r3
 800491e:	3714      	adds	r7, #20
 8004920:	46bd      	mov	sp, r7
 8004922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004926:	4770      	bx	lr
 8004928:	40007000 	.word	0x40007000
 800492c:	20000094 	.word	0x20000094
 8004930:	431bde83 	.word	0x431bde83

08004934 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004934:	b480      	push	{r7}
 8004936:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004938:	4b05      	ldr	r3, [pc, #20]	@ (8004950 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800493a:	689b      	ldr	r3, [r3, #8]
 800493c:	4a04      	ldr	r2, [pc, #16]	@ (8004950 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800493e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004942:	6093      	str	r3, [r2, #8]
}
 8004944:	bf00      	nop
 8004946:	46bd      	mov	sp, r7
 8004948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494c:	4770      	bx	lr
 800494e:	bf00      	nop
 8004950:	40007000 	.word	0x40007000

08004954 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b088      	sub	sp, #32
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d101      	bne.n	8004966 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004962:	2301      	movs	r3, #1
 8004964:	e2fe      	b.n	8004f64 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f003 0301 	and.w	r3, r3, #1
 800496e:	2b00      	cmp	r3, #0
 8004970:	d075      	beq.n	8004a5e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004972:	4b97      	ldr	r3, [pc, #604]	@ (8004bd0 <HAL_RCC_OscConfig+0x27c>)
 8004974:	689b      	ldr	r3, [r3, #8]
 8004976:	f003 030c 	and.w	r3, r3, #12
 800497a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800497c:	4b94      	ldr	r3, [pc, #592]	@ (8004bd0 <HAL_RCC_OscConfig+0x27c>)
 800497e:	68db      	ldr	r3, [r3, #12]
 8004980:	f003 0303 	and.w	r3, r3, #3
 8004984:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004986:	69bb      	ldr	r3, [r7, #24]
 8004988:	2b0c      	cmp	r3, #12
 800498a:	d102      	bne.n	8004992 <HAL_RCC_OscConfig+0x3e>
 800498c:	697b      	ldr	r3, [r7, #20]
 800498e:	2b03      	cmp	r3, #3
 8004990:	d002      	beq.n	8004998 <HAL_RCC_OscConfig+0x44>
 8004992:	69bb      	ldr	r3, [r7, #24]
 8004994:	2b08      	cmp	r3, #8
 8004996:	d10b      	bne.n	80049b0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004998:	4b8d      	ldr	r3, [pc, #564]	@ (8004bd0 <HAL_RCC_OscConfig+0x27c>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d05b      	beq.n	8004a5c <HAL_RCC_OscConfig+0x108>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d157      	bne.n	8004a5c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80049ac:	2301      	movs	r3, #1
 80049ae:	e2d9      	b.n	8004f64 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	685b      	ldr	r3, [r3, #4]
 80049b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80049b8:	d106      	bne.n	80049c8 <HAL_RCC_OscConfig+0x74>
 80049ba:	4b85      	ldr	r3, [pc, #532]	@ (8004bd0 <HAL_RCC_OscConfig+0x27c>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a84      	ldr	r2, [pc, #528]	@ (8004bd0 <HAL_RCC_OscConfig+0x27c>)
 80049c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80049c4:	6013      	str	r3, [r2, #0]
 80049c6:	e01d      	b.n	8004a04 <HAL_RCC_OscConfig+0xb0>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80049d0:	d10c      	bne.n	80049ec <HAL_RCC_OscConfig+0x98>
 80049d2:	4b7f      	ldr	r3, [pc, #508]	@ (8004bd0 <HAL_RCC_OscConfig+0x27c>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4a7e      	ldr	r2, [pc, #504]	@ (8004bd0 <HAL_RCC_OscConfig+0x27c>)
 80049d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80049dc:	6013      	str	r3, [r2, #0]
 80049de:	4b7c      	ldr	r3, [pc, #496]	@ (8004bd0 <HAL_RCC_OscConfig+0x27c>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4a7b      	ldr	r2, [pc, #492]	@ (8004bd0 <HAL_RCC_OscConfig+0x27c>)
 80049e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80049e8:	6013      	str	r3, [r2, #0]
 80049ea:	e00b      	b.n	8004a04 <HAL_RCC_OscConfig+0xb0>
 80049ec:	4b78      	ldr	r3, [pc, #480]	@ (8004bd0 <HAL_RCC_OscConfig+0x27c>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4a77      	ldr	r2, [pc, #476]	@ (8004bd0 <HAL_RCC_OscConfig+0x27c>)
 80049f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80049f6:	6013      	str	r3, [r2, #0]
 80049f8:	4b75      	ldr	r3, [pc, #468]	@ (8004bd0 <HAL_RCC_OscConfig+0x27c>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a74      	ldr	r2, [pc, #464]	@ (8004bd0 <HAL_RCC_OscConfig+0x27c>)
 80049fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004a02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d013      	beq.n	8004a34 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a0c:	f7fd fba6 	bl	800215c <HAL_GetTick>
 8004a10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a12:	e008      	b.n	8004a26 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a14:	f7fd fba2 	bl	800215c <HAL_GetTick>
 8004a18:	4602      	mov	r2, r0
 8004a1a:	693b      	ldr	r3, [r7, #16]
 8004a1c:	1ad3      	subs	r3, r2, r3
 8004a1e:	2b64      	cmp	r3, #100	@ 0x64
 8004a20:	d901      	bls.n	8004a26 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004a22:	2303      	movs	r3, #3
 8004a24:	e29e      	b.n	8004f64 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a26:	4b6a      	ldr	r3, [pc, #424]	@ (8004bd0 <HAL_RCC_OscConfig+0x27c>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d0f0      	beq.n	8004a14 <HAL_RCC_OscConfig+0xc0>
 8004a32:	e014      	b.n	8004a5e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a34:	f7fd fb92 	bl	800215c <HAL_GetTick>
 8004a38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004a3a:	e008      	b.n	8004a4e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a3c:	f7fd fb8e 	bl	800215c <HAL_GetTick>
 8004a40:	4602      	mov	r2, r0
 8004a42:	693b      	ldr	r3, [r7, #16]
 8004a44:	1ad3      	subs	r3, r2, r3
 8004a46:	2b64      	cmp	r3, #100	@ 0x64
 8004a48:	d901      	bls.n	8004a4e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004a4a:	2303      	movs	r3, #3
 8004a4c:	e28a      	b.n	8004f64 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004a4e:	4b60      	ldr	r3, [pc, #384]	@ (8004bd0 <HAL_RCC_OscConfig+0x27c>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d1f0      	bne.n	8004a3c <HAL_RCC_OscConfig+0xe8>
 8004a5a:	e000      	b.n	8004a5e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f003 0302 	and.w	r3, r3, #2
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d075      	beq.n	8004b56 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a6a:	4b59      	ldr	r3, [pc, #356]	@ (8004bd0 <HAL_RCC_OscConfig+0x27c>)
 8004a6c:	689b      	ldr	r3, [r3, #8]
 8004a6e:	f003 030c 	and.w	r3, r3, #12
 8004a72:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004a74:	4b56      	ldr	r3, [pc, #344]	@ (8004bd0 <HAL_RCC_OscConfig+0x27c>)
 8004a76:	68db      	ldr	r3, [r3, #12]
 8004a78:	f003 0303 	and.w	r3, r3, #3
 8004a7c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004a7e:	69bb      	ldr	r3, [r7, #24]
 8004a80:	2b0c      	cmp	r3, #12
 8004a82:	d102      	bne.n	8004a8a <HAL_RCC_OscConfig+0x136>
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	2b02      	cmp	r3, #2
 8004a88:	d002      	beq.n	8004a90 <HAL_RCC_OscConfig+0x13c>
 8004a8a:	69bb      	ldr	r3, [r7, #24]
 8004a8c:	2b04      	cmp	r3, #4
 8004a8e:	d11f      	bne.n	8004ad0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004a90:	4b4f      	ldr	r3, [pc, #316]	@ (8004bd0 <HAL_RCC_OscConfig+0x27c>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d005      	beq.n	8004aa8 <HAL_RCC_OscConfig+0x154>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	68db      	ldr	r3, [r3, #12]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d101      	bne.n	8004aa8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	e25d      	b.n	8004f64 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004aa8:	4b49      	ldr	r3, [pc, #292]	@ (8004bd0 <HAL_RCC_OscConfig+0x27c>)
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	691b      	ldr	r3, [r3, #16]
 8004ab4:	061b      	lsls	r3, r3, #24
 8004ab6:	4946      	ldr	r1, [pc, #280]	@ (8004bd0 <HAL_RCC_OscConfig+0x27c>)
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004abc:	4b45      	ldr	r3, [pc, #276]	@ (8004bd4 <HAL_RCC_OscConfig+0x280>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	f7fd faff 	bl	80020c4 <HAL_InitTick>
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d043      	beq.n	8004b54 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004acc:	2301      	movs	r3, #1
 8004ace:	e249      	b.n	8004f64 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	68db      	ldr	r3, [r3, #12]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d023      	beq.n	8004b20 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ad8:	4b3d      	ldr	r3, [pc, #244]	@ (8004bd0 <HAL_RCC_OscConfig+0x27c>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a3c      	ldr	r2, [pc, #240]	@ (8004bd0 <HAL_RCC_OscConfig+0x27c>)
 8004ade:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ae2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ae4:	f7fd fb3a 	bl	800215c <HAL_GetTick>
 8004ae8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004aea:	e008      	b.n	8004afe <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004aec:	f7fd fb36 	bl	800215c <HAL_GetTick>
 8004af0:	4602      	mov	r2, r0
 8004af2:	693b      	ldr	r3, [r7, #16]
 8004af4:	1ad3      	subs	r3, r2, r3
 8004af6:	2b02      	cmp	r3, #2
 8004af8:	d901      	bls.n	8004afe <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004afa:	2303      	movs	r3, #3
 8004afc:	e232      	b.n	8004f64 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004afe:	4b34      	ldr	r3, [pc, #208]	@ (8004bd0 <HAL_RCC_OscConfig+0x27c>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d0f0      	beq.n	8004aec <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b0a:	4b31      	ldr	r3, [pc, #196]	@ (8004bd0 <HAL_RCC_OscConfig+0x27c>)
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	691b      	ldr	r3, [r3, #16]
 8004b16:	061b      	lsls	r3, r3, #24
 8004b18:	492d      	ldr	r1, [pc, #180]	@ (8004bd0 <HAL_RCC_OscConfig+0x27c>)
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	604b      	str	r3, [r1, #4]
 8004b1e:	e01a      	b.n	8004b56 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b20:	4b2b      	ldr	r3, [pc, #172]	@ (8004bd0 <HAL_RCC_OscConfig+0x27c>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4a2a      	ldr	r2, [pc, #168]	@ (8004bd0 <HAL_RCC_OscConfig+0x27c>)
 8004b26:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004b2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b2c:	f7fd fb16 	bl	800215c <HAL_GetTick>
 8004b30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004b32:	e008      	b.n	8004b46 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b34:	f7fd fb12 	bl	800215c <HAL_GetTick>
 8004b38:	4602      	mov	r2, r0
 8004b3a:	693b      	ldr	r3, [r7, #16]
 8004b3c:	1ad3      	subs	r3, r2, r3
 8004b3e:	2b02      	cmp	r3, #2
 8004b40:	d901      	bls.n	8004b46 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004b42:	2303      	movs	r3, #3
 8004b44:	e20e      	b.n	8004f64 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004b46:	4b22      	ldr	r3, [pc, #136]	@ (8004bd0 <HAL_RCC_OscConfig+0x27c>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d1f0      	bne.n	8004b34 <HAL_RCC_OscConfig+0x1e0>
 8004b52:	e000      	b.n	8004b56 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b54:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f003 0308 	and.w	r3, r3, #8
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d041      	beq.n	8004be6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	695b      	ldr	r3, [r3, #20]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d01c      	beq.n	8004ba4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b6a:	4b19      	ldr	r3, [pc, #100]	@ (8004bd0 <HAL_RCC_OscConfig+0x27c>)
 8004b6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b70:	4a17      	ldr	r2, [pc, #92]	@ (8004bd0 <HAL_RCC_OscConfig+0x27c>)
 8004b72:	f043 0301 	orr.w	r3, r3, #1
 8004b76:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b7a:	f7fd faef 	bl	800215c <HAL_GetTick>
 8004b7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004b80:	e008      	b.n	8004b94 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b82:	f7fd faeb 	bl	800215c <HAL_GetTick>
 8004b86:	4602      	mov	r2, r0
 8004b88:	693b      	ldr	r3, [r7, #16]
 8004b8a:	1ad3      	subs	r3, r2, r3
 8004b8c:	2b02      	cmp	r3, #2
 8004b8e:	d901      	bls.n	8004b94 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004b90:	2303      	movs	r3, #3
 8004b92:	e1e7      	b.n	8004f64 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004b94:	4b0e      	ldr	r3, [pc, #56]	@ (8004bd0 <HAL_RCC_OscConfig+0x27c>)
 8004b96:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b9a:	f003 0302 	and.w	r3, r3, #2
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d0ef      	beq.n	8004b82 <HAL_RCC_OscConfig+0x22e>
 8004ba2:	e020      	b.n	8004be6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ba4:	4b0a      	ldr	r3, [pc, #40]	@ (8004bd0 <HAL_RCC_OscConfig+0x27c>)
 8004ba6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004baa:	4a09      	ldr	r2, [pc, #36]	@ (8004bd0 <HAL_RCC_OscConfig+0x27c>)
 8004bac:	f023 0301 	bic.w	r3, r3, #1
 8004bb0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bb4:	f7fd fad2 	bl	800215c <HAL_GetTick>
 8004bb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004bba:	e00d      	b.n	8004bd8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004bbc:	f7fd face 	bl	800215c <HAL_GetTick>
 8004bc0:	4602      	mov	r2, r0
 8004bc2:	693b      	ldr	r3, [r7, #16]
 8004bc4:	1ad3      	subs	r3, r2, r3
 8004bc6:	2b02      	cmp	r3, #2
 8004bc8:	d906      	bls.n	8004bd8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004bca:	2303      	movs	r3, #3
 8004bcc:	e1ca      	b.n	8004f64 <HAL_RCC_OscConfig+0x610>
 8004bce:	bf00      	nop
 8004bd0:	40021000 	.word	0x40021000
 8004bd4:	20000098 	.word	0x20000098
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004bd8:	4b8c      	ldr	r3, [pc, #560]	@ (8004e0c <HAL_RCC_OscConfig+0x4b8>)
 8004bda:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004bde:	f003 0302 	and.w	r3, r3, #2
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d1ea      	bne.n	8004bbc <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f003 0304 	and.w	r3, r3, #4
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	f000 80a6 	beq.w	8004d40 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004bf8:	4b84      	ldr	r3, [pc, #528]	@ (8004e0c <HAL_RCC_OscConfig+0x4b8>)
 8004bfa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bfc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d101      	bne.n	8004c08 <HAL_RCC_OscConfig+0x2b4>
 8004c04:	2301      	movs	r3, #1
 8004c06:	e000      	b.n	8004c0a <HAL_RCC_OscConfig+0x2b6>
 8004c08:	2300      	movs	r3, #0
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d00d      	beq.n	8004c2a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c0e:	4b7f      	ldr	r3, [pc, #508]	@ (8004e0c <HAL_RCC_OscConfig+0x4b8>)
 8004c10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c12:	4a7e      	ldr	r2, [pc, #504]	@ (8004e0c <HAL_RCC_OscConfig+0x4b8>)
 8004c14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c18:	6593      	str	r3, [r2, #88]	@ 0x58
 8004c1a:	4b7c      	ldr	r3, [pc, #496]	@ (8004e0c <HAL_RCC_OscConfig+0x4b8>)
 8004c1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c22:	60fb      	str	r3, [r7, #12]
 8004c24:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004c26:	2301      	movs	r3, #1
 8004c28:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c2a:	4b79      	ldr	r3, [pc, #484]	@ (8004e10 <HAL_RCC_OscConfig+0x4bc>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d118      	bne.n	8004c68 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004c36:	4b76      	ldr	r3, [pc, #472]	@ (8004e10 <HAL_RCC_OscConfig+0x4bc>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4a75      	ldr	r2, [pc, #468]	@ (8004e10 <HAL_RCC_OscConfig+0x4bc>)
 8004c3c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c42:	f7fd fa8b 	bl	800215c <HAL_GetTick>
 8004c46:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c48:	e008      	b.n	8004c5c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c4a:	f7fd fa87 	bl	800215c <HAL_GetTick>
 8004c4e:	4602      	mov	r2, r0
 8004c50:	693b      	ldr	r3, [r7, #16]
 8004c52:	1ad3      	subs	r3, r2, r3
 8004c54:	2b02      	cmp	r3, #2
 8004c56:	d901      	bls.n	8004c5c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004c58:	2303      	movs	r3, #3
 8004c5a:	e183      	b.n	8004f64 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c5c:	4b6c      	ldr	r3, [pc, #432]	@ (8004e10 <HAL_RCC_OscConfig+0x4bc>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d0f0      	beq.n	8004c4a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	689b      	ldr	r3, [r3, #8]
 8004c6c:	2b01      	cmp	r3, #1
 8004c6e:	d108      	bne.n	8004c82 <HAL_RCC_OscConfig+0x32e>
 8004c70:	4b66      	ldr	r3, [pc, #408]	@ (8004e0c <HAL_RCC_OscConfig+0x4b8>)
 8004c72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c76:	4a65      	ldr	r2, [pc, #404]	@ (8004e0c <HAL_RCC_OscConfig+0x4b8>)
 8004c78:	f043 0301 	orr.w	r3, r3, #1
 8004c7c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004c80:	e024      	b.n	8004ccc <HAL_RCC_OscConfig+0x378>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	689b      	ldr	r3, [r3, #8]
 8004c86:	2b05      	cmp	r3, #5
 8004c88:	d110      	bne.n	8004cac <HAL_RCC_OscConfig+0x358>
 8004c8a:	4b60      	ldr	r3, [pc, #384]	@ (8004e0c <HAL_RCC_OscConfig+0x4b8>)
 8004c8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c90:	4a5e      	ldr	r2, [pc, #376]	@ (8004e0c <HAL_RCC_OscConfig+0x4b8>)
 8004c92:	f043 0304 	orr.w	r3, r3, #4
 8004c96:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004c9a:	4b5c      	ldr	r3, [pc, #368]	@ (8004e0c <HAL_RCC_OscConfig+0x4b8>)
 8004c9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ca0:	4a5a      	ldr	r2, [pc, #360]	@ (8004e0c <HAL_RCC_OscConfig+0x4b8>)
 8004ca2:	f043 0301 	orr.w	r3, r3, #1
 8004ca6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004caa:	e00f      	b.n	8004ccc <HAL_RCC_OscConfig+0x378>
 8004cac:	4b57      	ldr	r3, [pc, #348]	@ (8004e0c <HAL_RCC_OscConfig+0x4b8>)
 8004cae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cb2:	4a56      	ldr	r2, [pc, #344]	@ (8004e0c <HAL_RCC_OscConfig+0x4b8>)
 8004cb4:	f023 0301 	bic.w	r3, r3, #1
 8004cb8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004cbc:	4b53      	ldr	r3, [pc, #332]	@ (8004e0c <HAL_RCC_OscConfig+0x4b8>)
 8004cbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cc2:	4a52      	ldr	r2, [pc, #328]	@ (8004e0c <HAL_RCC_OscConfig+0x4b8>)
 8004cc4:	f023 0304 	bic.w	r3, r3, #4
 8004cc8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	689b      	ldr	r3, [r3, #8]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d016      	beq.n	8004d02 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cd4:	f7fd fa42 	bl	800215c <HAL_GetTick>
 8004cd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004cda:	e00a      	b.n	8004cf2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cdc:	f7fd fa3e 	bl	800215c <HAL_GetTick>
 8004ce0:	4602      	mov	r2, r0
 8004ce2:	693b      	ldr	r3, [r7, #16]
 8004ce4:	1ad3      	subs	r3, r2, r3
 8004ce6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d901      	bls.n	8004cf2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004cee:	2303      	movs	r3, #3
 8004cf0:	e138      	b.n	8004f64 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004cf2:	4b46      	ldr	r3, [pc, #280]	@ (8004e0c <HAL_RCC_OscConfig+0x4b8>)
 8004cf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cf8:	f003 0302 	and.w	r3, r3, #2
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d0ed      	beq.n	8004cdc <HAL_RCC_OscConfig+0x388>
 8004d00:	e015      	b.n	8004d2e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d02:	f7fd fa2b 	bl	800215c <HAL_GetTick>
 8004d06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004d08:	e00a      	b.n	8004d20 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d0a:	f7fd fa27 	bl	800215c <HAL_GetTick>
 8004d0e:	4602      	mov	r2, r0
 8004d10:	693b      	ldr	r3, [r7, #16]
 8004d12:	1ad3      	subs	r3, r2, r3
 8004d14:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d901      	bls.n	8004d20 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004d1c:	2303      	movs	r3, #3
 8004d1e:	e121      	b.n	8004f64 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004d20:	4b3a      	ldr	r3, [pc, #232]	@ (8004e0c <HAL_RCC_OscConfig+0x4b8>)
 8004d22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d26:	f003 0302 	and.w	r3, r3, #2
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d1ed      	bne.n	8004d0a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004d2e:	7ffb      	ldrb	r3, [r7, #31]
 8004d30:	2b01      	cmp	r3, #1
 8004d32:	d105      	bne.n	8004d40 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d34:	4b35      	ldr	r3, [pc, #212]	@ (8004e0c <HAL_RCC_OscConfig+0x4b8>)
 8004d36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d38:	4a34      	ldr	r2, [pc, #208]	@ (8004e0c <HAL_RCC_OscConfig+0x4b8>)
 8004d3a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004d3e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f003 0320 	and.w	r3, r3, #32
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d03c      	beq.n	8004dc6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	699b      	ldr	r3, [r3, #24]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d01c      	beq.n	8004d8e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004d54:	4b2d      	ldr	r3, [pc, #180]	@ (8004e0c <HAL_RCC_OscConfig+0x4b8>)
 8004d56:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004d5a:	4a2c      	ldr	r2, [pc, #176]	@ (8004e0c <HAL_RCC_OscConfig+0x4b8>)
 8004d5c:	f043 0301 	orr.w	r3, r3, #1
 8004d60:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d64:	f7fd f9fa 	bl	800215c <HAL_GetTick>
 8004d68:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004d6a:	e008      	b.n	8004d7e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004d6c:	f7fd f9f6 	bl	800215c <HAL_GetTick>
 8004d70:	4602      	mov	r2, r0
 8004d72:	693b      	ldr	r3, [r7, #16]
 8004d74:	1ad3      	subs	r3, r2, r3
 8004d76:	2b02      	cmp	r3, #2
 8004d78:	d901      	bls.n	8004d7e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004d7a:	2303      	movs	r3, #3
 8004d7c:	e0f2      	b.n	8004f64 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004d7e:	4b23      	ldr	r3, [pc, #140]	@ (8004e0c <HAL_RCC_OscConfig+0x4b8>)
 8004d80:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004d84:	f003 0302 	and.w	r3, r3, #2
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d0ef      	beq.n	8004d6c <HAL_RCC_OscConfig+0x418>
 8004d8c:	e01b      	b.n	8004dc6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004d8e:	4b1f      	ldr	r3, [pc, #124]	@ (8004e0c <HAL_RCC_OscConfig+0x4b8>)
 8004d90:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004d94:	4a1d      	ldr	r2, [pc, #116]	@ (8004e0c <HAL_RCC_OscConfig+0x4b8>)
 8004d96:	f023 0301 	bic.w	r3, r3, #1
 8004d9a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d9e:	f7fd f9dd 	bl	800215c <HAL_GetTick>
 8004da2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004da4:	e008      	b.n	8004db8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004da6:	f7fd f9d9 	bl	800215c <HAL_GetTick>
 8004daa:	4602      	mov	r2, r0
 8004dac:	693b      	ldr	r3, [r7, #16]
 8004dae:	1ad3      	subs	r3, r2, r3
 8004db0:	2b02      	cmp	r3, #2
 8004db2:	d901      	bls.n	8004db8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004db4:	2303      	movs	r3, #3
 8004db6:	e0d5      	b.n	8004f64 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004db8:	4b14      	ldr	r3, [pc, #80]	@ (8004e0c <HAL_RCC_OscConfig+0x4b8>)
 8004dba:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004dbe:	f003 0302 	and.w	r3, r3, #2
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d1ef      	bne.n	8004da6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	69db      	ldr	r3, [r3, #28]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	f000 80c9 	beq.w	8004f62 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004dd0:	4b0e      	ldr	r3, [pc, #56]	@ (8004e0c <HAL_RCC_OscConfig+0x4b8>)
 8004dd2:	689b      	ldr	r3, [r3, #8]
 8004dd4:	f003 030c 	and.w	r3, r3, #12
 8004dd8:	2b0c      	cmp	r3, #12
 8004dda:	f000 8083 	beq.w	8004ee4 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	69db      	ldr	r3, [r3, #28]
 8004de2:	2b02      	cmp	r3, #2
 8004de4:	d15e      	bne.n	8004ea4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004de6:	4b09      	ldr	r3, [pc, #36]	@ (8004e0c <HAL_RCC_OscConfig+0x4b8>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a08      	ldr	r2, [pc, #32]	@ (8004e0c <HAL_RCC_OscConfig+0x4b8>)
 8004dec:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004df0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004df2:	f7fd f9b3 	bl	800215c <HAL_GetTick>
 8004df6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004df8:	e00c      	b.n	8004e14 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004dfa:	f7fd f9af 	bl	800215c <HAL_GetTick>
 8004dfe:	4602      	mov	r2, r0
 8004e00:	693b      	ldr	r3, [r7, #16]
 8004e02:	1ad3      	subs	r3, r2, r3
 8004e04:	2b02      	cmp	r3, #2
 8004e06:	d905      	bls.n	8004e14 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004e08:	2303      	movs	r3, #3
 8004e0a:	e0ab      	b.n	8004f64 <HAL_RCC_OscConfig+0x610>
 8004e0c:	40021000 	.word	0x40021000
 8004e10:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e14:	4b55      	ldr	r3, [pc, #340]	@ (8004f6c <HAL_RCC_OscConfig+0x618>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d1ec      	bne.n	8004dfa <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004e20:	4b52      	ldr	r3, [pc, #328]	@ (8004f6c <HAL_RCC_OscConfig+0x618>)
 8004e22:	68da      	ldr	r2, [r3, #12]
 8004e24:	4b52      	ldr	r3, [pc, #328]	@ (8004f70 <HAL_RCC_OscConfig+0x61c>)
 8004e26:	4013      	ands	r3, r2
 8004e28:	687a      	ldr	r2, [r7, #4]
 8004e2a:	6a11      	ldr	r1, [r2, #32]
 8004e2c:	687a      	ldr	r2, [r7, #4]
 8004e2e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004e30:	3a01      	subs	r2, #1
 8004e32:	0112      	lsls	r2, r2, #4
 8004e34:	4311      	orrs	r1, r2
 8004e36:	687a      	ldr	r2, [r7, #4]
 8004e38:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004e3a:	0212      	lsls	r2, r2, #8
 8004e3c:	4311      	orrs	r1, r2
 8004e3e:	687a      	ldr	r2, [r7, #4]
 8004e40:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004e42:	0852      	lsrs	r2, r2, #1
 8004e44:	3a01      	subs	r2, #1
 8004e46:	0552      	lsls	r2, r2, #21
 8004e48:	4311      	orrs	r1, r2
 8004e4a:	687a      	ldr	r2, [r7, #4]
 8004e4c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004e4e:	0852      	lsrs	r2, r2, #1
 8004e50:	3a01      	subs	r2, #1
 8004e52:	0652      	lsls	r2, r2, #25
 8004e54:	4311      	orrs	r1, r2
 8004e56:	687a      	ldr	r2, [r7, #4]
 8004e58:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004e5a:	06d2      	lsls	r2, r2, #27
 8004e5c:	430a      	orrs	r2, r1
 8004e5e:	4943      	ldr	r1, [pc, #268]	@ (8004f6c <HAL_RCC_OscConfig+0x618>)
 8004e60:	4313      	orrs	r3, r2
 8004e62:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e64:	4b41      	ldr	r3, [pc, #260]	@ (8004f6c <HAL_RCC_OscConfig+0x618>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a40      	ldr	r2, [pc, #256]	@ (8004f6c <HAL_RCC_OscConfig+0x618>)
 8004e6a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004e6e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004e70:	4b3e      	ldr	r3, [pc, #248]	@ (8004f6c <HAL_RCC_OscConfig+0x618>)
 8004e72:	68db      	ldr	r3, [r3, #12]
 8004e74:	4a3d      	ldr	r2, [pc, #244]	@ (8004f6c <HAL_RCC_OscConfig+0x618>)
 8004e76:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004e7a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e7c:	f7fd f96e 	bl	800215c <HAL_GetTick>
 8004e80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e82:	e008      	b.n	8004e96 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e84:	f7fd f96a 	bl	800215c <HAL_GetTick>
 8004e88:	4602      	mov	r2, r0
 8004e8a:	693b      	ldr	r3, [r7, #16]
 8004e8c:	1ad3      	subs	r3, r2, r3
 8004e8e:	2b02      	cmp	r3, #2
 8004e90:	d901      	bls.n	8004e96 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004e92:	2303      	movs	r3, #3
 8004e94:	e066      	b.n	8004f64 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e96:	4b35      	ldr	r3, [pc, #212]	@ (8004f6c <HAL_RCC_OscConfig+0x618>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d0f0      	beq.n	8004e84 <HAL_RCC_OscConfig+0x530>
 8004ea2:	e05e      	b.n	8004f62 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ea4:	4b31      	ldr	r3, [pc, #196]	@ (8004f6c <HAL_RCC_OscConfig+0x618>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4a30      	ldr	r2, [pc, #192]	@ (8004f6c <HAL_RCC_OscConfig+0x618>)
 8004eaa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004eae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004eb0:	f7fd f954 	bl	800215c <HAL_GetTick>
 8004eb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004eb6:	e008      	b.n	8004eca <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004eb8:	f7fd f950 	bl	800215c <HAL_GetTick>
 8004ebc:	4602      	mov	r2, r0
 8004ebe:	693b      	ldr	r3, [r7, #16]
 8004ec0:	1ad3      	subs	r3, r2, r3
 8004ec2:	2b02      	cmp	r3, #2
 8004ec4:	d901      	bls.n	8004eca <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8004ec6:	2303      	movs	r3, #3
 8004ec8:	e04c      	b.n	8004f64 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004eca:	4b28      	ldr	r3, [pc, #160]	@ (8004f6c <HAL_RCC_OscConfig+0x618>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d1f0      	bne.n	8004eb8 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004ed6:	4b25      	ldr	r3, [pc, #148]	@ (8004f6c <HAL_RCC_OscConfig+0x618>)
 8004ed8:	68da      	ldr	r2, [r3, #12]
 8004eda:	4924      	ldr	r1, [pc, #144]	@ (8004f6c <HAL_RCC_OscConfig+0x618>)
 8004edc:	4b25      	ldr	r3, [pc, #148]	@ (8004f74 <HAL_RCC_OscConfig+0x620>)
 8004ede:	4013      	ands	r3, r2
 8004ee0:	60cb      	str	r3, [r1, #12]
 8004ee2:	e03e      	b.n	8004f62 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	69db      	ldr	r3, [r3, #28]
 8004ee8:	2b01      	cmp	r3, #1
 8004eea:	d101      	bne.n	8004ef0 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004eec:	2301      	movs	r3, #1
 8004eee:	e039      	b.n	8004f64 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004ef0:	4b1e      	ldr	r3, [pc, #120]	@ (8004f6c <HAL_RCC_OscConfig+0x618>)
 8004ef2:	68db      	ldr	r3, [r3, #12]
 8004ef4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ef6:	697b      	ldr	r3, [r7, #20]
 8004ef8:	f003 0203 	and.w	r2, r3, #3
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6a1b      	ldr	r3, [r3, #32]
 8004f00:	429a      	cmp	r2, r3
 8004f02:	d12c      	bne.n	8004f5e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004f04:	697b      	ldr	r3, [r7, #20]
 8004f06:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f0e:	3b01      	subs	r3, #1
 8004f10:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f12:	429a      	cmp	r2, r3
 8004f14:	d123      	bne.n	8004f5e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004f16:	697b      	ldr	r3, [r7, #20]
 8004f18:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f20:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004f22:	429a      	cmp	r2, r3
 8004f24:	d11b      	bne.n	8004f5e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004f26:	697b      	ldr	r3, [r7, #20]
 8004f28:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f30:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004f32:	429a      	cmp	r2, r3
 8004f34:	d113      	bne.n	8004f5e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004f36:	697b      	ldr	r3, [r7, #20]
 8004f38:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f40:	085b      	lsrs	r3, r3, #1
 8004f42:	3b01      	subs	r3, #1
 8004f44:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004f46:	429a      	cmp	r2, r3
 8004f48:	d109      	bne.n	8004f5e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f54:	085b      	lsrs	r3, r3, #1
 8004f56:	3b01      	subs	r3, #1
 8004f58:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004f5a:	429a      	cmp	r2, r3
 8004f5c:	d001      	beq.n	8004f62 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8004f5e:	2301      	movs	r3, #1
 8004f60:	e000      	b.n	8004f64 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8004f62:	2300      	movs	r3, #0
}
 8004f64:	4618      	mov	r0, r3
 8004f66:	3720      	adds	r7, #32
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	bd80      	pop	{r7, pc}
 8004f6c:	40021000 	.word	0x40021000
 8004f70:	019f800c 	.word	0x019f800c
 8004f74:	feeefffc 	.word	0xfeeefffc

08004f78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b086      	sub	sp, #24
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
 8004f80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004f82:	2300      	movs	r3, #0
 8004f84:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d101      	bne.n	8004f90 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	e11e      	b.n	80051ce <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004f90:	4b91      	ldr	r3, [pc, #580]	@ (80051d8 <HAL_RCC_ClockConfig+0x260>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f003 030f 	and.w	r3, r3, #15
 8004f98:	683a      	ldr	r2, [r7, #0]
 8004f9a:	429a      	cmp	r2, r3
 8004f9c:	d910      	bls.n	8004fc0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f9e:	4b8e      	ldr	r3, [pc, #568]	@ (80051d8 <HAL_RCC_ClockConfig+0x260>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f023 020f 	bic.w	r2, r3, #15
 8004fa6:	498c      	ldr	r1, [pc, #560]	@ (80051d8 <HAL_RCC_ClockConfig+0x260>)
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	4313      	orrs	r3, r2
 8004fac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fae:	4b8a      	ldr	r3, [pc, #552]	@ (80051d8 <HAL_RCC_ClockConfig+0x260>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f003 030f 	and.w	r3, r3, #15
 8004fb6:	683a      	ldr	r2, [r7, #0]
 8004fb8:	429a      	cmp	r2, r3
 8004fba:	d001      	beq.n	8004fc0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	e106      	b.n	80051ce <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f003 0301 	and.w	r3, r3, #1
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d073      	beq.n	80050b4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	685b      	ldr	r3, [r3, #4]
 8004fd0:	2b03      	cmp	r3, #3
 8004fd2:	d129      	bne.n	8005028 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004fd4:	4b81      	ldr	r3, [pc, #516]	@ (80051dc <HAL_RCC_ClockConfig+0x264>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d101      	bne.n	8004fe4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	e0f4      	b.n	80051ce <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004fe4:	f000 f99e 	bl	8005324 <RCC_GetSysClockFreqFromPLLSource>
 8004fe8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004fea:	693b      	ldr	r3, [r7, #16]
 8004fec:	4a7c      	ldr	r2, [pc, #496]	@ (80051e0 <HAL_RCC_ClockConfig+0x268>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d93f      	bls.n	8005072 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004ff2:	4b7a      	ldr	r3, [pc, #488]	@ (80051dc <HAL_RCC_ClockConfig+0x264>)
 8004ff4:	689b      	ldr	r3, [r3, #8]
 8004ff6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d009      	beq.n	8005012 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005006:	2b00      	cmp	r3, #0
 8005008:	d033      	beq.n	8005072 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800500e:	2b00      	cmp	r3, #0
 8005010:	d12f      	bne.n	8005072 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005012:	4b72      	ldr	r3, [pc, #456]	@ (80051dc <HAL_RCC_ClockConfig+0x264>)
 8005014:	689b      	ldr	r3, [r3, #8]
 8005016:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800501a:	4a70      	ldr	r2, [pc, #448]	@ (80051dc <HAL_RCC_ClockConfig+0x264>)
 800501c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005020:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005022:	2380      	movs	r3, #128	@ 0x80
 8005024:	617b      	str	r3, [r7, #20]
 8005026:	e024      	b.n	8005072 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	2b02      	cmp	r3, #2
 800502e:	d107      	bne.n	8005040 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005030:	4b6a      	ldr	r3, [pc, #424]	@ (80051dc <HAL_RCC_ClockConfig+0x264>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005038:	2b00      	cmp	r3, #0
 800503a:	d109      	bne.n	8005050 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800503c:	2301      	movs	r3, #1
 800503e:	e0c6      	b.n	80051ce <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005040:	4b66      	ldr	r3, [pc, #408]	@ (80051dc <HAL_RCC_ClockConfig+0x264>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005048:	2b00      	cmp	r3, #0
 800504a:	d101      	bne.n	8005050 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800504c:	2301      	movs	r3, #1
 800504e:	e0be      	b.n	80051ce <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005050:	f000 f8ce 	bl	80051f0 <HAL_RCC_GetSysClockFreq>
 8005054:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005056:	693b      	ldr	r3, [r7, #16]
 8005058:	4a61      	ldr	r2, [pc, #388]	@ (80051e0 <HAL_RCC_ClockConfig+0x268>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d909      	bls.n	8005072 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800505e:	4b5f      	ldr	r3, [pc, #380]	@ (80051dc <HAL_RCC_ClockConfig+0x264>)
 8005060:	689b      	ldr	r3, [r3, #8]
 8005062:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005066:	4a5d      	ldr	r2, [pc, #372]	@ (80051dc <HAL_RCC_ClockConfig+0x264>)
 8005068:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800506c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800506e:	2380      	movs	r3, #128	@ 0x80
 8005070:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005072:	4b5a      	ldr	r3, [pc, #360]	@ (80051dc <HAL_RCC_ClockConfig+0x264>)
 8005074:	689b      	ldr	r3, [r3, #8]
 8005076:	f023 0203 	bic.w	r2, r3, #3
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	685b      	ldr	r3, [r3, #4]
 800507e:	4957      	ldr	r1, [pc, #348]	@ (80051dc <HAL_RCC_ClockConfig+0x264>)
 8005080:	4313      	orrs	r3, r2
 8005082:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005084:	f7fd f86a 	bl	800215c <HAL_GetTick>
 8005088:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800508a:	e00a      	b.n	80050a2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800508c:	f7fd f866 	bl	800215c <HAL_GetTick>
 8005090:	4602      	mov	r2, r0
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	1ad3      	subs	r3, r2, r3
 8005096:	f241 3288 	movw	r2, #5000	@ 0x1388
 800509a:	4293      	cmp	r3, r2
 800509c:	d901      	bls.n	80050a2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800509e:	2303      	movs	r3, #3
 80050a0:	e095      	b.n	80051ce <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050a2:	4b4e      	ldr	r3, [pc, #312]	@ (80051dc <HAL_RCC_ClockConfig+0x264>)
 80050a4:	689b      	ldr	r3, [r3, #8]
 80050a6:	f003 020c 	and.w	r2, r3, #12
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	685b      	ldr	r3, [r3, #4]
 80050ae:	009b      	lsls	r3, r3, #2
 80050b0:	429a      	cmp	r2, r3
 80050b2:	d1eb      	bne.n	800508c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f003 0302 	and.w	r3, r3, #2
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d023      	beq.n	8005108 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f003 0304 	and.w	r3, r3, #4
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d005      	beq.n	80050d8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80050cc:	4b43      	ldr	r3, [pc, #268]	@ (80051dc <HAL_RCC_ClockConfig+0x264>)
 80050ce:	689b      	ldr	r3, [r3, #8]
 80050d0:	4a42      	ldr	r2, [pc, #264]	@ (80051dc <HAL_RCC_ClockConfig+0x264>)
 80050d2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80050d6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f003 0308 	and.w	r3, r3, #8
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d007      	beq.n	80050f4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80050e4:	4b3d      	ldr	r3, [pc, #244]	@ (80051dc <HAL_RCC_ClockConfig+0x264>)
 80050e6:	689b      	ldr	r3, [r3, #8]
 80050e8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80050ec:	4a3b      	ldr	r2, [pc, #236]	@ (80051dc <HAL_RCC_ClockConfig+0x264>)
 80050ee:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80050f2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80050f4:	4b39      	ldr	r3, [pc, #228]	@ (80051dc <HAL_RCC_ClockConfig+0x264>)
 80050f6:	689b      	ldr	r3, [r3, #8]
 80050f8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	689b      	ldr	r3, [r3, #8]
 8005100:	4936      	ldr	r1, [pc, #216]	@ (80051dc <HAL_RCC_ClockConfig+0x264>)
 8005102:	4313      	orrs	r3, r2
 8005104:	608b      	str	r3, [r1, #8]
 8005106:	e008      	b.n	800511a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005108:	697b      	ldr	r3, [r7, #20]
 800510a:	2b80      	cmp	r3, #128	@ 0x80
 800510c:	d105      	bne.n	800511a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800510e:	4b33      	ldr	r3, [pc, #204]	@ (80051dc <HAL_RCC_ClockConfig+0x264>)
 8005110:	689b      	ldr	r3, [r3, #8]
 8005112:	4a32      	ldr	r2, [pc, #200]	@ (80051dc <HAL_RCC_ClockConfig+0x264>)
 8005114:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005118:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800511a:	4b2f      	ldr	r3, [pc, #188]	@ (80051d8 <HAL_RCC_ClockConfig+0x260>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f003 030f 	and.w	r3, r3, #15
 8005122:	683a      	ldr	r2, [r7, #0]
 8005124:	429a      	cmp	r2, r3
 8005126:	d21d      	bcs.n	8005164 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005128:	4b2b      	ldr	r3, [pc, #172]	@ (80051d8 <HAL_RCC_ClockConfig+0x260>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f023 020f 	bic.w	r2, r3, #15
 8005130:	4929      	ldr	r1, [pc, #164]	@ (80051d8 <HAL_RCC_ClockConfig+0x260>)
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	4313      	orrs	r3, r2
 8005136:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005138:	f7fd f810 	bl	800215c <HAL_GetTick>
 800513c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800513e:	e00a      	b.n	8005156 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005140:	f7fd f80c 	bl	800215c <HAL_GetTick>
 8005144:	4602      	mov	r2, r0
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	1ad3      	subs	r3, r2, r3
 800514a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800514e:	4293      	cmp	r3, r2
 8005150:	d901      	bls.n	8005156 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005152:	2303      	movs	r3, #3
 8005154:	e03b      	b.n	80051ce <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005156:	4b20      	ldr	r3, [pc, #128]	@ (80051d8 <HAL_RCC_ClockConfig+0x260>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f003 030f 	and.w	r3, r3, #15
 800515e:	683a      	ldr	r2, [r7, #0]
 8005160:	429a      	cmp	r2, r3
 8005162:	d1ed      	bne.n	8005140 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f003 0304 	and.w	r3, r3, #4
 800516c:	2b00      	cmp	r3, #0
 800516e:	d008      	beq.n	8005182 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005170:	4b1a      	ldr	r3, [pc, #104]	@ (80051dc <HAL_RCC_ClockConfig+0x264>)
 8005172:	689b      	ldr	r3, [r3, #8]
 8005174:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	68db      	ldr	r3, [r3, #12]
 800517c:	4917      	ldr	r1, [pc, #92]	@ (80051dc <HAL_RCC_ClockConfig+0x264>)
 800517e:	4313      	orrs	r3, r2
 8005180:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f003 0308 	and.w	r3, r3, #8
 800518a:	2b00      	cmp	r3, #0
 800518c:	d009      	beq.n	80051a2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800518e:	4b13      	ldr	r3, [pc, #76]	@ (80051dc <HAL_RCC_ClockConfig+0x264>)
 8005190:	689b      	ldr	r3, [r3, #8]
 8005192:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	691b      	ldr	r3, [r3, #16]
 800519a:	00db      	lsls	r3, r3, #3
 800519c:	490f      	ldr	r1, [pc, #60]	@ (80051dc <HAL_RCC_ClockConfig+0x264>)
 800519e:	4313      	orrs	r3, r2
 80051a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80051a2:	f000 f825 	bl	80051f0 <HAL_RCC_GetSysClockFreq>
 80051a6:	4602      	mov	r2, r0
 80051a8:	4b0c      	ldr	r3, [pc, #48]	@ (80051dc <HAL_RCC_ClockConfig+0x264>)
 80051aa:	689b      	ldr	r3, [r3, #8]
 80051ac:	091b      	lsrs	r3, r3, #4
 80051ae:	f003 030f 	and.w	r3, r3, #15
 80051b2:	490c      	ldr	r1, [pc, #48]	@ (80051e4 <HAL_RCC_ClockConfig+0x26c>)
 80051b4:	5ccb      	ldrb	r3, [r1, r3]
 80051b6:	f003 031f 	and.w	r3, r3, #31
 80051ba:	fa22 f303 	lsr.w	r3, r2, r3
 80051be:	4a0a      	ldr	r2, [pc, #40]	@ (80051e8 <HAL_RCC_ClockConfig+0x270>)
 80051c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80051c2:	4b0a      	ldr	r3, [pc, #40]	@ (80051ec <HAL_RCC_ClockConfig+0x274>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4618      	mov	r0, r3
 80051c8:	f7fc ff7c 	bl	80020c4 <HAL_InitTick>
 80051cc:	4603      	mov	r3, r0
}
 80051ce:	4618      	mov	r0, r3
 80051d0:	3718      	adds	r7, #24
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bd80      	pop	{r7, pc}
 80051d6:	bf00      	nop
 80051d8:	40022000 	.word	0x40022000
 80051dc:	40021000 	.word	0x40021000
 80051e0:	04c4b400 	.word	0x04c4b400
 80051e4:	0800d07c 	.word	0x0800d07c
 80051e8:	20000094 	.word	0x20000094
 80051ec:	20000098 	.word	0x20000098

080051f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80051f0:	b480      	push	{r7}
 80051f2:	b087      	sub	sp, #28
 80051f4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80051f6:	4b2c      	ldr	r3, [pc, #176]	@ (80052a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80051f8:	689b      	ldr	r3, [r3, #8]
 80051fa:	f003 030c 	and.w	r3, r3, #12
 80051fe:	2b04      	cmp	r3, #4
 8005200:	d102      	bne.n	8005208 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005202:	4b2a      	ldr	r3, [pc, #168]	@ (80052ac <HAL_RCC_GetSysClockFreq+0xbc>)
 8005204:	613b      	str	r3, [r7, #16]
 8005206:	e047      	b.n	8005298 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005208:	4b27      	ldr	r3, [pc, #156]	@ (80052a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800520a:	689b      	ldr	r3, [r3, #8]
 800520c:	f003 030c 	and.w	r3, r3, #12
 8005210:	2b08      	cmp	r3, #8
 8005212:	d102      	bne.n	800521a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005214:	4b26      	ldr	r3, [pc, #152]	@ (80052b0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005216:	613b      	str	r3, [r7, #16]
 8005218:	e03e      	b.n	8005298 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800521a:	4b23      	ldr	r3, [pc, #140]	@ (80052a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800521c:	689b      	ldr	r3, [r3, #8]
 800521e:	f003 030c 	and.w	r3, r3, #12
 8005222:	2b0c      	cmp	r3, #12
 8005224:	d136      	bne.n	8005294 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005226:	4b20      	ldr	r3, [pc, #128]	@ (80052a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005228:	68db      	ldr	r3, [r3, #12]
 800522a:	f003 0303 	and.w	r3, r3, #3
 800522e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005230:	4b1d      	ldr	r3, [pc, #116]	@ (80052a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005232:	68db      	ldr	r3, [r3, #12]
 8005234:	091b      	lsrs	r3, r3, #4
 8005236:	f003 030f 	and.w	r3, r3, #15
 800523a:	3301      	adds	r3, #1
 800523c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	2b03      	cmp	r3, #3
 8005242:	d10c      	bne.n	800525e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005244:	4a1a      	ldr	r2, [pc, #104]	@ (80052b0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	fbb2 f3f3 	udiv	r3, r2, r3
 800524c:	4a16      	ldr	r2, [pc, #88]	@ (80052a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800524e:	68d2      	ldr	r2, [r2, #12]
 8005250:	0a12      	lsrs	r2, r2, #8
 8005252:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005256:	fb02 f303 	mul.w	r3, r2, r3
 800525a:	617b      	str	r3, [r7, #20]
      break;
 800525c:	e00c      	b.n	8005278 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800525e:	4a13      	ldr	r2, [pc, #76]	@ (80052ac <HAL_RCC_GetSysClockFreq+0xbc>)
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	fbb2 f3f3 	udiv	r3, r2, r3
 8005266:	4a10      	ldr	r2, [pc, #64]	@ (80052a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005268:	68d2      	ldr	r2, [r2, #12]
 800526a:	0a12      	lsrs	r2, r2, #8
 800526c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005270:	fb02 f303 	mul.w	r3, r2, r3
 8005274:	617b      	str	r3, [r7, #20]
      break;
 8005276:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005278:	4b0b      	ldr	r3, [pc, #44]	@ (80052a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800527a:	68db      	ldr	r3, [r3, #12]
 800527c:	0e5b      	lsrs	r3, r3, #25
 800527e:	f003 0303 	and.w	r3, r3, #3
 8005282:	3301      	adds	r3, #1
 8005284:	005b      	lsls	r3, r3, #1
 8005286:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005288:	697a      	ldr	r2, [r7, #20]
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005290:	613b      	str	r3, [r7, #16]
 8005292:	e001      	b.n	8005298 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005294:	2300      	movs	r3, #0
 8005296:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005298:	693b      	ldr	r3, [r7, #16]
}
 800529a:	4618      	mov	r0, r3
 800529c:	371c      	adds	r7, #28
 800529e:	46bd      	mov	sp, r7
 80052a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a4:	4770      	bx	lr
 80052a6:	bf00      	nop
 80052a8:	40021000 	.word	0x40021000
 80052ac:	00f42400 	.word	0x00f42400
 80052b0:	016e3600 	.word	0x016e3600

080052b4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80052b4:	b480      	push	{r7}
 80052b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80052b8:	4b03      	ldr	r3, [pc, #12]	@ (80052c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80052ba:	681b      	ldr	r3, [r3, #0]
}
 80052bc:	4618      	mov	r0, r3
 80052be:	46bd      	mov	sp, r7
 80052c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c4:	4770      	bx	lr
 80052c6:	bf00      	nop
 80052c8:	20000094 	.word	0x20000094

080052cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80052d0:	f7ff fff0 	bl	80052b4 <HAL_RCC_GetHCLKFreq>
 80052d4:	4602      	mov	r2, r0
 80052d6:	4b06      	ldr	r3, [pc, #24]	@ (80052f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80052d8:	689b      	ldr	r3, [r3, #8]
 80052da:	0a1b      	lsrs	r3, r3, #8
 80052dc:	f003 0307 	and.w	r3, r3, #7
 80052e0:	4904      	ldr	r1, [pc, #16]	@ (80052f4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80052e2:	5ccb      	ldrb	r3, [r1, r3]
 80052e4:	f003 031f 	and.w	r3, r3, #31
 80052e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80052ec:	4618      	mov	r0, r3
 80052ee:	bd80      	pop	{r7, pc}
 80052f0:	40021000 	.word	0x40021000
 80052f4:	0800d08c 	.word	0x0800d08c

080052f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80052fc:	f7ff ffda 	bl	80052b4 <HAL_RCC_GetHCLKFreq>
 8005300:	4602      	mov	r2, r0
 8005302:	4b06      	ldr	r3, [pc, #24]	@ (800531c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005304:	689b      	ldr	r3, [r3, #8]
 8005306:	0adb      	lsrs	r3, r3, #11
 8005308:	f003 0307 	and.w	r3, r3, #7
 800530c:	4904      	ldr	r1, [pc, #16]	@ (8005320 <HAL_RCC_GetPCLK2Freq+0x28>)
 800530e:	5ccb      	ldrb	r3, [r1, r3]
 8005310:	f003 031f 	and.w	r3, r3, #31
 8005314:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005318:	4618      	mov	r0, r3
 800531a:	bd80      	pop	{r7, pc}
 800531c:	40021000 	.word	0x40021000
 8005320:	0800d08c 	.word	0x0800d08c

08005324 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005324:	b480      	push	{r7}
 8005326:	b087      	sub	sp, #28
 8005328:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800532a:	4b1e      	ldr	r3, [pc, #120]	@ (80053a4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800532c:	68db      	ldr	r3, [r3, #12]
 800532e:	f003 0303 	and.w	r3, r3, #3
 8005332:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005334:	4b1b      	ldr	r3, [pc, #108]	@ (80053a4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005336:	68db      	ldr	r3, [r3, #12]
 8005338:	091b      	lsrs	r3, r3, #4
 800533a:	f003 030f 	and.w	r3, r3, #15
 800533e:	3301      	adds	r3, #1
 8005340:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005342:	693b      	ldr	r3, [r7, #16]
 8005344:	2b03      	cmp	r3, #3
 8005346:	d10c      	bne.n	8005362 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005348:	4a17      	ldr	r2, [pc, #92]	@ (80053a8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005350:	4a14      	ldr	r2, [pc, #80]	@ (80053a4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005352:	68d2      	ldr	r2, [r2, #12]
 8005354:	0a12      	lsrs	r2, r2, #8
 8005356:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800535a:	fb02 f303 	mul.w	r3, r2, r3
 800535e:	617b      	str	r3, [r7, #20]
    break;
 8005360:	e00c      	b.n	800537c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005362:	4a12      	ldr	r2, [pc, #72]	@ (80053ac <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	fbb2 f3f3 	udiv	r3, r2, r3
 800536a:	4a0e      	ldr	r2, [pc, #56]	@ (80053a4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800536c:	68d2      	ldr	r2, [r2, #12]
 800536e:	0a12      	lsrs	r2, r2, #8
 8005370:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005374:	fb02 f303 	mul.w	r3, r2, r3
 8005378:	617b      	str	r3, [r7, #20]
    break;
 800537a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800537c:	4b09      	ldr	r3, [pc, #36]	@ (80053a4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800537e:	68db      	ldr	r3, [r3, #12]
 8005380:	0e5b      	lsrs	r3, r3, #25
 8005382:	f003 0303 	and.w	r3, r3, #3
 8005386:	3301      	adds	r3, #1
 8005388:	005b      	lsls	r3, r3, #1
 800538a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800538c:	697a      	ldr	r2, [r7, #20]
 800538e:	68bb      	ldr	r3, [r7, #8]
 8005390:	fbb2 f3f3 	udiv	r3, r2, r3
 8005394:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005396:	687b      	ldr	r3, [r7, #4]
}
 8005398:	4618      	mov	r0, r3
 800539a:	371c      	adds	r7, #28
 800539c:	46bd      	mov	sp, r7
 800539e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a2:	4770      	bx	lr
 80053a4:	40021000 	.word	0x40021000
 80053a8:	016e3600 	.word	0x016e3600
 80053ac:	00f42400 	.word	0x00f42400

080053b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b086      	sub	sp, #24
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80053b8:	2300      	movs	r3, #0
 80053ba:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80053bc:	2300      	movs	r3, #0
 80053be:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	f000 8098 	beq.w	80054fe <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80053ce:	2300      	movs	r3, #0
 80053d0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80053d2:	4b43      	ldr	r3, [pc, #268]	@ (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80053d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d10d      	bne.n	80053fa <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80053de:	4b40      	ldr	r3, [pc, #256]	@ (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80053e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053e2:	4a3f      	ldr	r2, [pc, #252]	@ (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80053e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80053e8:	6593      	str	r3, [r2, #88]	@ 0x58
 80053ea:	4b3d      	ldr	r3, [pc, #244]	@ (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80053ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80053f2:	60bb      	str	r3, [r7, #8]
 80053f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80053f6:	2301      	movs	r3, #1
 80053f8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80053fa:	4b3a      	ldr	r3, [pc, #232]	@ (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4a39      	ldr	r2, [pc, #228]	@ (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005400:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005404:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005406:	f7fc fea9 	bl	800215c <HAL_GetTick>
 800540a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800540c:	e009      	b.n	8005422 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800540e:	f7fc fea5 	bl	800215c <HAL_GetTick>
 8005412:	4602      	mov	r2, r0
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	1ad3      	subs	r3, r2, r3
 8005418:	2b02      	cmp	r3, #2
 800541a:	d902      	bls.n	8005422 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800541c:	2303      	movs	r3, #3
 800541e:	74fb      	strb	r3, [r7, #19]
        break;
 8005420:	e005      	b.n	800542e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005422:	4b30      	ldr	r3, [pc, #192]	@ (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800542a:	2b00      	cmp	r3, #0
 800542c:	d0ef      	beq.n	800540e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800542e:	7cfb      	ldrb	r3, [r7, #19]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d159      	bne.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005434:	4b2a      	ldr	r3, [pc, #168]	@ (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005436:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800543a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800543e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005440:	697b      	ldr	r3, [r7, #20]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d01e      	beq.n	8005484 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800544a:	697a      	ldr	r2, [r7, #20]
 800544c:	429a      	cmp	r2, r3
 800544e:	d019      	beq.n	8005484 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005450:	4b23      	ldr	r3, [pc, #140]	@ (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005452:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005456:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800545a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800545c:	4b20      	ldr	r3, [pc, #128]	@ (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800545e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005462:	4a1f      	ldr	r2, [pc, #124]	@ (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005464:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005468:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800546c:	4b1c      	ldr	r3, [pc, #112]	@ (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800546e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005472:	4a1b      	ldr	r2, [pc, #108]	@ (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005474:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005478:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800547c:	4a18      	ldr	r2, [pc, #96]	@ (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800547e:	697b      	ldr	r3, [r7, #20]
 8005480:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005484:	697b      	ldr	r3, [r7, #20]
 8005486:	f003 0301 	and.w	r3, r3, #1
 800548a:	2b00      	cmp	r3, #0
 800548c:	d016      	beq.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800548e:	f7fc fe65 	bl	800215c <HAL_GetTick>
 8005492:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005494:	e00b      	b.n	80054ae <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005496:	f7fc fe61 	bl	800215c <HAL_GetTick>
 800549a:	4602      	mov	r2, r0
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	1ad3      	subs	r3, r2, r3
 80054a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d902      	bls.n	80054ae <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80054a8:	2303      	movs	r3, #3
 80054aa:	74fb      	strb	r3, [r7, #19]
            break;
 80054ac:	e006      	b.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80054ae:	4b0c      	ldr	r3, [pc, #48]	@ (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80054b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054b4:	f003 0302 	and.w	r3, r3, #2
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d0ec      	beq.n	8005496 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80054bc:	7cfb      	ldrb	r3, [r7, #19]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d10b      	bne.n	80054da <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80054c2:	4b07      	ldr	r3, [pc, #28]	@ (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80054c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054c8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054d0:	4903      	ldr	r1, [pc, #12]	@ (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80054d2:	4313      	orrs	r3, r2
 80054d4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80054d8:	e008      	b.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80054da:	7cfb      	ldrb	r3, [r7, #19]
 80054dc:	74bb      	strb	r3, [r7, #18]
 80054de:	e005      	b.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80054e0:	40021000 	.word	0x40021000
 80054e4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054e8:	7cfb      	ldrb	r3, [r7, #19]
 80054ea:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80054ec:	7c7b      	ldrb	r3, [r7, #17]
 80054ee:	2b01      	cmp	r3, #1
 80054f0:	d105      	bne.n	80054fe <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80054f2:	4ba6      	ldr	r3, [pc, #664]	@ (800578c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054f6:	4aa5      	ldr	r2, [pc, #660]	@ (800578c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054f8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80054fc:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f003 0301 	and.w	r3, r3, #1
 8005506:	2b00      	cmp	r3, #0
 8005508:	d00a      	beq.n	8005520 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800550a:	4ba0      	ldr	r3, [pc, #640]	@ (800578c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800550c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005510:	f023 0203 	bic.w	r2, r3, #3
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	685b      	ldr	r3, [r3, #4]
 8005518:	499c      	ldr	r1, [pc, #624]	@ (800578c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800551a:	4313      	orrs	r3, r2
 800551c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f003 0302 	and.w	r3, r3, #2
 8005528:	2b00      	cmp	r3, #0
 800552a:	d00a      	beq.n	8005542 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800552c:	4b97      	ldr	r3, [pc, #604]	@ (800578c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800552e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005532:	f023 020c 	bic.w	r2, r3, #12
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	689b      	ldr	r3, [r3, #8]
 800553a:	4994      	ldr	r1, [pc, #592]	@ (800578c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800553c:	4313      	orrs	r3, r2
 800553e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f003 0304 	and.w	r3, r3, #4
 800554a:	2b00      	cmp	r3, #0
 800554c:	d00a      	beq.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800554e:	4b8f      	ldr	r3, [pc, #572]	@ (800578c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005550:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005554:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	68db      	ldr	r3, [r3, #12]
 800555c:	498b      	ldr	r1, [pc, #556]	@ (800578c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800555e:	4313      	orrs	r3, r2
 8005560:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f003 0308 	and.w	r3, r3, #8
 800556c:	2b00      	cmp	r3, #0
 800556e:	d00a      	beq.n	8005586 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005570:	4b86      	ldr	r3, [pc, #536]	@ (800578c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005572:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005576:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	691b      	ldr	r3, [r3, #16]
 800557e:	4983      	ldr	r1, [pc, #524]	@ (800578c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005580:	4313      	orrs	r3, r2
 8005582:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f003 0320 	and.w	r3, r3, #32
 800558e:	2b00      	cmp	r3, #0
 8005590:	d00a      	beq.n	80055a8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005592:	4b7e      	ldr	r3, [pc, #504]	@ (800578c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005594:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005598:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	695b      	ldr	r3, [r3, #20]
 80055a0:	497a      	ldr	r1, [pc, #488]	@ (800578c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055a2:	4313      	orrs	r3, r2
 80055a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d00a      	beq.n	80055ca <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80055b4:	4b75      	ldr	r3, [pc, #468]	@ (800578c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055ba:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	699b      	ldr	r3, [r3, #24]
 80055c2:	4972      	ldr	r1, [pc, #456]	@ (800578c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055c4:	4313      	orrs	r3, r2
 80055c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d00a      	beq.n	80055ec <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80055d6:	4b6d      	ldr	r3, [pc, #436]	@ (800578c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055dc:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	69db      	ldr	r3, [r3, #28]
 80055e4:	4969      	ldr	r1, [pc, #420]	@ (800578c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055e6:	4313      	orrs	r3, r2
 80055e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d00a      	beq.n	800560e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80055f8:	4b64      	ldr	r3, [pc, #400]	@ (800578c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055fe:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6a1b      	ldr	r3, [r3, #32]
 8005606:	4961      	ldr	r1, [pc, #388]	@ (800578c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005608:	4313      	orrs	r3, r2
 800560a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005616:	2b00      	cmp	r3, #0
 8005618:	d00a      	beq.n	8005630 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800561a:	4b5c      	ldr	r3, [pc, #368]	@ (800578c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800561c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005620:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005628:	4958      	ldr	r1, [pc, #352]	@ (800578c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800562a:	4313      	orrs	r3, r2
 800562c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005638:	2b00      	cmp	r3, #0
 800563a:	d015      	beq.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800563c:	4b53      	ldr	r3, [pc, #332]	@ (800578c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800563e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005642:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800564a:	4950      	ldr	r1, [pc, #320]	@ (800578c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800564c:	4313      	orrs	r3, r2
 800564e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005656:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800565a:	d105      	bne.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800565c:	4b4b      	ldr	r3, [pc, #300]	@ (800578c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800565e:	68db      	ldr	r3, [r3, #12]
 8005660:	4a4a      	ldr	r2, [pc, #296]	@ (800578c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005662:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005666:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005670:	2b00      	cmp	r3, #0
 8005672:	d015      	beq.n	80056a0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005674:	4b45      	ldr	r3, [pc, #276]	@ (800578c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005676:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800567a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005682:	4942      	ldr	r1, [pc, #264]	@ (800578c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005684:	4313      	orrs	r3, r2
 8005686:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800568e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005692:	d105      	bne.n	80056a0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005694:	4b3d      	ldr	r3, [pc, #244]	@ (800578c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005696:	68db      	ldr	r3, [r3, #12]
 8005698:	4a3c      	ldr	r2, [pc, #240]	@ (800578c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800569a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800569e:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d015      	beq.n	80056d8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80056ac:	4b37      	ldr	r3, [pc, #220]	@ (800578c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80056ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056b2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056ba:	4934      	ldr	r1, [pc, #208]	@ (800578c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80056bc:	4313      	orrs	r3, r2
 80056be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056c6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80056ca:	d105      	bne.n	80056d8 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80056cc:	4b2f      	ldr	r3, [pc, #188]	@ (800578c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80056ce:	68db      	ldr	r3, [r3, #12]
 80056d0:	4a2e      	ldr	r2, [pc, #184]	@ (800578c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80056d2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80056d6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d015      	beq.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80056e4:	4b29      	ldr	r3, [pc, #164]	@ (800578c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80056e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056ea:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056f2:	4926      	ldr	r1, [pc, #152]	@ (800578c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80056f4:	4313      	orrs	r3, r2
 80056f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056fe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005702:	d105      	bne.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005704:	4b21      	ldr	r3, [pc, #132]	@ (800578c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005706:	68db      	ldr	r3, [r3, #12]
 8005708:	4a20      	ldr	r2, [pc, #128]	@ (800578c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800570a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800570e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005718:	2b00      	cmp	r3, #0
 800571a:	d015      	beq.n	8005748 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800571c:	4b1b      	ldr	r3, [pc, #108]	@ (800578c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800571e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005722:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800572a:	4918      	ldr	r1, [pc, #96]	@ (800578c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800572c:	4313      	orrs	r3, r2
 800572e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005736:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800573a:	d105      	bne.n	8005748 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800573c:	4b13      	ldr	r3, [pc, #76]	@ (800578c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800573e:	68db      	ldr	r3, [r3, #12]
 8005740:	4a12      	ldr	r2, [pc, #72]	@ (800578c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005742:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005746:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005750:	2b00      	cmp	r3, #0
 8005752:	d015      	beq.n	8005780 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005754:	4b0d      	ldr	r3, [pc, #52]	@ (800578c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005756:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800575a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005762:	490a      	ldr	r1, [pc, #40]	@ (800578c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005764:	4313      	orrs	r3, r2
 8005766:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800576e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005772:	d105      	bne.n	8005780 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005774:	4b05      	ldr	r3, [pc, #20]	@ (800578c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005776:	68db      	ldr	r3, [r3, #12]
 8005778:	4a04      	ldr	r2, [pc, #16]	@ (800578c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800577a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800577e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005780:	7cbb      	ldrb	r3, [r7, #18]
}
 8005782:	4618      	mov	r0, r3
 8005784:	3718      	adds	r7, #24
 8005786:	46bd      	mov	sp, r7
 8005788:	bd80      	pop	{r7, pc}
 800578a:	bf00      	nop
 800578c:	40021000 	.word	0x40021000

08005790 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b082      	sub	sp, #8
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d101      	bne.n	80057a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800579e:	2301      	movs	r3, #1
 80057a0:	e049      	b.n	8005836 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80057a8:	b2db      	uxtb	r3, r3
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d106      	bne.n	80057bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2200      	movs	r2, #0
 80057b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80057b6:	6878      	ldr	r0, [r7, #4]
 80057b8:	f7fc fa70 	bl	8001c9c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2202      	movs	r2, #2
 80057c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681a      	ldr	r2, [r3, #0]
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	3304      	adds	r3, #4
 80057cc:	4619      	mov	r1, r3
 80057ce:	4610      	mov	r0, r2
 80057d0:	f000 fb12 	bl	8005df8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2201      	movs	r2, #1
 80057d8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2201      	movs	r2, #1
 80057e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2201      	movs	r2, #1
 80057e8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2201      	movs	r2, #1
 80057f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2201      	movs	r2, #1
 80057f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2201      	movs	r2, #1
 8005800:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2201      	movs	r2, #1
 8005808:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2201      	movs	r2, #1
 8005810:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2201      	movs	r2, #1
 8005818:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2201      	movs	r2, #1
 8005820:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2201      	movs	r2, #1
 8005828:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2201      	movs	r2, #1
 8005830:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005834:	2300      	movs	r3, #0
}
 8005836:	4618      	mov	r0, r3
 8005838:	3708      	adds	r7, #8
 800583a:	46bd      	mov	sp, r7
 800583c:	bd80      	pop	{r7, pc}
	...

08005840 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005840:	b480      	push	{r7}
 8005842:	b085      	sub	sp, #20
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800584e:	b2db      	uxtb	r3, r3
 8005850:	2b01      	cmp	r3, #1
 8005852:	d001      	beq.n	8005858 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005854:	2301      	movs	r3, #1
 8005856:	e04a      	b.n	80058ee <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2202      	movs	r2, #2
 800585c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	68da      	ldr	r2, [r3, #12]
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f042 0201 	orr.w	r2, r2, #1
 800586e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	4a21      	ldr	r2, [pc, #132]	@ (80058fc <HAL_TIM_Base_Start_IT+0xbc>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d018      	beq.n	80058ac <HAL_TIM_Base_Start_IT+0x6c>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005882:	d013      	beq.n	80058ac <HAL_TIM_Base_Start_IT+0x6c>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4a1d      	ldr	r2, [pc, #116]	@ (8005900 <HAL_TIM_Base_Start_IT+0xc0>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d00e      	beq.n	80058ac <HAL_TIM_Base_Start_IT+0x6c>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	4a1c      	ldr	r2, [pc, #112]	@ (8005904 <HAL_TIM_Base_Start_IT+0xc4>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d009      	beq.n	80058ac <HAL_TIM_Base_Start_IT+0x6c>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4a1a      	ldr	r2, [pc, #104]	@ (8005908 <HAL_TIM_Base_Start_IT+0xc8>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d004      	beq.n	80058ac <HAL_TIM_Base_Start_IT+0x6c>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	4a19      	ldr	r2, [pc, #100]	@ (800590c <HAL_TIM_Base_Start_IT+0xcc>)
 80058a8:	4293      	cmp	r3, r2
 80058aa:	d115      	bne.n	80058d8 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	689a      	ldr	r2, [r3, #8]
 80058b2:	4b17      	ldr	r3, [pc, #92]	@ (8005910 <HAL_TIM_Base_Start_IT+0xd0>)
 80058b4:	4013      	ands	r3, r2
 80058b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	2b06      	cmp	r3, #6
 80058bc:	d015      	beq.n	80058ea <HAL_TIM_Base_Start_IT+0xaa>
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80058c4:	d011      	beq.n	80058ea <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	681a      	ldr	r2, [r3, #0]
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f042 0201 	orr.w	r2, r2, #1
 80058d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058d6:	e008      	b.n	80058ea <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	681a      	ldr	r2, [r3, #0]
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f042 0201 	orr.w	r2, r2, #1
 80058e6:	601a      	str	r2, [r3, #0]
 80058e8:	e000      	b.n	80058ec <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058ea:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80058ec:	2300      	movs	r3, #0
}
 80058ee:	4618      	mov	r0, r3
 80058f0:	3714      	adds	r7, #20
 80058f2:	46bd      	mov	sp, r7
 80058f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f8:	4770      	bx	lr
 80058fa:	bf00      	nop
 80058fc:	40012c00 	.word	0x40012c00
 8005900:	40000400 	.word	0x40000400
 8005904:	40000800 	.word	0x40000800
 8005908:	40013400 	.word	0x40013400
 800590c:	40014000 	.word	0x40014000
 8005910:	00010007 	.word	0x00010007

08005914 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b084      	sub	sp, #16
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	68db      	ldr	r3, [r3, #12]
 8005922:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	691b      	ldr	r3, [r3, #16]
 800592a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800592c:	68bb      	ldr	r3, [r7, #8]
 800592e:	f003 0302 	and.w	r3, r3, #2
 8005932:	2b00      	cmp	r3, #0
 8005934:	d020      	beq.n	8005978 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	f003 0302 	and.w	r3, r3, #2
 800593c:	2b00      	cmp	r3, #0
 800593e:	d01b      	beq.n	8005978 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f06f 0202 	mvn.w	r2, #2
 8005948:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2201      	movs	r2, #1
 800594e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	699b      	ldr	r3, [r3, #24]
 8005956:	f003 0303 	and.w	r3, r3, #3
 800595a:	2b00      	cmp	r3, #0
 800595c:	d003      	beq.n	8005966 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800595e:	6878      	ldr	r0, [r7, #4]
 8005960:	f000 fa2c 	bl	8005dbc <HAL_TIM_IC_CaptureCallback>
 8005964:	e005      	b.n	8005972 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005966:	6878      	ldr	r0, [r7, #4]
 8005968:	f000 fa1e 	bl	8005da8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800596c:	6878      	ldr	r0, [r7, #4]
 800596e:	f000 fa2f 	bl	8005dd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2200      	movs	r2, #0
 8005976:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	f003 0304 	and.w	r3, r3, #4
 800597e:	2b00      	cmp	r3, #0
 8005980:	d020      	beq.n	80059c4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	f003 0304 	and.w	r3, r3, #4
 8005988:	2b00      	cmp	r3, #0
 800598a:	d01b      	beq.n	80059c4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f06f 0204 	mvn.w	r2, #4
 8005994:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2202      	movs	r2, #2
 800599a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	699b      	ldr	r3, [r3, #24]
 80059a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d003      	beq.n	80059b2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	f000 fa06 	bl	8005dbc <HAL_TIM_IC_CaptureCallback>
 80059b0:	e005      	b.n	80059be <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059b2:	6878      	ldr	r0, [r7, #4]
 80059b4:	f000 f9f8 	bl	8005da8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059b8:	6878      	ldr	r0, [r7, #4]
 80059ba:	f000 fa09 	bl	8005dd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2200      	movs	r2, #0
 80059c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	f003 0308 	and.w	r3, r3, #8
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d020      	beq.n	8005a10 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	f003 0308 	and.w	r3, r3, #8
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d01b      	beq.n	8005a10 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f06f 0208 	mvn.w	r2, #8
 80059e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2204      	movs	r2, #4
 80059e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	69db      	ldr	r3, [r3, #28]
 80059ee:	f003 0303 	and.w	r3, r3, #3
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d003      	beq.n	80059fe <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059f6:	6878      	ldr	r0, [r7, #4]
 80059f8:	f000 f9e0 	bl	8005dbc <HAL_TIM_IC_CaptureCallback>
 80059fc:	e005      	b.n	8005a0a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059fe:	6878      	ldr	r0, [r7, #4]
 8005a00:	f000 f9d2 	bl	8005da8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a04:	6878      	ldr	r0, [r7, #4]
 8005a06:	f000 f9e3 	bl	8005dd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	f003 0310 	and.w	r3, r3, #16
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d020      	beq.n	8005a5c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	f003 0310 	and.w	r3, r3, #16
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d01b      	beq.n	8005a5c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f06f 0210 	mvn.w	r2, #16
 8005a2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2208      	movs	r2, #8
 8005a32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	69db      	ldr	r3, [r3, #28]
 8005a3a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d003      	beq.n	8005a4a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a42:	6878      	ldr	r0, [r7, #4]
 8005a44:	f000 f9ba 	bl	8005dbc <HAL_TIM_IC_CaptureCallback>
 8005a48:	e005      	b.n	8005a56 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a4a:	6878      	ldr	r0, [r7, #4]
 8005a4c:	f000 f9ac 	bl	8005da8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a50:	6878      	ldr	r0, [r7, #4]
 8005a52:	f000 f9bd 	bl	8005dd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2200      	movs	r2, #0
 8005a5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	f003 0301 	and.w	r3, r3, #1
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d00c      	beq.n	8005a80 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	f003 0301 	and.w	r3, r3, #1
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d007      	beq.n	8005a80 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f06f 0201 	mvn.w	r2, #1
 8005a78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005a7a:	6878      	ldr	r0, [r7, #4]
 8005a7c:	f7fb ff48 	bl	8001910 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d104      	bne.n	8005a94 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005a8a:	68bb      	ldr	r3, [r7, #8]
 8005a8c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d00c      	beq.n	8005aae <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d007      	beq.n	8005aae <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005aa6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005aa8:	6878      	ldr	r0, [r7, #4]
 8005aaa:	f000 fb69 	bl	8006180 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005aae:	68bb      	ldr	r3, [r7, #8]
 8005ab0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d00c      	beq.n	8005ad2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d007      	beq.n	8005ad2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005aca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005acc:	6878      	ldr	r0, [r7, #4]
 8005ace:	f000 fb61 	bl	8006194 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005ad2:	68bb      	ldr	r3, [r7, #8]
 8005ad4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d00c      	beq.n	8005af6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d007      	beq.n	8005af6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005aee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005af0:	6878      	ldr	r0, [r7, #4]
 8005af2:	f000 f977 	bl	8005de4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	f003 0320 	and.w	r3, r3, #32
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d00c      	beq.n	8005b1a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	f003 0320 	and.w	r3, r3, #32
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d007      	beq.n	8005b1a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f06f 0220 	mvn.w	r2, #32
 8005b12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005b14:	6878      	ldr	r0, [r7, #4]
 8005b16:	f000 fb29 	bl	800616c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8005b1a:	68bb      	ldr	r3, [r7, #8]
 8005b1c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d00c      	beq.n	8005b3e <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d007      	beq.n	8005b3e <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8005b36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8005b38:	6878      	ldr	r0, [r7, #4]
 8005b3a:	f000 fb35 	bl	80061a8 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8005b3e:	68bb      	ldr	r3, [r7, #8]
 8005b40:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d00c      	beq.n	8005b62 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d007      	beq.n	8005b62 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8005b5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8005b5c:	6878      	ldr	r0, [r7, #4]
 8005b5e:	f000 fb2d 	bl	80061bc <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d00c      	beq.n	8005b86 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d007      	beq.n	8005b86 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8005b7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8005b80:	6878      	ldr	r0, [r7, #4]
 8005b82:	f000 fb25 	bl	80061d0 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8005b86:	68bb      	ldr	r3, [r7, #8]
 8005b88:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d00c      	beq.n	8005baa <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d007      	beq.n	8005baa <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8005ba2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8005ba4:	6878      	ldr	r0, [r7, #4]
 8005ba6:	f000 fb1d 	bl	80061e4 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005baa:	bf00      	nop
 8005bac:	3710      	adds	r7, #16
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	bd80      	pop	{r7, pc}
	...

08005bb4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b084      	sub	sp, #16
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
 8005bbc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005bc8:	2b01      	cmp	r3, #1
 8005bca:	d101      	bne.n	8005bd0 <HAL_TIM_ConfigClockSource+0x1c>
 8005bcc:	2302      	movs	r3, #2
 8005bce:	e0de      	b.n	8005d8e <HAL_TIM_ConfigClockSource+0x1da>
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2201      	movs	r2, #1
 8005bd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2202      	movs	r2, #2
 8005bdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	689b      	ldr	r3, [r3, #8]
 8005be6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8005bee:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005bf2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005bfa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	68ba      	ldr	r2, [r7, #8]
 8005c02:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4a63      	ldr	r2, [pc, #396]	@ (8005d98 <HAL_TIM_ConfigClockSource+0x1e4>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	f000 80a9 	beq.w	8005d62 <HAL_TIM_ConfigClockSource+0x1ae>
 8005c10:	4a61      	ldr	r2, [pc, #388]	@ (8005d98 <HAL_TIM_ConfigClockSource+0x1e4>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	f200 80ae 	bhi.w	8005d74 <HAL_TIM_ConfigClockSource+0x1c0>
 8005c18:	4a60      	ldr	r2, [pc, #384]	@ (8005d9c <HAL_TIM_ConfigClockSource+0x1e8>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	f000 80a1 	beq.w	8005d62 <HAL_TIM_ConfigClockSource+0x1ae>
 8005c20:	4a5e      	ldr	r2, [pc, #376]	@ (8005d9c <HAL_TIM_ConfigClockSource+0x1e8>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	f200 80a6 	bhi.w	8005d74 <HAL_TIM_ConfigClockSource+0x1c0>
 8005c28:	4a5d      	ldr	r2, [pc, #372]	@ (8005da0 <HAL_TIM_ConfigClockSource+0x1ec>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	f000 8099 	beq.w	8005d62 <HAL_TIM_ConfigClockSource+0x1ae>
 8005c30:	4a5b      	ldr	r2, [pc, #364]	@ (8005da0 <HAL_TIM_ConfigClockSource+0x1ec>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	f200 809e 	bhi.w	8005d74 <HAL_TIM_ConfigClockSource+0x1c0>
 8005c38:	4a5a      	ldr	r2, [pc, #360]	@ (8005da4 <HAL_TIM_ConfigClockSource+0x1f0>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	f000 8091 	beq.w	8005d62 <HAL_TIM_ConfigClockSource+0x1ae>
 8005c40:	4a58      	ldr	r2, [pc, #352]	@ (8005da4 <HAL_TIM_ConfigClockSource+0x1f0>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	f200 8096 	bhi.w	8005d74 <HAL_TIM_ConfigClockSource+0x1c0>
 8005c48:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005c4c:	f000 8089 	beq.w	8005d62 <HAL_TIM_ConfigClockSource+0x1ae>
 8005c50:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005c54:	f200 808e 	bhi.w	8005d74 <HAL_TIM_ConfigClockSource+0x1c0>
 8005c58:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c5c:	d03e      	beq.n	8005cdc <HAL_TIM_ConfigClockSource+0x128>
 8005c5e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c62:	f200 8087 	bhi.w	8005d74 <HAL_TIM_ConfigClockSource+0x1c0>
 8005c66:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c6a:	f000 8086 	beq.w	8005d7a <HAL_TIM_ConfigClockSource+0x1c6>
 8005c6e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c72:	d87f      	bhi.n	8005d74 <HAL_TIM_ConfigClockSource+0x1c0>
 8005c74:	2b70      	cmp	r3, #112	@ 0x70
 8005c76:	d01a      	beq.n	8005cae <HAL_TIM_ConfigClockSource+0xfa>
 8005c78:	2b70      	cmp	r3, #112	@ 0x70
 8005c7a:	d87b      	bhi.n	8005d74 <HAL_TIM_ConfigClockSource+0x1c0>
 8005c7c:	2b60      	cmp	r3, #96	@ 0x60
 8005c7e:	d050      	beq.n	8005d22 <HAL_TIM_ConfigClockSource+0x16e>
 8005c80:	2b60      	cmp	r3, #96	@ 0x60
 8005c82:	d877      	bhi.n	8005d74 <HAL_TIM_ConfigClockSource+0x1c0>
 8005c84:	2b50      	cmp	r3, #80	@ 0x50
 8005c86:	d03c      	beq.n	8005d02 <HAL_TIM_ConfigClockSource+0x14e>
 8005c88:	2b50      	cmp	r3, #80	@ 0x50
 8005c8a:	d873      	bhi.n	8005d74 <HAL_TIM_ConfigClockSource+0x1c0>
 8005c8c:	2b40      	cmp	r3, #64	@ 0x40
 8005c8e:	d058      	beq.n	8005d42 <HAL_TIM_ConfigClockSource+0x18e>
 8005c90:	2b40      	cmp	r3, #64	@ 0x40
 8005c92:	d86f      	bhi.n	8005d74 <HAL_TIM_ConfigClockSource+0x1c0>
 8005c94:	2b30      	cmp	r3, #48	@ 0x30
 8005c96:	d064      	beq.n	8005d62 <HAL_TIM_ConfigClockSource+0x1ae>
 8005c98:	2b30      	cmp	r3, #48	@ 0x30
 8005c9a:	d86b      	bhi.n	8005d74 <HAL_TIM_ConfigClockSource+0x1c0>
 8005c9c:	2b20      	cmp	r3, #32
 8005c9e:	d060      	beq.n	8005d62 <HAL_TIM_ConfigClockSource+0x1ae>
 8005ca0:	2b20      	cmp	r3, #32
 8005ca2:	d867      	bhi.n	8005d74 <HAL_TIM_ConfigClockSource+0x1c0>
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d05c      	beq.n	8005d62 <HAL_TIM_ConfigClockSource+0x1ae>
 8005ca8:	2b10      	cmp	r3, #16
 8005caa:	d05a      	beq.n	8005d62 <HAL_TIM_ConfigClockSource+0x1ae>
 8005cac:	e062      	b.n	8005d74 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005cbe:	f000 f9b3 	bl	8006028 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	689b      	ldr	r3, [r3, #8]
 8005cc8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005cca:	68bb      	ldr	r3, [r7, #8]
 8005ccc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005cd0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	68ba      	ldr	r2, [r7, #8]
 8005cd8:	609a      	str	r2, [r3, #8]
      break;
 8005cda:	e04f      	b.n	8005d7c <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005cec:	f000 f99c 	bl	8006028 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	689a      	ldr	r2, [r3, #8]
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005cfe:	609a      	str	r2, [r3, #8]
      break;
 8005d00:	e03c      	b.n	8005d7c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d0e:	461a      	mov	r2, r3
 8005d10:	f000 f90e 	bl	8005f30 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	2150      	movs	r1, #80	@ 0x50
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	f000 f967 	bl	8005fee <TIM_ITRx_SetConfig>
      break;
 8005d20:	e02c      	b.n	8005d7c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d2e:	461a      	mov	r2, r3
 8005d30:	f000 f92d 	bl	8005f8e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	2160      	movs	r1, #96	@ 0x60
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	f000 f957 	bl	8005fee <TIM_ITRx_SetConfig>
      break;
 8005d40:	e01c      	b.n	8005d7c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d4e:	461a      	mov	r2, r3
 8005d50:	f000 f8ee 	bl	8005f30 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	2140      	movs	r1, #64	@ 0x40
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	f000 f947 	bl	8005fee <TIM_ITRx_SetConfig>
      break;
 8005d60:	e00c      	b.n	8005d7c <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681a      	ldr	r2, [r3, #0]
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4619      	mov	r1, r3
 8005d6c:	4610      	mov	r0, r2
 8005d6e:	f000 f93e 	bl	8005fee <TIM_ITRx_SetConfig>
      break;
 8005d72:	e003      	b.n	8005d7c <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8005d74:	2301      	movs	r3, #1
 8005d76:	73fb      	strb	r3, [r7, #15]
      break;
 8005d78:	e000      	b.n	8005d7c <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8005d7a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2201      	movs	r2, #1
 8005d80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2200      	movs	r2, #0
 8005d88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005d8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d8e:	4618      	mov	r0, r3
 8005d90:	3710      	adds	r7, #16
 8005d92:	46bd      	mov	sp, r7
 8005d94:	bd80      	pop	{r7, pc}
 8005d96:	bf00      	nop
 8005d98:	00100070 	.word	0x00100070
 8005d9c:	00100040 	.word	0x00100040
 8005da0:	00100030 	.word	0x00100030
 8005da4:	00100020 	.word	0x00100020

08005da8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005da8:	b480      	push	{r7}
 8005daa:	b083      	sub	sp, #12
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005db0:	bf00      	nop
 8005db2:	370c      	adds	r7, #12
 8005db4:	46bd      	mov	sp, r7
 8005db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dba:	4770      	bx	lr

08005dbc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005dbc:	b480      	push	{r7}
 8005dbe:	b083      	sub	sp, #12
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005dc4:	bf00      	nop
 8005dc6:	370c      	adds	r7, #12
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dce:	4770      	bx	lr

08005dd0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005dd0:	b480      	push	{r7}
 8005dd2:	b083      	sub	sp, #12
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005dd8:	bf00      	nop
 8005dda:	370c      	adds	r7, #12
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de2:	4770      	bx	lr

08005de4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005de4:	b480      	push	{r7}
 8005de6:	b083      	sub	sp, #12
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005dec:	bf00      	nop
 8005dee:	370c      	adds	r7, #12
 8005df0:	46bd      	mov	sp, r7
 8005df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df6:	4770      	bx	lr

08005df8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005df8:	b480      	push	{r7}
 8005dfa:	b085      	sub	sp, #20
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
 8005e00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	4a42      	ldr	r2, [pc, #264]	@ (8005f14 <TIM_Base_SetConfig+0x11c>)
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	d00f      	beq.n	8005e30 <TIM_Base_SetConfig+0x38>
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e16:	d00b      	beq.n	8005e30 <TIM_Base_SetConfig+0x38>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	4a3f      	ldr	r2, [pc, #252]	@ (8005f18 <TIM_Base_SetConfig+0x120>)
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d007      	beq.n	8005e30 <TIM_Base_SetConfig+0x38>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	4a3e      	ldr	r2, [pc, #248]	@ (8005f1c <TIM_Base_SetConfig+0x124>)
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d003      	beq.n	8005e30 <TIM_Base_SetConfig+0x38>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	4a3d      	ldr	r2, [pc, #244]	@ (8005f20 <TIM_Base_SetConfig+0x128>)
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d108      	bne.n	8005e42 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e36:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	685b      	ldr	r3, [r3, #4]
 8005e3c:	68fa      	ldr	r2, [r7, #12]
 8005e3e:	4313      	orrs	r3, r2
 8005e40:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	4a33      	ldr	r2, [pc, #204]	@ (8005f14 <TIM_Base_SetConfig+0x11c>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d01b      	beq.n	8005e82 <TIM_Base_SetConfig+0x8a>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e50:	d017      	beq.n	8005e82 <TIM_Base_SetConfig+0x8a>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	4a30      	ldr	r2, [pc, #192]	@ (8005f18 <TIM_Base_SetConfig+0x120>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d013      	beq.n	8005e82 <TIM_Base_SetConfig+0x8a>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	4a2f      	ldr	r2, [pc, #188]	@ (8005f1c <TIM_Base_SetConfig+0x124>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d00f      	beq.n	8005e82 <TIM_Base_SetConfig+0x8a>
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	4a2e      	ldr	r2, [pc, #184]	@ (8005f20 <TIM_Base_SetConfig+0x128>)
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d00b      	beq.n	8005e82 <TIM_Base_SetConfig+0x8a>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	4a2d      	ldr	r2, [pc, #180]	@ (8005f24 <TIM_Base_SetConfig+0x12c>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d007      	beq.n	8005e82 <TIM_Base_SetConfig+0x8a>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	4a2c      	ldr	r2, [pc, #176]	@ (8005f28 <TIM_Base_SetConfig+0x130>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d003      	beq.n	8005e82 <TIM_Base_SetConfig+0x8a>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	4a2b      	ldr	r2, [pc, #172]	@ (8005f2c <TIM_Base_SetConfig+0x134>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d108      	bne.n	8005e94 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	68db      	ldr	r3, [r3, #12]
 8005e8e:	68fa      	ldr	r2, [r7, #12]
 8005e90:	4313      	orrs	r3, r2
 8005e92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	695b      	ldr	r3, [r3, #20]
 8005e9e:	4313      	orrs	r3, r2
 8005ea0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	68fa      	ldr	r2, [r7, #12]
 8005ea6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	689a      	ldr	r2, [r3, #8]
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	681a      	ldr	r2, [r3, #0]
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	4a16      	ldr	r2, [pc, #88]	@ (8005f14 <TIM_Base_SetConfig+0x11c>)
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d00f      	beq.n	8005ee0 <TIM_Base_SetConfig+0xe8>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	4a17      	ldr	r2, [pc, #92]	@ (8005f20 <TIM_Base_SetConfig+0x128>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d00b      	beq.n	8005ee0 <TIM_Base_SetConfig+0xe8>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	4a16      	ldr	r2, [pc, #88]	@ (8005f24 <TIM_Base_SetConfig+0x12c>)
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d007      	beq.n	8005ee0 <TIM_Base_SetConfig+0xe8>
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	4a15      	ldr	r2, [pc, #84]	@ (8005f28 <TIM_Base_SetConfig+0x130>)
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	d003      	beq.n	8005ee0 <TIM_Base_SetConfig+0xe8>
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	4a14      	ldr	r2, [pc, #80]	@ (8005f2c <TIM_Base_SetConfig+0x134>)
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d103      	bne.n	8005ee8 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	691a      	ldr	r2, [r3, #16]
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2201      	movs	r2, #1
 8005eec:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	691b      	ldr	r3, [r3, #16]
 8005ef2:	f003 0301 	and.w	r3, r3, #1
 8005ef6:	2b01      	cmp	r3, #1
 8005ef8:	d105      	bne.n	8005f06 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	691b      	ldr	r3, [r3, #16]
 8005efe:	f023 0201 	bic.w	r2, r3, #1
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	611a      	str	r2, [r3, #16]
  }
}
 8005f06:	bf00      	nop
 8005f08:	3714      	adds	r7, #20
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f10:	4770      	bx	lr
 8005f12:	bf00      	nop
 8005f14:	40012c00 	.word	0x40012c00
 8005f18:	40000400 	.word	0x40000400
 8005f1c:	40000800 	.word	0x40000800
 8005f20:	40013400 	.word	0x40013400
 8005f24:	40014000 	.word	0x40014000
 8005f28:	40014400 	.word	0x40014400
 8005f2c:	40014800 	.word	0x40014800

08005f30 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f30:	b480      	push	{r7}
 8005f32:	b087      	sub	sp, #28
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	60f8      	str	r0, [r7, #12]
 8005f38:	60b9      	str	r1, [r7, #8]
 8005f3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	6a1b      	ldr	r3, [r3, #32]
 8005f40:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	6a1b      	ldr	r3, [r3, #32]
 8005f46:	f023 0201 	bic.w	r2, r3, #1
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	699b      	ldr	r3, [r3, #24]
 8005f52:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005f54:	693b      	ldr	r3, [r7, #16]
 8005f56:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005f5a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	011b      	lsls	r3, r3, #4
 8005f60:	693a      	ldr	r2, [r7, #16]
 8005f62:	4313      	orrs	r3, r2
 8005f64:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005f66:	697b      	ldr	r3, [r7, #20]
 8005f68:	f023 030a 	bic.w	r3, r3, #10
 8005f6c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005f6e:	697a      	ldr	r2, [r7, #20]
 8005f70:	68bb      	ldr	r3, [r7, #8]
 8005f72:	4313      	orrs	r3, r2
 8005f74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	693a      	ldr	r2, [r7, #16]
 8005f7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	697a      	ldr	r2, [r7, #20]
 8005f80:	621a      	str	r2, [r3, #32]
}
 8005f82:	bf00      	nop
 8005f84:	371c      	adds	r7, #28
 8005f86:	46bd      	mov	sp, r7
 8005f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8c:	4770      	bx	lr

08005f8e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f8e:	b480      	push	{r7}
 8005f90:	b087      	sub	sp, #28
 8005f92:	af00      	add	r7, sp, #0
 8005f94:	60f8      	str	r0, [r7, #12]
 8005f96:	60b9      	str	r1, [r7, #8]
 8005f98:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	6a1b      	ldr	r3, [r3, #32]
 8005f9e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	6a1b      	ldr	r3, [r3, #32]
 8005fa4:	f023 0210 	bic.w	r2, r3, #16
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	699b      	ldr	r3, [r3, #24]
 8005fb0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005fb2:	693b      	ldr	r3, [r7, #16]
 8005fb4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005fb8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	031b      	lsls	r3, r3, #12
 8005fbe:	693a      	ldr	r2, [r7, #16]
 8005fc0:	4313      	orrs	r3, r2
 8005fc2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005fc4:	697b      	ldr	r3, [r7, #20]
 8005fc6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005fca:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005fcc:	68bb      	ldr	r3, [r7, #8]
 8005fce:	011b      	lsls	r3, r3, #4
 8005fd0:	697a      	ldr	r2, [r7, #20]
 8005fd2:	4313      	orrs	r3, r2
 8005fd4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	693a      	ldr	r2, [r7, #16]
 8005fda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	697a      	ldr	r2, [r7, #20]
 8005fe0:	621a      	str	r2, [r3, #32]
}
 8005fe2:	bf00      	nop
 8005fe4:	371c      	adds	r7, #28
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fec:	4770      	bx	lr

08005fee <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005fee:	b480      	push	{r7}
 8005ff0:	b085      	sub	sp, #20
 8005ff2:	af00      	add	r7, sp, #0
 8005ff4:	6078      	str	r0, [r7, #4]
 8005ff6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	689b      	ldr	r3, [r3, #8]
 8005ffc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8006004:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006008:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800600a:	683a      	ldr	r2, [r7, #0]
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	4313      	orrs	r3, r2
 8006010:	f043 0307 	orr.w	r3, r3, #7
 8006014:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	68fa      	ldr	r2, [r7, #12]
 800601a:	609a      	str	r2, [r3, #8]
}
 800601c:	bf00      	nop
 800601e:	3714      	adds	r7, #20
 8006020:	46bd      	mov	sp, r7
 8006022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006026:	4770      	bx	lr

08006028 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006028:	b480      	push	{r7}
 800602a:	b087      	sub	sp, #28
 800602c:	af00      	add	r7, sp, #0
 800602e:	60f8      	str	r0, [r7, #12]
 8006030:	60b9      	str	r1, [r7, #8]
 8006032:	607a      	str	r2, [r7, #4]
 8006034:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	689b      	ldr	r3, [r3, #8]
 800603a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800603c:	697b      	ldr	r3, [r7, #20]
 800603e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006042:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	021a      	lsls	r2, r3, #8
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	431a      	orrs	r2, r3
 800604c:	68bb      	ldr	r3, [r7, #8]
 800604e:	4313      	orrs	r3, r2
 8006050:	697a      	ldr	r2, [r7, #20]
 8006052:	4313      	orrs	r3, r2
 8006054:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	697a      	ldr	r2, [r7, #20]
 800605a:	609a      	str	r2, [r3, #8]
}
 800605c:	bf00      	nop
 800605e:	371c      	adds	r7, #28
 8006060:	46bd      	mov	sp, r7
 8006062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006066:	4770      	bx	lr

08006068 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006068:	b480      	push	{r7}
 800606a:	b085      	sub	sp, #20
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
 8006070:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006078:	2b01      	cmp	r3, #1
 800607a:	d101      	bne.n	8006080 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800607c:	2302      	movs	r3, #2
 800607e:	e065      	b.n	800614c <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2201      	movs	r2, #1
 8006084:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2202      	movs	r2, #2
 800608c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	685b      	ldr	r3, [r3, #4]
 8006096:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	689b      	ldr	r3, [r3, #8]
 800609e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4a2c      	ldr	r2, [pc, #176]	@ (8006158 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d004      	beq.n	80060b4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	4a2b      	ldr	r2, [pc, #172]	@ (800615c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d108      	bne.n	80060c6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80060ba:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	685b      	ldr	r3, [r3, #4]
 80060c0:	68fa      	ldr	r2, [r7, #12]
 80060c2:	4313      	orrs	r3, r2
 80060c4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80060cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80060d0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	68fa      	ldr	r2, [r7, #12]
 80060d8:	4313      	orrs	r3, r2
 80060da:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	68fa      	ldr	r2, [r7, #12]
 80060e2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	4a1b      	ldr	r2, [pc, #108]	@ (8006158 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80060ea:	4293      	cmp	r3, r2
 80060ec:	d018      	beq.n	8006120 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80060f6:	d013      	beq.n	8006120 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	4a18      	ldr	r2, [pc, #96]	@ (8006160 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d00e      	beq.n	8006120 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	4a17      	ldr	r2, [pc, #92]	@ (8006164 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006108:	4293      	cmp	r3, r2
 800610a:	d009      	beq.n	8006120 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	4a12      	ldr	r2, [pc, #72]	@ (800615c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006112:	4293      	cmp	r3, r2
 8006114:	d004      	beq.n	8006120 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	4a13      	ldr	r2, [pc, #76]	@ (8006168 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800611c:	4293      	cmp	r3, r2
 800611e:	d10c      	bne.n	800613a <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006120:	68bb      	ldr	r3, [r7, #8]
 8006122:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006126:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	689b      	ldr	r3, [r3, #8]
 800612c:	68ba      	ldr	r2, [r7, #8]
 800612e:	4313      	orrs	r3, r2
 8006130:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	68ba      	ldr	r2, [r7, #8]
 8006138:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2201      	movs	r2, #1
 800613e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2200      	movs	r2, #0
 8006146:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800614a:	2300      	movs	r3, #0
}
 800614c:	4618      	mov	r0, r3
 800614e:	3714      	adds	r7, #20
 8006150:	46bd      	mov	sp, r7
 8006152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006156:	4770      	bx	lr
 8006158:	40012c00 	.word	0x40012c00
 800615c:	40013400 	.word	0x40013400
 8006160:	40000400 	.word	0x40000400
 8006164:	40000800 	.word	0x40000800
 8006168:	40014000 	.word	0x40014000

0800616c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800616c:	b480      	push	{r7}
 800616e:	b083      	sub	sp, #12
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006174:	bf00      	nop
 8006176:	370c      	adds	r7, #12
 8006178:	46bd      	mov	sp, r7
 800617a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617e:	4770      	bx	lr

08006180 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006180:	b480      	push	{r7}
 8006182:	b083      	sub	sp, #12
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006188:	bf00      	nop
 800618a:	370c      	adds	r7, #12
 800618c:	46bd      	mov	sp, r7
 800618e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006192:	4770      	bx	lr

08006194 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006194:	b480      	push	{r7}
 8006196:	b083      	sub	sp, #12
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800619c:	bf00      	nop
 800619e:	370c      	adds	r7, #12
 80061a0:	46bd      	mov	sp, r7
 80061a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a6:	4770      	bx	lr

080061a8 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80061a8:	b480      	push	{r7}
 80061aa:	b083      	sub	sp, #12
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80061b0:	bf00      	nop
 80061b2:	370c      	adds	r7, #12
 80061b4:	46bd      	mov	sp, r7
 80061b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ba:	4770      	bx	lr

080061bc <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80061bc:	b480      	push	{r7}
 80061be:	b083      	sub	sp, #12
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80061c4:	bf00      	nop
 80061c6:	370c      	adds	r7, #12
 80061c8:	46bd      	mov	sp, r7
 80061ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ce:	4770      	bx	lr

080061d0 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80061d0:	b480      	push	{r7}
 80061d2:	b083      	sub	sp, #12
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80061d8:	bf00      	nop
 80061da:	370c      	adds	r7, #12
 80061dc:	46bd      	mov	sp, r7
 80061de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e2:	4770      	bx	lr

080061e4 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80061e4:	b480      	push	{r7}
 80061e6:	b083      	sub	sp, #12
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80061ec:	bf00      	nop
 80061ee:	370c      	adds	r7, #12
 80061f0:	46bd      	mov	sp, r7
 80061f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f6:	4770      	bx	lr

080061f8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b082      	sub	sp, #8
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d101      	bne.n	800620a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006206:	2301      	movs	r3, #1
 8006208:	e042      	b.n	8006290 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006210:	2b00      	cmp	r3, #0
 8006212:	d106      	bne.n	8006222 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2200      	movs	r2, #0
 8006218:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800621c:	6878      	ldr	r0, [r7, #4]
 800621e:	f7fb fdb1 	bl	8001d84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2224      	movs	r2, #36	@ 0x24
 8006226:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	681a      	ldr	r2, [r3, #0]
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f022 0201 	bic.w	r2, r2, #1
 8006238:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800623e:	2b00      	cmp	r3, #0
 8006240:	d002      	beq.n	8006248 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006242:	6878      	ldr	r0, [r7, #4]
 8006244:	f000 fee8 	bl	8007018 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006248:	6878      	ldr	r0, [r7, #4]
 800624a:	f000 fc19 	bl	8006a80 <UART_SetConfig>
 800624e:	4603      	mov	r3, r0
 8006250:	2b01      	cmp	r3, #1
 8006252:	d101      	bne.n	8006258 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006254:	2301      	movs	r3, #1
 8006256:	e01b      	b.n	8006290 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	685a      	ldr	r2, [r3, #4]
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006266:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	689a      	ldr	r2, [r3, #8]
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006276:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	681a      	ldr	r2, [r3, #0]
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f042 0201 	orr.w	r2, r2, #1
 8006286:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006288:	6878      	ldr	r0, [r7, #4]
 800628a:	f000 ff67 	bl	800715c <UART_CheckIdleState>
 800628e:	4603      	mov	r3, r0
}
 8006290:	4618      	mov	r0, r3
 8006292:	3708      	adds	r7, #8
 8006294:	46bd      	mov	sp, r7
 8006296:	bd80      	pop	{r7, pc}

08006298 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006298:	b480      	push	{r7}
 800629a:	b091      	sub	sp, #68	@ 0x44
 800629c:	af00      	add	r7, sp, #0
 800629e:	60f8      	str	r0, [r7, #12]
 80062a0:	60b9      	str	r1, [r7, #8]
 80062a2:	4613      	mov	r3, r2
 80062a4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062ac:	2b20      	cmp	r3, #32
 80062ae:	d178      	bne.n	80063a2 <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80062b0:	68bb      	ldr	r3, [r7, #8]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d002      	beq.n	80062bc <HAL_UART_Transmit_IT+0x24>
 80062b6:	88fb      	ldrh	r3, [r7, #6]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d101      	bne.n	80062c0 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 80062bc:	2301      	movs	r3, #1
 80062be:	e071      	b.n	80063a4 <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	68ba      	ldr	r2, [r7, #8]
 80062c4:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	88fa      	ldrh	r2, [r7, #6]
 80062ca:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	88fa      	ldrh	r2, [r7, #6]
 80062d2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    huart->TxISR       = NULL;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	2200      	movs	r2, #0
 80062da:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	2200      	movs	r2, #0
 80062e0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	2221      	movs	r2, #33	@ 0x21
 80062e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80062f0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80062f4:	d12a      	bne.n	800634c <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	689b      	ldr	r3, [r3, #8]
 80062fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80062fe:	d107      	bne.n	8006310 <HAL_UART_Transmit_IT+0x78>
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	691b      	ldr	r3, [r3, #16]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d103      	bne.n	8006310 <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	4a29      	ldr	r2, [pc, #164]	@ (80063b0 <HAL_UART_Transmit_IT+0x118>)
 800630c:	679a      	str	r2, [r3, #120]	@ 0x78
 800630e:	e002      	b.n	8006316 <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	4a28      	ldr	r2, [pc, #160]	@ (80063b4 <HAL_UART_Transmit_IT+0x11c>)
 8006314:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	3308      	adds	r3, #8
 800631c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800631e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006320:	e853 3f00 	ldrex	r3, [r3]
 8006324:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006328:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800632c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	3308      	adds	r3, #8
 8006334:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006336:	637a      	str	r2, [r7, #52]	@ 0x34
 8006338:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800633a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800633c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800633e:	e841 2300 	strex	r3, r2, [r1]
 8006342:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8006344:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006346:	2b00      	cmp	r3, #0
 8006348:	d1e5      	bne.n	8006316 <HAL_UART_Transmit_IT+0x7e>
 800634a:	e028      	b.n	800639e <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	689b      	ldr	r3, [r3, #8]
 8006350:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006354:	d107      	bne.n	8006366 <HAL_UART_Transmit_IT+0xce>
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	691b      	ldr	r3, [r3, #16]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d103      	bne.n	8006366 <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	4a15      	ldr	r2, [pc, #84]	@ (80063b8 <HAL_UART_Transmit_IT+0x120>)
 8006362:	679a      	str	r2, [r3, #120]	@ 0x78
 8006364:	e002      	b.n	800636c <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	4a14      	ldr	r2, [pc, #80]	@ (80063bc <HAL_UART_Transmit_IT+0x124>)
 800636a:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006372:	697b      	ldr	r3, [r7, #20]
 8006374:	e853 3f00 	ldrex	r3, [r3]
 8006378:	613b      	str	r3, [r7, #16]
   return(result);
 800637a:	693b      	ldr	r3, [r7, #16]
 800637c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006380:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	461a      	mov	r2, r3
 8006388:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800638a:	623b      	str	r3, [r7, #32]
 800638c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800638e:	69f9      	ldr	r1, [r7, #28]
 8006390:	6a3a      	ldr	r2, [r7, #32]
 8006392:	e841 2300 	strex	r3, r2, [r1]
 8006396:	61bb      	str	r3, [r7, #24]
   return(result);
 8006398:	69bb      	ldr	r3, [r7, #24]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d1e6      	bne.n	800636c <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 800639e:	2300      	movs	r3, #0
 80063a0:	e000      	b.n	80063a4 <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80063a2:	2302      	movs	r3, #2
  }
}
 80063a4:	4618      	mov	r0, r3
 80063a6:	3744      	adds	r7, #68	@ 0x44
 80063a8:	46bd      	mov	sp, r7
 80063aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ae:	4770      	bx	lr
 80063b0:	08007a8f 	.word	0x08007a8f
 80063b4:	080079af 	.word	0x080079af
 80063b8:	080078ed 	.word	0x080078ed
 80063bc:	08007835 	.word	0x08007835

080063c0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b0ba      	sub	sp, #232	@ 0xe8
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	69db      	ldr	r3, [r3, #28]
 80063ce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	689b      	ldr	r3, [r3, #8]
 80063e2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80063e6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80063ea:	f640 030f 	movw	r3, #2063	@ 0x80f
 80063ee:	4013      	ands	r3, r2
 80063f0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80063f4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d11b      	bne.n	8006434 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80063fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006400:	f003 0320 	and.w	r3, r3, #32
 8006404:	2b00      	cmp	r3, #0
 8006406:	d015      	beq.n	8006434 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006408:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800640c:	f003 0320 	and.w	r3, r3, #32
 8006410:	2b00      	cmp	r3, #0
 8006412:	d105      	bne.n	8006420 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006414:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006418:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800641c:	2b00      	cmp	r3, #0
 800641e:	d009      	beq.n	8006434 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006424:	2b00      	cmp	r3, #0
 8006426:	f000 8300 	beq.w	8006a2a <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800642e:	6878      	ldr	r0, [r7, #4]
 8006430:	4798      	blx	r3
      }
      return;
 8006432:	e2fa      	b.n	8006a2a <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006434:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006438:	2b00      	cmp	r3, #0
 800643a:	f000 8123 	beq.w	8006684 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800643e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006442:	4b8d      	ldr	r3, [pc, #564]	@ (8006678 <HAL_UART_IRQHandler+0x2b8>)
 8006444:	4013      	ands	r3, r2
 8006446:	2b00      	cmp	r3, #0
 8006448:	d106      	bne.n	8006458 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800644a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800644e:	4b8b      	ldr	r3, [pc, #556]	@ (800667c <HAL_UART_IRQHandler+0x2bc>)
 8006450:	4013      	ands	r3, r2
 8006452:	2b00      	cmp	r3, #0
 8006454:	f000 8116 	beq.w	8006684 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006458:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800645c:	f003 0301 	and.w	r3, r3, #1
 8006460:	2b00      	cmp	r3, #0
 8006462:	d011      	beq.n	8006488 <HAL_UART_IRQHandler+0xc8>
 8006464:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006468:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800646c:	2b00      	cmp	r3, #0
 800646e:	d00b      	beq.n	8006488 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	2201      	movs	r2, #1
 8006476:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800647e:	f043 0201 	orr.w	r2, r3, #1
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006488:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800648c:	f003 0302 	and.w	r3, r3, #2
 8006490:	2b00      	cmp	r3, #0
 8006492:	d011      	beq.n	80064b8 <HAL_UART_IRQHandler+0xf8>
 8006494:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006498:	f003 0301 	and.w	r3, r3, #1
 800649c:	2b00      	cmp	r3, #0
 800649e:	d00b      	beq.n	80064b8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	2202      	movs	r2, #2
 80064a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80064ae:	f043 0204 	orr.w	r2, r3, #4
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80064b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80064bc:	f003 0304 	and.w	r3, r3, #4
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d011      	beq.n	80064e8 <HAL_UART_IRQHandler+0x128>
 80064c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80064c8:	f003 0301 	and.w	r3, r3, #1
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d00b      	beq.n	80064e8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	2204      	movs	r2, #4
 80064d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80064de:	f043 0202 	orr.w	r2, r3, #2
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80064e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80064ec:	f003 0308 	and.w	r3, r3, #8
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d017      	beq.n	8006524 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80064f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80064f8:	f003 0320 	and.w	r3, r3, #32
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d105      	bne.n	800650c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006500:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006504:	4b5c      	ldr	r3, [pc, #368]	@ (8006678 <HAL_UART_IRQHandler+0x2b8>)
 8006506:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006508:	2b00      	cmp	r3, #0
 800650a:	d00b      	beq.n	8006524 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	2208      	movs	r2, #8
 8006512:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800651a:	f043 0208 	orr.w	r2, r3, #8
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006524:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006528:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800652c:	2b00      	cmp	r3, #0
 800652e:	d012      	beq.n	8006556 <HAL_UART_IRQHandler+0x196>
 8006530:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006534:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006538:	2b00      	cmp	r3, #0
 800653a:	d00c      	beq.n	8006556 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006544:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800654c:	f043 0220 	orr.w	r2, r3, #32
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800655c:	2b00      	cmp	r3, #0
 800655e:	f000 8266 	beq.w	8006a2e <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006562:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006566:	f003 0320 	and.w	r3, r3, #32
 800656a:	2b00      	cmp	r3, #0
 800656c:	d013      	beq.n	8006596 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800656e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006572:	f003 0320 	and.w	r3, r3, #32
 8006576:	2b00      	cmp	r3, #0
 8006578:	d105      	bne.n	8006586 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800657a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800657e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006582:	2b00      	cmp	r3, #0
 8006584:	d007      	beq.n	8006596 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800658a:	2b00      	cmp	r3, #0
 800658c:	d003      	beq.n	8006596 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006592:	6878      	ldr	r0, [r7, #4]
 8006594:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800659c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	689b      	ldr	r3, [r3, #8]
 80065a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065aa:	2b40      	cmp	r3, #64	@ 0x40
 80065ac:	d005      	beq.n	80065ba <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80065ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80065b2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d054      	beq.n	8006664 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80065ba:	6878      	ldr	r0, [r7, #4]
 80065bc:	f000 ffcd 	bl	800755a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	689b      	ldr	r3, [r3, #8]
 80065c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065ca:	2b40      	cmp	r3, #64	@ 0x40
 80065cc:	d146      	bne.n	800665c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	3308      	adds	r3, #8
 80065d4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80065dc:	e853 3f00 	ldrex	r3, [r3]
 80065e0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80065e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80065e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80065ec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	3308      	adds	r3, #8
 80065f6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80065fa:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80065fe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006602:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006606:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800660a:	e841 2300 	strex	r3, r2, [r1]
 800660e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006612:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006616:	2b00      	cmp	r3, #0
 8006618:	d1d9      	bne.n	80065ce <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006620:	2b00      	cmp	r3, #0
 8006622:	d017      	beq.n	8006654 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800662a:	4a15      	ldr	r2, [pc, #84]	@ (8006680 <HAL_UART_IRQHandler+0x2c0>)
 800662c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006634:	4618      	mov	r0, r3
 8006636:	f7fc f84b 	bl	80026d0 <HAL_DMA_Abort_IT>
 800663a:	4603      	mov	r3, r0
 800663c:	2b00      	cmp	r3, #0
 800663e:	d019      	beq.n	8006674 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006646:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006648:	687a      	ldr	r2, [r7, #4]
 800664a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800664e:	4610      	mov	r0, r2
 8006650:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006652:	e00f      	b.n	8006674 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006654:	6878      	ldr	r0, [r7, #4]
 8006656:	f000 fa09 	bl	8006a6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800665a:	e00b      	b.n	8006674 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800665c:	6878      	ldr	r0, [r7, #4]
 800665e:	f000 fa05 	bl	8006a6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006662:	e007      	b.n	8006674 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006664:	6878      	ldr	r0, [r7, #4]
 8006666:	f000 fa01 	bl	8006a6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	2200      	movs	r2, #0
 800666e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8006672:	e1dc      	b.n	8006a2e <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006674:	bf00      	nop
    return;
 8006676:	e1da      	b.n	8006a2e <HAL_UART_IRQHandler+0x66e>
 8006678:	10000001 	.word	0x10000001
 800667c:	04000120 	.word	0x04000120
 8006680:	08007811 	.word	0x08007811

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006688:	2b01      	cmp	r3, #1
 800668a:	f040 8170 	bne.w	800696e <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800668e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006692:	f003 0310 	and.w	r3, r3, #16
 8006696:	2b00      	cmp	r3, #0
 8006698:	f000 8169 	beq.w	800696e <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800669c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80066a0:	f003 0310 	and.w	r3, r3, #16
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	f000 8162 	beq.w	800696e <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	2210      	movs	r2, #16
 80066b0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	689b      	ldr	r3, [r3, #8]
 80066b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066bc:	2b40      	cmp	r3, #64	@ 0x40
 80066be:	f040 80d8 	bne.w	8006872 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	685b      	ldr	r3, [r3, #4]
 80066cc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80066d0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	f000 80af 	beq.w	8006838 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80066e0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80066e4:	429a      	cmp	r2, r3
 80066e6:	f080 80a7 	bcs.w	8006838 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80066f0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f003 0320 	and.w	r3, r3, #32
 8006702:	2b00      	cmp	r3, #0
 8006704:	f040 8087 	bne.w	8006816 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006710:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006714:	e853 3f00 	ldrex	r3, [r3]
 8006718:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800671c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006720:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006724:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	461a      	mov	r2, r3
 800672e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006732:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006736:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800673a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800673e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006742:	e841 2300 	strex	r3, r2, [r1]
 8006746:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800674a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800674e:	2b00      	cmp	r3, #0
 8006750:	d1da      	bne.n	8006708 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	3308      	adds	r3, #8
 8006758:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800675a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800675c:	e853 3f00 	ldrex	r3, [r3]
 8006760:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006762:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006764:	f023 0301 	bic.w	r3, r3, #1
 8006768:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	3308      	adds	r3, #8
 8006772:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006776:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800677a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800677c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800677e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006782:	e841 2300 	strex	r3, r2, [r1]
 8006786:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006788:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800678a:	2b00      	cmp	r3, #0
 800678c:	d1e1      	bne.n	8006752 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	3308      	adds	r3, #8
 8006794:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006796:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006798:	e853 3f00 	ldrex	r3, [r3]
 800679c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800679e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80067a0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80067a4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	3308      	adds	r3, #8
 80067ae:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80067b2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80067b4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067b6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80067b8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80067ba:	e841 2300 	strex	r3, r2, [r1]
 80067be:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80067c0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d1e3      	bne.n	800678e <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2220      	movs	r2, #32
 80067ca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2200      	movs	r2, #0
 80067d2:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80067dc:	e853 3f00 	ldrex	r3, [r3]
 80067e0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80067e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80067e4:	f023 0310 	bic.w	r3, r3, #16
 80067e8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	461a      	mov	r2, r3
 80067f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80067f6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80067f8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067fa:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80067fc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80067fe:	e841 2300 	strex	r3, r2, [r1]
 8006802:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006804:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006806:	2b00      	cmp	r3, #0
 8006808:	d1e4      	bne.n	80067d4 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006810:	4618      	mov	r0, r3
 8006812:	f7fb ff04 	bl	800261e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2202      	movs	r2, #2
 800681a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006828:	b29b      	uxth	r3, r3
 800682a:	1ad3      	subs	r3, r2, r3
 800682c:	b29b      	uxth	r3, r3
 800682e:	4619      	mov	r1, r3
 8006830:	6878      	ldr	r0, [r7, #4]
 8006832:	f7fb f8b1 	bl	8001998 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8006836:	e0fc      	b.n	8006a32 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800683e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006842:	429a      	cmp	r2, r3
 8006844:	f040 80f5 	bne.w	8006a32 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f003 0320 	and.w	r3, r3, #32
 8006856:	2b20      	cmp	r3, #32
 8006858:	f040 80eb 	bne.w	8006a32 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2202      	movs	r2, #2
 8006860:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006868:	4619      	mov	r1, r3
 800686a:	6878      	ldr	r0, [r7, #4]
 800686c:	f7fb f894 	bl	8001998 <HAL_UARTEx_RxEventCallback>
      return;
 8006870:	e0df      	b.n	8006a32 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800687e:	b29b      	uxth	r3, r3
 8006880:	1ad3      	subs	r3, r2, r3
 8006882:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800688c:	b29b      	uxth	r3, r3
 800688e:	2b00      	cmp	r3, #0
 8006890:	f000 80d1 	beq.w	8006a36 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8006894:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006898:	2b00      	cmp	r3, #0
 800689a:	f000 80cc 	beq.w	8006a36 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068a6:	e853 3f00 	ldrex	r3, [r3]
 80068aa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80068ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80068ae:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80068b2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	461a      	mov	r2, r3
 80068bc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80068c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80068c2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068c4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80068c6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80068c8:	e841 2300 	strex	r3, r2, [r1]
 80068cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80068ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d1e4      	bne.n	800689e <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	3308      	adds	r3, #8
 80068da:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068de:	e853 3f00 	ldrex	r3, [r3]
 80068e2:	623b      	str	r3, [r7, #32]
   return(result);
 80068e4:	6a3b      	ldr	r3, [r7, #32]
 80068e6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80068ea:	f023 0301 	bic.w	r3, r3, #1
 80068ee:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	3308      	adds	r3, #8
 80068f8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80068fc:	633a      	str	r2, [r7, #48]	@ 0x30
 80068fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006900:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006902:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006904:	e841 2300 	strex	r3, r2, [r1]
 8006908:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800690a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800690c:	2b00      	cmp	r3, #0
 800690e:	d1e1      	bne.n	80068d4 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2220      	movs	r2, #32
 8006914:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2200      	movs	r2, #0
 800691c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2200      	movs	r2, #0
 8006922:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800692a:	693b      	ldr	r3, [r7, #16]
 800692c:	e853 3f00 	ldrex	r3, [r3]
 8006930:	60fb      	str	r3, [r7, #12]
   return(result);
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	f023 0310 	bic.w	r3, r3, #16
 8006938:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	461a      	mov	r2, r3
 8006942:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006946:	61fb      	str	r3, [r7, #28]
 8006948:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800694a:	69b9      	ldr	r1, [r7, #24]
 800694c:	69fa      	ldr	r2, [r7, #28]
 800694e:	e841 2300 	strex	r3, r2, [r1]
 8006952:	617b      	str	r3, [r7, #20]
   return(result);
 8006954:	697b      	ldr	r3, [r7, #20]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d1e4      	bne.n	8006924 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	2202      	movs	r2, #2
 800695e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006960:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006964:	4619      	mov	r1, r3
 8006966:	6878      	ldr	r0, [r7, #4]
 8006968:	f7fb f816 	bl	8001998 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800696c:	e063      	b.n	8006a36 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800696e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006972:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006976:	2b00      	cmp	r3, #0
 8006978:	d00e      	beq.n	8006998 <HAL_UART_IRQHandler+0x5d8>
 800697a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800697e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006982:	2b00      	cmp	r3, #0
 8006984:	d008      	beq.n	8006998 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800698e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006990:	6878      	ldr	r0, [r7, #4]
 8006992:	f001 f91c 	bl	8007bce <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006996:	e051      	b.n	8006a3c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006998:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800699c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d014      	beq.n	80069ce <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80069a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80069a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d105      	bne.n	80069bc <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80069b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80069b4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d008      	beq.n	80069ce <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d03a      	beq.n	8006a3a <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80069c8:	6878      	ldr	r0, [r7, #4]
 80069ca:	4798      	blx	r3
    }
    return;
 80069cc:	e035      	b.n	8006a3a <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80069ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80069d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d009      	beq.n	80069ee <HAL_UART_IRQHandler+0x62e>
 80069da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80069de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d003      	beq.n	80069ee <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 80069e6:	6878      	ldr	r0, [r7, #4]
 80069e8:	f001 f8c6 	bl	8007b78 <UART_EndTransmit_IT>
    return;
 80069ec:	e026      	b.n	8006a3c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80069ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80069f2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d009      	beq.n	8006a0e <HAL_UART_IRQHandler+0x64e>
 80069fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80069fe:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d003      	beq.n	8006a0e <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006a06:	6878      	ldr	r0, [r7, #4]
 8006a08:	f001 f8f5 	bl	8007bf6 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006a0c:	e016      	b.n	8006a3c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006a0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a12:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d010      	beq.n	8006a3c <HAL_UART_IRQHandler+0x67c>
 8006a1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	da0c      	bge.n	8006a3c <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006a22:	6878      	ldr	r0, [r7, #4]
 8006a24:	f001 f8dd 	bl	8007be2 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006a28:	e008      	b.n	8006a3c <HAL_UART_IRQHandler+0x67c>
      return;
 8006a2a:	bf00      	nop
 8006a2c:	e006      	b.n	8006a3c <HAL_UART_IRQHandler+0x67c>
    return;
 8006a2e:	bf00      	nop
 8006a30:	e004      	b.n	8006a3c <HAL_UART_IRQHandler+0x67c>
      return;
 8006a32:	bf00      	nop
 8006a34:	e002      	b.n	8006a3c <HAL_UART_IRQHandler+0x67c>
      return;
 8006a36:	bf00      	nop
 8006a38:	e000      	b.n	8006a3c <HAL_UART_IRQHandler+0x67c>
    return;
 8006a3a:	bf00      	nop
  }
}
 8006a3c:	37e8      	adds	r7, #232	@ 0xe8
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	bd80      	pop	{r7, pc}
 8006a42:	bf00      	nop

08006a44 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006a44:	b480      	push	{r7}
 8006a46:	b083      	sub	sp, #12
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8006a4c:	bf00      	nop
 8006a4e:	370c      	adds	r7, #12
 8006a50:	46bd      	mov	sp, r7
 8006a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a56:	4770      	bx	lr

08006a58 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006a58:	b480      	push	{r7}
 8006a5a:	b083      	sub	sp, #12
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8006a60:	bf00      	nop
 8006a62:	370c      	adds	r7, #12
 8006a64:	46bd      	mov	sp, r7
 8006a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6a:	4770      	bx	lr

08006a6c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006a6c:	b480      	push	{r7}
 8006a6e:	b083      	sub	sp, #12
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006a74:	bf00      	nop
 8006a76:	370c      	adds	r7, #12
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7e:	4770      	bx	lr

08006a80 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006a80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006a84:	b08c      	sub	sp, #48	@ 0x30
 8006a86:	af00      	add	r7, sp, #0
 8006a88:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006a90:	697b      	ldr	r3, [r7, #20]
 8006a92:	689a      	ldr	r2, [r3, #8]
 8006a94:	697b      	ldr	r3, [r7, #20]
 8006a96:	691b      	ldr	r3, [r3, #16]
 8006a98:	431a      	orrs	r2, r3
 8006a9a:	697b      	ldr	r3, [r7, #20]
 8006a9c:	695b      	ldr	r3, [r3, #20]
 8006a9e:	431a      	orrs	r2, r3
 8006aa0:	697b      	ldr	r3, [r7, #20]
 8006aa2:	69db      	ldr	r3, [r3, #28]
 8006aa4:	4313      	orrs	r3, r2
 8006aa6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006aa8:	697b      	ldr	r3, [r7, #20]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	681a      	ldr	r2, [r3, #0]
 8006aae:	4bab      	ldr	r3, [pc, #684]	@ (8006d5c <UART_SetConfig+0x2dc>)
 8006ab0:	4013      	ands	r3, r2
 8006ab2:	697a      	ldr	r2, [r7, #20]
 8006ab4:	6812      	ldr	r2, [r2, #0]
 8006ab6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006ab8:	430b      	orrs	r3, r1
 8006aba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006abc:	697b      	ldr	r3, [r7, #20]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	685b      	ldr	r3, [r3, #4]
 8006ac2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006ac6:	697b      	ldr	r3, [r7, #20]
 8006ac8:	68da      	ldr	r2, [r3, #12]
 8006aca:	697b      	ldr	r3, [r7, #20]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	430a      	orrs	r2, r1
 8006ad0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006ad2:	697b      	ldr	r3, [r7, #20]
 8006ad4:	699b      	ldr	r3, [r3, #24]
 8006ad6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006ad8:	697b      	ldr	r3, [r7, #20]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	4aa0      	ldr	r2, [pc, #640]	@ (8006d60 <UART_SetConfig+0x2e0>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d004      	beq.n	8006aec <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006ae2:	697b      	ldr	r3, [r7, #20]
 8006ae4:	6a1b      	ldr	r3, [r3, #32]
 8006ae6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006ae8:	4313      	orrs	r3, r2
 8006aea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006aec:	697b      	ldr	r3, [r7, #20]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	689b      	ldr	r3, [r3, #8]
 8006af2:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8006af6:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8006afa:	697a      	ldr	r2, [r7, #20]
 8006afc:	6812      	ldr	r2, [r2, #0]
 8006afe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006b00:	430b      	orrs	r3, r1
 8006b02:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006b04:	697b      	ldr	r3, [r7, #20]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b0a:	f023 010f 	bic.w	r1, r3, #15
 8006b0e:	697b      	ldr	r3, [r7, #20]
 8006b10:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006b12:	697b      	ldr	r3, [r7, #20]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	430a      	orrs	r2, r1
 8006b18:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006b1a:	697b      	ldr	r3, [r7, #20]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	4a91      	ldr	r2, [pc, #580]	@ (8006d64 <UART_SetConfig+0x2e4>)
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d125      	bne.n	8006b70 <UART_SetConfig+0xf0>
 8006b24:	4b90      	ldr	r3, [pc, #576]	@ (8006d68 <UART_SetConfig+0x2e8>)
 8006b26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b2a:	f003 0303 	and.w	r3, r3, #3
 8006b2e:	2b03      	cmp	r3, #3
 8006b30:	d81a      	bhi.n	8006b68 <UART_SetConfig+0xe8>
 8006b32:	a201      	add	r2, pc, #4	@ (adr r2, 8006b38 <UART_SetConfig+0xb8>)
 8006b34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b38:	08006b49 	.word	0x08006b49
 8006b3c:	08006b59 	.word	0x08006b59
 8006b40:	08006b51 	.word	0x08006b51
 8006b44:	08006b61 	.word	0x08006b61
 8006b48:	2301      	movs	r3, #1
 8006b4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b4e:	e0d6      	b.n	8006cfe <UART_SetConfig+0x27e>
 8006b50:	2302      	movs	r3, #2
 8006b52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b56:	e0d2      	b.n	8006cfe <UART_SetConfig+0x27e>
 8006b58:	2304      	movs	r3, #4
 8006b5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b5e:	e0ce      	b.n	8006cfe <UART_SetConfig+0x27e>
 8006b60:	2308      	movs	r3, #8
 8006b62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b66:	e0ca      	b.n	8006cfe <UART_SetConfig+0x27e>
 8006b68:	2310      	movs	r3, #16
 8006b6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b6e:	e0c6      	b.n	8006cfe <UART_SetConfig+0x27e>
 8006b70:	697b      	ldr	r3, [r7, #20]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	4a7d      	ldr	r2, [pc, #500]	@ (8006d6c <UART_SetConfig+0x2ec>)
 8006b76:	4293      	cmp	r3, r2
 8006b78:	d138      	bne.n	8006bec <UART_SetConfig+0x16c>
 8006b7a:	4b7b      	ldr	r3, [pc, #492]	@ (8006d68 <UART_SetConfig+0x2e8>)
 8006b7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b80:	f003 030c 	and.w	r3, r3, #12
 8006b84:	2b0c      	cmp	r3, #12
 8006b86:	d82d      	bhi.n	8006be4 <UART_SetConfig+0x164>
 8006b88:	a201      	add	r2, pc, #4	@ (adr r2, 8006b90 <UART_SetConfig+0x110>)
 8006b8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b8e:	bf00      	nop
 8006b90:	08006bc5 	.word	0x08006bc5
 8006b94:	08006be5 	.word	0x08006be5
 8006b98:	08006be5 	.word	0x08006be5
 8006b9c:	08006be5 	.word	0x08006be5
 8006ba0:	08006bd5 	.word	0x08006bd5
 8006ba4:	08006be5 	.word	0x08006be5
 8006ba8:	08006be5 	.word	0x08006be5
 8006bac:	08006be5 	.word	0x08006be5
 8006bb0:	08006bcd 	.word	0x08006bcd
 8006bb4:	08006be5 	.word	0x08006be5
 8006bb8:	08006be5 	.word	0x08006be5
 8006bbc:	08006be5 	.word	0x08006be5
 8006bc0:	08006bdd 	.word	0x08006bdd
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006bca:	e098      	b.n	8006cfe <UART_SetConfig+0x27e>
 8006bcc:	2302      	movs	r3, #2
 8006bce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006bd2:	e094      	b.n	8006cfe <UART_SetConfig+0x27e>
 8006bd4:	2304      	movs	r3, #4
 8006bd6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006bda:	e090      	b.n	8006cfe <UART_SetConfig+0x27e>
 8006bdc:	2308      	movs	r3, #8
 8006bde:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006be2:	e08c      	b.n	8006cfe <UART_SetConfig+0x27e>
 8006be4:	2310      	movs	r3, #16
 8006be6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006bea:	e088      	b.n	8006cfe <UART_SetConfig+0x27e>
 8006bec:	697b      	ldr	r3, [r7, #20]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	4a5f      	ldr	r2, [pc, #380]	@ (8006d70 <UART_SetConfig+0x2f0>)
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	d125      	bne.n	8006c42 <UART_SetConfig+0x1c2>
 8006bf6:	4b5c      	ldr	r3, [pc, #368]	@ (8006d68 <UART_SetConfig+0x2e8>)
 8006bf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006bfc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006c00:	2b30      	cmp	r3, #48	@ 0x30
 8006c02:	d016      	beq.n	8006c32 <UART_SetConfig+0x1b2>
 8006c04:	2b30      	cmp	r3, #48	@ 0x30
 8006c06:	d818      	bhi.n	8006c3a <UART_SetConfig+0x1ba>
 8006c08:	2b20      	cmp	r3, #32
 8006c0a:	d00a      	beq.n	8006c22 <UART_SetConfig+0x1a2>
 8006c0c:	2b20      	cmp	r3, #32
 8006c0e:	d814      	bhi.n	8006c3a <UART_SetConfig+0x1ba>
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d002      	beq.n	8006c1a <UART_SetConfig+0x19a>
 8006c14:	2b10      	cmp	r3, #16
 8006c16:	d008      	beq.n	8006c2a <UART_SetConfig+0x1aa>
 8006c18:	e00f      	b.n	8006c3a <UART_SetConfig+0x1ba>
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c20:	e06d      	b.n	8006cfe <UART_SetConfig+0x27e>
 8006c22:	2302      	movs	r3, #2
 8006c24:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c28:	e069      	b.n	8006cfe <UART_SetConfig+0x27e>
 8006c2a:	2304      	movs	r3, #4
 8006c2c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c30:	e065      	b.n	8006cfe <UART_SetConfig+0x27e>
 8006c32:	2308      	movs	r3, #8
 8006c34:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c38:	e061      	b.n	8006cfe <UART_SetConfig+0x27e>
 8006c3a:	2310      	movs	r3, #16
 8006c3c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c40:	e05d      	b.n	8006cfe <UART_SetConfig+0x27e>
 8006c42:	697b      	ldr	r3, [r7, #20]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	4a4b      	ldr	r2, [pc, #300]	@ (8006d74 <UART_SetConfig+0x2f4>)
 8006c48:	4293      	cmp	r3, r2
 8006c4a:	d125      	bne.n	8006c98 <UART_SetConfig+0x218>
 8006c4c:	4b46      	ldr	r3, [pc, #280]	@ (8006d68 <UART_SetConfig+0x2e8>)
 8006c4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c52:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006c56:	2bc0      	cmp	r3, #192	@ 0xc0
 8006c58:	d016      	beq.n	8006c88 <UART_SetConfig+0x208>
 8006c5a:	2bc0      	cmp	r3, #192	@ 0xc0
 8006c5c:	d818      	bhi.n	8006c90 <UART_SetConfig+0x210>
 8006c5e:	2b80      	cmp	r3, #128	@ 0x80
 8006c60:	d00a      	beq.n	8006c78 <UART_SetConfig+0x1f8>
 8006c62:	2b80      	cmp	r3, #128	@ 0x80
 8006c64:	d814      	bhi.n	8006c90 <UART_SetConfig+0x210>
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d002      	beq.n	8006c70 <UART_SetConfig+0x1f0>
 8006c6a:	2b40      	cmp	r3, #64	@ 0x40
 8006c6c:	d008      	beq.n	8006c80 <UART_SetConfig+0x200>
 8006c6e:	e00f      	b.n	8006c90 <UART_SetConfig+0x210>
 8006c70:	2300      	movs	r3, #0
 8006c72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c76:	e042      	b.n	8006cfe <UART_SetConfig+0x27e>
 8006c78:	2302      	movs	r3, #2
 8006c7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c7e:	e03e      	b.n	8006cfe <UART_SetConfig+0x27e>
 8006c80:	2304      	movs	r3, #4
 8006c82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c86:	e03a      	b.n	8006cfe <UART_SetConfig+0x27e>
 8006c88:	2308      	movs	r3, #8
 8006c8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c8e:	e036      	b.n	8006cfe <UART_SetConfig+0x27e>
 8006c90:	2310      	movs	r3, #16
 8006c92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c96:	e032      	b.n	8006cfe <UART_SetConfig+0x27e>
 8006c98:	697b      	ldr	r3, [r7, #20]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	4a30      	ldr	r2, [pc, #192]	@ (8006d60 <UART_SetConfig+0x2e0>)
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	d12a      	bne.n	8006cf8 <UART_SetConfig+0x278>
 8006ca2:	4b31      	ldr	r3, [pc, #196]	@ (8006d68 <UART_SetConfig+0x2e8>)
 8006ca4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ca8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006cac:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006cb0:	d01a      	beq.n	8006ce8 <UART_SetConfig+0x268>
 8006cb2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006cb6:	d81b      	bhi.n	8006cf0 <UART_SetConfig+0x270>
 8006cb8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006cbc:	d00c      	beq.n	8006cd8 <UART_SetConfig+0x258>
 8006cbe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006cc2:	d815      	bhi.n	8006cf0 <UART_SetConfig+0x270>
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d003      	beq.n	8006cd0 <UART_SetConfig+0x250>
 8006cc8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ccc:	d008      	beq.n	8006ce0 <UART_SetConfig+0x260>
 8006cce:	e00f      	b.n	8006cf0 <UART_SetConfig+0x270>
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006cd6:	e012      	b.n	8006cfe <UART_SetConfig+0x27e>
 8006cd8:	2302      	movs	r3, #2
 8006cda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006cde:	e00e      	b.n	8006cfe <UART_SetConfig+0x27e>
 8006ce0:	2304      	movs	r3, #4
 8006ce2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ce6:	e00a      	b.n	8006cfe <UART_SetConfig+0x27e>
 8006ce8:	2308      	movs	r3, #8
 8006cea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006cee:	e006      	b.n	8006cfe <UART_SetConfig+0x27e>
 8006cf0:	2310      	movs	r3, #16
 8006cf2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006cf6:	e002      	b.n	8006cfe <UART_SetConfig+0x27e>
 8006cf8:	2310      	movs	r3, #16
 8006cfa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006cfe:	697b      	ldr	r3, [r7, #20]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	4a17      	ldr	r2, [pc, #92]	@ (8006d60 <UART_SetConfig+0x2e0>)
 8006d04:	4293      	cmp	r3, r2
 8006d06:	f040 80a8 	bne.w	8006e5a <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006d0a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006d0e:	2b08      	cmp	r3, #8
 8006d10:	d834      	bhi.n	8006d7c <UART_SetConfig+0x2fc>
 8006d12:	a201      	add	r2, pc, #4	@ (adr r2, 8006d18 <UART_SetConfig+0x298>)
 8006d14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d18:	08006d3d 	.word	0x08006d3d
 8006d1c:	08006d7d 	.word	0x08006d7d
 8006d20:	08006d45 	.word	0x08006d45
 8006d24:	08006d7d 	.word	0x08006d7d
 8006d28:	08006d4b 	.word	0x08006d4b
 8006d2c:	08006d7d 	.word	0x08006d7d
 8006d30:	08006d7d 	.word	0x08006d7d
 8006d34:	08006d7d 	.word	0x08006d7d
 8006d38:	08006d53 	.word	0x08006d53
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d3c:	f7fe fac6 	bl	80052cc <HAL_RCC_GetPCLK1Freq>
 8006d40:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006d42:	e021      	b.n	8006d88 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006d44:	4b0c      	ldr	r3, [pc, #48]	@ (8006d78 <UART_SetConfig+0x2f8>)
 8006d46:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006d48:	e01e      	b.n	8006d88 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006d4a:	f7fe fa51 	bl	80051f0 <HAL_RCC_GetSysClockFreq>
 8006d4e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006d50:	e01a      	b.n	8006d88 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006d52:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006d56:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006d58:	e016      	b.n	8006d88 <UART_SetConfig+0x308>
 8006d5a:	bf00      	nop
 8006d5c:	cfff69f3 	.word	0xcfff69f3
 8006d60:	40008000 	.word	0x40008000
 8006d64:	40013800 	.word	0x40013800
 8006d68:	40021000 	.word	0x40021000
 8006d6c:	40004400 	.word	0x40004400
 8006d70:	40004800 	.word	0x40004800
 8006d74:	40004c00 	.word	0x40004c00
 8006d78:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006d80:	2301      	movs	r3, #1
 8006d82:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006d86:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006d88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	f000 812a 	beq.w	8006fe4 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006d90:	697b      	ldr	r3, [r7, #20]
 8006d92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d94:	4a9e      	ldr	r2, [pc, #632]	@ (8007010 <UART_SetConfig+0x590>)
 8006d96:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006d9a:	461a      	mov	r2, r3
 8006d9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d9e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006da2:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006da4:	697b      	ldr	r3, [r7, #20]
 8006da6:	685a      	ldr	r2, [r3, #4]
 8006da8:	4613      	mov	r3, r2
 8006daa:	005b      	lsls	r3, r3, #1
 8006dac:	4413      	add	r3, r2
 8006dae:	69ba      	ldr	r2, [r7, #24]
 8006db0:	429a      	cmp	r2, r3
 8006db2:	d305      	bcc.n	8006dc0 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006db4:	697b      	ldr	r3, [r7, #20]
 8006db6:	685b      	ldr	r3, [r3, #4]
 8006db8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006dba:	69ba      	ldr	r2, [r7, #24]
 8006dbc:	429a      	cmp	r2, r3
 8006dbe:	d903      	bls.n	8006dc8 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8006dc0:	2301      	movs	r3, #1
 8006dc2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006dc6:	e10d      	b.n	8006fe4 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006dc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dca:	2200      	movs	r2, #0
 8006dcc:	60bb      	str	r3, [r7, #8]
 8006dce:	60fa      	str	r2, [r7, #12]
 8006dd0:	697b      	ldr	r3, [r7, #20]
 8006dd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dd4:	4a8e      	ldr	r2, [pc, #568]	@ (8007010 <UART_SetConfig+0x590>)
 8006dd6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006dda:	b29b      	uxth	r3, r3
 8006ddc:	2200      	movs	r2, #0
 8006dde:	603b      	str	r3, [r7, #0]
 8006de0:	607a      	str	r2, [r7, #4]
 8006de2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006de6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006dea:	f7f9 fa69 	bl	80002c0 <__aeabi_uldivmod>
 8006dee:	4602      	mov	r2, r0
 8006df0:	460b      	mov	r3, r1
 8006df2:	4610      	mov	r0, r2
 8006df4:	4619      	mov	r1, r3
 8006df6:	f04f 0200 	mov.w	r2, #0
 8006dfa:	f04f 0300 	mov.w	r3, #0
 8006dfe:	020b      	lsls	r3, r1, #8
 8006e00:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006e04:	0202      	lsls	r2, r0, #8
 8006e06:	6979      	ldr	r1, [r7, #20]
 8006e08:	6849      	ldr	r1, [r1, #4]
 8006e0a:	0849      	lsrs	r1, r1, #1
 8006e0c:	2000      	movs	r0, #0
 8006e0e:	460c      	mov	r4, r1
 8006e10:	4605      	mov	r5, r0
 8006e12:	eb12 0804 	adds.w	r8, r2, r4
 8006e16:	eb43 0905 	adc.w	r9, r3, r5
 8006e1a:	697b      	ldr	r3, [r7, #20]
 8006e1c:	685b      	ldr	r3, [r3, #4]
 8006e1e:	2200      	movs	r2, #0
 8006e20:	469a      	mov	sl, r3
 8006e22:	4693      	mov	fp, r2
 8006e24:	4652      	mov	r2, sl
 8006e26:	465b      	mov	r3, fp
 8006e28:	4640      	mov	r0, r8
 8006e2a:	4649      	mov	r1, r9
 8006e2c:	f7f9 fa48 	bl	80002c0 <__aeabi_uldivmod>
 8006e30:	4602      	mov	r2, r0
 8006e32:	460b      	mov	r3, r1
 8006e34:	4613      	mov	r3, r2
 8006e36:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006e38:	6a3b      	ldr	r3, [r7, #32]
 8006e3a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006e3e:	d308      	bcc.n	8006e52 <UART_SetConfig+0x3d2>
 8006e40:	6a3b      	ldr	r3, [r7, #32]
 8006e42:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006e46:	d204      	bcs.n	8006e52 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8006e48:	697b      	ldr	r3, [r7, #20]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	6a3a      	ldr	r2, [r7, #32]
 8006e4e:	60da      	str	r2, [r3, #12]
 8006e50:	e0c8      	b.n	8006fe4 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8006e52:	2301      	movs	r3, #1
 8006e54:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006e58:	e0c4      	b.n	8006fe4 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006e5a:	697b      	ldr	r3, [r7, #20]
 8006e5c:	69db      	ldr	r3, [r3, #28]
 8006e5e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006e62:	d167      	bne.n	8006f34 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8006e64:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006e68:	2b08      	cmp	r3, #8
 8006e6a:	d828      	bhi.n	8006ebe <UART_SetConfig+0x43e>
 8006e6c:	a201      	add	r2, pc, #4	@ (adr r2, 8006e74 <UART_SetConfig+0x3f4>)
 8006e6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e72:	bf00      	nop
 8006e74:	08006e99 	.word	0x08006e99
 8006e78:	08006ea1 	.word	0x08006ea1
 8006e7c:	08006ea9 	.word	0x08006ea9
 8006e80:	08006ebf 	.word	0x08006ebf
 8006e84:	08006eaf 	.word	0x08006eaf
 8006e88:	08006ebf 	.word	0x08006ebf
 8006e8c:	08006ebf 	.word	0x08006ebf
 8006e90:	08006ebf 	.word	0x08006ebf
 8006e94:	08006eb7 	.word	0x08006eb7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e98:	f7fe fa18 	bl	80052cc <HAL_RCC_GetPCLK1Freq>
 8006e9c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006e9e:	e014      	b.n	8006eca <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006ea0:	f7fe fa2a 	bl	80052f8 <HAL_RCC_GetPCLK2Freq>
 8006ea4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006ea6:	e010      	b.n	8006eca <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006ea8:	4b5a      	ldr	r3, [pc, #360]	@ (8007014 <UART_SetConfig+0x594>)
 8006eaa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006eac:	e00d      	b.n	8006eca <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006eae:	f7fe f99f 	bl	80051f0 <HAL_RCC_GetSysClockFreq>
 8006eb2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006eb4:	e009      	b.n	8006eca <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006eb6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006eba:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006ebc:	e005      	b.n	8006eca <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006ec2:	2301      	movs	r3, #1
 8006ec4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006ec8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006eca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	f000 8089 	beq.w	8006fe4 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006ed2:	697b      	ldr	r3, [r7, #20]
 8006ed4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ed6:	4a4e      	ldr	r2, [pc, #312]	@ (8007010 <UART_SetConfig+0x590>)
 8006ed8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006edc:	461a      	mov	r2, r3
 8006ede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ee0:	fbb3 f3f2 	udiv	r3, r3, r2
 8006ee4:	005a      	lsls	r2, r3, #1
 8006ee6:	697b      	ldr	r3, [r7, #20]
 8006ee8:	685b      	ldr	r3, [r3, #4]
 8006eea:	085b      	lsrs	r3, r3, #1
 8006eec:	441a      	add	r2, r3
 8006eee:	697b      	ldr	r3, [r7, #20]
 8006ef0:	685b      	ldr	r3, [r3, #4]
 8006ef2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ef6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006ef8:	6a3b      	ldr	r3, [r7, #32]
 8006efa:	2b0f      	cmp	r3, #15
 8006efc:	d916      	bls.n	8006f2c <UART_SetConfig+0x4ac>
 8006efe:	6a3b      	ldr	r3, [r7, #32]
 8006f00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006f04:	d212      	bcs.n	8006f2c <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006f06:	6a3b      	ldr	r3, [r7, #32]
 8006f08:	b29b      	uxth	r3, r3
 8006f0a:	f023 030f 	bic.w	r3, r3, #15
 8006f0e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006f10:	6a3b      	ldr	r3, [r7, #32]
 8006f12:	085b      	lsrs	r3, r3, #1
 8006f14:	b29b      	uxth	r3, r3
 8006f16:	f003 0307 	and.w	r3, r3, #7
 8006f1a:	b29a      	uxth	r2, r3
 8006f1c:	8bfb      	ldrh	r3, [r7, #30]
 8006f1e:	4313      	orrs	r3, r2
 8006f20:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006f22:	697b      	ldr	r3, [r7, #20]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	8bfa      	ldrh	r2, [r7, #30]
 8006f28:	60da      	str	r2, [r3, #12]
 8006f2a:	e05b      	b.n	8006fe4 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8006f2c:	2301      	movs	r3, #1
 8006f2e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006f32:	e057      	b.n	8006fe4 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006f34:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006f38:	2b08      	cmp	r3, #8
 8006f3a:	d828      	bhi.n	8006f8e <UART_SetConfig+0x50e>
 8006f3c:	a201      	add	r2, pc, #4	@ (adr r2, 8006f44 <UART_SetConfig+0x4c4>)
 8006f3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f42:	bf00      	nop
 8006f44:	08006f69 	.word	0x08006f69
 8006f48:	08006f71 	.word	0x08006f71
 8006f4c:	08006f79 	.word	0x08006f79
 8006f50:	08006f8f 	.word	0x08006f8f
 8006f54:	08006f7f 	.word	0x08006f7f
 8006f58:	08006f8f 	.word	0x08006f8f
 8006f5c:	08006f8f 	.word	0x08006f8f
 8006f60:	08006f8f 	.word	0x08006f8f
 8006f64:	08006f87 	.word	0x08006f87
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f68:	f7fe f9b0 	bl	80052cc <HAL_RCC_GetPCLK1Freq>
 8006f6c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006f6e:	e014      	b.n	8006f9a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006f70:	f7fe f9c2 	bl	80052f8 <HAL_RCC_GetPCLK2Freq>
 8006f74:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006f76:	e010      	b.n	8006f9a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006f78:	4b26      	ldr	r3, [pc, #152]	@ (8007014 <UART_SetConfig+0x594>)
 8006f7a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006f7c:	e00d      	b.n	8006f9a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006f7e:	f7fe f937 	bl	80051f0 <HAL_RCC_GetSysClockFreq>
 8006f82:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006f84:	e009      	b.n	8006f9a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f86:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006f8a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006f8c:	e005      	b.n	8006f9a <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8006f8e:	2300      	movs	r3, #0
 8006f90:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006f92:	2301      	movs	r3, #1
 8006f94:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006f98:	bf00      	nop
    }

    if (pclk != 0U)
 8006f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d021      	beq.n	8006fe4 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006fa0:	697b      	ldr	r3, [r7, #20]
 8006fa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fa4:	4a1a      	ldr	r2, [pc, #104]	@ (8007010 <UART_SetConfig+0x590>)
 8006fa6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006faa:	461a      	mov	r2, r3
 8006fac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fae:	fbb3 f2f2 	udiv	r2, r3, r2
 8006fb2:	697b      	ldr	r3, [r7, #20]
 8006fb4:	685b      	ldr	r3, [r3, #4]
 8006fb6:	085b      	lsrs	r3, r3, #1
 8006fb8:	441a      	add	r2, r3
 8006fba:	697b      	ldr	r3, [r7, #20]
 8006fbc:	685b      	ldr	r3, [r3, #4]
 8006fbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fc2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006fc4:	6a3b      	ldr	r3, [r7, #32]
 8006fc6:	2b0f      	cmp	r3, #15
 8006fc8:	d909      	bls.n	8006fde <UART_SetConfig+0x55e>
 8006fca:	6a3b      	ldr	r3, [r7, #32]
 8006fcc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006fd0:	d205      	bcs.n	8006fde <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006fd2:	6a3b      	ldr	r3, [r7, #32]
 8006fd4:	b29a      	uxth	r2, r3
 8006fd6:	697b      	ldr	r3, [r7, #20]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	60da      	str	r2, [r3, #12]
 8006fdc:	e002      	b.n	8006fe4 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8006fde:	2301      	movs	r3, #1
 8006fe0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006fe4:	697b      	ldr	r3, [r7, #20]
 8006fe6:	2201      	movs	r2, #1
 8006fe8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006fec:	697b      	ldr	r3, [r7, #20]
 8006fee:	2201      	movs	r2, #1
 8006ff0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006ff4:	697b      	ldr	r3, [r7, #20]
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006ffa:	697b      	ldr	r3, [r7, #20]
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007000:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8007004:	4618      	mov	r0, r3
 8007006:	3730      	adds	r7, #48	@ 0x30
 8007008:	46bd      	mov	sp, r7
 800700a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800700e:	bf00      	nop
 8007010:	0800d094 	.word	0x0800d094
 8007014:	00f42400 	.word	0x00f42400

08007018 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007018:	b480      	push	{r7}
 800701a:	b083      	sub	sp, #12
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007024:	f003 0308 	and.w	r3, r3, #8
 8007028:	2b00      	cmp	r3, #0
 800702a:	d00a      	beq.n	8007042 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	685b      	ldr	r3, [r3, #4]
 8007032:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	430a      	orrs	r2, r1
 8007040:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007046:	f003 0301 	and.w	r3, r3, #1
 800704a:	2b00      	cmp	r3, #0
 800704c:	d00a      	beq.n	8007064 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	685b      	ldr	r3, [r3, #4]
 8007054:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	430a      	orrs	r2, r1
 8007062:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007068:	f003 0302 	and.w	r3, r3, #2
 800706c:	2b00      	cmp	r3, #0
 800706e:	d00a      	beq.n	8007086 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	685b      	ldr	r3, [r3, #4]
 8007076:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	430a      	orrs	r2, r1
 8007084:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800708a:	f003 0304 	and.w	r3, r3, #4
 800708e:	2b00      	cmp	r3, #0
 8007090:	d00a      	beq.n	80070a8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	685b      	ldr	r3, [r3, #4]
 8007098:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	430a      	orrs	r2, r1
 80070a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070ac:	f003 0310 	and.w	r3, r3, #16
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d00a      	beq.n	80070ca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	689b      	ldr	r3, [r3, #8]
 80070ba:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	430a      	orrs	r2, r1
 80070c8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070ce:	f003 0320 	and.w	r3, r3, #32
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d00a      	beq.n	80070ec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	689b      	ldr	r3, [r3, #8]
 80070dc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	430a      	orrs	r2, r1
 80070ea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d01a      	beq.n	800712e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	685b      	ldr	r3, [r3, #4]
 80070fe:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	430a      	orrs	r2, r1
 800710c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007112:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007116:	d10a      	bne.n	800712e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	685b      	ldr	r3, [r3, #4]
 800711e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	430a      	orrs	r2, r1
 800712c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007132:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007136:	2b00      	cmp	r3, #0
 8007138:	d00a      	beq.n	8007150 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	685b      	ldr	r3, [r3, #4]
 8007140:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	430a      	orrs	r2, r1
 800714e:	605a      	str	r2, [r3, #4]
  }
}
 8007150:	bf00      	nop
 8007152:	370c      	adds	r7, #12
 8007154:	46bd      	mov	sp, r7
 8007156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715a:	4770      	bx	lr

0800715c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800715c:	b580      	push	{r7, lr}
 800715e:	b098      	sub	sp, #96	@ 0x60
 8007160:	af02      	add	r7, sp, #8
 8007162:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2200      	movs	r2, #0
 8007168:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800716c:	f7fa fff6 	bl	800215c <HAL_GetTick>
 8007170:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	f003 0308 	and.w	r3, r3, #8
 800717c:	2b08      	cmp	r3, #8
 800717e:	d12f      	bne.n	80071e0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007180:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007184:	9300      	str	r3, [sp, #0]
 8007186:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007188:	2200      	movs	r2, #0
 800718a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800718e:	6878      	ldr	r0, [r7, #4]
 8007190:	f000 f88e 	bl	80072b0 <UART_WaitOnFlagUntilTimeout>
 8007194:	4603      	mov	r3, r0
 8007196:	2b00      	cmp	r3, #0
 8007198:	d022      	beq.n	80071e0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071a2:	e853 3f00 	ldrex	r3, [r3]
 80071a6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80071a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071aa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80071ae:	653b      	str	r3, [r7, #80]	@ 0x50
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	461a      	mov	r2, r3
 80071b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80071b8:	647b      	str	r3, [r7, #68]	@ 0x44
 80071ba:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071bc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80071be:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80071c0:	e841 2300 	strex	r3, r2, [r1]
 80071c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80071c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d1e6      	bne.n	800719a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2220      	movs	r2, #32
 80071d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2200      	movs	r2, #0
 80071d8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80071dc:	2303      	movs	r3, #3
 80071de:	e063      	b.n	80072a8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	f003 0304 	and.w	r3, r3, #4
 80071ea:	2b04      	cmp	r3, #4
 80071ec:	d149      	bne.n	8007282 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80071ee:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80071f2:	9300      	str	r3, [sp, #0]
 80071f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80071f6:	2200      	movs	r2, #0
 80071f8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80071fc:	6878      	ldr	r0, [r7, #4]
 80071fe:	f000 f857 	bl	80072b0 <UART_WaitOnFlagUntilTimeout>
 8007202:	4603      	mov	r3, r0
 8007204:	2b00      	cmp	r3, #0
 8007206:	d03c      	beq.n	8007282 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800720e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007210:	e853 3f00 	ldrex	r3, [r3]
 8007214:	623b      	str	r3, [r7, #32]
   return(result);
 8007216:	6a3b      	ldr	r3, [r7, #32]
 8007218:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800721c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	461a      	mov	r2, r3
 8007224:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007226:	633b      	str	r3, [r7, #48]	@ 0x30
 8007228:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800722a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800722c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800722e:	e841 2300 	strex	r3, r2, [r1]
 8007232:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007234:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007236:	2b00      	cmp	r3, #0
 8007238:	d1e6      	bne.n	8007208 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	3308      	adds	r3, #8
 8007240:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007242:	693b      	ldr	r3, [r7, #16]
 8007244:	e853 3f00 	ldrex	r3, [r3]
 8007248:	60fb      	str	r3, [r7, #12]
   return(result);
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	f023 0301 	bic.w	r3, r3, #1
 8007250:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	3308      	adds	r3, #8
 8007258:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800725a:	61fa      	str	r2, [r7, #28]
 800725c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800725e:	69b9      	ldr	r1, [r7, #24]
 8007260:	69fa      	ldr	r2, [r7, #28]
 8007262:	e841 2300 	strex	r3, r2, [r1]
 8007266:	617b      	str	r3, [r7, #20]
   return(result);
 8007268:	697b      	ldr	r3, [r7, #20]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d1e5      	bne.n	800723a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2220      	movs	r2, #32
 8007272:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	2200      	movs	r2, #0
 800727a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800727e:	2303      	movs	r3, #3
 8007280:	e012      	b.n	80072a8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	2220      	movs	r2, #32
 8007286:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	2220      	movs	r2, #32
 800728e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	2200      	movs	r2, #0
 8007296:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2200      	movs	r2, #0
 800729c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2200      	movs	r2, #0
 80072a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80072a6:	2300      	movs	r3, #0
}
 80072a8:	4618      	mov	r0, r3
 80072aa:	3758      	adds	r7, #88	@ 0x58
 80072ac:	46bd      	mov	sp, r7
 80072ae:	bd80      	pop	{r7, pc}

080072b0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b084      	sub	sp, #16
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	60f8      	str	r0, [r7, #12]
 80072b8:	60b9      	str	r1, [r7, #8]
 80072ba:	603b      	str	r3, [r7, #0]
 80072bc:	4613      	mov	r3, r2
 80072be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80072c0:	e04f      	b.n	8007362 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80072c2:	69bb      	ldr	r3, [r7, #24]
 80072c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072c8:	d04b      	beq.n	8007362 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80072ca:	f7fa ff47 	bl	800215c <HAL_GetTick>
 80072ce:	4602      	mov	r2, r0
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	1ad3      	subs	r3, r2, r3
 80072d4:	69ba      	ldr	r2, [r7, #24]
 80072d6:	429a      	cmp	r2, r3
 80072d8:	d302      	bcc.n	80072e0 <UART_WaitOnFlagUntilTimeout+0x30>
 80072da:	69bb      	ldr	r3, [r7, #24]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d101      	bne.n	80072e4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80072e0:	2303      	movs	r3, #3
 80072e2:	e04e      	b.n	8007382 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f003 0304 	and.w	r3, r3, #4
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d037      	beq.n	8007362 <UART_WaitOnFlagUntilTimeout+0xb2>
 80072f2:	68bb      	ldr	r3, [r7, #8]
 80072f4:	2b80      	cmp	r3, #128	@ 0x80
 80072f6:	d034      	beq.n	8007362 <UART_WaitOnFlagUntilTimeout+0xb2>
 80072f8:	68bb      	ldr	r3, [r7, #8]
 80072fa:	2b40      	cmp	r3, #64	@ 0x40
 80072fc:	d031      	beq.n	8007362 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	69db      	ldr	r3, [r3, #28]
 8007304:	f003 0308 	and.w	r3, r3, #8
 8007308:	2b08      	cmp	r3, #8
 800730a:	d110      	bne.n	800732e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	2208      	movs	r2, #8
 8007312:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007314:	68f8      	ldr	r0, [r7, #12]
 8007316:	f000 f920 	bl	800755a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	2208      	movs	r2, #8
 800731e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	2200      	movs	r2, #0
 8007326:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800732a:	2301      	movs	r3, #1
 800732c:	e029      	b.n	8007382 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	69db      	ldr	r3, [r3, #28]
 8007334:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007338:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800733c:	d111      	bne.n	8007362 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007346:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007348:	68f8      	ldr	r0, [r7, #12]
 800734a:	f000 f906 	bl	800755a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	2220      	movs	r2, #32
 8007352:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	2200      	movs	r2, #0
 800735a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800735e:	2303      	movs	r3, #3
 8007360:	e00f      	b.n	8007382 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	69da      	ldr	r2, [r3, #28]
 8007368:	68bb      	ldr	r3, [r7, #8]
 800736a:	4013      	ands	r3, r2
 800736c:	68ba      	ldr	r2, [r7, #8]
 800736e:	429a      	cmp	r2, r3
 8007370:	bf0c      	ite	eq
 8007372:	2301      	moveq	r3, #1
 8007374:	2300      	movne	r3, #0
 8007376:	b2db      	uxtb	r3, r3
 8007378:	461a      	mov	r2, r3
 800737a:	79fb      	ldrb	r3, [r7, #7]
 800737c:	429a      	cmp	r2, r3
 800737e:	d0a0      	beq.n	80072c2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007380:	2300      	movs	r3, #0
}
 8007382:	4618      	mov	r0, r3
 8007384:	3710      	adds	r7, #16
 8007386:	46bd      	mov	sp, r7
 8007388:	bd80      	pop	{r7, pc}
	...

0800738c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800738c:	b580      	push	{r7, lr}
 800738e:	b096      	sub	sp, #88	@ 0x58
 8007390:	af00      	add	r7, sp, #0
 8007392:	60f8      	str	r0, [r7, #12]
 8007394:	60b9      	str	r1, [r7, #8]
 8007396:	4613      	mov	r3, r2
 8007398:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	68ba      	ldr	r2, [r7, #8]
 800739e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	88fa      	ldrh	r2, [r7, #6]
 80073a4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	2200      	movs	r2, #0
 80073ac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	2222      	movs	r2, #34	@ 0x22
 80073b4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d02d      	beq.n	800741e <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80073c8:	4a40      	ldr	r2, [pc, #256]	@ (80074cc <UART_Start_Receive_DMA+0x140>)
 80073ca:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80073d2:	4a3f      	ldr	r2, [pc, #252]	@ (80074d0 <UART_Start_Receive_DMA+0x144>)
 80073d4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80073dc:	4a3d      	ldr	r2, [pc, #244]	@ (80074d4 <UART_Start_Receive_DMA+0x148>)
 80073de:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80073e6:	2200      	movs	r2, #0
 80073e8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	3324      	adds	r3, #36	@ 0x24
 80073f6:	4619      	mov	r1, r3
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80073fc:	461a      	mov	r2, r3
 80073fe:	88fb      	ldrh	r3, [r7, #6]
 8007400:	f7fb f892 	bl	8002528 <HAL_DMA_Start_IT>
 8007404:	4603      	mov	r3, r0
 8007406:	2b00      	cmp	r3, #0
 8007408:	d009      	beq.n	800741e <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	2210      	movs	r2, #16
 800740e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	2220      	movs	r2, #32
 8007416:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800741a:	2301      	movs	r3, #1
 800741c:	e051      	b.n	80074c2 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	691b      	ldr	r3, [r3, #16]
 8007422:	2b00      	cmp	r3, #0
 8007424:	d018      	beq.n	8007458 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800742c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800742e:	e853 3f00 	ldrex	r3, [r3]
 8007432:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007434:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007436:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800743a:	657b      	str	r3, [r7, #84]	@ 0x54
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	461a      	mov	r2, r3
 8007442:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007444:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007446:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007448:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800744a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800744c:	e841 2300 	strex	r3, r2, [r1]
 8007450:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8007452:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007454:	2b00      	cmp	r3, #0
 8007456:	d1e6      	bne.n	8007426 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	3308      	adds	r3, #8
 800745e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007460:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007462:	e853 3f00 	ldrex	r3, [r3]
 8007466:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007468:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800746a:	f043 0301 	orr.w	r3, r3, #1
 800746e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	3308      	adds	r3, #8
 8007476:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007478:	637a      	str	r2, [r7, #52]	@ 0x34
 800747a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800747c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800747e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007480:	e841 2300 	strex	r3, r2, [r1]
 8007484:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8007486:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007488:	2b00      	cmp	r3, #0
 800748a:	d1e5      	bne.n	8007458 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	3308      	adds	r3, #8
 8007492:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007494:	697b      	ldr	r3, [r7, #20]
 8007496:	e853 3f00 	ldrex	r3, [r3]
 800749a:	613b      	str	r3, [r7, #16]
   return(result);
 800749c:	693b      	ldr	r3, [r7, #16]
 800749e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80074a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	3308      	adds	r3, #8
 80074aa:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80074ac:	623a      	str	r2, [r7, #32]
 80074ae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074b0:	69f9      	ldr	r1, [r7, #28]
 80074b2:	6a3a      	ldr	r2, [r7, #32]
 80074b4:	e841 2300 	strex	r3, r2, [r1]
 80074b8:	61bb      	str	r3, [r7, #24]
   return(result);
 80074ba:	69bb      	ldr	r3, [r7, #24]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d1e5      	bne.n	800748c <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 80074c0:	2300      	movs	r3, #0
}
 80074c2:	4618      	mov	r0, r3
 80074c4:	3758      	adds	r7, #88	@ 0x58
 80074c6:	46bd      	mov	sp, r7
 80074c8:	bd80      	pop	{r7, pc}
 80074ca:	bf00      	nop
 80074cc:	08007627 	.word	0x08007627
 80074d0:	08007753 	.word	0x08007753
 80074d4:	08007791 	.word	0x08007791

080074d8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80074d8:	b480      	push	{r7}
 80074da:	b08f      	sub	sp, #60	@ 0x3c
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074e6:	6a3b      	ldr	r3, [r7, #32]
 80074e8:	e853 3f00 	ldrex	r3, [r3]
 80074ec:	61fb      	str	r3, [r7, #28]
   return(result);
 80074ee:	69fb      	ldr	r3, [r7, #28]
 80074f0:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80074f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	461a      	mov	r2, r3
 80074fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007500:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007502:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007504:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007506:	e841 2300 	strex	r3, r2, [r1]
 800750a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800750c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800750e:	2b00      	cmp	r3, #0
 8007510:	d1e6      	bne.n	80074e0 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	3308      	adds	r3, #8
 8007518:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	e853 3f00 	ldrex	r3, [r3]
 8007520:	60bb      	str	r3, [r7, #8]
   return(result);
 8007522:	68bb      	ldr	r3, [r7, #8]
 8007524:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8007528:	633b      	str	r3, [r7, #48]	@ 0x30
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	3308      	adds	r3, #8
 8007530:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007532:	61ba      	str	r2, [r7, #24]
 8007534:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007536:	6979      	ldr	r1, [r7, #20]
 8007538:	69ba      	ldr	r2, [r7, #24]
 800753a:	e841 2300 	strex	r3, r2, [r1]
 800753e:	613b      	str	r3, [r7, #16]
   return(result);
 8007540:	693b      	ldr	r3, [r7, #16]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d1e5      	bne.n	8007512 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	2220      	movs	r2, #32
 800754a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800754e:	bf00      	nop
 8007550:	373c      	adds	r7, #60	@ 0x3c
 8007552:	46bd      	mov	sp, r7
 8007554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007558:	4770      	bx	lr

0800755a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800755a:	b480      	push	{r7}
 800755c:	b095      	sub	sp, #84	@ 0x54
 800755e:	af00      	add	r7, sp, #0
 8007560:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007568:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800756a:	e853 3f00 	ldrex	r3, [r3]
 800756e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007570:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007572:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007576:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	461a      	mov	r2, r3
 800757e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007580:	643b      	str	r3, [r7, #64]	@ 0x40
 8007582:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007584:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007586:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007588:	e841 2300 	strex	r3, r2, [r1]
 800758c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800758e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007590:	2b00      	cmp	r3, #0
 8007592:	d1e6      	bne.n	8007562 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	3308      	adds	r3, #8
 800759a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800759c:	6a3b      	ldr	r3, [r7, #32]
 800759e:	e853 3f00 	ldrex	r3, [r3]
 80075a2:	61fb      	str	r3, [r7, #28]
   return(result);
 80075a4:	69fb      	ldr	r3, [r7, #28]
 80075a6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80075aa:	f023 0301 	bic.w	r3, r3, #1
 80075ae:	64bb      	str	r3, [r7, #72]	@ 0x48
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	3308      	adds	r3, #8
 80075b6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80075b8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80075ba:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075bc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80075be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80075c0:	e841 2300 	strex	r3, r2, [r1]
 80075c4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80075c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d1e3      	bne.n	8007594 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80075d0:	2b01      	cmp	r3, #1
 80075d2:	d118      	bne.n	8007606 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	e853 3f00 	ldrex	r3, [r3]
 80075e0:	60bb      	str	r3, [r7, #8]
   return(result);
 80075e2:	68bb      	ldr	r3, [r7, #8]
 80075e4:	f023 0310 	bic.w	r3, r3, #16
 80075e8:	647b      	str	r3, [r7, #68]	@ 0x44
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	461a      	mov	r2, r3
 80075f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80075f2:	61bb      	str	r3, [r7, #24]
 80075f4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075f6:	6979      	ldr	r1, [r7, #20]
 80075f8:	69ba      	ldr	r2, [r7, #24]
 80075fa:	e841 2300 	strex	r3, r2, [r1]
 80075fe:	613b      	str	r3, [r7, #16]
   return(result);
 8007600:	693b      	ldr	r3, [r7, #16]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d1e6      	bne.n	80075d4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	2220      	movs	r2, #32
 800760a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	2200      	movs	r2, #0
 8007612:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2200      	movs	r2, #0
 8007618:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800761a:	bf00      	nop
 800761c:	3754      	adds	r7, #84	@ 0x54
 800761e:	46bd      	mov	sp, r7
 8007620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007624:	4770      	bx	lr

08007626 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007626:	b580      	push	{r7, lr}
 8007628:	b09c      	sub	sp, #112	@ 0x70
 800762a:	af00      	add	r7, sp, #0
 800762c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007632:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	f003 0320 	and.w	r3, r3, #32
 800763e:	2b00      	cmp	r3, #0
 8007640:	d171      	bne.n	8007726 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8007642:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007644:	2200      	movs	r2, #0
 8007646:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800764a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007650:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007652:	e853 3f00 	ldrex	r3, [r3]
 8007656:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007658:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800765a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800765e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007660:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	461a      	mov	r2, r3
 8007666:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007668:	65bb      	str	r3, [r7, #88]	@ 0x58
 800766a:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800766c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800766e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007670:	e841 2300 	strex	r3, r2, [r1]
 8007674:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007676:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007678:	2b00      	cmp	r3, #0
 800767a:	d1e6      	bne.n	800764a <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800767c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	3308      	adds	r3, #8
 8007682:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007684:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007686:	e853 3f00 	ldrex	r3, [r3]
 800768a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800768c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800768e:	f023 0301 	bic.w	r3, r3, #1
 8007692:	667b      	str	r3, [r7, #100]	@ 0x64
 8007694:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	3308      	adds	r3, #8
 800769a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800769c:	647a      	str	r2, [r7, #68]	@ 0x44
 800769e:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076a0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80076a2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80076a4:	e841 2300 	strex	r3, r2, [r1]
 80076a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80076aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d1e5      	bne.n	800767c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80076b0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	3308      	adds	r3, #8
 80076b6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076ba:	e853 3f00 	ldrex	r3, [r3]
 80076be:	623b      	str	r3, [r7, #32]
   return(result);
 80076c0:	6a3b      	ldr	r3, [r7, #32]
 80076c2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80076c6:	663b      	str	r3, [r7, #96]	@ 0x60
 80076c8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	3308      	adds	r3, #8
 80076ce:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80076d0:	633a      	str	r2, [r7, #48]	@ 0x30
 80076d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076d4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80076d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80076d8:	e841 2300 	strex	r3, r2, [r1]
 80076dc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80076de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d1e5      	bne.n	80076b0 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80076e4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80076e6:	2220      	movs	r2, #32
 80076e8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80076ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80076ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80076f0:	2b01      	cmp	r3, #1
 80076f2:	d118      	bne.n	8007726 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80076f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076fa:	693b      	ldr	r3, [r7, #16]
 80076fc:	e853 3f00 	ldrex	r3, [r3]
 8007700:	60fb      	str	r3, [r7, #12]
   return(result);
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	f023 0310 	bic.w	r3, r3, #16
 8007708:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800770a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	461a      	mov	r2, r3
 8007710:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007712:	61fb      	str	r3, [r7, #28]
 8007714:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007716:	69b9      	ldr	r1, [r7, #24]
 8007718:	69fa      	ldr	r2, [r7, #28]
 800771a:	e841 2300 	strex	r3, r2, [r1]
 800771e:	617b      	str	r3, [r7, #20]
   return(result);
 8007720:	697b      	ldr	r3, [r7, #20]
 8007722:	2b00      	cmp	r3, #0
 8007724:	d1e6      	bne.n	80076f4 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007726:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007728:	2200      	movs	r2, #0
 800772a:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800772c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800772e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007730:	2b01      	cmp	r3, #1
 8007732:	d107      	bne.n	8007744 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007734:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007736:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800773a:	4619      	mov	r1, r3
 800773c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800773e:	f7fa f92b 	bl	8001998 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007742:	e002      	b.n	800774a <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8007744:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8007746:	f7ff f97d 	bl	8006a44 <HAL_UART_RxCpltCallback>
}
 800774a:	bf00      	nop
 800774c:	3770      	adds	r7, #112	@ 0x70
 800774e:	46bd      	mov	sp, r7
 8007750:	bd80      	pop	{r7, pc}

08007752 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007752:	b580      	push	{r7, lr}
 8007754:	b084      	sub	sp, #16
 8007756:	af00      	add	r7, sp, #0
 8007758:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800775e:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	2201      	movs	r2, #1
 8007764:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800776a:	2b01      	cmp	r3, #1
 800776c:	d109      	bne.n	8007782 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007774:	085b      	lsrs	r3, r3, #1
 8007776:	b29b      	uxth	r3, r3
 8007778:	4619      	mov	r1, r3
 800777a:	68f8      	ldr	r0, [r7, #12]
 800777c:	f7fa f90c 	bl	8001998 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007780:	e002      	b.n	8007788 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8007782:	68f8      	ldr	r0, [r7, #12]
 8007784:	f7ff f968 	bl	8006a58 <HAL_UART_RxHalfCpltCallback>
}
 8007788:	bf00      	nop
 800778a:	3710      	adds	r7, #16
 800778c:	46bd      	mov	sp, r7
 800778e:	bd80      	pop	{r7, pc}

08007790 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007790:	b580      	push	{r7, lr}
 8007792:	b086      	sub	sp, #24
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800779c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800779e:	697b      	ldr	r3, [r7, #20]
 80077a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80077a4:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80077a6:	697b      	ldr	r3, [r7, #20]
 80077a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80077ac:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80077ae:	697b      	ldr	r3, [r7, #20]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	689b      	ldr	r3, [r3, #8]
 80077b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80077b8:	2b80      	cmp	r3, #128	@ 0x80
 80077ba:	d109      	bne.n	80077d0 <UART_DMAError+0x40>
 80077bc:	693b      	ldr	r3, [r7, #16]
 80077be:	2b21      	cmp	r3, #33	@ 0x21
 80077c0:	d106      	bne.n	80077d0 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80077c2:	697b      	ldr	r3, [r7, #20]
 80077c4:	2200      	movs	r2, #0
 80077c6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 80077ca:	6978      	ldr	r0, [r7, #20]
 80077cc:	f7ff fe84 	bl	80074d8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80077d0:	697b      	ldr	r3, [r7, #20]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	689b      	ldr	r3, [r3, #8]
 80077d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80077da:	2b40      	cmp	r3, #64	@ 0x40
 80077dc:	d109      	bne.n	80077f2 <UART_DMAError+0x62>
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	2b22      	cmp	r3, #34	@ 0x22
 80077e2:	d106      	bne.n	80077f2 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80077e4:	697b      	ldr	r3, [r7, #20]
 80077e6:	2200      	movs	r2, #0
 80077e8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 80077ec:	6978      	ldr	r0, [r7, #20]
 80077ee:	f7ff feb4 	bl	800755a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80077f2:	697b      	ldr	r3, [r7, #20]
 80077f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80077f8:	f043 0210 	orr.w	r2, r3, #16
 80077fc:	697b      	ldr	r3, [r7, #20]
 80077fe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007802:	6978      	ldr	r0, [r7, #20]
 8007804:	f7ff f932 	bl	8006a6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007808:	bf00      	nop
 800780a:	3718      	adds	r7, #24
 800780c:	46bd      	mov	sp, r7
 800780e:	bd80      	pop	{r7, pc}

08007810 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007810:	b580      	push	{r7, lr}
 8007812:	b084      	sub	sp, #16
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800781c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	2200      	movs	r2, #0
 8007822:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007826:	68f8      	ldr	r0, [r7, #12]
 8007828:	f7ff f920 	bl	8006a6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800782c:	bf00      	nop
 800782e:	3710      	adds	r7, #16
 8007830:	46bd      	mov	sp, r7
 8007832:	bd80      	pop	{r7, pc}

08007834 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007834:	b480      	push	{r7}
 8007836:	b08f      	sub	sp, #60	@ 0x3c
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007842:	2b21      	cmp	r3, #33	@ 0x21
 8007844:	d14c      	bne.n	80078e0 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800784c:	b29b      	uxth	r3, r3
 800784e:	2b00      	cmp	r3, #0
 8007850:	d132      	bne.n	80078b8 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007858:	6a3b      	ldr	r3, [r7, #32]
 800785a:	e853 3f00 	ldrex	r3, [r3]
 800785e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007860:	69fb      	ldr	r3, [r7, #28]
 8007862:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007866:	637b      	str	r3, [r7, #52]	@ 0x34
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	461a      	mov	r2, r3
 800786e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007870:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007872:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007874:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007876:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007878:	e841 2300 	strex	r3, r2, [r1]
 800787c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800787e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007880:	2b00      	cmp	r3, #0
 8007882:	d1e6      	bne.n	8007852 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	e853 3f00 	ldrex	r3, [r3]
 8007890:	60bb      	str	r3, [r7, #8]
   return(result);
 8007892:	68bb      	ldr	r3, [r7, #8]
 8007894:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007898:	633b      	str	r3, [r7, #48]	@ 0x30
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	461a      	mov	r2, r3
 80078a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078a2:	61bb      	str	r3, [r7, #24]
 80078a4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078a6:	6979      	ldr	r1, [r7, #20]
 80078a8:	69ba      	ldr	r2, [r7, #24]
 80078aa:	e841 2300 	strex	r3, r2, [r1]
 80078ae:	613b      	str	r3, [r7, #16]
   return(result);
 80078b0:	693b      	ldr	r3, [r7, #16]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d1e6      	bne.n	8007884 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80078b6:	e013      	b.n	80078e0 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80078bc:	781a      	ldrb	r2, [r3, #0]
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80078c8:	1c5a      	adds	r2, r3, #1
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80078d4:	b29b      	uxth	r3, r3
 80078d6:	3b01      	subs	r3, #1
 80078d8:	b29a      	uxth	r2, r3
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 80078e0:	bf00      	nop
 80078e2:	373c      	adds	r7, #60	@ 0x3c
 80078e4:	46bd      	mov	sp, r7
 80078e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ea:	4770      	bx	lr

080078ec <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80078ec:	b480      	push	{r7}
 80078ee:	b091      	sub	sp, #68	@ 0x44
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80078fa:	2b21      	cmp	r3, #33	@ 0x21
 80078fc:	d151      	bne.n	80079a2 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007904:	b29b      	uxth	r3, r3
 8007906:	2b00      	cmp	r3, #0
 8007908:	d132      	bne.n	8007970 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007910:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007912:	e853 3f00 	ldrex	r3, [r3]
 8007916:	623b      	str	r3, [r7, #32]
   return(result);
 8007918:	6a3b      	ldr	r3, [r7, #32]
 800791a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800791e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	461a      	mov	r2, r3
 8007926:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007928:	633b      	str	r3, [r7, #48]	@ 0x30
 800792a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800792c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800792e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007930:	e841 2300 	strex	r3, r2, [r1]
 8007934:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007936:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007938:	2b00      	cmp	r3, #0
 800793a:	d1e6      	bne.n	800790a <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007942:	693b      	ldr	r3, [r7, #16]
 8007944:	e853 3f00 	ldrex	r3, [r3]
 8007948:	60fb      	str	r3, [r7, #12]
   return(result);
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007950:	637b      	str	r3, [r7, #52]	@ 0x34
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	461a      	mov	r2, r3
 8007958:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800795a:	61fb      	str	r3, [r7, #28]
 800795c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800795e:	69b9      	ldr	r1, [r7, #24]
 8007960:	69fa      	ldr	r2, [r7, #28]
 8007962:	e841 2300 	strex	r3, r2, [r1]
 8007966:	617b      	str	r3, [r7, #20]
   return(result);
 8007968:	697b      	ldr	r3, [r7, #20]
 800796a:	2b00      	cmp	r3, #0
 800796c:	d1e6      	bne.n	800793c <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800796e:	e018      	b.n	80079a2 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007974:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8007976:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007978:	881b      	ldrh	r3, [r3, #0]
 800797a:	461a      	mov	r2, r3
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007984:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800798a:	1c9a      	adds	r2, r3, #2
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007996:	b29b      	uxth	r3, r3
 8007998:	3b01      	subs	r3, #1
 800799a:	b29a      	uxth	r2, r3
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 80079a2:	bf00      	nop
 80079a4:	3744      	adds	r7, #68	@ 0x44
 80079a6:	46bd      	mov	sp, r7
 80079a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ac:	4770      	bx	lr

080079ae <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80079ae:	b480      	push	{r7}
 80079b0:	b091      	sub	sp, #68	@ 0x44
 80079b2:	af00      	add	r7, sp, #0
 80079b4:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80079bc:	2b21      	cmp	r3, #33	@ 0x21
 80079be:	d160      	bne.n	8007a82 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80079c6:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80079c8:	e057      	b.n	8007a7a <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80079d0:	b29b      	uxth	r3, r3
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d133      	bne.n	8007a3e <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	3308      	adds	r3, #8
 80079dc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079e0:	e853 3f00 	ldrex	r3, [r3]
 80079e4:	623b      	str	r3, [r7, #32]
   return(result);
 80079e6:	6a3b      	ldr	r3, [r7, #32]
 80079e8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80079ec:	63bb      	str	r3, [r7, #56]	@ 0x38
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	3308      	adds	r3, #8
 80079f4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80079f6:	633a      	str	r2, [r7, #48]	@ 0x30
 80079f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079fa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80079fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80079fe:	e841 2300 	strex	r3, r2, [r1]
 8007a02:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007a04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d1e5      	bne.n	80079d6 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a10:	693b      	ldr	r3, [r7, #16]
 8007a12:	e853 3f00 	ldrex	r3, [r3]
 8007a16:	60fb      	str	r3, [r7, #12]
   return(result);
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007a1e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	461a      	mov	r2, r3
 8007a26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a28:	61fb      	str	r3, [r7, #28]
 8007a2a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a2c:	69b9      	ldr	r1, [r7, #24]
 8007a2e:	69fa      	ldr	r2, [r7, #28]
 8007a30:	e841 2300 	strex	r3, r2, [r1]
 8007a34:	617b      	str	r3, [r7, #20]
   return(result);
 8007a36:	697b      	ldr	r3, [r7, #20]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d1e6      	bne.n	8007a0a <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8007a3c:	e021      	b.n	8007a82 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	69db      	ldr	r3, [r3, #28]
 8007a44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d013      	beq.n	8007a74 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007a50:	781a      	ldrb	r2, [r3, #0]
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007a5c:	1c5a      	adds	r2, r3, #1
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007a68:	b29b      	uxth	r3, r3
 8007a6a:	3b01      	subs	r3, #1
 8007a6c:	b29a      	uxth	r2, r3
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8007a74:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8007a76:	3b01      	subs	r3, #1
 8007a78:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8007a7a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d1a4      	bne.n	80079ca <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8007a80:	e7ff      	b.n	8007a82 <UART_TxISR_8BIT_FIFOEN+0xd4>
 8007a82:	bf00      	nop
 8007a84:	3744      	adds	r7, #68	@ 0x44
 8007a86:	46bd      	mov	sp, r7
 8007a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8c:	4770      	bx	lr

08007a8e <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007a8e:	b480      	push	{r7}
 8007a90:	b091      	sub	sp, #68	@ 0x44
 8007a92:	af00      	add	r7, sp, #0
 8007a94:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a9c:	2b21      	cmp	r3, #33	@ 0x21
 8007a9e:	d165      	bne.n	8007b6c <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007aa6:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8007aa8:	e05c      	b.n	8007b64 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007ab0:	b29b      	uxth	r3, r3
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d133      	bne.n	8007b1e <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	3308      	adds	r3, #8
 8007abc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007abe:	6a3b      	ldr	r3, [r7, #32]
 8007ac0:	e853 3f00 	ldrex	r3, [r3]
 8007ac4:	61fb      	str	r3, [r7, #28]
   return(result);
 8007ac6:	69fb      	ldr	r3, [r7, #28]
 8007ac8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8007acc:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	3308      	adds	r3, #8
 8007ad4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007ad6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007ad8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ada:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007adc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007ade:	e841 2300 	strex	r3, r2, [r1]
 8007ae2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007ae4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d1e5      	bne.n	8007ab6 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	e853 3f00 	ldrex	r3, [r3]
 8007af6:	60bb      	str	r3, [r7, #8]
   return(result);
 8007af8:	68bb      	ldr	r3, [r7, #8]
 8007afa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007afe:	633b      	str	r3, [r7, #48]	@ 0x30
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	461a      	mov	r2, r3
 8007b06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b08:	61bb      	str	r3, [r7, #24]
 8007b0a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b0c:	6979      	ldr	r1, [r7, #20]
 8007b0e:	69ba      	ldr	r2, [r7, #24]
 8007b10:	e841 2300 	strex	r3, r2, [r1]
 8007b14:	613b      	str	r3, [r7, #16]
   return(result);
 8007b16:	693b      	ldr	r3, [r7, #16]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d1e6      	bne.n	8007aea <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8007b1c:	e026      	b.n	8007b6c <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	69db      	ldr	r3, [r3, #28]
 8007b24:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d018      	beq.n	8007b5e <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b30:	63bb      	str	r3, [r7, #56]	@ 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8007b32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b34:	881b      	ldrh	r3, [r3, #0]
 8007b36:	461a      	mov	r2, r3
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007b40:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b46:	1c9a      	adds	r2, r3, #2
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007b52:	b29b      	uxth	r3, r3
 8007b54:	3b01      	subs	r3, #1
 8007b56:	b29a      	uxth	r2, r3
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8007b5e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8007b60:	3b01      	subs	r3, #1
 8007b62:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8007b64:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d19f      	bne.n	8007aaa <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8007b6a:	e7ff      	b.n	8007b6c <UART_TxISR_16BIT_FIFOEN+0xde>
 8007b6c:	bf00      	nop
 8007b6e:	3744      	adds	r7, #68	@ 0x44
 8007b70:	46bd      	mov	sp, r7
 8007b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b76:	4770      	bx	lr

08007b78 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	b088      	sub	sp, #32
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	e853 3f00 	ldrex	r3, [r3]
 8007b8c:	60bb      	str	r3, [r7, #8]
   return(result);
 8007b8e:	68bb      	ldr	r3, [r7, #8]
 8007b90:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007b94:	61fb      	str	r3, [r7, #28]
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	461a      	mov	r2, r3
 8007b9c:	69fb      	ldr	r3, [r7, #28]
 8007b9e:	61bb      	str	r3, [r7, #24]
 8007ba0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ba2:	6979      	ldr	r1, [r7, #20]
 8007ba4:	69ba      	ldr	r2, [r7, #24]
 8007ba6:	e841 2300 	strex	r3, r2, [r1]
 8007baa:	613b      	str	r3, [r7, #16]
   return(result);
 8007bac:	693b      	ldr	r3, [r7, #16]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d1e6      	bne.n	8007b80 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	2220      	movs	r2, #32
 8007bb6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	2200      	movs	r2, #0
 8007bbe:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007bc0:	6878      	ldr	r0, [r7, #4]
 8007bc2:	f7f9 ff65 	bl	8001a90 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007bc6:	bf00      	nop
 8007bc8:	3720      	adds	r7, #32
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	bd80      	pop	{r7, pc}

08007bce <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007bce:	b480      	push	{r7}
 8007bd0:	b083      	sub	sp, #12
 8007bd2:	af00      	add	r7, sp, #0
 8007bd4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007bd6:	bf00      	nop
 8007bd8:	370c      	adds	r7, #12
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be0:	4770      	bx	lr

08007be2 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007be2:	b480      	push	{r7}
 8007be4:	b083      	sub	sp, #12
 8007be6:	af00      	add	r7, sp, #0
 8007be8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007bea:	bf00      	nop
 8007bec:	370c      	adds	r7, #12
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf4:	4770      	bx	lr

08007bf6 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007bf6:	b480      	push	{r7}
 8007bf8:	b083      	sub	sp, #12
 8007bfa:	af00      	add	r7, sp, #0
 8007bfc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007bfe:	bf00      	nop
 8007c00:	370c      	adds	r7, #12
 8007c02:	46bd      	mov	sp, r7
 8007c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c08:	4770      	bx	lr

08007c0a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007c0a:	b480      	push	{r7}
 8007c0c:	b085      	sub	sp, #20
 8007c0e:	af00      	add	r7, sp, #0
 8007c10:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007c18:	2b01      	cmp	r3, #1
 8007c1a:	d101      	bne.n	8007c20 <HAL_UARTEx_DisableFifoMode+0x16>
 8007c1c:	2302      	movs	r3, #2
 8007c1e:	e027      	b.n	8007c70 <HAL_UARTEx_DisableFifoMode+0x66>
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	2201      	movs	r2, #1
 8007c24:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2224      	movs	r2, #36	@ 0x24
 8007c2c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	681a      	ldr	r2, [r3, #0]
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	f022 0201 	bic.w	r2, r2, #1
 8007c46:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007c4e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2200      	movs	r2, #0
 8007c54:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	68fa      	ldr	r2, [r7, #12]
 8007c5c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	2220      	movs	r2, #32
 8007c62:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	2200      	movs	r2, #0
 8007c6a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007c6e:	2300      	movs	r3, #0
}
 8007c70:	4618      	mov	r0, r3
 8007c72:	3714      	adds	r7, #20
 8007c74:	46bd      	mov	sp, r7
 8007c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7a:	4770      	bx	lr

08007c7c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007c7c:	b580      	push	{r7, lr}
 8007c7e:	b084      	sub	sp, #16
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]
 8007c84:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007c8c:	2b01      	cmp	r3, #1
 8007c8e:	d101      	bne.n	8007c94 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007c90:	2302      	movs	r3, #2
 8007c92:	e02d      	b.n	8007cf0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	2201      	movs	r2, #1
 8007c98:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2224      	movs	r2, #36	@ 0x24
 8007ca0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	681a      	ldr	r2, [r3, #0]
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	f022 0201 	bic.w	r2, r2, #1
 8007cba:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	689b      	ldr	r3, [r3, #8]
 8007cc2:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	683a      	ldr	r2, [r7, #0]
 8007ccc:	430a      	orrs	r2, r1
 8007cce:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007cd0:	6878      	ldr	r0, [r7, #4]
 8007cd2:	f000 f8a3 	bl	8007e1c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	68fa      	ldr	r2, [r7, #12]
 8007cdc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	2220      	movs	r2, #32
 8007ce2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	2200      	movs	r2, #0
 8007cea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007cee:	2300      	movs	r3, #0
}
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	3710      	adds	r7, #16
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	bd80      	pop	{r7, pc}

08007cf8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	b084      	sub	sp, #16
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]
 8007d00:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007d08:	2b01      	cmp	r3, #1
 8007d0a:	d101      	bne.n	8007d10 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007d0c:	2302      	movs	r3, #2
 8007d0e:	e02d      	b.n	8007d6c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	2201      	movs	r2, #1
 8007d14:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	2224      	movs	r2, #36	@ 0x24
 8007d1c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	681a      	ldr	r2, [r3, #0]
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	f022 0201 	bic.w	r2, r2, #1
 8007d36:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	689b      	ldr	r3, [r3, #8]
 8007d3e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	683a      	ldr	r2, [r7, #0]
 8007d48:	430a      	orrs	r2, r1
 8007d4a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007d4c:	6878      	ldr	r0, [r7, #4]
 8007d4e:	f000 f865 	bl	8007e1c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	68fa      	ldr	r2, [r7, #12]
 8007d58:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	2220      	movs	r2, #32
 8007d5e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	2200      	movs	r2, #0
 8007d66:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007d6a:	2300      	movs	r3, #0
}
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	3710      	adds	r7, #16
 8007d70:	46bd      	mov	sp, r7
 8007d72:	bd80      	pop	{r7, pc}

08007d74 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007d74:	b580      	push	{r7, lr}
 8007d76:	b08c      	sub	sp, #48	@ 0x30
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	60f8      	str	r0, [r7, #12]
 8007d7c:	60b9      	str	r1, [r7, #8]
 8007d7e:	4613      	mov	r3, r2
 8007d80:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007d88:	2b20      	cmp	r3, #32
 8007d8a:	d142      	bne.n	8007e12 <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007d8c:	68bb      	ldr	r3, [r7, #8]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d002      	beq.n	8007d98 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 8007d92:	88fb      	ldrh	r3, [r7, #6]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d101      	bne.n	8007d9c <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 8007d98:	2301      	movs	r3, #1
 8007d9a:	e03b      	b.n	8007e14 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	2201      	movs	r2, #1
 8007da0:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	2200      	movs	r2, #0
 8007da6:	671a      	str	r2, [r3, #112]	@ 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8007da8:	88fb      	ldrh	r3, [r7, #6]
 8007daa:	461a      	mov	r2, r3
 8007dac:	68b9      	ldr	r1, [r7, #8]
 8007dae:	68f8      	ldr	r0, [r7, #12]
 8007db0:	f7ff faec 	bl	800738c <UART_Start_Receive_DMA>
 8007db4:	4603      	mov	r3, r0
 8007db6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8007dba:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d124      	bne.n	8007e0c <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007dc6:	2b01      	cmp	r3, #1
 8007dc8:	d11d      	bne.n	8007e06 <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	2210      	movs	r2, #16
 8007dd0:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dd8:	69bb      	ldr	r3, [r7, #24]
 8007dda:	e853 3f00 	ldrex	r3, [r3]
 8007dde:	617b      	str	r3, [r7, #20]
   return(result);
 8007de0:	697b      	ldr	r3, [r7, #20]
 8007de2:	f043 0310 	orr.w	r3, r3, #16
 8007de6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	461a      	mov	r2, r3
 8007dee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007df0:	627b      	str	r3, [r7, #36]	@ 0x24
 8007df2:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007df4:	6a39      	ldr	r1, [r7, #32]
 8007df6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007df8:	e841 2300 	strex	r3, r2, [r1]
 8007dfc:	61fb      	str	r3, [r7, #28]
   return(result);
 8007dfe:	69fb      	ldr	r3, [r7, #28]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d1e6      	bne.n	8007dd2 <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 8007e04:	e002      	b.n	8007e0c <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8007e06:	2301      	movs	r3, #1
 8007e08:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8007e0c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007e10:	e000      	b.n	8007e14 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8007e12:	2302      	movs	r3, #2
  }
}
 8007e14:	4618      	mov	r0, r3
 8007e16:	3730      	adds	r7, #48	@ 0x30
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	bd80      	pop	{r7, pc}

08007e1c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007e1c:	b480      	push	{r7}
 8007e1e:	b085      	sub	sp, #20
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d108      	bne.n	8007e3e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	2201      	movs	r2, #1
 8007e30:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	2201      	movs	r2, #1
 8007e38:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007e3c:	e031      	b.n	8007ea2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007e3e:	2308      	movs	r3, #8
 8007e40:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007e42:	2308      	movs	r3, #8
 8007e44:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	689b      	ldr	r3, [r3, #8]
 8007e4c:	0e5b      	lsrs	r3, r3, #25
 8007e4e:	b2db      	uxtb	r3, r3
 8007e50:	f003 0307 	and.w	r3, r3, #7
 8007e54:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	689b      	ldr	r3, [r3, #8]
 8007e5c:	0f5b      	lsrs	r3, r3, #29
 8007e5e:	b2db      	uxtb	r3, r3
 8007e60:	f003 0307 	and.w	r3, r3, #7
 8007e64:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007e66:	7bbb      	ldrb	r3, [r7, #14]
 8007e68:	7b3a      	ldrb	r2, [r7, #12]
 8007e6a:	4911      	ldr	r1, [pc, #68]	@ (8007eb0 <UARTEx_SetNbDataToProcess+0x94>)
 8007e6c:	5c8a      	ldrb	r2, [r1, r2]
 8007e6e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007e72:	7b3a      	ldrb	r2, [r7, #12]
 8007e74:	490f      	ldr	r1, [pc, #60]	@ (8007eb4 <UARTEx_SetNbDataToProcess+0x98>)
 8007e76:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007e78:	fb93 f3f2 	sdiv	r3, r3, r2
 8007e7c:	b29a      	uxth	r2, r3
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007e84:	7bfb      	ldrb	r3, [r7, #15]
 8007e86:	7b7a      	ldrb	r2, [r7, #13]
 8007e88:	4909      	ldr	r1, [pc, #36]	@ (8007eb0 <UARTEx_SetNbDataToProcess+0x94>)
 8007e8a:	5c8a      	ldrb	r2, [r1, r2]
 8007e8c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007e90:	7b7a      	ldrb	r2, [r7, #13]
 8007e92:	4908      	ldr	r1, [pc, #32]	@ (8007eb4 <UARTEx_SetNbDataToProcess+0x98>)
 8007e94:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007e96:	fb93 f3f2 	sdiv	r3, r3, r2
 8007e9a:	b29a      	uxth	r2, r3
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8007ea2:	bf00      	nop
 8007ea4:	3714      	adds	r7, #20
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eac:	4770      	bx	lr
 8007eae:	bf00      	nop
 8007eb0:	0800d0ac 	.word	0x0800d0ac
 8007eb4:	0800d0b4 	.word	0x0800d0b4

08007eb8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8007eb8:	b480      	push	{r7}
 8007eba:	b085      	sub	sp, #20
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007ec8:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8007ecc:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	b29a      	uxth	r2, r3
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8007ed8:	2300      	movs	r3, #0
}
 8007eda:	4618      	mov	r0, r3
 8007edc:	3714      	adds	r7, #20
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee4:	4770      	bx	lr

08007ee6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8007ee6:	b480      	push	{r7}
 8007ee8:	b085      	sub	sp, #20
 8007eea:	af00      	add	r7, sp, #0
 8007eec:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007eee:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8007ef2:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8007efa:	b29a      	uxth	r2, r3
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	b29b      	uxth	r3, r3
 8007f00:	43db      	mvns	r3, r3
 8007f02:	b29b      	uxth	r3, r3
 8007f04:	4013      	ands	r3, r2
 8007f06:	b29a      	uxth	r2, r3
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8007f0e:	2300      	movs	r3, #0
}
 8007f10:	4618      	mov	r0, r3
 8007f12:	3714      	adds	r7, #20
 8007f14:	46bd      	mov	sp, r7
 8007f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1a:	4770      	bx	lr

08007f1c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007f1c:	b480      	push	{r7}
 8007f1e:	b085      	sub	sp, #20
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	60f8      	str	r0, [r7, #12]
 8007f24:	1d3b      	adds	r3, r7, #4
 8007f26:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	2201      	movs	r2, #1
 8007f2e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	2200      	movs	r2, #0
 8007f36:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	2200      	movs	r2, #0
 8007f46:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8007f4a:	2300      	movs	r3, #0
}
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	3714      	adds	r7, #20
 8007f50:	46bd      	mov	sp, r7
 8007f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f56:	4770      	bx	lr

08007f58 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007f58:	b480      	push	{r7}
 8007f5a:	b0a7      	sub	sp, #156	@ 0x9c
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
 8007f60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8007f62:	2300      	movs	r3, #0
 8007f64:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8007f68:	687a      	ldr	r2, [r7, #4]
 8007f6a:	683b      	ldr	r3, [r7, #0]
 8007f6c:	781b      	ldrb	r3, [r3, #0]
 8007f6e:	009b      	lsls	r3, r3, #2
 8007f70:	4413      	add	r3, r2
 8007f72:	881b      	ldrh	r3, [r3, #0]
 8007f74:	b29b      	uxth	r3, r3
 8007f76:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8007f7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f7e:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94

  /* initialize Endpoint */
  switch (ep->type)
 8007f82:	683b      	ldr	r3, [r7, #0]
 8007f84:	78db      	ldrb	r3, [r3, #3]
 8007f86:	2b03      	cmp	r3, #3
 8007f88:	d81f      	bhi.n	8007fca <USB_ActivateEndpoint+0x72>
 8007f8a:	a201      	add	r2, pc, #4	@ (adr r2, 8007f90 <USB_ActivateEndpoint+0x38>)
 8007f8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f90:	08007fa1 	.word	0x08007fa1
 8007f94:	08007fbd 	.word	0x08007fbd
 8007f98:	08007fd3 	.word	0x08007fd3
 8007f9c:	08007faf 	.word	0x08007faf
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8007fa0:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8007fa4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007fa8:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 8007fac:	e012      	b.n	8007fd4 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8007fae:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8007fb2:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8007fb6:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 8007fba:	e00b      	b.n	8007fd4 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8007fbc:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8007fc0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8007fc4:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 8007fc8:	e004      	b.n	8007fd4 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8007fca:	2301      	movs	r3, #1
 8007fcc:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
      break;
 8007fd0:	e000      	b.n	8007fd4 <USB_ActivateEndpoint+0x7c>
      break;
 8007fd2:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8007fd4:	687a      	ldr	r2, [r7, #4]
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	781b      	ldrb	r3, [r3, #0]
 8007fda:	009b      	lsls	r3, r3, #2
 8007fdc:	441a      	add	r2, r3
 8007fde:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8007fe2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007fe6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007fea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007fee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007ff2:	b29b      	uxth	r3, r3
 8007ff4:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8007ff6:	687a      	ldr	r2, [r7, #4]
 8007ff8:	683b      	ldr	r3, [r7, #0]
 8007ffa:	781b      	ldrb	r3, [r3, #0]
 8007ffc:	009b      	lsls	r3, r3, #2
 8007ffe:	4413      	add	r3, r2
 8008000:	881b      	ldrh	r3, [r3, #0]
 8008002:	b29b      	uxth	r3, r3
 8008004:	b21b      	sxth	r3, r3
 8008006:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800800a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800800e:	b21a      	sxth	r2, r3
 8008010:	683b      	ldr	r3, [r7, #0]
 8008012:	781b      	ldrb	r3, [r3, #0]
 8008014:	b21b      	sxth	r3, r3
 8008016:	4313      	orrs	r3, r2
 8008018:	b21b      	sxth	r3, r3
 800801a:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
 800801e:	687a      	ldr	r2, [r7, #4]
 8008020:	683b      	ldr	r3, [r7, #0]
 8008022:	781b      	ldrb	r3, [r3, #0]
 8008024:	009b      	lsls	r3, r3, #2
 8008026:	441a      	add	r2, r3
 8008028:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800802c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008030:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008034:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008038:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800803c:	b29b      	uxth	r3, r3
 800803e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8008040:	683b      	ldr	r3, [r7, #0]
 8008042:	7b1b      	ldrb	r3, [r3, #12]
 8008044:	2b00      	cmp	r3, #0
 8008046:	f040 8180 	bne.w	800834a <USB_ActivateEndpoint+0x3f2>
  {
    if (ep->is_in != 0U)
 800804a:	683b      	ldr	r3, [r7, #0]
 800804c:	785b      	ldrb	r3, [r3, #1]
 800804e:	2b00      	cmp	r3, #0
 8008050:	f000 8084 	beq.w	800815c <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	61bb      	str	r3, [r7, #24]
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800805e:	b29b      	uxth	r3, r3
 8008060:	461a      	mov	r2, r3
 8008062:	69bb      	ldr	r3, [r7, #24]
 8008064:	4413      	add	r3, r2
 8008066:	61bb      	str	r3, [r7, #24]
 8008068:	683b      	ldr	r3, [r7, #0]
 800806a:	781b      	ldrb	r3, [r3, #0]
 800806c:	00da      	lsls	r2, r3, #3
 800806e:	69bb      	ldr	r3, [r7, #24]
 8008070:	4413      	add	r3, r2
 8008072:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008076:	617b      	str	r3, [r7, #20]
 8008078:	683b      	ldr	r3, [r7, #0]
 800807a:	88db      	ldrh	r3, [r3, #6]
 800807c:	085b      	lsrs	r3, r3, #1
 800807e:	b29b      	uxth	r3, r3
 8008080:	005b      	lsls	r3, r3, #1
 8008082:	b29a      	uxth	r2, r3
 8008084:	697b      	ldr	r3, [r7, #20]
 8008086:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008088:	687a      	ldr	r2, [r7, #4]
 800808a:	683b      	ldr	r3, [r7, #0]
 800808c:	781b      	ldrb	r3, [r3, #0]
 800808e:	009b      	lsls	r3, r3, #2
 8008090:	4413      	add	r3, r2
 8008092:	881b      	ldrh	r3, [r3, #0]
 8008094:	827b      	strh	r3, [r7, #18]
 8008096:	8a7b      	ldrh	r3, [r7, #18]
 8008098:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800809c:	2b00      	cmp	r3, #0
 800809e:	d01b      	beq.n	80080d8 <USB_ActivateEndpoint+0x180>
 80080a0:	687a      	ldr	r2, [r7, #4]
 80080a2:	683b      	ldr	r3, [r7, #0]
 80080a4:	781b      	ldrb	r3, [r3, #0]
 80080a6:	009b      	lsls	r3, r3, #2
 80080a8:	4413      	add	r3, r2
 80080aa:	881b      	ldrh	r3, [r3, #0]
 80080ac:	b29b      	uxth	r3, r3
 80080ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80080b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80080b6:	823b      	strh	r3, [r7, #16]
 80080b8:	687a      	ldr	r2, [r7, #4]
 80080ba:	683b      	ldr	r3, [r7, #0]
 80080bc:	781b      	ldrb	r3, [r3, #0]
 80080be:	009b      	lsls	r3, r3, #2
 80080c0:	441a      	add	r2, r3
 80080c2:	8a3b      	ldrh	r3, [r7, #16]
 80080c4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80080c8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80080cc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80080d0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80080d4:	b29b      	uxth	r3, r3
 80080d6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80080d8:	683b      	ldr	r3, [r7, #0]
 80080da:	78db      	ldrb	r3, [r3, #3]
 80080dc:	2b01      	cmp	r3, #1
 80080de:	d020      	beq.n	8008122 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80080e0:	687a      	ldr	r2, [r7, #4]
 80080e2:	683b      	ldr	r3, [r7, #0]
 80080e4:	781b      	ldrb	r3, [r3, #0]
 80080e6:	009b      	lsls	r3, r3, #2
 80080e8:	4413      	add	r3, r2
 80080ea:	881b      	ldrh	r3, [r3, #0]
 80080ec:	b29b      	uxth	r3, r3
 80080ee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80080f2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80080f6:	81bb      	strh	r3, [r7, #12]
 80080f8:	89bb      	ldrh	r3, [r7, #12]
 80080fa:	f083 0320 	eor.w	r3, r3, #32
 80080fe:	81bb      	strh	r3, [r7, #12]
 8008100:	687a      	ldr	r2, [r7, #4]
 8008102:	683b      	ldr	r3, [r7, #0]
 8008104:	781b      	ldrb	r3, [r3, #0]
 8008106:	009b      	lsls	r3, r3, #2
 8008108:	441a      	add	r2, r3
 800810a:	89bb      	ldrh	r3, [r7, #12]
 800810c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008110:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008114:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008118:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800811c:	b29b      	uxth	r3, r3
 800811e:	8013      	strh	r3, [r2, #0]
 8008120:	e3f9      	b.n	8008916 <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008122:	687a      	ldr	r2, [r7, #4]
 8008124:	683b      	ldr	r3, [r7, #0]
 8008126:	781b      	ldrb	r3, [r3, #0]
 8008128:	009b      	lsls	r3, r3, #2
 800812a:	4413      	add	r3, r2
 800812c:	881b      	ldrh	r3, [r3, #0]
 800812e:	b29b      	uxth	r3, r3
 8008130:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008134:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008138:	81fb      	strh	r3, [r7, #14]
 800813a:	687a      	ldr	r2, [r7, #4]
 800813c:	683b      	ldr	r3, [r7, #0]
 800813e:	781b      	ldrb	r3, [r3, #0]
 8008140:	009b      	lsls	r3, r3, #2
 8008142:	441a      	add	r2, r3
 8008144:	89fb      	ldrh	r3, [r7, #14]
 8008146:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800814a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800814e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008152:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008156:	b29b      	uxth	r3, r3
 8008158:	8013      	strh	r3, [r2, #0]
 800815a:	e3dc      	b.n	8008916 <USB_ActivateEndpoint+0x9be>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	633b      	str	r3, [r7, #48]	@ 0x30
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008166:	b29b      	uxth	r3, r3
 8008168:	461a      	mov	r2, r3
 800816a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800816c:	4413      	add	r3, r2
 800816e:	633b      	str	r3, [r7, #48]	@ 0x30
 8008170:	683b      	ldr	r3, [r7, #0]
 8008172:	781b      	ldrb	r3, [r3, #0]
 8008174:	00da      	lsls	r2, r3, #3
 8008176:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008178:	4413      	add	r3, r2
 800817a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800817e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008180:	683b      	ldr	r3, [r7, #0]
 8008182:	88db      	ldrh	r3, [r3, #6]
 8008184:	085b      	lsrs	r3, r3, #1
 8008186:	b29b      	uxth	r3, r3
 8008188:	005b      	lsls	r3, r3, #1
 800818a:	b29a      	uxth	r2, r3
 800818c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800818e:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800819a:	b29b      	uxth	r3, r3
 800819c:	461a      	mov	r2, r3
 800819e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081a0:	4413      	add	r3, r2
 80081a2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80081a4:	683b      	ldr	r3, [r7, #0]
 80081a6:	781b      	ldrb	r3, [r3, #0]
 80081a8:	00da      	lsls	r2, r3, #3
 80081aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081ac:	4413      	add	r3, r2
 80081ae:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80081b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80081b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081b6:	881b      	ldrh	r3, [r3, #0]
 80081b8:	b29b      	uxth	r3, r3
 80081ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80081be:	b29a      	uxth	r2, r3
 80081c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081c2:	801a      	strh	r2, [r3, #0]
 80081c4:	683b      	ldr	r3, [r7, #0]
 80081c6:	691b      	ldr	r3, [r3, #16]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d10a      	bne.n	80081e2 <USB_ActivateEndpoint+0x28a>
 80081cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081ce:	881b      	ldrh	r3, [r3, #0]
 80081d0:	b29b      	uxth	r3, r3
 80081d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80081d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80081da:	b29a      	uxth	r2, r3
 80081dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081de:	801a      	strh	r2, [r3, #0]
 80081e0:	e041      	b.n	8008266 <USB_ActivateEndpoint+0x30e>
 80081e2:	683b      	ldr	r3, [r7, #0]
 80081e4:	691b      	ldr	r3, [r3, #16]
 80081e6:	2b3e      	cmp	r3, #62	@ 0x3e
 80081e8:	d81c      	bhi.n	8008224 <USB_ActivateEndpoint+0x2cc>
 80081ea:	683b      	ldr	r3, [r7, #0]
 80081ec:	691b      	ldr	r3, [r3, #16]
 80081ee:	085b      	lsrs	r3, r3, #1
 80081f0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80081f4:	683b      	ldr	r3, [r7, #0]
 80081f6:	691b      	ldr	r3, [r3, #16]
 80081f8:	f003 0301 	and.w	r3, r3, #1
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d004      	beq.n	800820a <USB_ActivateEndpoint+0x2b2>
 8008200:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008204:	3301      	adds	r3, #1
 8008206:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800820a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800820c:	881b      	ldrh	r3, [r3, #0]
 800820e:	b29a      	uxth	r2, r3
 8008210:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008214:	b29b      	uxth	r3, r3
 8008216:	029b      	lsls	r3, r3, #10
 8008218:	b29b      	uxth	r3, r3
 800821a:	4313      	orrs	r3, r2
 800821c:	b29a      	uxth	r2, r3
 800821e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008220:	801a      	strh	r2, [r3, #0]
 8008222:	e020      	b.n	8008266 <USB_ActivateEndpoint+0x30e>
 8008224:	683b      	ldr	r3, [r7, #0]
 8008226:	691b      	ldr	r3, [r3, #16]
 8008228:	095b      	lsrs	r3, r3, #5
 800822a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800822e:	683b      	ldr	r3, [r7, #0]
 8008230:	691b      	ldr	r3, [r3, #16]
 8008232:	f003 031f 	and.w	r3, r3, #31
 8008236:	2b00      	cmp	r3, #0
 8008238:	d104      	bne.n	8008244 <USB_ActivateEndpoint+0x2ec>
 800823a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800823e:	3b01      	subs	r3, #1
 8008240:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008246:	881b      	ldrh	r3, [r3, #0]
 8008248:	b29a      	uxth	r2, r3
 800824a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800824e:	b29b      	uxth	r3, r3
 8008250:	029b      	lsls	r3, r3, #10
 8008252:	b29b      	uxth	r3, r3
 8008254:	4313      	orrs	r3, r2
 8008256:	b29b      	uxth	r3, r3
 8008258:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800825c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008260:	b29a      	uxth	r2, r3
 8008262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008264:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008266:	687a      	ldr	r2, [r7, #4]
 8008268:	683b      	ldr	r3, [r7, #0]
 800826a:	781b      	ldrb	r3, [r3, #0]
 800826c:	009b      	lsls	r3, r3, #2
 800826e:	4413      	add	r3, r2
 8008270:	881b      	ldrh	r3, [r3, #0]
 8008272:	847b      	strh	r3, [r7, #34]	@ 0x22
 8008274:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8008276:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800827a:	2b00      	cmp	r3, #0
 800827c:	d01b      	beq.n	80082b6 <USB_ActivateEndpoint+0x35e>
 800827e:	687a      	ldr	r2, [r7, #4]
 8008280:	683b      	ldr	r3, [r7, #0]
 8008282:	781b      	ldrb	r3, [r3, #0]
 8008284:	009b      	lsls	r3, r3, #2
 8008286:	4413      	add	r3, r2
 8008288:	881b      	ldrh	r3, [r3, #0]
 800828a:	b29b      	uxth	r3, r3
 800828c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008290:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008294:	843b      	strh	r3, [r7, #32]
 8008296:	687a      	ldr	r2, [r7, #4]
 8008298:	683b      	ldr	r3, [r7, #0]
 800829a:	781b      	ldrb	r3, [r3, #0]
 800829c:	009b      	lsls	r3, r3, #2
 800829e:	441a      	add	r2, r3
 80082a0:	8c3b      	ldrh	r3, [r7, #32]
 80082a2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80082a6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80082aa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80082ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80082b2:	b29b      	uxth	r3, r3
 80082b4:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 80082b6:	683b      	ldr	r3, [r7, #0]
 80082b8:	781b      	ldrb	r3, [r3, #0]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d124      	bne.n	8008308 <USB_ActivateEndpoint+0x3b0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80082be:	687a      	ldr	r2, [r7, #4]
 80082c0:	683b      	ldr	r3, [r7, #0]
 80082c2:	781b      	ldrb	r3, [r3, #0]
 80082c4:	009b      	lsls	r3, r3, #2
 80082c6:	4413      	add	r3, r2
 80082c8:	881b      	ldrh	r3, [r3, #0]
 80082ca:	b29b      	uxth	r3, r3
 80082cc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80082d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80082d4:	83bb      	strh	r3, [r7, #28]
 80082d6:	8bbb      	ldrh	r3, [r7, #28]
 80082d8:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80082dc:	83bb      	strh	r3, [r7, #28]
 80082de:	8bbb      	ldrh	r3, [r7, #28]
 80082e0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80082e4:	83bb      	strh	r3, [r7, #28]
 80082e6:	687a      	ldr	r2, [r7, #4]
 80082e8:	683b      	ldr	r3, [r7, #0]
 80082ea:	781b      	ldrb	r3, [r3, #0]
 80082ec:	009b      	lsls	r3, r3, #2
 80082ee:	441a      	add	r2, r3
 80082f0:	8bbb      	ldrh	r3, [r7, #28]
 80082f2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80082f6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80082fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80082fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008302:	b29b      	uxth	r3, r3
 8008304:	8013      	strh	r3, [r2, #0]
 8008306:	e306      	b.n	8008916 <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8008308:	687a      	ldr	r2, [r7, #4]
 800830a:	683b      	ldr	r3, [r7, #0]
 800830c:	781b      	ldrb	r3, [r3, #0]
 800830e:	009b      	lsls	r3, r3, #2
 8008310:	4413      	add	r3, r2
 8008312:	881b      	ldrh	r3, [r3, #0]
 8008314:	b29b      	uxth	r3, r3
 8008316:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800831a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800831e:	83fb      	strh	r3, [r7, #30]
 8008320:	8bfb      	ldrh	r3, [r7, #30]
 8008322:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008326:	83fb      	strh	r3, [r7, #30]
 8008328:	687a      	ldr	r2, [r7, #4]
 800832a:	683b      	ldr	r3, [r7, #0]
 800832c:	781b      	ldrb	r3, [r3, #0]
 800832e:	009b      	lsls	r3, r3, #2
 8008330:	441a      	add	r2, r3
 8008332:	8bfb      	ldrh	r3, [r7, #30]
 8008334:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008338:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800833c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008340:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008344:	b29b      	uxth	r3, r3
 8008346:	8013      	strh	r3, [r2, #0]
 8008348:	e2e5      	b.n	8008916 <USB_ActivateEndpoint+0x9be>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800834a:	683b      	ldr	r3, [r7, #0]
 800834c:	78db      	ldrb	r3, [r3, #3]
 800834e:	2b02      	cmp	r3, #2
 8008350:	d11e      	bne.n	8008390 <USB_ActivateEndpoint+0x438>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8008352:	687a      	ldr	r2, [r7, #4]
 8008354:	683b      	ldr	r3, [r7, #0]
 8008356:	781b      	ldrb	r3, [r3, #0]
 8008358:	009b      	lsls	r3, r3, #2
 800835a:	4413      	add	r3, r2
 800835c:	881b      	ldrh	r3, [r3, #0]
 800835e:	b29b      	uxth	r3, r3
 8008360:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008364:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008368:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 800836c:	687a      	ldr	r2, [r7, #4]
 800836e:	683b      	ldr	r3, [r7, #0]
 8008370:	781b      	ldrb	r3, [r3, #0]
 8008372:	009b      	lsls	r3, r3, #2
 8008374:	441a      	add	r2, r3
 8008376:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 800837a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800837e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008382:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8008386:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800838a:	b29b      	uxth	r3, r3
 800838c:	8013      	strh	r3, [r2, #0]
 800838e:	e01d      	b.n	80083cc <USB_ActivateEndpoint+0x474>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8008390:	687a      	ldr	r2, [r7, #4]
 8008392:	683b      	ldr	r3, [r7, #0]
 8008394:	781b      	ldrb	r3, [r3, #0]
 8008396:	009b      	lsls	r3, r3, #2
 8008398:	4413      	add	r3, r2
 800839a:	881b      	ldrh	r3, [r3, #0]
 800839c:	b29b      	uxth	r3, r3
 800839e:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80083a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80083a6:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
 80083aa:	687a      	ldr	r2, [r7, #4]
 80083ac:	683b      	ldr	r3, [r7, #0]
 80083ae:	781b      	ldrb	r3, [r3, #0]
 80083b0:	009b      	lsls	r3, r3, #2
 80083b2:	441a      	add	r2, r3
 80083b4:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 80083b8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80083bc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80083c0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80083c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80083c8:	b29b      	uxth	r3, r3
 80083ca:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80083d6:	b29b      	uxth	r3, r3
 80083d8:	461a      	mov	r2, r3
 80083da:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80083dc:	4413      	add	r3, r2
 80083de:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80083e0:	683b      	ldr	r3, [r7, #0]
 80083e2:	781b      	ldrb	r3, [r3, #0]
 80083e4:	00da      	lsls	r2, r3, #3
 80083e6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80083e8:	4413      	add	r3, r2
 80083ea:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80083ee:	67bb      	str	r3, [r7, #120]	@ 0x78
 80083f0:	683b      	ldr	r3, [r7, #0]
 80083f2:	891b      	ldrh	r3, [r3, #8]
 80083f4:	085b      	lsrs	r3, r3, #1
 80083f6:	b29b      	uxth	r3, r3
 80083f8:	005b      	lsls	r3, r3, #1
 80083fa:	b29a      	uxth	r2, r3
 80083fc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80083fe:	801a      	strh	r2, [r3, #0]
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	677b      	str	r3, [r7, #116]	@ 0x74
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800840a:	b29b      	uxth	r3, r3
 800840c:	461a      	mov	r2, r3
 800840e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008410:	4413      	add	r3, r2
 8008412:	677b      	str	r3, [r7, #116]	@ 0x74
 8008414:	683b      	ldr	r3, [r7, #0]
 8008416:	781b      	ldrb	r3, [r3, #0]
 8008418:	00da      	lsls	r2, r3, #3
 800841a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800841c:	4413      	add	r3, r2
 800841e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008422:	673b      	str	r3, [r7, #112]	@ 0x70
 8008424:	683b      	ldr	r3, [r7, #0]
 8008426:	895b      	ldrh	r3, [r3, #10]
 8008428:	085b      	lsrs	r3, r3, #1
 800842a:	b29b      	uxth	r3, r3
 800842c:	005b      	lsls	r3, r3, #1
 800842e:	b29a      	uxth	r2, r3
 8008430:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008432:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8008434:	683b      	ldr	r3, [r7, #0]
 8008436:	785b      	ldrb	r3, [r3, #1]
 8008438:	2b00      	cmp	r3, #0
 800843a:	f040 81af 	bne.w	800879c <USB_ActivateEndpoint+0x844>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800843e:	687a      	ldr	r2, [r7, #4]
 8008440:	683b      	ldr	r3, [r7, #0]
 8008442:	781b      	ldrb	r3, [r3, #0]
 8008444:	009b      	lsls	r3, r3, #2
 8008446:	4413      	add	r3, r2
 8008448:	881b      	ldrh	r3, [r3, #0]
 800844a:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
 800844e:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 8008452:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008456:	2b00      	cmp	r3, #0
 8008458:	d01d      	beq.n	8008496 <USB_ActivateEndpoint+0x53e>
 800845a:	687a      	ldr	r2, [r7, #4]
 800845c:	683b      	ldr	r3, [r7, #0]
 800845e:	781b      	ldrb	r3, [r3, #0]
 8008460:	009b      	lsls	r3, r3, #2
 8008462:	4413      	add	r3, r2
 8008464:	881b      	ldrh	r3, [r3, #0]
 8008466:	b29b      	uxth	r3, r3
 8008468:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800846c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008470:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 8008474:	687a      	ldr	r2, [r7, #4]
 8008476:	683b      	ldr	r3, [r7, #0]
 8008478:	781b      	ldrb	r3, [r3, #0]
 800847a:	009b      	lsls	r3, r3, #2
 800847c:	441a      	add	r2, r3
 800847e:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8008482:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008486:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800848a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800848e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008492:	b29b      	uxth	r3, r3
 8008494:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008496:	687a      	ldr	r2, [r7, #4]
 8008498:	683b      	ldr	r3, [r7, #0]
 800849a:	781b      	ldrb	r3, [r3, #0]
 800849c:	009b      	lsls	r3, r3, #2
 800849e:	4413      	add	r3, r2
 80084a0:	881b      	ldrh	r3, [r3, #0]
 80084a2:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 80084a6:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 80084aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d01d      	beq.n	80084ee <USB_ActivateEndpoint+0x596>
 80084b2:	687a      	ldr	r2, [r7, #4]
 80084b4:	683b      	ldr	r3, [r7, #0]
 80084b6:	781b      	ldrb	r3, [r3, #0]
 80084b8:	009b      	lsls	r3, r3, #2
 80084ba:	4413      	add	r3, r2
 80084bc:	881b      	ldrh	r3, [r3, #0]
 80084be:	b29b      	uxth	r3, r3
 80084c0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80084c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80084c8:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 80084cc:	687a      	ldr	r2, [r7, #4]
 80084ce:	683b      	ldr	r3, [r7, #0]
 80084d0:	781b      	ldrb	r3, [r3, #0]
 80084d2:	009b      	lsls	r3, r3, #2
 80084d4:	441a      	add	r2, r3
 80084d6:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 80084da:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80084de:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80084e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80084e6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80084ea:	b29b      	uxth	r3, r3
 80084ec:	8013      	strh	r3, [r2, #0]

      /* Set endpoint RX count */
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80084ee:	683b      	ldr	r3, [r7, #0]
 80084f0:	785b      	ldrb	r3, [r3, #1]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d16b      	bne.n	80085ce <USB_ActivateEndpoint+0x676>
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008500:	b29b      	uxth	r3, r3
 8008502:	461a      	mov	r2, r3
 8008504:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008506:	4413      	add	r3, r2
 8008508:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800850a:	683b      	ldr	r3, [r7, #0]
 800850c:	781b      	ldrb	r3, [r3, #0]
 800850e:	00da      	lsls	r2, r3, #3
 8008510:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008512:	4413      	add	r3, r2
 8008514:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008518:	64bb      	str	r3, [r7, #72]	@ 0x48
 800851a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800851c:	881b      	ldrh	r3, [r3, #0]
 800851e:	b29b      	uxth	r3, r3
 8008520:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008524:	b29a      	uxth	r2, r3
 8008526:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008528:	801a      	strh	r2, [r3, #0]
 800852a:	683b      	ldr	r3, [r7, #0]
 800852c:	691b      	ldr	r3, [r3, #16]
 800852e:	2b00      	cmp	r3, #0
 8008530:	d10a      	bne.n	8008548 <USB_ActivateEndpoint+0x5f0>
 8008532:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008534:	881b      	ldrh	r3, [r3, #0]
 8008536:	b29b      	uxth	r3, r3
 8008538:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800853c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008540:	b29a      	uxth	r2, r3
 8008542:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008544:	801a      	strh	r2, [r3, #0]
 8008546:	e05d      	b.n	8008604 <USB_ActivateEndpoint+0x6ac>
 8008548:	683b      	ldr	r3, [r7, #0]
 800854a:	691b      	ldr	r3, [r3, #16]
 800854c:	2b3e      	cmp	r3, #62	@ 0x3e
 800854e:	d81c      	bhi.n	800858a <USB_ActivateEndpoint+0x632>
 8008550:	683b      	ldr	r3, [r7, #0]
 8008552:	691b      	ldr	r3, [r3, #16]
 8008554:	085b      	lsrs	r3, r3, #1
 8008556:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800855a:	683b      	ldr	r3, [r7, #0]
 800855c:	691b      	ldr	r3, [r3, #16]
 800855e:	f003 0301 	and.w	r3, r3, #1
 8008562:	2b00      	cmp	r3, #0
 8008564:	d004      	beq.n	8008570 <USB_ActivateEndpoint+0x618>
 8008566:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800856a:	3301      	adds	r3, #1
 800856c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008570:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008572:	881b      	ldrh	r3, [r3, #0]
 8008574:	b29a      	uxth	r2, r3
 8008576:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800857a:	b29b      	uxth	r3, r3
 800857c:	029b      	lsls	r3, r3, #10
 800857e:	b29b      	uxth	r3, r3
 8008580:	4313      	orrs	r3, r2
 8008582:	b29a      	uxth	r2, r3
 8008584:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008586:	801a      	strh	r2, [r3, #0]
 8008588:	e03c      	b.n	8008604 <USB_ActivateEndpoint+0x6ac>
 800858a:	683b      	ldr	r3, [r7, #0]
 800858c:	691b      	ldr	r3, [r3, #16]
 800858e:	095b      	lsrs	r3, r3, #5
 8008590:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008594:	683b      	ldr	r3, [r7, #0]
 8008596:	691b      	ldr	r3, [r3, #16]
 8008598:	f003 031f 	and.w	r3, r3, #31
 800859c:	2b00      	cmp	r3, #0
 800859e:	d104      	bne.n	80085aa <USB_ActivateEndpoint+0x652>
 80085a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80085a4:	3b01      	subs	r3, #1
 80085a6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80085aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80085ac:	881b      	ldrh	r3, [r3, #0]
 80085ae:	b29a      	uxth	r2, r3
 80085b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80085b4:	b29b      	uxth	r3, r3
 80085b6:	029b      	lsls	r3, r3, #10
 80085b8:	b29b      	uxth	r3, r3
 80085ba:	4313      	orrs	r3, r2
 80085bc:	b29b      	uxth	r3, r3
 80085be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80085c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80085c6:	b29a      	uxth	r2, r3
 80085c8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80085ca:	801a      	strh	r2, [r3, #0]
 80085cc:	e01a      	b.n	8008604 <USB_ActivateEndpoint+0x6ac>
 80085ce:	683b      	ldr	r3, [r7, #0]
 80085d0:	785b      	ldrb	r3, [r3, #1]
 80085d2:	2b01      	cmp	r3, #1
 80085d4:	d116      	bne.n	8008604 <USB_ActivateEndpoint+0x6ac>
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	657b      	str	r3, [r7, #84]	@ 0x54
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80085e0:	b29b      	uxth	r3, r3
 80085e2:	461a      	mov	r2, r3
 80085e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80085e6:	4413      	add	r3, r2
 80085e8:	657b      	str	r3, [r7, #84]	@ 0x54
 80085ea:	683b      	ldr	r3, [r7, #0]
 80085ec:	781b      	ldrb	r3, [r3, #0]
 80085ee:	00da      	lsls	r2, r3, #3
 80085f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80085f2:	4413      	add	r3, r2
 80085f4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80085f8:	653b      	str	r3, [r7, #80]	@ 0x50
 80085fa:	683b      	ldr	r3, [r7, #0]
 80085fc:	691b      	ldr	r3, [r3, #16]
 80085fe:	b29a      	uxth	r2, r3
 8008600:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008602:	801a      	strh	r2, [r3, #0]
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	647b      	str	r3, [r7, #68]	@ 0x44
 8008608:	683b      	ldr	r3, [r7, #0]
 800860a:	785b      	ldrb	r3, [r3, #1]
 800860c:	2b00      	cmp	r3, #0
 800860e:	d16b      	bne.n	80086e8 <USB_ActivateEndpoint+0x790>
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800861a:	b29b      	uxth	r3, r3
 800861c:	461a      	mov	r2, r3
 800861e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008620:	4413      	add	r3, r2
 8008622:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008624:	683b      	ldr	r3, [r7, #0]
 8008626:	781b      	ldrb	r3, [r3, #0]
 8008628:	00da      	lsls	r2, r3, #3
 800862a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800862c:	4413      	add	r3, r2
 800862e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008632:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008634:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008636:	881b      	ldrh	r3, [r3, #0]
 8008638:	b29b      	uxth	r3, r3
 800863a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800863e:	b29a      	uxth	r2, r3
 8008640:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008642:	801a      	strh	r2, [r3, #0]
 8008644:	683b      	ldr	r3, [r7, #0]
 8008646:	691b      	ldr	r3, [r3, #16]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d10a      	bne.n	8008662 <USB_ActivateEndpoint+0x70a>
 800864c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800864e:	881b      	ldrh	r3, [r3, #0]
 8008650:	b29b      	uxth	r3, r3
 8008652:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008656:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800865a:	b29a      	uxth	r2, r3
 800865c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800865e:	801a      	strh	r2, [r3, #0]
 8008660:	e05b      	b.n	800871a <USB_ActivateEndpoint+0x7c2>
 8008662:	683b      	ldr	r3, [r7, #0]
 8008664:	691b      	ldr	r3, [r3, #16]
 8008666:	2b3e      	cmp	r3, #62	@ 0x3e
 8008668:	d81c      	bhi.n	80086a4 <USB_ActivateEndpoint+0x74c>
 800866a:	683b      	ldr	r3, [r7, #0]
 800866c:	691b      	ldr	r3, [r3, #16]
 800866e:	085b      	lsrs	r3, r3, #1
 8008670:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008674:	683b      	ldr	r3, [r7, #0]
 8008676:	691b      	ldr	r3, [r3, #16]
 8008678:	f003 0301 	and.w	r3, r3, #1
 800867c:	2b00      	cmp	r3, #0
 800867e:	d004      	beq.n	800868a <USB_ActivateEndpoint+0x732>
 8008680:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008684:	3301      	adds	r3, #1
 8008686:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800868a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800868c:	881b      	ldrh	r3, [r3, #0]
 800868e:	b29a      	uxth	r2, r3
 8008690:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008694:	b29b      	uxth	r3, r3
 8008696:	029b      	lsls	r3, r3, #10
 8008698:	b29b      	uxth	r3, r3
 800869a:	4313      	orrs	r3, r2
 800869c:	b29a      	uxth	r2, r3
 800869e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086a0:	801a      	strh	r2, [r3, #0]
 80086a2:	e03a      	b.n	800871a <USB_ActivateEndpoint+0x7c2>
 80086a4:	683b      	ldr	r3, [r7, #0]
 80086a6:	691b      	ldr	r3, [r3, #16]
 80086a8:	095b      	lsrs	r3, r3, #5
 80086aa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80086ae:	683b      	ldr	r3, [r7, #0]
 80086b0:	691b      	ldr	r3, [r3, #16]
 80086b2:	f003 031f 	and.w	r3, r3, #31
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d104      	bne.n	80086c4 <USB_ActivateEndpoint+0x76c>
 80086ba:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80086be:	3b01      	subs	r3, #1
 80086c0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80086c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086c6:	881b      	ldrh	r3, [r3, #0]
 80086c8:	b29a      	uxth	r2, r3
 80086ca:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80086ce:	b29b      	uxth	r3, r3
 80086d0:	029b      	lsls	r3, r3, #10
 80086d2:	b29b      	uxth	r3, r3
 80086d4:	4313      	orrs	r3, r2
 80086d6:	b29b      	uxth	r3, r3
 80086d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80086dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80086e0:	b29a      	uxth	r2, r3
 80086e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086e4:	801a      	strh	r2, [r3, #0]
 80086e6:	e018      	b.n	800871a <USB_ActivateEndpoint+0x7c2>
 80086e8:	683b      	ldr	r3, [r7, #0]
 80086ea:	785b      	ldrb	r3, [r3, #1]
 80086ec:	2b01      	cmp	r3, #1
 80086ee:	d114      	bne.n	800871a <USB_ActivateEndpoint+0x7c2>
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80086f6:	b29b      	uxth	r3, r3
 80086f8:	461a      	mov	r2, r3
 80086fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80086fc:	4413      	add	r3, r2
 80086fe:	647b      	str	r3, [r7, #68]	@ 0x44
 8008700:	683b      	ldr	r3, [r7, #0]
 8008702:	781b      	ldrb	r3, [r3, #0]
 8008704:	00da      	lsls	r2, r3, #3
 8008706:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008708:	4413      	add	r3, r2
 800870a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800870e:	643b      	str	r3, [r7, #64]	@ 0x40
 8008710:	683b      	ldr	r3, [r7, #0]
 8008712:	691b      	ldr	r3, [r3, #16]
 8008714:	b29a      	uxth	r2, r3
 8008716:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008718:	801a      	strh	r2, [r3, #0]

      /* Set endpoint RX to valid state */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800871a:	687a      	ldr	r2, [r7, #4]
 800871c:	683b      	ldr	r3, [r7, #0]
 800871e:	781b      	ldrb	r3, [r3, #0]
 8008720:	009b      	lsls	r3, r3, #2
 8008722:	4413      	add	r3, r2
 8008724:	881b      	ldrh	r3, [r3, #0]
 8008726:	b29b      	uxth	r3, r3
 8008728:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800872c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008730:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8008732:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8008734:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008738:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800873a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800873c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008740:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8008742:	687a      	ldr	r2, [r7, #4]
 8008744:	683b      	ldr	r3, [r7, #0]
 8008746:	781b      	ldrb	r3, [r3, #0]
 8008748:	009b      	lsls	r3, r3, #2
 800874a:	441a      	add	r2, r3
 800874c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800874e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008752:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008756:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800875a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800875e:	b29b      	uxth	r3, r3
 8008760:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008762:	687a      	ldr	r2, [r7, #4]
 8008764:	683b      	ldr	r3, [r7, #0]
 8008766:	781b      	ldrb	r3, [r3, #0]
 8008768:	009b      	lsls	r3, r3, #2
 800876a:	4413      	add	r3, r2
 800876c:	881b      	ldrh	r3, [r3, #0]
 800876e:	b29b      	uxth	r3, r3
 8008770:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008774:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008778:	86bb      	strh	r3, [r7, #52]	@ 0x34
 800877a:	687a      	ldr	r2, [r7, #4]
 800877c:	683b      	ldr	r3, [r7, #0]
 800877e:	781b      	ldrb	r3, [r3, #0]
 8008780:	009b      	lsls	r3, r3, #2
 8008782:	441a      	add	r2, r3
 8008784:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8008786:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800878a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800878e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008792:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008796:	b29b      	uxth	r3, r3
 8008798:	8013      	strh	r3, [r2, #0]
 800879a:	e0bc      	b.n	8008916 <USB_ActivateEndpoint+0x9be>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800879c:	687a      	ldr	r2, [r7, #4]
 800879e:	683b      	ldr	r3, [r7, #0]
 80087a0:	781b      	ldrb	r3, [r3, #0]
 80087a2:	009b      	lsls	r3, r3, #2
 80087a4:	4413      	add	r3, r2
 80087a6:	881b      	ldrh	r3, [r3, #0]
 80087a8:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 80087ac:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80087b0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d01d      	beq.n	80087f4 <USB_ActivateEndpoint+0x89c>
 80087b8:	687a      	ldr	r2, [r7, #4]
 80087ba:	683b      	ldr	r3, [r7, #0]
 80087bc:	781b      	ldrb	r3, [r3, #0]
 80087be:	009b      	lsls	r3, r3, #2
 80087c0:	4413      	add	r3, r2
 80087c2:	881b      	ldrh	r3, [r3, #0]
 80087c4:	b29b      	uxth	r3, r3
 80087c6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80087ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80087ce:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 80087d2:	687a      	ldr	r2, [r7, #4]
 80087d4:	683b      	ldr	r3, [r7, #0]
 80087d6:	781b      	ldrb	r3, [r3, #0]
 80087d8:	009b      	lsls	r3, r3, #2
 80087da:	441a      	add	r2, r3
 80087dc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80087e0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80087e4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80087e8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80087ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80087f0:	b29b      	uxth	r3, r3
 80087f2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80087f4:	687a      	ldr	r2, [r7, #4]
 80087f6:	683b      	ldr	r3, [r7, #0]
 80087f8:	781b      	ldrb	r3, [r3, #0]
 80087fa:	009b      	lsls	r3, r3, #2
 80087fc:	4413      	add	r3, r2
 80087fe:	881b      	ldrh	r3, [r3, #0]
 8008800:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
 8008804:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 8008808:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800880c:	2b00      	cmp	r3, #0
 800880e:	d01d      	beq.n	800884c <USB_ActivateEndpoint+0x8f4>
 8008810:	687a      	ldr	r2, [r7, #4]
 8008812:	683b      	ldr	r3, [r7, #0]
 8008814:	781b      	ldrb	r3, [r3, #0]
 8008816:	009b      	lsls	r3, r3, #2
 8008818:	4413      	add	r3, r2
 800881a:	881b      	ldrh	r3, [r3, #0]
 800881c:	b29b      	uxth	r3, r3
 800881e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008822:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008826:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
 800882a:	687a      	ldr	r2, [r7, #4]
 800882c:	683b      	ldr	r3, [r7, #0]
 800882e:	781b      	ldrb	r3, [r3, #0]
 8008830:	009b      	lsls	r3, r3, #2
 8008832:	441a      	add	r2, r3
 8008834:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 8008838:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800883c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008840:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008844:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008848:	b29b      	uxth	r3, r3
 800884a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800884c:	683b      	ldr	r3, [r7, #0]
 800884e:	78db      	ldrb	r3, [r3, #3]
 8008850:	2b01      	cmp	r3, #1
 8008852:	d024      	beq.n	800889e <USB_ActivateEndpoint+0x946>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008854:	687a      	ldr	r2, [r7, #4]
 8008856:	683b      	ldr	r3, [r7, #0]
 8008858:	781b      	ldrb	r3, [r3, #0]
 800885a:	009b      	lsls	r3, r3, #2
 800885c:	4413      	add	r3, r2
 800885e:	881b      	ldrh	r3, [r3, #0]
 8008860:	b29b      	uxth	r3, r3
 8008862:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008866:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800886a:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 800886e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8008872:	f083 0320 	eor.w	r3, r3, #32
 8008876:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 800887a:	687a      	ldr	r2, [r7, #4]
 800887c:	683b      	ldr	r3, [r7, #0]
 800887e:	781b      	ldrb	r3, [r3, #0]
 8008880:	009b      	lsls	r3, r3, #2
 8008882:	441a      	add	r2, r3
 8008884:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8008888:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800888c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008890:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008894:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008898:	b29b      	uxth	r3, r3
 800889a:	8013      	strh	r3, [r2, #0]
 800889c:	e01d      	b.n	80088da <USB_ActivateEndpoint+0x982>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800889e:	687a      	ldr	r2, [r7, #4]
 80088a0:	683b      	ldr	r3, [r7, #0]
 80088a2:	781b      	ldrb	r3, [r3, #0]
 80088a4:	009b      	lsls	r3, r3, #2
 80088a6:	4413      	add	r3, r2
 80088a8:	881b      	ldrh	r3, [r3, #0]
 80088aa:	b29b      	uxth	r3, r3
 80088ac:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80088b0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80088b4:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 80088b8:	687a      	ldr	r2, [r7, #4]
 80088ba:	683b      	ldr	r3, [r7, #0]
 80088bc:	781b      	ldrb	r3, [r3, #0]
 80088be:	009b      	lsls	r3, r3, #2
 80088c0:	441a      	add	r2, r3
 80088c2:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80088c6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80088ca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80088ce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80088d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80088d6:	b29b      	uxth	r3, r3
 80088d8:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80088da:	687a      	ldr	r2, [r7, #4]
 80088dc:	683b      	ldr	r3, [r7, #0]
 80088de:	781b      	ldrb	r3, [r3, #0]
 80088e0:	009b      	lsls	r3, r3, #2
 80088e2:	4413      	add	r3, r2
 80088e4:	881b      	ldrh	r3, [r3, #0]
 80088e6:	b29b      	uxth	r3, r3
 80088e8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80088ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80088f0:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80088f4:	687a      	ldr	r2, [r7, #4]
 80088f6:	683b      	ldr	r3, [r7, #0]
 80088f8:	781b      	ldrb	r3, [r3, #0]
 80088fa:	009b      	lsls	r3, r3, #2
 80088fc:	441a      	add	r2, r3
 80088fe:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8008902:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008906:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800890a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800890e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008912:	b29b      	uxth	r3, r3
 8008914:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8008916:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
}
 800891a:	4618      	mov	r0, r3
 800891c:	379c      	adds	r7, #156	@ 0x9c
 800891e:	46bd      	mov	sp, r7
 8008920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008924:	4770      	bx	lr
 8008926:	bf00      	nop

08008928 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008928:	b480      	push	{r7}
 800892a:	b08d      	sub	sp, #52	@ 0x34
 800892c:	af00      	add	r7, sp, #0
 800892e:	6078      	str	r0, [r7, #4]
 8008930:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008932:	683b      	ldr	r3, [r7, #0]
 8008934:	7b1b      	ldrb	r3, [r3, #12]
 8008936:	2b00      	cmp	r3, #0
 8008938:	f040 808e 	bne.w	8008a58 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800893c:	683b      	ldr	r3, [r7, #0]
 800893e:	785b      	ldrb	r3, [r3, #1]
 8008940:	2b00      	cmp	r3, #0
 8008942:	d044      	beq.n	80089ce <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008944:	687a      	ldr	r2, [r7, #4]
 8008946:	683b      	ldr	r3, [r7, #0]
 8008948:	781b      	ldrb	r3, [r3, #0]
 800894a:	009b      	lsls	r3, r3, #2
 800894c:	4413      	add	r3, r2
 800894e:	881b      	ldrh	r3, [r3, #0]
 8008950:	81bb      	strh	r3, [r7, #12]
 8008952:	89bb      	ldrh	r3, [r7, #12]
 8008954:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008958:	2b00      	cmp	r3, #0
 800895a:	d01b      	beq.n	8008994 <USB_DeactivateEndpoint+0x6c>
 800895c:	687a      	ldr	r2, [r7, #4]
 800895e:	683b      	ldr	r3, [r7, #0]
 8008960:	781b      	ldrb	r3, [r3, #0]
 8008962:	009b      	lsls	r3, r3, #2
 8008964:	4413      	add	r3, r2
 8008966:	881b      	ldrh	r3, [r3, #0]
 8008968:	b29b      	uxth	r3, r3
 800896a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800896e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008972:	817b      	strh	r3, [r7, #10]
 8008974:	687a      	ldr	r2, [r7, #4]
 8008976:	683b      	ldr	r3, [r7, #0]
 8008978:	781b      	ldrb	r3, [r3, #0]
 800897a:	009b      	lsls	r3, r3, #2
 800897c:	441a      	add	r2, r3
 800897e:	897b      	ldrh	r3, [r7, #10]
 8008980:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008984:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008988:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800898c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008990:	b29b      	uxth	r3, r3
 8008992:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008994:	687a      	ldr	r2, [r7, #4]
 8008996:	683b      	ldr	r3, [r7, #0]
 8008998:	781b      	ldrb	r3, [r3, #0]
 800899a:	009b      	lsls	r3, r3, #2
 800899c:	4413      	add	r3, r2
 800899e:	881b      	ldrh	r3, [r3, #0]
 80089a0:	b29b      	uxth	r3, r3
 80089a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80089a6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80089aa:	813b      	strh	r3, [r7, #8]
 80089ac:	687a      	ldr	r2, [r7, #4]
 80089ae:	683b      	ldr	r3, [r7, #0]
 80089b0:	781b      	ldrb	r3, [r3, #0]
 80089b2:	009b      	lsls	r3, r3, #2
 80089b4:	441a      	add	r2, r3
 80089b6:	893b      	ldrh	r3, [r7, #8]
 80089b8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80089bc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80089c0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80089c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80089c8:	b29b      	uxth	r3, r3
 80089ca:	8013      	strh	r3, [r2, #0]
 80089cc:	e192      	b.n	8008cf4 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80089ce:	687a      	ldr	r2, [r7, #4]
 80089d0:	683b      	ldr	r3, [r7, #0]
 80089d2:	781b      	ldrb	r3, [r3, #0]
 80089d4:	009b      	lsls	r3, r3, #2
 80089d6:	4413      	add	r3, r2
 80089d8:	881b      	ldrh	r3, [r3, #0]
 80089da:	827b      	strh	r3, [r7, #18]
 80089dc:	8a7b      	ldrh	r3, [r7, #18]
 80089de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d01b      	beq.n	8008a1e <USB_DeactivateEndpoint+0xf6>
 80089e6:	687a      	ldr	r2, [r7, #4]
 80089e8:	683b      	ldr	r3, [r7, #0]
 80089ea:	781b      	ldrb	r3, [r3, #0]
 80089ec:	009b      	lsls	r3, r3, #2
 80089ee:	4413      	add	r3, r2
 80089f0:	881b      	ldrh	r3, [r3, #0]
 80089f2:	b29b      	uxth	r3, r3
 80089f4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80089f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80089fc:	823b      	strh	r3, [r7, #16]
 80089fe:	687a      	ldr	r2, [r7, #4]
 8008a00:	683b      	ldr	r3, [r7, #0]
 8008a02:	781b      	ldrb	r3, [r3, #0]
 8008a04:	009b      	lsls	r3, r3, #2
 8008a06:	441a      	add	r2, r3
 8008a08:	8a3b      	ldrh	r3, [r7, #16]
 8008a0a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008a0e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008a12:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008a16:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008a1a:	b29b      	uxth	r3, r3
 8008a1c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008a1e:	687a      	ldr	r2, [r7, #4]
 8008a20:	683b      	ldr	r3, [r7, #0]
 8008a22:	781b      	ldrb	r3, [r3, #0]
 8008a24:	009b      	lsls	r3, r3, #2
 8008a26:	4413      	add	r3, r2
 8008a28:	881b      	ldrh	r3, [r3, #0]
 8008a2a:	b29b      	uxth	r3, r3
 8008a2c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008a30:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008a34:	81fb      	strh	r3, [r7, #14]
 8008a36:	687a      	ldr	r2, [r7, #4]
 8008a38:	683b      	ldr	r3, [r7, #0]
 8008a3a:	781b      	ldrb	r3, [r3, #0]
 8008a3c:	009b      	lsls	r3, r3, #2
 8008a3e:	441a      	add	r2, r3
 8008a40:	89fb      	ldrh	r3, [r7, #14]
 8008a42:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008a46:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008a4a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008a4e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008a52:	b29b      	uxth	r3, r3
 8008a54:	8013      	strh	r3, [r2, #0]
 8008a56:	e14d      	b.n	8008cf4 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8008a58:	683b      	ldr	r3, [r7, #0]
 8008a5a:	785b      	ldrb	r3, [r3, #1]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	f040 80a5 	bne.w	8008bac <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008a62:	687a      	ldr	r2, [r7, #4]
 8008a64:	683b      	ldr	r3, [r7, #0]
 8008a66:	781b      	ldrb	r3, [r3, #0]
 8008a68:	009b      	lsls	r3, r3, #2
 8008a6a:	4413      	add	r3, r2
 8008a6c:	881b      	ldrh	r3, [r3, #0]
 8008a6e:	843b      	strh	r3, [r7, #32]
 8008a70:	8c3b      	ldrh	r3, [r7, #32]
 8008a72:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d01b      	beq.n	8008ab2 <USB_DeactivateEndpoint+0x18a>
 8008a7a:	687a      	ldr	r2, [r7, #4]
 8008a7c:	683b      	ldr	r3, [r7, #0]
 8008a7e:	781b      	ldrb	r3, [r3, #0]
 8008a80:	009b      	lsls	r3, r3, #2
 8008a82:	4413      	add	r3, r2
 8008a84:	881b      	ldrh	r3, [r3, #0]
 8008a86:	b29b      	uxth	r3, r3
 8008a88:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008a8c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008a90:	83fb      	strh	r3, [r7, #30]
 8008a92:	687a      	ldr	r2, [r7, #4]
 8008a94:	683b      	ldr	r3, [r7, #0]
 8008a96:	781b      	ldrb	r3, [r3, #0]
 8008a98:	009b      	lsls	r3, r3, #2
 8008a9a:	441a      	add	r2, r3
 8008a9c:	8bfb      	ldrh	r3, [r7, #30]
 8008a9e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008aa2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008aa6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008aaa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008aae:	b29b      	uxth	r3, r3
 8008ab0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008ab2:	687a      	ldr	r2, [r7, #4]
 8008ab4:	683b      	ldr	r3, [r7, #0]
 8008ab6:	781b      	ldrb	r3, [r3, #0]
 8008ab8:	009b      	lsls	r3, r3, #2
 8008aba:	4413      	add	r3, r2
 8008abc:	881b      	ldrh	r3, [r3, #0]
 8008abe:	83bb      	strh	r3, [r7, #28]
 8008ac0:	8bbb      	ldrh	r3, [r7, #28]
 8008ac2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d01b      	beq.n	8008b02 <USB_DeactivateEndpoint+0x1da>
 8008aca:	687a      	ldr	r2, [r7, #4]
 8008acc:	683b      	ldr	r3, [r7, #0]
 8008ace:	781b      	ldrb	r3, [r3, #0]
 8008ad0:	009b      	lsls	r3, r3, #2
 8008ad2:	4413      	add	r3, r2
 8008ad4:	881b      	ldrh	r3, [r3, #0]
 8008ad6:	b29b      	uxth	r3, r3
 8008ad8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008adc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008ae0:	837b      	strh	r3, [r7, #26]
 8008ae2:	687a      	ldr	r2, [r7, #4]
 8008ae4:	683b      	ldr	r3, [r7, #0]
 8008ae6:	781b      	ldrb	r3, [r3, #0]
 8008ae8:	009b      	lsls	r3, r3, #2
 8008aea:	441a      	add	r2, r3
 8008aec:	8b7b      	ldrh	r3, [r7, #26]
 8008aee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008af2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008af6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008afa:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008afe:	b29b      	uxth	r3, r3
 8008b00:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8008b02:	687a      	ldr	r2, [r7, #4]
 8008b04:	683b      	ldr	r3, [r7, #0]
 8008b06:	781b      	ldrb	r3, [r3, #0]
 8008b08:	009b      	lsls	r3, r3, #2
 8008b0a:	4413      	add	r3, r2
 8008b0c:	881b      	ldrh	r3, [r3, #0]
 8008b0e:	b29b      	uxth	r3, r3
 8008b10:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008b14:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008b18:	833b      	strh	r3, [r7, #24]
 8008b1a:	687a      	ldr	r2, [r7, #4]
 8008b1c:	683b      	ldr	r3, [r7, #0]
 8008b1e:	781b      	ldrb	r3, [r3, #0]
 8008b20:	009b      	lsls	r3, r3, #2
 8008b22:	441a      	add	r2, r3
 8008b24:	8b3b      	ldrh	r3, [r7, #24]
 8008b26:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008b2a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008b2e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008b32:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008b36:	b29b      	uxth	r3, r3
 8008b38:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008b3a:	687a      	ldr	r2, [r7, #4]
 8008b3c:	683b      	ldr	r3, [r7, #0]
 8008b3e:	781b      	ldrb	r3, [r3, #0]
 8008b40:	009b      	lsls	r3, r3, #2
 8008b42:	4413      	add	r3, r2
 8008b44:	881b      	ldrh	r3, [r3, #0]
 8008b46:	b29b      	uxth	r3, r3
 8008b48:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008b4c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008b50:	82fb      	strh	r3, [r7, #22]
 8008b52:	687a      	ldr	r2, [r7, #4]
 8008b54:	683b      	ldr	r3, [r7, #0]
 8008b56:	781b      	ldrb	r3, [r3, #0]
 8008b58:	009b      	lsls	r3, r3, #2
 8008b5a:	441a      	add	r2, r3
 8008b5c:	8afb      	ldrh	r3, [r7, #22]
 8008b5e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008b62:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008b66:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008b6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008b6e:	b29b      	uxth	r3, r3
 8008b70:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008b72:	687a      	ldr	r2, [r7, #4]
 8008b74:	683b      	ldr	r3, [r7, #0]
 8008b76:	781b      	ldrb	r3, [r3, #0]
 8008b78:	009b      	lsls	r3, r3, #2
 8008b7a:	4413      	add	r3, r2
 8008b7c:	881b      	ldrh	r3, [r3, #0]
 8008b7e:	b29b      	uxth	r3, r3
 8008b80:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008b84:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008b88:	82bb      	strh	r3, [r7, #20]
 8008b8a:	687a      	ldr	r2, [r7, #4]
 8008b8c:	683b      	ldr	r3, [r7, #0]
 8008b8e:	781b      	ldrb	r3, [r3, #0]
 8008b90:	009b      	lsls	r3, r3, #2
 8008b92:	441a      	add	r2, r3
 8008b94:	8abb      	ldrh	r3, [r7, #20]
 8008b96:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008b9a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008b9e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008ba2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008ba6:	b29b      	uxth	r3, r3
 8008ba8:	8013      	strh	r3, [r2, #0]
 8008baa:	e0a3      	b.n	8008cf4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008bac:	687a      	ldr	r2, [r7, #4]
 8008bae:	683b      	ldr	r3, [r7, #0]
 8008bb0:	781b      	ldrb	r3, [r3, #0]
 8008bb2:	009b      	lsls	r3, r3, #2
 8008bb4:	4413      	add	r3, r2
 8008bb6:	881b      	ldrh	r3, [r3, #0]
 8008bb8:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8008bba:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8008bbc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d01b      	beq.n	8008bfc <USB_DeactivateEndpoint+0x2d4>
 8008bc4:	687a      	ldr	r2, [r7, #4]
 8008bc6:	683b      	ldr	r3, [r7, #0]
 8008bc8:	781b      	ldrb	r3, [r3, #0]
 8008bca:	009b      	lsls	r3, r3, #2
 8008bcc:	4413      	add	r3, r2
 8008bce:	881b      	ldrh	r3, [r3, #0]
 8008bd0:	b29b      	uxth	r3, r3
 8008bd2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008bd6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008bda:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8008bdc:	687a      	ldr	r2, [r7, #4]
 8008bde:	683b      	ldr	r3, [r7, #0]
 8008be0:	781b      	ldrb	r3, [r3, #0]
 8008be2:	009b      	lsls	r3, r3, #2
 8008be4:	441a      	add	r2, r3
 8008be6:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8008be8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008bec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008bf0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008bf4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008bf8:	b29b      	uxth	r3, r3
 8008bfa:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008bfc:	687a      	ldr	r2, [r7, #4]
 8008bfe:	683b      	ldr	r3, [r7, #0]
 8008c00:	781b      	ldrb	r3, [r3, #0]
 8008c02:	009b      	lsls	r3, r3, #2
 8008c04:	4413      	add	r3, r2
 8008c06:	881b      	ldrh	r3, [r3, #0]
 8008c08:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8008c0a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8008c0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d01b      	beq.n	8008c4c <USB_DeactivateEndpoint+0x324>
 8008c14:	687a      	ldr	r2, [r7, #4]
 8008c16:	683b      	ldr	r3, [r7, #0]
 8008c18:	781b      	ldrb	r3, [r3, #0]
 8008c1a:	009b      	lsls	r3, r3, #2
 8008c1c:	4413      	add	r3, r2
 8008c1e:	881b      	ldrh	r3, [r3, #0]
 8008c20:	b29b      	uxth	r3, r3
 8008c22:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008c26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008c2a:	853b      	strh	r3, [r7, #40]	@ 0x28
 8008c2c:	687a      	ldr	r2, [r7, #4]
 8008c2e:	683b      	ldr	r3, [r7, #0]
 8008c30:	781b      	ldrb	r3, [r3, #0]
 8008c32:	009b      	lsls	r3, r3, #2
 8008c34:	441a      	add	r2, r3
 8008c36:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8008c38:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008c3c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008c40:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008c44:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008c48:	b29b      	uxth	r3, r3
 8008c4a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8008c4c:	687a      	ldr	r2, [r7, #4]
 8008c4e:	683b      	ldr	r3, [r7, #0]
 8008c50:	781b      	ldrb	r3, [r3, #0]
 8008c52:	009b      	lsls	r3, r3, #2
 8008c54:	4413      	add	r3, r2
 8008c56:	881b      	ldrh	r3, [r3, #0]
 8008c58:	b29b      	uxth	r3, r3
 8008c5a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008c5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008c62:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8008c64:	687a      	ldr	r2, [r7, #4]
 8008c66:	683b      	ldr	r3, [r7, #0]
 8008c68:	781b      	ldrb	r3, [r3, #0]
 8008c6a:	009b      	lsls	r3, r3, #2
 8008c6c:	441a      	add	r2, r3
 8008c6e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008c70:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008c74:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008c78:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008c7c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008c80:	b29b      	uxth	r3, r3
 8008c82:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008c84:	687a      	ldr	r2, [r7, #4]
 8008c86:	683b      	ldr	r3, [r7, #0]
 8008c88:	781b      	ldrb	r3, [r3, #0]
 8008c8a:	009b      	lsls	r3, r3, #2
 8008c8c:	4413      	add	r3, r2
 8008c8e:	881b      	ldrh	r3, [r3, #0]
 8008c90:	b29b      	uxth	r3, r3
 8008c92:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008c96:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008c9a:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8008c9c:	687a      	ldr	r2, [r7, #4]
 8008c9e:	683b      	ldr	r3, [r7, #0]
 8008ca0:	781b      	ldrb	r3, [r3, #0]
 8008ca2:	009b      	lsls	r3, r3, #2
 8008ca4:	441a      	add	r2, r3
 8008ca6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008ca8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008cac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008cb0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008cb4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008cb8:	b29b      	uxth	r3, r3
 8008cba:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008cbc:	687a      	ldr	r2, [r7, #4]
 8008cbe:	683b      	ldr	r3, [r7, #0]
 8008cc0:	781b      	ldrb	r3, [r3, #0]
 8008cc2:	009b      	lsls	r3, r3, #2
 8008cc4:	4413      	add	r3, r2
 8008cc6:	881b      	ldrh	r3, [r3, #0]
 8008cc8:	b29b      	uxth	r3, r3
 8008cca:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008cce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008cd2:	847b      	strh	r3, [r7, #34]	@ 0x22
 8008cd4:	687a      	ldr	r2, [r7, #4]
 8008cd6:	683b      	ldr	r3, [r7, #0]
 8008cd8:	781b      	ldrb	r3, [r3, #0]
 8008cda:	009b      	lsls	r3, r3, #2
 8008cdc:	441a      	add	r2, r3
 8008cde:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8008ce0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008ce4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008ce8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008cec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008cf0:	b29b      	uxth	r3, r3
 8008cf2:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8008cf4:	2300      	movs	r3, #0
}
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	3734      	adds	r7, #52	@ 0x34
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d00:	4770      	bx	lr

08008d02 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008d02:	b580      	push	{r7, lr}
 8008d04:	b0ac      	sub	sp, #176	@ 0xb0
 8008d06:	af00      	add	r7, sp, #0
 8008d08:	6078      	str	r0, [r7, #4]
 8008d0a:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008d0c:	683b      	ldr	r3, [r7, #0]
 8008d0e:	785b      	ldrb	r3, [r3, #1]
 8008d10:	2b01      	cmp	r3, #1
 8008d12:	f040 84ca 	bne.w	80096aa <USB_EPStartXfer+0x9a8>
  {
    /* Multi packet transfer */
    if (ep->xfer_len > ep->maxpacket)
 8008d16:	683b      	ldr	r3, [r7, #0]
 8008d18:	699a      	ldr	r2, [r3, #24]
 8008d1a:	683b      	ldr	r3, [r7, #0]
 8008d1c:	691b      	ldr	r3, [r3, #16]
 8008d1e:	429a      	cmp	r2, r3
 8008d20:	d904      	bls.n	8008d2c <USB_EPStartXfer+0x2a>
    {
      len = ep->maxpacket;
 8008d22:	683b      	ldr	r3, [r7, #0]
 8008d24:	691b      	ldr	r3, [r3, #16]
 8008d26:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008d2a:	e003      	b.n	8008d34 <USB_EPStartXfer+0x32>
    }
    else
    {
      len = ep->xfer_len;
 8008d2c:	683b      	ldr	r3, [r7, #0]
 8008d2e:	699b      	ldr	r3, [r3, #24]
 8008d30:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8008d34:	683b      	ldr	r3, [r7, #0]
 8008d36:	7b1b      	ldrb	r3, [r3, #12]
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d122      	bne.n	8008d82 <USB_EPStartXfer+0x80>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8008d3c:	683b      	ldr	r3, [r7, #0]
 8008d3e:	6959      	ldr	r1, [r3, #20]
 8008d40:	683b      	ldr	r3, [r7, #0]
 8008d42:	88da      	ldrh	r2, [r3, #6]
 8008d44:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008d48:	b29b      	uxth	r3, r3
 8008d4a:	6878      	ldr	r0, [r7, #4]
 8008d4c:	f000 febd 	bl	8009aca <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	613b      	str	r3, [r7, #16]
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008d5a:	b29b      	uxth	r3, r3
 8008d5c:	461a      	mov	r2, r3
 8008d5e:	693b      	ldr	r3, [r7, #16]
 8008d60:	4413      	add	r3, r2
 8008d62:	613b      	str	r3, [r7, #16]
 8008d64:	683b      	ldr	r3, [r7, #0]
 8008d66:	781b      	ldrb	r3, [r3, #0]
 8008d68:	00da      	lsls	r2, r3, #3
 8008d6a:	693b      	ldr	r3, [r7, #16]
 8008d6c:	4413      	add	r3, r2
 8008d6e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008d72:	60fb      	str	r3, [r7, #12]
 8008d74:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008d78:	b29a      	uxth	r2, r3
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	801a      	strh	r2, [r3, #0]
 8008d7e:	f000 bc6f 	b.w	8009660 <USB_EPStartXfer+0x95e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8008d82:	683b      	ldr	r3, [r7, #0]
 8008d84:	78db      	ldrb	r3, [r3, #3]
 8008d86:	2b02      	cmp	r3, #2
 8008d88:	f040 831e 	bne.w	80093c8 <USB_EPStartXfer+0x6c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8008d8c:	683b      	ldr	r3, [r7, #0]
 8008d8e:	6a1a      	ldr	r2, [r3, #32]
 8008d90:	683b      	ldr	r3, [r7, #0]
 8008d92:	691b      	ldr	r3, [r3, #16]
 8008d94:	429a      	cmp	r2, r3
 8008d96:	f240 82cf 	bls.w	8009338 <USB_EPStartXfer+0x636>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8008d9a:	687a      	ldr	r2, [r7, #4]
 8008d9c:	683b      	ldr	r3, [r7, #0]
 8008d9e:	781b      	ldrb	r3, [r3, #0]
 8008da0:	009b      	lsls	r3, r3, #2
 8008da2:	4413      	add	r3, r2
 8008da4:	881b      	ldrh	r3, [r3, #0]
 8008da6:	b29b      	uxth	r3, r3
 8008da8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008dac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008db0:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8008db4:	687a      	ldr	r2, [r7, #4]
 8008db6:	683b      	ldr	r3, [r7, #0]
 8008db8:	781b      	ldrb	r3, [r3, #0]
 8008dba:	009b      	lsls	r3, r3, #2
 8008dbc:	441a      	add	r2, r3
 8008dbe:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8008dc2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008dc6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008dca:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8008dce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008dd2:	b29b      	uxth	r3, r3
 8008dd4:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8008dd6:	683b      	ldr	r3, [r7, #0]
 8008dd8:	6a1a      	ldr	r2, [r3, #32]
 8008dda:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008dde:	1ad2      	subs	r2, r2, r3
 8008de0:	683b      	ldr	r3, [r7, #0]
 8008de2:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008de4:	687a      	ldr	r2, [r7, #4]
 8008de6:	683b      	ldr	r3, [r7, #0]
 8008de8:	781b      	ldrb	r3, [r3, #0]
 8008dea:	009b      	lsls	r3, r3, #2
 8008dec:	4413      	add	r3, r2
 8008dee:	881b      	ldrh	r3, [r3, #0]
 8008df0:	b29b      	uxth	r3, r3
 8008df2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	f000 814f 	beq.w	800909a <USB_EPStartXfer+0x398>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	633b      	str	r3, [r7, #48]	@ 0x30
 8008e00:	683b      	ldr	r3, [r7, #0]
 8008e02:	785b      	ldrb	r3, [r3, #1]
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d16b      	bne.n	8008ee0 <USB_EPStartXfer+0x1de>
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008e12:	b29b      	uxth	r3, r3
 8008e14:	461a      	mov	r2, r3
 8008e16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e18:	4413      	add	r3, r2
 8008e1a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008e1c:	683b      	ldr	r3, [r7, #0]
 8008e1e:	781b      	ldrb	r3, [r3, #0]
 8008e20:	00da      	lsls	r2, r3, #3
 8008e22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e24:	4413      	add	r3, r2
 8008e26:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008e2a:	627b      	str	r3, [r7, #36]	@ 0x24
 8008e2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e2e:	881b      	ldrh	r3, [r3, #0]
 8008e30:	b29b      	uxth	r3, r3
 8008e32:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008e36:	b29a      	uxth	r2, r3
 8008e38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e3a:	801a      	strh	r2, [r3, #0]
 8008e3c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d10a      	bne.n	8008e5a <USB_EPStartXfer+0x158>
 8008e44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e46:	881b      	ldrh	r3, [r3, #0]
 8008e48:	b29b      	uxth	r3, r3
 8008e4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008e4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008e52:	b29a      	uxth	r2, r3
 8008e54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e56:	801a      	strh	r2, [r3, #0]
 8008e58:	e05b      	b.n	8008f12 <USB_EPStartXfer+0x210>
 8008e5a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008e5e:	2b3e      	cmp	r3, #62	@ 0x3e
 8008e60:	d81c      	bhi.n	8008e9c <USB_EPStartXfer+0x19a>
 8008e62:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008e66:	085b      	lsrs	r3, r3, #1
 8008e68:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008e6c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008e70:	f003 0301 	and.w	r3, r3, #1
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d004      	beq.n	8008e82 <USB_EPStartXfer+0x180>
 8008e78:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008e7c:	3301      	adds	r3, #1
 8008e7e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008e82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e84:	881b      	ldrh	r3, [r3, #0]
 8008e86:	b29a      	uxth	r2, r3
 8008e88:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008e8c:	b29b      	uxth	r3, r3
 8008e8e:	029b      	lsls	r3, r3, #10
 8008e90:	b29b      	uxth	r3, r3
 8008e92:	4313      	orrs	r3, r2
 8008e94:	b29a      	uxth	r2, r3
 8008e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e98:	801a      	strh	r2, [r3, #0]
 8008e9a:	e03a      	b.n	8008f12 <USB_EPStartXfer+0x210>
 8008e9c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008ea0:	095b      	lsrs	r3, r3, #5
 8008ea2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008ea6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008eaa:	f003 031f 	and.w	r3, r3, #31
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d104      	bne.n	8008ebc <USB_EPStartXfer+0x1ba>
 8008eb2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008eb6:	3b01      	subs	r3, #1
 8008eb8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008ebc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ebe:	881b      	ldrh	r3, [r3, #0]
 8008ec0:	b29a      	uxth	r2, r3
 8008ec2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008ec6:	b29b      	uxth	r3, r3
 8008ec8:	029b      	lsls	r3, r3, #10
 8008eca:	b29b      	uxth	r3, r3
 8008ecc:	4313      	orrs	r3, r2
 8008ece:	b29b      	uxth	r3, r3
 8008ed0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008ed4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008ed8:	b29a      	uxth	r2, r3
 8008eda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008edc:	801a      	strh	r2, [r3, #0]
 8008ede:	e018      	b.n	8008f12 <USB_EPStartXfer+0x210>
 8008ee0:	683b      	ldr	r3, [r7, #0]
 8008ee2:	785b      	ldrb	r3, [r3, #1]
 8008ee4:	2b01      	cmp	r3, #1
 8008ee6:	d114      	bne.n	8008f12 <USB_EPStartXfer+0x210>
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008eee:	b29b      	uxth	r3, r3
 8008ef0:	461a      	mov	r2, r3
 8008ef2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ef4:	4413      	add	r3, r2
 8008ef6:	633b      	str	r3, [r7, #48]	@ 0x30
 8008ef8:	683b      	ldr	r3, [r7, #0]
 8008efa:	781b      	ldrb	r3, [r3, #0]
 8008efc:	00da      	lsls	r2, r3, #3
 8008efe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f00:	4413      	add	r3, r2
 8008f02:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008f06:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008f08:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008f0c:	b29a      	uxth	r2, r3
 8008f0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f10:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008f12:	683b      	ldr	r3, [r7, #0]
 8008f14:	895b      	ldrh	r3, [r3, #10]
 8008f16:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008f1a:	683b      	ldr	r3, [r7, #0]
 8008f1c:	6959      	ldr	r1, [r3, #20]
 8008f1e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008f22:	b29b      	uxth	r3, r3
 8008f24:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008f28:	6878      	ldr	r0, [r7, #4]
 8008f2a:	f000 fdce 	bl	8009aca <USB_WritePMA>
            ep->xfer_buff += len;
 8008f2e:	683b      	ldr	r3, [r7, #0]
 8008f30:	695a      	ldr	r2, [r3, #20]
 8008f32:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008f36:	441a      	add	r2, r3
 8008f38:	683b      	ldr	r3, [r7, #0]
 8008f3a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008f3c:	683b      	ldr	r3, [r7, #0]
 8008f3e:	6a1a      	ldr	r2, [r3, #32]
 8008f40:	683b      	ldr	r3, [r7, #0]
 8008f42:	691b      	ldr	r3, [r3, #16]
 8008f44:	429a      	cmp	r2, r3
 8008f46:	d907      	bls.n	8008f58 <USB_EPStartXfer+0x256>
            {
              ep->xfer_len_db -= len;
 8008f48:	683b      	ldr	r3, [r7, #0]
 8008f4a:	6a1a      	ldr	r2, [r3, #32]
 8008f4c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008f50:	1ad2      	subs	r2, r2, r3
 8008f52:	683b      	ldr	r3, [r7, #0]
 8008f54:	621a      	str	r2, [r3, #32]
 8008f56:	e006      	b.n	8008f66 <USB_EPStartXfer+0x264>
            }
            else
            {
              len = ep->xfer_len_db;
 8008f58:	683b      	ldr	r3, [r7, #0]
 8008f5a:	6a1b      	ldr	r3, [r3, #32]
 8008f5c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 8008f60:	683b      	ldr	r3, [r7, #0]
 8008f62:	2200      	movs	r2, #0
 8008f64:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008f66:	683b      	ldr	r3, [r7, #0]
 8008f68:	785b      	ldrb	r3, [r3, #1]
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d16b      	bne.n	8009046 <USB_EPStartXfer+0x344>
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	61bb      	str	r3, [r7, #24]
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008f78:	b29b      	uxth	r3, r3
 8008f7a:	461a      	mov	r2, r3
 8008f7c:	69bb      	ldr	r3, [r7, #24]
 8008f7e:	4413      	add	r3, r2
 8008f80:	61bb      	str	r3, [r7, #24]
 8008f82:	683b      	ldr	r3, [r7, #0]
 8008f84:	781b      	ldrb	r3, [r3, #0]
 8008f86:	00da      	lsls	r2, r3, #3
 8008f88:	69bb      	ldr	r3, [r7, #24]
 8008f8a:	4413      	add	r3, r2
 8008f8c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008f90:	617b      	str	r3, [r7, #20]
 8008f92:	697b      	ldr	r3, [r7, #20]
 8008f94:	881b      	ldrh	r3, [r3, #0]
 8008f96:	b29b      	uxth	r3, r3
 8008f98:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008f9c:	b29a      	uxth	r2, r3
 8008f9e:	697b      	ldr	r3, [r7, #20]
 8008fa0:	801a      	strh	r2, [r3, #0]
 8008fa2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d10a      	bne.n	8008fc0 <USB_EPStartXfer+0x2be>
 8008faa:	697b      	ldr	r3, [r7, #20]
 8008fac:	881b      	ldrh	r3, [r3, #0]
 8008fae:	b29b      	uxth	r3, r3
 8008fb0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008fb4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008fb8:	b29a      	uxth	r2, r3
 8008fba:	697b      	ldr	r3, [r7, #20]
 8008fbc:	801a      	strh	r2, [r3, #0]
 8008fbe:	e05d      	b.n	800907c <USB_EPStartXfer+0x37a>
 8008fc0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008fc4:	2b3e      	cmp	r3, #62	@ 0x3e
 8008fc6:	d81c      	bhi.n	8009002 <USB_EPStartXfer+0x300>
 8008fc8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008fcc:	085b      	lsrs	r3, r3, #1
 8008fce:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008fd2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008fd6:	f003 0301 	and.w	r3, r3, #1
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d004      	beq.n	8008fe8 <USB_EPStartXfer+0x2e6>
 8008fde:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8008fe2:	3301      	adds	r3, #1
 8008fe4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008fe8:	697b      	ldr	r3, [r7, #20]
 8008fea:	881b      	ldrh	r3, [r3, #0]
 8008fec:	b29a      	uxth	r2, r3
 8008fee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8008ff2:	b29b      	uxth	r3, r3
 8008ff4:	029b      	lsls	r3, r3, #10
 8008ff6:	b29b      	uxth	r3, r3
 8008ff8:	4313      	orrs	r3, r2
 8008ffa:	b29a      	uxth	r2, r3
 8008ffc:	697b      	ldr	r3, [r7, #20]
 8008ffe:	801a      	strh	r2, [r3, #0]
 8009000:	e03c      	b.n	800907c <USB_EPStartXfer+0x37a>
 8009002:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009006:	095b      	lsrs	r3, r3, #5
 8009008:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800900c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009010:	f003 031f 	and.w	r3, r3, #31
 8009014:	2b00      	cmp	r3, #0
 8009016:	d104      	bne.n	8009022 <USB_EPStartXfer+0x320>
 8009018:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800901c:	3b01      	subs	r3, #1
 800901e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8009022:	697b      	ldr	r3, [r7, #20]
 8009024:	881b      	ldrh	r3, [r3, #0]
 8009026:	b29a      	uxth	r2, r3
 8009028:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800902c:	b29b      	uxth	r3, r3
 800902e:	029b      	lsls	r3, r3, #10
 8009030:	b29b      	uxth	r3, r3
 8009032:	4313      	orrs	r3, r2
 8009034:	b29b      	uxth	r3, r3
 8009036:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800903a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800903e:	b29a      	uxth	r2, r3
 8009040:	697b      	ldr	r3, [r7, #20]
 8009042:	801a      	strh	r2, [r3, #0]
 8009044:	e01a      	b.n	800907c <USB_EPStartXfer+0x37a>
 8009046:	683b      	ldr	r3, [r7, #0]
 8009048:	785b      	ldrb	r3, [r3, #1]
 800904a:	2b01      	cmp	r3, #1
 800904c:	d116      	bne.n	800907c <USB_EPStartXfer+0x37a>
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	623b      	str	r3, [r7, #32]
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009058:	b29b      	uxth	r3, r3
 800905a:	461a      	mov	r2, r3
 800905c:	6a3b      	ldr	r3, [r7, #32]
 800905e:	4413      	add	r3, r2
 8009060:	623b      	str	r3, [r7, #32]
 8009062:	683b      	ldr	r3, [r7, #0]
 8009064:	781b      	ldrb	r3, [r3, #0]
 8009066:	00da      	lsls	r2, r3, #3
 8009068:	6a3b      	ldr	r3, [r7, #32]
 800906a:	4413      	add	r3, r2
 800906c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009070:	61fb      	str	r3, [r7, #28]
 8009072:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009076:	b29a      	uxth	r2, r3
 8009078:	69fb      	ldr	r3, [r7, #28]
 800907a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800907c:	683b      	ldr	r3, [r7, #0]
 800907e:	891b      	ldrh	r3, [r3, #8]
 8009080:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009084:	683b      	ldr	r3, [r7, #0]
 8009086:	6959      	ldr	r1, [r3, #20]
 8009088:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800908c:	b29b      	uxth	r3, r3
 800908e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009092:	6878      	ldr	r0, [r7, #4]
 8009094:	f000 fd19 	bl	8009aca <USB_WritePMA>
 8009098:	e2e2      	b.n	8009660 <USB_EPStartXfer+0x95e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800909a:	683b      	ldr	r3, [r7, #0]
 800909c:	785b      	ldrb	r3, [r3, #1]
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d16b      	bne.n	800917a <USB_EPStartXfer+0x478>
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80090ac:	b29b      	uxth	r3, r3
 80090ae:	461a      	mov	r2, r3
 80090b0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80090b2:	4413      	add	r3, r2
 80090b4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80090b6:	683b      	ldr	r3, [r7, #0]
 80090b8:	781b      	ldrb	r3, [r3, #0]
 80090ba:	00da      	lsls	r2, r3, #3
 80090bc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80090be:	4413      	add	r3, r2
 80090c0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80090c4:	647b      	str	r3, [r7, #68]	@ 0x44
 80090c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80090c8:	881b      	ldrh	r3, [r3, #0]
 80090ca:	b29b      	uxth	r3, r3
 80090cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80090d0:	b29a      	uxth	r2, r3
 80090d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80090d4:	801a      	strh	r2, [r3, #0]
 80090d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d10a      	bne.n	80090f4 <USB_EPStartXfer+0x3f2>
 80090de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80090e0:	881b      	ldrh	r3, [r3, #0]
 80090e2:	b29b      	uxth	r3, r3
 80090e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80090e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80090ec:	b29a      	uxth	r2, r3
 80090ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80090f0:	801a      	strh	r2, [r3, #0]
 80090f2:	e05d      	b.n	80091b0 <USB_EPStartXfer+0x4ae>
 80090f4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80090f8:	2b3e      	cmp	r3, #62	@ 0x3e
 80090fa:	d81c      	bhi.n	8009136 <USB_EPStartXfer+0x434>
 80090fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009100:	085b      	lsrs	r3, r3, #1
 8009102:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009106:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800910a:	f003 0301 	and.w	r3, r3, #1
 800910e:	2b00      	cmp	r3, #0
 8009110:	d004      	beq.n	800911c <USB_EPStartXfer+0x41a>
 8009112:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009116:	3301      	adds	r3, #1
 8009118:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800911c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800911e:	881b      	ldrh	r3, [r3, #0]
 8009120:	b29a      	uxth	r2, r3
 8009122:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009126:	b29b      	uxth	r3, r3
 8009128:	029b      	lsls	r3, r3, #10
 800912a:	b29b      	uxth	r3, r3
 800912c:	4313      	orrs	r3, r2
 800912e:	b29a      	uxth	r2, r3
 8009130:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009132:	801a      	strh	r2, [r3, #0]
 8009134:	e03c      	b.n	80091b0 <USB_EPStartXfer+0x4ae>
 8009136:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800913a:	095b      	lsrs	r3, r3, #5
 800913c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009140:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009144:	f003 031f 	and.w	r3, r3, #31
 8009148:	2b00      	cmp	r3, #0
 800914a:	d104      	bne.n	8009156 <USB_EPStartXfer+0x454>
 800914c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009150:	3b01      	subs	r3, #1
 8009152:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009156:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009158:	881b      	ldrh	r3, [r3, #0]
 800915a:	b29a      	uxth	r2, r3
 800915c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009160:	b29b      	uxth	r3, r3
 8009162:	029b      	lsls	r3, r3, #10
 8009164:	b29b      	uxth	r3, r3
 8009166:	4313      	orrs	r3, r2
 8009168:	b29b      	uxth	r3, r3
 800916a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800916e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009172:	b29a      	uxth	r2, r3
 8009174:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009176:	801a      	strh	r2, [r3, #0]
 8009178:	e01a      	b.n	80091b0 <USB_EPStartXfer+0x4ae>
 800917a:	683b      	ldr	r3, [r7, #0]
 800917c:	785b      	ldrb	r3, [r3, #1]
 800917e:	2b01      	cmp	r3, #1
 8009180:	d116      	bne.n	80091b0 <USB_EPStartXfer+0x4ae>
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	653b      	str	r3, [r7, #80]	@ 0x50
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800918c:	b29b      	uxth	r3, r3
 800918e:	461a      	mov	r2, r3
 8009190:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009192:	4413      	add	r3, r2
 8009194:	653b      	str	r3, [r7, #80]	@ 0x50
 8009196:	683b      	ldr	r3, [r7, #0]
 8009198:	781b      	ldrb	r3, [r3, #0]
 800919a:	00da      	lsls	r2, r3, #3
 800919c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800919e:	4413      	add	r3, r2
 80091a0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80091a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80091a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80091aa:	b29a      	uxth	r2, r3
 80091ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80091ae:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80091b0:	683b      	ldr	r3, [r7, #0]
 80091b2:	891b      	ldrh	r3, [r3, #8]
 80091b4:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80091b8:	683b      	ldr	r3, [r7, #0]
 80091ba:	6959      	ldr	r1, [r3, #20]
 80091bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80091c0:	b29b      	uxth	r3, r3
 80091c2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80091c6:	6878      	ldr	r0, [r7, #4]
 80091c8:	f000 fc7f 	bl	8009aca <USB_WritePMA>
            ep->xfer_buff += len;
 80091cc:	683b      	ldr	r3, [r7, #0]
 80091ce:	695a      	ldr	r2, [r3, #20]
 80091d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80091d4:	441a      	add	r2, r3
 80091d6:	683b      	ldr	r3, [r7, #0]
 80091d8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80091da:	683b      	ldr	r3, [r7, #0]
 80091dc:	6a1a      	ldr	r2, [r3, #32]
 80091de:	683b      	ldr	r3, [r7, #0]
 80091e0:	691b      	ldr	r3, [r3, #16]
 80091e2:	429a      	cmp	r2, r3
 80091e4:	d907      	bls.n	80091f6 <USB_EPStartXfer+0x4f4>
            {
              ep->xfer_len_db -= len;
 80091e6:	683b      	ldr	r3, [r7, #0]
 80091e8:	6a1a      	ldr	r2, [r3, #32]
 80091ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80091ee:	1ad2      	subs	r2, r2, r3
 80091f0:	683b      	ldr	r3, [r7, #0]
 80091f2:	621a      	str	r2, [r3, #32]
 80091f4:	e006      	b.n	8009204 <USB_EPStartXfer+0x502>
            }
            else
            {
              len = ep->xfer_len_db;
 80091f6:	683b      	ldr	r3, [r7, #0]
 80091f8:	6a1b      	ldr	r3, [r3, #32]
 80091fa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 80091fe:	683b      	ldr	r3, [r7, #0]
 8009200:	2200      	movs	r2, #0
 8009202:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	643b      	str	r3, [r7, #64]	@ 0x40
 8009208:	683b      	ldr	r3, [r7, #0]
 800920a:	785b      	ldrb	r3, [r3, #1]
 800920c:	2b00      	cmp	r3, #0
 800920e:	d16b      	bne.n	80092e8 <USB_EPStartXfer+0x5e6>
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800921a:	b29b      	uxth	r3, r3
 800921c:	461a      	mov	r2, r3
 800921e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009220:	4413      	add	r3, r2
 8009222:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009224:	683b      	ldr	r3, [r7, #0]
 8009226:	781b      	ldrb	r3, [r3, #0]
 8009228:	00da      	lsls	r2, r3, #3
 800922a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800922c:	4413      	add	r3, r2
 800922e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009232:	637b      	str	r3, [r7, #52]	@ 0x34
 8009234:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009236:	881b      	ldrh	r3, [r3, #0]
 8009238:	b29b      	uxth	r3, r3
 800923a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800923e:	b29a      	uxth	r2, r3
 8009240:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009242:	801a      	strh	r2, [r3, #0]
 8009244:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009248:	2b00      	cmp	r3, #0
 800924a:	d10a      	bne.n	8009262 <USB_EPStartXfer+0x560>
 800924c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800924e:	881b      	ldrh	r3, [r3, #0]
 8009250:	b29b      	uxth	r3, r3
 8009252:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009256:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800925a:	b29a      	uxth	r2, r3
 800925c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800925e:	801a      	strh	r2, [r3, #0]
 8009260:	e05b      	b.n	800931a <USB_EPStartXfer+0x618>
 8009262:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009266:	2b3e      	cmp	r3, #62	@ 0x3e
 8009268:	d81c      	bhi.n	80092a4 <USB_EPStartXfer+0x5a2>
 800926a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800926e:	085b      	lsrs	r3, r3, #1
 8009270:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009274:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009278:	f003 0301 	and.w	r3, r3, #1
 800927c:	2b00      	cmp	r3, #0
 800927e:	d004      	beq.n	800928a <USB_EPStartXfer+0x588>
 8009280:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009284:	3301      	adds	r3, #1
 8009286:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800928a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800928c:	881b      	ldrh	r3, [r3, #0]
 800928e:	b29a      	uxth	r2, r3
 8009290:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009294:	b29b      	uxth	r3, r3
 8009296:	029b      	lsls	r3, r3, #10
 8009298:	b29b      	uxth	r3, r3
 800929a:	4313      	orrs	r3, r2
 800929c:	b29a      	uxth	r2, r3
 800929e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80092a0:	801a      	strh	r2, [r3, #0]
 80092a2:	e03a      	b.n	800931a <USB_EPStartXfer+0x618>
 80092a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80092a8:	095b      	lsrs	r3, r3, #5
 80092aa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80092ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80092b2:	f003 031f 	and.w	r3, r3, #31
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d104      	bne.n	80092c4 <USB_EPStartXfer+0x5c2>
 80092ba:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80092be:	3b01      	subs	r3, #1
 80092c0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80092c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80092c6:	881b      	ldrh	r3, [r3, #0]
 80092c8:	b29a      	uxth	r2, r3
 80092ca:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80092ce:	b29b      	uxth	r3, r3
 80092d0:	029b      	lsls	r3, r3, #10
 80092d2:	b29b      	uxth	r3, r3
 80092d4:	4313      	orrs	r3, r2
 80092d6:	b29b      	uxth	r3, r3
 80092d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80092dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80092e0:	b29a      	uxth	r2, r3
 80092e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80092e4:	801a      	strh	r2, [r3, #0]
 80092e6:	e018      	b.n	800931a <USB_EPStartXfer+0x618>
 80092e8:	683b      	ldr	r3, [r7, #0]
 80092ea:	785b      	ldrb	r3, [r3, #1]
 80092ec:	2b01      	cmp	r3, #1
 80092ee:	d114      	bne.n	800931a <USB_EPStartXfer+0x618>
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80092f6:	b29b      	uxth	r3, r3
 80092f8:	461a      	mov	r2, r3
 80092fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80092fc:	4413      	add	r3, r2
 80092fe:	643b      	str	r3, [r7, #64]	@ 0x40
 8009300:	683b      	ldr	r3, [r7, #0]
 8009302:	781b      	ldrb	r3, [r3, #0]
 8009304:	00da      	lsls	r2, r3, #3
 8009306:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009308:	4413      	add	r3, r2
 800930a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800930e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009310:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009314:	b29a      	uxth	r2, r3
 8009316:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009318:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800931a:	683b      	ldr	r3, [r7, #0]
 800931c:	895b      	ldrh	r3, [r3, #10]
 800931e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009322:	683b      	ldr	r3, [r7, #0]
 8009324:	6959      	ldr	r1, [r3, #20]
 8009326:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800932a:	b29b      	uxth	r3, r3
 800932c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009330:	6878      	ldr	r0, [r7, #4]
 8009332:	f000 fbca 	bl	8009aca <USB_WritePMA>
 8009336:	e193      	b.n	8009660 <USB_EPStartXfer+0x95e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8009338:	683b      	ldr	r3, [r7, #0]
 800933a:	6a1b      	ldr	r3, [r3, #32]
 800933c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8009340:	687a      	ldr	r2, [r7, #4]
 8009342:	683b      	ldr	r3, [r7, #0]
 8009344:	781b      	ldrb	r3, [r3, #0]
 8009346:	009b      	lsls	r3, r3, #2
 8009348:	4413      	add	r3, r2
 800934a:	881b      	ldrh	r3, [r3, #0]
 800934c:	b29b      	uxth	r3, r3
 800934e:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8009352:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009356:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800935a:	687a      	ldr	r2, [r7, #4]
 800935c:	683b      	ldr	r3, [r7, #0]
 800935e:	781b      	ldrb	r3, [r3, #0]
 8009360:	009b      	lsls	r3, r3, #2
 8009362:	441a      	add	r2, r3
 8009364:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8009368:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800936c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009370:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009374:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009378:	b29b      	uxth	r3, r3
 800937a:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009386:	b29b      	uxth	r3, r3
 8009388:	461a      	mov	r2, r3
 800938a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800938c:	4413      	add	r3, r2
 800938e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009390:	683b      	ldr	r3, [r7, #0]
 8009392:	781b      	ldrb	r3, [r3, #0]
 8009394:	00da      	lsls	r2, r3, #3
 8009396:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009398:	4413      	add	r3, r2
 800939a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800939e:	65bb      	str	r3, [r7, #88]	@ 0x58
 80093a0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80093a4:	b29a      	uxth	r2, r3
 80093a6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80093a8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80093aa:	683b      	ldr	r3, [r7, #0]
 80093ac:	891b      	ldrh	r3, [r3, #8]
 80093ae:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80093b2:	683b      	ldr	r3, [r7, #0]
 80093b4:	6959      	ldr	r1, [r3, #20]
 80093b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80093ba:	b29b      	uxth	r3, r3
 80093bc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80093c0:	6878      	ldr	r0, [r7, #4]
 80093c2:	f000 fb82 	bl	8009aca <USB_WritePMA>
 80093c6:	e14b      	b.n	8009660 <USB_EPStartXfer+0x95e>
        }
      }
      else /* Manage isochronous double buffer IN mode */
      {
        /* Each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80093c8:	683b      	ldr	r3, [r7, #0]
 80093ca:	6a1a      	ldr	r2, [r3, #32]
 80093cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80093d0:	1ad2      	subs	r2, r2, r3
 80093d2:	683b      	ldr	r3, [r7, #0]
 80093d4:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80093d6:	687a      	ldr	r2, [r7, #4]
 80093d8:	683b      	ldr	r3, [r7, #0]
 80093da:	781b      	ldrb	r3, [r3, #0]
 80093dc:	009b      	lsls	r3, r3, #2
 80093de:	4413      	add	r3, r2
 80093e0:	881b      	ldrh	r3, [r3, #0]
 80093e2:	b29b      	uxth	r3, r3
 80093e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	f000 809a 	beq.w	8009522 <USB_EPStartXfer+0x820>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	673b      	str	r3, [r7, #112]	@ 0x70
 80093f2:	683b      	ldr	r3, [r7, #0]
 80093f4:	785b      	ldrb	r3, [r3, #1]
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d16b      	bne.n	80094d2 <USB_EPStartXfer+0x7d0>
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009404:	b29b      	uxth	r3, r3
 8009406:	461a      	mov	r2, r3
 8009408:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800940a:	4413      	add	r3, r2
 800940c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800940e:	683b      	ldr	r3, [r7, #0]
 8009410:	781b      	ldrb	r3, [r3, #0]
 8009412:	00da      	lsls	r2, r3, #3
 8009414:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009416:	4413      	add	r3, r2
 8009418:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800941c:	667b      	str	r3, [r7, #100]	@ 0x64
 800941e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009420:	881b      	ldrh	r3, [r3, #0]
 8009422:	b29b      	uxth	r3, r3
 8009424:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009428:	b29a      	uxth	r2, r3
 800942a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800942c:	801a      	strh	r2, [r3, #0]
 800942e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009432:	2b00      	cmp	r3, #0
 8009434:	d10a      	bne.n	800944c <USB_EPStartXfer+0x74a>
 8009436:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009438:	881b      	ldrh	r3, [r3, #0]
 800943a:	b29b      	uxth	r3, r3
 800943c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009440:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009444:	b29a      	uxth	r2, r3
 8009446:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009448:	801a      	strh	r2, [r3, #0]
 800944a:	e05b      	b.n	8009504 <USB_EPStartXfer+0x802>
 800944c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009450:	2b3e      	cmp	r3, #62	@ 0x3e
 8009452:	d81c      	bhi.n	800948e <USB_EPStartXfer+0x78c>
 8009454:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009458:	085b      	lsrs	r3, r3, #1
 800945a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800945e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009462:	f003 0301 	and.w	r3, r3, #1
 8009466:	2b00      	cmp	r3, #0
 8009468:	d004      	beq.n	8009474 <USB_EPStartXfer+0x772>
 800946a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800946e:	3301      	adds	r3, #1
 8009470:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009474:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009476:	881b      	ldrh	r3, [r3, #0]
 8009478:	b29a      	uxth	r2, r3
 800947a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800947e:	b29b      	uxth	r3, r3
 8009480:	029b      	lsls	r3, r3, #10
 8009482:	b29b      	uxth	r3, r3
 8009484:	4313      	orrs	r3, r2
 8009486:	b29a      	uxth	r2, r3
 8009488:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800948a:	801a      	strh	r2, [r3, #0]
 800948c:	e03a      	b.n	8009504 <USB_EPStartXfer+0x802>
 800948e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009492:	095b      	lsrs	r3, r3, #5
 8009494:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009498:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800949c:	f003 031f 	and.w	r3, r3, #31
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d104      	bne.n	80094ae <USB_EPStartXfer+0x7ac>
 80094a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80094a8:	3b01      	subs	r3, #1
 80094aa:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80094ae:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80094b0:	881b      	ldrh	r3, [r3, #0]
 80094b2:	b29a      	uxth	r2, r3
 80094b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80094b8:	b29b      	uxth	r3, r3
 80094ba:	029b      	lsls	r3, r3, #10
 80094bc:	b29b      	uxth	r3, r3
 80094be:	4313      	orrs	r3, r2
 80094c0:	b29b      	uxth	r3, r3
 80094c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80094c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80094ca:	b29a      	uxth	r2, r3
 80094cc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80094ce:	801a      	strh	r2, [r3, #0]
 80094d0:	e018      	b.n	8009504 <USB_EPStartXfer+0x802>
 80094d2:	683b      	ldr	r3, [r7, #0]
 80094d4:	785b      	ldrb	r3, [r3, #1]
 80094d6:	2b01      	cmp	r3, #1
 80094d8:	d114      	bne.n	8009504 <USB_EPStartXfer+0x802>
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80094e0:	b29b      	uxth	r3, r3
 80094e2:	461a      	mov	r2, r3
 80094e4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80094e6:	4413      	add	r3, r2
 80094e8:	673b      	str	r3, [r7, #112]	@ 0x70
 80094ea:	683b      	ldr	r3, [r7, #0]
 80094ec:	781b      	ldrb	r3, [r3, #0]
 80094ee:	00da      	lsls	r2, r3, #3
 80094f0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80094f2:	4413      	add	r3, r2
 80094f4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80094f8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80094fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80094fe:	b29a      	uxth	r2, r3
 8009500:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009502:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8009504:	683b      	ldr	r3, [r7, #0]
 8009506:	895b      	ldrh	r3, [r3, #10]
 8009508:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800950c:	683b      	ldr	r3, [r7, #0]
 800950e:	6959      	ldr	r1, [r3, #20]
 8009510:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009514:	b29b      	uxth	r3, r3
 8009516:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800951a:	6878      	ldr	r0, [r7, #4]
 800951c:	f000 fad5 	bl	8009aca <USB_WritePMA>
 8009520:	e09e      	b.n	8009660 <USB_EPStartXfer+0x95e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009522:	683b      	ldr	r3, [r7, #0]
 8009524:	785b      	ldrb	r3, [r3, #1]
 8009526:	2b00      	cmp	r3, #0
 8009528:	d16b      	bne.n	8009602 <USB_EPStartXfer+0x900>
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009534:	b29b      	uxth	r3, r3
 8009536:	461a      	mov	r2, r3
 8009538:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800953a:	4413      	add	r3, r2
 800953c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800953e:	683b      	ldr	r3, [r7, #0]
 8009540:	781b      	ldrb	r3, [r3, #0]
 8009542:	00da      	lsls	r2, r3, #3
 8009544:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009546:	4413      	add	r3, r2
 8009548:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800954c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800954e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009550:	881b      	ldrh	r3, [r3, #0]
 8009552:	b29b      	uxth	r3, r3
 8009554:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009558:	b29a      	uxth	r2, r3
 800955a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800955c:	801a      	strh	r2, [r3, #0]
 800955e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009562:	2b00      	cmp	r3, #0
 8009564:	d10a      	bne.n	800957c <USB_EPStartXfer+0x87a>
 8009566:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009568:	881b      	ldrh	r3, [r3, #0]
 800956a:	b29b      	uxth	r3, r3
 800956c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009570:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009574:	b29a      	uxth	r2, r3
 8009576:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009578:	801a      	strh	r2, [r3, #0]
 800957a:	e063      	b.n	8009644 <USB_EPStartXfer+0x942>
 800957c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009580:	2b3e      	cmp	r3, #62	@ 0x3e
 8009582:	d81c      	bhi.n	80095be <USB_EPStartXfer+0x8bc>
 8009584:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009588:	085b      	lsrs	r3, r3, #1
 800958a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800958e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009592:	f003 0301 	and.w	r3, r3, #1
 8009596:	2b00      	cmp	r3, #0
 8009598:	d004      	beq.n	80095a4 <USB_EPStartXfer+0x8a2>
 800959a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800959e:	3301      	adds	r3, #1
 80095a0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80095a4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80095a6:	881b      	ldrh	r3, [r3, #0]
 80095a8:	b29a      	uxth	r2, r3
 80095aa:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80095ae:	b29b      	uxth	r3, r3
 80095b0:	029b      	lsls	r3, r3, #10
 80095b2:	b29b      	uxth	r3, r3
 80095b4:	4313      	orrs	r3, r2
 80095b6:	b29a      	uxth	r2, r3
 80095b8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80095ba:	801a      	strh	r2, [r3, #0]
 80095bc:	e042      	b.n	8009644 <USB_EPStartXfer+0x942>
 80095be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80095c2:	095b      	lsrs	r3, r3, #5
 80095c4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80095c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80095cc:	f003 031f 	and.w	r3, r3, #31
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d104      	bne.n	80095de <USB_EPStartXfer+0x8dc>
 80095d4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80095d8:	3b01      	subs	r3, #1
 80095da:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80095de:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80095e0:	881b      	ldrh	r3, [r3, #0]
 80095e2:	b29a      	uxth	r2, r3
 80095e4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80095e8:	b29b      	uxth	r3, r3
 80095ea:	029b      	lsls	r3, r3, #10
 80095ec:	b29b      	uxth	r3, r3
 80095ee:	4313      	orrs	r3, r2
 80095f0:	b29b      	uxth	r3, r3
 80095f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80095f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80095fa:	b29a      	uxth	r2, r3
 80095fc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80095fe:	801a      	strh	r2, [r3, #0]
 8009600:	e020      	b.n	8009644 <USB_EPStartXfer+0x942>
 8009602:	683b      	ldr	r3, [r7, #0]
 8009604:	785b      	ldrb	r3, [r3, #1]
 8009606:	2b01      	cmp	r3, #1
 8009608:	d11c      	bne.n	8009644 <USB_EPStartXfer+0x942>
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009616:	b29b      	uxth	r3, r3
 8009618:	461a      	mov	r2, r3
 800961a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800961e:	4413      	add	r3, r2
 8009620:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009624:	683b      	ldr	r3, [r7, #0]
 8009626:	781b      	ldrb	r3, [r3, #0]
 8009628:	00da      	lsls	r2, r3, #3
 800962a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800962e:	4413      	add	r3, r2
 8009630:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009634:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009638:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800963c:	b29a      	uxth	r2, r3
 800963e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009642:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8009644:	683b      	ldr	r3, [r7, #0]
 8009646:	891b      	ldrh	r3, [r3, #8]
 8009648:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800964c:	683b      	ldr	r3, [r7, #0]
 800964e:	6959      	ldr	r1, [r3, #20]
 8009650:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009654:	b29b      	uxth	r3, r3
 8009656:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800965a:	6878      	ldr	r0, [r7, #4]
 800965c:	f000 fa35 	bl	8009aca <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8009660:	687a      	ldr	r2, [r7, #4]
 8009662:	683b      	ldr	r3, [r7, #0]
 8009664:	781b      	ldrb	r3, [r3, #0]
 8009666:	009b      	lsls	r3, r3, #2
 8009668:	4413      	add	r3, r2
 800966a:	881b      	ldrh	r3, [r3, #0]
 800966c:	b29b      	uxth	r3, r3
 800966e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009672:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009676:	817b      	strh	r3, [r7, #10]
 8009678:	897b      	ldrh	r3, [r7, #10]
 800967a:	f083 0310 	eor.w	r3, r3, #16
 800967e:	817b      	strh	r3, [r7, #10]
 8009680:	897b      	ldrh	r3, [r7, #10]
 8009682:	f083 0320 	eor.w	r3, r3, #32
 8009686:	817b      	strh	r3, [r7, #10]
 8009688:	687a      	ldr	r2, [r7, #4]
 800968a:	683b      	ldr	r3, [r7, #0]
 800968c:	781b      	ldrb	r3, [r3, #0]
 800968e:	009b      	lsls	r3, r3, #2
 8009690:	441a      	add	r2, r3
 8009692:	897b      	ldrh	r3, [r7, #10]
 8009694:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009698:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800969c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80096a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80096a4:	b29b      	uxth	r3, r3
 80096a6:	8013      	strh	r3, [r2, #0]
 80096a8:	e0d5      	b.n	8009856 <USB_EPStartXfer+0xb54>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80096aa:	683b      	ldr	r3, [r7, #0]
 80096ac:	7b1b      	ldrb	r3, [r3, #12]
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d156      	bne.n	8009760 <USB_EPStartXfer+0xa5e>
    {
      if ((ep->xfer_len == 0U) && (ep->type == EP_TYPE_CTRL))
 80096b2:	683b      	ldr	r3, [r7, #0]
 80096b4:	699b      	ldr	r3, [r3, #24]
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d122      	bne.n	8009700 <USB_EPStartXfer+0x9fe>
 80096ba:	683b      	ldr	r3, [r7, #0]
 80096bc:	78db      	ldrb	r3, [r3, #3]
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d11e      	bne.n	8009700 <USB_EPStartXfer+0x9fe>
      {
        /* This is a status out stage set the OUT_STATUS */
        PCD_SET_OUT_STATUS(USBx, ep->num);
 80096c2:	687a      	ldr	r2, [r7, #4]
 80096c4:	683b      	ldr	r3, [r7, #0]
 80096c6:	781b      	ldrb	r3, [r3, #0]
 80096c8:	009b      	lsls	r3, r3, #2
 80096ca:	4413      	add	r3, r2
 80096cc:	881b      	ldrh	r3, [r3, #0]
 80096ce:	b29b      	uxth	r3, r3
 80096d0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80096d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80096d8:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 80096dc:	687a      	ldr	r2, [r7, #4]
 80096de:	683b      	ldr	r3, [r7, #0]
 80096e0:	781b      	ldrb	r3, [r3, #0]
 80096e2:	009b      	lsls	r3, r3, #2
 80096e4:	441a      	add	r2, r3
 80096e6:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 80096ea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80096ee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80096f2:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80096f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80096fa:	b29b      	uxth	r3, r3
 80096fc:	8013      	strh	r3, [r2, #0]
 80096fe:	e01d      	b.n	800973c <USB_EPStartXfer+0xa3a>
      }
      else
      {
        PCD_CLEAR_OUT_STATUS(USBx, ep->num);
 8009700:	687a      	ldr	r2, [r7, #4]
 8009702:	683b      	ldr	r3, [r7, #0]
 8009704:	781b      	ldrb	r3, [r3, #0]
 8009706:	009b      	lsls	r3, r3, #2
 8009708:	4413      	add	r3, r2
 800970a:	881b      	ldrh	r3, [r3, #0]
 800970c:	b29b      	uxth	r3, r3
 800970e:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8009712:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009716:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
 800971a:	687a      	ldr	r2, [r7, #4]
 800971c:	683b      	ldr	r3, [r7, #0]
 800971e:	781b      	ldrb	r3, [r3, #0]
 8009720:	009b      	lsls	r3, r3, #2
 8009722:	441a      	add	r2, r3
 8009724:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 8009728:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800972c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009730:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009734:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009738:	b29b      	uxth	r3, r3
 800973a:	8013      	strh	r3, [r2, #0]
      }

      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800973c:	683b      	ldr	r3, [r7, #0]
 800973e:	699a      	ldr	r2, [r3, #24]
 8009740:	683b      	ldr	r3, [r7, #0]
 8009742:	691b      	ldr	r3, [r3, #16]
 8009744:	429a      	cmp	r2, r3
 8009746:	d907      	bls.n	8009758 <USB_EPStartXfer+0xa56>
      {
        ep->xfer_len -= ep->maxpacket;
 8009748:	683b      	ldr	r3, [r7, #0]
 800974a:	699a      	ldr	r2, [r3, #24]
 800974c:	683b      	ldr	r3, [r7, #0]
 800974e:	691b      	ldr	r3, [r3, #16]
 8009750:	1ad2      	subs	r2, r2, r3
 8009752:	683b      	ldr	r3, [r7, #0]
 8009754:	619a      	str	r2, [r3, #24]
 8009756:	e054      	b.n	8009802 <USB_EPStartXfer+0xb00>
      }
      else
      {
        ep->xfer_len = 0U;
 8009758:	683b      	ldr	r3, [r7, #0]
 800975a:	2200      	movs	r2, #0
 800975c:	619a      	str	r2, [r3, #24]
 800975e:	e050      	b.n	8009802 <USB_EPStartXfer+0xb00>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8009760:	683b      	ldr	r3, [r7, #0]
 8009762:	78db      	ldrb	r3, [r3, #3]
 8009764:	2b02      	cmp	r3, #2
 8009766:	d142      	bne.n	80097ee <USB_EPStartXfer+0xaec>
      {
        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8009768:	683b      	ldr	r3, [r7, #0]
 800976a:	69db      	ldr	r3, [r3, #28]
 800976c:	2b00      	cmp	r3, #0
 800976e:	d048      	beq.n	8009802 <USB_EPStartXfer+0xb00>
        {
          /* Update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8009770:	687a      	ldr	r2, [r7, #4]
 8009772:	683b      	ldr	r3, [r7, #0]
 8009774:	781b      	ldrb	r3, [r3, #0]
 8009776:	009b      	lsls	r3, r3, #2
 8009778:	4413      	add	r3, r2
 800977a:	881b      	ldrh	r3, [r3, #0]
 800977c:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92

          /* Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009780:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8009784:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009788:	2b00      	cmp	r3, #0
 800978a:	d005      	beq.n	8009798 <USB_EPStartXfer+0xa96>
 800978c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8009790:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009794:	2b00      	cmp	r3, #0
 8009796:	d10b      	bne.n	80097b0 <USB_EPStartXfer+0xaae>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009798:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800979c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d12e      	bne.n	8009802 <USB_EPStartXfer+0xb00>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80097a4:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 80097a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d128      	bne.n	8009802 <USB_EPStartXfer+0xb00>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80097b0:	687a      	ldr	r2, [r7, #4]
 80097b2:	683b      	ldr	r3, [r7, #0]
 80097b4:	781b      	ldrb	r3, [r3, #0]
 80097b6:	009b      	lsls	r3, r3, #2
 80097b8:	4413      	add	r3, r2
 80097ba:	881b      	ldrh	r3, [r3, #0]
 80097bc:	b29b      	uxth	r3, r3
 80097be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80097c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80097c6:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
 80097ca:	687a      	ldr	r2, [r7, #4]
 80097cc:	683b      	ldr	r3, [r7, #0]
 80097ce:	781b      	ldrb	r3, [r3, #0]
 80097d0:	009b      	lsls	r3, r3, #2
 80097d2:	441a      	add	r2, r3
 80097d4:	f8b7 3090 	ldrh.w	r3, [r7, #144]	@ 0x90
 80097d8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80097dc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80097e0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80097e4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80097e8:	b29b      	uxth	r3, r3
 80097ea:	8013      	strh	r3, [r2, #0]
 80097ec:	e009      	b.n	8009802 <USB_EPStartXfer+0xb00>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80097ee:	683b      	ldr	r3, [r7, #0]
 80097f0:	78db      	ldrb	r3, [r3, #3]
 80097f2:	2b01      	cmp	r3, #1
 80097f4:	d103      	bne.n	80097fe <USB_EPStartXfer+0xafc>
      {
        /* Only single packet transfer supported in FS */
        ep->xfer_len = 0U;
 80097f6:	683b      	ldr	r3, [r7, #0]
 80097f8:	2200      	movs	r2, #0
 80097fa:	619a      	str	r2, [r3, #24]
 80097fc:	e001      	b.n	8009802 <USB_EPStartXfer+0xb00>
      }
      else
      {
        return HAL_ERROR;
 80097fe:	2301      	movs	r3, #1
 8009800:	e02a      	b.n	8009858 <USB_EPStartXfer+0xb56>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009802:	687a      	ldr	r2, [r7, #4]
 8009804:	683b      	ldr	r3, [r7, #0]
 8009806:	781b      	ldrb	r3, [r3, #0]
 8009808:	009b      	lsls	r3, r3, #2
 800980a:	4413      	add	r3, r2
 800980c:	881b      	ldrh	r3, [r3, #0]
 800980e:	b29b      	uxth	r3, r3
 8009810:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009814:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009818:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800981c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8009820:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8009824:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8009828:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800982c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8009830:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8009834:	687a      	ldr	r2, [r7, #4]
 8009836:	683b      	ldr	r3, [r7, #0]
 8009838:	781b      	ldrb	r3, [r3, #0]
 800983a:	009b      	lsls	r3, r3, #2
 800983c:	441a      	add	r2, r3
 800983e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8009842:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009846:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800984a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800984e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009852:	b29b      	uxth	r3, r3
 8009854:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8009856:	2300      	movs	r3, #0
}
 8009858:	4618      	mov	r0, r3
 800985a:	37b0      	adds	r7, #176	@ 0xb0
 800985c:	46bd      	mov	sp, r7
 800985e:	bd80      	pop	{r7, pc}

08009860 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009860:	b480      	push	{r7}
 8009862:	b085      	sub	sp, #20
 8009864:	af00      	add	r7, sp, #0
 8009866:	6078      	str	r0, [r7, #4]
 8009868:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800986a:	683b      	ldr	r3, [r7, #0]
 800986c:	785b      	ldrb	r3, [r3, #1]
 800986e:	2b00      	cmp	r3, #0
 8009870:	d020      	beq.n	80098b4 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8009872:	687a      	ldr	r2, [r7, #4]
 8009874:	683b      	ldr	r3, [r7, #0]
 8009876:	781b      	ldrb	r3, [r3, #0]
 8009878:	009b      	lsls	r3, r3, #2
 800987a:	4413      	add	r3, r2
 800987c:	881b      	ldrh	r3, [r3, #0]
 800987e:	b29b      	uxth	r3, r3
 8009880:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009884:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009888:	81bb      	strh	r3, [r7, #12]
 800988a:	89bb      	ldrh	r3, [r7, #12]
 800988c:	f083 0310 	eor.w	r3, r3, #16
 8009890:	81bb      	strh	r3, [r7, #12]
 8009892:	687a      	ldr	r2, [r7, #4]
 8009894:	683b      	ldr	r3, [r7, #0]
 8009896:	781b      	ldrb	r3, [r3, #0]
 8009898:	009b      	lsls	r3, r3, #2
 800989a:	441a      	add	r2, r3
 800989c:	89bb      	ldrh	r3, [r7, #12]
 800989e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80098a2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80098a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80098aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80098ae:	b29b      	uxth	r3, r3
 80098b0:	8013      	strh	r3, [r2, #0]
 80098b2:	e01f      	b.n	80098f4 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80098b4:	687a      	ldr	r2, [r7, #4]
 80098b6:	683b      	ldr	r3, [r7, #0]
 80098b8:	781b      	ldrb	r3, [r3, #0]
 80098ba:	009b      	lsls	r3, r3, #2
 80098bc:	4413      	add	r3, r2
 80098be:	881b      	ldrh	r3, [r3, #0]
 80098c0:	b29b      	uxth	r3, r3
 80098c2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80098c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80098ca:	81fb      	strh	r3, [r7, #14]
 80098cc:	89fb      	ldrh	r3, [r7, #14]
 80098ce:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80098d2:	81fb      	strh	r3, [r7, #14]
 80098d4:	687a      	ldr	r2, [r7, #4]
 80098d6:	683b      	ldr	r3, [r7, #0]
 80098d8:	781b      	ldrb	r3, [r3, #0]
 80098da:	009b      	lsls	r3, r3, #2
 80098dc:	441a      	add	r2, r3
 80098de:	89fb      	ldrh	r3, [r7, #14]
 80098e0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80098e4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80098e8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80098ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80098f0:	b29b      	uxth	r3, r3
 80098f2:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80098f4:	2300      	movs	r3, #0
}
 80098f6:	4618      	mov	r0, r3
 80098f8:	3714      	adds	r7, #20
 80098fa:	46bd      	mov	sp, r7
 80098fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009900:	4770      	bx	lr

08009902 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009902:	b480      	push	{r7}
 8009904:	b087      	sub	sp, #28
 8009906:	af00      	add	r7, sp, #0
 8009908:	6078      	str	r0, [r7, #4]
 800990a:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800990c:	683b      	ldr	r3, [r7, #0]
 800990e:	785b      	ldrb	r3, [r3, #1]
 8009910:	2b00      	cmp	r3, #0
 8009912:	d04c      	beq.n	80099ae <USB_EPClearStall+0xac>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009914:	687a      	ldr	r2, [r7, #4]
 8009916:	683b      	ldr	r3, [r7, #0]
 8009918:	781b      	ldrb	r3, [r3, #0]
 800991a:	009b      	lsls	r3, r3, #2
 800991c:	4413      	add	r3, r2
 800991e:	881b      	ldrh	r3, [r3, #0]
 8009920:	823b      	strh	r3, [r7, #16]
 8009922:	8a3b      	ldrh	r3, [r7, #16]
 8009924:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009928:	2b00      	cmp	r3, #0
 800992a:	d01b      	beq.n	8009964 <USB_EPClearStall+0x62>
 800992c:	687a      	ldr	r2, [r7, #4]
 800992e:	683b      	ldr	r3, [r7, #0]
 8009930:	781b      	ldrb	r3, [r3, #0]
 8009932:	009b      	lsls	r3, r3, #2
 8009934:	4413      	add	r3, r2
 8009936:	881b      	ldrh	r3, [r3, #0]
 8009938:	b29b      	uxth	r3, r3
 800993a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800993e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009942:	81fb      	strh	r3, [r7, #14]
 8009944:	687a      	ldr	r2, [r7, #4]
 8009946:	683b      	ldr	r3, [r7, #0]
 8009948:	781b      	ldrb	r3, [r3, #0]
 800994a:	009b      	lsls	r3, r3, #2
 800994c:	441a      	add	r2, r3
 800994e:	89fb      	ldrh	r3, [r7, #14]
 8009950:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009954:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009958:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800995c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009960:	b29b      	uxth	r3, r3
 8009962:	8013      	strh	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8009964:	683b      	ldr	r3, [r7, #0]
 8009966:	78db      	ldrb	r3, [r3, #3]
 8009968:	2b01      	cmp	r3, #1
 800996a:	d06c      	beq.n	8009a46 <USB_EPClearStall+0x144>
    {
      /* Configure NAK status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800996c:	687a      	ldr	r2, [r7, #4]
 800996e:	683b      	ldr	r3, [r7, #0]
 8009970:	781b      	ldrb	r3, [r3, #0]
 8009972:	009b      	lsls	r3, r3, #2
 8009974:	4413      	add	r3, r2
 8009976:	881b      	ldrh	r3, [r3, #0]
 8009978:	b29b      	uxth	r3, r3
 800997a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800997e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009982:	81bb      	strh	r3, [r7, #12]
 8009984:	89bb      	ldrh	r3, [r7, #12]
 8009986:	f083 0320 	eor.w	r3, r3, #32
 800998a:	81bb      	strh	r3, [r7, #12]
 800998c:	687a      	ldr	r2, [r7, #4]
 800998e:	683b      	ldr	r3, [r7, #0]
 8009990:	781b      	ldrb	r3, [r3, #0]
 8009992:	009b      	lsls	r3, r3, #2
 8009994:	441a      	add	r2, r3
 8009996:	89bb      	ldrh	r3, [r7, #12]
 8009998:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800999c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80099a0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80099a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80099a8:	b29b      	uxth	r3, r3
 80099aa:	8013      	strh	r3, [r2, #0]
 80099ac:	e04b      	b.n	8009a46 <USB_EPClearStall+0x144>
    }
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80099ae:	687a      	ldr	r2, [r7, #4]
 80099b0:	683b      	ldr	r3, [r7, #0]
 80099b2:	781b      	ldrb	r3, [r3, #0]
 80099b4:	009b      	lsls	r3, r3, #2
 80099b6:	4413      	add	r3, r2
 80099b8:	881b      	ldrh	r3, [r3, #0]
 80099ba:	82fb      	strh	r3, [r7, #22]
 80099bc:	8afb      	ldrh	r3, [r7, #22]
 80099be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d01b      	beq.n	80099fe <USB_EPClearStall+0xfc>
 80099c6:	687a      	ldr	r2, [r7, #4]
 80099c8:	683b      	ldr	r3, [r7, #0]
 80099ca:	781b      	ldrb	r3, [r3, #0]
 80099cc:	009b      	lsls	r3, r3, #2
 80099ce:	4413      	add	r3, r2
 80099d0:	881b      	ldrh	r3, [r3, #0]
 80099d2:	b29b      	uxth	r3, r3
 80099d4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80099d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80099dc:	82bb      	strh	r3, [r7, #20]
 80099de:	687a      	ldr	r2, [r7, #4]
 80099e0:	683b      	ldr	r3, [r7, #0]
 80099e2:	781b      	ldrb	r3, [r3, #0]
 80099e4:	009b      	lsls	r3, r3, #2
 80099e6:	441a      	add	r2, r3
 80099e8:	8abb      	ldrh	r3, [r7, #20]
 80099ea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80099ee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80099f2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80099f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80099fa:	b29b      	uxth	r3, r3
 80099fc:	8013      	strh	r3, [r2, #0]

    /* Configure VALID status for the Endpoint */
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80099fe:	687a      	ldr	r2, [r7, #4]
 8009a00:	683b      	ldr	r3, [r7, #0]
 8009a02:	781b      	ldrb	r3, [r3, #0]
 8009a04:	009b      	lsls	r3, r3, #2
 8009a06:	4413      	add	r3, r2
 8009a08:	881b      	ldrh	r3, [r3, #0]
 8009a0a:	b29b      	uxth	r3, r3
 8009a0c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009a10:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009a14:	827b      	strh	r3, [r7, #18]
 8009a16:	8a7b      	ldrh	r3, [r7, #18]
 8009a18:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8009a1c:	827b      	strh	r3, [r7, #18]
 8009a1e:	8a7b      	ldrh	r3, [r7, #18]
 8009a20:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8009a24:	827b      	strh	r3, [r7, #18]
 8009a26:	687a      	ldr	r2, [r7, #4]
 8009a28:	683b      	ldr	r3, [r7, #0]
 8009a2a:	781b      	ldrb	r3, [r3, #0]
 8009a2c:	009b      	lsls	r3, r3, #2
 8009a2e:	441a      	add	r2, r3
 8009a30:	8a7b      	ldrh	r3, [r7, #18]
 8009a32:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009a36:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009a3a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009a3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009a42:	b29b      	uxth	r3, r3
 8009a44:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8009a46:	2300      	movs	r3, #0
}
 8009a48:	4618      	mov	r0, r3
 8009a4a:	371c      	adds	r7, #28
 8009a4c:	46bd      	mov	sp, r7
 8009a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a52:	4770      	bx	lr

08009a54 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8009a54:	b480      	push	{r7}
 8009a56:	b083      	sub	sp, #12
 8009a58:	af00      	add	r7, sp, #0
 8009a5a:	6078      	str	r0, [r7, #4]
 8009a5c:	460b      	mov	r3, r1
 8009a5e:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8009a60:	78fb      	ldrb	r3, [r7, #3]
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d103      	bne.n	8009a6e <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	2280      	movs	r2, #128	@ 0x80
 8009a6a:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8009a6e:	2300      	movs	r3, #0
}
 8009a70:	4618      	mov	r0, r3
 8009a72:	370c      	adds	r7, #12
 8009a74:	46bd      	mov	sp, r7
 8009a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a7a:	4770      	bx	lr

08009a7c <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8009a7c:	b480      	push	{r7}
 8009a7e:	b083      	sub	sp, #12
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8009a8a:	b29b      	uxth	r3, r3
 8009a8c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009a90:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009a94:	b29a      	uxth	r2, r3
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 8009a9c:	2300      	movs	r3, #0
}
 8009a9e:	4618      	mov	r0, r3
 8009aa0:	370c      	adds	r7, #12
 8009aa2:	46bd      	mov	sp, r7
 8009aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa8:	4770      	bx	lr

08009aaa <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8009aaa:	b480      	push	{r7}
 8009aac:	b085      	sub	sp, #20
 8009aae:	af00      	add	r7, sp, #0
 8009ab0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8009ab8:	b29b      	uxth	r3, r3
 8009aba:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8009abc:	68fb      	ldr	r3, [r7, #12]
}
 8009abe:	4618      	mov	r0, r3
 8009ac0:	3714      	adds	r7, #20
 8009ac2:	46bd      	mov	sp, r7
 8009ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac8:	4770      	bx	lr

08009aca <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009aca:	b480      	push	{r7}
 8009acc:	b08b      	sub	sp, #44	@ 0x2c
 8009ace:	af00      	add	r7, sp, #0
 8009ad0:	60f8      	str	r0, [r7, #12]
 8009ad2:	60b9      	str	r1, [r7, #8]
 8009ad4:	4611      	mov	r1, r2
 8009ad6:	461a      	mov	r2, r3
 8009ad8:	460b      	mov	r3, r1
 8009ada:	80fb      	strh	r3, [r7, #6]
 8009adc:	4613      	mov	r3, r2
 8009ade:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8009ae0:	88bb      	ldrh	r3, [r7, #4]
 8009ae2:	3301      	adds	r3, #1
 8009ae4:	085b      	lsrs	r3, r3, #1
 8009ae6:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009aec:	68bb      	ldr	r3, [r7, #8]
 8009aee:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009af0:	88fa      	ldrh	r2, [r7, #6]
 8009af2:	697b      	ldr	r3, [r7, #20]
 8009af4:	4413      	add	r3, r2
 8009af6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009afa:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8009afc:	69bb      	ldr	r3, [r7, #24]
 8009afe:	627b      	str	r3, [r7, #36]	@ 0x24
 8009b00:	e01b      	b.n	8009b3a <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 8009b02:	69fb      	ldr	r3, [r7, #28]
 8009b04:	781b      	ldrb	r3, [r3, #0]
 8009b06:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8009b08:	69fb      	ldr	r3, [r7, #28]
 8009b0a:	3301      	adds	r3, #1
 8009b0c:	781b      	ldrb	r3, [r3, #0]
 8009b0e:	021b      	lsls	r3, r3, #8
 8009b10:	b21a      	sxth	r2, r3
 8009b12:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009b16:	4313      	orrs	r3, r2
 8009b18:	b21b      	sxth	r3, r3
 8009b1a:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8009b1c:	6a3b      	ldr	r3, [r7, #32]
 8009b1e:	8a7a      	ldrh	r2, [r7, #18]
 8009b20:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8009b22:	6a3b      	ldr	r3, [r7, #32]
 8009b24:	3302      	adds	r3, #2
 8009b26:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8009b28:	69fb      	ldr	r3, [r7, #28]
 8009b2a:	3301      	adds	r3, #1
 8009b2c:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8009b2e:	69fb      	ldr	r3, [r7, #28]
 8009b30:	3301      	adds	r3, #1
 8009b32:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8009b34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b36:	3b01      	subs	r3, #1
 8009b38:	627b      	str	r3, [r7, #36]	@ 0x24
 8009b3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d1e0      	bne.n	8009b02 <USB_WritePMA+0x38>
  }
}
 8009b40:	bf00      	nop
 8009b42:	bf00      	nop
 8009b44:	372c      	adds	r7, #44	@ 0x2c
 8009b46:	46bd      	mov	sp, r7
 8009b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b4c:	4770      	bx	lr

08009b4e <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009b4e:	b480      	push	{r7}
 8009b50:	b08b      	sub	sp, #44	@ 0x2c
 8009b52:	af00      	add	r7, sp, #0
 8009b54:	60f8      	str	r0, [r7, #12]
 8009b56:	60b9      	str	r1, [r7, #8]
 8009b58:	4611      	mov	r1, r2
 8009b5a:	461a      	mov	r2, r3
 8009b5c:	460b      	mov	r3, r1
 8009b5e:	80fb      	strh	r3, [r7, #6]
 8009b60:	4613      	mov	r3, r2
 8009b62:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8009b64:	88bb      	ldrh	r3, [r7, #4]
 8009b66:	085b      	lsrs	r3, r3, #1
 8009b68:	b29b      	uxth	r3, r3
 8009b6a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009b70:	68bb      	ldr	r3, [r7, #8]
 8009b72:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009b74:	88fa      	ldrh	r2, [r7, #6]
 8009b76:	697b      	ldr	r3, [r7, #20]
 8009b78:	4413      	add	r3, r2
 8009b7a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009b7e:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8009b80:	69bb      	ldr	r3, [r7, #24]
 8009b82:	627b      	str	r3, [r7, #36]	@ 0x24
 8009b84:	e018      	b.n	8009bb8 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8009b86:	6a3b      	ldr	r3, [r7, #32]
 8009b88:	881b      	ldrh	r3, [r3, #0]
 8009b8a:	b29b      	uxth	r3, r3
 8009b8c:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8009b8e:	6a3b      	ldr	r3, [r7, #32]
 8009b90:	3302      	adds	r3, #2
 8009b92:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8009b94:	693b      	ldr	r3, [r7, #16]
 8009b96:	b2da      	uxtb	r2, r3
 8009b98:	69fb      	ldr	r3, [r7, #28]
 8009b9a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009b9c:	69fb      	ldr	r3, [r7, #28]
 8009b9e:	3301      	adds	r3, #1
 8009ba0:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8009ba2:	693b      	ldr	r3, [r7, #16]
 8009ba4:	0a1b      	lsrs	r3, r3, #8
 8009ba6:	b2da      	uxtb	r2, r3
 8009ba8:	69fb      	ldr	r3, [r7, #28]
 8009baa:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009bac:	69fb      	ldr	r3, [r7, #28]
 8009bae:	3301      	adds	r3, #1
 8009bb0:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8009bb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bb4:	3b01      	subs	r3, #1
 8009bb6:	627b      	str	r3, [r7, #36]	@ 0x24
 8009bb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d1e3      	bne.n	8009b86 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8009bbe:	88bb      	ldrh	r3, [r7, #4]
 8009bc0:	f003 0301 	and.w	r3, r3, #1
 8009bc4:	b29b      	uxth	r3, r3
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d007      	beq.n	8009bda <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 8009bca:	6a3b      	ldr	r3, [r7, #32]
 8009bcc:	881b      	ldrh	r3, [r3, #0]
 8009bce:	b29b      	uxth	r3, r3
 8009bd0:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8009bd2:	693b      	ldr	r3, [r7, #16]
 8009bd4:	b2da      	uxtb	r2, r3
 8009bd6:	69fb      	ldr	r3, [r7, #28]
 8009bd8:	701a      	strb	r2, [r3, #0]
  }
}
 8009bda:	bf00      	nop
 8009bdc:	372c      	adds	r7, #44	@ 0x2c
 8009bde:	46bd      	mov	sp, r7
 8009be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be4:	4770      	bx	lr

08009be6 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009be6:	b580      	push	{r7, lr}
 8009be8:	b084      	sub	sp, #16
 8009bea:	af00      	add	r7, sp, #0
 8009bec:	6078      	str	r0, [r7, #4]
 8009bee:	460b      	mov	r3, r1
 8009bf0:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009bf2:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8009bf6:	f002 f911 	bl	800be1c <USBD_static_malloc>
 8009bfa:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d105      	bne.n	8009c0e <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	2200      	movs	r2, #0
 8009c06:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    return (uint8_t)USBD_EMEM;
 8009c0a:	2302      	movs	r3, #2
 8009c0c:	e066      	b.n	8009cdc <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	68fa      	ldr	r2, [r7, #12]
 8009c12:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	7c1b      	ldrb	r3, [r3, #16]
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d119      	bne.n	8009c52 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009c1e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009c22:	2202      	movs	r2, #2
 8009c24:	2181      	movs	r1, #129	@ 0x81
 8009c26:	6878      	ldr	r0, [r7, #4]
 8009c28:	f001 ff9f 	bl	800bb6a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	2201      	movs	r2, #1
 8009c30:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009c32:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009c36:	2202      	movs	r2, #2
 8009c38:	2101      	movs	r1, #1
 8009c3a:	6878      	ldr	r0, [r7, #4]
 8009c3c:	f001 ff95 	bl	800bb6a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	2201      	movs	r2, #1
 8009c44:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	2210      	movs	r2, #16
 8009c4c:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
 8009c50:	e016      	b.n	8009c80 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009c52:	2340      	movs	r3, #64	@ 0x40
 8009c54:	2202      	movs	r2, #2
 8009c56:	2181      	movs	r1, #129	@ 0x81
 8009c58:	6878      	ldr	r0, [r7, #4]
 8009c5a:	f001 ff86 	bl	800bb6a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	2201      	movs	r2, #1
 8009c62:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009c64:	2340      	movs	r3, #64	@ 0x40
 8009c66:	2202      	movs	r2, #2
 8009c68:	2101      	movs	r1, #1
 8009c6a:	6878      	ldr	r0, [r7, #4]
 8009c6c:	f001 ff7d 	bl	800bb6a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	2201      	movs	r2, #1
 8009c74:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	2210      	movs	r2, #16
 8009c7c:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009c80:	2308      	movs	r3, #8
 8009c82:	2203      	movs	r2, #3
 8009c84:	2182      	movs	r1, #130	@ 0x82
 8009c86:	6878      	ldr	r0, [r7, #4]
 8009c88:	f001 ff6f 	bl	800bb6a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	2201      	movs	r2, #1
 8009c90:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	2200      	movs	r2, #0
 8009ca2:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	2200      	movs	r2, #0
 8009caa:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	7c1b      	ldrb	r3, [r3, #16]
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d109      	bne.n	8009cca <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009cbc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009cc0:	2101      	movs	r1, #1
 8009cc2:	6878      	ldr	r0, [r7, #4]
 8009cc4:	f002 f840 	bl	800bd48 <USBD_LL_PrepareReceive>
 8009cc8:	e007      	b.n	8009cda <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009cd0:	2340      	movs	r3, #64	@ 0x40
 8009cd2:	2101      	movs	r1, #1
 8009cd4:	6878      	ldr	r0, [r7, #4]
 8009cd6:	f002 f837 	bl	800bd48 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009cda:	2300      	movs	r3, #0
}
 8009cdc:	4618      	mov	r0, r3
 8009cde:	3710      	adds	r7, #16
 8009ce0:	46bd      	mov	sp, r7
 8009ce2:	bd80      	pop	{r7, pc}

08009ce4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009ce4:	b580      	push	{r7, lr}
 8009ce6:	b082      	sub	sp, #8
 8009ce8:	af00      	add	r7, sp, #0
 8009cea:	6078      	str	r0, [r7, #4]
 8009cec:	460b      	mov	r3, r1
 8009cee:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8009cf0:	2181      	movs	r1, #129	@ 0x81
 8009cf2:	6878      	ldr	r0, [r7, #4]
 8009cf4:	f001 ff5f 	bl	800bbb6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	2200      	movs	r2, #0
 8009cfc:	871a      	strh	r2, [r3, #56]	@ 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8009cfe:	2101      	movs	r1, #1
 8009d00:	6878      	ldr	r0, [r7, #4]
 8009d02:	f001 ff58 	bl	800bbb6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	2200      	movs	r2, #0
 8009d0a:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8009d0e:	2182      	movs	r1, #130	@ 0x82
 8009d10:	6878      	ldr	r0, [r7, #4]
 8009d12:	f001 ff50 	bl	800bbb6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	2200      	movs	r2, #0
 8009d1a:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	2200      	movs	r2, #0
 8009d22:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d00e      	beq.n	8009d4e <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009d36:	685b      	ldr	r3, [r3, #4]
 8009d38:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009d40:	4618      	mov	r0, r3
 8009d42:	f002 f879 	bl	800be38 <USBD_static_free>
    pdev->pClassData = NULL;
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	2200      	movs	r2, #0
 8009d4a:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009d4e:	2300      	movs	r3, #0
}
 8009d50:	4618      	mov	r0, r3
 8009d52:	3708      	adds	r7, #8
 8009d54:	46bd      	mov	sp, r7
 8009d56:	bd80      	pop	{r7, pc}

08009d58 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8009d58:	b580      	push	{r7, lr}
 8009d5a:	b086      	sub	sp, #24
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	6078      	str	r0, [r7, #4]
 8009d60:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009d68:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8009d6a:	2300      	movs	r3, #0
 8009d6c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8009d6e:	2300      	movs	r3, #0
 8009d70:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8009d72:	2300      	movs	r3, #0
 8009d74:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8009d76:	693b      	ldr	r3, [r7, #16]
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d101      	bne.n	8009d80 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8009d7c:	2303      	movs	r3, #3
 8009d7e:	e0af      	b.n	8009ee0 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009d80:	683b      	ldr	r3, [r7, #0]
 8009d82:	781b      	ldrb	r3, [r3, #0]
 8009d84:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d03f      	beq.n	8009e0c <USBD_CDC_Setup+0xb4>
 8009d8c:	2b20      	cmp	r3, #32
 8009d8e:	f040 809f 	bne.w	8009ed0 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8009d92:	683b      	ldr	r3, [r7, #0]
 8009d94:	88db      	ldrh	r3, [r3, #6]
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d02e      	beq.n	8009df8 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8009d9a:	683b      	ldr	r3, [r7, #0]
 8009d9c:	781b      	ldrb	r3, [r3, #0]
 8009d9e:	b25b      	sxtb	r3, r3
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	da16      	bge.n	8009dd2 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009daa:	689b      	ldr	r3, [r3, #8]
 8009dac:	683a      	ldr	r2, [r7, #0]
 8009dae:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8009db0:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009db2:	683a      	ldr	r2, [r7, #0]
 8009db4:	88d2      	ldrh	r2, [r2, #6]
 8009db6:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8009db8:	683b      	ldr	r3, [r7, #0]
 8009dba:	88db      	ldrh	r3, [r3, #6]
 8009dbc:	2b07      	cmp	r3, #7
 8009dbe:	bf28      	it	cs
 8009dc0:	2307      	movcs	r3, #7
 8009dc2:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8009dc4:	693b      	ldr	r3, [r7, #16]
 8009dc6:	89fa      	ldrh	r2, [r7, #14]
 8009dc8:	4619      	mov	r1, r3
 8009dca:	6878      	ldr	r0, [r7, #4]
 8009dcc:	f001 facd 	bl	800b36a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8009dd0:	e085      	b.n	8009ede <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8009dd2:	683b      	ldr	r3, [r7, #0]
 8009dd4:	785a      	ldrb	r2, [r3, #1]
 8009dd6:	693b      	ldr	r3, [r7, #16]
 8009dd8:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8009ddc:	683b      	ldr	r3, [r7, #0]
 8009dde:	88db      	ldrh	r3, [r3, #6]
 8009de0:	b2da      	uxtb	r2, r3
 8009de2:	693b      	ldr	r3, [r7, #16]
 8009de4:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8009de8:	6939      	ldr	r1, [r7, #16]
 8009dea:	683b      	ldr	r3, [r7, #0]
 8009dec:	88db      	ldrh	r3, [r3, #6]
 8009dee:	461a      	mov	r2, r3
 8009df0:	6878      	ldr	r0, [r7, #4]
 8009df2:	f001 fae6 	bl	800b3c2 <USBD_CtlPrepareRx>
      break;
 8009df6:	e072      	b.n	8009ede <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009dfe:	689b      	ldr	r3, [r3, #8]
 8009e00:	683a      	ldr	r2, [r7, #0]
 8009e02:	7850      	ldrb	r0, [r2, #1]
 8009e04:	2200      	movs	r2, #0
 8009e06:	6839      	ldr	r1, [r7, #0]
 8009e08:	4798      	blx	r3
      break;
 8009e0a:	e068      	b.n	8009ede <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009e0c:	683b      	ldr	r3, [r7, #0]
 8009e0e:	785b      	ldrb	r3, [r3, #1]
 8009e10:	2b0b      	cmp	r3, #11
 8009e12:	d852      	bhi.n	8009eba <USBD_CDC_Setup+0x162>
 8009e14:	a201      	add	r2, pc, #4	@ (adr r2, 8009e1c <USBD_CDC_Setup+0xc4>)
 8009e16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e1a:	bf00      	nop
 8009e1c:	08009e4d 	.word	0x08009e4d
 8009e20:	08009ec9 	.word	0x08009ec9
 8009e24:	08009ebb 	.word	0x08009ebb
 8009e28:	08009ebb 	.word	0x08009ebb
 8009e2c:	08009ebb 	.word	0x08009ebb
 8009e30:	08009ebb 	.word	0x08009ebb
 8009e34:	08009ebb 	.word	0x08009ebb
 8009e38:	08009ebb 	.word	0x08009ebb
 8009e3c:	08009ebb 	.word	0x08009ebb
 8009e40:	08009ebb 	.word	0x08009ebb
 8009e44:	08009e77 	.word	0x08009e77
 8009e48:	08009ea1 	.word	0x08009ea1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009e52:	b2db      	uxtb	r3, r3
 8009e54:	2b03      	cmp	r3, #3
 8009e56:	d107      	bne.n	8009e68 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009e58:	f107 030a 	add.w	r3, r7, #10
 8009e5c:	2202      	movs	r2, #2
 8009e5e:	4619      	mov	r1, r3
 8009e60:	6878      	ldr	r0, [r7, #4]
 8009e62:	f001 fa82 	bl	800b36a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009e66:	e032      	b.n	8009ece <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8009e68:	6839      	ldr	r1, [r7, #0]
 8009e6a:	6878      	ldr	r0, [r7, #4]
 8009e6c:	f001 fa0c 	bl	800b288 <USBD_CtlError>
            ret = USBD_FAIL;
 8009e70:	2303      	movs	r3, #3
 8009e72:	75fb      	strb	r3, [r7, #23]
          break;
 8009e74:	e02b      	b.n	8009ece <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009e7c:	b2db      	uxtb	r3, r3
 8009e7e:	2b03      	cmp	r3, #3
 8009e80:	d107      	bne.n	8009e92 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8009e82:	f107 030d 	add.w	r3, r7, #13
 8009e86:	2201      	movs	r2, #1
 8009e88:	4619      	mov	r1, r3
 8009e8a:	6878      	ldr	r0, [r7, #4]
 8009e8c:	f001 fa6d 	bl	800b36a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009e90:	e01d      	b.n	8009ece <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8009e92:	6839      	ldr	r1, [r7, #0]
 8009e94:	6878      	ldr	r0, [r7, #4]
 8009e96:	f001 f9f7 	bl	800b288 <USBD_CtlError>
            ret = USBD_FAIL;
 8009e9a:	2303      	movs	r3, #3
 8009e9c:	75fb      	strb	r3, [r7, #23]
          break;
 8009e9e:	e016      	b.n	8009ece <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009ea6:	b2db      	uxtb	r3, r3
 8009ea8:	2b03      	cmp	r3, #3
 8009eaa:	d00f      	beq.n	8009ecc <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8009eac:	6839      	ldr	r1, [r7, #0]
 8009eae:	6878      	ldr	r0, [r7, #4]
 8009eb0:	f001 f9ea 	bl	800b288 <USBD_CtlError>
            ret = USBD_FAIL;
 8009eb4:	2303      	movs	r3, #3
 8009eb6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009eb8:	e008      	b.n	8009ecc <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8009eba:	6839      	ldr	r1, [r7, #0]
 8009ebc:	6878      	ldr	r0, [r7, #4]
 8009ebe:	f001 f9e3 	bl	800b288 <USBD_CtlError>
          ret = USBD_FAIL;
 8009ec2:	2303      	movs	r3, #3
 8009ec4:	75fb      	strb	r3, [r7, #23]
          break;
 8009ec6:	e002      	b.n	8009ece <USBD_CDC_Setup+0x176>
          break;
 8009ec8:	bf00      	nop
 8009eca:	e008      	b.n	8009ede <USBD_CDC_Setup+0x186>
          break;
 8009ecc:	bf00      	nop
      }
      break;
 8009ece:	e006      	b.n	8009ede <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8009ed0:	6839      	ldr	r1, [r7, #0]
 8009ed2:	6878      	ldr	r0, [r7, #4]
 8009ed4:	f001 f9d8 	bl	800b288 <USBD_CtlError>
      ret = USBD_FAIL;
 8009ed8:	2303      	movs	r3, #3
 8009eda:	75fb      	strb	r3, [r7, #23]
      break;
 8009edc:	bf00      	nop
  }

  return (uint8_t)ret;
 8009ede:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ee0:	4618      	mov	r0, r3
 8009ee2:	3718      	adds	r7, #24
 8009ee4:	46bd      	mov	sp, r7
 8009ee6:	bd80      	pop	{r7, pc}

08009ee8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009ee8:	b580      	push	{r7, lr}
 8009eea:	b084      	sub	sp, #16
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	6078      	str	r0, [r7, #4]
 8009ef0:	460b      	mov	r3, r1
 8009ef2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8009efa:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d101      	bne.n	8009f0a <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009f06:	2303      	movs	r3, #3
 8009f08:	e04f      	b.n	8009faa <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009f10:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8009f12:	78fa      	ldrb	r2, [r7, #3]
 8009f14:	6879      	ldr	r1, [r7, #4]
 8009f16:	4613      	mov	r3, r2
 8009f18:	009b      	lsls	r3, r3, #2
 8009f1a:	4413      	add	r3, r2
 8009f1c:	009b      	lsls	r3, r3, #2
 8009f1e:	440b      	add	r3, r1
 8009f20:	3318      	adds	r3, #24
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d029      	beq.n	8009f7c <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8009f28:	78fa      	ldrb	r2, [r7, #3]
 8009f2a:	6879      	ldr	r1, [r7, #4]
 8009f2c:	4613      	mov	r3, r2
 8009f2e:	009b      	lsls	r3, r3, #2
 8009f30:	4413      	add	r3, r2
 8009f32:	009b      	lsls	r3, r3, #2
 8009f34:	440b      	add	r3, r1
 8009f36:	3318      	adds	r3, #24
 8009f38:	681a      	ldr	r2, [r3, #0]
 8009f3a:	78f9      	ldrb	r1, [r7, #3]
 8009f3c:	68f8      	ldr	r0, [r7, #12]
 8009f3e:	460b      	mov	r3, r1
 8009f40:	009b      	lsls	r3, r3, #2
 8009f42:	440b      	add	r3, r1
 8009f44:	00db      	lsls	r3, r3, #3
 8009f46:	4403      	add	r3, r0
 8009f48:	3320      	adds	r3, #32
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	fbb2 f1f3 	udiv	r1, r2, r3
 8009f50:	fb01 f303 	mul.w	r3, r1, r3
 8009f54:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d110      	bne.n	8009f7c <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8009f5a:	78fa      	ldrb	r2, [r7, #3]
 8009f5c:	6879      	ldr	r1, [r7, #4]
 8009f5e:	4613      	mov	r3, r2
 8009f60:	009b      	lsls	r3, r3, #2
 8009f62:	4413      	add	r3, r2
 8009f64:	009b      	lsls	r3, r3, #2
 8009f66:	440b      	add	r3, r1
 8009f68:	3318      	adds	r3, #24
 8009f6a:	2200      	movs	r2, #0
 8009f6c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009f6e:	78f9      	ldrb	r1, [r7, #3]
 8009f70:	2300      	movs	r3, #0
 8009f72:	2200      	movs	r2, #0
 8009f74:	6878      	ldr	r0, [r7, #4]
 8009f76:	f001 fec6 	bl	800bd06 <USBD_LL_Transmit>
 8009f7a:	e015      	b.n	8009fa8 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8009f7c:	68bb      	ldr	r3, [r7, #8]
 8009f7e:	2200      	movs	r2, #0
 8009f80:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009f8a:	691b      	ldr	r3, [r3, #16]
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d00b      	beq.n	8009fa8 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009f96:	691b      	ldr	r3, [r3, #16]
 8009f98:	68ba      	ldr	r2, [r7, #8]
 8009f9a:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8009f9e:	68ba      	ldr	r2, [r7, #8]
 8009fa0:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8009fa4:	78fa      	ldrb	r2, [r7, #3]
 8009fa6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8009fa8:	2300      	movs	r3, #0
}
 8009faa:	4618      	mov	r0, r3
 8009fac:	3710      	adds	r7, #16
 8009fae:	46bd      	mov	sp, r7
 8009fb0:	bd80      	pop	{r7, pc}

08009fb2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009fb2:	b580      	push	{r7, lr}
 8009fb4:	b084      	sub	sp, #16
 8009fb6:	af00      	add	r7, sp, #0
 8009fb8:	6078      	str	r0, [r7, #4]
 8009fba:	460b      	mov	r3, r1
 8009fbc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009fc4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d101      	bne.n	8009fd4 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009fd0:	2303      	movs	r3, #3
 8009fd2:	e015      	b.n	800a000 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009fd4:	78fb      	ldrb	r3, [r7, #3]
 8009fd6:	4619      	mov	r1, r3
 8009fd8:	6878      	ldr	r0, [r7, #4]
 8009fda:	f001 fed6 	bl	800bd8a <USBD_LL_GetRxDataSize>
 8009fde:	4602      	mov	r2, r0
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009fec:	68db      	ldr	r3, [r3, #12]
 8009fee:	68fa      	ldr	r2, [r7, #12]
 8009ff0:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8009ff4:	68fa      	ldr	r2, [r7, #12]
 8009ff6:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8009ffa:	4611      	mov	r1, r2
 8009ffc:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8009ffe:	2300      	movs	r3, #0
}
 800a000:	4618      	mov	r0, r3
 800a002:	3710      	adds	r7, #16
 800a004:	46bd      	mov	sp, r7
 800a006:	bd80      	pop	{r7, pc}

0800a008 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a008:	b580      	push	{r7, lr}
 800a00a:	b084      	sub	sp, #16
 800a00c:	af00      	add	r7, sp, #0
 800a00e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a016:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d101      	bne.n	800a022 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800a01e:	2303      	movs	r3, #3
 800a020:	e01a      	b.n	800a058 <USBD_CDC_EP0_RxReady+0x50>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d014      	beq.n	800a056 <USBD_CDC_EP0_RxReady+0x4e>
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800a032:	2bff      	cmp	r3, #255	@ 0xff
 800a034:	d00f      	beq.n	800a056 <USBD_CDC_EP0_RxReady+0x4e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a03c:	689b      	ldr	r3, [r3, #8]
 800a03e:	68fa      	ldr	r2, [r7, #12]
 800a040:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)hcdc->data,
 800a044:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800a046:	68fa      	ldr	r2, [r7, #12]
 800a048:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a04c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	22ff      	movs	r2, #255	@ 0xff
 800a052:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800a056:	2300      	movs	r3, #0
}
 800a058:	4618      	mov	r0, r3
 800a05a:	3710      	adds	r7, #16
 800a05c:	46bd      	mov	sp, r7
 800a05e:	bd80      	pop	{r7, pc}

0800a060 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a060:	b480      	push	{r7}
 800a062:	b083      	sub	sp, #12
 800a064:	af00      	add	r7, sp, #0
 800a066:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	2243      	movs	r2, #67	@ 0x43
 800a06c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800a06e:	4b03      	ldr	r3, [pc, #12]	@ (800a07c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800a070:	4618      	mov	r0, r3
 800a072:	370c      	adds	r7, #12
 800a074:	46bd      	mov	sp, r7
 800a076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a07a:	4770      	bx	lr
 800a07c:	20000128 	.word	0x20000128

0800a080 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a080:	b480      	push	{r7}
 800a082:	b083      	sub	sp, #12
 800a084:	af00      	add	r7, sp, #0
 800a086:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	2243      	movs	r2, #67	@ 0x43
 800a08c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800a08e:	4b03      	ldr	r3, [pc, #12]	@ (800a09c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800a090:	4618      	mov	r0, r3
 800a092:	370c      	adds	r7, #12
 800a094:	46bd      	mov	sp, r7
 800a096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a09a:	4770      	bx	lr
 800a09c:	200000e4 	.word	0x200000e4

0800a0a0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a0a0:	b480      	push	{r7}
 800a0a2:	b083      	sub	sp, #12
 800a0a4:	af00      	add	r7, sp, #0
 800a0a6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	2243      	movs	r2, #67	@ 0x43
 800a0ac:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800a0ae:	4b03      	ldr	r3, [pc, #12]	@ (800a0bc <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800a0b0:	4618      	mov	r0, r3
 800a0b2:	370c      	adds	r7, #12
 800a0b4:	46bd      	mov	sp, r7
 800a0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ba:	4770      	bx	lr
 800a0bc:	2000016c 	.word	0x2000016c

0800a0c0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a0c0:	b480      	push	{r7}
 800a0c2:	b083      	sub	sp, #12
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	220a      	movs	r2, #10
 800a0cc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800a0ce:	4b03      	ldr	r3, [pc, #12]	@ (800a0dc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a0d0:	4618      	mov	r0, r3
 800a0d2:	370c      	adds	r7, #12
 800a0d4:	46bd      	mov	sp, r7
 800a0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0da:	4770      	bx	lr
 800a0dc:	200000a0 	.word	0x200000a0

0800a0e0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800a0e0:	b480      	push	{r7}
 800a0e2:	b083      	sub	sp, #12
 800a0e4:	af00      	add	r7, sp, #0
 800a0e6:	6078      	str	r0, [r7, #4]
 800a0e8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800a0ea:	683b      	ldr	r3, [r7, #0]
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d101      	bne.n	800a0f4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800a0f0:	2303      	movs	r3, #3
 800a0f2:	e004      	b.n	800a0fe <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	683a      	ldr	r2, [r7, #0]
 800a0f8:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  return (uint8_t)USBD_OK;
 800a0fc:	2300      	movs	r3, #0
}
 800a0fe:	4618      	mov	r0, r3
 800a100:	370c      	adds	r7, #12
 800a102:	46bd      	mov	sp, r7
 800a104:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a108:	4770      	bx	lr

0800a10a <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800a10a:	b480      	push	{r7}
 800a10c:	b087      	sub	sp, #28
 800a10e:	af00      	add	r7, sp, #0
 800a110:	60f8      	str	r0, [r7, #12]
 800a112:	60b9      	str	r1, [r7, #8]
 800a114:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a11c:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800a11e:	697b      	ldr	r3, [r7, #20]
 800a120:	2b00      	cmp	r3, #0
 800a122:	d101      	bne.n	800a128 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800a124:	2303      	movs	r3, #3
 800a126:	e008      	b.n	800a13a <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800a128:	697b      	ldr	r3, [r7, #20]
 800a12a:	68ba      	ldr	r2, [r7, #8]
 800a12c:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800a130:	697b      	ldr	r3, [r7, #20]
 800a132:	687a      	ldr	r2, [r7, #4]
 800a134:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800a138:	2300      	movs	r3, #0
}
 800a13a:	4618      	mov	r0, r3
 800a13c:	371c      	adds	r7, #28
 800a13e:	46bd      	mov	sp, r7
 800a140:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a144:	4770      	bx	lr

0800a146 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800a146:	b480      	push	{r7}
 800a148:	b085      	sub	sp, #20
 800a14a:	af00      	add	r7, sp, #0
 800a14c:	6078      	str	r0, [r7, #4]
 800a14e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a156:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d101      	bne.n	800a162 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800a15e:	2303      	movs	r3, #3
 800a160:	e004      	b.n	800a16c <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	683a      	ldr	r2, [r7, #0]
 800a166:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800a16a:	2300      	movs	r3, #0
}
 800a16c:	4618      	mov	r0, r3
 800a16e:	3714      	adds	r7, #20
 800a170:	46bd      	mov	sp, r7
 800a172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a176:	4770      	bx	lr

0800a178 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800a178:	b580      	push	{r7, lr}
 800a17a:	b084      	sub	sp, #16
 800a17c:	af00      	add	r7, sp, #0
 800a17e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a186:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800a188:	2301      	movs	r3, #1
 800a18a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a192:	2b00      	cmp	r3, #0
 800a194:	d101      	bne.n	800a19a <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a196:	2303      	movs	r3, #3
 800a198:	e01a      	b.n	800a1d0 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800a19a:	68bb      	ldr	r3, [r7, #8]
 800a19c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d114      	bne.n	800a1ce <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800a1a4:	68bb      	ldr	r3, [r7, #8]
 800a1a6:	2201      	movs	r2, #1
 800a1a8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800a1ac:	68bb      	ldr	r3, [r7, #8]
 800a1ae:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800a1b6:	68bb      	ldr	r3, [r7, #8]
 800a1b8:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800a1bc:	68bb      	ldr	r3, [r7, #8]
 800a1be:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800a1c2:	2181      	movs	r1, #129	@ 0x81
 800a1c4:	6878      	ldr	r0, [r7, #4]
 800a1c6:	f001 fd9e 	bl	800bd06 <USBD_LL_Transmit>

    ret = USBD_OK;
 800a1ca:	2300      	movs	r3, #0
 800a1cc:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800a1ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1d0:	4618      	mov	r0, r3
 800a1d2:	3710      	adds	r7, #16
 800a1d4:	46bd      	mov	sp, r7
 800a1d6:	bd80      	pop	{r7, pc}

0800a1d8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a1d8:	b580      	push	{r7, lr}
 800a1da:	b084      	sub	sp, #16
 800a1dc:	af00      	add	r7, sp, #0
 800a1de:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a1e6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d101      	bne.n	800a1f6 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800a1f2:	2303      	movs	r3, #3
 800a1f4:	e016      	b.n	800a224 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	7c1b      	ldrb	r3, [r3, #16]
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d109      	bne.n	800a212 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a204:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a208:	2101      	movs	r1, #1
 800a20a:	6878      	ldr	r0, [r7, #4]
 800a20c:	f001 fd9c 	bl	800bd48 <USBD_LL_PrepareReceive>
 800a210:	e007      	b.n	800a222 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a218:	2340      	movs	r3, #64	@ 0x40
 800a21a:	2101      	movs	r1, #1
 800a21c:	6878      	ldr	r0, [r7, #4]
 800a21e:	f001 fd93 	bl	800bd48 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a222:	2300      	movs	r3, #0
}
 800a224:	4618      	mov	r0, r3
 800a226:	3710      	adds	r7, #16
 800a228:	46bd      	mov	sp, r7
 800a22a:	bd80      	pop	{r7, pc}

0800a22c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a22c:	b580      	push	{r7, lr}
 800a22e:	b086      	sub	sp, #24
 800a230:	af00      	add	r7, sp, #0
 800a232:	60f8      	str	r0, [r7, #12]
 800a234:	60b9      	str	r1, [r7, #8]
 800a236:	4613      	mov	r3, r2
 800a238:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d101      	bne.n	800a244 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800a240:	2303      	movs	r3, #3
 800a242:	e01f      	b.n	800a284 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	2200      	movs	r2, #0
 800a248:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	2200      	movs	r2, #0
 800a250:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	2200      	movs	r2, #0
 800a258:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a25c:	68bb      	ldr	r3, [r7, #8]
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d003      	beq.n	800a26a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	68ba      	ldr	r2, [r7, #8]
 800a266:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	2201      	movs	r2, #1
 800a26e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	79fa      	ldrb	r2, [r7, #7]
 800a276:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a278:	68f8      	ldr	r0, [r7, #12]
 800a27a:	f001 fbfb 	bl	800ba74 <USBD_LL_Init>
 800a27e:	4603      	mov	r3, r0
 800a280:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a282:	7dfb      	ldrb	r3, [r7, #23]
}
 800a284:	4618      	mov	r0, r3
 800a286:	3718      	adds	r7, #24
 800a288:	46bd      	mov	sp, r7
 800a28a:	bd80      	pop	{r7, pc}

0800a28c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a28c:	b580      	push	{r7, lr}
 800a28e:	b084      	sub	sp, #16
 800a290:	af00      	add	r7, sp, #0
 800a292:	6078      	str	r0, [r7, #4]
 800a294:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a296:	2300      	movs	r3, #0
 800a298:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a29a:	683b      	ldr	r3, [r7, #0]
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d101      	bne.n	800a2a4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800a2a0:	2303      	movs	r3, #3
 800a2a2:	e016      	b.n	800a2d2 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	683a      	ldr	r2, [r7, #0]
 800a2a8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a2b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d00b      	beq.n	800a2d0 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a2be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a2c0:	f107 020e 	add.w	r2, r7, #14
 800a2c4:	4610      	mov	r0, r2
 800a2c6:	4798      	blx	r3
 800a2c8:	4602      	mov	r2, r0
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800a2d0:	2300      	movs	r3, #0
}
 800a2d2:	4618      	mov	r0, r3
 800a2d4:	3710      	adds	r7, #16
 800a2d6:	46bd      	mov	sp, r7
 800a2d8:	bd80      	pop	{r7, pc}

0800a2da <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a2da:	b580      	push	{r7, lr}
 800a2dc:	b082      	sub	sp, #8
 800a2de:	af00      	add	r7, sp, #0
 800a2e0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a2e2:	6878      	ldr	r0, [r7, #4]
 800a2e4:	f001 fc26 	bl	800bb34 <USBD_LL_Start>
 800a2e8:	4603      	mov	r3, r0
}
 800a2ea:	4618      	mov	r0, r3
 800a2ec:	3708      	adds	r7, #8
 800a2ee:	46bd      	mov	sp, r7
 800a2f0:	bd80      	pop	{r7, pc}

0800a2f2 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800a2f2:	b480      	push	{r7}
 800a2f4:	b083      	sub	sp, #12
 800a2f6:	af00      	add	r7, sp, #0
 800a2f8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a2fa:	2300      	movs	r3, #0
}
 800a2fc:	4618      	mov	r0, r3
 800a2fe:	370c      	adds	r7, #12
 800a300:	46bd      	mov	sp, r7
 800a302:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a306:	4770      	bx	lr

0800a308 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a308:	b580      	push	{r7, lr}
 800a30a:	b084      	sub	sp, #16
 800a30c:	af00      	add	r7, sp, #0
 800a30e:	6078      	str	r0, [r7, #4]
 800a310:	460b      	mov	r3, r1
 800a312:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800a314:	2303      	movs	r3, #3
 800a316:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d009      	beq.n	800a336 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	78fa      	ldrb	r2, [r7, #3]
 800a32c:	4611      	mov	r1, r2
 800a32e:	6878      	ldr	r0, [r7, #4]
 800a330:	4798      	blx	r3
 800a332:	4603      	mov	r3, r0
 800a334:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800a336:	7bfb      	ldrb	r3, [r7, #15]
}
 800a338:	4618      	mov	r0, r3
 800a33a:	3710      	adds	r7, #16
 800a33c:	46bd      	mov	sp, r7
 800a33e:	bd80      	pop	{r7, pc}

0800a340 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a340:	b580      	push	{r7, lr}
 800a342:	b082      	sub	sp, #8
 800a344:	af00      	add	r7, sp, #0
 800a346:	6078      	str	r0, [r7, #4]
 800a348:	460b      	mov	r3, r1
 800a34a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a352:	2b00      	cmp	r3, #0
 800a354:	d007      	beq.n	800a366 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a35c:	685b      	ldr	r3, [r3, #4]
 800a35e:	78fa      	ldrb	r2, [r7, #3]
 800a360:	4611      	mov	r1, r2
 800a362:	6878      	ldr	r0, [r7, #4]
 800a364:	4798      	blx	r3
  }

  return USBD_OK;
 800a366:	2300      	movs	r3, #0
}
 800a368:	4618      	mov	r0, r3
 800a36a:	3708      	adds	r7, #8
 800a36c:	46bd      	mov	sp, r7
 800a36e:	bd80      	pop	{r7, pc}

0800a370 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a370:	b580      	push	{r7, lr}
 800a372:	b084      	sub	sp, #16
 800a374:	af00      	add	r7, sp, #0
 800a376:	6078      	str	r0, [r7, #4]
 800a378:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a380:	6839      	ldr	r1, [r7, #0]
 800a382:	4618      	mov	r0, r3
 800a384:	f000 ff46 	bl	800b214 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	2201      	movs	r2, #1
 800a38c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800a396:	461a      	mov	r2, r3
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a3a4:	f003 031f 	and.w	r3, r3, #31
 800a3a8:	2b02      	cmp	r3, #2
 800a3aa:	d01a      	beq.n	800a3e2 <USBD_LL_SetupStage+0x72>
 800a3ac:	2b02      	cmp	r3, #2
 800a3ae:	d822      	bhi.n	800a3f6 <USBD_LL_SetupStage+0x86>
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d002      	beq.n	800a3ba <USBD_LL_SetupStage+0x4a>
 800a3b4:	2b01      	cmp	r3, #1
 800a3b6:	d00a      	beq.n	800a3ce <USBD_LL_SetupStage+0x5e>
 800a3b8:	e01d      	b.n	800a3f6 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a3c0:	4619      	mov	r1, r3
 800a3c2:	6878      	ldr	r0, [r7, #4]
 800a3c4:	f000 f9ee 	bl	800a7a4 <USBD_StdDevReq>
 800a3c8:	4603      	mov	r3, r0
 800a3ca:	73fb      	strb	r3, [r7, #15]
      break;
 800a3cc:	e020      	b.n	800a410 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a3d4:	4619      	mov	r1, r3
 800a3d6:	6878      	ldr	r0, [r7, #4]
 800a3d8:	f000 fa52 	bl	800a880 <USBD_StdItfReq>
 800a3dc:	4603      	mov	r3, r0
 800a3de:	73fb      	strb	r3, [r7, #15]
      break;
 800a3e0:	e016      	b.n	800a410 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a3e8:	4619      	mov	r1, r3
 800a3ea:	6878      	ldr	r0, [r7, #4]
 800a3ec:	f000 fa91 	bl	800a912 <USBD_StdEPReq>
 800a3f0:	4603      	mov	r3, r0
 800a3f2:	73fb      	strb	r3, [r7, #15]
      break;
 800a3f4:	e00c      	b.n	800a410 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a3fc:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a400:	b2db      	uxtb	r3, r3
 800a402:	4619      	mov	r1, r3
 800a404:	6878      	ldr	r0, [r7, #4]
 800a406:	f001 fbf5 	bl	800bbf4 <USBD_LL_StallEP>
 800a40a:	4603      	mov	r3, r0
 800a40c:	73fb      	strb	r3, [r7, #15]
      break;
 800a40e:	bf00      	nop
  }

  return ret;
 800a410:	7bfb      	ldrb	r3, [r7, #15]
}
 800a412:	4618      	mov	r0, r3
 800a414:	3710      	adds	r7, #16
 800a416:	46bd      	mov	sp, r7
 800a418:	bd80      	pop	{r7, pc}

0800a41a <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a41a:	b580      	push	{r7, lr}
 800a41c:	b086      	sub	sp, #24
 800a41e:	af00      	add	r7, sp, #0
 800a420:	60f8      	str	r0, [r7, #12]
 800a422:	460b      	mov	r3, r1
 800a424:	607a      	str	r2, [r7, #4]
 800a426:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800a428:	7afb      	ldrb	r3, [r7, #11]
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d138      	bne.n	800a4a0 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800a434:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a43c:	2b03      	cmp	r3, #3
 800a43e:	d14a      	bne.n	800a4d6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800a440:	693b      	ldr	r3, [r7, #16]
 800a442:	689a      	ldr	r2, [r3, #8]
 800a444:	693b      	ldr	r3, [r7, #16]
 800a446:	68db      	ldr	r3, [r3, #12]
 800a448:	429a      	cmp	r2, r3
 800a44a:	d913      	bls.n	800a474 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a44c:	693b      	ldr	r3, [r7, #16]
 800a44e:	689a      	ldr	r2, [r3, #8]
 800a450:	693b      	ldr	r3, [r7, #16]
 800a452:	68db      	ldr	r3, [r3, #12]
 800a454:	1ad2      	subs	r2, r2, r3
 800a456:	693b      	ldr	r3, [r7, #16]
 800a458:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a45a:	693b      	ldr	r3, [r7, #16]
 800a45c:	68da      	ldr	r2, [r3, #12]
 800a45e:	693b      	ldr	r3, [r7, #16]
 800a460:	689b      	ldr	r3, [r3, #8]
 800a462:	4293      	cmp	r3, r2
 800a464:	bf28      	it	cs
 800a466:	4613      	movcs	r3, r2
 800a468:	461a      	mov	r2, r3
 800a46a:	6879      	ldr	r1, [r7, #4]
 800a46c:	68f8      	ldr	r0, [r7, #12]
 800a46e:	f000 ffc5 	bl	800b3fc <USBD_CtlContinueRx>
 800a472:	e030      	b.n	800a4d6 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a47a:	b2db      	uxtb	r3, r3
 800a47c:	2b03      	cmp	r3, #3
 800a47e:	d10b      	bne.n	800a498 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a486:	691b      	ldr	r3, [r3, #16]
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d005      	beq.n	800a498 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a492:	691b      	ldr	r3, [r3, #16]
 800a494:	68f8      	ldr	r0, [r7, #12]
 800a496:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a498:	68f8      	ldr	r0, [r7, #12]
 800a49a:	f000 ffc0 	bl	800b41e <USBD_CtlSendStatus>
 800a49e:	e01a      	b.n	800a4d6 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a4a6:	b2db      	uxtb	r3, r3
 800a4a8:	2b03      	cmp	r3, #3
 800a4aa:	d114      	bne.n	800a4d6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a4b2:	699b      	ldr	r3, [r3, #24]
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d00e      	beq.n	800a4d6 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a4be:	699b      	ldr	r3, [r3, #24]
 800a4c0:	7afa      	ldrb	r2, [r7, #11]
 800a4c2:	4611      	mov	r1, r2
 800a4c4:	68f8      	ldr	r0, [r7, #12]
 800a4c6:	4798      	blx	r3
 800a4c8:	4603      	mov	r3, r0
 800a4ca:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800a4cc:	7dfb      	ldrb	r3, [r7, #23]
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d001      	beq.n	800a4d6 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800a4d2:	7dfb      	ldrb	r3, [r7, #23]
 800a4d4:	e000      	b.n	800a4d8 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800a4d6:	2300      	movs	r3, #0
}
 800a4d8:	4618      	mov	r0, r3
 800a4da:	3718      	adds	r7, #24
 800a4dc:	46bd      	mov	sp, r7
 800a4de:	bd80      	pop	{r7, pc}

0800a4e0 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a4e0:	b580      	push	{r7, lr}
 800a4e2:	b086      	sub	sp, #24
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	60f8      	str	r0, [r7, #12]
 800a4e8:	460b      	mov	r3, r1
 800a4ea:	607a      	str	r2, [r7, #4]
 800a4ec:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800a4ee:	7afb      	ldrb	r3, [r7, #11]
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d16b      	bne.n	800a5cc <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	3314      	adds	r3, #20
 800a4f8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a500:	2b02      	cmp	r3, #2
 800a502:	d156      	bne.n	800a5b2 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800a504:	693b      	ldr	r3, [r7, #16]
 800a506:	689a      	ldr	r2, [r3, #8]
 800a508:	693b      	ldr	r3, [r7, #16]
 800a50a:	68db      	ldr	r3, [r3, #12]
 800a50c:	429a      	cmp	r2, r3
 800a50e:	d914      	bls.n	800a53a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a510:	693b      	ldr	r3, [r7, #16]
 800a512:	689a      	ldr	r2, [r3, #8]
 800a514:	693b      	ldr	r3, [r7, #16]
 800a516:	68db      	ldr	r3, [r3, #12]
 800a518:	1ad2      	subs	r2, r2, r3
 800a51a:	693b      	ldr	r3, [r7, #16]
 800a51c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a51e:	693b      	ldr	r3, [r7, #16]
 800a520:	689b      	ldr	r3, [r3, #8]
 800a522:	461a      	mov	r2, r3
 800a524:	6879      	ldr	r1, [r7, #4]
 800a526:	68f8      	ldr	r0, [r7, #12]
 800a528:	f000 ff3a 	bl	800b3a0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a52c:	2300      	movs	r3, #0
 800a52e:	2200      	movs	r2, #0
 800a530:	2100      	movs	r1, #0
 800a532:	68f8      	ldr	r0, [r7, #12]
 800a534:	f001 fc08 	bl	800bd48 <USBD_LL_PrepareReceive>
 800a538:	e03b      	b.n	800a5b2 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a53a:	693b      	ldr	r3, [r7, #16]
 800a53c:	68da      	ldr	r2, [r3, #12]
 800a53e:	693b      	ldr	r3, [r7, #16]
 800a540:	689b      	ldr	r3, [r3, #8]
 800a542:	429a      	cmp	r2, r3
 800a544:	d11c      	bne.n	800a580 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a546:	693b      	ldr	r3, [r7, #16]
 800a548:	685a      	ldr	r2, [r3, #4]
 800a54a:	693b      	ldr	r3, [r7, #16]
 800a54c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a54e:	429a      	cmp	r2, r3
 800a550:	d316      	bcc.n	800a580 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a552:	693b      	ldr	r3, [r7, #16]
 800a554:	685a      	ldr	r2, [r3, #4]
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a55c:	429a      	cmp	r2, r3
 800a55e:	d20f      	bcs.n	800a580 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a560:	2200      	movs	r2, #0
 800a562:	2100      	movs	r1, #0
 800a564:	68f8      	ldr	r0, [r7, #12]
 800a566:	f000 ff1b 	bl	800b3a0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	2200      	movs	r2, #0
 800a56e:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a572:	2300      	movs	r3, #0
 800a574:	2200      	movs	r2, #0
 800a576:	2100      	movs	r1, #0
 800a578:	68f8      	ldr	r0, [r7, #12]
 800a57a:	f001 fbe5 	bl	800bd48 <USBD_LL_PrepareReceive>
 800a57e:	e018      	b.n	800a5b2 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a586:	b2db      	uxtb	r3, r3
 800a588:	2b03      	cmp	r3, #3
 800a58a:	d10b      	bne.n	800a5a4 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a592:	68db      	ldr	r3, [r3, #12]
 800a594:	2b00      	cmp	r3, #0
 800a596:	d005      	beq.n	800a5a4 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a59e:	68db      	ldr	r3, [r3, #12]
 800a5a0:	68f8      	ldr	r0, [r7, #12]
 800a5a2:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a5a4:	2180      	movs	r1, #128	@ 0x80
 800a5a6:	68f8      	ldr	r0, [r7, #12]
 800a5a8:	f001 fb24 	bl	800bbf4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a5ac:	68f8      	ldr	r0, [r7, #12]
 800a5ae:	f000 ff49 	bl	800b444 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800a5b8:	2b01      	cmp	r3, #1
 800a5ba:	d122      	bne.n	800a602 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800a5bc:	68f8      	ldr	r0, [r7, #12]
 800a5be:	f7ff fe98 	bl	800a2f2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	2200      	movs	r2, #0
 800a5c6:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800a5ca:	e01a      	b.n	800a602 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a5d2:	b2db      	uxtb	r3, r3
 800a5d4:	2b03      	cmp	r3, #3
 800a5d6:	d114      	bne.n	800a602 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a5de:	695b      	ldr	r3, [r3, #20]
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d00e      	beq.n	800a602 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a5ea:	695b      	ldr	r3, [r3, #20]
 800a5ec:	7afa      	ldrb	r2, [r7, #11]
 800a5ee:	4611      	mov	r1, r2
 800a5f0:	68f8      	ldr	r0, [r7, #12]
 800a5f2:	4798      	blx	r3
 800a5f4:	4603      	mov	r3, r0
 800a5f6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800a5f8:	7dfb      	ldrb	r3, [r7, #23]
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d001      	beq.n	800a602 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800a5fe:	7dfb      	ldrb	r3, [r7, #23]
 800a600:	e000      	b.n	800a604 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800a602:	2300      	movs	r3, #0
}
 800a604:	4618      	mov	r0, r3
 800a606:	3718      	adds	r7, #24
 800a608:	46bd      	mov	sp, r7
 800a60a:	bd80      	pop	{r7, pc}

0800a60c <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a60c:	b580      	push	{r7, lr}
 800a60e:	b082      	sub	sp, #8
 800a610:	af00      	add	r7, sp, #0
 800a612:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	2201      	movs	r2, #1
 800a618:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	2200      	movs	r2, #0
 800a620:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	2200      	movs	r2, #0
 800a628:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	2200      	movs	r2, #0
 800a62e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d101      	bne.n	800a640 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800a63c:	2303      	movs	r3, #3
 800a63e:	e02f      	b.n	800a6a0 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a646:	2b00      	cmp	r3, #0
 800a648:	d00f      	beq.n	800a66a <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a650:	685b      	ldr	r3, [r3, #4]
 800a652:	2b00      	cmp	r3, #0
 800a654:	d009      	beq.n	800a66a <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a65c:	685b      	ldr	r3, [r3, #4]
 800a65e:	687a      	ldr	r2, [r7, #4]
 800a660:	6852      	ldr	r2, [r2, #4]
 800a662:	b2d2      	uxtb	r2, r2
 800a664:	4611      	mov	r1, r2
 800a666:	6878      	ldr	r0, [r7, #4]
 800a668:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a66a:	2340      	movs	r3, #64	@ 0x40
 800a66c:	2200      	movs	r2, #0
 800a66e:	2100      	movs	r1, #0
 800a670:	6878      	ldr	r0, [r7, #4]
 800a672:	f001 fa7a 	bl	800bb6a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	2201      	movs	r2, #1
 800a67a:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	2240      	movs	r2, #64	@ 0x40
 800a682:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a686:	2340      	movs	r3, #64	@ 0x40
 800a688:	2200      	movs	r2, #0
 800a68a:	2180      	movs	r1, #128	@ 0x80
 800a68c:	6878      	ldr	r0, [r7, #4]
 800a68e:	f001 fa6c 	bl	800bb6a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	2201      	movs	r2, #1
 800a696:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	2240      	movs	r2, #64	@ 0x40
 800a69c:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800a69e:	2300      	movs	r3, #0
}
 800a6a0:	4618      	mov	r0, r3
 800a6a2:	3708      	adds	r7, #8
 800a6a4:	46bd      	mov	sp, r7
 800a6a6:	bd80      	pop	{r7, pc}

0800a6a8 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a6a8:	b480      	push	{r7}
 800a6aa:	b083      	sub	sp, #12
 800a6ac:	af00      	add	r7, sp, #0
 800a6ae:	6078      	str	r0, [r7, #4]
 800a6b0:	460b      	mov	r3, r1
 800a6b2:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	78fa      	ldrb	r2, [r7, #3]
 800a6b8:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a6ba:	2300      	movs	r3, #0
}
 800a6bc:	4618      	mov	r0, r3
 800a6be:	370c      	adds	r7, #12
 800a6c0:	46bd      	mov	sp, r7
 800a6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c6:	4770      	bx	lr

0800a6c8 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a6c8:	b480      	push	{r7}
 800a6ca:	b083      	sub	sp, #12
 800a6cc:	af00      	add	r7, sp, #0
 800a6ce:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a6d6:	b2da      	uxtb	r2, r3
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	2204      	movs	r2, #4
 800a6e2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800a6e6:	2300      	movs	r3, #0
}
 800a6e8:	4618      	mov	r0, r3
 800a6ea:	370c      	adds	r7, #12
 800a6ec:	46bd      	mov	sp, r7
 800a6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f2:	4770      	bx	lr

0800a6f4 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a6f4:	b480      	push	{r7}
 800a6f6:	b083      	sub	sp, #12
 800a6f8:	af00      	add	r7, sp, #0
 800a6fa:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a702:	b2db      	uxtb	r3, r3
 800a704:	2b04      	cmp	r3, #4
 800a706:	d106      	bne.n	800a716 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800a70e:	b2da      	uxtb	r2, r3
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800a716:	2300      	movs	r3, #0
}
 800a718:	4618      	mov	r0, r3
 800a71a:	370c      	adds	r7, #12
 800a71c:	46bd      	mov	sp, r7
 800a71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a722:	4770      	bx	lr

0800a724 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a724:	b580      	push	{r7, lr}
 800a726:	b082      	sub	sp, #8
 800a728:	af00      	add	r7, sp, #0
 800a72a:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a732:	2b00      	cmp	r3, #0
 800a734:	d101      	bne.n	800a73a <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800a736:	2303      	movs	r3, #3
 800a738:	e012      	b.n	800a760 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a740:	b2db      	uxtb	r3, r3
 800a742:	2b03      	cmp	r3, #3
 800a744:	d10b      	bne.n	800a75e <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a74c:	69db      	ldr	r3, [r3, #28]
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d005      	beq.n	800a75e <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a758:	69db      	ldr	r3, [r3, #28]
 800a75a:	6878      	ldr	r0, [r7, #4]
 800a75c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a75e:	2300      	movs	r3, #0
}
 800a760:	4618      	mov	r0, r3
 800a762:	3708      	adds	r7, #8
 800a764:	46bd      	mov	sp, r7
 800a766:	bd80      	pop	{r7, pc}

0800a768 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a768:	b480      	push	{r7}
 800a76a:	b087      	sub	sp, #28
 800a76c:	af00      	add	r7, sp, #0
 800a76e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a774:	697b      	ldr	r3, [r7, #20]
 800a776:	781b      	ldrb	r3, [r3, #0]
 800a778:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a77a:	697b      	ldr	r3, [r7, #20]
 800a77c:	3301      	adds	r3, #1
 800a77e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a780:	697b      	ldr	r3, [r7, #20]
 800a782:	781b      	ldrb	r3, [r3, #0]
 800a784:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a786:	8a3b      	ldrh	r3, [r7, #16]
 800a788:	021b      	lsls	r3, r3, #8
 800a78a:	b21a      	sxth	r2, r3
 800a78c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a790:	4313      	orrs	r3, r2
 800a792:	b21b      	sxth	r3, r3
 800a794:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a796:	89fb      	ldrh	r3, [r7, #14]
}
 800a798:	4618      	mov	r0, r3
 800a79a:	371c      	adds	r7, #28
 800a79c:	46bd      	mov	sp, r7
 800a79e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a2:	4770      	bx	lr

0800a7a4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a7a4:	b580      	push	{r7, lr}
 800a7a6:	b084      	sub	sp, #16
 800a7a8:	af00      	add	r7, sp, #0
 800a7aa:	6078      	str	r0, [r7, #4]
 800a7ac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a7ae:	2300      	movs	r3, #0
 800a7b0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a7b2:	683b      	ldr	r3, [r7, #0]
 800a7b4:	781b      	ldrb	r3, [r3, #0]
 800a7b6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a7ba:	2b40      	cmp	r3, #64	@ 0x40
 800a7bc:	d005      	beq.n	800a7ca <USBD_StdDevReq+0x26>
 800a7be:	2b40      	cmp	r3, #64	@ 0x40
 800a7c0:	d853      	bhi.n	800a86a <USBD_StdDevReq+0xc6>
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d00b      	beq.n	800a7de <USBD_StdDevReq+0x3a>
 800a7c6:	2b20      	cmp	r3, #32
 800a7c8:	d14f      	bne.n	800a86a <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a7d0:	689b      	ldr	r3, [r3, #8]
 800a7d2:	6839      	ldr	r1, [r7, #0]
 800a7d4:	6878      	ldr	r0, [r7, #4]
 800a7d6:	4798      	blx	r3
 800a7d8:	4603      	mov	r3, r0
 800a7da:	73fb      	strb	r3, [r7, #15]
      break;
 800a7dc:	e04a      	b.n	800a874 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a7de:	683b      	ldr	r3, [r7, #0]
 800a7e0:	785b      	ldrb	r3, [r3, #1]
 800a7e2:	2b09      	cmp	r3, #9
 800a7e4:	d83b      	bhi.n	800a85e <USBD_StdDevReq+0xba>
 800a7e6:	a201      	add	r2, pc, #4	@ (adr r2, 800a7ec <USBD_StdDevReq+0x48>)
 800a7e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7ec:	0800a841 	.word	0x0800a841
 800a7f0:	0800a855 	.word	0x0800a855
 800a7f4:	0800a85f 	.word	0x0800a85f
 800a7f8:	0800a84b 	.word	0x0800a84b
 800a7fc:	0800a85f 	.word	0x0800a85f
 800a800:	0800a81f 	.word	0x0800a81f
 800a804:	0800a815 	.word	0x0800a815
 800a808:	0800a85f 	.word	0x0800a85f
 800a80c:	0800a837 	.word	0x0800a837
 800a810:	0800a829 	.word	0x0800a829
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a814:	6839      	ldr	r1, [r7, #0]
 800a816:	6878      	ldr	r0, [r7, #4]
 800a818:	f000 f9de 	bl	800abd8 <USBD_GetDescriptor>
          break;
 800a81c:	e024      	b.n	800a868 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a81e:	6839      	ldr	r1, [r7, #0]
 800a820:	6878      	ldr	r0, [r7, #4]
 800a822:	f000 fb6d 	bl	800af00 <USBD_SetAddress>
          break;
 800a826:	e01f      	b.n	800a868 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800a828:	6839      	ldr	r1, [r7, #0]
 800a82a:	6878      	ldr	r0, [r7, #4]
 800a82c:	f000 fbac 	bl	800af88 <USBD_SetConfig>
 800a830:	4603      	mov	r3, r0
 800a832:	73fb      	strb	r3, [r7, #15]
          break;
 800a834:	e018      	b.n	800a868 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a836:	6839      	ldr	r1, [r7, #0]
 800a838:	6878      	ldr	r0, [r7, #4]
 800a83a:	f000 fc4b 	bl	800b0d4 <USBD_GetConfig>
          break;
 800a83e:	e013      	b.n	800a868 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a840:	6839      	ldr	r1, [r7, #0]
 800a842:	6878      	ldr	r0, [r7, #4]
 800a844:	f000 fc7c 	bl	800b140 <USBD_GetStatus>
          break;
 800a848:	e00e      	b.n	800a868 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a84a:	6839      	ldr	r1, [r7, #0]
 800a84c:	6878      	ldr	r0, [r7, #4]
 800a84e:	f000 fcab 	bl	800b1a8 <USBD_SetFeature>
          break;
 800a852:	e009      	b.n	800a868 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a854:	6839      	ldr	r1, [r7, #0]
 800a856:	6878      	ldr	r0, [r7, #4]
 800a858:	f000 fcba 	bl	800b1d0 <USBD_ClrFeature>
          break;
 800a85c:	e004      	b.n	800a868 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800a85e:	6839      	ldr	r1, [r7, #0]
 800a860:	6878      	ldr	r0, [r7, #4]
 800a862:	f000 fd11 	bl	800b288 <USBD_CtlError>
          break;
 800a866:	bf00      	nop
      }
      break;
 800a868:	e004      	b.n	800a874 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800a86a:	6839      	ldr	r1, [r7, #0]
 800a86c:	6878      	ldr	r0, [r7, #4]
 800a86e:	f000 fd0b 	bl	800b288 <USBD_CtlError>
      break;
 800a872:	bf00      	nop
  }

  return ret;
 800a874:	7bfb      	ldrb	r3, [r7, #15]
}
 800a876:	4618      	mov	r0, r3
 800a878:	3710      	adds	r7, #16
 800a87a:	46bd      	mov	sp, r7
 800a87c:	bd80      	pop	{r7, pc}
 800a87e:	bf00      	nop

0800a880 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a880:	b580      	push	{r7, lr}
 800a882:	b084      	sub	sp, #16
 800a884:	af00      	add	r7, sp, #0
 800a886:	6078      	str	r0, [r7, #4]
 800a888:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a88a:	2300      	movs	r3, #0
 800a88c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a88e:	683b      	ldr	r3, [r7, #0]
 800a890:	781b      	ldrb	r3, [r3, #0]
 800a892:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a896:	2b40      	cmp	r3, #64	@ 0x40
 800a898:	d005      	beq.n	800a8a6 <USBD_StdItfReq+0x26>
 800a89a:	2b40      	cmp	r3, #64	@ 0x40
 800a89c:	d82f      	bhi.n	800a8fe <USBD_StdItfReq+0x7e>
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d001      	beq.n	800a8a6 <USBD_StdItfReq+0x26>
 800a8a2:	2b20      	cmp	r3, #32
 800a8a4:	d12b      	bne.n	800a8fe <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a8ac:	b2db      	uxtb	r3, r3
 800a8ae:	3b01      	subs	r3, #1
 800a8b0:	2b02      	cmp	r3, #2
 800a8b2:	d81d      	bhi.n	800a8f0 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a8b4:	683b      	ldr	r3, [r7, #0]
 800a8b6:	889b      	ldrh	r3, [r3, #4]
 800a8b8:	b2db      	uxtb	r3, r3
 800a8ba:	2b01      	cmp	r3, #1
 800a8bc:	d813      	bhi.n	800a8e6 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a8c4:	689b      	ldr	r3, [r3, #8]
 800a8c6:	6839      	ldr	r1, [r7, #0]
 800a8c8:	6878      	ldr	r0, [r7, #4]
 800a8ca:	4798      	blx	r3
 800a8cc:	4603      	mov	r3, r0
 800a8ce:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a8d0:	683b      	ldr	r3, [r7, #0]
 800a8d2:	88db      	ldrh	r3, [r3, #6]
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d110      	bne.n	800a8fa <USBD_StdItfReq+0x7a>
 800a8d8:	7bfb      	ldrb	r3, [r7, #15]
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d10d      	bne.n	800a8fa <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800a8de:	6878      	ldr	r0, [r7, #4]
 800a8e0:	f000 fd9d 	bl	800b41e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a8e4:	e009      	b.n	800a8fa <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800a8e6:	6839      	ldr	r1, [r7, #0]
 800a8e8:	6878      	ldr	r0, [r7, #4]
 800a8ea:	f000 fccd 	bl	800b288 <USBD_CtlError>
          break;
 800a8ee:	e004      	b.n	800a8fa <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800a8f0:	6839      	ldr	r1, [r7, #0]
 800a8f2:	6878      	ldr	r0, [r7, #4]
 800a8f4:	f000 fcc8 	bl	800b288 <USBD_CtlError>
          break;
 800a8f8:	e000      	b.n	800a8fc <USBD_StdItfReq+0x7c>
          break;
 800a8fa:	bf00      	nop
      }
      break;
 800a8fc:	e004      	b.n	800a908 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800a8fe:	6839      	ldr	r1, [r7, #0]
 800a900:	6878      	ldr	r0, [r7, #4]
 800a902:	f000 fcc1 	bl	800b288 <USBD_CtlError>
      break;
 800a906:	bf00      	nop
  }

  return ret;
 800a908:	7bfb      	ldrb	r3, [r7, #15]
}
 800a90a:	4618      	mov	r0, r3
 800a90c:	3710      	adds	r7, #16
 800a90e:	46bd      	mov	sp, r7
 800a910:	bd80      	pop	{r7, pc}

0800a912 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a912:	b580      	push	{r7, lr}
 800a914:	b084      	sub	sp, #16
 800a916:	af00      	add	r7, sp, #0
 800a918:	6078      	str	r0, [r7, #4]
 800a91a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800a91c:	2300      	movs	r3, #0
 800a91e:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800a920:	683b      	ldr	r3, [r7, #0]
 800a922:	889b      	ldrh	r3, [r3, #4]
 800a924:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a926:	683b      	ldr	r3, [r7, #0]
 800a928:	781b      	ldrb	r3, [r3, #0]
 800a92a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a92e:	2b40      	cmp	r3, #64	@ 0x40
 800a930:	d007      	beq.n	800a942 <USBD_StdEPReq+0x30>
 800a932:	2b40      	cmp	r3, #64	@ 0x40
 800a934:	f200 8145 	bhi.w	800abc2 <USBD_StdEPReq+0x2b0>
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d00c      	beq.n	800a956 <USBD_StdEPReq+0x44>
 800a93c:	2b20      	cmp	r3, #32
 800a93e:	f040 8140 	bne.w	800abc2 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a948:	689b      	ldr	r3, [r3, #8]
 800a94a:	6839      	ldr	r1, [r7, #0]
 800a94c:	6878      	ldr	r0, [r7, #4]
 800a94e:	4798      	blx	r3
 800a950:	4603      	mov	r3, r0
 800a952:	73fb      	strb	r3, [r7, #15]
      break;
 800a954:	e13a      	b.n	800abcc <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a956:	683b      	ldr	r3, [r7, #0]
 800a958:	785b      	ldrb	r3, [r3, #1]
 800a95a:	2b03      	cmp	r3, #3
 800a95c:	d007      	beq.n	800a96e <USBD_StdEPReq+0x5c>
 800a95e:	2b03      	cmp	r3, #3
 800a960:	f300 8129 	bgt.w	800abb6 <USBD_StdEPReq+0x2a4>
 800a964:	2b00      	cmp	r3, #0
 800a966:	d07f      	beq.n	800aa68 <USBD_StdEPReq+0x156>
 800a968:	2b01      	cmp	r3, #1
 800a96a:	d03c      	beq.n	800a9e6 <USBD_StdEPReq+0xd4>
 800a96c:	e123      	b.n	800abb6 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a974:	b2db      	uxtb	r3, r3
 800a976:	2b02      	cmp	r3, #2
 800a978:	d002      	beq.n	800a980 <USBD_StdEPReq+0x6e>
 800a97a:	2b03      	cmp	r3, #3
 800a97c:	d016      	beq.n	800a9ac <USBD_StdEPReq+0x9a>
 800a97e:	e02c      	b.n	800a9da <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a980:	7bbb      	ldrb	r3, [r7, #14]
 800a982:	2b00      	cmp	r3, #0
 800a984:	d00d      	beq.n	800a9a2 <USBD_StdEPReq+0x90>
 800a986:	7bbb      	ldrb	r3, [r7, #14]
 800a988:	2b80      	cmp	r3, #128	@ 0x80
 800a98a:	d00a      	beq.n	800a9a2 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a98c:	7bbb      	ldrb	r3, [r7, #14]
 800a98e:	4619      	mov	r1, r3
 800a990:	6878      	ldr	r0, [r7, #4]
 800a992:	f001 f92f 	bl	800bbf4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a996:	2180      	movs	r1, #128	@ 0x80
 800a998:	6878      	ldr	r0, [r7, #4]
 800a99a:	f001 f92b 	bl	800bbf4 <USBD_LL_StallEP>
 800a99e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a9a0:	e020      	b.n	800a9e4 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800a9a2:	6839      	ldr	r1, [r7, #0]
 800a9a4:	6878      	ldr	r0, [r7, #4]
 800a9a6:	f000 fc6f 	bl	800b288 <USBD_CtlError>
              break;
 800a9aa:	e01b      	b.n	800a9e4 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a9ac:	683b      	ldr	r3, [r7, #0]
 800a9ae:	885b      	ldrh	r3, [r3, #2]
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d10e      	bne.n	800a9d2 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a9b4:	7bbb      	ldrb	r3, [r7, #14]
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d00b      	beq.n	800a9d2 <USBD_StdEPReq+0xc0>
 800a9ba:	7bbb      	ldrb	r3, [r7, #14]
 800a9bc:	2b80      	cmp	r3, #128	@ 0x80
 800a9be:	d008      	beq.n	800a9d2 <USBD_StdEPReq+0xc0>
 800a9c0:	683b      	ldr	r3, [r7, #0]
 800a9c2:	88db      	ldrh	r3, [r3, #6]
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d104      	bne.n	800a9d2 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800a9c8:	7bbb      	ldrb	r3, [r7, #14]
 800a9ca:	4619      	mov	r1, r3
 800a9cc:	6878      	ldr	r0, [r7, #4]
 800a9ce:	f001 f911 	bl	800bbf4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800a9d2:	6878      	ldr	r0, [r7, #4]
 800a9d4:	f000 fd23 	bl	800b41e <USBD_CtlSendStatus>

              break;
 800a9d8:	e004      	b.n	800a9e4 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800a9da:	6839      	ldr	r1, [r7, #0]
 800a9dc:	6878      	ldr	r0, [r7, #4]
 800a9de:	f000 fc53 	bl	800b288 <USBD_CtlError>
              break;
 800a9e2:	bf00      	nop
          }
          break;
 800a9e4:	e0ec      	b.n	800abc0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a9ec:	b2db      	uxtb	r3, r3
 800a9ee:	2b02      	cmp	r3, #2
 800a9f0:	d002      	beq.n	800a9f8 <USBD_StdEPReq+0xe6>
 800a9f2:	2b03      	cmp	r3, #3
 800a9f4:	d016      	beq.n	800aa24 <USBD_StdEPReq+0x112>
 800a9f6:	e030      	b.n	800aa5a <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a9f8:	7bbb      	ldrb	r3, [r7, #14]
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d00d      	beq.n	800aa1a <USBD_StdEPReq+0x108>
 800a9fe:	7bbb      	ldrb	r3, [r7, #14]
 800aa00:	2b80      	cmp	r3, #128	@ 0x80
 800aa02:	d00a      	beq.n	800aa1a <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800aa04:	7bbb      	ldrb	r3, [r7, #14]
 800aa06:	4619      	mov	r1, r3
 800aa08:	6878      	ldr	r0, [r7, #4]
 800aa0a:	f001 f8f3 	bl	800bbf4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800aa0e:	2180      	movs	r1, #128	@ 0x80
 800aa10:	6878      	ldr	r0, [r7, #4]
 800aa12:	f001 f8ef 	bl	800bbf4 <USBD_LL_StallEP>
 800aa16:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800aa18:	e025      	b.n	800aa66 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800aa1a:	6839      	ldr	r1, [r7, #0]
 800aa1c:	6878      	ldr	r0, [r7, #4]
 800aa1e:	f000 fc33 	bl	800b288 <USBD_CtlError>
              break;
 800aa22:	e020      	b.n	800aa66 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800aa24:	683b      	ldr	r3, [r7, #0]
 800aa26:	885b      	ldrh	r3, [r3, #2]
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d11b      	bne.n	800aa64 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800aa2c:	7bbb      	ldrb	r3, [r7, #14]
 800aa2e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d004      	beq.n	800aa40 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800aa36:	7bbb      	ldrb	r3, [r7, #14]
 800aa38:	4619      	mov	r1, r3
 800aa3a:	6878      	ldr	r0, [r7, #4]
 800aa3c:	f001 f8f9 	bl	800bc32 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800aa40:	6878      	ldr	r0, [r7, #4]
 800aa42:	f000 fcec 	bl	800b41e <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aa4c:	689b      	ldr	r3, [r3, #8]
 800aa4e:	6839      	ldr	r1, [r7, #0]
 800aa50:	6878      	ldr	r0, [r7, #4]
 800aa52:	4798      	blx	r3
 800aa54:	4603      	mov	r3, r0
 800aa56:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800aa58:	e004      	b.n	800aa64 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800aa5a:	6839      	ldr	r1, [r7, #0]
 800aa5c:	6878      	ldr	r0, [r7, #4]
 800aa5e:	f000 fc13 	bl	800b288 <USBD_CtlError>
              break;
 800aa62:	e000      	b.n	800aa66 <USBD_StdEPReq+0x154>
              break;
 800aa64:	bf00      	nop
          }
          break;
 800aa66:	e0ab      	b.n	800abc0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aa6e:	b2db      	uxtb	r3, r3
 800aa70:	2b02      	cmp	r3, #2
 800aa72:	d002      	beq.n	800aa7a <USBD_StdEPReq+0x168>
 800aa74:	2b03      	cmp	r3, #3
 800aa76:	d032      	beq.n	800aade <USBD_StdEPReq+0x1cc>
 800aa78:	e097      	b.n	800abaa <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800aa7a:	7bbb      	ldrb	r3, [r7, #14]
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d007      	beq.n	800aa90 <USBD_StdEPReq+0x17e>
 800aa80:	7bbb      	ldrb	r3, [r7, #14]
 800aa82:	2b80      	cmp	r3, #128	@ 0x80
 800aa84:	d004      	beq.n	800aa90 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800aa86:	6839      	ldr	r1, [r7, #0]
 800aa88:	6878      	ldr	r0, [r7, #4]
 800aa8a:	f000 fbfd 	bl	800b288 <USBD_CtlError>
                break;
 800aa8e:	e091      	b.n	800abb4 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aa90:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	da0b      	bge.n	800aab0 <USBD_StdEPReq+0x19e>
 800aa98:	7bbb      	ldrb	r3, [r7, #14]
 800aa9a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800aa9e:	4613      	mov	r3, r2
 800aaa0:	009b      	lsls	r3, r3, #2
 800aaa2:	4413      	add	r3, r2
 800aaa4:	009b      	lsls	r3, r3, #2
 800aaa6:	3310      	adds	r3, #16
 800aaa8:	687a      	ldr	r2, [r7, #4]
 800aaaa:	4413      	add	r3, r2
 800aaac:	3304      	adds	r3, #4
 800aaae:	e00b      	b.n	800aac8 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800aab0:	7bbb      	ldrb	r3, [r7, #14]
 800aab2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aab6:	4613      	mov	r3, r2
 800aab8:	009b      	lsls	r3, r3, #2
 800aaba:	4413      	add	r3, r2
 800aabc:	009b      	lsls	r3, r3, #2
 800aabe:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800aac2:	687a      	ldr	r2, [r7, #4]
 800aac4:	4413      	add	r3, r2
 800aac6:	3304      	adds	r3, #4
 800aac8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800aaca:	68bb      	ldr	r3, [r7, #8]
 800aacc:	2200      	movs	r2, #0
 800aace:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800aad0:	68bb      	ldr	r3, [r7, #8]
 800aad2:	2202      	movs	r2, #2
 800aad4:	4619      	mov	r1, r3
 800aad6:	6878      	ldr	r0, [r7, #4]
 800aad8:	f000 fc47 	bl	800b36a <USBD_CtlSendData>
              break;
 800aadc:	e06a      	b.n	800abb4 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800aade:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	da11      	bge.n	800ab0a <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800aae6:	7bbb      	ldrb	r3, [r7, #14]
 800aae8:	f003 020f 	and.w	r2, r3, #15
 800aaec:	6879      	ldr	r1, [r7, #4]
 800aaee:	4613      	mov	r3, r2
 800aaf0:	009b      	lsls	r3, r3, #2
 800aaf2:	4413      	add	r3, r2
 800aaf4:	009b      	lsls	r3, r3, #2
 800aaf6:	440b      	add	r3, r1
 800aaf8:	3324      	adds	r3, #36	@ 0x24
 800aafa:	881b      	ldrh	r3, [r3, #0]
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d117      	bne.n	800ab30 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800ab00:	6839      	ldr	r1, [r7, #0]
 800ab02:	6878      	ldr	r0, [r7, #4]
 800ab04:	f000 fbc0 	bl	800b288 <USBD_CtlError>
                  break;
 800ab08:	e054      	b.n	800abb4 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800ab0a:	7bbb      	ldrb	r3, [r7, #14]
 800ab0c:	f003 020f 	and.w	r2, r3, #15
 800ab10:	6879      	ldr	r1, [r7, #4]
 800ab12:	4613      	mov	r3, r2
 800ab14:	009b      	lsls	r3, r3, #2
 800ab16:	4413      	add	r3, r2
 800ab18:	009b      	lsls	r3, r3, #2
 800ab1a:	440b      	add	r3, r1
 800ab1c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800ab20:	881b      	ldrh	r3, [r3, #0]
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d104      	bne.n	800ab30 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800ab26:	6839      	ldr	r1, [r7, #0]
 800ab28:	6878      	ldr	r0, [r7, #4]
 800ab2a:	f000 fbad 	bl	800b288 <USBD_CtlError>
                  break;
 800ab2e:	e041      	b.n	800abb4 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ab30:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	da0b      	bge.n	800ab50 <USBD_StdEPReq+0x23e>
 800ab38:	7bbb      	ldrb	r3, [r7, #14]
 800ab3a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ab3e:	4613      	mov	r3, r2
 800ab40:	009b      	lsls	r3, r3, #2
 800ab42:	4413      	add	r3, r2
 800ab44:	009b      	lsls	r3, r3, #2
 800ab46:	3310      	adds	r3, #16
 800ab48:	687a      	ldr	r2, [r7, #4]
 800ab4a:	4413      	add	r3, r2
 800ab4c:	3304      	adds	r3, #4
 800ab4e:	e00b      	b.n	800ab68 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ab50:	7bbb      	ldrb	r3, [r7, #14]
 800ab52:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ab56:	4613      	mov	r3, r2
 800ab58:	009b      	lsls	r3, r3, #2
 800ab5a:	4413      	add	r3, r2
 800ab5c:	009b      	lsls	r3, r3, #2
 800ab5e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800ab62:	687a      	ldr	r2, [r7, #4]
 800ab64:	4413      	add	r3, r2
 800ab66:	3304      	adds	r3, #4
 800ab68:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800ab6a:	7bbb      	ldrb	r3, [r7, #14]
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d002      	beq.n	800ab76 <USBD_StdEPReq+0x264>
 800ab70:	7bbb      	ldrb	r3, [r7, #14]
 800ab72:	2b80      	cmp	r3, #128	@ 0x80
 800ab74:	d103      	bne.n	800ab7e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800ab76:	68bb      	ldr	r3, [r7, #8]
 800ab78:	2200      	movs	r2, #0
 800ab7a:	601a      	str	r2, [r3, #0]
 800ab7c:	e00e      	b.n	800ab9c <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800ab7e:	7bbb      	ldrb	r3, [r7, #14]
 800ab80:	4619      	mov	r1, r3
 800ab82:	6878      	ldr	r0, [r7, #4]
 800ab84:	f001 f874 	bl	800bc70 <USBD_LL_IsStallEP>
 800ab88:	4603      	mov	r3, r0
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d003      	beq.n	800ab96 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800ab8e:	68bb      	ldr	r3, [r7, #8]
 800ab90:	2201      	movs	r2, #1
 800ab92:	601a      	str	r2, [r3, #0]
 800ab94:	e002      	b.n	800ab9c <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800ab96:	68bb      	ldr	r3, [r7, #8]
 800ab98:	2200      	movs	r2, #0
 800ab9a:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ab9c:	68bb      	ldr	r3, [r7, #8]
 800ab9e:	2202      	movs	r2, #2
 800aba0:	4619      	mov	r1, r3
 800aba2:	6878      	ldr	r0, [r7, #4]
 800aba4:	f000 fbe1 	bl	800b36a <USBD_CtlSendData>
              break;
 800aba8:	e004      	b.n	800abb4 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800abaa:	6839      	ldr	r1, [r7, #0]
 800abac:	6878      	ldr	r0, [r7, #4]
 800abae:	f000 fb6b 	bl	800b288 <USBD_CtlError>
              break;
 800abb2:	bf00      	nop
          }
          break;
 800abb4:	e004      	b.n	800abc0 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800abb6:	6839      	ldr	r1, [r7, #0]
 800abb8:	6878      	ldr	r0, [r7, #4]
 800abba:	f000 fb65 	bl	800b288 <USBD_CtlError>
          break;
 800abbe:	bf00      	nop
      }
      break;
 800abc0:	e004      	b.n	800abcc <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800abc2:	6839      	ldr	r1, [r7, #0]
 800abc4:	6878      	ldr	r0, [r7, #4]
 800abc6:	f000 fb5f 	bl	800b288 <USBD_CtlError>
      break;
 800abca:	bf00      	nop
  }

  return ret;
 800abcc:	7bfb      	ldrb	r3, [r7, #15]
}
 800abce:	4618      	mov	r0, r3
 800abd0:	3710      	adds	r7, #16
 800abd2:	46bd      	mov	sp, r7
 800abd4:	bd80      	pop	{r7, pc}
	...

0800abd8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800abd8:	b580      	push	{r7, lr}
 800abda:	b084      	sub	sp, #16
 800abdc:	af00      	add	r7, sp, #0
 800abde:	6078      	str	r0, [r7, #4]
 800abe0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800abe2:	2300      	movs	r3, #0
 800abe4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800abe6:	2300      	movs	r3, #0
 800abe8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800abea:	2300      	movs	r3, #0
 800abec:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800abee:	683b      	ldr	r3, [r7, #0]
 800abf0:	885b      	ldrh	r3, [r3, #2]
 800abf2:	0a1b      	lsrs	r3, r3, #8
 800abf4:	b29b      	uxth	r3, r3
 800abf6:	3b01      	subs	r3, #1
 800abf8:	2b0e      	cmp	r3, #14
 800abfa:	f200 8152 	bhi.w	800aea2 <USBD_GetDescriptor+0x2ca>
 800abfe:	a201      	add	r2, pc, #4	@ (adr r2, 800ac04 <USBD_GetDescriptor+0x2c>)
 800ac00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac04:	0800ac75 	.word	0x0800ac75
 800ac08:	0800ac8d 	.word	0x0800ac8d
 800ac0c:	0800accd 	.word	0x0800accd
 800ac10:	0800aea3 	.word	0x0800aea3
 800ac14:	0800aea3 	.word	0x0800aea3
 800ac18:	0800ae43 	.word	0x0800ae43
 800ac1c:	0800ae6f 	.word	0x0800ae6f
 800ac20:	0800aea3 	.word	0x0800aea3
 800ac24:	0800aea3 	.word	0x0800aea3
 800ac28:	0800aea3 	.word	0x0800aea3
 800ac2c:	0800aea3 	.word	0x0800aea3
 800ac30:	0800aea3 	.word	0x0800aea3
 800ac34:	0800aea3 	.word	0x0800aea3
 800ac38:	0800aea3 	.word	0x0800aea3
 800ac3c:	0800ac41 	.word	0x0800ac41
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ac46:	69db      	ldr	r3, [r3, #28]
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d00b      	beq.n	800ac64 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ac52:	69db      	ldr	r3, [r3, #28]
 800ac54:	687a      	ldr	r2, [r7, #4]
 800ac56:	7c12      	ldrb	r2, [r2, #16]
 800ac58:	f107 0108 	add.w	r1, r7, #8
 800ac5c:	4610      	mov	r0, r2
 800ac5e:	4798      	blx	r3
 800ac60:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ac62:	e126      	b.n	800aeb2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800ac64:	6839      	ldr	r1, [r7, #0]
 800ac66:	6878      	ldr	r0, [r7, #4]
 800ac68:	f000 fb0e 	bl	800b288 <USBD_CtlError>
        err++;
 800ac6c:	7afb      	ldrb	r3, [r7, #11]
 800ac6e:	3301      	adds	r3, #1
 800ac70:	72fb      	strb	r3, [r7, #11]
      break;
 800ac72:	e11e      	b.n	800aeb2 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	687a      	ldr	r2, [r7, #4]
 800ac7e:	7c12      	ldrb	r2, [r2, #16]
 800ac80:	f107 0108 	add.w	r1, r7, #8
 800ac84:	4610      	mov	r0, r2
 800ac86:	4798      	blx	r3
 800ac88:	60f8      	str	r0, [r7, #12]
      break;
 800ac8a:	e112      	b.n	800aeb2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	7c1b      	ldrb	r3, [r3, #16]
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d10d      	bne.n	800acb0 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ac9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac9c:	f107 0208 	add.w	r2, r7, #8
 800aca0:	4610      	mov	r0, r2
 800aca2:	4798      	blx	r3
 800aca4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	3301      	adds	r3, #1
 800acaa:	2202      	movs	r2, #2
 800acac:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800acae:	e100      	b.n	800aeb2 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800acb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800acb8:	f107 0208 	add.w	r2, r7, #8
 800acbc:	4610      	mov	r0, r2
 800acbe:	4798      	blx	r3
 800acc0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	3301      	adds	r3, #1
 800acc6:	2202      	movs	r2, #2
 800acc8:	701a      	strb	r2, [r3, #0]
      break;
 800acca:	e0f2      	b.n	800aeb2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800accc:	683b      	ldr	r3, [r7, #0]
 800acce:	885b      	ldrh	r3, [r3, #2]
 800acd0:	b2db      	uxtb	r3, r3
 800acd2:	2b05      	cmp	r3, #5
 800acd4:	f200 80ac 	bhi.w	800ae30 <USBD_GetDescriptor+0x258>
 800acd8:	a201      	add	r2, pc, #4	@ (adr r2, 800ace0 <USBD_GetDescriptor+0x108>)
 800acda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acde:	bf00      	nop
 800ace0:	0800acf9 	.word	0x0800acf9
 800ace4:	0800ad2d 	.word	0x0800ad2d
 800ace8:	0800ad61 	.word	0x0800ad61
 800acec:	0800ad95 	.word	0x0800ad95
 800acf0:	0800adc9 	.word	0x0800adc9
 800acf4:	0800adfd 	.word	0x0800adfd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800acfe:	685b      	ldr	r3, [r3, #4]
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d00b      	beq.n	800ad1c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ad0a:	685b      	ldr	r3, [r3, #4]
 800ad0c:	687a      	ldr	r2, [r7, #4]
 800ad0e:	7c12      	ldrb	r2, [r2, #16]
 800ad10:	f107 0108 	add.w	r1, r7, #8
 800ad14:	4610      	mov	r0, r2
 800ad16:	4798      	blx	r3
 800ad18:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ad1a:	e091      	b.n	800ae40 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ad1c:	6839      	ldr	r1, [r7, #0]
 800ad1e:	6878      	ldr	r0, [r7, #4]
 800ad20:	f000 fab2 	bl	800b288 <USBD_CtlError>
            err++;
 800ad24:	7afb      	ldrb	r3, [r7, #11]
 800ad26:	3301      	adds	r3, #1
 800ad28:	72fb      	strb	r3, [r7, #11]
          break;
 800ad2a:	e089      	b.n	800ae40 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ad32:	689b      	ldr	r3, [r3, #8]
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d00b      	beq.n	800ad50 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ad3e:	689b      	ldr	r3, [r3, #8]
 800ad40:	687a      	ldr	r2, [r7, #4]
 800ad42:	7c12      	ldrb	r2, [r2, #16]
 800ad44:	f107 0108 	add.w	r1, r7, #8
 800ad48:	4610      	mov	r0, r2
 800ad4a:	4798      	blx	r3
 800ad4c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ad4e:	e077      	b.n	800ae40 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ad50:	6839      	ldr	r1, [r7, #0]
 800ad52:	6878      	ldr	r0, [r7, #4]
 800ad54:	f000 fa98 	bl	800b288 <USBD_CtlError>
            err++;
 800ad58:	7afb      	ldrb	r3, [r7, #11]
 800ad5a:	3301      	adds	r3, #1
 800ad5c:	72fb      	strb	r3, [r7, #11]
          break;
 800ad5e:	e06f      	b.n	800ae40 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ad66:	68db      	ldr	r3, [r3, #12]
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d00b      	beq.n	800ad84 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ad72:	68db      	ldr	r3, [r3, #12]
 800ad74:	687a      	ldr	r2, [r7, #4]
 800ad76:	7c12      	ldrb	r2, [r2, #16]
 800ad78:	f107 0108 	add.w	r1, r7, #8
 800ad7c:	4610      	mov	r0, r2
 800ad7e:	4798      	blx	r3
 800ad80:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ad82:	e05d      	b.n	800ae40 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ad84:	6839      	ldr	r1, [r7, #0]
 800ad86:	6878      	ldr	r0, [r7, #4]
 800ad88:	f000 fa7e 	bl	800b288 <USBD_CtlError>
            err++;
 800ad8c:	7afb      	ldrb	r3, [r7, #11]
 800ad8e:	3301      	adds	r3, #1
 800ad90:	72fb      	strb	r3, [r7, #11]
          break;
 800ad92:	e055      	b.n	800ae40 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ad9a:	691b      	ldr	r3, [r3, #16]
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d00b      	beq.n	800adb8 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ada6:	691b      	ldr	r3, [r3, #16]
 800ada8:	687a      	ldr	r2, [r7, #4]
 800adaa:	7c12      	ldrb	r2, [r2, #16]
 800adac:	f107 0108 	add.w	r1, r7, #8
 800adb0:	4610      	mov	r0, r2
 800adb2:	4798      	blx	r3
 800adb4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800adb6:	e043      	b.n	800ae40 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800adb8:	6839      	ldr	r1, [r7, #0]
 800adba:	6878      	ldr	r0, [r7, #4]
 800adbc:	f000 fa64 	bl	800b288 <USBD_CtlError>
            err++;
 800adc0:	7afb      	ldrb	r3, [r7, #11]
 800adc2:	3301      	adds	r3, #1
 800adc4:	72fb      	strb	r3, [r7, #11]
          break;
 800adc6:	e03b      	b.n	800ae40 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800adce:	695b      	ldr	r3, [r3, #20]
 800add0:	2b00      	cmp	r3, #0
 800add2:	d00b      	beq.n	800adec <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800adda:	695b      	ldr	r3, [r3, #20]
 800addc:	687a      	ldr	r2, [r7, #4]
 800adde:	7c12      	ldrb	r2, [r2, #16]
 800ade0:	f107 0108 	add.w	r1, r7, #8
 800ade4:	4610      	mov	r0, r2
 800ade6:	4798      	blx	r3
 800ade8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800adea:	e029      	b.n	800ae40 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800adec:	6839      	ldr	r1, [r7, #0]
 800adee:	6878      	ldr	r0, [r7, #4]
 800adf0:	f000 fa4a 	bl	800b288 <USBD_CtlError>
            err++;
 800adf4:	7afb      	ldrb	r3, [r7, #11]
 800adf6:	3301      	adds	r3, #1
 800adf8:	72fb      	strb	r3, [r7, #11]
          break;
 800adfa:	e021      	b.n	800ae40 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ae02:	699b      	ldr	r3, [r3, #24]
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d00b      	beq.n	800ae20 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ae0e:	699b      	ldr	r3, [r3, #24]
 800ae10:	687a      	ldr	r2, [r7, #4]
 800ae12:	7c12      	ldrb	r2, [r2, #16]
 800ae14:	f107 0108 	add.w	r1, r7, #8
 800ae18:	4610      	mov	r0, r2
 800ae1a:	4798      	blx	r3
 800ae1c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ae1e:	e00f      	b.n	800ae40 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ae20:	6839      	ldr	r1, [r7, #0]
 800ae22:	6878      	ldr	r0, [r7, #4]
 800ae24:	f000 fa30 	bl	800b288 <USBD_CtlError>
            err++;
 800ae28:	7afb      	ldrb	r3, [r7, #11]
 800ae2a:	3301      	adds	r3, #1
 800ae2c:	72fb      	strb	r3, [r7, #11]
          break;
 800ae2e:	e007      	b.n	800ae40 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800ae30:	6839      	ldr	r1, [r7, #0]
 800ae32:	6878      	ldr	r0, [r7, #4]
 800ae34:	f000 fa28 	bl	800b288 <USBD_CtlError>
          err++;
 800ae38:	7afb      	ldrb	r3, [r7, #11]
 800ae3a:	3301      	adds	r3, #1
 800ae3c:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800ae3e:	bf00      	nop
      }
      break;
 800ae40:	e037      	b.n	800aeb2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	7c1b      	ldrb	r3, [r3, #16]
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d109      	bne.n	800ae5e <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ae50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ae52:	f107 0208 	add.w	r2, r7, #8
 800ae56:	4610      	mov	r0, r2
 800ae58:	4798      	blx	r3
 800ae5a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ae5c:	e029      	b.n	800aeb2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800ae5e:	6839      	ldr	r1, [r7, #0]
 800ae60:	6878      	ldr	r0, [r7, #4]
 800ae62:	f000 fa11 	bl	800b288 <USBD_CtlError>
        err++;
 800ae66:	7afb      	ldrb	r3, [r7, #11]
 800ae68:	3301      	adds	r3, #1
 800ae6a:	72fb      	strb	r3, [r7, #11]
      break;
 800ae6c:	e021      	b.n	800aeb2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	7c1b      	ldrb	r3, [r3, #16]
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d10d      	bne.n	800ae92 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ae7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ae7e:	f107 0208 	add.w	r2, r7, #8
 800ae82:	4610      	mov	r0, r2
 800ae84:	4798      	blx	r3
 800ae86:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	3301      	adds	r3, #1
 800ae8c:	2207      	movs	r2, #7
 800ae8e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ae90:	e00f      	b.n	800aeb2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800ae92:	6839      	ldr	r1, [r7, #0]
 800ae94:	6878      	ldr	r0, [r7, #4]
 800ae96:	f000 f9f7 	bl	800b288 <USBD_CtlError>
        err++;
 800ae9a:	7afb      	ldrb	r3, [r7, #11]
 800ae9c:	3301      	adds	r3, #1
 800ae9e:	72fb      	strb	r3, [r7, #11]
      break;
 800aea0:	e007      	b.n	800aeb2 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800aea2:	6839      	ldr	r1, [r7, #0]
 800aea4:	6878      	ldr	r0, [r7, #4]
 800aea6:	f000 f9ef 	bl	800b288 <USBD_CtlError>
      err++;
 800aeaa:	7afb      	ldrb	r3, [r7, #11]
 800aeac:	3301      	adds	r3, #1
 800aeae:	72fb      	strb	r3, [r7, #11]
      break;
 800aeb0:	bf00      	nop
  }

  if (err != 0U)
 800aeb2:	7afb      	ldrb	r3, [r7, #11]
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d11e      	bne.n	800aef6 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800aeb8:	683b      	ldr	r3, [r7, #0]
 800aeba:	88db      	ldrh	r3, [r3, #6]
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d016      	beq.n	800aeee <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800aec0:	893b      	ldrh	r3, [r7, #8]
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d00e      	beq.n	800aee4 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800aec6:	683b      	ldr	r3, [r7, #0]
 800aec8:	88da      	ldrh	r2, [r3, #6]
 800aeca:	893b      	ldrh	r3, [r7, #8]
 800aecc:	4293      	cmp	r3, r2
 800aece:	bf28      	it	cs
 800aed0:	4613      	movcs	r3, r2
 800aed2:	b29b      	uxth	r3, r3
 800aed4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800aed6:	893b      	ldrh	r3, [r7, #8]
 800aed8:	461a      	mov	r2, r3
 800aeda:	68f9      	ldr	r1, [r7, #12]
 800aedc:	6878      	ldr	r0, [r7, #4]
 800aede:	f000 fa44 	bl	800b36a <USBD_CtlSendData>
 800aee2:	e009      	b.n	800aef8 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800aee4:	6839      	ldr	r1, [r7, #0]
 800aee6:	6878      	ldr	r0, [r7, #4]
 800aee8:	f000 f9ce 	bl	800b288 <USBD_CtlError>
 800aeec:	e004      	b.n	800aef8 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800aeee:	6878      	ldr	r0, [r7, #4]
 800aef0:	f000 fa95 	bl	800b41e <USBD_CtlSendStatus>
 800aef4:	e000      	b.n	800aef8 <USBD_GetDescriptor+0x320>
    return;
 800aef6:	bf00      	nop
  }
}
 800aef8:	3710      	adds	r7, #16
 800aefa:	46bd      	mov	sp, r7
 800aefc:	bd80      	pop	{r7, pc}
 800aefe:	bf00      	nop

0800af00 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800af00:	b580      	push	{r7, lr}
 800af02:	b084      	sub	sp, #16
 800af04:	af00      	add	r7, sp, #0
 800af06:	6078      	str	r0, [r7, #4]
 800af08:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800af0a:	683b      	ldr	r3, [r7, #0]
 800af0c:	889b      	ldrh	r3, [r3, #4]
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d131      	bne.n	800af76 <USBD_SetAddress+0x76>
 800af12:	683b      	ldr	r3, [r7, #0]
 800af14:	88db      	ldrh	r3, [r3, #6]
 800af16:	2b00      	cmp	r3, #0
 800af18:	d12d      	bne.n	800af76 <USBD_SetAddress+0x76>
 800af1a:	683b      	ldr	r3, [r7, #0]
 800af1c:	885b      	ldrh	r3, [r3, #2]
 800af1e:	2b7f      	cmp	r3, #127	@ 0x7f
 800af20:	d829      	bhi.n	800af76 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800af22:	683b      	ldr	r3, [r7, #0]
 800af24:	885b      	ldrh	r3, [r3, #2]
 800af26:	b2db      	uxtb	r3, r3
 800af28:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800af2c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800af34:	b2db      	uxtb	r3, r3
 800af36:	2b03      	cmp	r3, #3
 800af38:	d104      	bne.n	800af44 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800af3a:	6839      	ldr	r1, [r7, #0]
 800af3c:	6878      	ldr	r0, [r7, #4]
 800af3e:	f000 f9a3 	bl	800b288 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af42:	e01d      	b.n	800af80 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	7bfa      	ldrb	r2, [r7, #15]
 800af48:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800af4c:	7bfb      	ldrb	r3, [r7, #15]
 800af4e:	4619      	mov	r1, r3
 800af50:	6878      	ldr	r0, [r7, #4]
 800af52:	f000 feb9 	bl	800bcc8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800af56:	6878      	ldr	r0, [r7, #4]
 800af58:	f000 fa61 	bl	800b41e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800af5c:	7bfb      	ldrb	r3, [r7, #15]
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d004      	beq.n	800af6c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	2202      	movs	r2, #2
 800af66:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af6a:	e009      	b.n	800af80 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	2201      	movs	r2, #1
 800af70:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af74:	e004      	b.n	800af80 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800af76:	6839      	ldr	r1, [r7, #0]
 800af78:	6878      	ldr	r0, [r7, #4]
 800af7a:	f000 f985 	bl	800b288 <USBD_CtlError>
  }
}
 800af7e:	bf00      	nop
 800af80:	bf00      	nop
 800af82:	3710      	adds	r7, #16
 800af84:	46bd      	mov	sp, r7
 800af86:	bd80      	pop	{r7, pc}

0800af88 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800af88:	b580      	push	{r7, lr}
 800af8a:	b084      	sub	sp, #16
 800af8c:	af00      	add	r7, sp, #0
 800af8e:	6078      	str	r0, [r7, #4]
 800af90:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800af92:	2300      	movs	r3, #0
 800af94:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800af96:	683b      	ldr	r3, [r7, #0]
 800af98:	885b      	ldrh	r3, [r3, #2]
 800af9a:	b2da      	uxtb	r2, r3
 800af9c:	4b4c      	ldr	r3, [pc, #304]	@ (800b0d0 <USBD_SetConfig+0x148>)
 800af9e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800afa0:	4b4b      	ldr	r3, [pc, #300]	@ (800b0d0 <USBD_SetConfig+0x148>)
 800afa2:	781b      	ldrb	r3, [r3, #0]
 800afa4:	2b01      	cmp	r3, #1
 800afa6:	d905      	bls.n	800afb4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800afa8:	6839      	ldr	r1, [r7, #0]
 800afaa:	6878      	ldr	r0, [r7, #4]
 800afac:	f000 f96c 	bl	800b288 <USBD_CtlError>
    return USBD_FAIL;
 800afb0:	2303      	movs	r3, #3
 800afb2:	e088      	b.n	800b0c6 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800afba:	b2db      	uxtb	r3, r3
 800afbc:	2b02      	cmp	r3, #2
 800afbe:	d002      	beq.n	800afc6 <USBD_SetConfig+0x3e>
 800afc0:	2b03      	cmp	r3, #3
 800afc2:	d025      	beq.n	800b010 <USBD_SetConfig+0x88>
 800afc4:	e071      	b.n	800b0aa <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800afc6:	4b42      	ldr	r3, [pc, #264]	@ (800b0d0 <USBD_SetConfig+0x148>)
 800afc8:	781b      	ldrb	r3, [r3, #0]
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d01c      	beq.n	800b008 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800afce:	4b40      	ldr	r3, [pc, #256]	@ (800b0d0 <USBD_SetConfig+0x148>)
 800afd0:	781b      	ldrb	r3, [r3, #0]
 800afd2:	461a      	mov	r2, r3
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800afd8:	4b3d      	ldr	r3, [pc, #244]	@ (800b0d0 <USBD_SetConfig+0x148>)
 800afda:	781b      	ldrb	r3, [r3, #0]
 800afdc:	4619      	mov	r1, r3
 800afde:	6878      	ldr	r0, [r7, #4]
 800afe0:	f7ff f992 	bl	800a308 <USBD_SetClassConfig>
 800afe4:	4603      	mov	r3, r0
 800afe6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800afe8:	7bfb      	ldrb	r3, [r7, #15]
 800afea:	2b00      	cmp	r3, #0
 800afec:	d004      	beq.n	800aff8 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800afee:	6839      	ldr	r1, [r7, #0]
 800aff0:	6878      	ldr	r0, [r7, #4]
 800aff2:	f000 f949 	bl	800b288 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800aff6:	e065      	b.n	800b0c4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800aff8:	6878      	ldr	r0, [r7, #4]
 800affa:	f000 fa10 	bl	800b41e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	2203      	movs	r2, #3
 800b002:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800b006:	e05d      	b.n	800b0c4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800b008:	6878      	ldr	r0, [r7, #4]
 800b00a:	f000 fa08 	bl	800b41e <USBD_CtlSendStatus>
      break;
 800b00e:	e059      	b.n	800b0c4 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b010:	4b2f      	ldr	r3, [pc, #188]	@ (800b0d0 <USBD_SetConfig+0x148>)
 800b012:	781b      	ldrb	r3, [r3, #0]
 800b014:	2b00      	cmp	r3, #0
 800b016:	d112      	bne.n	800b03e <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	2202      	movs	r2, #2
 800b01c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800b020:	4b2b      	ldr	r3, [pc, #172]	@ (800b0d0 <USBD_SetConfig+0x148>)
 800b022:	781b      	ldrb	r3, [r3, #0]
 800b024:	461a      	mov	r2, r3
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b02a:	4b29      	ldr	r3, [pc, #164]	@ (800b0d0 <USBD_SetConfig+0x148>)
 800b02c:	781b      	ldrb	r3, [r3, #0]
 800b02e:	4619      	mov	r1, r3
 800b030:	6878      	ldr	r0, [r7, #4]
 800b032:	f7ff f985 	bl	800a340 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b036:	6878      	ldr	r0, [r7, #4]
 800b038:	f000 f9f1 	bl	800b41e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b03c:	e042      	b.n	800b0c4 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800b03e:	4b24      	ldr	r3, [pc, #144]	@ (800b0d0 <USBD_SetConfig+0x148>)
 800b040:	781b      	ldrb	r3, [r3, #0]
 800b042:	461a      	mov	r2, r3
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	685b      	ldr	r3, [r3, #4]
 800b048:	429a      	cmp	r2, r3
 800b04a:	d02a      	beq.n	800b0a2 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	685b      	ldr	r3, [r3, #4]
 800b050:	b2db      	uxtb	r3, r3
 800b052:	4619      	mov	r1, r3
 800b054:	6878      	ldr	r0, [r7, #4]
 800b056:	f7ff f973 	bl	800a340 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b05a:	4b1d      	ldr	r3, [pc, #116]	@ (800b0d0 <USBD_SetConfig+0x148>)
 800b05c:	781b      	ldrb	r3, [r3, #0]
 800b05e:	461a      	mov	r2, r3
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b064:	4b1a      	ldr	r3, [pc, #104]	@ (800b0d0 <USBD_SetConfig+0x148>)
 800b066:	781b      	ldrb	r3, [r3, #0]
 800b068:	4619      	mov	r1, r3
 800b06a:	6878      	ldr	r0, [r7, #4]
 800b06c:	f7ff f94c 	bl	800a308 <USBD_SetClassConfig>
 800b070:	4603      	mov	r3, r0
 800b072:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b074:	7bfb      	ldrb	r3, [r7, #15]
 800b076:	2b00      	cmp	r3, #0
 800b078:	d00f      	beq.n	800b09a <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800b07a:	6839      	ldr	r1, [r7, #0]
 800b07c:	6878      	ldr	r0, [r7, #4]
 800b07e:	f000 f903 	bl	800b288 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	685b      	ldr	r3, [r3, #4]
 800b086:	b2db      	uxtb	r3, r3
 800b088:	4619      	mov	r1, r3
 800b08a:	6878      	ldr	r0, [r7, #4]
 800b08c:	f7ff f958 	bl	800a340 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	2202      	movs	r2, #2
 800b094:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800b098:	e014      	b.n	800b0c4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800b09a:	6878      	ldr	r0, [r7, #4]
 800b09c:	f000 f9bf 	bl	800b41e <USBD_CtlSendStatus>
      break;
 800b0a0:	e010      	b.n	800b0c4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800b0a2:	6878      	ldr	r0, [r7, #4]
 800b0a4:	f000 f9bb 	bl	800b41e <USBD_CtlSendStatus>
      break;
 800b0a8:	e00c      	b.n	800b0c4 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800b0aa:	6839      	ldr	r1, [r7, #0]
 800b0ac:	6878      	ldr	r0, [r7, #4]
 800b0ae:	f000 f8eb 	bl	800b288 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b0b2:	4b07      	ldr	r3, [pc, #28]	@ (800b0d0 <USBD_SetConfig+0x148>)
 800b0b4:	781b      	ldrb	r3, [r3, #0]
 800b0b6:	4619      	mov	r1, r3
 800b0b8:	6878      	ldr	r0, [r7, #4]
 800b0ba:	f7ff f941 	bl	800a340 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b0be:	2303      	movs	r3, #3
 800b0c0:	73fb      	strb	r3, [r7, #15]
      break;
 800b0c2:	bf00      	nop
  }

  return ret;
 800b0c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0c6:	4618      	mov	r0, r3
 800b0c8:	3710      	adds	r7, #16
 800b0ca:	46bd      	mov	sp, r7
 800b0cc:	bd80      	pop	{r7, pc}
 800b0ce:	bf00      	nop
 800b0d0:	20000b2e 	.word	0x20000b2e

0800b0d4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b0d4:	b580      	push	{r7, lr}
 800b0d6:	b082      	sub	sp, #8
 800b0d8:	af00      	add	r7, sp, #0
 800b0da:	6078      	str	r0, [r7, #4]
 800b0dc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b0de:	683b      	ldr	r3, [r7, #0]
 800b0e0:	88db      	ldrh	r3, [r3, #6]
 800b0e2:	2b01      	cmp	r3, #1
 800b0e4:	d004      	beq.n	800b0f0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b0e6:	6839      	ldr	r1, [r7, #0]
 800b0e8:	6878      	ldr	r0, [r7, #4]
 800b0ea:	f000 f8cd 	bl	800b288 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b0ee:	e023      	b.n	800b138 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b0f6:	b2db      	uxtb	r3, r3
 800b0f8:	2b02      	cmp	r3, #2
 800b0fa:	dc02      	bgt.n	800b102 <USBD_GetConfig+0x2e>
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	dc03      	bgt.n	800b108 <USBD_GetConfig+0x34>
 800b100:	e015      	b.n	800b12e <USBD_GetConfig+0x5a>
 800b102:	2b03      	cmp	r3, #3
 800b104:	d00b      	beq.n	800b11e <USBD_GetConfig+0x4a>
 800b106:	e012      	b.n	800b12e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	2200      	movs	r2, #0
 800b10c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	3308      	adds	r3, #8
 800b112:	2201      	movs	r2, #1
 800b114:	4619      	mov	r1, r3
 800b116:	6878      	ldr	r0, [r7, #4]
 800b118:	f000 f927 	bl	800b36a <USBD_CtlSendData>
        break;
 800b11c:	e00c      	b.n	800b138 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	3304      	adds	r3, #4
 800b122:	2201      	movs	r2, #1
 800b124:	4619      	mov	r1, r3
 800b126:	6878      	ldr	r0, [r7, #4]
 800b128:	f000 f91f 	bl	800b36a <USBD_CtlSendData>
        break;
 800b12c:	e004      	b.n	800b138 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b12e:	6839      	ldr	r1, [r7, #0]
 800b130:	6878      	ldr	r0, [r7, #4]
 800b132:	f000 f8a9 	bl	800b288 <USBD_CtlError>
        break;
 800b136:	bf00      	nop
}
 800b138:	bf00      	nop
 800b13a:	3708      	adds	r7, #8
 800b13c:	46bd      	mov	sp, r7
 800b13e:	bd80      	pop	{r7, pc}

0800b140 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b140:	b580      	push	{r7, lr}
 800b142:	b082      	sub	sp, #8
 800b144:	af00      	add	r7, sp, #0
 800b146:	6078      	str	r0, [r7, #4]
 800b148:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b150:	b2db      	uxtb	r3, r3
 800b152:	3b01      	subs	r3, #1
 800b154:	2b02      	cmp	r3, #2
 800b156:	d81e      	bhi.n	800b196 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b158:	683b      	ldr	r3, [r7, #0]
 800b15a:	88db      	ldrh	r3, [r3, #6]
 800b15c:	2b02      	cmp	r3, #2
 800b15e:	d004      	beq.n	800b16a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b160:	6839      	ldr	r1, [r7, #0]
 800b162:	6878      	ldr	r0, [r7, #4]
 800b164:	f000 f890 	bl	800b288 <USBD_CtlError>
        break;
 800b168:	e01a      	b.n	800b1a0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	2201      	movs	r2, #1
 800b16e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800b176:	2b00      	cmp	r3, #0
 800b178:	d005      	beq.n	800b186 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	68db      	ldr	r3, [r3, #12]
 800b17e:	f043 0202 	orr.w	r2, r3, #2
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	330c      	adds	r3, #12
 800b18a:	2202      	movs	r2, #2
 800b18c:	4619      	mov	r1, r3
 800b18e:	6878      	ldr	r0, [r7, #4]
 800b190:	f000 f8eb 	bl	800b36a <USBD_CtlSendData>
      break;
 800b194:	e004      	b.n	800b1a0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b196:	6839      	ldr	r1, [r7, #0]
 800b198:	6878      	ldr	r0, [r7, #4]
 800b19a:	f000 f875 	bl	800b288 <USBD_CtlError>
      break;
 800b19e:	bf00      	nop
  }
}
 800b1a0:	bf00      	nop
 800b1a2:	3708      	adds	r7, #8
 800b1a4:	46bd      	mov	sp, r7
 800b1a6:	bd80      	pop	{r7, pc}

0800b1a8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b1a8:	b580      	push	{r7, lr}
 800b1aa:	b082      	sub	sp, #8
 800b1ac:	af00      	add	r7, sp, #0
 800b1ae:	6078      	str	r0, [r7, #4]
 800b1b0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b1b2:	683b      	ldr	r3, [r7, #0]
 800b1b4:	885b      	ldrh	r3, [r3, #2]
 800b1b6:	2b01      	cmp	r3, #1
 800b1b8:	d106      	bne.n	800b1c8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	2201      	movs	r2, #1
 800b1be:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b1c2:	6878      	ldr	r0, [r7, #4]
 800b1c4:	f000 f92b 	bl	800b41e <USBD_CtlSendStatus>
  }
}
 800b1c8:	bf00      	nop
 800b1ca:	3708      	adds	r7, #8
 800b1cc:	46bd      	mov	sp, r7
 800b1ce:	bd80      	pop	{r7, pc}

0800b1d0 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b1d0:	b580      	push	{r7, lr}
 800b1d2:	b082      	sub	sp, #8
 800b1d4:	af00      	add	r7, sp, #0
 800b1d6:	6078      	str	r0, [r7, #4]
 800b1d8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b1e0:	b2db      	uxtb	r3, r3
 800b1e2:	3b01      	subs	r3, #1
 800b1e4:	2b02      	cmp	r3, #2
 800b1e6:	d80b      	bhi.n	800b200 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b1e8:	683b      	ldr	r3, [r7, #0]
 800b1ea:	885b      	ldrh	r3, [r3, #2]
 800b1ec:	2b01      	cmp	r3, #1
 800b1ee:	d10c      	bne.n	800b20a <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	2200      	movs	r2, #0
 800b1f4:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b1f8:	6878      	ldr	r0, [r7, #4]
 800b1fa:	f000 f910 	bl	800b41e <USBD_CtlSendStatus>
      }
      break;
 800b1fe:	e004      	b.n	800b20a <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b200:	6839      	ldr	r1, [r7, #0]
 800b202:	6878      	ldr	r0, [r7, #4]
 800b204:	f000 f840 	bl	800b288 <USBD_CtlError>
      break;
 800b208:	e000      	b.n	800b20c <USBD_ClrFeature+0x3c>
      break;
 800b20a:	bf00      	nop
  }
}
 800b20c:	bf00      	nop
 800b20e:	3708      	adds	r7, #8
 800b210:	46bd      	mov	sp, r7
 800b212:	bd80      	pop	{r7, pc}

0800b214 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b214:	b580      	push	{r7, lr}
 800b216:	b084      	sub	sp, #16
 800b218:	af00      	add	r7, sp, #0
 800b21a:	6078      	str	r0, [r7, #4]
 800b21c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b21e:	683b      	ldr	r3, [r7, #0]
 800b220:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	781a      	ldrb	r2, [r3, #0]
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	3301      	adds	r3, #1
 800b22e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	781a      	ldrb	r2, [r3, #0]
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	3301      	adds	r3, #1
 800b23c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b23e:	68f8      	ldr	r0, [r7, #12]
 800b240:	f7ff fa92 	bl	800a768 <SWAPBYTE>
 800b244:	4603      	mov	r3, r0
 800b246:	461a      	mov	r2, r3
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	3301      	adds	r3, #1
 800b250:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	3301      	adds	r3, #1
 800b256:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b258:	68f8      	ldr	r0, [r7, #12]
 800b25a:	f7ff fa85 	bl	800a768 <SWAPBYTE>
 800b25e:	4603      	mov	r3, r0
 800b260:	461a      	mov	r2, r3
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	3301      	adds	r3, #1
 800b26a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	3301      	adds	r3, #1
 800b270:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b272:	68f8      	ldr	r0, [r7, #12]
 800b274:	f7ff fa78 	bl	800a768 <SWAPBYTE>
 800b278:	4603      	mov	r3, r0
 800b27a:	461a      	mov	r2, r3
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	80da      	strh	r2, [r3, #6]
}
 800b280:	bf00      	nop
 800b282:	3710      	adds	r7, #16
 800b284:	46bd      	mov	sp, r7
 800b286:	bd80      	pop	{r7, pc}

0800b288 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b288:	b580      	push	{r7, lr}
 800b28a:	b082      	sub	sp, #8
 800b28c:	af00      	add	r7, sp, #0
 800b28e:	6078      	str	r0, [r7, #4]
 800b290:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b292:	2180      	movs	r1, #128	@ 0x80
 800b294:	6878      	ldr	r0, [r7, #4]
 800b296:	f000 fcad 	bl	800bbf4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b29a:	2100      	movs	r1, #0
 800b29c:	6878      	ldr	r0, [r7, #4]
 800b29e:	f000 fca9 	bl	800bbf4 <USBD_LL_StallEP>
}
 800b2a2:	bf00      	nop
 800b2a4:	3708      	adds	r7, #8
 800b2a6:	46bd      	mov	sp, r7
 800b2a8:	bd80      	pop	{r7, pc}

0800b2aa <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b2aa:	b580      	push	{r7, lr}
 800b2ac:	b086      	sub	sp, #24
 800b2ae:	af00      	add	r7, sp, #0
 800b2b0:	60f8      	str	r0, [r7, #12]
 800b2b2:	60b9      	str	r1, [r7, #8]
 800b2b4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b2b6:	2300      	movs	r3, #0
 800b2b8:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d036      	beq.n	800b32e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800b2c4:	6938      	ldr	r0, [r7, #16]
 800b2c6:	f000 f836 	bl	800b336 <USBD_GetLen>
 800b2ca:	4603      	mov	r3, r0
 800b2cc:	3301      	adds	r3, #1
 800b2ce:	b29b      	uxth	r3, r3
 800b2d0:	005b      	lsls	r3, r3, #1
 800b2d2:	b29a      	uxth	r2, r3
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b2d8:	7dfb      	ldrb	r3, [r7, #23]
 800b2da:	68ba      	ldr	r2, [r7, #8]
 800b2dc:	4413      	add	r3, r2
 800b2de:	687a      	ldr	r2, [r7, #4]
 800b2e0:	7812      	ldrb	r2, [r2, #0]
 800b2e2:	701a      	strb	r2, [r3, #0]
  idx++;
 800b2e4:	7dfb      	ldrb	r3, [r7, #23]
 800b2e6:	3301      	adds	r3, #1
 800b2e8:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b2ea:	7dfb      	ldrb	r3, [r7, #23]
 800b2ec:	68ba      	ldr	r2, [r7, #8]
 800b2ee:	4413      	add	r3, r2
 800b2f0:	2203      	movs	r2, #3
 800b2f2:	701a      	strb	r2, [r3, #0]
  idx++;
 800b2f4:	7dfb      	ldrb	r3, [r7, #23]
 800b2f6:	3301      	adds	r3, #1
 800b2f8:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b2fa:	e013      	b.n	800b324 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800b2fc:	7dfb      	ldrb	r3, [r7, #23]
 800b2fe:	68ba      	ldr	r2, [r7, #8]
 800b300:	4413      	add	r3, r2
 800b302:	693a      	ldr	r2, [r7, #16]
 800b304:	7812      	ldrb	r2, [r2, #0]
 800b306:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b308:	693b      	ldr	r3, [r7, #16]
 800b30a:	3301      	adds	r3, #1
 800b30c:	613b      	str	r3, [r7, #16]
    idx++;
 800b30e:	7dfb      	ldrb	r3, [r7, #23]
 800b310:	3301      	adds	r3, #1
 800b312:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b314:	7dfb      	ldrb	r3, [r7, #23]
 800b316:	68ba      	ldr	r2, [r7, #8]
 800b318:	4413      	add	r3, r2
 800b31a:	2200      	movs	r2, #0
 800b31c:	701a      	strb	r2, [r3, #0]
    idx++;
 800b31e:	7dfb      	ldrb	r3, [r7, #23]
 800b320:	3301      	adds	r3, #1
 800b322:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b324:	693b      	ldr	r3, [r7, #16]
 800b326:	781b      	ldrb	r3, [r3, #0]
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d1e7      	bne.n	800b2fc <USBD_GetString+0x52>
 800b32c:	e000      	b.n	800b330 <USBD_GetString+0x86>
    return;
 800b32e:	bf00      	nop
  }
}
 800b330:	3718      	adds	r7, #24
 800b332:	46bd      	mov	sp, r7
 800b334:	bd80      	pop	{r7, pc}

0800b336 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b336:	b480      	push	{r7}
 800b338:	b085      	sub	sp, #20
 800b33a:	af00      	add	r7, sp, #0
 800b33c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b33e:	2300      	movs	r3, #0
 800b340:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b346:	e005      	b.n	800b354 <USBD_GetLen+0x1e>
  {
    len++;
 800b348:	7bfb      	ldrb	r3, [r7, #15]
 800b34a:	3301      	adds	r3, #1
 800b34c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b34e:	68bb      	ldr	r3, [r7, #8]
 800b350:	3301      	adds	r3, #1
 800b352:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b354:	68bb      	ldr	r3, [r7, #8]
 800b356:	781b      	ldrb	r3, [r3, #0]
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d1f5      	bne.n	800b348 <USBD_GetLen+0x12>
  }

  return len;
 800b35c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b35e:	4618      	mov	r0, r3
 800b360:	3714      	adds	r7, #20
 800b362:	46bd      	mov	sp, r7
 800b364:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b368:	4770      	bx	lr

0800b36a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b36a:	b580      	push	{r7, lr}
 800b36c:	b084      	sub	sp, #16
 800b36e:	af00      	add	r7, sp, #0
 800b370:	60f8      	str	r0, [r7, #12]
 800b372:	60b9      	str	r1, [r7, #8]
 800b374:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	2202      	movs	r2, #2
 800b37a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	687a      	ldr	r2, [r7, #4]
 800b382:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	687a      	ldr	r2, [r7, #4]
 800b388:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	68ba      	ldr	r2, [r7, #8]
 800b38e:	2100      	movs	r1, #0
 800b390:	68f8      	ldr	r0, [r7, #12]
 800b392:	f000 fcb8 	bl	800bd06 <USBD_LL_Transmit>

  return USBD_OK;
 800b396:	2300      	movs	r3, #0
}
 800b398:	4618      	mov	r0, r3
 800b39a:	3710      	adds	r7, #16
 800b39c:	46bd      	mov	sp, r7
 800b39e:	bd80      	pop	{r7, pc}

0800b3a0 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b3a0:	b580      	push	{r7, lr}
 800b3a2:	b084      	sub	sp, #16
 800b3a4:	af00      	add	r7, sp, #0
 800b3a6:	60f8      	str	r0, [r7, #12]
 800b3a8:	60b9      	str	r1, [r7, #8]
 800b3aa:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	68ba      	ldr	r2, [r7, #8]
 800b3b0:	2100      	movs	r1, #0
 800b3b2:	68f8      	ldr	r0, [r7, #12]
 800b3b4:	f000 fca7 	bl	800bd06 <USBD_LL_Transmit>

  return USBD_OK;
 800b3b8:	2300      	movs	r3, #0
}
 800b3ba:	4618      	mov	r0, r3
 800b3bc:	3710      	adds	r7, #16
 800b3be:	46bd      	mov	sp, r7
 800b3c0:	bd80      	pop	{r7, pc}

0800b3c2 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b3c2:	b580      	push	{r7, lr}
 800b3c4:	b084      	sub	sp, #16
 800b3c6:	af00      	add	r7, sp, #0
 800b3c8:	60f8      	str	r0, [r7, #12]
 800b3ca:	60b9      	str	r1, [r7, #8]
 800b3cc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	2203      	movs	r2, #3
 800b3d2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	687a      	ldr	r2, [r7, #4]
 800b3da:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	687a      	ldr	r2, [r7, #4]
 800b3e2:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	68ba      	ldr	r2, [r7, #8]
 800b3ea:	2100      	movs	r1, #0
 800b3ec:	68f8      	ldr	r0, [r7, #12]
 800b3ee:	f000 fcab 	bl	800bd48 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b3f2:	2300      	movs	r3, #0
}
 800b3f4:	4618      	mov	r0, r3
 800b3f6:	3710      	adds	r7, #16
 800b3f8:	46bd      	mov	sp, r7
 800b3fa:	bd80      	pop	{r7, pc}

0800b3fc <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b3fc:	b580      	push	{r7, lr}
 800b3fe:	b084      	sub	sp, #16
 800b400:	af00      	add	r7, sp, #0
 800b402:	60f8      	str	r0, [r7, #12]
 800b404:	60b9      	str	r1, [r7, #8]
 800b406:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	68ba      	ldr	r2, [r7, #8]
 800b40c:	2100      	movs	r1, #0
 800b40e:	68f8      	ldr	r0, [r7, #12]
 800b410:	f000 fc9a 	bl	800bd48 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b414:	2300      	movs	r3, #0
}
 800b416:	4618      	mov	r0, r3
 800b418:	3710      	adds	r7, #16
 800b41a:	46bd      	mov	sp, r7
 800b41c:	bd80      	pop	{r7, pc}

0800b41e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b41e:	b580      	push	{r7, lr}
 800b420:	b082      	sub	sp, #8
 800b422:	af00      	add	r7, sp, #0
 800b424:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	2204      	movs	r2, #4
 800b42a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b42e:	2300      	movs	r3, #0
 800b430:	2200      	movs	r2, #0
 800b432:	2100      	movs	r1, #0
 800b434:	6878      	ldr	r0, [r7, #4]
 800b436:	f000 fc66 	bl	800bd06 <USBD_LL_Transmit>

  return USBD_OK;
 800b43a:	2300      	movs	r3, #0
}
 800b43c:	4618      	mov	r0, r3
 800b43e:	3708      	adds	r7, #8
 800b440:	46bd      	mov	sp, r7
 800b442:	bd80      	pop	{r7, pc}

0800b444 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b444:	b580      	push	{r7, lr}
 800b446:	b082      	sub	sp, #8
 800b448:	af00      	add	r7, sp, #0
 800b44a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	2205      	movs	r2, #5
 800b450:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b454:	2300      	movs	r3, #0
 800b456:	2200      	movs	r2, #0
 800b458:	2100      	movs	r1, #0
 800b45a:	6878      	ldr	r0, [r7, #4]
 800b45c:	f000 fc74 	bl	800bd48 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b460:	2300      	movs	r3, #0
}
 800b462:	4618      	mov	r0, r3
 800b464:	3708      	adds	r7, #8
 800b466:	46bd      	mov	sp, r7
 800b468:	bd80      	pop	{r7, pc}
	...

0800b46c <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800b46c:	b580      	push	{r7, lr}
 800b46e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800b470:	2200      	movs	r2, #0
 800b472:	4912      	ldr	r1, [pc, #72]	@ (800b4bc <MX_USB_Device_Init+0x50>)
 800b474:	4812      	ldr	r0, [pc, #72]	@ (800b4c0 <MX_USB_Device_Init+0x54>)
 800b476:	f7fe fed9 	bl	800a22c <USBD_Init>
 800b47a:	4603      	mov	r3, r0
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d001      	beq.n	800b484 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800b480:	f7f6 f87d 	bl	800157e <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800b484:	490f      	ldr	r1, [pc, #60]	@ (800b4c4 <MX_USB_Device_Init+0x58>)
 800b486:	480e      	ldr	r0, [pc, #56]	@ (800b4c0 <MX_USB_Device_Init+0x54>)
 800b488:	f7fe ff00 	bl	800a28c <USBD_RegisterClass>
 800b48c:	4603      	mov	r3, r0
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d001      	beq.n	800b496 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800b492:	f7f6 f874 	bl	800157e <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800b496:	490c      	ldr	r1, [pc, #48]	@ (800b4c8 <MX_USB_Device_Init+0x5c>)
 800b498:	4809      	ldr	r0, [pc, #36]	@ (800b4c0 <MX_USB_Device_Init+0x54>)
 800b49a:	f7fe fe21 	bl	800a0e0 <USBD_CDC_RegisterInterface>
 800b49e:	4603      	mov	r3, r0
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d001      	beq.n	800b4a8 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800b4a4:	f7f6 f86b 	bl	800157e <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800b4a8:	4805      	ldr	r0, [pc, #20]	@ (800b4c0 <MX_USB_Device_Init+0x54>)
 800b4aa:	f7fe ff16 	bl	800a2da <USBD_Start>
 800b4ae:	4603      	mov	r3, r0
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d001      	beq.n	800b4b8 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800b4b4:	f7f6 f863 	bl	800157e <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800b4b8:	bf00      	nop
 800b4ba:	bd80      	pop	{r7, pc}
 800b4bc:	200001c4 	.word	0x200001c4
 800b4c0:	200019b4 	.word	0x200019b4
 800b4c4:	200000ac 	.word	0x200000ac
 800b4c8:	200001b0 	.word	0x200001b0

0800b4cc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b4cc:	b580      	push	{r7, lr}
 800b4ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b4d0:	2200      	movs	r2, #0
 800b4d2:	4905      	ldr	r1, [pc, #20]	@ (800b4e8 <CDC_Init_FS+0x1c>)
 800b4d4:	4805      	ldr	r0, [pc, #20]	@ (800b4ec <CDC_Init_FS+0x20>)
 800b4d6:	f7fe fe18 	bl	800a10a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b4da:	4905      	ldr	r1, [pc, #20]	@ (800b4f0 <CDC_Init_FS+0x24>)
 800b4dc:	4803      	ldr	r0, [pc, #12]	@ (800b4ec <CDC_Init_FS+0x20>)
 800b4de:	f7fe fe32 	bl	800a146 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b4e2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b4e4:	4618      	mov	r0, r3
 800b4e6:	bd80      	pop	{r7, pc}
 800b4e8:	20002084 	.word	0x20002084
 800b4ec:	200019b4 	.word	0x200019b4
 800b4f0:	20001c84 	.word	0x20001c84

0800b4f4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b4f4:	b480      	push	{r7}
 800b4f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b4f8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b4fa:	4618      	mov	r0, r3
 800b4fc:	46bd      	mov	sp, r7
 800b4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b502:	4770      	bx	lr

0800b504 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b504:	b480      	push	{r7}
 800b506:	b083      	sub	sp, #12
 800b508:	af00      	add	r7, sp, #0
 800b50a:	4603      	mov	r3, r0
 800b50c:	6039      	str	r1, [r7, #0]
 800b50e:	71fb      	strb	r3, [r7, #7]
 800b510:	4613      	mov	r3, r2
 800b512:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b514:	79fb      	ldrb	r3, [r7, #7]
 800b516:	2b23      	cmp	r3, #35	@ 0x23
 800b518:	d84a      	bhi.n	800b5b0 <CDC_Control_FS+0xac>
 800b51a:	a201      	add	r2, pc, #4	@ (adr r2, 800b520 <CDC_Control_FS+0x1c>)
 800b51c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b520:	0800b5b1 	.word	0x0800b5b1
 800b524:	0800b5b1 	.word	0x0800b5b1
 800b528:	0800b5b1 	.word	0x0800b5b1
 800b52c:	0800b5b1 	.word	0x0800b5b1
 800b530:	0800b5b1 	.word	0x0800b5b1
 800b534:	0800b5b1 	.word	0x0800b5b1
 800b538:	0800b5b1 	.word	0x0800b5b1
 800b53c:	0800b5b1 	.word	0x0800b5b1
 800b540:	0800b5b1 	.word	0x0800b5b1
 800b544:	0800b5b1 	.word	0x0800b5b1
 800b548:	0800b5b1 	.word	0x0800b5b1
 800b54c:	0800b5b1 	.word	0x0800b5b1
 800b550:	0800b5b1 	.word	0x0800b5b1
 800b554:	0800b5b1 	.word	0x0800b5b1
 800b558:	0800b5b1 	.word	0x0800b5b1
 800b55c:	0800b5b1 	.word	0x0800b5b1
 800b560:	0800b5b1 	.word	0x0800b5b1
 800b564:	0800b5b1 	.word	0x0800b5b1
 800b568:	0800b5b1 	.word	0x0800b5b1
 800b56c:	0800b5b1 	.word	0x0800b5b1
 800b570:	0800b5b1 	.word	0x0800b5b1
 800b574:	0800b5b1 	.word	0x0800b5b1
 800b578:	0800b5b1 	.word	0x0800b5b1
 800b57c:	0800b5b1 	.word	0x0800b5b1
 800b580:	0800b5b1 	.word	0x0800b5b1
 800b584:	0800b5b1 	.word	0x0800b5b1
 800b588:	0800b5b1 	.word	0x0800b5b1
 800b58c:	0800b5b1 	.word	0x0800b5b1
 800b590:	0800b5b1 	.word	0x0800b5b1
 800b594:	0800b5b1 	.word	0x0800b5b1
 800b598:	0800b5b1 	.word	0x0800b5b1
 800b59c:	0800b5b1 	.word	0x0800b5b1
 800b5a0:	0800b5b1 	.word	0x0800b5b1
 800b5a4:	0800b5b1 	.word	0x0800b5b1
 800b5a8:	0800b5b1 	.word	0x0800b5b1
 800b5ac:	0800b5b1 	.word	0x0800b5b1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b5b0:	bf00      	nop
  }

  return (USBD_OK);
 800b5b2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b5b4:	4618      	mov	r0, r3
 800b5b6:	370c      	adds	r7, #12
 800b5b8:	46bd      	mov	sp, r7
 800b5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5be:	4770      	bx	lr

0800b5c0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b5c0:	b580      	push	{r7, lr}
 800b5c2:	b082      	sub	sp, #8
 800b5c4:	af00      	add	r7, sp, #0
 800b5c6:	6078      	str	r0, [r7, #4]
 800b5c8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b5ca:	6879      	ldr	r1, [r7, #4]
 800b5cc:	4805      	ldr	r0, [pc, #20]	@ (800b5e4 <CDC_Receive_FS+0x24>)
 800b5ce:	f7fe fdba 	bl	800a146 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b5d2:	4804      	ldr	r0, [pc, #16]	@ (800b5e4 <CDC_Receive_FS+0x24>)
 800b5d4:	f7fe fe00 	bl	800a1d8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800b5d8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b5da:	4618      	mov	r0, r3
 800b5dc:	3708      	adds	r7, #8
 800b5de:	46bd      	mov	sp, r7
 800b5e0:	bd80      	pop	{r7, pc}
 800b5e2:	bf00      	nop
 800b5e4:	200019b4 	.word	0x200019b4

0800b5e8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800b5e8:	b580      	push	{r7, lr}
 800b5ea:	b084      	sub	sp, #16
 800b5ec:	af00      	add	r7, sp, #0
 800b5ee:	6078      	str	r0, [r7, #4]
 800b5f0:	460b      	mov	r3, r1
 800b5f2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800b5f4:	2300      	movs	r3, #0
 800b5f6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800b5f8:	4b0d      	ldr	r3, [pc, #52]	@ (800b630 <CDC_Transmit_FS+0x48>)
 800b5fa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b5fe:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800b600:	68bb      	ldr	r3, [r7, #8]
 800b602:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800b606:	2b00      	cmp	r3, #0
 800b608:	d001      	beq.n	800b60e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800b60a:	2301      	movs	r3, #1
 800b60c:	e00b      	b.n	800b626 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800b60e:	887b      	ldrh	r3, [r7, #2]
 800b610:	461a      	mov	r2, r3
 800b612:	6879      	ldr	r1, [r7, #4]
 800b614:	4806      	ldr	r0, [pc, #24]	@ (800b630 <CDC_Transmit_FS+0x48>)
 800b616:	f7fe fd78 	bl	800a10a <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800b61a:	4805      	ldr	r0, [pc, #20]	@ (800b630 <CDC_Transmit_FS+0x48>)
 800b61c:	f7fe fdac 	bl	800a178 <USBD_CDC_TransmitPacket>
 800b620:	4603      	mov	r3, r0
 800b622:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800b624:	7bfb      	ldrb	r3, [r7, #15]
}
 800b626:	4618      	mov	r0, r3
 800b628:	3710      	adds	r7, #16
 800b62a:	46bd      	mov	sp, r7
 800b62c:	bd80      	pop	{r7, pc}
 800b62e:	bf00      	nop
 800b630:	200019b4 	.word	0x200019b4

0800b634 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800b634:	b480      	push	{r7}
 800b636:	b087      	sub	sp, #28
 800b638:	af00      	add	r7, sp, #0
 800b63a:	60f8      	str	r0, [r7, #12]
 800b63c:	60b9      	str	r1, [r7, #8]
 800b63e:	4613      	mov	r3, r2
 800b640:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800b642:	2300      	movs	r3, #0
 800b644:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800b646:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b64a:	4618      	mov	r0, r3
 800b64c:	371c      	adds	r7, #28
 800b64e:	46bd      	mov	sp, r7
 800b650:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b654:	4770      	bx	lr
	...

0800b658 <CDC_Transmit_Is_Busy>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
uint8_t CDC_Transmit_Is_Busy(void)
{
 800b658:	b480      	push	{r7}
 800b65a:	b083      	sub	sp, #12
 800b65c:	af00      	add	r7, sp, #0
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800b65e:	4b09      	ldr	r3, [pc, #36]	@ (800b684 <CDC_Transmit_Is_Busy+0x2c>)
 800b660:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b664:	607b      	str	r3, [r7, #4]
  if (hcdc->TxState != 0)
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d001      	beq.n	800b674 <CDC_Transmit_Is_Busy+0x1c>
  {
    return USBD_BUSY;
 800b670:	2301      	movs	r3, #1
 800b672:	e000      	b.n	800b676 <CDC_Transmit_Is_Busy+0x1e>
  }  
  else
  {
    return USBD_OK;
 800b674:	2300      	movs	r3, #0
  }
}
 800b676:	4618      	mov	r0, r3
 800b678:	370c      	adds	r7, #12
 800b67a:	46bd      	mov	sp, r7
 800b67c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b680:	4770      	bx	lr
 800b682:	bf00      	nop
 800b684:	200019b4 	.word	0x200019b4

0800b688 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b688:	b480      	push	{r7}
 800b68a:	b083      	sub	sp, #12
 800b68c:	af00      	add	r7, sp, #0
 800b68e:	4603      	mov	r3, r0
 800b690:	6039      	str	r1, [r7, #0]
 800b692:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800b694:	683b      	ldr	r3, [r7, #0]
 800b696:	2212      	movs	r2, #18
 800b698:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800b69a:	4b03      	ldr	r3, [pc, #12]	@ (800b6a8 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800b69c:	4618      	mov	r0, r3
 800b69e:	370c      	adds	r7, #12
 800b6a0:	46bd      	mov	sp, r7
 800b6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6a6:	4770      	bx	lr
 800b6a8:	200001e4 	.word	0x200001e4

0800b6ac <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b6ac:	b480      	push	{r7}
 800b6ae:	b083      	sub	sp, #12
 800b6b0:	af00      	add	r7, sp, #0
 800b6b2:	4603      	mov	r3, r0
 800b6b4:	6039      	str	r1, [r7, #0]
 800b6b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b6b8:	683b      	ldr	r3, [r7, #0]
 800b6ba:	2204      	movs	r2, #4
 800b6bc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b6be:	4b03      	ldr	r3, [pc, #12]	@ (800b6cc <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800b6c0:	4618      	mov	r0, r3
 800b6c2:	370c      	adds	r7, #12
 800b6c4:	46bd      	mov	sp, r7
 800b6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ca:	4770      	bx	lr
 800b6cc:	200001f8 	.word	0x200001f8

0800b6d0 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b6d0:	b580      	push	{r7, lr}
 800b6d2:	b082      	sub	sp, #8
 800b6d4:	af00      	add	r7, sp, #0
 800b6d6:	4603      	mov	r3, r0
 800b6d8:	6039      	str	r1, [r7, #0]
 800b6da:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b6dc:	79fb      	ldrb	r3, [r7, #7]
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d105      	bne.n	800b6ee <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800b6e2:	683a      	ldr	r2, [r7, #0]
 800b6e4:	4907      	ldr	r1, [pc, #28]	@ (800b704 <USBD_CDC_ProductStrDescriptor+0x34>)
 800b6e6:	4808      	ldr	r0, [pc, #32]	@ (800b708 <USBD_CDC_ProductStrDescriptor+0x38>)
 800b6e8:	f7ff fddf 	bl	800b2aa <USBD_GetString>
 800b6ec:	e004      	b.n	800b6f8 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800b6ee:	683a      	ldr	r2, [r7, #0]
 800b6f0:	4904      	ldr	r1, [pc, #16]	@ (800b704 <USBD_CDC_ProductStrDescriptor+0x34>)
 800b6f2:	4805      	ldr	r0, [pc, #20]	@ (800b708 <USBD_CDC_ProductStrDescriptor+0x38>)
 800b6f4:	f7ff fdd9 	bl	800b2aa <USBD_GetString>
  }
  return USBD_StrDesc;
 800b6f8:	4b02      	ldr	r3, [pc, #8]	@ (800b704 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800b6fa:	4618      	mov	r0, r3
 800b6fc:	3708      	adds	r7, #8
 800b6fe:	46bd      	mov	sp, r7
 800b700:	bd80      	pop	{r7, pc}
 800b702:	bf00      	nop
 800b704:	20002484 	.word	0x20002484
 800b708:	0800d034 	.word	0x0800d034

0800b70c <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b70c:	b580      	push	{r7, lr}
 800b70e:	b082      	sub	sp, #8
 800b710:	af00      	add	r7, sp, #0
 800b712:	4603      	mov	r3, r0
 800b714:	6039      	str	r1, [r7, #0]
 800b716:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b718:	683a      	ldr	r2, [r7, #0]
 800b71a:	4904      	ldr	r1, [pc, #16]	@ (800b72c <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800b71c:	4804      	ldr	r0, [pc, #16]	@ (800b730 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800b71e:	f7ff fdc4 	bl	800b2aa <USBD_GetString>
  return USBD_StrDesc;
 800b722:	4b02      	ldr	r3, [pc, #8]	@ (800b72c <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800b724:	4618      	mov	r0, r3
 800b726:	3708      	adds	r7, #8
 800b728:	46bd      	mov	sp, r7
 800b72a:	bd80      	pop	{r7, pc}
 800b72c:	20002484 	.word	0x20002484
 800b730:	0800d04c 	.word	0x0800d04c

0800b734 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b734:	b580      	push	{r7, lr}
 800b736:	b082      	sub	sp, #8
 800b738:	af00      	add	r7, sp, #0
 800b73a:	4603      	mov	r3, r0
 800b73c:	6039      	str	r1, [r7, #0]
 800b73e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b740:	683b      	ldr	r3, [r7, #0]
 800b742:	221a      	movs	r2, #26
 800b744:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b746:	f000 f843 	bl	800b7d0 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800b74a:	4b02      	ldr	r3, [pc, #8]	@ (800b754 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800b74c:	4618      	mov	r0, r3
 800b74e:	3708      	adds	r7, #8
 800b750:	46bd      	mov	sp, r7
 800b752:	bd80      	pop	{r7, pc}
 800b754:	200001fc 	.word	0x200001fc

0800b758 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b758:	b580      	push	{r7, lr}
 800b75a:	b082      	sub	sp, #8
 800b75c:	af00      	add	r7, sp, #0
 800b75e:	4603      	mov	r3, r0
 800b760:	6039      	str	r1, [r7, #0]
 800b762:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b764:	79fb      	ldrb	r3, [r7, #7]
 800b766:	2b00      	cmp	r3, #0
 800b768:	d105      	bne.n	800b776 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800b76a:	683a      	ldr	r2, [r7, #0]
 800b76c:	4907      	ldr	r1, [pc, #28]	@ (800b78c <USBD_CDC_ConfigStrDescriptor+0x34>)
 800b76e:	4808      	ldr	r0, [pc, #32]	@ (800b790 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800b770:	f7ff fd9b 	bl	800b2aa <USBD_GetString>
 800b774:	e004      	b.n	800b780 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800b776:	683a      	ldr	r2, [r7, #0]
 800b778:	4904      	ldr	r1, [pc, #16]	@ (800b78c <USBD_CDC_ConfigStrDescriptor+0x34>)
 800b77a:	4805      	ldr	r0, [pc, #20]	@ (800b790 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800b77c:	f7ff fd95 	bl	800b2aa <USBD_GetString>
  }
  return USBD_StrDesc;
 800b780:	4b02      	ldr	r3, [pc, #8]	@ (800b78c <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800b782:	4618      	mov	r0, r3
 800b784:	3708      	adds	r7, #8
 800b786:	46bd      	mov	sp, r7
 800b788:	bd80      	pop	{r7, pc}
 800b78a:	bf00      	nop
 800b78c:	20002484 	.word	0x20002484
 800b790:	0800d060 	.word	0x0800d060

0800b794 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b794:	b580      	push	{r7, lr}
 800b796:	b082      	sub	sp, #8
 800b798:	af00      	add	r7, sp, #0
 800b79a:	4603      	mov	r3, r0
 800b79c:	6039      	str	r1, [r7, #0]
 800b79e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b7a0:	79fb      	ldrb	r3, [r7, #7]
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d105      	bne.n	800b7b2 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800b7a6:	683a      	ldr	r2, [r7, #0]
 800b7a8:	4907      	ldr	r1, [pc, #28]	@ (800b7c8 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800b7aa:	4808      	ldr	r0, [pc, #32]	@ (800b7cc <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800b7ac:	f7ff fd7d 	bl	800b2aa <USBD_GetString>
 800b7b0:	e004      	b.n	800b7bc <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800b7b2:	683a      	ldr	r2, [r7, #0]
 800b7b4:	4904      	ldr	r1, [pc, #16]	@ (800b7c8 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800b7b6:	4805      	ldr	r0, [pc, #20]	@ (800b7cc <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800b7b8:	f7ff fd77 	bl	800b2aa <USBD_GetString>
  }
  return USBD_StrDesc;
 800b7bc:	4b02      	ldr	r3, [pc, #8]	@ (800b7c8 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800b7be:	4618      	mov	r0, r3
 800b7c0:	3708      	adds	r7, #8
 800b7c2:	46bd      	mov	sp, r7
 800b7c4:	bd80      	pop	{r7, pc}
 800b7c6:	bf00      	nop
 800b7c8:	20002484 	.word	0x20002484
 800b7cc:	0800d06c 	.word	0x0800d06c

0800b7d0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b7d0:	b580      	push	{r7, lr}
 800b7d2:	b084      	sub	sp, #16
 800b7d4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b7d6:	4b0f      	ldr	r3, [pc, #60]	@ (800b814 <Get_SerialNum+0x44>)
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b7dc:	4b0e      	ldr	r3, [pc, #56]	@ (800b818 <Get_SerialNum+0x48>)
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b7e2:	4b0e      	ldr	r3, [pc, #56]	@ (800b81c <Get_SerialNum+0x4c>)
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b7e8:	68fa      	ldr	r2, [r7, #12]
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	4413      	add	r3, r2
 800b7ee:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d009      	beq.n	800b80a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b7f6:	2208      	movs	r2, #8
 800b7f8:	4909      	ldr	r1, [pc, #36]	@ (800b820 <Get_SerialNum+0x50>)
 800b7fa:	68f8      	ldr	r0, [r7, #12]
 800b7fc:	f000 f814 	bl	800b828 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b800:	2204      	movs	r2, #4
 800b802:	4908      	ldr	r1, [pc, #32]	@ (800b824 <Get_SerialNum+0x54>)
 800b804:	68b8      	ldr	r0, [r7, #8]
 800b806:	f000 f80f 	bl	800b828 <IntToUnicode>
  }
}
 800b80a:	bf00      	nop
 800b80c:	3710      	adds	r7, #16
 800b80e:	46bd      	mov	sp, r7
 800b810:	bd80      	pop	{r7, pc}
 800b812:	bf00      	nop
 800b814:	1fff7590 	.word	0x1fff7590
 800b818:	1fff7594 	.word	0x1fff7594
 800b81c:	1fff7598 	.word	0x1fff7598
 800b820:	200001fe 	.word	0x200001fe
 800b824:	2000020e 	.word	0x2000020e

0800b828 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b828:	b480      	push	{r7}
 800b82a:	b087      	sub	sp, #28
 800b82c:	af00      	add	r7, sp, #0
 800b82e:	60f8      	str	r0, [r7, #12]
 800b830:	60b9      	str	r1, [r7, #8]
 800b832:	4613      	mov	r3, r2
 800b834:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b836:	2300      	movs	r3, #0
 800b838:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b83a:	2300      	movs	r3, #0
 800b83c:	75fb      	strb	r3, [r7, #23]
 800b83e:	e027      	b.n	800b890 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	0f1b      	lsrs	r3, r3, #28
 800b844:	2b09      	cmp	r3, #9
 800b846:	d80b      	bhi.n	800b860 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	0f1b      	lsrs	r3, r3, #28
 800b84c:	b2da      	uxtb	r2, r3
 800b84e:	7dfb      	ldrb	r3, [r7, #23]
 800b850:	005b      	lsls	r3, r3, #1
 800b852:	4619      	mov	r1, r3
 800b854:	68bb      	ldr	r3, [r7, #8]
 800b856:	440b      	add	r3, r1
 800b858:	3230      	adds	r2, #48	@ 0x30
 800b85a:	b2d2      	uxtb	r2, r2
 800b85c:	701a      	strb	r2, [r3, #0]
 800b85e:	e00a      	b.n	800b876 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	0f1b      	lsrs	r3, r3, #28
 800b864:	b2da      	uxtb	r2, r3
 800b866:	7dfb      	ldrb	r3, [r7, #23]
 800b868:	005b      	lsls	r3, r3, #1
 800b86a:	4619      	mov	r1, r3
 800b86c:	68bb      	ldr	r3, [r7, #8]
 800b86e:	440b      	add	r3, r1
 800b870:	3237      	adds	r2, #55	@ 0x37
 800b872:	b2d2      	uxtb	r2, r2
 800b874:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	011b      	lsls	r3, r3, #4
 800b87a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b87c:	7dfb      	ldrb	r3, [r7, #23]
 800b87e:	005b      	lsls	r3, r3, #1
 800b880:	3301      	adds	r3, #1
 800b882:	68ba      	ldr	r2, [r7, #8]
 800b884:	4413      	add	r3, r2
 800b886:	2200      	movs	r2, #0
 800b888:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b88a:	7dfb      	ldrb	r3, [r7, #23]
 800b88c:	3301      	adds	r3, #1
 800b88e:	75fb      	strb	r3, [r7, #23]
 800b890:	7dfa      	ldrb	r2, [r7, #23]
 800b892:	79fb      	ldrb	r3, [r7, #7]
 800b894:	429a      	cmp	r2, r3
 800b896:	d3d3      	bcc.n	800b840 <IntToUnicode+0x18>
  }
}
 800b898:	bf00      	nop
 800b89a:	bf00      	nop
 800b89c:	371c      	adds	r7, #28
 800b89e:	46bd      	mov	sp, r7
 800b8a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8a4:	4770      	bx	lr
	...

0800b8a8 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b8a8:	b580      	push	{r7, lr}
 800b8aa:	b094      	sub	sp, #80	@ 0x50
 800b8ac:	af00      	add	r7, sp, #0
 800b8ae:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800b8b0:	f107 030c 	add.w	r3, r7, #12
 800b8b4:	2244      	movs	r2, #68	@ 0x44
 800b8b6:	2100      	movs	r1, #0
 800b8b8:	4618      	mov	r0, r3
 800b8ba:	f000 fd03 	bl	800c2c4 <memset>
  if(pcdHandle->Instance==USB)
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	4a15      	ldr	r2, [pc, #84]	@ (800b918 <HAL_PCD_MspInit+0x70>)
 800b8c4:	4293      	cmp	r3, r2
 800b8c6:	d122      	bne.n	800b90e <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800b8c8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800b8cc:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800b8ce:	2300      	movs	r3, #0
 800b8d0:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800b8d2:	f107 030c 	add.w	r3, r7, #12
 800b8d6:	4618      	mov	r0, r3
 800b8d8:	f7f9 fd6a 	bl	80053b0 <HAL_RCCEx_PeriphCLKConfig>
 800b8dc:	4603      	mov	r3, r0
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d001      	beq.n	800b8e6 <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 800b8e2:	f7f5 fe4c 	bl	800157e <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800b8e6:	4b0d      	ldr	r3, [pc, #52]	@ (800b91c <HAL_PCD_MspInit+0x74>)
 800b8e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b8ea:	4a0c      	ldr	r2, [pc, #48]	@ (800b91c <HAL_PCD_MspInit+0x74>)
 800b8ec:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800b8f0:	6593      	str	r3, [r2, #88]	@ 0x58
 800b8f2:	4b0a      	ldr	r3, [pc, #40]	@ (800b91c <HAL_PCD_MspInit+0x74>)
 800b8f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b8f6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b8fa:	60bb      	str	r3, [r7, #8]
 800b8fc:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800b8fe:	2200      	movs	r2, #0
 800b900:	2100      	movs	r1, #0
 800b902:	2014      	movs	r0, #20
 800b904:	f7f6 fd33 	bl	800236e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800b908:	2014      	movs	r0, #20
 800b90a:	f7f6 fd4a 	bl	80023a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800b90e:	bf00      	nop
 800b910:	3750      	adds	r7, #80	@ 0x50
 800b912:	46bd      	mov	sp, r7
 800b914:	bd80      	pop	{r7, pc}
 800b916:	bf00      	nop
 800b918:	40005c00 	.word	0x40005c00
 800b91c:	40021000 	.word	0x40021000

0800b920 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b920:	b580      	push	{r7, lr}
 800b922:	b082      	sub	sp, #8
 800b924:	af00      	add	r7, sp, #0
 800b926:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800b934:	4619      	mov	r1, r3
 800b936:	4610      	mov	r0, r2
 800b938:	f7fe fd1a 	bl	800a370 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800b93c:	bf00      	nop
 800b93e:	3708      	adds	r7, #8
 800b940:	46bd      	mov	sp, r7
 800b942:	bd80      	pop	{r7, pc}

0800b944 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b944:	b580      	push	{r7, lr}
 800b946:	b082      	sub	sp, #8
 800b948:	af00      	add	r7, sp, #0
 800b94a:	6078      	str	r0, [r7, #4]
 800b94c:	460b      	mov	r3, r1
 800b94e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800b956:	78fa      	ldrb	r2, [r7, #3]
 800b958:	6879      	ldr	r1, [r7, #4]
 800b95a:	4613      	mov	r3, r2
 800b95c:	009b      	lsls	r3, r3, #2
 800b95e:	4413      	add	r3, r2
 800b960:	00db      	lsls	r3, r3, #3
 800b962:	440b      	add	r3, r1
 800b964:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b968:	681a      	ldr	r2, [r3, #0]
 800b96a:	78fb      	ldrb	r3, [r7, #3]
 800b96c:	4619      	mov	r1, r3
 800b96e:	f7fe fd54 	bl	800a41a <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800b972:	bf00      	nop
 800b974:	3708      	adds	r7, #8
 800b976:	46bd      	mov	sp, r7
 800b978:	bd80      	pop	{r7, pc}

0800b97a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b97a:	b580      	push	{r7, lr}
 800b97c:	b082      	sub	sp, #8
 800b97e:	af00      	add	r7, sp, #0
 800b980:	6078      	str	r0, [r7, #4]
 800b982:	460b      	mov	r3, r1
 800b984:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800b98c:	78fa      	ldrb	r2, [r7, #3]
 800b98e:	6879      	ldr	r1, [r7, #4]
 800b990:	4613      	mov	r3, r2
 800b992:	009b      	lsls	r3, r3, #2
 800b994:	4413      	add	r3, r2
 800b996:	00db      	lsls	r3, r3, #3
 800b998:	440b      	add	r3, r1
 800b99a:	3324      	adds	r3, #36	@ 0x24
 800b99c:	681a      	ldr	r2, [r3, #0]
 800b99e:	78fb      	ldrb	r3, [r7, #3]
 800b9a0:	4619      	mov	r1, r3
 800b9a2:	f7fe fd9d 	bl	800a4e0 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800b9a6:	bf00      	nop
 800b9a8:	3708      	adds	r7, #8
 800b9aa:	46bd      	mov	sp, r7
 800b9ac:	bd80      	pop	{r7, pc}

0800b9ae <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b9ae:	b580      	push	{r7, lr}
 800b9b0:	b082      	sub	sp, #8
 800b9b2:	af00      	add	r7, sp, #0
 800b9b4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800b9bc:	4618      	mov	r0, r3
 800b9be:	f7fe feb1 	bl	800a724 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800b9c2:	bf00      	nop
 800b9c4:	3708      	adds	r7, #8
 800b9c6:	46bd      	mov	sp, r7
 800b9c8:	bd80      	pop	{r7, pc}

0800b9ca <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b9ca:	b580      	push	{r7, lr}
 800b9cc:	b084      	sub	sp, #16
 800b9ce:	af00      	add	r7, sp, #0
 800b9d0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b9d2:	2301      	movs	r3, #1
 800b9d4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	795b      	ldrb	r3, [r3, #5]
 800b9da:	2b02      	cmp	r3, #2
 800b9dc:	d001      	beq.n	800b9e2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800b9de:	f7f5 fdce 	bl	800157e <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800b9e8:	7bfa      	ldrb	r2, [r7, #15]
 800b9ea:	4611      	mov	r1, r2
 800b9ec:	4618      	mov	r0, r3
 800b9ee:	f7fe fe5b 	bl	800a6a8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800b9f8:	4618      	mov	r0, r3
 800b9fa:	f7fe fe07 	bl	800a60c <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800b9fe:	bf00      	nop
 800ba00:	3710      	adds	r7, #16
 800ba02:	46bd      	mov	sp, r7
 800ba04:	bd80      	pop	{r7, pc}
	...

0800ba08 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ba08:	b580      	push	{r7, lr}
 800ba0a:	b082      	sub	sp, #8
 800ba0c:	af00      	add	r7, sp, #0
 800ba0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800ba16:	4618      	mov	r0, r3
 800ba18:	f7fe fe56 	bl	800a6c8 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	7a5b      	ldrb	r3, [r3, #9]
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d005      	beq.n	800ba30 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ba24:	4b04      	ldr	r3, [pc, #16]	@ (800ba38 <HAL_PCD_SuspendCallback+0x30>)
 800ba26:	691b      	ldr	r3, [r3, #16]
 800ba28:	4a03      	ldr	r2, [pc, #12]	@ (800ba38 <HAL_PCD_SuspendCallback+0x30>)
 800ba2a:	f043 0306 	orr.w	r3, r3, #6
 800ba2e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800ba30:	bf00      	nop
 800ba32:	3708      	adds	r7, #8
 800ba34:	46bd      	mov	sp, r7
 800ba36:	bd80      	pop	{r7, pc}
 800ba38:	e000ed00 	.word	0xe000ed00

0800ba3c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ba3c:	b580      	push	{r7, lr}
 800ba3e:	b082      	sub	sp, #8
 800ba40:	af00      	add	r7, sp, #0
 800ba42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	7a5b      	ldrb	r3, [r3, #9]
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d007      	beq.n	800ba5c <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ba4c:	4b08      	ldr	r3, [pc, #32]	@ (800ba70 <HAL_PCD_ResumeCallback+0x34>)
 800ba4e:	691b      	ldr	r3, [r3, #16]
 800ba50:	4a07      	ldr	r2, [pc, #28]	@ (800ba70 <HAL_PCD_ResumeCallback+0x34>)
 800ba52:	f023 0306 	bic.w	r3, r3, #6
 800ba56:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800ba58:	f000 f9f8 	bl	800be4c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800ba62:	4618      	mov	r0, r3
 800ba64:	f7fe fe46 	bl	800a6f4 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800ba68:	bf00      	nop
 800ba6a:	3708      	adds	r7, #8
 800ba6c:	46bd      	mov	sp, r7
 800ba6e:	bd80      	pop	{r7, pc}
 800ba70:	e000ed00 	.word	0xe000ed00

0800ba74 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ba74:	b580      	push	{r7, lr}
 800ba76:	b082      	sub	sp, #8
 800ba78:	af00      	add	r7, sp, #0
 800ba7a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800ba7c:	4a2b      	ldr	r2, [pc, #172]	@ (800bb2c <USBD_LL_Init+0xb8>)
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	4a29      	ldr	r2, [pc, #164]	@ (800bb2c <USBD_LL_Init+0xb8>)
 800ba88:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4

  hpcd_USB_FS.Instance = USB;
 800ba8c:	4b27      	ldr	r3, [pc, #156]	@ (800bb2c <USBD_LL_Init+0xb8>)
 800ba8e:	4a28      	ldr	r2, [pc, #160]	@ (800bb30 <USBD_LL_Init+0xbc>)
 800ba90:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800ba92:	4b26      	ldr	r3, [pc, #152]	@ (800bb2c <USBD_LL_Init+0xb8>)
 800ba94:	2208      	movs	r2, #8
 800ba96:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800ba98:	4b24      	ldr	r3, [pc, #144]	@ (800bb2c <USBD_LL_Init+0xb8>)
 800ba9a:	2202      	movs	r2, #2
 800ba9c:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800ba9e:	4b23      	ldr	r3, [pc, #140]	@ (800bb2c <USBD_LL_Init+0xb8>)
 800baa0:	2202      	movs	r2, #2
 800baa2:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800baa4:	4b21      	ldr	r3, [pc, #132]	@ (800bb2c <USBD_LL_Init+0xb8>)
 800baa6:	2200      	movs	r2, #0
 800baa8:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800baaa:	4b20      	ldr	r3, [pc, #128]	@ (800bb2c <USBD_LL_Init+0xb8>)
 800baac:	2200      	movs	r2, #0
 800baae:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800bab0:	4b1e      	ldr	r3, [pc, #120]	@ (800bb2c <USBD_LL_Init+0xb8>)
 800bab2:	2200      	movs	r2, #0
 800bab4:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800bab6:	4b1d      	ldr	r3, [pc, #116]	@ (800bb2c <USBD_LL_Init+0xb8>)
 800bab8:	2200      	movs	r2, #0
 800baba:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800babc:	481b      	ldr	r0, [pc, #108]	@ (800bb2c <USBD_LL_Init+0xb8>)
 800babe:	f7f7 f994 	bl	8002dea <HAL_PCD_Init>
 800bac2:	4603      	mov	r3, r0
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d001      	beq.n	800bacc <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800bac8:	f7f5 fd59 	bl	800157e <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800bad2:	2318      	movs	r3, #24
 800bad4:	2200      	movs	r2, #0
 800bad6:	2100      	movs	r1, #0
 800bad8:	f7f8 fe1b 	bl	8004712 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800bae2:	2358      	movs	r3, #88	@ 0x58
 800bae4:	2200      	movs	r2, #0
 800bae6:	2180      	movs	r1, #128	@ 0x80
 800bae8:	f7f8 fe13 	bl	8004712 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800baf2:	23c0      	movs	r3, #192	@ 0xc0
 800baf4:	2200      	movs	r2, #0
 800baf6:	2181      	movs	r1, #129	@ 0x81
 800baf8:	f7f8 fe0b 	bl	8004712 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800bb02:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800bb06:	2200      	movs	r2, #0
 800bb08:	2101      	movs	r1, #1
 800bb0a:	f7f8 fe02 	bl	8004712 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800bb14:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800bb18:	2200      	movs	r2, #0
 800bb1a:	2182      	movs	r1, #130	@ 0x82
 800bb1c:	f7f8 fdf9 	bl	8004712 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800bb20:	2300      	movs	r3, #0
}
 800bb22:	4618      	mov	r0, r3
 800bb24:	3708      	adds	r7, #8
 800bb26:	46bd      	mov	sp, r7
 800bb28:	bd80      	pop	{r7, pc}
 800bb2a:	bf00      	nop
 800bb2c:	20002684 	.word	0x20002684
 800bb30:	40005c00 	.word	0x40005c00

0800bb34 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800bb34:	b580      	push	{r7, lr}
 800bb36:	b084      	sub	sp, #16
 800bb38:	af00      	add	r7, sp, #0
 800bb3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bb3c:	2300      	movs	r3, #0
 800bb3e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bb40:	2300      	movs	r3, #0
 800bb42:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800bb4a:	4618      	mov	r0, r3
 800bb4c:	f7f7 fa1b 	bl	8002f86 <HAL_PCD_Start>
 800bb50:	4603      	mov	r3, r0
 800bb52:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bb54:	7bfb      	ldrb	r3, [r7, #15]
 800bb56:	4618      	mov	r0, r3
 800bb58:	f000 f97e 	bl	800be58 <USBD_Get_USB_Status>
 800bb5c:	4603      	mov	r3, r0
 800bb5e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bb60:	7bbb      	ldrb	r3, [r7, #14]
}
 800bb62:	4618      	mov	r0, r3
 800bb64:	3710      	adds	r7, #16
 800bb66:	46bd      	mov	sp, r7
 800bb68:	bd80      	pop	{r7, pc}

0800bb6a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800bb6a:	b580      	push	{r7, lr}
 800bb6c:	b084      	sub	sp, #16
 800bb6e:	af00      	add	r7, sp, #0
 800bb70:	6078      	str	r0, [r7, #4]
 800bb72:	4608      	mov	r0, r1
 800bb74:	4611      	mov	r1, r2
 800bb76:	461a      	mov	r2, r3
 800bb78:	4603      	mov	r3, r0
 800bb7a:	70fb      	strb	r3, [r7, #3]
 800bb7c:	460b      	mov	r3, r1
 800bb7e:	70bb      	strb	r3, [r7, #2]
 800bb80:	4613      	mov	r3, r2
 800bb82:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bb84:	2300      	movs	r3, #0
 800bb86:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bb88:	2300      	movs	r3, #0
 800bb8a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800bb92:	78bb      	ldrb	r3, [r7, #2]
 800bb94:	883a      	ldrh	r2, [r7, #0]
 800bb96:	78f9      	ldrb	r1, [r7, #3]
 800bb98:	f7f7 fb62 	bl	8003260 <HAL_PCD_EP_Open>
 800bb9c:	4603      	mov	r3, r0
 800bb9e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bba0:	7bfb      	ldrb	r3, [r7, #15]
 800bba2:	4618      	mov	r0, r3
 800bba4:	f000 f958 	bl	800be58 <USBD_Get_USB_Status>
 800bba8:	4603      	mov	r3, r0
 800bbaa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bbac:	7bbb      	ldrb	r3, [r7, #14]
}
 800bbae:	4618      	mov	r0, r3
 800bbb0:	3710      	adds	r7, #16
 800bbb2:	46bd      	mov	sp, r7
 800bbb4:	bd80      	pop	{r7, pc}

0800bbb6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bbb6:	b580      	push	{r7, lr}
 800bbb8:	b084      	sub	sp, #16
 800bbba:	af00      	add	r7, sp, #0
 800bbbc:	6078      	str	r0, [r7, #4]
 800bbbe:	460b      	mov	r3, r1
 800bbc0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bbc2:	2300      	movs	r3, #0
 800bbc4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bbc6:	2300      	movs	r3, #0
 800bbc8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800bbd0:	78fa      	ldrb	r2, [r7, #3]
 800bbd2:	4611      	mov	r1, r2
 800bbd4:	4618      	mov	r0, r3
 800bbd6:	f7f7 fba2 	bl	800331e <HAL_PCD_EP_Close>
 800bbda:	4603      	mov	r3, r0
 800bbdc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bbde:	7bfb      	ldrb	r3, [r7, #15]
 800bbe0:	4618      	mov	r0, r3
 800bbe2:	f000 f939 	bl	800be58 <USBD_Get_USB_Status>
 800bbe6:	4603      	mov	r3, r0
 800bbe8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bbea:	7bbb      	ldrb	r3, [r7, #14]
}
 800bbec:	4618      	mov	r0, r3
 800bbee:	3710      	adds	r7, #16
 800bbf0:	46bd      	mov	sp, r7
 800bbf2:	bd80      	pop	{r7, pc}

0800bbf4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bbf4:	b580      	push	{r7, lr}
 800bbf6:	b084      	sub	sp, #16
 800bbf8:	af00      	add	r7, sp, #0
 800bbfa:	6078      	str	r0, [r7, #4]
 800bbfc:	460b      	mov	r3, r1
 800bbfe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bc00:	2300      	movs	r3, #0
 800bc02:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bc04:	2300      	movs	r3, #0
 800bc06:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800bc0e:	78fa      	ldrb	r2, [r7, #3]
 800bc10:	4611      	mov	r1, r2
 800bc12:	4618      	mov	r0, r3
 800bc14:	f7f7 fc4b 	bl	80034ae <HAL_PCD_EP_SetStall>
 800bc18:	4603      	mov	r3, r0
 800bc1a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bc1c:	7bfb      	ldrb	r3, [r7, #15]
 800bc1e:	4618      	mov	r0, r3
 800bc20:	f000 f91a 	bl	800be58 <USBD_Get_USB_Status>
 800bc24:	4603      	mov	r3, r0
 800bc26:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bc28:	7bbb      	ldrb	r3, [r7, #14]
}
 800bc2a:	4618      	mov	r0, r3
 800bc2c:	3710      	adds	r7, #16
 800bc2e:	46bd      	mov	sp, r7
 800bc30:	bd80      	pop	{r7, pc}

0800bc32 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bc32:	b580      	push	{r7, lr}
 800bc34:	b084      	sub	sp, #16
 800bc36:	af00      	add	r7, sp, #0
 800bc38:	6078      	str	r0, [r7, #4]
 800bc3a:	460b      	mov	r3, r1
 800bc3c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bc3e:	2300      	movs	r3, #0
 800bc40:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bc42:	2300      	movs	r3, #0
 800bc44:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800bc4c:	78fa      	ldrb	r2, [r7, #3]
 800bc4e:	4611      	mov	r1, r2
 800bc50:	4618      	mov	r0, r3
 800bc52:	f7f7 fc7e 	bl	8003552 <HAL_PCD_EP_ClrStall>
 800bc56:	4603      	mov	r3, r0
 800bc58:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bc5a:	7bfb      	ldrb	r3, [r7, #15]
 800bc5c:	4618      	mov	r0, r3
 800bc5e:	f000 f8fb 	bl	800be58 <USBD_Get_USB_Status>
 800bc62:	4603      	mov	r3, r0
 800bc64:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bc66:	7bbb      	ldrb	r3, [r7, #14]
}
 800bc68:	4618      	mov	r0, r3
 800bc6a:	3710      	adds	r7, #16
 800bc6c:	46bd      	mov	sp, r7
 800bc6e:	bd80      	pop	{r7, pc}

0800bc70 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bc70:	b480      	push	{r7}
 800bc72:	b085      	sub	sp, #20
 800bc74:	af00      	add	r7, sp, #0
 800bc76:	6078      	str	r0, [r7, #4]
 800bc78:	460b      	mov	r3, r1
 800bc7a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800bc82:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800bc84:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	da0b      	bge.n	800bca4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800bc8c:	78fb      	ldrb	r3, [r7, #3]
 800bc8e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800bc92:	68f9      	ldr	r1, [r7, #12]
 800bc94:	4613      	mov	r3, r2
 800bc96:	009b      	lsls	r3, r3, #2
 800bc98:	4413      	add	r3, r2
 800bc9a:	00db      	lsls	r3, r3, #3
 800bc9c:	440b      	add	r3, r1
 800bc9e:	3312      	adds	r3, #18
 800bca0:	781b      	ldrb	r3, [r3, #0]
 800bca2:	e00b      	b.n	800bcbc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800bca4:	78fb      	ldrb	r3, [r7, #3]
 800bca6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800bcaa:	68f9      	ldr	r1, [r7, #12]
 800bcac:	4613      	mov	r3, r2
 800bcae:	009b      	lsls	r3, r3, #2
 800bcb0:	4413      	add	r3, r2
 800bcb2:	00db      	lsls	r3, r3, #3
 800bcb4:	440b      	add	r3, r1
 800bcb6:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800bcba:	781b      	ldrb	r3, [r3, #0]
  }
}
 800bcbc:	4618      	mov	r0, r3
 800bcbe:	3714      	adds	r7, #20
 800bcc0:	46bd      	mov	sp, r7
 800bcc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcc6:	4770      	bx	lr

0800bcc8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800bcc8:	b580      	push	{r7, lr}
 800bcca:	b084      	sub	sp, #16
 800bccc:	af00      	add	r7, sp, #0
 800bcce:	6078      	str	r0, [r7, #4]
 800bcd0:	460b      	mov	r3, r1
 800bcd2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bcd4:	2300      	movs	r3, #0
 800bcd6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bcd8:	2300      	movs	r3, #0
 800bcda:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800bce2:	78fa      	ldrb	r2, [r7, #3]
 800bce4:	4611      	mov	r1, r2
 800bce6:	4618      	mov	r0, r3
 800bce8:	f7f7 fa96 	bl	8003218 <HAL_PCD_SetAddress>
 800bcec:	4603      	mov	r3, r0
 800bcee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bcf0:	7bfb      	ldrb	r3, [r7, #15]
 800bcf2:	4618      	mov	r0, r3
 800bcf4:	f000 f8b0 	bl	800be58 <USBD_Get_USB_Status>
 800bcf8:	4603      	mov	r3, r0
 800bcfa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bcfc:	7bbb      	ldrb	r3, [r7, #14]
}
 800bcfe:	4618      	mov	r0, r3
 800bd00:	3710      	adds	r7, #16
 800bd02:	46bd      	mov	sp, r7
 800bd04:	bd80      	pop	{r7, pc}

0800bd06 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800bd06:	b580      	push	{r7, lr}
 800bd08:	b086      	sub	sp, #24
 800bd0a:	af00      	add	r7, sp, #0
 800bd0c:	60f8      	str	r0, [r7, #12]
 800bd0e:	607a      	str	r2, [r7, #4]
 800bd10:	603b      	str	r3, [r7, #0]
 800bd12:	460b      	mov	r3, r1
 800bd14:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bd16:	2300      	movs	r3, #0
 800bd18:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bd1a:	2300      	movs	r3, #0
 800bd1c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800bd24:	7af9      	ldrb	r1, [r7, #11]
 800bd26:	683b      	ldr	r3, [r7, #0]
 800bd28:	687a      	ldr	r2, [r7, #4]
 800bd2a:	f7f7 fb89 	bl	8003440 <HAL_PCD_EP_Transmit>
 800bd2e:	4603      	mov	r3, r0
 800bd30:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bd32:	7dfb      	ldrb	r3, [r7, #23]
 800bd34:	4618      	mov	r0, r3
 800bd36:	f000 f88f 	bl	800be58 <USBD_Get_USB_Status>
 800bd3a:	4603      	mov	r3, r0
 800bd3c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bd3e:	7dbb      	ldrb	r3, [r7, #22]
}
 800bd40:	4618      	mov	r0, r3
 800bd42:	3718      	adds	r7, #24
 800bd44:	46bd      	mov	sp, r7
 800bd46:	bd80      	pop	{r7, pc}

0800bd48 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800bd48:	b580      	push	{r7, lr}
 800bd4a:	b086      	sub	sp, #24
 800bd4c:	af00      	add	r7, sp, #0
 800bd4e:	60f8      	str	r0, [r7, #12]
 800bd50:	607a      	str	r2, [r7, #4]
 800bd52:	603b      	str	r3, [r7, #0]
 800bd54:	460b      	mov	r3, r1
 800bd56:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bd58:	2300      	movs	r3, #0
 800bd5a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bd5c:	2300      	movs	r3, #0
 800bd5e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800bd66:	7af9      	ldrb	r1, [r7, #11]
 800bd68:	683b      	ldr	r3, [r7, #0]
 800bd6a:	687a      	ldr	r2, [r7, #4]
 800bd6c:	f7f7 fb1f 	bl	80033ae <HAL_PCD_EP_Receive>
 800bd70:	4603      	mov	r3, r0
 800bd72:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bd74:	7dfb      	ldrb	r3, [r7, #23]
 800bd76:	4618      	mov	r0, r3
 800bd78:	f000 f86e 	bl	800be58 <USBD_Get_USB_Status>
 800bd7c:	4603      	mov	r3, r0
 800bd7e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bd80:	7dbb      	ldrb	r3, [r7, #22]
}
 800bd82:	4618      	mov	r0, r3
 800bd84:	3718      	adds	r7, #24
 800bd86:	46bd      	mov	sp, r7
 800bd88:	bd80      	pop	{r7, pc}

0800bd8a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bd8a:	b580      	push	{r7, lr}
 800bd8c:	b082      	sub	sp, #8
 800bd8e:	af00      	add	r7, sp, #0
 800bd90:	6078      	str	r0, [r7, #4]
 800bd92:	460b      	mov	r3, r1
 800bd94:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800bd9c:	78fa      	ldrb	r2, [r7, #3]
 800bd9e:	4611      	mov	r1, r2
 800bda0:	4618      	mov	r0, r3
 800bda2:	f7f7 fb35 	bl	8003410 <HAL_PCD_EP_GetRxCount>
 800bda6:	4603      	mov	r3, r0
}
 800bda8:	4618      	mov	r0, r3
 800bdaa:	3708      	adds	r7, #8
 800bdac:	46bd      	mov	sp, r7
 800bdae:	bd80      	pop	{r7, pc}

0800bdb0 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bdb0:	b580      	push	{r7, lr}
 800bdb2:	b082      	sub	sp, #8
 800bdb4:	af00      	add	r7, sp, #0
 800bdb6:	6078      	str	r0, [r7, #4]
 800bdb8:	460b      	mov	r3, r1
 800bdba:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800bdbc:	78fb      	ldrb	r3, [r7, #3]
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d002      	beq.n	800bdc8 <HAL_PCDEx_LPM_Callback+0x18>
 800bdc2:	2b01      	cmp	r3, #1
 800bdc4:	d013      	beq.n	800bdee <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800bdc6:	e023      	b.n	800be10 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	7a5b      	ldrb	r3, [r3, #9]
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d007      	beq.n	800bde0 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800bdd0:	f000 f83c 	bl	800be4c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bdd4:	4b10      	ldr	r3, [pc, #64]	@ (800be18 <HAL_PCDEx_LPM_Callback+0x68>)
 800bdd6:	691b      	ldr	r3, [r3, #16]
 800bdd8:	4a0f      	ldr	r2, [pc, #60]	@ (800be18 <HAL_PCDEx_LPM_Callback+0x68>)
 800bdda:	f023 0306 	bic.w	r3, r3, #6
 800bdde:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800bde6:	4618      	mov	r0, r3
 800bde8:	f7fe fc84 	bl	800a6f4 <USBD_LL_Resume>
    break;
 800bdec:	e010      	b.n	800be10 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800bdf4:	4618      	mov	r0, r3
 800bdf6:	f7fe fc67 	bl	800a6c8 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	7a5b      	ldrb	r3, [r3, #9]
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d005      	beq.n	800be0e <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800be02:	4b05      	ldr	r3, [pc, #20]	@ (800be18 <HAL_PCDEx_LPM_Callback+0x68>)
 800be04:	691b      	ldr	r3, [r3, #16]
 800be06:	4a04      	ldr	r2, [pc, #16]	@ (800be18 <HAL_PCDEx_LPM_Callback+0x68>)
 800be08:	f043 0306 	orr.w	r3, r3, #6
 800be0c:	6113      	str	r3, [r2, #16]
    break;
 800be0e:	bf00      	nop
}
 800be10:	bf00      	nop
 800be12:	3708      	adds	r7, #8
 800be14:	46bd      	mov	sp, r7
 800be16:	bd80      	pop	{r7, pc}
 800be18:	e000ed00 	.word	0xe000ed00

0800be1c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800be1c:	b480      	push	{r7}
 800be1e:	b083      	sub	sp, #12
 800be20:	af00      	add	r7, sp, #0
 800be22:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800be24:	4b03      	ldr	r3, [pc, #12]	@ (800be34 <USBD_static_malloc+0x18>)
}
 800be26:	4618      	mov	r0, r3
 800be28:	370c      	adds	r7, #12
 800be2a:	46bd      	mov	sp, r7
 800be2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be30:	4770      	bx	lr
 800be32:	bf00      	nop
 800be34:	20000b30 	.word	0x20000b30

0800be38 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800be38:	b480      	push	{r7}
 800be3a:	b083      	sub	sp, #12
 800be3c:	af00      	add	r7, sp, #0
 800be3e:	6078      	str	r0, [r7, #4]

}
 800be40:	bf00      	nop
 800be42:	370c      	adds	r7, #12
 800be44:	46bd      	mov	sp, r7
 800be46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be4a:	4770      	bx	lr

0800be4c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800be4c:	b580      	push	{r7, lr}
 800be4e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800be50:	f7f5 fb4a 	bl	80014e8 <SystemClock_Config>
}
 800be54:	bf00      	nop
 800be56:	bd80      	pop	{r7, pc}

0800be58 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800be58:	b480      	push	{r7}
 800be5a:	b085      	sub	sp, #20
 800be5c:	af00      	add	r7, sp, #0
 800be5e:	4603      	mov	r3, r0
 800be60:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800be62:	2300      	movs	r3, #0
 800be64:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800be66:	79fb      	ldrb	r3, [r7, #7]
 800be68:	2b03      	cmp	r3, #3
 800be6a:	d817      	bhi.n	800be9c <USBD_Get_USB_Status+0x44>
 800be6c:	a201      	add	r2, pc, #4	@ (adr r2, 800be74 <USBD_Get_USB_Status+0x1c>)
 800be6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be72:	bf00      	nop
 800be74:	0800be85 	.word	0x0800be85
 800be78:	0800be8b 	.word	0x0800be8b
 800be7c:	0800be91 	.word	0x0800be91
 800be80:	0800be97 	.word	0x0800be97
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800be84:	2300      	movs	r3, #0
 800be86:	73fb      	strb	r3, [r7, #15]
    break;
 800be88:	e00b      	b.n	800bea2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800be8a:	2303      	movs	r3, #3
 800be8c:	73fb      	strb	r3, [r7, #15]
    break;
 800be8e:	e008      	b.n	800bea2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800be90:	2301      	movs	r3, #1
 800be92:	73fb      	strb	r3, [r7, #15]
    break;
 800be94:	e005      	b.n	800bea2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800be96:	2303      	movs	r3, #3
 800be98:	73fb      	strb	r3, [r7, #15]
    break;
 800be9a:	e002      	b.n	800bea2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800be9c:	2303      	movs	r3, #3
 800be9e:	73fb      	strb	r3, [r7, #15]
    break;
 800bea0:	bf00      	nop
  }
  return usb_status;
 800bea2:	7bfb      	ldrb	r3, [r7, #15]
}
 800bea4:	4618      	mov	r0, r3
 800bea6:	3714      	adds	r7, #20
 800bea8:	46bd      	mov	sp, r7
 800beaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beae:	4770      	bx	lr

0800beb0 <std>:
 800beb0:	2300      	movs	r3, #0
 800beb2:	b510      	push	{r4, lr}
 800beb4:	4604      	mov	r4, r0
 800beb6:	e9c0 3300 	strd	r3, r3, [r0]
 800beba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bebe:	6083      	str	r3, [r0, #8]
 800bec0:	8181      	strh	r1, [r0, #12]
 800bec2:	6643      	str	r3, [r0, #100]	@ 0x64
 800bec4:	81c2      	strh	r2, [r0, #14]
 800bec6:	6183      	str	r3, [r0, #24]
 800bec8:	4619      	mov	r1, r3
 800beca:	2208      	movs	r2, #8
 800becc:	305c      	adds	r0, #92	@ 0x5c
 800bece:	f000 f9f9 	bl	800c2c4 <memset>
 800bed2:	4b0d      	ldr	r3, [pc, #52]	@ (800bf08 <std+0x58>)
 800bed4:	6263      	str	r3, [r4, #36]	@ 0x24
 800bed6:	4b0d      	ldr	r3, [pc, #52]	@ (800bf0c <std+0x5c>)
 800bed8:	62a3      	str	r3, [r4, #40]	@ 0x28
 800beda:	4b0d      	ldr	r3, [pc, #52]	@ (800bf10 <std+0x60>)
 800bedc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800bede:	4b0d      	ldr	r3, [pc, #52]	@ (800bf14 <std+0x64>)
 800bee0:	6323      	str	r3, [r4, #48]	@ 0x30
 800bee2:	4b0d      	ldr	r3, [pc, #52]	@ (800bf18 <std+0x68>)
 800bee4:	6224      	str	r4, [r4, #32]
 800bee6:	429c      	cmp	r4, r3
 800bee8:	d006      	beq.n	800bef8 <std+0x48>
 800beea:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800beee:	4294      	cmp	r4, r2
 800bef0:	d002      	beq.n	800bef8 <std+0x48>
 800bef2:	33d0      	adds	r3, #208	@ 0xd0
 800bef4:	429c      	cmp	r4, r3
 800bef6:	d105      	bne.n	800bf04 <std+0x54>
 800bef8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800befc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bf00:	f000 ba58 	b.w	800c3b4 <__retarget_lock_init_recursive>
 800bf04:	bd10      	pop	{r4, pc}
 800bf06:	bf00      	nop
 800bf08:	0800c115 	.word	0x0800c115
 800bf0c:	0800c137 	.word	0x0800c137
 800bf10:	0800c16f 	.word	0x0800c16f
 800bf14:	0800c193 	.word	0x0800c193
 800bf18:	20000d50 	.word	0x20000d50

0800bf1c <stdio_exit_handler>:
 800bf1c:	4a02      	ldr	r2, [pc, #8]	@ (800bf28 <stdio_exit_handler+0xc>)
 800bf1e:	4903      	ldr	r1, [pc, #12]	@ (800bf2c <stdio_exit_handler+0x10>)
 800bf20:	4803      	ldr	r0, [pc, #12]	@ (800bf30 <stdio_exit_handler+0x14>)
 800bf22:	f000 b869 	b.w	800bff8 <_fwalk_sglue>
 800bf26:	bf00      	nop
 800bf28:	20000218 	.word	0x20000218
 800bf2c:	0800cc71 	.word	0x0800cc71
 800bf30:	20000228 	.word	0x20000228

0800bf34 <cleanup_stdio>:
 800bf34:	6841      	ldr	r1, [r0, #4]
 800bf36:	4b0c      	ldr	r3, [pc, #48]	@ (800bf68 <cleanup_stdio+0x34>)
 800bf38:	4299      	cmp	r1, r3
 800bf3a:	b510      	push	{r4, lr}
 800bf3c:	4604      	mov	r4, r0
 800bf3e:	d001      	beq.n	800bf44 <cleanup_stdio+0x10>
 800bf40:	f000 fe96 	bl	800cc70 <_fflush_r>
 800bf44:	68a1      	ldr	r1, [r4, #8]
 800bf46:	4b09      	ldr	r3, [pc, #36]	@ (800bf6c <cleanup_stdio+0x38>)
 800bf48:	4299      	cmp	r1, r3
 800bf4a:	d002      	beq.n	800bf52 <cleanup_stdio+0x1e>
 800bf4c:	4620      	mov	r0, r4
 800bf4e:	f000 fe8f 	bl	800cc70 <_fflush_r>
 800bf52:	68e1      	ldr	r1, [r4, #12]
 800bf54:	4b06      	ldr	r3, [pc, #24]	@ (800bf70 <cleanup_stdio+0x3c>)
 800bf56:	4299      	cmp	r1, r3
 800bf58:	d004      	beq.n	800bf64 <cleanup_stdio+0x30>
 800bf5a:	4620      	mov	r0, r4
 800bf5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bf60:	f000 be86 	b.w	800cc70 <_fflush_r>
 800bf64:	bd10      	pop	{r4, pc}
 800bf66:	bf00      	nop
 800bf68:	20000d50 	.word	0x20000d50
 800bf6c:	20000db8 	.word	0x20000db8
 800bf70:	20000e20 	.word	0x20000e20

0800bf74 <global_stdio_init.part.0>:
 800bf74:	b510      	push	{r4, lr}
 800bf76:	4b0b      	ldr	r3, [pc, #44]	@ (800bfa4 <global_stdio_init.part.0+0x30>)
 800bf78:	4c0b      	ldr	r4, [pc, #44]	@ (800bfa8 <global_stdio_init.part.0+0x34>)
 800bf7a:	4a0c      	ldr	r2, [pc, #48]	@ (800bfac <global_stdio_init.part.0+0x38>)
 800bf7c:	601a      	str	r2, [r3, #0]
 800bf7e:	4620      	mov	r0, r4
 800bf80:	2200      	movs	r2, #0
 800bf82:	2104      	movs	r1, #4
 800bf84:	f7ff ff94 	bl	800beb0 <std>
 800bf88:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800bf8c:	2201      	movs	r2, #1
 800bf8e:	2109      	movs	r1, #9
 800bf90:	f7ff ff8e 	bl	800beb0 <std>
 800bf94:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800bf98:	2202      	movs	r2, #2
 800bf9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bf9e:	2112      	movs	r1, #18
 800bfa0:	f7ff bf86 	b.w	800beb0 <std>
 800bfa4:	20000e88 	.word	0x20000e88
 800bfa8:	20000d50 	.word	0x20000d50
 800bfac:	0800bf1d 	.word	0x0800bf1d

0800bfb0 <__sfp_lock_acquire>:
 800bfb0:	4801      	ldr	r0, [pc, #4]	@ (800bfb8 <__sfp_lock_acquire+0x8>)
 800bfb2:	f000 ba00 	b.w	800c3b6 <__retarget_lock_acquire_recursive>
 800bfb6:	bf00      	nop
 800bfb8:	20000e91 	.word	0x20000e91

0800bfbc <__sfp_lock_release>:
 800bfbc:	4801      	ldr	r0, [pc, #4]	@ (800bfc4 <__sfp_lock_release+0x8>)
 800bfbe:	f000 b9fb 	b.w	800c3b8 <__retarget_lock_release_recursive>
 800bfc2:	bf00      	nop
 800bfc4:	20000e91 	.word	0x20000e91

0800bfc8 <__sinit>:
 800bfc8:	b510      	push	{r4, lr}
 800bfca:	4604      	mov	r4, r0
 800bfcc:	f7ff fff0 	bl	800bfb0 <__sfp_lock_acquire>
 800bfd0:	6a23      	ldr	r3, [r4, #32]
 800bfd2:	b11b      	cbz	r3, 800bfdc <__sinit+0x14>
 800bfd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bfd8:	f7ff bff0 	b.w	800bfbc <__sfp_lock_release>
 800bfdc:	4b04      	ldr	r3, [pc, #16]	@ (800bff0 <__sinit+0x28>)
 800bfde:	6223      	str	r3, [r4, #32]
 800bfe0:	4b04      	ldr	r3, [pc, #16]	@ (800bff4 <__sinit+0x2c>)
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d1f5      	bne.n	800bfd4 <__sinit+0xc>
 800bfe8:	f7ff ffc4 	bl	800bf74 <global_stdio_init.part.0>
 800bfec:	e7f2      	b.n	800bfd4 <__sinit+0xc>
 800bfee:	bf00      	nop
 800bff0:	0800bf35 	.word	0x0800bf35
 800bff4:	20000e88 	.word	0x20000e88

0800bff8 <_fwalk_sglue>:
 800bff8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bffc:	4607      	mov	r7, r0
 800bffe:	4688      	mov	r8, r1
 800c000:	4614      	mov	r4, r2
 800c002:	2600      	movs	r6, #0
 800c004:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c008:	f1b9 0901 	subs.w	r9, r9, #1
 800c00c:	d505      	bpl.n	800c01a <_fwalk_sglue+0x22>
 800c00e:	6824      	ldr	r4, [r4, #0]
 800c010:	2c00      	cmp	r4, #0
 800c012:	d1f7      	bne.n	800c004 <_fwalk_sglue+0xc>
 800c014:	4630      	mov	r0, r6
 800c016:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c01a:	89ab      	ldrh	r3, [r5, #12]
 800c01c:	2b01      	cmp	r3, #1
 800c01e:	d907      	bls.n	800c030 <_fwalk_sglue+0x38>
 800c020:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c024:	3301      	adds	r3, #1
 800c026:	d003      	beq.n	800c030 <_fwalk_sglue+0x38>
 800c028:	4629      	mov	r1, r5
 800c02a:	4638      	mov	r0, r7
 800c02c:	47c0      	blx	r8
 800c02e:	4306      	orrs	r6, r0
 800c030:	3568      	adds	r5, #104	@ 0x68
 800c032:	e7e9      	b.n	800c008 <_fwalk_sglue+0x10>

0800c034 <iprintf>:
 800c034:	b40f      	push	{r0, r1, r2, r3}
 800c036:	b507      	push	{r0, r1, r2, lr}
 800c038:	4906      	ldr	r1, [pc, #24]	@ (800c054 <iprintf+0x20>)
 800c03a:	ab04      	add	r3, sp, #16
 800c03c:	6808      	ldr	r0, [r1, #0]
 800c03e:	f853 2b04 	ldr.w	r2, [r3], #4
 800c042:	6881      	ldr	r1, [r0, #8]
 800c044:	9301      	str	r3, [sp, #4]
 800c046:	f000 fae9 	bl	800c61c <_vfiprintf_r>
 800c04a:	b003      	add	sp, #12
 800c04c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c050:	b004      	add	sp, #16
 800c052:	4770      	bx	lr
 800c054:	20000224 	.word	0x20000224

0800c058 <_puts_r>:
 800c058:	6a03      	ldr	r3, [r0, #32]
 800c05a:	b570      	push	{r4, r5, r6, lr}
 800c05c:	6884      	ldr	r4, [r0, #8]
 800c05e:	4605      	mov	r5, r0
 800c060:	460e      	mov	r6, r1
 800c062:	b90b      	cbnz	r3, 800c068 <_puts_r+0x10>
 800c064:	f7ff ffb0 	bl	800bfc8 <__sinit>
 800c068:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c06a:	07db      	lsls	r3, r3, #31
 800c06c:	d405      	bmi.n	800c07a <_puts_r+0x22>
 800c06e:	89a3      	ldrh	r3, [r4, #12]
 800c070:	0598      	lsls	r0, r3, #22
 800c072:	d402      	bmi.n	800c07a <_puts_r+0x22>
 800c074:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c076:	f000 f99e 	bl	800c3b6 <__retarget_lock_acquire_recursive>
 800c07a:	89a3      	ldrh	r3, [r4, #12]
 800c07c:	0719      	lsls	r1, r3, #28
 800c07e:	d502      	bpl.n	800c086 <_puts_r+0x2e>
 800c080:	6923      	ldr	r3, [r4, #16]
 800c082:	2b00      	cmp	r3, #0
 800c084:	d135      	bne.n	800c0f2 <_puts_r+0x9a>
 800c086:	4621      	mov	r1, r4
 800c088:	4628      	mov	r0, r5
 800c08a:	f000 f8c5 	bl	800c218 <__swsetup_r>
 800c08e:	b380      	cbz	r0, 800c0f2 <_puts_r+0x9a>
 800c090:	f04f 35ff 	mov.w	r5, #4294967295
 800c094:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c096:	07da      	lsls	r2, r3, #31
 800c098:	d405      	bmi.n	800c0a6 <_puts_r+0x4e>
 800c09a:	89a3      	ldrh	r3, [r4, #12]
 800c09c:	059b      	lsls	r3, r3, #22
 800c09e:	d402      	bmi.n	800c0a6 <_puts_r+0x4e>
 800c0a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c0a2:	f000 f989 	bl	800c3b8 <__retarget_lock_release_recursive>
 800c0a6:	4628      	mov	r0, r5
 800c0a8:	bd70      	pop	{r4, r5, r6, pc}
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	da04      	bge.n	800c0b8 <_puts_r+0x60>
 800c0ae:	69a2      	ldr	r2, [r4, #24]
 800c0b0:	429a      	cmp	r2, r3
 800c0b2:	dc17      	bgt.n	800c0e4 <_puts_r+0x8c>
 800c0b4:	290a      	cmp	r1, #10
 800c0b6:	d015      	beq.n	800c0e4 <_puts_r+0x8c>
 800c0b8:	6823      	ldr	r3, [r4, #0]
 800c0ba:	1c5a      	adds	r2, r3, #1
 800c0bc:	6022      	str	r2, [r4, #0]
 800c0be:	7019      	strb	r1, [r3, #0]
 800c0c0:	68a3      	ldr	r3, [r4, #8]
 800c0c2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800c0c6:	3b01      	subs	r3, #1
 800c0c8:	60a3      	str	r3, [r4, #8]
 800c0ca:	2900      	cmp	r1, #0
 800c0cc:	d1ed      	bne.n	800c0aa <_puts_r+0x52>
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	da11      	bge.n	800c0f6 <_puts_r+0x9e>
 800c0d2:	4622      	mov	r2, r4
 800c0d4:	210a      	movs	r1, #10
 800c0d6:	4628      	mov	r0, r5
 800c0d8:	f000 f85f 	bl	800c19a <__swbuf_r>
 800c0dc:	3001      	adds	r0, #1
 800c0de:	d0d7      	beq.n	800c090 <_puts_r+0x38>
 800c0e0:	250a      	movs	r5, #10
 800c0e2:	e7d7      	b.n	800c094 <_puts_r+0x3c>
 800c0e4:	4622      	mov	r2, r4
 800c0e6:	4628      	mov	r0, r5
 800c0e8:	f000 f857 	bl	800c19a <__swbuf_r>
 800c0ec:	3001      	adds	r0, #1
 800c0ee:	d1e7      	bne.n	800c0c0 <_puts_r+0x68>
 800c0f0:	e7ce      	b.n	800c090 <_puts_r+0x38>
 800c0f2:	3e01      	subs	r6, #1
 800c0f4:	e7e4      	b.n	800c0c0 <_puts_r+0x68>
 800c0f6:	6823      	ldr	r3, [r4, #0]
 800c0f8:	1c5a      	adds	r2, r3, #1
 800c0fa:	6022      	str	r2, [r4, #0]
 800c0fc:	220a      	movs	r2, #10
 800c0fe:	701a      	strb	r2, [r3, #0]
 800c100:	e7ee      	b.n	800c0e0 <_puts_r+0x88>
	...

0800c104 <puts>:
 800c104:	4b02      	ldr	r3, [pc, #8]	@ (800c110 <puts+0xc>)
 800c106:	4601      	mov	r1, r0
 800c108:	6818      	ldr	r0, [r3, #0]
 800c10a:	f7ff bfa5 	b.w	800c058 <_puts_r>
 800c10e:	bf00      	nop
 800c110:	20000224 	.word	0x20000224

0800c114 <__sread>:
 800c114:	b510      	push	{r4, lr}
 800c116:	460c      	mov	r4, r1
 800c118:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c11c:	f000 f8fc 	bl	800c318 <_read_r>
 800c120:	2800      	cmp	r0, #0
 800c122:	bfab      	itete	ge
 800c124:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c126:	89a3      	ldrhlt	r3, [r4, #12]
 800c128:	181b      	addge	r3, r3, r0
 800c12a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c12e:	bfac      	ite	ge
 800c130:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c132:	81a3      	strhlt	r3, [r4, #12]
 800c134:	bd10      	pop	{r4, pc}

0800c136 <__swrite>:
 800c136:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c13a:	461f      	mov	r7, r3
 800c13c:	898b      	ldrh	r3, [r1, #12]
 800c13e:	05db      	lsls	r3, r3, #23
 800c140:	4605      	mov	r5, r0
 800c142:	460c      	mov	r4, r1
 800c144:	4616      	mov	r6, r2
 800c146:	d505      	bpl.n	800c154 <__swrite+0x1e>
 800c148:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c14c:	2302      	movs	r3, #2
 800c14e:	2200      	movs	r2, #0
 800c150:	f000 f8d0 	bl	800c2f4 <_lseek_r>
 800c154:	89a3      	ldrh	r3, [r4, #12]
 800c156:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c15a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c15e:	81a3      	strh	r3, [r4, #12]
 800c160:	4632      	mov	r2, r6
 800c162:	463b      	mov	r3, r7
 800c164:	4628      	mov	r0, r5
 800c166:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c16a:	f000 b8e7 	b.w	800c33c <_write_r>

0800c16e <__sseek>:
 800c16e:	b510      	push	{r4, lr}
 800c170:	460c      	mov	r4, r1
 800c172:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c176:	f000 f8bd 	bl	800c2f4 <_lseek_r>
 800c17a:	1c43      	adds	r3, r0, #1
 800c17c:	89a3      	ldrh	r3, [r4, #12]
 800c17e:	bf15      	itete	ne
 800c180:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c182:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c186:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c18a:	81a3      	strheq	r3, [r4, #12]
 800c18c:	bf18      	it	ne
 800c18e:	81a3      	strhne	r3, [r4, #12]
 800c190:	bd10      	pop	{r4, pc}

0800c192 <__sclose>:
 800c192:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c196:	f000 b89d 	b.w	800c2d4 <_close_r>

0800c19a <__swbuf_r>:
 800c19a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c19c:	460e      	mov	r6, r1
 800c19e:	4614      	mov	r4, r2
 800c1a0:	4605      	mov	r5, r0
 800c1a2:	b118      	cbz	r0, 800c1ac <__swbuf_r+0x12>
 800c1a4:	6a03      	ldr	r3, [r0, #32]
 800c1a6:	b90b      	cbnz	r3, 800c1ac <__swbuf_r+0x12>
 800c1a8:	f7ff ff0e 	bl	800bfc8 <__sinit>
 800c1ac:	69a3      	ldr	r3, [r4, #24]
 800c1ae:	60a3      	str	r3, [r4, #8]
 800c1b0:	89a3      	ldrh	r3, [r4, #12]
 800c1b2:	071a      	lsls	r2, r3, #28
 800c1b4:	d501      	bpl.n	800c1ba <__swbuf_r+0x20>
 800c1b6:	6923      	ldr	r3, [r4, #16]
 800c1b8:	b943      	cbnz	r3, 800c1cc <__swbuf_r+0x32>
 800c1ba:	4621      	mov	r1, r4
 800c1bc:	4628      	mov	r0, r5
 800c1be:	f000 f82b 	bl	800c218 <__swsetup_r>
 800c1c2:	b118      	cbz	r0, 800c1cc <__swbuf_r+0x32>
 800c1c4:	f04f 37ff 	mov.w	r7, #4294967295
 800c1c8:	4638      	mov	r0, r7
 800c1ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c1cc:	6823      	ldr	r3, [r4, #0]
 800c1ce:	6922      	ldr	r2, [r4, #16]
 800c1d0:	1a98      	subs	r0, r3, r2
 800c1d2:	6963      	ldr	r3, [r4, #20]
 800c1d4:	b2f6      	uxtb	r6, r6
 800c1d6:	4283      	cmp	r3, r0
 800c1d8:	4637      	mov	r7, r6
 800c1da:	dc05      	bgt.n	800c1e8 <__swbuf_r+0x4e>
 800c1dc:	4621      	mov	r1, r4
 800c1de:	4628      	mov	r0, r5
 800c1e0:	f000 fd46 	bl	800cc70 <_fflush_r>
 800c1e4:	2800      	cmp	r0, #0
 800c1e6:	d1ed      	bne.n	800c1c4 <__swbuf_r+0x2a>
 800c1e8:	68a3      	ldr	r3, [r4, #8]
 800c1ea:	3b01      	subs	r3, #1
 800c1ec:	60a3      	str	r3, [r4, #8]
 800c1ee:	6823      	ldr	r3, [r4, #0]
 800c1f0:	1c5a      	adds	r2, r3, #1
 800c1f2:	6022      	str	r2, [r4, #0]
 800c1f4:	701e      	strb	r6, [r3, #0]
 800c1f6:	6962      	ldr	r2, [r4, #20]
 800c1f8:	1c43      	adds	r3, r0, #1
 800c1fa:	429a      	cmp	r2, r3
 800c1fc:	d004      	beq.n	800c208 <__swbuf_r+0x6e>
 800c1fe:	89a3      	ldrh	r3, [r4, #12]
 800c200:	07db      	lsls	r3, r3, #31
 800c202:	d5e1      	bpl.n	800c1c8 <__swbuf_r+0x2e>
 800c204:	2e0a      	cmp	r6, #10
 800c206:	d1df      	bne.n	800c1c8 <__swbuf_r+0x2e>
 800c208:	4621      	mov	r1, r4
 800c20a:	4628      	mov	r0, r5
 800c20c:	f000 fd30 	bl	800cc70 <_fflush_r>
 800c210:	2800      	cmp	r0, #0
 800c212:	d0d9      	beq.n	800c1c8 <__swbuf_r+0x2e>
 800c214:	e7d6      	b.n	800c1c4 <__swbuf_r+0x2a>
	...

0800c218 <__swsetup_r>:
 800c218:	b538      	push	{r3, r4, r5, lr}
 800c21a:	4b29      	ldr	r3, [pc, #164]	@ (800c2c0 <__swsetup_r+0xa8>)
 800c21c:	4605      	mov	r5, r0
 800c21e:	6818      	ldr	r0, [r3, #0]
 800c220:	460c      	mov	r4, r1
 800c222:	b118      	cbz	r0, 800c22c <__swsetup_r+0x14>
 800c224:	6a03      	ldr	r3, [r0, #32]
 800c226:	b90b      	cbnz	r3, 800c22c <__swsetup_r+0x14>
 800c228:	f7ff fece 	bl	800bfc8 <__sinit>
 800c22c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c230:	0719      	lsls	r1, r3, #28
 800c232:	d422      	bmi.n	800c27a <__swsetup_r+0x62>
 800c234:	06da      	lsls	r2, r3, #27
 800c236:	d407      	bmi.n	800c248 <__swsetup_r+0x30>
 800c238:	2209      	movs	r2, #9
 800c23a:	602a      	str	r2, [r5, #0]
 800c23c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c240:	81a3      	strh	r3, [r4, #12]
 800c242:	f04f 30ff 	mov.w	r0, #4294967295
 800c246:	e033      	b.n	800c2b0 <__swsetup_r+0x98>
 800c248:	0758      	lsls	r0, r3, #29
 800c24a:	d512      	bpl.n	800c272 <__swsetup_r+0x5a>
 800c24c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c24e:	b141      	cbz	r1, 800c262 <__swsetup_r+0x4a>
 800c250:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c254:	4299      	cmp	r1, r3
 800c256:	d002      	beq.n	800c25e <__swsetup_r+0x46>
 800c258:	4628      	mov	r0, r5
 800c25a:	f000 f8bd 	bl	800c3d8 <_free_r>
 800c25e:	2300      	movs	r3, #0
 800c260:	6363      	str	r3, [r4, #52]	@ 0x34
 800c262:	89a3      	ldrh	r3, [r4, #12]
 800c264:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c268:	81a3      	strh	r3, [r4, #12]
 800c26a:	2300      	movs	r3, #0
 800c26c:	6063      	str	r3, [r4, #4]
 800c26e:	6923      	ldr	r3, [r4, #16]
 800c270:	6023      	str	r3, [r4, #0]
 800c272:	89a3      	ldrh	r3, [r4, #12]
 800c274:	f043 0308 	orr.w	r3, r3, #8
 800c278:	81a3      	strh	r3, [r4, #12]
 800c27a:	6923      	ldr	r3, [r4, #16]
 800c27c:	b94b      	cbnz	r3, 800c292 <__swsetup_r+0x7a>
 800c27e:	89a3      	ldrh	r3, [r4, #12]
 800c280:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c284:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c288:	d003      	beq.n	800c292 <__swsetup_r+0x7a>
 800c28a:	4621      	mov	r1, r4
 800c28c:	4628      	mov	r0, r5
 800c28e:	f000 fd3d 	bl	800cd0c <__smakebuf_r>
 800c292:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c296:	f013 0201 	ands.w	r2, r3, #1
 800c29a:	d00a      	beq.n	800c2b2 <__swsetup_r+0x9a>
 800c29c:	2200      	movs	r2, #0
 800c29e:	60a2      	str	r2, [r4, #8]
 800c2a0:	6962      	ldr	r2, [r4, #20]
 800c2a2:	4252      	negs	r2, r2
 800c2a4:	61a2      	str	r2, [r4, #24]
 800c2a6:	6922      	ldr	r2, [r4, #16]
 800c2a8:	b942      	cbnz	r2, 800c2bc <__swsetup_r+0xa4>
 800c2aa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c2ae:	d1c5      	bne.n	800c23c <__swsetup_r+0x24>
 800c2b0:	bd38      	pop	{r3, r4, r5, pc}
 800c2b2:	0799      	lsls	r1, r3, #30
 800c2b4:	bf58      	it	pl
 800c2b6:	6962      	ldrpl	r2, [r4, #20]
 800c2b8:	60a2      	str	r2, [r4, #8]
 800c2ba:	e7f4      	b.n	800c2a6 <__swsetup_r+0x8e>
 800c2bc:	2000      	movs	r0, #0
 800c2be:	e7f7      	b.n	800c2b0 <__swsetup_r+0x98>
 800c2c0:	20000224 	.word	0x20000224

0800c2c4 <memset>:
 800c2c4:	4402      	add	r2, r0
 800c2c6:	4603      	mov	r3, r0
 800c2c8:	4293      	cmp	r3, r2
 800c2ca:	d100      	bne.n	800c2ce <memset+0xa>
 800c2cc:	4770      	bx	lr
 800c2ce:	f803 1b01 	strb.w	r1, [r3], #1
 800c2d2:	e7f9      	b.n	800c2c8 <memset+0x4>

0800c2d4 <_close_r>:
 800c2d4:	b538      	push	{r3, r4, r5, lr}
 800c2d6:	4d06      	ldr	r5, [pc, #24]	@ (800c2f0 <_close_r+0x1c>)
 800c2d8:	2300      	movs	r3, #0
 800c2da:	4604      	mov	r4, r0
 800c2dc:	4608      	mov	r0, r1
 800c2de:	602b      	str	r3, [r5, #0]
 800c2e0:	f7f5 fc0b 	bl	8001afa <_close>
 800c2e4:	1c43      	adds	r3, r0, #1
 800c2e6:	d102      	bne.n	800c2ee <_close_r+0x1a>
 800c2e8:	682b      	ldr	r3, [r5, #0]
 800c2ea:	b103      	cbz	r3, 800c2ee <_close_r+0x1a>
 800c2ec:	6023      	str	r3, [r4, #0]
 800c2ee:	bd38      	pop	{r3, r4, r5, pc}
 800c2f0:	20000e8c 	.word	0x20000e8c

0800c2f4 <_lseek_r>:
 800c2f4:	b538      	push	{r3, r4, r5, lr}
 800c2f6:	4d07      	ldr	r5, [pc, #28]	@ (800c314 <_lseek_r+0x20>)
 800c2f8:	4604      	mov	r4, r0
 800c2fa:	4608      	mov	r0, r1
 800c2fc:	4611      	mov	r1, r2
 800c2fe:	2200      	movs	r2, #0
 800c300:	602a      	str	r2, [r5, #0]
 800c302:	461a      	mov	r2, r3
 800c304:	f7f5 fc20 	bl	8001b48 <_lseek>
 800c308:	1c43      	adds	r3, r0, #1
 800c30a:	d102      	bne.n	800c312 <_lseek_r+0x1e>
 800c30c:	682b      	ldr	r3, [r5, #0]
 800c30e:	b103      	cbz	r3, 800c312 <_lseek_r+0x1e>
 800c310:	6023      	str	r3, [r4, #0]
 800c312:	bd38      	pop	{r3, r4, r5, pc}
 800c314:	20000e8c 	.word	0x20000e8c

0800c318 <_read_r>:
 800c318:	b538      	push	{r3, r4, r5, lr}
 800c31a:	4d07      	ldr	r5, [pc, #28]	@ (800c338 <_read_r+0x20>)
 800c31c:	4604      	mov	r4, r0
 800c31e:	4608      	mov	r0, r1
 800c320:	4611      	mov	r1, r2
 800c322:	2200      	movs	r2, #0
 800c324:	602a      	str	r2, [r5, #0]
 800c326:	461a      	mov	r2, r3
 800c328:	f7f5 fbca 	bl	8001ac0 <_read>
 800c32c:	1c43      	adds	r3, r0, #1
 800c32e:	d102      	bne.n	800c336 <_read_r+0x1e>
 800c330:	682b      	ldr	r3, [r5, #0]
 800c332:	b103      	cbz	r3, 800c336 <_read_r+0x1e>
 800c334:	6023      	str	r3, [r4, #0]
 800c336:	bd38      	pop	{r3, r4, r5, pc}
 800c338:	20000e8c 	.word	0x20000e8c

0800c33c <_write_r>:
 800c33c:	b538      	push	{r3, r4, r5, lr}
 800c33e:	4d07      	ldr	r5, [pc, #28]	@ (800c35c <_write_r+0x20>)
 800c340:	4604      	mov	r4, r0
 800c342:	4608      	mov	r0, r1
 800c344:	4611      	mov	r1, r2
 800c346:	2200      	movs	r2, #0
 800c348:	602a      	str	r2, [r5, #0]
 800c34a:	461a      	mov	r2, r3
 800c34c:	f7f5 fda8 	bl	8001ea0 <_write>
 800c350:	1c43      	adds	r3, r0, #1
 800c352:	d102      	bne.n	800c35a <_write_r+0x1e>
 800c354:	682b      	ldr	r3, [r5, #0]
 800c356:	b103      	cbz	r3, 800c35a <_write_r+0x1e>
 800c358:	6023      	str	r3, [r4, #0]
 800c35a:	bd38      	pop	{r3, r4, r5, pc}
 800c35c:	20000e8c 	.word	0x20000e8c

0800c360 <__errno>:
 800c360:	4b01      	ldr	r3, [pc, #4]	@ (800c368 <__errno+0x8>)
 800c362:	6818      	ldr	r0, [r3, #0]
 800c364:	4770      	bx	lr
 800c366:	bf00      	nop
 800c368:	20000224 	.word	0x20000224

0800c36c <__libc_init_array>:
 800c36c:	b570      	push	{r4, r5, r6, lr}
 800c36e:	4d0d      	ldr	r5, [pc, #52]	@ (800c3a4 <__libc_init_array+0x38>)
 800c370:	4c0d      	ldr	r4, [pc, #52]	@ (800c3a8 <__libc_init_array+0x3c>)
 800c372:	1b64      	subs	r4, r4, r5
 800c374:	10a4      	asrs	r4, r4, #2
 800c376:	2600      	movs	r6, #0
 800c378:	42a6      	cmp	r6, r4
 800c37a:	d109      	bne.n	800c390 <__libc_init_array+0x24>
 800c37c:	4d0b      	ldr	r5, [pc, #44]	@ (800c3ac <__libc_init_array+0x40>)
 800c37e:	4c0c      	ldr	r4, [pc, #48]	@ (800c3b0 <__libc_init_array+0x44>)
 800c380:	f000 fd32 	bl	800cde8 <_init>
 800c384:	1b64      	subs	r4, r4, r5
 800c386:	10a4      	asrs	r4, r4, #2
 800c388:	2600      	movs	r6, #0
 800c38a:	42a6      	cmp	r6, r4
 800c38c:	d105      	bne.n	800c39a <__libc_init_array+0x2e>
 800c38e:	bd70      	pop	{r4, r5, r6, pc}
 800c390:	f855 3b04 	ldr.w	r3, [r5], #4
 800c394:	4798      	blx	r3
 800c396:	3601      	adds	r6, #1
 800c398:	e7ee      	b.n	800c378 <__libc_init_array+0xc>
 800c39a:	f855 3b04 	ldr.w	r3, [r5], #4
 800c39e:	4798      	blx	r3
 800c3a0:	3601      	adds	r6, #1
 800c3a2:	e7f2      	b.n	800c38a <__libc_init_array+0x1e>
 800c3a4:	0800d0f8 	.word	0x0800d0f8
 800c3a8:	0800d0f8 	.word	0x0800d0f8
 800c3ac:	0800d0f8 	.word	0x0800d0f8
 800c3b0:	0800d0fc 	.word	0x0800d0fc

0800c3b4 <__retarget_lock_init_recursive>:
 800c3b4:	4770      	bx	lr

0800c3b6 <__retarget_lock_acquire_recursive>:
 800c3b6:	4770      	bx	lr

0800c3b8 <__retarget_lock_release_recursive>:
 800c3b8:	4770      	bx	lr

0800c3ba <memcpy>:
 800c3ba:	440a      	add	r2, r1
 800c3bc:	4291      	cmp	r1, r2
 800c3be:	f100 33ff 	add.w	r3, r0, #4294967295
 800c3c2:	d100      	bne.n	800c3c6 <memcpy+0xc>
 800c3c4:	4770      	bx	lr
 800c3c6:	b510      	push	{r4, lr}
 800c3c8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c3cc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c3d0:	4291      	cmp	r1, r2
 800c3d2:	d1f9      	bne.n	800c3c8 <memcpy+0xe>
 800c3d4:	bd10      	pop	{r4, pc}
	...

0800c3d8 <_free_r>:
 800c3d8:	b538      	push	{r3, r4, r5, lr}
 800c3da:	4605      	mov	r5, r0
 800c3dc:	2900      	cmp	r1, #0
 800c3de:	d041      	beq.n	800c464 <_free_r+0x8c>
 800c3e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c3e4:	1f0c      	subs	r4, r1, #4
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	bfb8      	it	lt
 800c3ea:	18e4      	addlt	r4, r4, r3
 800c3ec:	f000 f8e0 	bl	800c5b0 <__malloc_lock>
 800c3f0:	4a1d      	ldr	r2, [pc, #116]	@ (800c468 <_free_r+0x90>)
 800c3f2:	6813      	ldr	r3, [r2, #0]
 800c3f4:	b933      	cbnz	r3, 800c404 <_free_r+0x2c>
 800c3f6:	6063      	str	r3, [r4, #4]
 800c3f8:	6014      	str	r4, [r2, #0]
 800c3fa:	4628      	mov	r0, r5
 800c3fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c400:	f000 b8dc 	b.w	800c5bc <__malloc_unlock>
 800c404:	42a3      	cmp	r3, r4
 800c406:	d908      	bls.n	800c41a <_free_r+0x42>
 800c408:	6820      	ldr	r0, [r4, #0]
 800c40a:	1821      	adds	r1, r4, r0
 800c40c:	428b      	cmp	r3, r1
 800c40e:	bf01      	itttt	eq
 800c410:	6819      	ldreq	r1, [r3, #0]
 800c412:	685b      	ldreq	r3, [r3, #4]
 800c414:	1809      	addeq	r1, r1, r0
 800c416:	6021      	streq	r1, [r4, #0]
 800c418:	e7ed      	b.n	800c3f6 <_free_r+0x1e>
 800c41a:	461a      	mov	r2, r3
 800c41c:	685b      	ldr	r3, [r3, #4]
 800c41e:	b10b      	cbz	r3, 800c424 <_free_r+0x4c>
 800c420:	42a3      	cmp	r3, r4
 800c422:	d9fa      	bls.n	800c41a <_free_r+0x42>
 800c424:	6811      	ldr	r1, [r2, #0]
 800c426:	1850      	adds	r0, r2, r1
 800c428:	42a0      	cmp	r0, r4
 800c42a:	d10b      	bne.n	800c444 <_free_r+0x6c>
 800c42c:	6820      	ldr	r0, [r4, #0]
 800c42e:	4401      	add	r1, r0
 800c430:	1850      	adds	r0, r2, r1
 800c432:	4283      	cmp	r3, r0
 800c434:	6011      	str	r1, [r2, #0]
 800c436:	d1e0      	bne.n	800c3fa <_free_r+0x22>
 800c438:	6818      	ldr	r0, [r3, #0]
 800c43a:	685b      	ldr	r3, [r3, #4]
 800c43c:	6053      	str	r3, [r2, #4]
 800c43e:	4408      	add	r0, r1
 800c440:	6010      	str	r0, [r2, #0]
 800c442:	e7da      	b.n	800c3fa <_free_r+0x22>
 800c444:	d902      	bls.n	800c44c <_free_r+0x74>
 800c446:	230c      	movs	r3, #12
 800c448:	602b      	str	r3, [r5, #0]
 800c44a:	e7d6      	b.n	800c3fa <_free_r+0x22>
 800c44c:	6820      	ldr	r0, [r4, #0]
 800c44e:	1821      	adds	r1, r4, r0
 800c450:	428b      	cmp	r3, r1
 800c452:	bf04      	itt	eq
 800c454:	6819      	ldreq	r1, [r3, #0]
 800c456:	685b      	ldreq	r3, [r3, #4]
 800c458:	6063      	str	r3, [r4, #4]
 800c45a:	bf04      	itt	eq
 800c45c:	1809      	addeq	r1, r1, r0
 800c45e:	6021      	streq	r1, [r4, #0]
 800c460:	6054      	str	r4, [r2, #4]
 800c462:	e7ca      	b.n	800c3fa <_free_r+0x22>
 800c464:	bd38      	pop	{r3, r4, r5, pc}
 800c466:	bf00      	nop
 800c468:	20000e98 	.word	0x20000e98

0800c46c <sbrk_aligned>:
 800c46c:	b570      	push	{r4, r5, r6, lr}
 800c46e:	4e0f      	ldr	r6, [pc, #60]	@ (800c4ac <sbrk_aligned+0x40>)
 800c470:	460c      	mov	r4, r1
 800c472:	6831      	ldr	r1, [r6, #0]
 800c474:	4605      	mov	r5, r0
 800c476:	b911      	cbnz	r1, 800c47e <sbrk_aligned+0x12>
 800c478:	f000 fca6 	bl	800cdc8 <_sbrk_r>
 800c47c:	6030      	str	r0, [r6, #0]
 800c47e:	4621      	mov	r1, r4
 800c480:	4628      	mov	r0, r5
 800c482:	f000 fca1 	bl	800cdc8 <_sbrk_r>
 800c486:	1c43      	adds	r3, r0, #1
 800c488:	d103      	bne.n	800c492 <sbrk_aligned+0x26>
 800c48a:	f04f 34ff 	mov.w	r4, #4294967295
 800c48e:	4620      	mov	r0, r4
 800c490:	bd70      	pop	{r4, r5, r6, pc}
 800c492:	1cc4      	adds	r4, r0, #3
 800c494:	f024 0403 	bic.w	r4, r4, #3
 800c498:	42a0      	cmp	r0, r4
 800c49a:	d0f8      	beq.n	800c48e <sbrk_aligned+0x22>
 800c49c:	1a21      	subs	r1, r4, r0
 800c49e:	4628      	mov	r0, r5
 800c4a0:	f000 fc92 	bl	800cdc8 <_sbrk_r>
 800c4a4:	3001      	adds	r0, #1
 800c4a6:	d1f2      	bne.n	800c48e <sbrk_aligned+0x22>
 800c4a8:	e7ef      	b.n	800c48a <sbrk_aligned+0x1e>
 800c4aa:	bf00      	nop
 800c4ac:	20000e94 	.word	0x20000e94

0800c4b0 <_malloc_r>:
 800c4b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c4b4:	1ccd      	adds	r5, r1, #3
 800c4b6:	f025 0503 	bic.w	r5, r5, #3
 800c4ba:	3508      	adds	r5, #8
 800c4bc:	2d0c      	cmp	r5, #12
 800c4be:	bf38      	it	cc
 800c4c0:	250c      	movcc	r5, #12
 800c4c2:	2d00      	cmp	r5, #0
 800c4c4:	4606      	mov	r6, r0
 800c4c6:	db01      	blt.n	800c4cc <_malloc_r+0x1c>
 800c4c8:	42a9      	cmp	r1, r5
 800c4ca:	d904      	bls.n	800c4d6 <_malloc_r+0x26>
 800c4cc:	230c      	movs	r3, #12
 800c4ce:	6033      	str	r3, [r6, #0]
 800c4d0:	2000      	movs	r0, #0
 800c4d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c4d6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c5ac <_malloc_r+0xfc>
 800c4da:	f000 f869 	bl	800c5b0 <__malloc_lock>
 800c4de:	f8d8 3000 	ldr.w	r3, [r8]
 800c4e2:	461c      	mov	r4, r3
 800c4e4:	bb44      	cbnz	r4, 800c538 <_malloc_r+0x88>
 800c4e6:	4629      	mov	r1, r5
 800c4e8:	4630      	mov	r0, r6
 800c4ea:	f7ff ffbf 	bl	800c46c <sbrk_aligned>
 800c4ee:	1c43      	adds	r3, r0, #1
 800c4f0:	4604      	mov	r4, r0
 800c4f2:	d158      	bne.n	800c5a6 <_malloc_r+0xf6>
 800c4f4:	f8d8 4000 	ldr.w	r4, [r8]
 800c4f8:	4627      	mov	r7, r4
 800c4fa:	2f00      	cmp	r7, #0
 800c4fc:	d143      	bne.n	800c586 <_malloc_r+0xd6>
 800c4fe:	2c00      	cmp	r4, #0
 800c500:	d04b      	beq.n	800c59a <_malloc_r+0xea>
 800c502:	6823      	ldr	r3, [r4, #0]
 800c504:	4639      	mov	r1, r7
 800c506:	4630      	mov	r0, r6
 800c508:	eb04 0903 	add.w	r9, r4, r3
 800c50c:	f000 fc5c 	bl	800cdc8 <_sbrk_r>
 800c510:	4581      	cmp	r9, r0
 800c512:	d142      	bne.n	800c59a <_malloc_r+0xea>
 800c514:	6821      	ldr	r1, [r4, #0]
 800c516:	1a6d      	subs	r5, r5, r1
 800c518:	4629      	mov	r1, r5
 800c51a:	4630      	mov	r0, r6
 800c51c:	f7ff ffa6 	bl	800c46c <sbrk_aligned>
 800c520:	3001      	adds	r0, #1
 800c522:	d03a      	beq.n	800c59a <_malloc_r+0xea>
 800c524:	6823      	ldr	r3, [r4, #0]
 800c526:	442b      	add	r3, r5
 800c528:	6023      	str	r3, [r4, #0]
 800c52a:	f8d8 3000 	ldr.w	r3, [r8]
 800c52e:	685a      	ldr	r2, [r3, #4]
 800c530:	bb62      	cbnz	r2, 800c58c <_malloc_r+0xdc>
 800c532:	f8c8 7000 	str.w	r7, [r8]
 800c536:	e00f      	b.n	800c558 <_malloc_r+0xa8>
 800c538:	6822      	ldr	r2, [r4, #0]
 800c53a:	1b52      	subs	r2, r2, r5
 800c53c:	d420      	bmi.n	800c580 <_malloc_r+0xd0>
 800c53e:	2a0b      	cmp	r2, #11
 800c540:	d917      	bls.n	800c572 <_malloc_r+0xc2>
 800c542:	1961      	adds	r1, r4, r5
 800c544:	42a3      	cmp	r3, r4
 800c546:	6025      	str	r5, [r4, #0]
 800c548:	bf18      	it	ne
 800c54a:	6059      	strne	r1, [r3, #4]
 800c54c:	6863      	ldr	r3, [r4, #4]
 800c54e:	bf08      	it	eq
 800c550:	f8c8 1000 	streq.w	r1, [r8]
 800c554:	5162      	str	r2, [r4, r5]
 800c556:	604b      	str	r3, [r1, #4]
 800c558:	4630      	mov	r0, r6
 800c55a:	f000 f82f 	bl	800c5bc <__malloc_unlock>
 800c55e:	f104 000b 	add.w	r0, r4, #11
 800c562:	1d23      	adds	r3, r4, #4
 800c564:	f020 0007 	bic.w	r0, r0, #7
 800c568:	1ac2      	subs	r2, r0, r3
 800c56a:	bf1c      	itt	ne
 800c56c:	1a1b      	subne	r3, r3, r0
 800c56e:	50a3      	strne	r3, [r4, r2]
 800c570:	e7af      	b.n	800c4d2 <_malloc_r+0x22>
 800c572:	6862      	ldr	r2, [r4, #4]
 800c574:	42a3      	cmp	r3, r4
 800c576:	bf0c      	ite	eq
 800c578:	f8c8 2000 	streq.w	r2, [r8]
 800c57c:	605a      	strne	r2, [r3, #4]
 800c57e:	e7eb      	b.n	800c558 <_malloc_r+0xa8>
 800c580:	4623      	mov	r3, r4
 800c582:	6864      	ldr	r4, [r4, #4]
 800c584:	e7ae      	b.n	800c4e4 <_malloc_r+0x34>
 800c586:	463c      	mov	r4, r7
 800c588:	687f      	ldr	r7, [r7, #4]
 800c58a:	e7b6      	b.n	800c4fa <_malloc_r+0x4a>
 800c58c:	461a      	mov	r2, r3
 800c58e:	685b      	ldr	r3, [r3, #4]
 800c590:	42a3      	cmp	r3, r4
 800c592:	d1fb      	bne.n	800c58c <_malloc_r+0xdc>
 800c594:	2300      	movs	r3, #0
 800c596:	6053      	str	r3, [r2, #4]
 800c598:	e7de      	b.n	800c558 <_malloc_r+0xa8>
 800c59a:	230c      	movs	r3, #12
 800c59c:	6033      	str	r3, [r6, #0]
 800c59e:	4630      	mov	r0, r6
 800c5a0:	f000 f80c 	bl	800c5bc <__malloc_unlock>
 800c5a4:	e794      	b.n	800c4d0 <_malloc_r+0x20>
 800c5a6:	6005      	str	r5, [r0, #0]
 800c5a8:	e7d6      	b.n	800c558 <_malloc_r+0xa8>
 800c5aa:	bf00      	nop
 800c5ac:	20000e98 	.word	0x20000e98

0800c5b0 <__malloc_lock>:
 800c5b0:	4801      	ldr	r0, [pc, #4]	@ (800c5b8 <__malloc_lock+0x8>)
 800c5b2:	f7ff bf00 	b.w	800c3b6 <__retarget_lock_acquire_recursive>
 800c5b6:	bf00      	nop
 800c5b8:	20000e90 	.word	0x20000e90

0800c5bc <__malloc_unlock>:
 800c5bc:	4801      	ldr	r0, [pc, #4]	@ (800c5c4 <__malloc_unlock+0x8>)
 800c5be:	f7ff befb 	b.w	800c3b8 <__retarget_lock_release_recursive>
 800c5c2:	bf00      	nop
 800c5c4:	20000e90 	.word	0x20000e90

0800c5c8 <__sfputc_r>:
 800c5c8:	6893      	ldr	r3, [r2, #8]
 800c5ca:	3b01      	subs	r3, #1
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	b410      	push	{r4}
 800c5d0:	6093      	str	r3, [r2, #8]
 800c5d2:	da08      	bge.n	800c5e6 <__sfputc_r+0x1e>
 800c5d4:	6994      	ldr	r4, [r2, #24]
 800c5d6:	42a3      	cmp	r3, r4
 800c5d8:	db01      	blt.n	800c5de <__sfputc_r+0x16>
 800c5da:	290a      	cmp	r1, #10
 800c5dc:	d103      	bne.n	800c5e6 <__sfputc_r+0x1e>
 800c5de:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c5e2:	f7ff bdda 	b.w	800c19a <__swbuf_r>
 800c5e6:	6813      	ldr	r3, [r2, #0]
 800c5e8:	1c58      	adds	r0, r3, #1
 800c5ea:	6010      	str	r0, [r2, #0]
 800c5ec:	7019      	strb	r1, [r3, #0]
 800c5ee:	4608      	mov	r0, r1
 800c5f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c5f4:	4770      	bx	lr

0800c5f6 <__sfputs_r>:
 800c5f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5f8:	4606      	mov	r6, r0
 800c5fa:	460f      	mov	r7, r1
 800c5fc:	4614      	mov	r4, r2
 800c5fe:	18d5      	adds	r5, r2, r3
 800c600:	42ac      	cmp	r4, r5
 800c602:	d101      	bne.n	800c608 <__sfputs_r+0x12>
 800c604:	2000      	movs	r0, #0
 800c606:	e007      	b.n	800c618 <__sfputs_r+0x22>
 800c608:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c60c:	463a      	mov	r2, r7
 800c60e:	4630      	mov	r0, r6
 800c610:	f7ff ffda 	bl	800c5c8 <__sfputc_r>
 800c614:	1c43      	adds	r3, r0, #1
 800c616:	d1f3      	bne.n	800c600 <__sfputs_r+0xa>
 800c618:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c61c <_vfiprintf_r>:
 800c61c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c620:	460d      	mov	r5, r1
 800c622:	b09d      	sub	sp, #116	@ 0x74
 800c624:	4614      	mov	r4, r2
 800c626:	4698      	mov	r8, r3
 800c628:	4606      	mov	r6, r0
 800c62a:	b118      	cbz	r0, 800c634 <_vfiprintf_r+0x18>
 800c62c:	6a03      	ldr	r3, [r0, #32]
 800c62e:	b90b      	cbnz	r3, 800c634 <_vfiprintf_r+0x18>
 800c630:	f7ff fcca 	bl	800bfc8 <__sinit>
 800c634:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c636:	07d9      	lsls	r1, r3, #31
 800c638:	d405      	bmi.n	800c646 <_vfiprintf_r+0x2a>
 800c63a:	89ab      	ldrh	r3, [r5, #12]
 800c63c:	059a      	lsls	r2, r3, #22
 800c63e:	d402      	bmi.n	800c646 <_vfiprintf_r+0x2a>
 800c640:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c642:	f7ff feb8 	bl	800c3b6 <__retarget_lock_acquire_recursive>
 800c646:	89ab      	ldrh	r3, [r5, #12]
 800c648:	071b      	lsls	r3, r3, #28
 800c64a:	d501      	bpl.n	800c650 <_vfiprintf_r+0x34>
 800c64c:	692b      	ldr	r3, [r5, #16]
 800c64e:	b99b      	cbnz	r3, 800c678 <_vfiprintf_r+0x5c>
 800c650:	4629      	mov	r1, r5
 800c652:	4630      	mov	r0, r6
 800c654:	f7ff fde0 	bl	800c218 <__swsetup_r>
 800c658:	b170      	cbz	r0, 800c678 <_vfiprintf_r+0x5c>
 800c65a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c65c:	07dc      	lsls	r4, r3, #31
 800c65e:	d504      	bpl.n	800c66a <_vfiprintf_r+0x4e>
 800c660:	f04f 30ff 	mov.w	r0, #4294967295
 800c664:	b01d      	add	sp, #116	@ 0x74
 800c666:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c66a:	89ab      	ldrh	r3, [r5, #12]
 800c66c:	0598      	lsls	r0, r3, #22
 800c66e:	d4f7      	bmi.n	800c660 <_vfiprintf_r+0x44>
 800c670:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c672:	f7ff fea1 	bl	800c3b8 <__retarget_lock_release_recursive>
 800c676:	e7f3      	b.n	800c660 <_vfiprintf_r+0x44>
 800c678:	2300      	movs	r3, #0
 800c67a:	9309      	str	r3, [sp, #36]	@ 0x24
 800c67c:	2320      	movs	r3, #32
 800c67e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c682:	f8cd 800c 	str.w	r8, [sp, #12]
 800c686:	2330      	movs	r3, #48	@ 0x30
 800c688:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c838 <_vfiprintf_r+0x21c>
 800c68c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c690:	f04f 0901 	mov.w	r9, #1
 800c694:	4623      	mov	r3, r4
 800c696:	469a      	mov	sl, r3
 800c698:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c69c:	b10a      	cbz	r2, 800c6a2 <_vfiprintf_r+0x86>
 800c69e:	2a25      	cmp	r2, #37	@ 0x25
 800c6a0:	d1f9      	bne.n	800c696 <_vfiprintf_r+0x7a>
 800c6a2:	ebba 0b04 	subs.w	fp, sl, r4
 800c6a6:	d00b      	beq.n	800c6c0 <_vfiprintf_r+0xa4>
 800c6a8:	465b      	mov	r3, fp
 800c6aa:	4622      	mov	r2, r4
 800c6ac:	4629      	mov	r1, r5
 800c6ae:	4630      	mov	r0, r6
 800c6b0:	f7ff ffa1 	bl	800c5f6 <__sfputs_r>
 800c6b4:	3001      	adds	r0, #1
 800c6b6:	f000 80a7 	beq.w	800c808 <_vfiprintf_r+0x1ec>
 800c6ba:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c6bc:	445a      	add	r2, fp
 800c6be:	9209      	str	r2, [sp, #36]	@ 0x24
 800c6c0:	f89a 3000 	ldrb.w	r3, [sl]
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	f000 809f 	beq.w	800c808 <_vfiprintf_r+0x1ec>
 800c6ca:	2300      	movs	r3, #0
 800c6cc:	f04f 32ff 	mov.w	r2, #4294967295
 800c6d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c6d4:	f10a 0a01 	add.w	sl, sl, #1
 800c6d8:	9304      	str	r3, [sp, #16]
 800c6da:	9307      	str	r3, [sp, #28]
 800c6dc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c6e0:	931a      	str	r3, [sp, #104]	@ 0x68
 800c6e2:	4654      	mov	r4, sl
 800c6e4:	2205      	movs	r2, #5
 800c6e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c6ea:	4853      	ldr	r0, [pc, #332]	@ (800c838 <_vfiprintf_r+0x21c>)
 800c6ec:	f7f3 fd98 	bl	8000220 <memchr>
 800c6f0:	9a04      	ldr	r2, [sp, #16]
 800c6f2:	b9d8      	cbnz	r0, 800c72c <_vfiprintf_r+0x110>
 800c6f4:	06d1      	lsls	r1, r2, #27
 800c6f6:	bf44      	itt	mi
 800c6f8:	2320      	movmi	r3, #32
 800c6fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c6fe:	0713      	lsls	r3, r2, #28
 800c700:	bf44      	itt	mi
 800c702:	232b      	movmi	r3, #43	@ 0x2b
 800c704:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c708:	f89a 3000 	ldrb.w	r3, [sl]
 800c70c:	2b2a      	cmp	r3, #42	@ 0x2a
 800c70e:	d015      	beq.n	800c73c <_vfiprintf_r+0x120>
 800c710:	9a07      	ldr	r2, [sp, #28]
 800c712:	4654      	mov	r4, sl
 800c714:	2000      	movs	r0, #0
 800c716:	f04f 0c0a 	mov.w	ip, #10
 800c71a:	4621      	mov	r1, r4
 800c71c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c720:	3b30      	subs	r3, #48	@ 0x30
 800c722:	2b09      	cmp	r3, #9
 800c724:	d94b      	bls.n	800c7be <_vfiprintf_r+0x1a2>
 800c726:	b1b0      	cbz	r0, 800c756 <_vfiprintf_r+0x13a>
 800c728:	9207      	str	r2, [sp, #28]
 800c72a:	e014      	b.n	800c756 <_vfiprintf_r+0x13a>
 800c72c:	eba0 0308 	sub.w	r3, r0, r8
 800c730:	fa09 f303 	lsl.w	r3, r9, r3
 800c734:	4313      	orrs	r3, r2
 800c736:	9304      	str	r3, [sp, #16]
 800c738:	46a2      	mov	sl, r4
 800c73a:	e7d2      	b.n	800c6e2 <_vfiprintf_r+0xc6>
 800c73c:	9b03      	ldr	r3, [sp, #12]
 800c73e:	1d19      	adds	r1, r3, #4
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	9103      	str	r1, [sp, #12]
 800c744:	2b00      	cmp	r3, #0
 800c746:	bfbb      	ittet	lt
 800c748:	425b      	neglt	r3, r3
 800c74a:	f042 0202 	orrlt.w	r2, r2, #2
 800c74e:	9307      	strge	r3, [sp, #28]
 800c750:	9307      	strlt	r3, [sp, #28]
 800c752:	bfb8      	it	lt
 800c754:	9204      	strlt	r2, [sp, #16]
 800c756:	7823      	ldrb	r3, [r4, #0]
 800c758:	2b2e      	cmp	r3, #46	@ 0x2e
 800c75a:	d10a      	bne.n	800c772 <_vfiprintf_r+0x156>
 800c75c:	7863      	ldrb	r3, [r4, #1]
 800c75e:	2b2a      	cmp	r3, #42	@ 0x2a
 800c760:	d132      	bne.n	800c7c8 <_vfiprintf_r+0x1ac>
 800c762:	9b03      	ldr	r3, [sp, #12]
 800c764:	1d1a      	adds	r2, r3, #4
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	9203      	str	r2, [sp, #12]
 800c76a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c76e:	3402      	adds	r4, #2
 800c770:	9305      	str	r3, [sp, #20]
 800c772:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c848 <_vfiprintf_r+0x22c>
 800c776:	7821      	ldrb	r1, [r4, #0]
 800c778:	2203      	movs	r2, #3
 800c77a:	4650      	mov	r0, sl
 800c77c:	f7f3 fd50 	bl	8000220 <memchr>
 800c780:	b138      	cbz	r0, 800c792 <_vfiprintf_r+0x176>
 800c782:	9b04      	ldr	r3, [sp, #16]
 800c784:	eba0 000a 	sub.w	r0, r0, sl
 800c788:	2240      	movs	r2, #64	@ 0x40
 800c78a:	4082      	lsls	r2, r0
 800c78c:	4313      	orrs	r3, r2
 800c78e:	3401      	adds	r4, #1
 800c790:	9304      	str	r3, [sp, #16]
 800c792:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c796:	4829      	ldr	r0, [pc, #164]	@ (800c83c <_vfiprintf_r+0x220>)
 800c798:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c79c:	2206      	movs	r2, #6
 800c79e:	f7f3 fd3f 	bl	8000220 <memchr>
 800c7a2:	2800      	cmp	r0, #0
 800c7a4:	d03f      	beq.n	800c826 <_vfiprintf_r+0x20a>
 800c7a6:	4b26      	ldr	r3, [pc, #152]	@ (800c840 <_vfiprintf_r+0x224>)
 800c7a8:	bb1b      	cbnz	r3, 800c7f2 <_vfiprintf_r+0x1d6>
 800c7aa:	9b03      	ldr	r3, [sp, #12]
 800c7ac:	3307      	adds	r3, #7
 800c7ae:	f023 0307 	bic.w	r3, r3, #7
 800c7b2:	3308      	adds	r3, #8
 800c7b4:	9303      	str	r3, [sp, #12]
 800c7b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c7b8:	443b      	add	r3, r7
 800c7ba:	9309      	str	r3, [sp, #36]	@ 0x24
 800c7bc:	e76a      	b.n	800c694 <_vfiprintf_r+0x78>
 800c7be:	fb0c 3202 	mla	r2, ip, r2, r3
 800c7c2:	460c      	mov	r4, r1
 800c7c4:	2001      	movs	r0, #1
 800c7c6:	e7a8      	b.n	800c71a <_vfiprintf_r+0xfe>
 800c7c8:	2300      	movs	r3, #0
 800c7ca:	3401      	adds	r4, #1
 800c7cc:	9305      	str	r3, [sp, #20]
 800c7ce:	4619      	mov	r1, r3
 800c7d0:	f04f 0c0a 	mov.w	ip, #10
 800c7d4:	4620      	mov	r0, r4
 800c7d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c7da:	3a30      	subs	r2, #48	@ 0x30
 800c7dc:	2a09      	cmp	r2, #9
 800c7de:	d903      	bls.n	800c7e8 <_vfiprintf_r+0x1cc>
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	d0c6      	beq.n	800c772 <_vfiprintf_r+0x156>
 800c7e4:	9105      	str	r1, [sp, #20]
 800c7e6:	e7c4      	b.n	800c772 <_vfiprintf_r+0x156>
 800c7e8:	fb0c 2101 	mla	r1, ip, r1, r2
 800c7ec:	4604      	mov	r4, r0
 800c7ee:	2301      	movs	r3, #1
 800c7f0:	e7f0      	b.n	800c7d4 <_vfiprintf_r+0x1b8>
 800c7f2:	ab03      	add	r3, sp, #12
 800c7f4:	9300      	str	r3, [sp, #0]
 800c7f6:	462a      	mov	r2, r5
 800c7f8:	4b12      	ldr	r3, [pc, #72]	@ (800c844 <_vfiprintf_r+0x228>)
 800c7fa:	a904      	add	r1, sp, #16
 800c7fc:	4630      	mov	r0, r6
 800c7fe:	f3af 8000 	nop.w
 800c802:	4607      	mov	r7, r0
 800c804:	1c78      	adds	r0, r7, #1
 800c806:	d1d6      	bne.n	800c7b6 <_vfiprintf_r+0x19a>
 800c808:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c80a:	07d9      	lsls	r1, r3, #31
 800c80c:	d405      	bmi.n	800c81a <_vfiprintf_r+0x1fe>
 800c80e:	89ab      	ldrh	r3, [r5, #12]
 800c810:	059a      	lsls	r2, r3, #22
 800c812:	d402      	bmi.n	800c81a <_vfiprintf_r+0x1fe>
 800c814:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c816:	f7ff fdcf 	bl	800c3b8 <__retarget_lock_release_recursive>
 800c81a:	89ab      	ldrh	r3, [r5, #12]
 800c81c:	065b      	lsls	r3, r3, #25
 800c81e:	f53f af1f 	bmi.w	800c660 <_vfiprintf_r+0x44>
 800c822:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c824:	e71e      	b.n	800c664 <_vfiprintf_r+0x48>
 800c826:	ab03      	add	r3, sp, #12
 800c828:	9300      	str	r3, [sp, #0]
 800c82a:	462a      	mov	r2, r5
 800c82c:	4b05      	ldr	r3, [pc, #20]	@ (800c844 <_vfiprintf_r+0x228>)
 800c82e:	a904      	add	r1, sp, #16
 800c830:	4630      	mov	r0, r6
 800c832:	f000 f879 	bl	800c928 <_printf_i>
 800c836:	e7e4      	b.n	800c802 <_vfiprintf_r+0x1e6>
 800c838:	0800d0bc 	.word	0x0800d0bc
 800c83c:	0800d0c6 	.word	0x0800d0c6
 800c840:	00000000 	.word	0x00000000
 800c844:	0800c5f7 	.word	0x0800c5f7
 800c848:	0800d0c2 	.word	0x0800d0c2

0800c84c <_printf_common>:
 800c84c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c850:	4616      	mov	r6, r2
 800c852:	4698      	mov	r8, r3
 800c854:	688a      	ldr	r2, [r1, #8]
 800c856:	690b      	ldr	r3, [r1, #16]
 800c858:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c85c:	4293      	cmp	r3, r2
 800c85e:	bfb8      	it	lt
 800c860:	4613      	movlt	r3, r2
 800c862:	6033      	str	r3, [r6, #0]
 800c864:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c868:	4607      	mov	r7, r0
 800c86a:	460c      	mov	r4, r1
 800c86c:	b10a      	cbz	r2, 800c872 <_printf_common+0x26>
 800c86e:	3301      	adds	r3, #1
 800c870:	6033      	str	r3, [r6, #0]
 800c872:	6823      	ldr	r3, [r4, #0]
 800c874:	0699      	lsls	r1, r3, #26
 800c876:	bf42      	ittt	mi
 800c878:	6833      	ldrmi	r3, [r6, #0]
 800c87a:	3302      	addmi	r3, #2
 800c87c:	6033      	strmi	r3, [r6, #0]
 800c87e:	6825      	ldr	r5, [r4, #0]
 800c880:	f015 0506 	ands.w	r5, r5, #6
 800c884:	d106      	bne.n	800c894 <_printf_common+0x48>
 800c886:	f104 0a19 	add.w	sl, r4, #25
 800c88a:	68e3      	ldr	r3, [r4, #12]
 800c88c:	6832      	ldr	r2, [r6, #0]
 800c88e:	1a9b      	subs	r3, r3, r2
 800c890:	42ab      	cmp	r3, r5
 800c892:	dc26      	bgt.n	800c8e2 <_printf_common+0x96>
 800c894:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c898:	6822      	ldr	r2, [r4, #0]
 800c89a:	3b00      	subs	r3, #0
 800c89c:	bf18      	it	ne
 800c89e:	2301      	movne	r3, #1
 800c8a0:	0692      	lsls	r2, r2, #26
 800c8a2:	d42b      	bmi.n	800c8fc <_printf_common+0xb0>
 800c8a4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c8a8:	4641      	mov	r1, r8
 800c8aa:	4638      	mov	r0, r7
 800c8ac:	47c8      	blx	r9
 800c8ae:	3001      	adds	r0, #1
 800c8b0:	d01e      	beq.n	800c8f0 <_printf_common+0xa4>
 800c8b2:	6823      	ldr	r3, [r4, #0]
 800c8b4:	6922      	ldr	r2, [r4, #16]
 800c8b6:	f003 0306 	and.w	r3, r3, #6
 800c8ba:	2b04      	cmp	r3, #4
 800c8bc:	bf02      	ittt	eq
 800c8be:	68e5      	ldreq	r5, [r4, #12]
 800c8c0:	6833      	ldreq	r3, [r6, #0]
 800c8c2:	1aed      	subeq	r5, r5, r3
 800c8c4:	68a3      	ldr	r3, [r4, #8]
 800c8c6:	bf0c      	ite	eq
 800c8c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c8cc:	2500      	movne	r5, #0
 800c8ce:	4293      	cmp	r3, r2
 800c8d0:	bfc4      	itt	gt
 800c8d2:	1a9b      	subgt	r3, r3, r2
 800c8d4:	18ed      	addgt	r5, r5, r3
 800c8d6:	2600      	movs	r6, #0
 800c8d8:	341a      	adds	r4, #26
 800c8da:	42b5      	cmp	r5, r6
 800c8dc:	d11a      	bne.n	800c914 <_printf_common+0xc8>
 800c8de:	2000      	movs	r0, #0
 800c8e0:	e008      	b.n	800c8f4 <_printf_common+0xa8>
 800c8e2:	2301      	movs	r3, #1
 800c8e4:	4652      	mov	r2, sl
 800c8e6:	4641      	mov	r1, r8
 800c8e8:	4638      	mov	r0, r7
 800c8ea:	47c8      	blx	r9
 800c8ec:	3001      	adds	r0, #1
 800c8ee:	d103      	bne.n	800c8f8 <_printf_common+0xac>
 800c8f0:	f04f 30ff 	mov.w	r0, #4294967295
 800c8f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c8f8:	3501      	adds	r5, #1
 800c8fa:	e7c6      	b.n	800c88a <_printf_common+0x3e>
 800c8fc:	18e1      	adds	r1, r4, r3
 800c8fe:	1c5a      	adds	r2, r3, #1
 800c900:	2030      	movs	r0, #48	@ 0x30
 800c902:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c906:	4422      	add	r2, r4
 800c908:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c90c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c910:	3302      	adds	r3, #2
 800c912:	e7c7      	b.n	800c8a4 <_printf_common+0x58>
 800c914:	2301      	movs	r3, #1
 800c916:	4622      	mov	r2, r4
 800c918:	4641      	mov	r1, r8
 800c91a:	4638      	mov	r0, r7
 800c91c:	47c8      	blx	r9
 800c91e:	3001      	adds	r0, #1
 800c920:	d0e6      	beq.n	800c8f0 <_printf_common+0xa4>
 800c922:	3601      	adds	r6, #1
 800c924:	e7d9      	b.n	800c8da <_printf_common+0x8e>
	...

0800c928 <_printf_i>:
 800c928:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c92c:	7e0f      	ldrb	r7, [r1, #24]
 800c92e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c930:	2f78      	cmp	r7, #120	@ 0x78
 800c932:	4691      	mov	r9, r2
 800c934:	4680      	mov	r8, r0
 800c936:	460c      	mov	r4, r1
 800c938:	469a      	mov	sl, r3
 800c93a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c93e:	d807      	bhi.n	800c950 <_printf_i+0x28>
 800c940:	2f62      	cmp	r7, #98	@ 0x62
 800c942:	d80a      	bhi.n	800c95a <_printf_i+0x32>
 800c944:	2f00      	cmp	r7, #0
 800c946:	f000 80d2 	beq.w	800caee <_printf_i+0x1c6>
 800c94a:	2f58      	cmp	r7, #88	@ 0x58
 800c94c:	f000 80b9 	beq.w	800cac2 <_printf_i+0x19a>
 800c950:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c954:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c958:	e03a      	b.n	800c9d0 <_printf_i+0xa8>
 800c95a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c95e:	2b15      	cmp	r3, #21
 800c960:	d8f6      	bhi.n	800c950 <_printf_i+0x28>
 800c962:	a101      	add	r1, pc, #4	@ (adr r1, 800c968 <_printf_i+0x40>)
 800c964:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c968:	0800c9c1 	.word	0x0800c9c1
 800c96c:	0800c9d5 	.word	0x0800c9d5
 800c970:	0800c951 	.word	0x0800c951
 800c974:	0800c951 	.word	0x0800c951
 800c978:	0800c951 	.word	0x0800c951
 800c97c:	0800c951 	.word	0x0800c951
 800c980:	0800c9d5 	.word	0x0800c9d5
 800c984:	0800c951 	.word	0x0800c951
 800c988:	0800c951 	.word	0x0800c951
 800c98c:	0800c951 	.word	0x0800c951
 800c990:	0800c951 	.word	0x0800c951
 800c994:	0800cad5 	.word	0x0800cad5
 800c998:	0800c9ff 	.word	0x0800c9ff
 800c99c:	0800ca8f 	.word	0x0800ca8f
 800c9a0:	0800c951 	.word	0x0800c951
 800c9a4:	0800c951 	.word	0x0800c951
 800c9a8:	0800caf7 	.word	0x0800caf7
 800c9ac:	0800c951 	.word	0x0800c951
 800c9b0:	0800c9ff 	.word	0x0800c9ff
 800c9b4:	0800c951 	.word	0x0800c951
 800c9b8:	0800c951 	.word	0x0800c951
 800c9bc:	0800ca97 	.word	0x0800ca97
 800c9c0:	6833      	ldr	r3, [r6, #0]
 800c9c2:	1d1a      	adds	r2, r3, #4
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	6032      	str	r2, [r6, #0]
 800c9c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c9cc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c9d0:	2301      	movs	r3, #1
 800c9d2:	e09d      	b.n	800cb10 <_printf_i+0x1e8>
 800c9d4:	6833      	ldr	r3, [r6, #0]
 800c9d6:	6820      	ldr	r0, [r4, #0]
 800c9d8:	1d19      	adds	r1, r3, #4
 800c9da:	6031      	str	r1, [r6, #0]
 800c9dc:	0606      	lsls	r6, r0, #24
 800c9de:	d501      	bpl.n	800c9e4 <_printf_i+0xbc>
 800c9e0:	681d      	ldr	r5, [r3, #0]
 800c9e2:	e003      	b.n	800c9ec <_printf_i+0xc4>
 800c9e4:	0645      	lsls	r5, r0, #25
 800c9e6:	d5fb      	bpl.n	800c9e0 <_printf_i+0xb8>
 800c9e8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c9ec:	2d00      	cmp	r5, #0
 800c9ee:	da03      	bge.n	800c9f8 <_printf_i+0xd0>
 800c9f0:	232d      	movs	r3, #45	@ 0x2d
 800c9f2:	426d      	negs	r5, r5
 800c9f4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c9f8:	4859      	ldr	r0, [pc, #356]	@ (800cb60 <_printf_i+0x238>)
 800c9fa:	230a      	movs	r3, #10
 800c9fc:	e011      	b.n	800ca22 <_printf_i+0xfa>
 800c9fe:	6821      	ldr	r1, [r4, #0]
 800ca00:	6833      	ldr	r3, [r6, #0]
 800ca02:	0608      	lsls	r0, r1, #24
 800ca04:	f853 5b04 	ldr.w	r5, [r3], #4
 800ca08:	d402      	bmi.n	800ca10 <_printf_i+0xe8>
 800ca0a:	0649      	lsls	r1, r1, #25
 800ca0c:	bf48      	it	mi
 800ca0e:	b2ad      	uxthmi	r5, r5
 800ca10:	2f6f      	cmp	r7, #111	@ 0x6f
 800ca12:	4853      	ldr	r0, [pc, #332]	@ (800cb60 <_printf_i+0x238>)
 800ca14:	6033      	str	r3, [r6, #0]
 800ca16:	bf14      	ite	ne
 800ca18:	230a      	movne	r3, #10
 800ca1a:	2308      	moveq	r3, #8
 800ca1c:	2100      	movs	r1, #0
 800ca1e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ca22:	6866      	ldr	r6, [r4, #4]
 800ca24:	60a6      	str	r6, [r4, #8]
 800ca26:	2e00      	cmp	r6, #0
 800ca28:	bfa2      	ittt	ge
 800ca2a:	6821      	ldrge	r1, [r4, #0]
 800ca2c:	f021 0104 	bicge.w	r1, r1, #4
 800ca30:	6021      	strge	r1, [r4, #0]
 800ca32:	b90d      	cbnz	r5, 800ca38 <_printf_i+0x110>
 800ca34:	2e00      	cmp	r6, #0
 800ca36:	d04b      	beq.n	800cad0 <_printf_i+0x1a8>
 800ca38:	4616      	mov	r6, r2
 800ca3a:	fbb5 f1f3 	udiv	r1, r5, r3
 800ca3e:	fb03 5711 	mls	r7, r3, r1, r5
 800ca42:	5dc7      	ldrb	r7, [r0, r7]
 800ca44:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ca48:	462f      	mov	r7, r5
 800ca4a:	42bb      	cmp	r3, r7
 800ca4c:	460d      	mov	r5, r1
 800ca4e:	d9f4      	bls.n	800ca3a <_printf_i+0x112>
 800ca50:	2b08      	cmp	r3, #8
 800ca52:	d10b      	bne.n	800ca6c <_printf_i+0x144>
 800ca54:	6823      	ldr	r3, [r4, #0]
 800ca56:	07df      	lsls	r7, r3, #31
 800ca58:	d508      	bpl.n	800ca6c <_printf_i+0x144>
 800ca5a:	6923      	ldr	r3, [r4, #16]
 800ca5c:	6861      	ldr	r1, [r4, #4]
 800ca5e:	4299      	cmp	r1, r3
 800ca60:	bfde      	ittt	le
 800ca62:	2330      	movle	r3, #48	@ 0x30
 800ca64:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ca68:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ca6c:	1b92      	subs	r2, r2, r6
 800ca6e:	6122      	str	r2, [r4, #16]
 800ca70:	f8cd a000 	str.w	sl, [sp]
 800ca74:	464b      	mov	r3, r9
 800ca76:	aa03      	add	r2, sp, #12
 800ca78:	4621      	mov	r1, r4
 800ca7a:	4640      	mov	r0, r8
 800ca7c:	f7ff fee6 	bl	800c84c <_printf_common>
 800ca80:	3001      	adds	r0, #1
 800ca82:	d14a      	bne.n	800cb1a <_printf_i+0x1f2>
 800ca84:	f04f 30ff 	mov.w	r0, #4294967295
 800ca88:	b004      	add	sp, #16
 800ca8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca8e:	6823      	ldr	r3, [r4, #0]
 800ca90:	f043 0320 	orr.w	r3, r3, #32
 800ca94:	6023      	str	r3, [r4, #0]
 800ca96:	4833      	ldr	r0, [pc, #204]	@ (800cb64 <_printf_i+0x23c>)
 800ca98:	2778      	movs	r7, #120	@ 0x78
 800ca9a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ca9e:	6823      	ldr	r3, [r4, #0]
 800caa0:	6831      	ldr	r1, [r6, #0]
 800caa2:	061f      	lsls	r7, r3, #24
 800caa4:	f851 5b04 	ldr.w	r5, [r1], #4
 800caa8:	d402      	bmi.n	800cab0 <_printf_i+0x188>
 800caaa:	065f      	lsls	r7, r3, #25
 800caac:	bf48      	it	mi
 800caae:	b2ad      	uxthmi	r5, r5
 800cab0:	6031      	str	r1, [r6, #0]
 800cab2:	07d9      	lsls	r1, r3, #31
 800cab4:	bf44      	itt	mi
 800cab6:	f043 0320 	orrmi.w	r3, r3, #32
 800caba:	6023      	strmi	r3, [r4, #0]
 800cabc:	b11d      	cbz	r5, 800cac6 <_printf_i+0x19e>
 800cabe:	2310      	movs	r3, #16
 800cac0:	e7ac      	b.n	800ca1c <_printf_i+0xf4>
 800cac2:	4827      	ldr	r0, [pc, #156]	@ (800cb60 <_printf_i+0x238>)
 800cac4:	e7e9      	b.n	800ca9a <_printf_i+0x172>
 800cac6:	6823      	ldr	r3, [r4, #0]
 800cac8:	f023 0320 	bic.w	r3, r3, #32
 800cacc:	6023      	str	r3, [r4, #0]
 800cace:	e7f6      	b.n	800cabe <_printf_i+0x196>
 800cad0:	4616      	mov	r6, r2
 800cad2:	e7bd      	b.n	800ca50 <_printf_i+0x128>
 800cad4:	6833      	ldr	r3, [r6, #0]
 800cad6:	6825      	ldr	r5, [r4, #0]
 800cad8:	6961      	ldr	r1, [r4, #20]
 800cada:	1d18      	adds	r0, r3, #4
 800cadc:	6030      	str	r0, [r6, #0]
 800cade:	062e      	lsls	r6, r5, #24
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	d501      	bpl.n	800cae8 <_printf_i+0x1c0>
 800cae4:	6019      	str	r1, [r3, #0]
 800cae6:	e002      	b.n	800caee <_printf_i+0x1c6>
 800cae8:	0668      	lsls	r0, r5, #25
 800caea:	d5fb      	bpl.n	800cae4 <_printf_i+0x1bc>
 800caec:	8019      	strh	r1, [r3, #0]
 800caee:	2300      	movs	r3, #0
 800caf0:	6123      	str	r3, [r4, #16]
 800caf2:	4616      	mov	r6, r2
 800caf4:	e7bc      	b.n	800ca70 <_printf_i+0x148>
 800caf6:	6833      	ldr	r3, [r6, #0]
 800caf8:	1d1a      	adds	r2, r3, #4
 800cafa:	6032      	str	r2, [r6, #0]
 800cafc:	681e      	ldr	r6, [r3, #0]
 800cafe:	6862      	ldr	r2, [r4, #4]
 800cb00:	2100      	movs	r1, #0
 800cb02:	4630      	mov	r0, r6
 800cb04:	f7f3 fb8c 	bl	8000220 <memchr>
 800cb08:	b108      	cbz	r0, 800cb0e <_printf_i+0x1e6>
 800cb0a:	1b80      	subs	r0, r0, r6
 800cb0c:	6060      	str	r0, [r4, #4]
 800cb0e:	6863      	ldr	r3, [r4, #4]
 800cb10:	6123      	str	r3, [r4, #16]
 800cb12:	2300      	movs	r3, #0
 800cb14:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cb18:	e7aa      	b.n	800ca70 <_printf_i+0x148>
 800cb1a:	6923      	ldr	r3, [r4, #16]
 800cb1c:	4632      	mov	r2, r6
 800cb1e:	4649      	mov	r1, r9
 800cb20:	4640      	mov	r0, r8
 800cb22:	47d0      	blx	sl
 800cb24:	3001      	adds	r0, #1
 800cb26:	d0ad      	beq.n	800ca84 <_printf_i+0x15c>
 800cb28:	6823      	ldr	r3, [r4, #0]
 800cb2a:	079b      	lsls	r3, r3, #30
 800cb2c:	d413      	bmi.n	800cb56 <_printf_i+0x22e>
 800cb2e:	68e0      	ldr	r0, [r4, #12]
 800cb30:	9b03      	ldr	r3, [sp, #12]
 800cb32:	4298      	cmp	r0, r3
 800cb34:	bfb8      	it	lt
 800cb36:	4618      	movlt	r0, r3
 800cb38:	e7a6      	b.n	800ca88 <_printf_i+0x160>
 800cb3a:	2301      	movs	r3, #1
 800cb3c:	4632      	mov	r2, r6
 800cb3e:	4649      	mov	r1, r9
 800cb40:	4640      	mov	r0, r8
 800cb42:	47d0      	blx	sl
 800cb44:	3001      	adds	r0, #1
 800cb46:	d09d      	beq.n	800ca84 <_printf_i+0x15c>
 800cb48:	3501      	adds	r5, #1
 800cb4a:	68e3      	ldr	r3, [r4, #12]
 800cb4c:	9903      	ldr	r1, [sp, #12]
 800cb4e:	1a5b      	subs	r3, r3, r1
 800cb50:	42ab      	cmp	r3, r5
 800cb52:	dcf2      	bgt.n	800cb3a <_printf_i+0x212>
 800cb54:	e7eb      	b.n	800cb2e <_printf_i+0x206>
 800cb56:	2500      	movs	r5, #0
 800cb58:	f104 0619 	add.w	r6, r4, #25
 800cb5c:	e7f5      	b.n	800cb4a <_printf_i+0x222>
 800cb5e:	bf00      	nop
 800cb60:	0800d0cd 	.word	0x0800d0cd
 800cb64:	0800d0de 	.word	0x0800d0de

0800cb68 <__sflush_r>:
 800cb68:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800cb6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb70:	0716      	lsls	r6, r2, #28
 800cb72:	4605      	mov	r5, r0
 800cb74:	460c      	mov	r4, r1
 800cb76:	d454      	bmi.n	800cc22 <__sflush_r+0xba>
 800cb78:	684b      	ldr	r3, [r1, #4]
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	dc02      	bgt.n	800cb84 <__sflush_r+0x1c>
 800cb7e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	dd48      	ble.n	800cc16 <__sflush_r+0xae>
 800cb84:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800cb86:	2e00      	cmp	r6, #0
 800cb88:	d045      	beq.n	800cc16 <__sflush_r+0xae>
 800cb8a:	2300      	movs	r3, #0
 800cb8c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800cb90:	682f      	ldr	r7, [r5, #0]
 800cb92:	6a21      	ldr	r1, [r4, #32]
 800cb94:	602b      	str	r3, [r5, #0]
 800cb96:	d030      	beq.n	800cbfa <__sflush_r+0x92>
 800cb98:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800cb9a:	89a3      	ldrh	r3, [r4, #12]
 800cb9c:	0759      	lsls	r1, r3, #29
 800cb9e:	d505      	bpl.n	800cbac <__sflush_r+0x44>
 800cba0:	6863      	ldr	r3, [r4, #4]
 800cba2:	1ad2      	subs	r2, r2, r3
 800cba4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800cba6:	b10b      	cbz	r3, 800cbac <__sflush_r+0x44>
 800cba8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800cbaa:	1ad2      	subs	r2, r2, r3
 800cbac:	2300      	movs	r3, #0
 800cbae:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800cbb0:	6a21      	ldr	r1, [r4, #32]
 800cbb2:	4628      	mov	r0, r5
 800cbb4:	47b0      	blx	r6
 800cbb6:	1c43      	adds	r3, r0, #1
 800cbb8:	89a3      	ldrh	r3, [r4, #12]
 800cbba:	d106      	bne.n	800cbca <__sflush_r+0x62>
 800cbbc:	6829      	ldr	r1, [r5, #0]
 800cbbe:	291d      	cmp	r1, #29
 800cbc0:	d82b      	bhi.n	800cc1a <__sflush_r+0xb2>
 800cbc2:	4a2a      	ldr	r2, [pc, #168]	@ (800cc6c <__sflush_r+0x104>)
 800cbc4:	410a      	asrs	r2, r1
 800cbc6:	07d6      	lsls	r6, r2, #31
 800cbc8:	d427      	bmi.n	800cc1a <__sflush_r+0xb2>
 800cbca:	2200      	movs	r2, #0
 800cbcc:	6062      	str	r2, [r4, #4]
 800cbce:	04d9      	lsls	r1, r3, #19
 800cbd0:	6922      	ldr	r2, [r4, #16]
 800cbd2:	6022      	str	r2, [r4, #0]
 800cbd4:	d504      	bpl.n	800cbe0 <__sflush_r+0x78>
 800cbd6:	1c42      	adds	r2, r0, #1
 800cbd8:	d101      	bne.n	800cbde <__sflush_r+0x76>
 800cbda:	682b      	ldr	r3, [r5, #0]
 800cbdc:	b903      	cbnz	r3, 800cbe0 <__sflush_r+0x78>
 800cbde:	6560      	str	r0, [r4, #84]	@ 0x54
 800cbe0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cbe2:	602f      	str	r7, [r5, #0]
 800cbe4:	b1b9      	cbz	r1, 800cc16 <__sflush_r+0xae>
 800cbe6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cbea:	4299      	cmp	r1, r3
 800cbec:	d002      	beq.n	800cbf4 <__sflush_r+0x8c>
 800cbee:	4628      	mov	r0, r5
 800cbf0:	f7ff fbf2 	bl	800c3d8 <_free_r>
 800cbf4:	2300      	movs	r3, #0
 800cbf6:	6363      	str	r3, [r4, #52]	@ 0x34
 800cbf8:	e00d      	b.n	800cc16 <__sflush_r+0xae>
 800cbfa:	2301      	movs	r3, #1
 800cbfc:	4628      	mov	r0, r5
 800cbfe:	47b0      	blx	r6
 800cc00:	4602      	mov	r2, r0
 800cc02:	1c50      	adds	r0, r2, #1
 800cc04:	d1c9      	bne.n	800cb9a <__sflush_r+0x32>
 800cc06:	682b      	ldr	r3, [r5, #0]
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	d0c6      	beq.n	800cb9a <__sflush_r+0x32>
 800cc0c:	2b1d      	cmp	r3, #29
 800cc0e:	d001      	beq.n	800cc14 <__sflush_r+0xac>
 800cc10:	2b16      	cmp	r3, #22
 800cc12:	d11e      	bne.n	800cc52 <__sflush_r+0xea>
 800cc14:	602f      	str	r7, [r5, #0]
 800cc16:	2000      	movs	r0, #0
 800cc18:	e022      	b.n	800cc60 <__sflush_r+0xf8>
 800cc1a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cc1e:	b21b      	sxth	r3, r3
 800cc20:	e01b      	b.n	800cc5a <__sflush_r+0xf2>
 800cc22:	690f      	ldr	r7, [r1, #16]
 800cc24:	2f00      	cmp	r7, #0
 800cc26:	d0f6      	beq.n	800cc16 <__sflush_r+0xae>
 800cc28:	0793      	lsls	r3, r2, #30
 800cc2a:	680e      	ldr	r6, [r1, #0]
 800cc2c:	bf08      	it	eq
 800cc2e:	694b      	ldreq	r3, [r1, #20]
 800cc30:	600f      	str	r7, [r1, #0]
 800cc32:	bf18      	it	ne
 800cc34:	2300      	movne	r3, #0
 800cc36:	eba6 0807 	sub.w	r8, r6, r7
 800cc3a:	608b      	str	r3, [r1, #8]
 800cc3c:	f1b8 0f00 	cmp.w	r8, #0
 800cc40:	dde9      	ble.n	800cc16 <__sflush_r+0xae>
 800cc42:	6a21      	ldr	r1, [r4, #32]
 800cc44:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800cc46:	4643      	mov	r3, r8
 800cc48:	463a      	mov	r2, r7
 800cc4a:	4628      	mov	r0, r5
 800cc4c:	47b0      	blx	r6
 800cc4e:	2800      	cmp	r0, #0
 800cc50:	dc08      	bgt.n	800cc64 <__sflush_r+0xfc>
 800cc52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cc56:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cc5a:	81a3      	strh	r3, [r4, #12]
 800cc5c:	f04f 30ff 	mov.w	r0, #4294967295
 800cc60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc64:	4407      	add	r7, r0
 800cc66:	eba8 0800 	sub.w	r8, r8, r0
 800cc6a:	e7e7      	b.n	800cc3c <__sflush_r+0xd4>
 800cc6c:	dfbffffe 	.word	0xdfbffffe

0800cc70 <_fflush_r>:
 800cc70:	b538      	push	{r3, r4, r5, lr}
 800cc72:	690b      	ldr	r3, [r1, #16]
 800cc74:	4605      	mov	r5, r0
 800cc76:	460c      	mov	r4, r1
 800cc78:	b913      	cbnz	r3, 800cc80 <_fflush_r+0x10>
 800cc7a:	2500      	movs	r5, #0
 800cc7c:	4628      	mov	r0, r5
 800cc7e:	bd38      	pop	{r3, r4, r5, pc}
 800cc80:	b118      	cbz	r0, 800cc8a <_fflush_r+0x1a>
 800cc82:	6a03      	ldr	r3, [r0, #32]
 800cc84:	b90b      	cbnz	r3, 800cc8a <_fflush_r+0x1a>
 800cc86:	f7ff f99f 	bl	800bfc8 <__sinit>
 800cc8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d0f3      	beq.n	800cc7a <_fflush_r+0xa>
 800cc92:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800cc94:	07d0      	lsls	r0, r2, #31
 800cc96:	d404      	bmi.n	800cca2 <_fflush_r+0x32>
 800cc98:	0599      	lsls	r1, r3, #22
 800cc9a:	d402      	bmi.n	800cca2 <_fflush_r+0x32>
 800cc9c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cc9e:	f7ff fb8a 	bl	800c3b6 <__retarget_lock_acquire_recursive>
 800cca2:	4628      	mov	r0, r5
 800cca4:	4621      	mov	r1, r4
 800cca6:	f7ff ff5f 	bl	800cb68 <__sflush_r>
 800ccaa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ccac:	07da      	lsls	r2, r3, #31
 800ccae:	4605      	mov	r5, r0
 800ccb0:	d4e4      	bmi.n	800cc7c <_fflush_r+0xc>
 800ccb2:	89a3      	ldrh	r3, [r4, #12]
 800ccb4:	059b      	lsls	r3, r3, #22
 800ccb6:	d4e1      	bmi.n	800cc7c <_fflush_r+0xc>
 800ccb8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ccba:	f7ff fb7d 	bl	800c3b8 <__retarget_lock_release_recursive>
 800ccbe:	e7dd      	b.n	800cc7c <_fflush_r+0xc>

0800ccc0 <__swhatbuf_r>:
 800ccc0:	b570      	push	{r4, r5, r6, lr}
 800ccc2:	460c      	mov	r4, r1
 800ccc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ccc8:	2900      	cmp	r1, #0
 800ccca:	b096      	sub	sp, #88	@ 0x58
 800cccc:	4615      	mov	r5, r2
 800ccce:	461e      	mov	r6, r3
 800ccd0:	da0d      	bge.n	800ccee <__swhatbuf_r+0x2e>
 800ccd2:	89a3      	ldrh	r3, [r4, #12]
 800ccd4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ccd8:	f04f 0100 	mov.w	r1, #0
 800ccdc:	bf14      	ite	ne
 800ccde:	2340      	movne	r3, #64	@ 0x40
 800cce0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800cce4:	2000      	movs	r0, #0
 800cce6:	6031      	str	r1, [r6, #0]
 800cce8:	602b      	str	r3, [r5, #0]
 800ccea:	b016      	add	sp, #88	@ 0x58
 800ccec:	bd70      	pop	{r4, r5, r6, pc}
 800ccee:	466a      	mov	r2, sp
 800ccf0:	f000 f848 	bl	800cd84 <_fstat_r>
 800ccf4:	2800      	cmp	r0, #0
 800ccf6:	dbec      	blt.n	800ccd2 <__swhatbuf_r+0x12>
 800ccf8:	9901      	ldr	r1, [sp, #4]
 800ccfa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ccfe:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800cd02:	4259      	negs	r1, r3
 800cd04:	4159      	adcs	r1, r3
 800cd06:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cd0a:	e7eb      	b.n	800cce4 <__swhatbuf_r+0x24>

0800cd0c <__smakebuf_r>:
 800cd0c:	898b      	ldrh	r3, [r1, #12]
 800cd0e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cd10:	079d      	lsls	r5, r3, #30
 800cd12:	4606      	mov	r6, r0
 800cd14:	460c      	mov	r4, r1
 800cd16:	d507      	bpl.n	800cd28 <__smakebuf_r+0x1c>
 800cd18:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800cd1c:	6023      	str	r3, [r4, #0]
 800cd1e:	6123      	str	r3, [r4, #16]
 800cd20:	2301      	movs	r3, #1
 800cd22:	6163      	str	r3, [r4, #20]
 800cd24:	b003      	add	sp, #12
 800cd26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cd28:	ab01      	add	r3, sp, #4
 800cd2a:	466a      	mov	r2, sp
 800cd2c:	f7ff ffc8 	bl	800ccc0 <__swhatbuf_r>
 800cd30:	9f00      	ldr	r7, [sp, #0]
 800cd32:	4605      	mov	r5, r0
 800cd34:	4639      	mov	r1, r7
 800cd36:	4630      	mov	r0, r6
 800cd38:	f7ff fbba 	bl	800c4b0 <_malloc_r>
 800cd3c:	b948      	cbnz	r0, 800cd52 <__smakebuf_r+0x46>
 800cd3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cd42:	059a      	lsls	r2, r3, #22
 800cd44:	d4ee      	bmi.n	800cd24 <__smakebuf_r+0x18>
 800cd46:	f023 0303 	bic.w	r3, r3, #3
 800cd4a:	f043 0302 	orr.w	r3, r3, #2
 800cd4e:	81a3      	strh	r3, [r4, #12]
 800cd50:	e7e2      	b.n	800cd18 <__smakebuf_r+0xc>
 800cd52:	89a3      	ldrh	r3, [r4, #12]
 800cd54:	6020      	str	r0, [r4, #0]
 800cd56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cd5a:	81a3      	strh	r3, [r4, #12]
 800cd5c:	9b01      	ldr	r3, [sp, #4]
 800cd5e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800cd62:	b15b      	cbz	r3, 800cd7c <__smakebuf_r+0x70>
 800cd64:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cd68:	4630      	mov	r0, r6
 800cd6a:	f000 f81d 	bl	800cda8 <_isatty_r>
 800cd6e:	b128      	cbz	r0, 800cd7c <__smakebuf_r+0x70>
 800cd70:	89a3      	ldrh	r3, [r4, #12]
 800cd72:	f023 0303 	bic.w	r3, r3, #3
 800cd76:	f043 0301 	orr.w	r3, r3, #1
 800cd7a:	81a3      	strh	r3, [r4, #12]
 800cd7c:	89a3      	ldrh	r3, [r4, #12]
 800cd7e:	431d      	orrs	r5, r3
 800cd80:	81a5      	strh	r5, [r4, #12]
 800cd82:	e7cf      	b.n	800cd24 <__smakebuf_r+0x18>

0800cd84 <_fstat_r>:
 800cd84:	b538      	push	{r3, r4, r5, lr}
 800cd86:	4d07      	ldr	r5, [pc, #28]	@ (800cda4 <_fstat_r+0x20>)
 800cd88:	2300      	movs	r3, #0
 800cd8a:	4604      	mov	r4, r0
 800cd8c:	4608      	mov	r0, r1
 800cd8e:	4611      	mov	r1, r2
 800cd90:	602b      	str	r3, [r5, #0]
 800cd92:	f7f4 febe 	bl	8001b12 <_fstat>
 800cd96:	1c43      	adds	r3, r0, #1
 800cd98:	d102      	bne.n	800cda0 <_fstat_r+0x1c>
 800cd9a:	682b      	ldr	r3, [r5, #0]
 800cd9c:	b103      	cbz	r3, 800cda0 <_fstat_r+0x1c>
 800cd9e:	6023      	str	r3, [r4, #0]
 800cda0:	bd38      	pop	{r3, r4, r5, pc}
 800cda2:	bf00      	nop
 800cda4:	20000e8c 	.word	0x20000e8c

0800cda8 <_isatty_r>:
 800cda8:	b538      	push	{r3, r4, r5, lr}
 800cdaa:	4d06      	ldr	r5, [pc, #24]	@ (800cdc4 <_isatty_r+0x1c>)
 800cdac:	2300      	movs	r3, #0
 800cdae:	4604      	mov	r4, r0
 800cdb0:	4608      	mov	r0, r1
 800cdb2:	602b      	str	r3, [r5, #0]
 800cdb4:	f7f4 febd 	bl	8001b32 <_isatty>
 800cdb8:	1c43      	adds	r3, r0, #1
 800cdba:	d102      	bne.n	800cdc2 <_isatty_r+0x1a>
 800cdbc:	682b      	ldr	r3, [r5, #0]
 800cdbe:	b103      	cbz	r3, 800cdc2 <_isatty_r+0x1a>
 800cdc0:	6023      	str	r3, [r4, #0]
 800cdc2:	bd38      	pop	{r3, r4, r5, pc}
 800cdc4:	20000e8c 	.word	0x20000e8c

0800cdc8 <_sbrk_r>:
 800cdc8:	b538      	push	{r3, r4, r5, lr}
 800cdca:	4d06      	ldr	r5, [pc, #24]	@ (800cde4 <_sbrk_r+0x1c>)
 800cdcc:	2300      	movs	r3, #0
 800cdce:	4604      	mov	r4, r0
 800cdd0:	4608      	mov	r0, r1
 800cdd2:	602b      	str	r3, [r5, #0]
 800cdd4:	f7f4 fec6 	bl	8001b64 <_sbrk>
 800cdd8:	1c43      	adds	r3, r0, #1
 800cdda:	d102      	bne.n	800cde2 <_sbrk_r+0x1a>
 800cddc:	682b      	ldr	r3, [r5, #0]
 800cdde:	b103      	cbz	r3, 800cde2 <_sbrk_r+0x1a>
 800cde0:	6023      	str	r3, [r4, #0]
 800cde2:	bd38      	pop	{r3, r4, r5, pc}
 800cde4:	20000e8c 	.word	0x20000e8c

0800cde8 <_init>:
 800cde8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cdea:	bf00      	nop
 800cdec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cdee:	bc08      	pop	{r3}
 800cdf0:	469e      	mov	lr, r3
 800cdf2:	4770      	bx	lr

0800cdf4 <_fini>:
 800cdf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cdf6:	bf00      	nop
 800cdf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cdfa:	bc08      	pop	{r3}
 800cdfc:	469e      	mov	lr, r3
 800cdfe:	4770      	bx	lr
