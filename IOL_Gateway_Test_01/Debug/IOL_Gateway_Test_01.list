
IOL_Gateway_Test_01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ca68  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f0  0800cc48  0800cc48  0000dc48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cf38  0800cf38  0000e278  2**0
                  CONTENTS
  4 .ARM          00000008  0800cf38  0800cf38  0000df38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cf40  0800cf40  0000e278  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cf40  0800cf40  0000df40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800cf44  0800cf44  0000df44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000278  20000000  0800cf48  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000268c  20000278  0800d1c0  0000e278  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002904  0800d1c0  0000e904  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e278  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020ddd  00000000  00000000  0000e2a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000050ba  00000000  00000000  0002f085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a88  00000000  00000000  00034140  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001441  00000000  00000000  00035bc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023e64  00000000  00000000  00037009  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00023765  00000000  00000000  0005ae6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ce1a7  00000000  00000000  0007e5d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014c779  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007538  00000000  00000000  0014c7bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  00153cf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000278 	.word	0x20000278
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800cc30 	.word	0x0800cc30

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000027c 	.word	0x2000027c
 800021c:	0800cc30 	.word	0x0800cc30

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <Decode_MC_ReadWrite>:
static uint8_t IOL_Checksum_SeedValue = 0x52;
static uint8_t IOL_Page1_SeqValue[13] = {0x49, 0x49, 0x2b, 0x11, 0x83, 0x83, 0xff, 0xff, 0x00, 0x04, 0x5e, 0x00, 0x00};
static uint8_t Page1_seq = 0;

static uint8_t Decode_MC_ReadWrite (uint8_t Data)
{
 80005b0:	b480      	push	{r7}
 80005b2:	b085      	sub	sp, #20
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	4603      	mov	r3, r0
 80005b8:	71fb      	strb	r3, [r7, #7]
    uint8_t MCdata = 0;
 80005ba:	2300      	movs	r3, #0
 80005bc:	73fb      	strb	r3, [r7, #15]

    MCdata = Data;
 80005be:	79fb      	ldrb	r3, [r7, #7]
 80005c0:	73fb      	strb	r3, [r7, #15]
    MCdata = (MCdata >> 7) & 0x01;
 80005c2:	7bfb      	ldrb	r3, [r7, #15]
 80005c4:	09db      	lsrs	r3, r3, #7
 80005c6:	73fb      	strb	r3, [r7, #15]

    switch (MCdata)
 80005c8:	7bfb      	ldrb	r3, [r7, #15]
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d002      	beq.n	80005d4 <Decode_MC_ReadWrite+0x24>
 80005ce:	2b01      	cmp	r3, #1
 80005d0:	d002      	beq.n	80005d8 <Decode_MC_ReadWrite+0x28>
 80005d2:	e003      	b.n	80005dc <Decode_MC_ReadWrite+0x2c>
    {
        case 0 :
            return IOL_RW_Write;
 80005d4:	2300      	movs	r3, #0
 80005d6:	e002      	b.n	80005de <Decode_MC_ReadWrite+0x2e>
        case 1 :
            return IOL_RW_Read;
 80005d8:	2301      	movs	r3, #1
 80005da:	e000      	b.n	80005de <Decode_MC_ReadWrite+0x2e>
        default :
            // printf("Unexpected value\n");
            return 'X';
 80005dc:	2358      	movs	r3, #88	@ 0x58
    }
}
 80005de:	4618      	mov	r0, r3
 80005e0:	3714      	adds	r7, #20
 80005e2:	46bd      	mov	sp, r7
 80005e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e8:	4770      	bx	lr
	...

080005ec <Decode_MC_CommunicationChannel>:

static uint8_t Decode_MC_CommunicationChannel (uint8_t Data)
{
 80005ec:	b480      	push	{r7}
 80005ee:	b085      	sub	sp, #20
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	4603      	mov	r3, r0
 80005f4:	71fb      	strb	r3, [r7, #7]
    uint8_t MCdata = 0;
 80005f6:	2300      	movs	r3, #0
 80005f8:	73fb      	strb	r3, [r7, #15]

    MCdata = Data;
 80005fa:	79fb      	ldrb	r3, [r7, #7]
 80005fc:	73fb      	strb	r3, [r7, #15]
    MCdata = (MCdata >> 5) & 0x03;
 80005fe:	7bfb      	ldrb	r3, [r7, #15]
 8000600:	095b      	lsrs	r3, r3, #5
 8000602:	b2db      	uxtb	r3, r3
 8000604:	f003 0303 	and.w	r3, r3, #3
 8000608:	73fb      	strb	r3, [r7, #15]
    
    switch (MCdata)
 800060a:	7bfb      	ldrb	r3, [r7, #15]
 800060c:	2b03      	cmp	r3, #3
 800060e:	d813      	bhi.n	8000638 <Decode_MC_CommunicationChannel+0x4c>
 8000610:	a201      	add	r2, pc, #4	@ (adr r2, 8000618 <Decode_MC_CommunicationChannel+0x2c>)
 8000612:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000616:	bf00      	nop
 8000618:	08000629 	.word	0x08000629
 800061c:	0800062d 	.word	0x0800062d
 8000620:	08000631 	.word	0x08000631
 8000624:	08000635 	.word	0x08000635
    {
        case 0 :
            // printf("%s,", CommunicationChannel.MC_Com_Ch_0);
            return IOL_Channel_Process;
 8000628:	2300      	movs	r3, #0
 800062a:	e005      	b.n	8000638 <Decode_MC_CommunicationChannel+0x4c>
        case 1 :
            // printf("%s,", CommunicationChannel.MC_Com_Ch_1);
            return IOL_Channel_Page;
 800062c:	2301      	movs	r3, #1
 800062e:	e003      	b.n	8000638 <Decode_MC_CommunicationChannel+0x4c>
        case 2 :
            // printf("%s,", CommunicationChannel.MC_Com_Ch_2);
            return IOL_Channel_Diagnosis;
 8000630:	2302      	movs	r3, #2
 8000632:	e001      	b.n	8000638 <Decode_MC_CommunicationChannel+0x4c>
        case 3 :
            // printf("%s,", CommunicationChannel.MC_Com_Ch_3);
            return IOL_Channel_ISDU;
 8000634:	2303      	movs	r3, #3
 8000636:	e7ff      	b.n	8000638 <Decode_MC_CommunicationChannel+0x4c>
    }
}
 8000638:	4618      	mov	r0, r3
 800063a:	3714      	adds	r7, #20
 800063c:	46bd      	mov	sp, r7
 800063e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000642:	4770      	bx	lr

08000644 <Decode_MC_Address>:

static uint8_t Decode_MC_Address (uint8_t Data)
{
 8000644:	b480      	push	{r7}
 8000646:	b085      	sub	sp, #20
 8000648:	af00      	add	r7, sp, #0
 800064a:	4603      	mov	r3, r0
 800064c:	71fb      	strb	r3, [r7, #7]
    uint8_t MCdata = 0;
 800064e:	2300      	movs	r3, #0
 8000650:	73fb      	strb	r3, [r7, #15]

    MCdata = Data;
 8000652:	79fb      	ldrb	r3, [r7, #7]
 8000654:	73fb      	strb	r3, [r7, #15]
    
    return MCdata & 0x1F;
 8000656:	7bfb      	ldrb	r3, [r7, #15]
 8000658:	f003 031f 	and.w	r3, r3, #31
 800065c:	b2db      	uxtb	r3, r3
}
 800065e:	4618      	mov	r0, r3
 8000660:	3714      	adds	r7, #20
 8000662:	46bd      	mov	sp, r7
 8000664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000668:	4770      	bx	lr

0800066a <Decode_CKT_Type>:

static uint8_t Decode_CKT_Type (uint8_t Data)
{
 800066a:	b480      	push	{r7}
 800066c:	b085      	sub	sp, #20
 800066e:	af00      	add	r7, sp, #0
 8000670:	4603      	mov	r3, r0
 8000672:	71fb      	strb	r3, [r7, #7]
    uint8_t MCdata = 0;
 8000674:	2300      	movs	r3, #0
 8000676:	73fb      	strb	r3, [r7, #15]
    
    MCdata = Data;
 8000678:	79fb      	ldrb	r3, [r7, #7]
 800067a:	73fb      	strb	r3, [r7, #15]

    return (MCdata >> 6) & 0x03;
 800067c:	7bfb      	ldrb	r3, [r7, #15]
 800067e:	099b      	lsrs	r3, r3, #6
 8000680:	b2db      	uxtb	r3, r3
}
 8000682:	4618      	mov	r0, r3
 8000684:	3714      	adds	r7, #20
 8000686:	46bd      	mov	sp, r7
 8000688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068c:	4770      	bx	lr

0800068e <Decode_CKT_Checksum>:

static uint8_t Decode_CKT_Checksum (uint8_t Data)
{
 800068e:	b480      	push	{r7}
 8000690:	b085      	sub	sp, #20
 8000692:	af00      	add	r7, sp, #0
 8000694:	4603      	mov	r3, r0
 8000696:	71fb      	strb	r3, [r7, #7]
    uint8_t MCdata = 0;
 8000698:	2300      	movs	r3, #0
 800069a:	73fb      	strb	r3, [r7, #15]

    MCdata = Data;
 800069c:	79fb      	ldrb	r3, [r7, #7]
 800069e:	73fb      	strb	r3, [r7, #15]

    return MCdata & 0x3F;
 80006a0:	7bfb      	ldrb	r3, [r7, #15]
 80006a2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80006a6:	b2db      	uxtb	r3, r3
}
 80006a8:	4618      	mov	r0, r3
 80006aa:	3714      	adds	r7, #20
 80006ac:	46bd      	mov	sp, r7
 80006ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b2:	4770      	bx	lr

080006b4 <IOL_Parse_Rx_data>:
    return ;
}

// 마스터로부터 받은 데이터를 분석하기 위해 파싱하여 해당 구조체멤버에 넣어줌
uint8_t IOL_Parse_Rx_data (uint8_t * pData)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b082      	sub	sp, #8
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
    IOL_M2D_rxpacket.rw = Decode_MC_ReadWrite(*pData);
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	781b      	ldrb	r3, [r3, #0]
 80006c0:	4618      	mov	r0, r3
 80006c2:	f7ff ff75 	bl	80005b0 <Decode_MC_ReadWrite>
 80006c6:	4603      	mov	r3, r0
 80006c8:	461a      	mov	r2, r3
 80006ca:	4b17      	ldr	r3, [pc, #92]	@ (8000728 <IOL_Parse_Rx_data+0x74>)
 80006cc:	701a      	strb	r2, [r3, #0]
    IOL_M2D_rxpacket.commchannel = Decode_MC_CommunicationChannel(*pData);
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	781b      	ldrb	r3, [r3, #0]
 80006d2:	4618      	mov	r0, r3
 80006d4:	f7ff ff8a 	bl	80005ec <Decode_MC_CommunicationChannel>
 80006d8:	4603      	mov	r3, r0
 80006da:	461a      	mov	r2, r3
 80006dc:	4b12      	ldr	r3, [pc, #72]	@ (8000728 <IOL_Parse_Rx_data+0x74>)
 80006de:	705a      	strb	r2, [r3, #1]
    IOL_M2D_rxpacket.addr = Decode_MC_Address(*pData);
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	781b      	ldrb	r3, [r3, #0]
 80006e4:	4618      	mov	r0, r3
 80006e6:	f7ff ffad 	bl	8000644 <Decode_MC_Address>
 80006ea:	4603      	mov	r3, r0
 80006ec:	461a      	mov	r2, r3
 80006ee:	4b0e      	ldr	r3, [pc, #56]	@ (8000728 <IOL_Parse_Rx_data+0x74>)
 80006f0:	709a      	strb	r2, [r3, #2]

    IOL_M2D_rxpacket.mseqtype = Decode_CKT_Type(*(++pData));
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	3301      	adds	r3, #1
 80006f6:	607b      	str	r3, [r7, #4]
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	781b      	ldrb	r3, [r3, #0]
 80006fc:	4618      	mov	r0, r3
 80006fe:	f7ff ffb4 	bl	800066a <Decode_CKT_Type>
 8000702:	4603      	mov	r3, r0
 8000704:	461a      	mov	r2, r3
 8000706:	4b08      	ldr	r3, [pc, #32]	@ (8000728 <IOL_Parse_Rx_data+0x74>)
 8000708:	70da      	strb	r2, [r3, #3]
    IOL_M2D_rxpacket.ckt = Decode_CKT_Checksum(*pData);
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	781b      	ldrb	r3, [r3, #0]
 800070e:	4618      	mov	r0, r3
 8000710:	f7ff ffbd 	bl	800068e <Decode_CKT_Checksum>
 8000714:	4603      	mov	r3, r0
 8000716:	461a      	mov	r2, r3
 8000718:	4b03      	ldr	r3, [pc, #12]	@ (8000728 <IOL_Parse_Rx_data+0x74>)
 800071a:	711a      	strb	r2, [r3, #4]

    return 0;
 800071c:	2300      	movs	r3, #0
}
 800071e:	4618      	mov	r0, r3
 8000720:	3708      	adds	r7, #8
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	20000e80 	.word	0x20000e80

0800072c <IOL_Print_ParsingM2Ddata>:

void IOL_Print_ParsingM2Ddata (void)
{
 800072c:	b590      	push	{r4, r7, lr}
 800072e:	b083      	sub	sp, #12
 8000730:	af02      	add	r7, sp, #8
    printf("M2D Rx Data Parsing :  %02X, %02X, %02X, %02X, %02X\r\n", IOL_M2D_rxpacket.rw
 8000732:	4b0f      	ldr	r3, [pc, #60]	@ (8000770 <IOL_Print_ParsingM2Ddata+0x44>)
 8000734:	781b      	ldrb	r3, [r3, #0]
 8000736:	4619      	mov	r1, r3
                                                                    , IOL_M2D_rxpacket.commchannel
 8000738:	4b0d      	ldr	r3, [pc, #52]	@ (8000770 <IOL_Print_ParsingM2Ddata+0x44>)
 800073a:	785b      	ldrb	r3, [r3, #1]
    printf("M2D Rx Data Parsing :  %02X, %02X, %02X, %02X, %02X\r\n", IOL_M2D_rxpacket.rw
 800073c:	4618      	mov	r0, r3
                                                                    , IOL_M2D_rxpacket.addr
 800073e:	4b0c      	ldr	r3, [pc, #48]	@ (8000770 <IOL_Print_ParsingM2Ddata+0x44>)
 8000740:	789b      	ldrb	r3, [r3, #2]
    printf("M2D Rx Data Parsing :  %02X, %02X, %02X, %02X, %02X\r\n", IOL_M2D_rxpacket.rw
 8000742:	461c      	mov	r4, r3
                                                                    , IOL_M2D_rxpacket.mseqtype
 8000744:	4b0a      	ldr	r3, [pc, #40]	@ (8000770 <IOL_Print_ParsingM2Ddata+0x44>)
 8000746:	78db      	ldrb	r3, [r3, #3]
    printf("M2D Rx Data Parsing :  %02X, %02X, %02X, %02X, %02X\r\n", IOL_M2D_rxpacket.rw
 8000748:	461a      	mov	r2, r3
                                                                    , IOL_M2D_rxpacket.ckt);
 800074a:	4b09      	ldr	r3, [pc, #36]	@ (8000770 <IOL_Print_ParsingM2Ddata+0x44>)
 800074c:	791b      	ldrb	r3, [r3, #4]
    printf("M2D Rx Data Parsing :  %02X, %02X, %02X, %02X, %02X\r\n", IOL_M2D_rxpacket.rw
 800074e:	9301      	str	r3, [sp, #4]
 8000750:	9200      	str	r2, [sp, #0]
 8000752:	4623      	mov	r3, r4
 8000754:	4602      	mov	r2, r0
 8000756:	4807      	ldr	r0, [pc, #28]	@ (8000774 <IOL_Print_ParsingM2Ddata+0x48>)
 8000758:	f00b fb90 	bl	800be7c <iprintf>

    printf("Device State : %d\r\n", stateIOLseq);
 800075c:	4b06      	ldr	r3, [pc, #24]	@ (8000778 <IOL_Print_ParsingM2Ddata+0x4c>)
 800075e:	781b      	ldrb	r3, [r3, #0]
 8000760:	4619      	mov	r1, r3
 8000762:	4806      	ldr	r0, [pc, #24]	@ (800077c <IOL_Print_ParsingM2Ddata+0x50>)
 8000764:	f00b fb8a 	bl	800be7c <iprintf>
}
 8000768:	bf00      	nop
 800076a:	3704      	adds	r7, #4
 800076c:	46bd      	mov	sp, r7
 800076e:	bd90      	pop	{r4, r7, pc}
 8000770:	20000e80 	.word	0x20000e80
 8000774:	0800cc48 	.word	0x0800cc48
 8000778:	20000fd8 	.word	0x20000fd8
 800077c:	0800cc80 	.word	0x0800cc80

08000780 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b082      	sub	sp, #8
 8000784:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000786:	4b12      	ldr	r3, [pc, #72]	@ (80007d0 <MX_DMA_Init+0x50>)
 8000788:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800078a:	4a11      	ldr	r2, [pc, #68]	@ (80007d0 <MX_DMA_Init+0x50>)
 800078c:	f043 0304 	orr.w	r3, r3, #4
 8000790:	6493      	str	r3, [r2, #72]	@ 0x48
 8000792:	4b0f      	ldr	r3, [pc, #60]	@ (80007d0 <MX_DMA_Init+0x50>)
 8000794:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000796:	f003 0304 	and.w	r3, r3, #4
 800079a:	607b      	str	r3, [r7, #4]
 800079c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800079e:	4b0c      	ldr	r3, [pc, #48]	@ (80007d0 <MX_DMA_Init+0x50>)
 80007a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80007a2:	4a0b      	ldr	r2, [pc, #44]	@ (80007d0 <MX_DMA_Init+0x50>)
 80007a4:	f043 0301 	orr.w	r3, r3, #1
 80007a8:	6493      	str	r3, [r2, #72]	@ 0x48
 80007aa:	4b09      	ldr	r3, [pc, #36]	@ (80007d0 <MX_DMA_Init+0x50>)
 80007ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80007ae:	f003 0301 	and.w	r3, r3, #1
 80007b2:	603b      	str	r3, [r7, #0]
 80007b4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80007b6:	2200      	movs	r2, #0
 80007b8:	2100      	movs	r1, #0
 80007ba:	200b      	movs	r0, #11
 80007bc:	f001 fcfb 	bl	80021b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80007c0:	200b      	movs	r0, #11
 80007c2:	f001 fd12 	bl	80021ea <HAL_NVIC_EnableIRQ>

}
 80007c6:	bf00      	nop
 80007c8:	3708      	adds	r7, #8
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	40021000 	.word	0x40021000

080007d4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b08a      	sub	sp, #40	@ 0x28
 80007d8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007da:	f107 0314 	add.w	r3, r7, #20
 80007de:	2200      	movs	r2, #0
 80007e0:	601a      	str	r2, [r3, #0]
 80007e2:	605a      	str	r2, [r3, #4]
 80007e4:	609a      	str	r2, [r3, #8]
 80007e6:	60da      	str	r2, [r3, #12]
 80007e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ea:	4b43      	ldr	r3, [pc, #268]	@ (80008f8 <MX_GPIO_Init+0x124>)
 80007ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007ee:	4a42      	ldr	r2, [pc, #264]	@ (80008f8 <MX_GPIO_Init+0x124>)
 80007f0:	f043 0304 	orr.w	r3, r3, #4
 80007f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007f6:	4b40      	ldr	r3, [pc, #256]	@ (80008f8 <MX_GPIO_Init+0x124>)
 80007f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007fa:	f003 0304 	and.w	r3, r3, #4
 80007fe:	613b      	str	r3, [r7, #16]
 8000800:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000802:	4b3d      	ldr	r3, [pc, #244]	@ (80008f8 <MX_GPIO_Init+0x124>)
 8000804:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000806:	4a3c      	ldr	r2, [pc, #240]	@ (80008f8 <MX_GPIO_Init+0x124>)
 8000808:	f043 0320 	orr.w	r3, r3, #32
 800080c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800080e:	4b3a      	ldr	r3, [pc, #232]	@ (80008f8 <MX_GPIO_Init+0x124>)
 8000810:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000812:	f003 0320 	and.w	r3, r3, #32
 8000816:	60fb      	str	r3, [r7, #12]
 8000818:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800081a:	4b37      	ldr	r3, [pc, #220]	@ (80008f8 <MX_GPIO_Init+0x124>)
 800081c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800081e:	4a36      	ldr	r2, [pc, #216]	@ (80008f8 <MX_GPIO_Init+0x124>)
 8000820:	f043 0301 	orr.w	r3, r3, #1
 8000824:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000826:	4b34      	ldr	r3, [pc, #208]	@ (80008f8 <MX_GPIO_Init+0x124>)
 8000828:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800082a:	f003 0301 	and.w	r3, r3, #1
 800082e:	60bb      	str	r3, [r7, #8]
 8000830:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000832:	4b31      	ldr	r3, [pc, #196]	@ (80008f8 <MX_GPIO_Init+0x124>)
 8000834:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000836:	4a30      	ldr	r2, [pc, #192]	@ (80008f8 <MX_GPIO_Init+0x124>)
 8000838:	f043 0302 	orr.w	r3, r3, #2
 800083c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800083e:	4b2e      	ldr	r3, [pc, #184]	@ (80008f8 <MX_GPIO_Init+0x124>)
 8000840:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000842:	f003 0302 	and.w	r3, r3, #2
 8000846:	607b      	str	r3, [r7, #4]
 8000848:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800084a:	2200      	movs	r2, #0
 800084c:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 8000850:	482a      	ldr	r0, [pc, #168]	@ (80008fc <MX_GPIO_Init+0x128>)
 8000852:	f002 f999 	bl	8002b88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8000856:	2200      	movs	r2, #0
 8000858:	2140      	movs	r1, #64	@ 0x40
 800085a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800085e:	f002 f993 	bl	8002b88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000862:	2200      	movs	r2, #0
 8000864:	2101      	movs	r1, #1
 8000866:	4826      	ldr	r0, [pc, #152]	@ (8000900 <MX_GPIO_Init+0x12c>)
 8000868:	f002 f98e 	bl	8002b88 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800086c:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000870:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000872:	2301      	movs	r3, #1
 8000874:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000876:	2300      	movs	r3, #0
 8000878:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087a:	2300      	movs	r3, #0
 800087c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800087e:	f107 0314 	add.w	r3, r7, #20
 8000882:	4619      	mov	r1, r3
 8000884:	481d      	ldr	r0, [pc, #116]	@ (80008fc <MX_GPIO_Init+0x128>)
 8000886:	f001 fffd 	bl	8002884 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800088a:	23a0      	movs	r3, #160	@ 0xa0
 800088c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800088e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000892:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000894:	2300      	movs	r3, #0
 8000896:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000898:	f107 0314 	add.w	r3, r7, #20
 800089c:	4619      	mov	r1, r3
 800089e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008a2:	f001 ffef 	bl	8002884 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80008a6:	2340      	movs	r3, #64	@ 0x40
 80008a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008aa:	2301      	movs	r3, #1
 80008ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ae:	2300      	movs	r3, #0
 80008b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b2:	2300      	movs	r3, #0
 80008b4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008b6:	f107 0314 	add.w	r3, r7, #20
 80008ba:	4619      	mov	r1, r3
 80008bc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008c0:	f001 ffe0 	bl	8002884 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80008c4:	2301      	movs	r3, #1
 80008c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c8:	2301      	movs	r3, #1
 80008ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008cc:	2300      	movs	r3, #0
 80008ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d0:	2300      	movs	r3, #0
 80008d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008d4:	f107 0314 	add.w	r3, r7, #20
 80008d8:	4619      	mov	r1, r3
 80008da:	4809      	ldr	r0, [pc, #36]	@ (8000900 <MX_GPIO_Init+0x12c>)
 80008dc:	f001 ffd2 	bl	8002884 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80008e0:	2200      	movs	r2, #0
 80008e2:	2100      	movs	r1, #0
 80008e4:	2017      	movs	r0, #23
 80008e6:	f001 fc66 	bl	80021b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80008ea:	2017      	movs	r0, #23
 80008ec:	f001 fc7d 	bl	80021ea <HAL_NVIC_EnableIRQ>

}
 80008f0:	bf00      	nop
 80008f2:	3728      	adds	r7, #40	@ 0x28
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	40021000 	.word	0x40021000
 80008fc:	48000800 	.word	0x48000800
 8000900:	48000400 	.word	0x48000400

08000904 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000908:	f001 fae7 	bl	8001eda <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800090c:	f000 f83a 	bl	8000984 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000910:	f7ff ff60 	bl	80007d4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000914:	f7ff ff34 	bl	8000780 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000918:	f000 fc30 	bl	800117c <MX_USART1_UART_Init>
  MX_USB_Device_Init();
 800091c:	f00a fcca 	bl	800b2b4 <MX_USB_Device_Init>
  MX_TIM1_Init();
 8000920:	f000 fbb2 	bl	8001088 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  Q_Init(&USB_TX_Q, (uint8_t *) USB_TX_Data, quedata_arraylength);
 8000924:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000928:	4910      	ldr	r1, [pc, #64]	@ (800096c <main+0x68>)
 800092a:	4811      	ldr	r0, [pc, #68]	@ (8000970 <main+0x6c>)
 800092c:	f000 f87b 	bl	8000a26 <Q_Init>

  HAL_Delay(3000);
 8000930:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000934:	f001 fb42 	bl	8001fbc <HAL_Delay>
  HAL_TIM_Base_Start_IT(&htim1);
 8000938:	480e      	ldr	r0, [pc, #56]	@ (8000974 <main+0x70>)
 800093a:	f004 fea5 	bl	8005688 <HAL_TIM_Base_Start_IT>
  GetClockSourcePrint();
 800093e:	f000 fd75 	bl	800142c <GetClockSourcePrint>
  BootMessagePrint();
 8000942:	f000 fd43 	bl	80013cc <BootMessagePrint>

  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, (uint8_t *)uart1_rx_IDLE_buf, UART_RX_IDLE_BUFSIZE);
 8000946:	2264      	movs	r2, #100	@ 0x64
 8000948:	490b      	ldr	r1, [pc, #44]	@ (8000978 <main+0x74>)
 800094a:	480c      	ldr	r0, [pc, #48]	@ (800097c <main+0x78>)
 800094c:	f007 f936 	bl	8007bbc <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8000950:	4b0b      	ldr	r3, [pc, #44]	@ (8000980 <main+0x7c>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	681a      	ldr	r2, [r3, #0]
 8000956:	4b0a      	ldr	r3, [pc, #40]	@ (8000980 <main+0x7c>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	f022 0204 	bic.w	r2, r2, #4
 800095e:	601a      	str	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    User_Toggle_Led();
 8000960:	f000 fcfc 	bl	800135c <User_Toggle_Led>
    ProcessDataIn_IncreaseCntValue();
 8000964:	f000 fd10 	bl	8001388 <ProcessDataIn_IncreaseCntValue>
    User_Toggle_Led();
 8000968:	bf00      	nop
 800096a:	e7f9      	b.n	8000960 <main+0x5c>
 800096c:	20000690 	.word	0x20000690
 8000970:	20000fc8 	.word	0x20000fc8
 8000974:	20000e88 	.word	0x20000e88
 8000978:	20000a7c 	.word	0x20000a7c
 800097c:	20000f34 	.word	0x20000f34
 8000980:	20000ed4 	.word	0x20000ed4

08000984 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b094      	sub	sp, #80	@ 0x50
 8000988:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800098a:	f107 0318 	add.w	r3, r7, #24
 800098e:	2238      	movs	r2, #56	@ 0x38
 8000990:	2100      	movs	r1, #0
 8000992:	4618      	mov	r0, r3
 8000994:	f00b fbba 	bl	800c10c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000998:	1d3b      	adds	r3, r7, #4
 800099a:	2200      	movs	r2, #0
 800099c:	601a      	str	r2, [r3, #0]
 800099e:	605a      	str	r2, [r3, #4]
 80009a0:	609a      	str	r2, [r3, #8]
 80009a2:	60da      	str	r2, [r3, #12]
 80009a4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80009a6:	2000      	movs	r0, #0
 80009a8:	f003 fe44 	bl	8004634 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80009ac:	2321      	movs	r3, #33	@ 0x21
 80009ae:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80009b0:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80009b4:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80009b6:	2301      	movs	r3, #1
 80009b8:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009ba:	2302      	movs	r3, #2
 80009bc:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009be:	2303      	movs	r3, #3
 80009c0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 80009c2:	2306      	movs	r3, #6
 80009c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80009c6:	2355      	movs	r3, #85	@ 0x55
 80009c8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009ca:	2302      	movs	r3, #2
 80009cc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 80009ce:	2304      	movs	r3, #4
 80009d0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80009d2:	2302      	movs	r3, #2
 80009d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009d6:	f107 0318 	add.w	r3, r7, #24
 80009da:	4618      	mov	r0, r3
 80009dc:	f003 fede 	bl	800479c <HAL_RCC_OscConfig>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <SystemClock_Config+0x66>
  {
    Error_Handler();
 80009e6:	f000 f818 	bl	8000a1a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009ea:	230f      	movs	r3, #15
 80009ec:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009ee:	2303      	movs	r3, #3
 80009f0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009f2:	2300      	movs	r3, #0
 80009f4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009f6:	2300      	movs	r3, #0
 80009f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009fa:	2300      	movs	r3, #0
 80009fc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80009fe:	1d3b      	adds	r3, r7, #4
 8000a00:	2104      	movs	r1, #4
 8000a02:	4618      	mov	r0, r3
 8000a04:	f004 f9dc 	bl	8004dc0 <HAL_RCC_ClockConfig>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000a0e:	f000 f804 	bl	8000a1a <Error_Handler>
  }
}
 8000a12:	bf00      	nop
 8000a14:	3750      	adds	r7, #80	@ 0x50
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}

08000a1a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a1a:	b480      	push	{r7}
 8000a1c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a1e:	b672      	cpsid	i
}
 8000a20:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a22:	bf00      	nop
 8000a24:	e7fd      	b.n	8000a22 <Error_Handler+0x8>

08000a26 <Q_Init>:
#include "queue.h"

void Q_Init(Q_queue_t *queue, uint8_t *data, uint16_t len){
 8000a26:	b480      	push	{r7}
 8000a28:	b085      	sub	sp, #20
 8000a2a:	af00      	add	r7, sp, #0
 8000a2c:	60f8      	str	r0, [r7, #12]
 8000a2e:	60b9      	str	r1, [r7, #8]
 8000a30:	4613      	mov	r3, r2
 8000a32:	80fb      	strh	r3, [r7, #6]
    queue->idx_read = 0;
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	2200      	movs	r2, #0
 8000a38:	809a      	strh	r2, [r3, #4]
    queue->idx_write = 0;
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	805a      	strh	r2, [r3, #2]
    queue->count_full = 0;
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	2200      	movs	r2, #0
 8000a44:	80da      	strh	r2, [r3, #6]
    queue->count_empty = 0;
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	2200      	movs	r2, #0
 8000a4a:	811a      	strh	r2, [r3, #8]
    queue->size = len;
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	88fa      	ldrh	r2, [r7, #6]
 8000a50:	801a      	strh	r2, [r3, #0]
    queue->data = data;
 8000a52:	68fb      	ldr	r3, [r7, #12]
 8000a54:	68ba      	ldr	r2, [r7, #8]
 8000a56:	60da      	str	r2, [r3, #12]
}
 8000a58:	bf00      	nop
 8000a5a:	3714      	adds	r7, #20
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a62:	4770      	bx	lr

08000a64 <Q_Write>:

void Q_Clear(Q_queue_t *queue){
    queue->idx_write = queue->idx_read;
}

bool Q_Write(Q_queue_t *queue, uint8_t *data, uint16_t len){
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b088      	sub	sp, #32
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	60f8      	str	r0, [r7, #12]
 8000a6c:	60b9      	str	r1, [r7, #8]
 8000a6e:	4613      	mov	r3, r2
 8000a70:	80fb      	strh	r3, [r7, #6]
    int empty_bytes;
    uint16_t next_idx;
    uint16_t num_first;
    bool ret = false;
 8000a72:	2300      	movs	r3, #0
 8000a74:	77fb      	strb	r3, [r7, #31]
    
    empty_bytes = Q_NumEmptyBytes(queue);  
 8000a76:	68f8      	ldr	r0, [r7, #12]
 8000a78:	f000 f8ea 	bl	8000c50 <Q_NumEmptyBytes>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	61bb      	str	r3, [r7, #24]
    if(empty_bytes >= len){
 8000a80:	88fb      	ldrh	r3, [r7, #6]
 8000a82:	69ba      	ldr	r2, [r7, #24]
 8000a84:	429a      	cmp	r2, r3
 8000a86:	db44      	blt.n	8000b12 <Q_Write+0xae>
        next_idx = queue->idx_write + len;
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000a8e:	b29a      	uxth	r2, r3
 8000a90:	88fb      	ldrh	r3, [r7, #6]
 8000a92:	4413      	add	r3, r2
 8000a94:	82fb      	strh	r3, [r7, #22]
        if(next_idx < queue->size){
 8000a96:	68fb      	ldr	r3, [r7, #12]
 8000a98:	881b      	ldrh	r3, [r3, #0]
 8000a9a:	8afa      	ldrh	r2, [r7, #22]
 8000a9c:	429a      	cmp	r2, r3
 8000a9e:	d20b      	bcs.n	8000ab8 <Q_Write+0x54>
            memcpy(&(queue->data[queue->idx_write]),data,len);  //memcpy(dest,source,num)
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	68db      	ldr	r3, [r3, #12]
 8000aa4:	68fa      	ldr	r2, [r7, #12]
 8000aa6:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8000aaa:	4413      	add	r3, r2
 8000aac:	88fa      	ldrh	r2, [r7, #6]
 8000aae:	68b9      	ldr	r1, [r7, #8]
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f00b fba6 	bl	800c202 <memcpy>
 8000ab6:	e01d      	b.n	8000af4 <Q_Write+0x90>
        }
        else{
            num_first = queue->size-queue->idx_write;
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	881a      	ldrh	r2, [r3, #0]
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000ac2:	b29b      	uxth	r3, r3
 8000ac4:	1ad3      	subs	r3, r2, r3
 8000ac6:	82bb      	strh	r3, [r7, #20]
            memcpy(&(queue->data[queue->idx_write]),data,num_first);
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	68db      	ldr	r3, [r3, #12]
 8000acc:	68fa      	ldr	r2, [r7, #12]
 8000ace:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8000ad2:	4413      	add	r3, r2
 8000ad4:	8aba      	ldrh	r2, [r7, #20]
 8000ad6:	68b9      	ldr	r1, [r7, #8]
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f00b fb92 	bl	800c202 <memcpy>
            memcpy(&(queue->data[0]),&(data[num_first]),len-num_first);
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	68d8      	ldr	r0, [r3, #12]
 8000ae2:	8abb      	ldrh	r3, [r7, #20]
 8000ae4:	68ba      	ldr	r2, [r7, #8]
 8000ae6:	18d1      	adds	r1, r2, r3
 8000ae8:	88fa      	ldrh	r2, [r7, #6]
 8000aea:	8abb      	ldrh	r3, [r7, #20]
 8000aec:	1ad3      	subs	r3, r2, r3
 8000aee:	461a      	mov	r2, r3
 8000af0:	f00b fb87 	bl	800c202 <memcpy>
        }        
        queue->idx_write = next_idx % queue->size;
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	881a      	ldrh	r2, [r3, #0]
 8000af8:	8afb      	ldrh	r3, [r7, #22]
 8000afa:	fbb3 f1f2 	udiv	r1, r3, r2
 8000afe:	fb01 f202 	mul.w	r2, r1, r2
 8000b02:	1a9b      	subs	r3, r3, r2
 8000b04:	b29b      	uxth	r3, r3
 8000b06:	b21a      	sxth	r2, r3
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	805a      	strh	r2, [r3, #2]
        ret = true;        
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	77fb      	strb	r3, [r7, #31]
 8000b10:	e00e      	b.n	8000b30 <Q_Write+0xcc>
    }
    else    queue->count_full = _upperlimit(queue->count_full+1,0xFFFF);      
 8000b12:	68fb      	ldr	r3, [r7, #12]
 8000b14:	88db      	ldrh	r3, [r3, #6]
 8000b16:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000b1a:	4293      	cmp	r3, r2
 8000b1c:	d004      	beq.n	8000b28 <Q_Write+0xc4>
 8000b1e:	68fb      	ldr	r3, [r7, #12]
 8000b20:	88db      	ldrh	r3, [r3, #6]
 8000b22:	3301      	adds	r3, #1
 8000b24:	b29a      	uxth	r2, r3
 8000b26:	e001      	b.n	8000b2c <Q_Write+0xc8>
 8000b28:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	80da      	strh	r2, [r3, #6]
    return ret;    
 8000b30:	7ffb      	ldrb	r3, [r7, #31]
}
 8000b32:	4618      	mov	r0, r3
 8000b34:	3720      	adds	r7, #32
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}

08000b3a <Q_Read>:
    }
    else    queue->count_full = _upperlimit(queue->count_full+1,0xFFFF);
    return ret;    
}

bool Q_Read(Q_queue_t *queue, uint8_t *data, uint16_t len){
 8000b3a:	b580      	push	{r7, lr}
 8000b3c:	b086      	sub	sp, #24
 8000b3e:	af00      	add	r7, sp, #0
 8000b40:	60f8      	str	r0, [r7, #12]
 8000b42:	60b9      	str	r1, [r7, #8]
 8000b44:	4613      	mov	r3, r2
 8000b46:	80fb      	strh	r3, [r7, #6]
    bool ret;
    uint16_t next_idx;
    uint16_t num_first;

    if(Q_NumContents(queue) >= len){
 8000b48:	68f8      	ldr	r0, [r7, #12]
 8000b4a:	f000 f864 	bl	8000c16 <Q_NumContents>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	461a      	mov	r2, r3
 8000b52:	88fb      	ldrh	r3, [r7, #6]
 8000b54:	4293      	cmp	r3, r2
 8000b56:	d848      	bhi.n	8000bea <Q_Read+0xb0>
        next_idx = queue->idx_read + len;
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000b5e:	b29a      	uxth	r2, r3
 8000b60:	88fb      	ldrh	r3, [r7, #6]
 8000b62:	4413      	add	r3, r2
 8000b64:	82bb      	strh	r3, [r7, #20]
        if(next_idx < queue->size){
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	881b      	ldrh	r3, [r3, #0]
 8000b6a:	8aba      	ldrh	r2, [r7, #20]
 8000b6c:	429a      	cmp	r2, r3
 8000b6e:	d20b      	bcs.n	8000b88 <Q_Read+0x4e>
            memcpy(data,&(queue->data[queue->idx_read]),len);  //memcpy(dest,source,num)
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	68db      	ldr	r3, [r3, #12]
 8000b74:	68fa      	ldr	r2, [r7, #12]
 8000b76:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8000b7a:	4413      	add	r3, r2
 8000b7c:	88fa      	ldrh	r2, [r7, #6]
 8000b7e:	4619      	mov	r1, r3
 8000b80:	68b8      	ldr	r0, [r7, #8]
 8000b82:	f00b fb3e 	bl	800c202 <memcpy>
 8000b86:	e01d      	b.n	8000bc4 <Q_Read+0x8a>
        }
        else{
            num_first = queue->size-queue->idx_read;
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	881a      	ldrh	r2, [r3, #0]
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000b92:	b29b      	uxth	r3, r3
 8000b94:	1ad3      	subs	r3, r2, r3
 8000b96:	827b      	strh	r3, [r7, #18]
            memcpy(data,&(queue->data[queue->idx_read]),num_first);  //memcpy(dest,source,num)
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	68db      	ldr	r3, [r3, #12]
 8000b9c:	68fa      	ldr	r2, [r7, #12]
 8000b9e:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8000ba2:	4413      	add	r3, r2
 8000ba4:	8a7a      	ldrh	r2, [r7, #18]
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	68b8      	ldr	r0, [r7, #8]
 8000baa:	f00b fb2a 	bl	800c202 <memcpy>
            memcpy(&(data[num_first]),&(queue->data[0]),len-num_first);
 8000bae:	8a7b      	ldrh	r3, [r7, #18]
 8000bb0:	68ba      	ldr	r2, [r7, #8]
 8000bb2:	18d0      	adds	r0, r2, r3
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	68d9      	ldr	r1, [r3, #12]
 8000bb8:	88fa      	ldrh	r2, [r7, #6]
 8000bba:	8a7b      	ldrh	r3, [r7, #18]
 8000bbc:	1ad3      	subs	r3, r2, r3
 8000bbe:	461a      	mov	r2, r3
 8000bc0:	f00b fb1f 	bl	800c202 <memcpy>
        }        
        queue->idx_read = (queue->idx_read+len)%queue->size;
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000bca:	461a      	mov	r2, r3
 8000bcc:	88fb      	ldrh	r3, [r7, #6]
 8000bce:	4413      	add	r3, r2
 8000bd0:	68fa      	ldr	r2, [r7, #12]
 8000bd2:	8812      	ldrh	r2, [r2, #0]
 8000bd4:	fb93 f1f2 	sdiv	r1, r3, r2
 8000bd8:	fb01 f202 	mul.w	r2, r1, r2
 8000bdc:	1a9b      	subs	r3, r3, r2
 8000bde:	b21a      	sxth	r2, r3
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	809a      	strh	r2, [r3, #4]
        ret = true;
 8000be4:	2301      	movs	r3, #1
 8000be6:	75fb      	strb	r3, [r7, #23]
 8000be8:	e010      	b.n	8000c0c <Q_Read+0xd2>
    }
    else{
        queue->count_empty = _upperlimit(queue->count_empty+1,0xFFFF);
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	891b      	ldrh	r3, [r3, #8]
 8000bee:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000bf2:	4293      	cmp	r3, r2
 8000bf4:	d004      	beq.n	8000c00 <Q_Read+0xc6>
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	891b      	ldrh	r3, [r3, #8]
 8000bfa:	3301      	adds	r3, #1
 8000bfc:	b29a      	uxth	r2, r3
 8000bfe:	e001      	b.n	8000c04 <Q_Read+0xca>
 8000c00:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	811a      	strh	r2, [r3, #8]
        ret = false;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	75fb      	strb	r3, [r7, #23]
    }
    return ret;
 8000c0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	3718      	adds	r7, #24
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}

08000c16 <Q_NumContents>:
    else    queue->count_empty = _upperlimit(queue->count_empty+1,0xFFFF);
    return ret;
}


uint16_t Q_NumContents(Q_queue_t *queue){
 8000c16:	b480      	push	{r7}
 8000c18:	b083      	sub	sp, #12
 8000c1a:	af00      	add	r7, sp, #0
 8000c1c:	6078      	str	r0, [r7, #4]
    return (uint16_t)((queue->size + queue->idx_write - queue->idx_read)%(queue->size));    
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	881b      	ldrh	r3, [r3, #0]
 8000c22:	461a      	mov	r2, r3
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000c2a:	4413      	add	r3, r2
 8000c2c:	687a      	ldr	r2, [r7, #4]
 8000c2e:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8000c32:	1a9b      	subs	r3, r3, r2
 8000c34:	687a      	ldr	r2, [r7, #4]
 8000c36:	8812      	ldrh	r2, [r2, #0]
 8000c38:	fb93 f1f2 	sdiv	r1, r3, r2
 8000c3c:	fb01 f202 	mul.w	r2, r1, r2
 8000c40:	1a9b      	subs	r3, r3, r2
 8000c42:	b29b      	uxth	r3, r3
}
 8000c44:	4618      	mov	r0, r3
 8000c46:	370c      	adds	r7, #12
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4e:	4770      	bx	lr

08000c50 <Q_NumEmptyBytes>:

uint16_t Q_NumEmptyBytes(Q_queue_t *queue){
 8000c50:	b590      	push	{r4, r7, lr}
 8000c52:	b083      	sub	sp, #12
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
    return queue->size - (int)Q_NumContents(queue) - 1;
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	881c      	ldrh	r4, [r3, #0]
 8000c5c:	6878      	ldr	r0, [r7, #4]
 8000c5e:	f7ff ffda 	bl	8000c16 <Q_NumContents>
 8000c62:	4603      	mov	r3, r0
 8000c64:	1ae3      	subs	r3, r4, r3
 8000c66:	b29b      	uxth	r3, r3
 8000c68:	3b01      	subs	r3, #1
 8000c6a:	b29b      	uxth	r3, r3
}
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	370c      	adds	r7, #12
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd90      	pop	{r4, r7, pc}

08000c74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c7a:	4b0f      	ldr	r3, [pc, #60]	@ (8000cb8 <HAL_MspInit+0x44>)
 8000c7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c7e:	4a0e      	ldr	r2, [pc, #56]	@ (8000cb8 <HAL_MspInit+0x44>)
 8000c80:	f043 0301 	orr.w	r3, r3, #1
 8000c84:	6613      	str	r3, [r2, #96]	@ 0x60
 8000c86:	4b0c      	ldr	r3, [pc, #48]	@ (8000cb8 <HAL_MspInit+0x44>)
 8000c88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c8a:	f003 0301 	and.w	r3, r3, #1
 8000c8e:	607b      	str	r3, [r7, #4]
 8000c90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c92:	4b09      	ldr	r3, [pc, #36]	@ (8000cb8 <HAL_MspInit+0x44>)
 8000c94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c96:	4a08      	ldr	r2, [pc, #32]	@ (8000cb8 <HAL_MspInit+0x44>)
 8000c98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c9c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c9e:	4b06      	ldr	r3, [pc, #24]	@ (8000cb8 <HAL_MspInit+0x44>)
 8000ca0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ca2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ca6:	603b      	str	r3, [r7, #0]
 8000ca8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000caa:	f003 fd67 	bl	800477c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cae:	bf00      	nop
 8000cb0:	3708      	adds	r7, #8
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	40021000 	.word	0x40021000

08000cbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000cc0:	bf00      	nop
 8000cc2:	e7fd      	b.n	8000cc0 <NMI_Handler+0x4>

08000cc4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cc8:	bf00      	nop
 8000cca:	e7fd      	b.n	8000cc8 <HardFault_Handler+0x4>

08000ccc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cd0:	bf00      	nop
 8000cd2:	e7fd      	b.n	8000cd0 <MemManage_Handler+0x4>

08000cd4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cd8:	bf00      	nop
 8000cda:	e7fd      	b.n	8000cd8 <BusFault_Handler+0x4>

08000cdc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ce0:	bf00      	nop
 8000ce2:	e7fd      	b.n	8000ce0 <UsageFault_Handler+0x4>

08000ce4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ce8:	bf00      	nop
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr

08000cf2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cf2:	b480      	push	{r7}
 8000cf4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cf6:	bf00      	nop
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr

08000d00 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d04:	bf00      	nop
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr

08000d0e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d0e:	b580      	push	{r7, lr}
 8000d10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d12:	f001 f935 	bl	8001f80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d16:	bf00      	nop
 8000d18:	bd80      	pop	{r7, pc}
	...

08000d1c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000d20:	4802      	ldr	r0, [pc, #8]	@ (8000d2c <DMA1_Channel1_IRQHandler+0x10>)
 8000d22:	f001 fc60 	bl	80025e6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000d26:	bf00      	nop
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	20000ed4 	.word	0x20000ed4

08000d30 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000d34:	4802      	ldr	r0, [pc, #8]	@ (8000d40 <USB_LP_IRQHandler+0x10>)
 8000d36:	f002 f86c 	bl	8002e12 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8000d3a:	bf00      	nop
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	20002628 	.word	0x20002628

08000d44 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8000d48:	2020      	movs	r0, #32
 8000d4a:	f001 ff4f 	bl	8002bec <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8000d4e:	2080      	movs	r0, #128	@ 0x80
 8000d50:	f001 ff4c 	bl	8002bec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000d54:	bf00      	nop
 8000d56:	bd80      	pop	{r7, pc}

08000d58 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000d5c:	4802      	ldr	r0, [pc, #8]	@ (8000d68 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000d5e:	f004 fcfd 	bl	800575c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000d62:	bf00      	nop
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	20000e88 	.word	0x20000e88

08000d6c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
  if ((__HAL_UART_GET_FLAG(&huart1, UART_FLAG_FE)) || (__HAL_UART_GET_FLAG(&huart1, UART_FLAG_ORE)))
 8000d70:	4b0d      	ldr	r3, [pc, #52]	@ (8000da8 <USART1_IRQHandler+0x3c>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	69db      	ldr	r3, [r3, #28]
 8000d76:	f003 0302 	and.w	r3, r3, #2
 8000d7a:	2b02      	cmp	r3, #2
 8000d7c:	d006      	beq.n	8000d8c <USART1_IRQHandler+0x20>
 8000d7e:	4b0a      	ldr	r3, [pc, #40]	@ (8000da8 <USART1_IRQHandler+0x3c>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	69db      	ldr	r3, [r3, #28]
 8000d84:	f003 0308 	and.w	r3, r3, #8
 8000d88:	2b08      	cmp	r3, #8
 8000d8a:	d107      	bne.n	8000d9c <USART1_IRQHandler+0x30>
  {
    __HAL_UART_CLEAR_OREFLAG(&huart1);
 8000d8c:	4b06      	ldr	r3, [pc, #24]	@ (8000da8 <USART1_IRQHandler+0x3c>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	2208      	movs	r2, #8
 8000d92:	621a      	str	r2, [r3, #32]
    __HAL_UART_CLEAR_FEFLAG(&huart1);
 8000d94:	4b04      	ldr	r3, [pc, #16]	@ (8000da8 <USART1_IRQHandler+0x3c>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	2202      	movs	r2, #2
 8000d9a:	621a      	str	r2, [r3, #32]
  }
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000d9c:	4802      	ldr	r0, [pc, #8]	@ (8000da8 <USART1_IRQHandler+0x3c>)
 8000d9e:	f005 fa33 	bl	8006208 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000da2:	bf00      	nop
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	20000f34 	.word	0x20000f34

08000dac <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 1 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b084      	sub	sp, #16
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  uint16_t num = 0;
 8000db4:	2300      	movs	r3, #0
 8000db6:	81fb      	strh	r3, [r7, #14]

  if ( (num = Q_NumContents(&USB_TX_Q)) > 0 )
 8000db8:	4818      	ldr	r0, [pc, #96]	@ (8000e1c <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000dba:	f7ff ff2c 	bl	8000c16 <Q_NumContents>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	81fb      	strh	r3, [r7, #14]
 8000dc2:	89fb      	ldrh	r3, [r7, #14]
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d016      	beq.n	8000df6 <HAL_TIM_PeriodElapsedCallback+0x4a>
  {
    if (CDC_Transmit_Is_Busy() != USBD_BUSY)
 8000dc8:	f00a fb6a 	bl	800b4a0 <CDC_Transmit_Is_Busy>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b01      	cmp	r3, #1
 8000dd0:	d011      	beq.n	8000df6 <HAL_TIM_PeriodElapsedCallback+0x4a>
    {
      queDataNum += num;
 8000dd2:	4b13      	ldr	r3, [pc, #76]	@ (8000e20 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000dd4:	881a      	ldrh	r2, [r3, #0]
 8000dd6:	89fb      	ldrh	r3, [r7, #14]
 8000dd8:	4413      	add	r3, r2
 8000dda:	b29a      	uxth	r2, r3
 8000ddc:	4b10      	ldr	r3, [pc, #64]	@ (8000e20 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000dde:	801a      	strh	r2, [r3, #0]

      Q_Read(&USB_TX_Q, (uint8_t *)queData, num);
 8000de0:	89fb      	ldrh	r3, [r7, #14]
 8000de2:	461a      	mov	r2, r3
 8000de4:	490f      	ldr	r1, [pc, #60]	@ (8000e24 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000de6:	480d      	ldr	r0, [pc, #52]	@ (8000e1c <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000de8:	f7ff fea7 	bl	8000b3a <Q_Read>

      CDC_Transmit_FS(queData, num);
 8000dec:	89fb      	ldrh	r3, [r7, #14]
 8000dee:	4619      	mov	r1, r3
 8000df0:	480c      	ldr	r0, [pc, #48]	@ (8000e24 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000df2:	f00a fb1d 	bl	800b430 <CDC_Transmit_FS>
    }
  }

  if (htim->Instance == TIM1)
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	4a0b      	ldr	r2, [pc, #44]	@ (8000e28 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000dfc:	4293      	cmp	r3, r2
 8000dfe:	d109      	bne.n	8000e14 <HAL_TIM_PeriodElapsedCallback+0x68>
  {
    TIM1_CNT_1++;
 8000e00:	4b0a      	ldr	r3, [pc, #40]	@ (8000e2c <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	3301      	adds	r3, #1
 8000e06:	4a09      	ldr	r2, [pc, #36]	@ (8000e2c <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000e08:	6013      	str	r3, [r2, #0]
    TIM1_CNT_2++;
 8000e0a:	4b09      	ldr	r3, [pc, #36]	@ (8000e30 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	3301      	adds	r3, #1
 8000e10:	4a07      	ldr	r2, [pc, #28]	@ (8000e30 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000e12:	6013      	str	r3, [r2, #0]
  }
}
 8000e14:	bf00      	nop
 8000e16:	3710      	adds	r7, #16
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	20000fc8 	.word	0x20000fc8
 8000e20:	200002a6 	.word	0x200002a6
 8000e24:	200002a8 	.word	0x200002a8
 8000e28:	40012c00 	.word	0x40012c00
 8000e2c:	2000029c 	.word	0x2000029c
 8000e30:	200002a0 	.word	0x200002a0

08000e34 <HAL_UARTEx_RxEventCallback>:

uint8_t IOL_Rx_IDLEFlag = 0;
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b088      	sub	sp, #32
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
 8000e3c:	460b      	mov	r3, r1
 8000e3e:	807b      	strh	r3, [r7, #2]
  uart_rx_IDLE_TotalCnt += Size;
 8000e40:	887a      	ldrh	r2, [r7, #2]
 8000e42:	4b31      	ldr	r3, [pc, #196]	@ (8000f08 <HAL_UARTEx_RxEventCallback+0xd4>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	4413      	add	r3, r2
 8000e48:	4a2f      	ldr	r2, [pc, #188]	@ (8000f08 <HAL_UARTEx_RxEventCallback+0xd4>)
 8000e4a:	6013      	str	r3, [r2, #0]
  
  if (huart->Instance == USART1)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4a2e      	ldr	r2, [pc, #184]	@ (8000f0c <HAL_UARTEx_RxEventCallback+0xd8>)
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d153      	bne.n	8000efe <HAL_UARTEx_RxEventCallback+0xca>
    // {
    //   IOL_RX_CONTINUE_FLAG = 0;
    //   return;
    // }

    if (uart_rx_IDLE_TotalCnt >= 3)
 8000e56:	4b2c      	ldr	r3, [pc, #176]	@ (8000f08 <HAL_UARTEx_RxEventCallback+0xd4>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	2b02      	cmp	r3, #2
 8000e5c:	d912      	bls.n	8000e84 <HAL_UARTEx_RxEventCallback+0x50>
    {
      DEBUG_GPIO_TOGGLE;
 8000e5e:	2101      	movs	r1, #1
 8000e60:	482b      	ldr	r0, [pc, #172]	@ (8000f10 <HAL_UARTEx_RxEventCallback+0xdc>)
 8000e62:	f001 fea9 	bl	8002bb8 <HAL_GPIO_TogglePin>
      if (IOL_Rx_IDLEFlag == 1)
 8000e66:	4b2b      	ldr	r3, [pc, #172]	@ (8000f14 <HAL_UARTEx_RxEventCallback+0xe0>)
 8000e68:	781b      	ldrb	r3, [r3, #0]
 8000e6a:	2b01      	cmp	r3, #1
 8000e6c:	d103      	bne.n	8000e76 <HAL_UARTEx_RxEventCallback+0x42>
      {
        IOL_Rx_IDLEFlag = 0;
 8000e6e:	4b29      	ldr	r3, [pc, #164]	@ (8000f14 <HAL_UARTEx_RxEventCallback+0xe0>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	701a      	strb	r2, [r3, #0]
 8000e74:	e006      	b.n	8000e84 <HAL_UARTEx_RxEventCallback+0x50>
      }
      else
      {
        IOL_Rx_IDLEFlag = 1;
 8000e76:	4b27      	ldr	r3, [pc, #156]	@ (8000f14 <HAL_UARTEx_RxEventCallback+0xe0>)
 8000e78:	2201      	movs	r2, #1
 8000e7a:	701a      	strb	r2, [r3, #0]
        // IOL_PageTest(Size);
        IOL_StartUp_Seq_Page(Size);
 8000e7c:	887b      	ldrh	r3, [r7, #2]
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f000 ff22 	bl	8001cc8 <IOL_StartUp_Seq_Page>
      }

    }

    __HAL_DMA_DISABLE(&hdma_usart1_rx);
 8000e84:	4b24      	ldr	r3, [pc, #144]	@ (8000f18 <HAL_UARTEx_RxEventCallback+0xe4>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	681a      	ldr	r2, [r3, #0]
 8000e8a:	4b23      	ldr	r3, [pc, #140]	@ (8000f18 <HAL_UARTEx_RxEventCallback+0xe4>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	f022 0201 	bic.w	r2, r2, #1
 8000e92:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Instance->CNDTR = UART_RX_IDLE_BUFSIZE;
 8000e94:	4b20      	ldr	r3, [pc, #128]	@ (8000f18 <HAL_UARTEx_RxEventCallback+0xe4>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	2264      	movs	r2, #100	@ 0x64
 8000e9a:	605a      	str	r2, [r3, #4]
    __HAL_DMA_ENABLE(&hdma_usart1_rx);
 8000e9c:	4b1e      	ldr	r3, [pc, #120]	@ (8000f18 <HAL_UARTEx_RxEventCallback+0xe4>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	681a      	ldr	r2, [r3, #0]
 8000ea2:	4b1d      	ldr	r3, [pc, #116]	@ (8000f18 <HAL_UARTEx_RxEventCallback+0xe4>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	f042 0201 	orr.w	r2, r2, #1
 8000eaa:	601a      	str	r2, [r3, #0]

    __HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE);
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	69db      	ldr	r3, [r3, #28]
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	e853 3f00 	ldrex	r3, [r3]
 8000ebe:	60bb      	str	r3, [r7, #8]
   return(result);
 8000ec0:	68bb      	ldr	r3, [r7, #8]
 8000ec2:	f043 0310 	orr.w	r3, r3, #16
 8000ec6:	61fb      	str	r3, [r7, #28]
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	461a      	mov	r2, r3
 8000ece:	69fb      	ldr	r3, [r7, #28]
 8000ed0:	61bb      	str	r3, [r7, #24]
 8000ed2:	617a      	str	r2, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000ed4:	6979      	ldr	r1, [r7, #20]
 8000ed6:	69ba      	ldr	r2, [r7, #24]
 8000ed8:	e841 2300 	strex	r3, r2, [r1]
 8000edc:	613b      	str	r3, [r7, #16]
   return(result);
 8000ede:	693b      	ldr	r3, [r7, #16]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d1e6      	bne.n	8000eb2 <HAL_UARTEx_RxEventCallback+0x7e>
    HAL_UARTEx_ReceiveToIdle_DMA(&huart1, (uint8_t *) uart1_rx_IDLE_buf, UART_RX_IDLE_BUFSIZE);
 8000ee4:	2264      	movs	r2, #100	@ 0x64
 8000ee6:	490d      	ldr	r1, [pc, #52]	@ (8000f1c <HAL_UARTEx_RxEventCallback+0xe8>)
 8000ee8:	480d      	ldr	r0, [pc, #52]	@ (8000f20 <HAL_UARTEx_RxEventCallback+0xec>)
 8000eea:	f006 fe67 	bl	8007bbc <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8000eee:	4b0a      	ldr	r3, [pc, #40]	@ (8000f18 <HAL_UARTEx_RxEventCallback+0xe4>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	681a      	ldr	r2, [r3, #0]
 8000ef4:	4b08      	ldr	r3, [pc, #32]	@ (8000f18 <HAL_UARTEx_RxEventCallback+0xe4>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	f022 0204 	bic.w	r2, r2, #4
 8000efc:	601a      	str	r2, [r3, #0]

    // HAL_NVIC_EnableIRQ(USART1_IRQn);
    // HAL_UART_DMAResume(&huart1);

  }
}
 8000efe:	bf00      	nop
 8000f00:	3720      	adds	r7, #32
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	20000a78 	.word	0x20000a78
 8000f0c:	40013800 	.word	0x40013800
 8000f10:	48000400 	.word	0x48000400
 8000f14:	20000294 	.word	0x20000294
 8000f18:	20000ed4 	.word	0x20000ed4
 8000f1c:	20000a7c 	.word	0x20000a7c
 8000f20:	20000f34 	.word	0x20000f34

08000f24 <HAL_UART_TxCpltCallback>:


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART1)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a07      	ldr	r2, [pc, #28]	@ (8000f50 <HAL_UART_TxCpltCallback+0x2c>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d107      	bne.n	8000f46 <HAL_UART_TxCpltCallback+0x22>
  {
    IOL_DISABLE;
 8000f36:	2200      	movs	r2, #0
 8000f38:	2140      	movs	r1, #64	@ 0x40
 8000f3a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f3e:	f001 fe23 	bl	8002b88 <HAL_GPIO_WritePin>
    IOL_PD_Buffer_Clear();
 8000f42:	f000 fc89 	bl	8001858 <IOL_PD_Buffer_Clear>
    // __HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE);
    // ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
    // HAL_UARTEx_ReceiveToIdle_DMA(&huart1, (uint8_t *) uart1_rx_IDLE_buf, UART_RX_IDLE_BUFSIZE);
    // __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
  }
}
 8000f46:	bf00      	nop
 8000f48:	3708      	adds	r7, #8
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	40013800 	.word	0x40013800

08000f54 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b086      	sub	sp, #24
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	60f8      	str	r0, [r7, #12]
 8000f5c:	60b9      	str	r1, [r7, #8]
 8000f5e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f60:	2300      	movs	r3, #0
 8000f62:	617b      	str	r3, [r7, #20]
 8000f64:	e00a      	b.n	8000f7c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000f66:	f3af 8000 	nop.w
 8000f6a:	4601      	mov	r1, r0
 8000f6c:	68bb      	ldr	r3, [r7, #8]
 8000f6e:	1c5a      	adds	r2, r3, #1
 8000f70:	60ba      	str	r2, [r7, #8]
 8000f72:	b2ca      	uxtb	r2, r1
 8000f74:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	3301      	adds	r3, #1
 8000f7a:	617b      	str	r3, [r7, #20]
 8000f7c:	697a      	ldr	r2, [r7, #20]
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	429a      	cmp	r2, r3
 8000f82:	dbf0      	blt.n	8000f66 <_read+0x12>
  }

  return len;
 8000f84:	687b      	ldr	r3, [r7, #4]
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	3718      	adds	r7, #24
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}

08000f8e <_close>:
  }
  return len;
}

int _close(int file)
{
 8000f8e:	b480      	push	{r7}
 8000f90:	b083      	sub	sp, #12
 8000f92:	af00      	add	r7, sp, #0
 8000f94:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000f96:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	370c      	adds	r7, #12
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr

08000fa6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000fa6:	b480      	push	{r7}
 8000fa8:	b083      	sub	sp, #12
 8000faa:	af00      	add	r7, sp, #0
 8000fac:	6078      	str	r0, [r7, #4]
 8000fae:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000fb6:	605a      	str	r2, [r3, #4]
  return 0;
 8000fb8:	2300      	movs	r3, #0
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	370c      	adds	r7, #12
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr

08000fc6 <_isatty>:

int _isatty(int file)
{
 8000fc6:	b480      	push	{r7}
 8000fc8:	b083      	sub	sp, #12
 8000fca:	af00      	add	r7, sp, #0
 8000fcc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000fce:	2301      	movs	r3, #1
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	370c      	adds	r7, #12
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr

08000fdc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b085      	sub	sp, #20
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	60f8      	str	r0, [r7, #12]
 8000fe4:	60b9      	str	r1, [r7, #8]
 8000fe6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000fe8:	2300      	movs	r3, #0
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	3714      	adds	r7, #20
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr
	...

08000ff8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b086      	sub	sp, #24
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001000:	4a14      	ldr	r2, [pc, #80]	@ (8001054 <_sbrk+0x5c>)
 8001002:	4b15      	ldr	r3, [pc, #84]	@ (8001058 <_sbrk+0x60>)
 8001004:	1ad3      	subs	r3, r2, r3
 8001006:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800100c:	4b13      	ldr	r3, [pc, #76]	@ (800105c <_sbrk+0x64>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d102      	bne.n	800101a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001014:	4b11      	ldr	r3, [pc, #68]	@ (800105c <_sbrk+0x64>)
 8001016:	4a12      	ldr	r2, [pc, #72]	@ (8001060 <_sbrk+0x68>)
 8001018:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800101a:	4b10      	ldr	r3, [pc, #64]	@ (800105c <_sbrk+0x64>)
 800101c:	681a      	ldr	r2, [r3, #0]
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	4413      	add	r3, r2
 8001022:	693a      	ldr	r2, [r7, #16]
 8001024:	429a      	cmp	r2, r3
 8001026:	d207      	bcs.n	8001038 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001028:	f00b f8be 	bl	800c1a8 <__errno>
 800102c:	4603      	mov	r3, r0
 800102e:	220c      	movs	r2, #12
 8001030:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001032:	f04f 33ff 	mov.w	r3, #4294967295
 8001036:	e009      	b.n	800104c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001038:	4b08      	ldr	r3, [pc, #32]	@ (800105c <_sbrk+0x64>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800103e:	4b07      	ldr	r3, [pc, #28]	@ (800105c <_sbrk+0x64>)
 8001040:	681a      	ldr	r2, [r3, #0]
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	4413      	add	r3, r2
 8001046:	4a05      	ldr	r2, [pc, #20]	@ (800105c <_sbrk+0x64>)
 8001048:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800104a:	68fb      	ldr	r3, [r7, #12]
}
 800104c:	4618      	mov	r0, r3
 800104e:	3718      	adds	r7, #24
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	20008000 	.word	0x20008000
 8001058:	00000400 	.word	0x00000400
 800105c:	20000298 	.word	0x20000298
 8001060:	20002908 	.word	0x20002908

08001064 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001068:	4b06      	ldr	r3, [pc, #24]	@ (8001084 <SystemInit+0x20>)
 800106a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800106e:	4a05      	ldr	r2, [pc, #20]	@ (8001084 <SystemInit+0x20>)
 8001070:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001074:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001078:	bf00      	nop
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop
 8001084:	e000ed00 	.word	0xe000ed00

08001088 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b088      	sub	sp, #32
 800108c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800108e:	f107 0310 	add.w	r3, r7, #16
 8001092:	2200      	movs	r2, #0
 8001094:	601a      	str	r2, [r3, #0]
 8001096:	605a      	str	r2, [r3, #4]
 8001098:	609a      	str	r2, [r3, #8]
 800109a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800109c:	1d3b      	adds	r3, r7, #4
 800109e:	2200      	movs	r2, #0
 80010a0:	601a      	str	r2, [r3, #0]
 80010a2:	605a      	str	r2, [r3, #4]
 80010a4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80010a6:	4b20      	ldr	r3, [pc, #128]	@ (8001128 <MX_TIM1_Init+0xa0>)
 80010a8:	4a20      	ldr	r2, [pc, #128]	@ (800112c <MX_TIM1_Init+0xa4>)
 80010aa:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1000-1;
 80010ac:	4b1e      	ldr	r3, [pc, #120]	@ (8001128 <MX_TIM1_Init+0xa0>)
 80010ae:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80010b2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010b4:	4b1c      	ldr	r3, [pc, #112]	@ (8001128 <MX_TIM1_Init+0xa0>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 169;
 80010ba:	4b1b      	ldr	r3, [pc, #108]	@ (8001128 <MX_TIM1_Init+0xa0>)
 80010bc:	22a9      	movs	r2, #169	@ 0xa9
 80010be:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010c0:	4b19      	ldr	r3, [pc, #100]	@ (8001128 <MX_TIM1_Init+0xa0>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80010c6:	4b18      	ldr	r3, [pc, #96]	@ (8001128 <MX_TIM1_Init+0xa0>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010cc:	4b16      	ldr	r3, [pc, #88]	@ (8001128 <MX_TIM1_Init+0xa0>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80010d2:	4815      	ldr	r0, [pc, #84]	@ (8001128 <MX_TIM1_Init+0xa0>)
 80010d4:	f004 fa80 	bl	80055d8 <HAL_TIM_Base_Init>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80010de:	f7ff fc9c 	bl	8000a1a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010e2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010e6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80010e8:	f107 0310 	add.w	r3, r7, #16
 80010ec:	4619      	mov	r1, r3
 80010ee:	480e      	ldr	r0, [pc, #56]	@ (8001128 <MX_TIM1_Init+0xa0>)
 80010f0:	f004 fc84 	bl	80059fc <HAL_TIM_ConfigClockSource>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80010fa:	f7ff fc8e 	bl	8000a1a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010fe:	2300      	movs	r3, #0
 8001100:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001102:	2300      	movs	r3, #0
 8001104:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001106:	2300      	movs	r3, #0
 8001108:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800110a:	1d3b      	adds	r3, r7, #4
 800110c:	4619      	mov	r1, r3
 800110e:	4806      	ldr	r0, [pc, #24]	@ (8001128 <MX_TIM1_Init+0xa0>)
 8001110:	f004 fece 	bl	8005eb0 <HAL_TIMEx_MasterConfigSynchronization>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800111a:	f7ff fc7e 	bl	8000a1a <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800111e:	bf00      	nop
 8001120:	3720      	adds	r7, #32
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	20000e88 	.word	0x20000e88
 800112c:	40012c00 	.word	0x40012c00

08001130 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b084      	sub	sp, #16
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a0d      	ldr	r2, [pc, #52]	@ (8001174 <HAL_TIM_Base_MspInit+0x44>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d113      	bne.n	800116a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001142:	4b0d      	ldr	r3, [pc, #52]	@ (8001178 <HAL_TIM_Base_MspInit+0x48>)
 8001144:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001146:	4a0c      	ldr	r2, [pc, #48]	@ (8001178 <HAL_TIM_Base_MspInit+0x48>)
 8001148:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800114c:	6613      	str	r3, [r2, #96]	@ 0x60
 800114e:	4b0a      	ldr	r3, [pc, #40]	@ (8001178 <HAL_TIM_Base_MspInit+0x48>)
 8001150:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001152:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001156:	60fb      	str	r3, [r7, #12]
 8001158:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800115a:	2200      	movs	r2, #0
 800115c:	2100      	movs	r1, #0
 800115e:	2019      	movs	r0, #25
 8001160:	f001 f829 	bl	80021b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001164:	2019      	movs	r0, #25
 8001166:	f001 f840 	bl	80021ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800116a:	bf00      	nop
 800116c:	3710      	adds	r7, #16
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	40012c00 	.word	0x40012c00
 8001178:	40021000 	.word	0x40021000

0800117c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001180:	4b23      	ldr	r3, [pc, #140]	@ (8001210 <MX_USART1_UART_Init+0x94>)
 8001182:	4a24      	ldr	r2, [pc, #144]	@ (8001214 <MX_USART1_UART_Init+0x98>)
 8001184:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 230400;
 8001186:	4b22      	ldr	r3, [pc, #136]	@ (8001210 <MX_USART1_UART_Init+0x94>)
 8001188:	f44f 3261 	mov.w	r2, #230400	@ 0x38400
 800118c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 800118e:	4b20      	ldr	r3, [pc, #128]	@ (8001210 <MX_USART1_UART_Init+0x94>)
 8001190:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001194:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001196:	4b1e      	ldr	r3, [pc, #120]	@ (8001210 <MX_USART1_UART_Init+0x94>)
 8001198:	2200      	movs	r2, #0
 800119a:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_EVEN;
 800119c:	4b1c      	ldr	r3, [pc, #112]	@ (8001210 <MX_USART1_UART_Init+0x94>)
 800119e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80011a2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80011a4:	4b1a      	ldr	r3, [pc, #104]	@ (8001210 <MX_USART1_UART_Init+0x94>)
 80011a6:	220c      	movs	r2, #12
 80011a8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011aa:	4b19      	ldr	r3, [pc, #100]	@ (8001210 <MX_USART1_UART_Init+0x94>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80011b0:	4b17      	ldr	r3, [pc, #92]	@ (8001210 <MX_USART1_UART_Init+0x94>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011b6:	4b16      	ldr	r3, [pc, #88]	@ (8001210 <MX_USART1_UART_Init+0x94>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80011bc:	4b14      	ldr	r3, [pc, #80]	@ (8001210 <MX_USART1_UART_Init+0x94>)
 80011be:	2200      	movs	r2, #0
 80011c0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011c2:	4b13      	ldr	r3, [pc, #76]	@ (8001210 <MX_USART1_UART_Init+0x94>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80011c8:	4811      	ldr	r0, [pc, #68]	@ (8001210 <MX_USART1_UART_Init+0x94>)
 80011ca:	f004 ff39 	bl	8006040 <HAL_UART_Init>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <MX_USART1_UART_Init+0x5c>
  {
    Error_Handler();
 80011d4:	f7ff fc21 	bl	8000a1a <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011d8:	2100      	movs	r1, #0
 80011da:	480d      	ldr	r0, [pc, #52]	@ (8001210 <MX_USART1_UART_Init+0x94>)
 80011dc:	f006 fc72 	bl	8007ac4 <HAL_UARTEx_SetTxFifoThreshold>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <MX_USART1_UART_Init+0x6e>
  {
    Error_Handler();
 80011e6:	f7ff fc18 	bl	8000a1a <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011ea:	2100      	movs	r1, #0
 80011ec:	4808      	ldr	r0, [pc, #32]	@ (8001210 <MX_USART1_UART_Init+0x94>)
 80011ee:	f006 fca7 	bl	8007b40 <HAL_UARTEx_SetRxFifoThreshold>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d001      	beq.n	80011fc <MX_USART1_UART_Init+0x80>
  {
    Error_Handler();
 80011f8:	f7ff fc0f 	bl	8000a1a <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80011fc:	4804      	ldr	r0, [pc, #16]	@ (8001210 <MX_USART1_UART_Init+0x94>)
 80011fe:	f006 fc28 	bl	8007a52 <HAL_UARTEx_DisableFifoMode>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <MX_USART1_UART_Init+0x90>
  {
    Error_Handler();
 8001208:	f7ff fc07 	bl	8000a1a <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800120c:	bf00      	nop
 800120e:	bd80      	pop	{r7, pc}
 8001210:	20000f34 	.word	0x20000f34
 8001214:	40013800 	.word	0x40013800

08001218 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b09a      	sub	sp, #104	@ 0x68
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001220:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001224:	2200      	movs	r2, #0
 8001226:	601a      	str	r2, [r3, #0]
 8001228:	605a      	str	r2, [r3, #4]
 800122a:	609a      	str	r2, [r3, #8]
 800122c:	60da      	str	r2, [r3, #12]
 800122e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001230:	f107 0310 	add.w	r3, r7, #16
 8001234:	2244      	movs	r2, #68	@ 0x44
 8001236:	2100      	movs	r1, #0
 8001238:	4618      	mov	r0, r3
 800123a:	f00a ff67 	bl	800c10c <memset>
  if(uartHandle->Instance==USART1)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4a38      	ldr	r2, [pc, #224]	@ (8001324 <HAL_UART_MspInit+0x10c>)
 8001244:	4293      	cmp	r3, r2
 8001246:	d169      	bne.n	800131c <HAL_UART_MspInit+0x104>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001248:	2301      	movs	r3, #1
 800124a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800124c:	2300      	movs	r3, #0
 800124e:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001250:	f107 0310 	add.w	r3, r7, #16
 8001254:	4618      	mov	r0, r3
 8001256:	f003 ffcf 	bl	80051f8 <HAL_RCCEx_PeriphCLKConfig>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001260:	f7ff fbdb 	bl	8000a1a <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001264:	4b30      	ldr	r3, [pc, #192]	@ (8001328 <HAL_UART_MspInit+0x110>)
 8001266:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001268:	4a2f      	ldr	r2, [pc, #188]	@ (8001328 <HAL_UART_MspInit+0x110>)
 800126a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800126e:	6613      	str	r3, [r2, #96]	@ 0x60
 8001270:	4b2d      	ldr	r3, [pc, #180]	@ (8001328 <HAL_UART_MspInit+0x110>)
 8001272:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001274:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001278:	60fb      	str	r3, [r7, #12]
 800127a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800127c:	4b2a      	ldr	r3, [pc, #168]	@ (8001328 <HAL_UART_MspInit+0x110>)
 800127e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001280:	4a29      	ldr	r2, [pc, #164]	@ (8001328 <HAL_UART_MspInit+0x110>)
 8001282:	f043 0301 	orr.w	r3, r3, #1
 8001286:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001288:	4b27      	ldr	r3, [pc, #156]	@ (8001328 <HAL_UART_MspInit+0x110>)
 800128a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800128c:	f003 0301 	and.w	r3, r3, #1
 8001290:	60bb      	str	r3, [r7, #8]
 8001292:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001294:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001298:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800129a:	2302      	movs	r3, #2
 800129c:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129e:	2300      	movs	r3, #0
 80012a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a2:	2300      	movs	r3, #0
 80012a4:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80012a6:	2307      	movs	r3, #7
 80012a8:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012aa:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80012ae:	4619      	mov	r1, r3
 80012b0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012b4:	f001 fae6 	bl	8002884 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 80012b8:	4b1c      	ldr	r3, [pc, #112]	@ (800132c <HAL_UART_MspInit+0x114>)
 80012ba:	4a1d      	ldr	r2, [pc, #116]	@ (8001330 <HAL_UART_MspInit+0x118>)
 80012bc:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 80012be:	4b1b      	ldr	r3, [pc, #108]	@ (800132c <HAL_UART_MspInit+0x114>)
 80012c0:	2218      	movs	r2, #24
 80012c2:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80012c4:	4b19      	ldr	r3, [pc, #100]	@ (800132c <HAL_UART_MspInit+0x114>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80012ca:	4b18      	ldr	r3, [pc, #96]	@ (800132c <HAL_UART_MspInit+0x114>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80012d0:	4b16      	ldr	r3, [pc, #88]	@ (800132c <HAL_UART_MspInit+0x114>)
 80012d2:	2280      	movs	r2, #128	@ 0x80
 80012d4:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80012d6:	4b15      	ldr	r3, [pc, #84]	@ (800132c <HAL_UART_MspInit+0x114>)
 80012d8:	2200      	movs	r2, #0
 80012da:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80012dc:	4b13      	ldr	r3, [pc, #76]	@ (800132c <HAL_UART_MspInit+0x114>)
 80012de:	2200      	movs	r2, #0
 80012e0:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80012e2:	4b12      	ldr	r3, [pc, #72]	@ (800132c <HAL_UART_MspInit+0x114>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80012e8:	4b10      	ldr	r3, [pc, #64]	@ (800132c <HAL_UART_MspInit+0x114>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80012ee:	480f      	ldr	r0, [pc, #60]	@ (800132c <HAL_UART_MspInit+0x114>)
 80012f0:	f000 ff96 	bl	8002220 <HAL_DMA_Init>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 80012fa:	f7ff fb8e 	bl	8000a1a <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	4a0a      	ldr	r2, [pc, #40]	@ (800132c <HAL_UART_MspInit+0x114>)
 8001302:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8001306:	4a09      	ldr	r2, [pc, #36]	@ (800132c <HAL_UART_MspInit+0x114>)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800130c:	2200      	movs	r2, #0
 800130e:	2100      	movs	r1, #0
 8001310:	2025      	movs	r0, #37	@ 0x25
 8001312:	f000 ff50 	bl	80021b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001316:	2025      	movs	r0, #37	@ 0x25
 8001318:	f000 ff67 	bl	80021ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800131c:	bf00      	nop
 800131e:	3768      	adds	r7, #104	@ 0x68
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}
 8001324:	40013800 	.word	0x40013800
 8001328:	40021000 	.word	0x40021000
 800132c:	20000ed4 	.word	0x20000ed4
 8001330:	40020008 	.word	0x40020008

08001334 <_write>:
uint8_t TestValue[10] = {0x70, 0x5D, 0x93, 0x15, 0x86, 0x00, 0x00, 0x00, 0x00, 0x00};             //checksum Test.

uint8_t UserButton_Flag = 0;

int _write(int file, char *ptr, int len)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b084      	sub	sp, #16
 8001338:	af00      	add	r7, sp, #0
 800133a:	60f8      	str	r0, [r7, #12]
 800133c:	60b9      	str	r1, [r7, #8]
 800133e:	607a      	str	r2, [r7, #4]
    // CDC_Transmit_FS(ptr, len);
    Q_Write(&USB_TX_Q, ptr, len);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	b29b      	uxth	r3, r3
 8001344:	461a      	mov	r2, r3
 8001346:	68b9      	ldr	r1, [r7, #8]
 8001348:	4803      	ldr	r0, [pc, #12]	@ (8001358 <_write+0x24>)
 800134a:	f7ff fb8b 	bl	8000a64 <Q_Write>
    // User_CDC_Transmit_FS(ptr, len);
    return (len);
 800134e:	687b      	ldr	r3, [r7, #4]
}
 8001350:	4618      	mov	r0, r3
 8001352:	3710      	adds	r7, #16
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	20000fc8 	.word	0x20000fc8

0800135c <User_Toggle_Led>:

void User_Toggle_Led (void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0
    if (TIM1_CNT_1 >= 1000)
 8001360:	4b07      	ldr	r3, [pc, #28]	@ (8001380 <User_Toggle_Led+0x24>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001368:	d307      	bcc.n	800137a <User_Toggle_Led+0x1e>
    {
        TIM1_CNT_1 = 0;
 800136a:	4b05      	ldr	r3, [pc, #20]	@ (8001380 <User_Toggle_Led+0x24>)
 800136c:	2200      	movs	r2, #0
 800136e:	601a      	str	r2, [r3, #0]
        // HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_14);
        LED_ALL_TOGGLE;
 8001370:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 8001374:	4803      	ldr	r0, [pc, #12]	@ (8001384 <User_Toggle_Led+0x28>)
 8001376:	f001 fc1f 	bl	8002bb8 <HAL_GPIO_TogglePin>
    }
}
 800137a:	bf00      	nop
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	2000029c 	.word	0x2000029c
 8001384:	48000800 	.word	0x48000800

08001388 <ProcessDataIn_IncreaseCntValue>:

void ProcessDataIn_IncreaseCntValue (void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0
    if ( TIM1_CNT_2 >= 1000)
 800138c:	4b0b      	ldr	r3, [pc, #44]	@ (80013bc <ProcessDataIn_IncreaseCntValue+0x34>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001394:	d310      	bcc.n	80013b8 <ProcessDataIn_IncreaseCntValue+0x30>
    {
        TIM1_CNT_2 = 0;
 8001396:	4b09      	ldr	r3, [pc, #36]	@ (80013bc <ProcessDataIn_IncreaseCntValue+0x34>)
 8001398:	2200      	movs	r2, #0
 800139a:	601a      	str	r2, [r3, #0]
        ProcessDataIn_cnt++;
 800139c:	4b08      	ldr	r3, [pc, #32]	@ (80013c0 <ProcessDataIn_IncreaseCntValue+0x38>)
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	3301      	adds	r3, #1
 80013a2:	b2da      	uxtb	r2, r3
 80013a4:	4b06      	ldr	r3, [pc, #24]	@ (80013c0 <ProcessDataIn_IncreaseCntValue+0x38>)
 80013a6:	701a      	strb	r2, [r3, #0]

        printf("Master to Device Temp Value :   %d\r\n", Test_M2D_TempValue);
 80013a8:	4b06      	ldr	r3, [pc, #24]	@ (80013c4 <ProcessDataIn_IncreaseCntValue+0x3c>)
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	4619      	mov	r1, r3
 80013ae:	4806      	ldr	r0, [pc, #24]	@ (80013c8 <ProcessDataIn_IncreaseCntValue+0x40>)
 80013b0:	f00a fd64 	bl	800be7c <iprintf>
        IOL_Print_ParsingM2Ddata();
 80013b4:	f7ff f9ba 	bl	800072c <IOL_Print_ParsingM2Ddata>
    }
}
 80013b8:	bf00      	nop
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	200002a0 	.word	0x200002a0
 80013c0:	200002a4 	.word	0x200002a4
 80013c4:	20000b02 	.word	0x20000b02
 80013c8:	0800cc94 	.word	0x0800cc94

080013cc <BootMessagePrint>:
    User_CDC_Transmit_FS((uint8_t *) USB_CdcTxBuffer_FS, strlen(USB_CdcTxBuffer_FS));
}
#else
/* Display Boot Message */
void BootMessagePrint (void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	af00      	add	r7, sp, #0
    printf("-------------------------------------------------------------------\r\n");
 80013d0:	480c      	ldr	r0, [pc, #48]	@ (8001404 <BootMessagePrint+0x38>)
 80013d2:	f00a fdbb 	bl	800bf4c <puts>
    
    printf(" Project Name        : %s\r\n", PROJECT_NAME );
 80013d6:	490c      	ldr	r1, [pc, #48]	@ (8001408 <BootMessagePrint+0x3c>)
 80013d8:	480c      	ldr	r0, [pc, #48]	@ (800140c <BootMessagePrint+0x40>)
 80013da:	f00a fd4f 	bl	800be7c <iprintf>
    
    printf(" - HW VERSION        : %s\r\n", STR_HW_VER );
 80013de:	490c      	ldr	r1, [pc, #48]	@ (8001410 <BootMessagePrint+0x44>)
 80013e0:	480c      	ldr	r0, [pc, #48]	@ (8001414 <BootMessagePrint+0x48>)
 80013e2:	f00a fd4b 	bl	800be7c <iprintf>
    
    printf(" - FW VERSION        : %s\r\n", STR_FW_VER );
 80013e6:	490c      	ldr	r1, [pc, #48]	@ (8001418 <BootMessagePrint+0x4c>)
 80013e8:	480c      	ldr	r0, [pc, #48]	@ (800141c <BootMessagePrint+0x50>)
 80013ea:	f00a fd47 	bl	800be7c <iprintf>
    
    printf(" - BUILD TIME        : %s, %s\r\n", __DATE__, __TIME__ );
 80013ee:	4a0c      	ldr	r2, [pc, #48]	@ (8001420 <BootMessagePrint+0x54>)
 80013f0:	490c      	ldr	r1, [pc, #48]	@ (8001424 <BootMessagePrint+0x58>)
 80013f2:	480d      	ldr	r0, [pc, #52]	@ (8001428 <BootMessagePrint+0x5c>)
 80013f4:	f00a fd42 	bl	800be7c <iprintf>
    
    printf("-------------------------------------------------------------------\r\n" );
 80013f8:	4802      	ldr	r0, [pc, #8]	@ (8001404 <BootMessagePrint+0x38>)
 80013fa:	f00a fda7 	bl	800bf4c <puts>
}
 80013fe:	bf00      	nop
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	0800ccbc 	.word	0x0800ccbc
 8001408:	0800cd04 	.word	0x0800cd04
 800140c:	0800cd14 	.word	0x0800cd14
 8001410:	0800cd30 	.word	0x0800cd30
 8001414:	0800cd38 	.word	0x0800cd38
 8001418:	0800cd54 	.word	0x0800cd54
 800141c:	0800cd68 	.word	0x0800cd68
 8001420:	0800cd84 	.word	0x0800cd84
 8001424:	0800cd90 	.word	0x0800cd90
 8001428:	0800cd9c 	.word	0x0800cd9c

0800142c <GetClockSourcePrint>:

/* Display Clcok Source Message */
void GetClockSourcePrint (void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
    printf("-------------------------------------------------------------------\r\n");
 8001430:	4819      	ldr	r0, [pc, #100]	@ (8001498 <GetClockSourcePrint+0x6c>)
 8001432:	f00a fd8b 	bl	800bf4c <puts>
    
    printf(" - SYSTEM Clock Frequency        : %lu MHz\r\n", (HAL_RCC_GetSysClockFreq() /1000000));
 8001436:	f003 fdff 	bl	8005038 <HAL_RCC_GetSysClockFreq>
 800143a:	4603      	mov	r3, r0
 800143c:	4a17      	ldr	r2, [pc, #92]	@ (800149c <GetClockSourcePrint+0x70>)
 800143e:	fba2 2303 	umull	r2, r3, r2, r3
 8001442:	0c9b      	lsrs	r3, r3, #18
 8001444:	4619      	mov	r1, r3
 8001446:	4816      	ldr	r0, [pc, #88]	@ (80014a0 <GetClockSourcePrint+0x74>)
 8001448:	f00a fd18 	bl	800be7c <iprintf>
    
    printf(" - HCLK Clock   Frequency        : %lu MHz\r\n", (HAL_RCC_GetHCLKFreq() / 1000000));
 800144c:	f003 fe56 	bl	80050fc <HAL_RCC_GetHCLKFreq>
 8001450:	4603      	mov	r3, r0
 8001452:	4a12      	ldr	r2, [pc, #72]	@ (800149c <GetClockSourcePrint+0x70>)
 8001454:	fba2 2303 	umull	r2, r3, r2, r3
 8001458:	0c9b      	lsrs	r3, r3, #18
 800145a:	4619      	mov	r1, r3
 800145c:	4811      	ldr	r0, [pc, #68]	@ (80014a4 <GetClockSourcePrint+0x78>)
 800145e:	f00a fd0d 	bl	800be7c <iprintf>
    
    printf(" - PCLK1 Clock  Frequency        : %lu MHz\r\n", (HAL_RCC_GetPCLK1Freq() / 1000000));
 8001462:	f003 fe57 	bl	8005114 <HAL_RCC_GetPCLK1Freq>
 8001466:	4603      	mov	r3, r0
 8001468:	4a0c      	ldr	r2, [pc, #48]	@ (800149c <GetClockSourcePrint+0x70>)
 800146a:	fba2 2303 	umull	r2, r3, r2, r3
 800146e:	0c9b      	lsrs	r3, r3, #18
 8001470:	4619      	mov	r1, r3
 8001472:	480d      	ldr	r0, [pc, #52]	@ (80014a8 <GetClockSourcePrint+0x7c>)
 8001474:	f00a fd02 	bl	800be7c <iprintf>
    
    printf(" - PCLK2 Clock  Frequency        : %lu MHz\r\n", (HAL_RCC_GetPCLK2Freq() / 1000000));
 8001478:	f003 fe62 	bl	8005140 <HAL_RCC_GetPCLK2Freq>
 800147c:	4603      	mov	r3, r0
 800147e:	4a07      	ldr	r2, [pc, #28]	@ (800149c <GetClockSourcePrint+0x70>)
 8001480:	fba2 2303 	umull	r2, r3, r2, r3
 8001484:	0c9b      	lsrs	r3, r3, #18
 8001486:	4619      	mov	r1, r3
 8001488:	4808      	ldr	r0, [pc, #32]	@ (80014ac <GetClockSourcePrint+0x80>)
 800148a:	f00a fcf7 	bl	800be7c <iprintf>
    
    printf("-------------------------------------------------------------------\r\n" );
 800148e:	4802      	ldr	r0, [pc, #8]	@ (8001498 <GetClockSourcePrint+0x6c>)
 8001490:	f00a fd5c 	bl	800bf4c <puts>
}
 8001494:	bf00      	nop
 8001496:	bd80      	pop	{r7, pc}
 8001498:	0800ccbc 	.word	0x0800ccbc
 800149c:	431bde83 	.word	0x431bde83
 80014a0:	0800cdbc 	.word	0x0800cdbc
 80014a4:	0800cdec 	.word	0x0800cdec
 80014a8:	0800ce1c 	.word	0x0800ce1c
 80014ac:	0800ce4c 	.word	0x0800ce4c

080014b0 <Decode_CKS_GetChecksum>:
    //     return 0;
    // }
}

static uint8_t Decode_CKS_GetChecksum (const uint8_t * pData, uint8_t length)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b087      	sub	sp, #28
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
 80014b8:	460b      	mov	r3, r1
 80014ba:	70fb      	strb	r3, [r7, #3]
    uint8_t ck8 = 0x52;
 80014bc:	2352      	movs	r3, #82	@ 0x52
 80014be:	75fb      	strb	r3, [r7, #23]
    uint8_t checksumsize = 0;
 80014c0:	2300      	movs	r3, #0
 80014c2:	757b      	strb	r3, [r7, #21]

    checksumsize = length;
 80014c4:	78fb      	ldrb	r3, [r7, #3]
 80014c6:	757b      	strb	r3, [r7, #21]

    // ck8 ^= *pData++; // MC Check 

    // ck8 ^= *pData++ & 0xC0; // CKT 6b clear. CKT Check
    // for (uint8_t i = 0; i < checksumsize; i++)
    for (uint8_t i = 0; i < checksumsize; i++)
 80014c8:	2300      	movs	r3, #0
 80014ca:	75bb      	strb	r3, [r7, #22]
 80014cc:	e009      	b.n	80014e2 <Decode_CKS_GetChecksum+0x32>
    {
        ck8 ^= *pData++;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	1c5a      	adds	r2, r3, #1
 80014d2:	607a      	str	r2, [r7, #4]
 80014d4:	781a      	ldrb	r2, [r3, #0]
 80014d6:	7dfb      	ldrb	r3, [r7, #23]
 80014d8:	4053      	eors	r3, r2
 80014da:	75fb      	strb	r3, [r7, #23]
    for (uint8_t i = 0; i < checksumsize; i++)
 80014dc:	7dbb      	ldrb	r3, [r7, #22]
 80014de:	3301      	adds	r3, #1
 80014e0:	75bb      	strb	r3, [r7, #22]
 80014e2:	7dba      	ldrb	r2, [r7, #22]
 80014e4:	7d7b      	ldrb	r3, [r7, #21]
 80014e6:	429a      	cmp	r2, r3
 80014e8:	d3f1      	bcc.n	80014ce <Decode_CKS_GetChecksum+0x1e>
    // {
    //         ck8 ^= *pData++;
    // }

    //Section A.1.6
    uint8_t bit5 = ((ck8 >> 7) & 1U) ^ ((ck8 >> 5) & 1U) ^ ((ck8 >> 3) & 1U) ^ ((ck8 >> 1) & 1U);
 80014ea:	7dfb      	ldrb	r3, [r7, #23]
 80014ec:	09db      	lsrs	r3, r3, #7
 80014ee:	b2da      	uxtb	r2, r3
 80014f0:	7dfb      	ldrb	r3, [r7, #23]
 80014f2:	095b      	lsrs	r3, r3, #5
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	4053      	eors	r3, r2
 80014f8:	b2da      	uxtb	r2, r3
 80014fa:	7dfb      	ldrb	r3, [r7, #23]
 80014fc:	08db      	lsrs	r3, r3, #3
 80014fe:	b2db      	uxtb	r3, r3
 8001500:	4053      	eors	r3, r2
 8001502:	b2da      	uxtb	r2, r3
 8001504:	7dfb      	ldrb	r3, [r7, #23]
 8001506:	085b      	lsrs	r3, r3, #1
 8001508:	b2db      	uxtb	r3, r3
 800150a:	4053      	eors	r3, r2
 800150c:	b2db      	uxtb	r3, r3
 800150e:	f003 0301 	and.w	r3, r3, #1
 8001512:	753b      	strb	r3, [r7, #20]
    uint8_t bit4 = ((ck8 >> 6) & 1U) ^ ((ck8 >> 4) & 1U) ^ ((ck8 >> 2) & 1U) ^ (ck8 & 1U);
 8001514:	7dfb      	ldrb	r3, [r7, #23]
 8001516:	099b      	lsrs	r3, r3, #6
 8001518:	b2da      	uxtb	r2, r3
 800151a:	7dfb      	ldrb	r3, [r7, #23]
 800151c:	091b      	lsrs	r3, r3, #4
 800151e:	b2db      	uxtb	r3, r3
 8001520:	4053      	eors	r3, r2
 8001522:	b2da      	uxtb	r2, r3
 8001524:	7dfb      	ldrb	r3, [r7, #23]
 8001526:	089b      	lsrs	r3, r3, #2
 8001528:	b2db      	uxtb	r3, r3
 800152a:	4053      	eors	r3, r2
 800152c:	b2da      	uxtb	r2, r3
 800152e:	7dfb      	ldrb	r3, [r7, #23]
 8001530:	4053      	eors	r3, r2
 8001532:	b2db      	uxtb	r3, r3
 8001534:	f003 0301 	and.w	r3, r3, #1
 8001538:	74fb      	strb	r3, [r7, #19]
    uint8_t bit3 = ((ck8 >> 7) & 1U) ^ ((ck8 >> 6) & 1U);
 800153a:	7dfb      	ldrb	r3, [r7, #23]
 800153c:	09db      	lsrs	r3, r3, #7
 800153e:	b2da      	uxtb	r2, r3
 8001540:	7dfb      	ldrb	r3, [r7, #23]
 8001542:	099b      	lsrs	r3, r3, #6
 8001544:	b2db      	uxtb	r3, r3
 8001546:	4053      	eors	r3, r2
 8001548:	b2db      	uxtb	r3, r3
 800154a:	f003 0301 	and.w	r3, r3, #1
 800154e:	74bb      	strb	r3, [r7, #18]
    uint8_t bit2 = ((ck8 >> 5) & 1U) ^ ((ck8 >> 4) & 1U);
 8001550:	7dfb      	ldrb	r3, [r7, #23]
 8001552:	095b      	lsrs	r3, r3, #5
 8001554:	b2da      	uxtb	r2, r3
 8001556:	7dfb      	ldrb	r3, [r7, #23]
 8001558:	091b      	lsrs	r3, r3, #4
 800155a:	b2db      	uxtb	r3, r3
 800155c:	4053      	eors	r3, r2
 800155e:	b2db      	uxtb	r3, r3
 8001560:	f003 0301 	and.w	r3, r3, #1
 8001564:	747b      	strb	r3, [r7, #17]
    uint8_t bit1 = ((ck8 >> 3) & 1U) ^ ((ck8 >> 2) & 1U);
 8001566:	7dfb      	ldrb	r3, [r7, #23]
 8001568:	08db      	lsrs	r3, r3, #3
 800156a:	b2da      	uxtb	r2, r3
 800156c:	7dfb      	ldrb	r3, [r7, #23]
 800156e:	089b      	lsrs	r3, r3, #2
 8001570:	b2db      	uxtb	r3, r3
 8001572:	4053      	eors	r3, r2
 8001574:	b2db      	uxtb	r3, r3
 8001576:	f003 0301 	and.w	r3, r3, #1
 800157a:	743b      	strb	r3, [r7, #16]
    uint8_t bit0 = ((ck8 >> 1) & 1U) ^ ((ck8 & 1U));
 800157c:	7dfb      	ldrb	r3, [r7, #23]
 800157e:	085b      	lsrs	r3, r3, #1
 8001580:	b2da      	uxtb	r2, r3
 8001582:	7dfb      	ldrb	r3, [r7, #23]
 8001584:	4053      	eors	r3, r2
 8001586:	b2db      	uxtb	r3, r3
 8001588:	f003 0301 	and.w	r3, r3, #1
 800158c:	73fb      	strb	r3, [r7, #15]
    uint8_t ck6 =   bit5 << 5 |
 800158e:	7d3b      	ldrb	r3, [r7, #20]
 8001590:	015b      	lsls	r3, r3, #5
 8001592:	b25a      	sxtb	r2, r3
                    bit4 << 4 |
 8001594:	7cfb      	ldrb	r3, [r7, #19]
 8001596:	011b      	lsls	r3, r3, #4
    uint8_t ck6 =   bit5 << 5 |
 8001598:	b25b      	sxtb	r3, r3
 800159a:	4313      	orrs	r3, r2
 800159c:	b25a      	sxtb	r2, r3
                    bit3 << 3 |
 800159e:	7cbb      	ldrb	r3, [r7, #18]
 80015a0:	00db      	lsls	r3, r3, #3
                    bit4 << 4 |
 80015a2:	b25b      	sxtb	r3, r3
 80015a4:	4313      	orrs	r3, r2
 80015a6:	b25a      	sxtb	r2, r3
                    bit2 << 2 |
 80015a8:	7c7b      	ldrb	r3, [r7, #17]
 80015aa:	009b      	lsls	r3, r3, #2
                    bit3 << 3 |
 80015ac:	b25b      	sxtb	r3, r3
 80015ae:	4313      	orrs	r3, r2
 80015b0:	b25a      	sxtb	r2, r3
                    bit1 << 1 |
 80015b2:	7c3b      	ldrb	r3, [r7, #16]
 80015b4:	005b      	lsls	r3, r3, #1
                    bit2 << 2 |
 80015b6:	b25b      	sxtb	r3, r3
 80015b8:	4313      	orrs	r3, r2
 80015ba:	b25a      	sxtb	r2, r3
                    bit1 << 1 |
 80015bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015c0:	4313      	orrs	r3, r2
 80015c2:	b25b      	sxtb	r3, r3
    uint8_t ck6 =   bit5 << 5 |
 80015c4:	73bb      	strb	r3, [r7, #14]
                    bit0;
    return ck6;
 80015c6:	7bbb      	ldrb	r3, [r7, #14]
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	371c      	adds	r7, #28
 80015cc:	46bd      	mov	sp, r7
 80015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d2:	4770      	bx	lr

080015d4 <IOL_PreOP_ReadWriteCheck>:
    DirectParameterPage1.Page_1_15_SystemCommand = 0x00;
}

// PreOP Mode R/W 체크
static uint8_t IOL_PreOP_ReadWriteCheck (void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	af00      	add	r7, sp, #0
    // R/W   Read 체크
    if (Decode_MC_ReadWrite(uart1_rx_IDLE_buf[0]) == IOL_RW_Read)
 80015d8:	4b0a      	ldr	r3, [pc, #40]	@ (8001604 <IOL_PreOP_ReadWriteCheck+0x30>)
 80015da:	781b      	ldrb	r3, [r3, #0]
 80015dc:	4618      	mov	r0, r3
 80015de:	f000 fc09 	bl	8001df4 <Decode_MC_ReadWrite>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b01      	cmp	r3, #1
 80015e6:	d101      	bne.n	80015ec <IOL_PreOP_ReadWriteCheck+0x18>
    {
        return IOL_RW_Read;
 80015e8:	2301      	movs	r3, #1
 80015ea:	e009      	b.n	8001600 <IOL_PreOP_ReadWriteCheck+0x2c>
    }
    // R/W   Write 체크
    else if (Decode_MC_ReadWrite(uart1_rx_IDLE_buf[0]) == IOL_RW_Write)
 80015ec:	4b05      	ldr	r3, [pc, #20]	@ (8001604 <IOL_PreOP_ReadWriteCheck+0x30>)
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	4618      	mov	r0, r3
 80015f2:	f000 fbff 	bl	8001df4 <Decode_MC_ReadWrite>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d101      	bne.n	8001600 <IOL_PreOP_ReadWriteCheck+0x2c>
    {
        return IOL_RW_Write;
 80015fc:	2300      	movs	r3, #0
 80015fe:	e7ff      	b.n	8001600 <IOL_PreOP_ReadWriteCheck+0x2c>
    }
}
 8001600:	4618      	mov	r0, r3
 8001602:	bd80      	pop	{r7, pc}
 8001604:	20000a7c 	.word	0x20000a7c

08001608 <PreOP_CKS_GetChecksum>:

//preOP 모드 Event 비트 포함 CKS 생성
static uint8_t PreOP_CKS_GetChecksum (const uint8_t * pData, uint8_t length, uint8_t eventflag)
{
 8001608:	b480      	push	{r7}
 800160a:	b089      	sub	sp, #36	@ 0x24
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
 8001610:	460b      	mov	r3, r1
 8001612:	70fb      	strb	r3, [r7, #3]
 8001614:	4613      	mov	r3, r2
 8001616:	70bb      	strb	r3, [r7, #2]
    uint8_t ck8 = 0x52;
 8001618:	2352      	movs	r3, #82	@ 0x52
 800161a:	77fb      	strb	r3, [r7, #31]
    uint8_t checksumsize = 0;
 800161c:	2300      	movs	r3, #0
 800161e:	773b      	strb	r3, [r7, #28]
    uint8_t eventbitset = 0x80;
 8001620:	2380      	movs	r3, #128	@ 0x80
 8001622:	76fb      	strb	r3, [r7, #27]

    checksumsize = length;
 8001624:	78fb      	ldrb	r3, [r7, #3]
 8001626:	773b      	strb	r3, [r7, #28]

    if (eventflag == 0)
 8001628:	78bb      	ldrb	r3, [r7, #2]
 800162a:	2b00      	cmp	r3, #0
 800162c:	f040 8081 	bne.w	8001732 <PreOP_CKS_GetChecksum+0x12a>
    {
        for (uint8_t i = 0; i < checksumsize; i++)
 8001630:	2300      	movs	r3, #0
 8001632:	77bb      	strb	r3, [r7, #30]
 8001634:	e009      	b.n	800164a <PreOP_CKS_GetChecksum+0x42>
        {
            ck8 ^= *pData++;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	1c5a      	adds	r2, r3, #1
 800163a:	607a      	str	r2, [r7, #4]
 800163c:	781a      	ldrb	r2, [r3, #0]
 800163e:	7ffb      	ldrb	r3, [r7, #31]
 8001640:	4053      	eors	r3, r2
 8001642:	77fb      	strb	r3, [r7, #31]
        for (uint8_t i = 0; i < checksumsize; i++)
 8001644:	7fbb      	ldrb	r3, [r7, #30]
 8001646:	3301      	adds	r3, #1
 8001648:	77bb      	strb	r3, [r7, #30]
 800164a:	7fba      	ldrb	r2, [r7, #30]
 800164c:	7f3b      	ldrb	r3, [r7, #28]
 800164e:	429a      	cmp	r2, r3
 8001650:	d3f1      	bcc.n	8001636 <PreOP_CKS_GetChecksum+0x2e>
        }
        //Section A.1.6
        uint8_t bit5 = ((ck8 >> 7) & 1U) ^ ((ck8 >> 5) & 1U) ^ ((ck8 >> 3) & 1U) ^ ((ck8 >> 1) & 1U);
 8001652:	7ffb      	ldrb	r3, [r7, #31]
 8001654:	09db      	lsrs	r3, r3, #7
 8001656:	b2da      	uxtb	r2, r3
 8001658:	7ffb      	ldrb	r3, [r7, #31]
 800165a:	095b      	lsrs	r3, r3, #5
 800165c:	b2db      	uxtb	r3, r3
 800165e:	4053      	eors	r3, r2
 8001660:	b2da      	uxtb	r2, r3
 8001662:	7ffb      	ldrb	r3, [r7, #31]
 8001664:	08db      	lsrs	r3, r3, #3
 8001666:	b2db      	uxtb	r3, r3
 8001668:	4053      	eors	r3, r2
 800166a:	b2da      	uxtb	r2, r3
 800166c:	7ffb      	ldrb	r3, [r7, #31]
 800166e:	085b      	lsrs	r3, r3, #1
 8001670:	b2db      	uxtb	r3, r3
 8001672:	4053      	eors	r3, r2
 8001674:	b2db      	uxtb	r3, r3
 8001676:	f003 0301 	and.w	r3, r3, #1
 800167a:	74fb      	strb	r3, [r7, #19]
        uint8_t bit4 = ((ck8 >> 6) & 1U) ^ ((ck8 >> 4) & 1U) ^ ((ck8 >> 2) & 1U) ^ (ck8 & 1U);
 800167c:	7ffb      	ldrb	r3, [r7, #31]
 800167e:	099b      	lsrs	r3, r3, #6
 8001680:	b2da      	uxtb	r2, r3
 8001682:	7ffb      	ldrb	r3, [r7, #31]
 8001684:	091b      	lsrs	r3, r3, #4
 8001686:	b2db      	uxtb	r3, r3
 8001688:	4053      	eors	r3, r2
 800168a:	b2da      	uxtb	r2, r3
 800168c:	7ffb      	ldrb	r3, [r7, #31]
 800168e:	089b      	lsrs	r3, r3, #2
 8001690:	b2db      	uxtb	r3, r3
 8001692:	4053      	eors	r3, r2
 8001694:	b2da      	uxtb	r2, r3
 8001696:	7ffb      	ldrb	r3, [r7, #31]
 8001698:	4053      	eors	r3, r2
 800169a:	b2db      	uxtb	r3, r3
 800169c:	f003 0301 	and.w	r3, r3, #1
 80016a0:	74bb      	strb	r3, [r7, #18]
        uint8_t bit3 = ((ck8 >> 7) & 1U) ^ ((ck8 >> 6) & 1U);
 80016a2:	7ffb      	ldrb	r3, [r7, #31]
 80016a4:	09db      	lsrs	r3, r3, #7
 80016a6:	b2da      	uxtb	r2, r3
 80016a8:	7ffb      	ldrb	r3, [r7, #31]
 80016aa:	099b      	lsrs	r3, r3, #6
 80016ac:	b2db      	uxtb	r3, r3
 80016ae:	4053      	eors	r3, r2
 80016b0:	b2db      	uxtb	r3, r3
 80016b2:	f003 0301 	and.w	r3, r3, #1
 80016b6:	747b      	strb	r3, [r7, #17]
        uint8_t bit2 = ((ck8 >> 5) & 1U) ^ ((ck8 >> 4) & 1U);
 80016b8:	7ffb      	ldrb	r3, [r7, #31]
 80016ba:	095b      	lsrs	r3, r3, #5
 80016bc:	b2da      	uxtb	r2, r3
 80016be:	7ffb      	ldrb	r3, [r7, #31]
 80016c0:	091b      	lsrs	r3, r3, #4
 80016c2:	b2db      	uxtb	r3, r3
 80016c4:	4053      	eors	r3, r2
 80016c6:	b2db      	uxtb	r3, r3
 80016c8:	f003 0301 	and.w	r3, r3, #1
 80016cc:	743b      	strb	r3, [r7, #16]
        uint8_t bit1 = ((ck8 >> 3) & 1U) ^ ((ck8 >> 2) & 1U);
 80016ce:	7ffb      	ldrb	r3, [r7, #31]
 80016d0:	08db      	lsrs	r3, r3, #3
 80016d2:	b2da      	uxtb	r2, r3
 80016d4:	7ffb      	ldrb	r3, [r7, #31]
 80016d6:	089b      	lsrs	r3, r3, #2
 80016d8:	b2db      	uxtb	r3, r3
 80016da:	4053      	eors	r3, r2
 80016dc:	b2db      	uxtb	r3, r3
 80016de:	f003 0301 	and.w	r3, r3, #1
 80016e2:	73fb      	strb	r3, [r7, #15]
        uint8_t bit0 = ((ck8 >> 1) & 1U) ^ ((ck8 & 1U));
 80016e4:	7ffb      	ldrb	r3, [r7, #31]
 80016e6:	085b      	lsrs	r3, r3, #1
 80016e8:	b2da      	uxtb	r2, r3
 80016ea:	7ffb      	ldrb	r3, [r7, #31]
 80016ec:	4053      	eors	r3, r2
 80016ee:	b2db      	uxtb	r3, r3
 80016f0:	f003 0301 	and.w	r3, r3, #1
 80016f4:	73bb      	strb	r3, [r7, #14]
        uint8_t ck6 =   bit5 << 5 |
 80016f6:	7cfb      	ldrb	r3, [r7, #19]
 80016f8:	015b      	lsls	r3, r3, #5
 80016fa:	b25a      	sxtb	r2, r3
                        bit4 << 4 |
 80016fc:	7cbb      	ldrb	r3, [r7, #18]
 80016fe:	011b      	lsls	r3, r3, #4
        uint8_t ck6 =   bit5 << 5 |
 8001700:	b25b      	sxtb	r3, r3
 8001702:	4313      	orrs	r3, r2
 8001704:	b25a      	sxtb	r2, r3
                        bit3 << 3 |
 8001706:	7c7b      	ldrb	r3, [r7, #17]
 8001708:	00db      	lsls	r3, r3, #3
                        bit4 << 4 |
 800170a:	b25b      	sxtb	r3, r3
 800170c:	4313      	orrs	r3, r2
 800170e:	b25a      	sxtb	r2, r3
                        bit2 << 2 |
 8001710:	7c3b      	ldrb	r3, [r7, #16]
 8001712:	009b      	lsls	r3, r3, #2
                        bit3 << 3 |
 8001714:	b25b      	sxtb	r3, r3
 8001716:	4313      	orrs	r3, r2
 8001718:	b25a      	sxtb	r2, r3
                        bit1 << 1 |
 800171a:	7bfb      	ldrb	r3, [r7, #15]
 800171c:	005b      	lsls	r3, r3, #1
                        bit2 << 2 |
 800171e:	b25b      	sxtb	r3, r3
 8001720:	4313      	orrs	r3, r2
 8001722:	b25a      	sxtb	r2, r3
                        bit1 << 1 |
 8001724:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001728:	4313      	orrs	r3, r2
 800172a:	b25b      	sxtb	r3, r3
        uint8_t ck6 =   bit5 << 5 |
 800172c:	737b      	strb	r3, [r7, #13]
                        bit0;
        
        return ck6;
 800172e:	7b7b      	ldrb	r3, [r7, #13]
 8001730:	e08b      	b.n	800184a <PreOP_CKS_GetChecksum+0x242>
    }
    else if (eventflag == 1)
 8001732:	78bb      	ldrb	r3, [r7, #2]
 8001734:	2b01      	cmp	r3, #1
 8001736:	f040 8088 	bne.w	800184a <PreOP_CKS_GetChecksum+0x242>
    {
        for (uint8_t i = 0; i < checksumsize; i++)
 800173a:	2300      	movs	r3, #0
 800173c:	777b      	strb	r3, [r7, #29]
 800173e:	e009      	b.n	8001754 <PreOP_CKS_GetChecksum+0x14c>
        {
            ck8 ^= *pData++;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	1c5a      	adds	r2, r3, #1
 8001744:	607a      	str	r2, [r7, #4]
 8001746:	781a      	ldrb	r2, [r3, #0]
 8001748:	7ffb      	ldrb	r3, [r7, #31]
 800174a:	4053      	eors	r3, r2
 800174c:	77fb      	strb	r3, [r7, #31]
        for (uint8_t i = 0; i < checksumsize; i++)
 800174e:	7f7b      	ldrb	r3, [r7, #29]
 8001750:	3301      	adds	r3, #1
 8001752:	777b      	strb	r3, [r7, #29]
 8001754:	7f7a      	ldrb	r2, [r7, #29]
 8001756:	7f3b      	ldrb	r3, [r7, #28]
 8001758:	429a      	cmp	r2, r3
 800175a:	d3f1      	bcc.n	8001740 <PreOP_CKS_GetChecksum+0x138>
        }

        ck8 ^= eventbitset;
 800175c:	7ffa      	ldrb	r2, [r7, #31]
 800175e:	7efb      	ldrb	r3, [r7, #27]
 8001760:	4053      	eors	r3, r2
 8001762:	77fb      	strb	r3, [r7, #31]

        //Section A.1.6
        uint8_t bit5 = ((ck8 >> 7) & 1U) ^ ((ck8 >> 5) & 1U) ^ ((ck8 >> 3) & 1U) ^ ((ck8 >> 1) & 1U);
 8001764:	7ffb      	ldrb	r3, [r7, #31]
 8001766:	09db      	lsrs	r3, r3, #7
 8001768:	b2da      	uxtb	r2, r3
 800176a:	7ffb      	ldrb	r3, [r7, #31]
 800176c:	095b      	lsrs	r3, r3, #5
 800176e:	b2db      	uxtb	r3, r3
 8001770:	4053      	eors	r3, r2
 8001772:	b2da      	uxtb	r2, r3
 8001774:	7ffb      	ldrb	r3, [r7, #31]
 8001776:	08db      	lsrs	r3, r3, #3
 8001778:	b2db      	uxtb	r3, r3
 800177a:	4053      	eors	r3, r2
 800177c:	b2da      	uxtb	r2, r3
 800177e:	7ffb      	ldrb	r3, [r7, #31]
 8001780:	085b      	lsrs	r3, r3, #1
 8001782:	b2db      	uxtb	r3, r3
 8001784:	4053      	eors	r3, r2
 8001786:	b2db      	uxtb	r3, r3
 8001788:	f003 0301 	and.w	r3, r3, #1
 800178c:	76bb      	strb	r3, [r7, #26]
        uint8_t bit4 = ((ck8 >> 6) & 1U) ^ ((ck8 >> 4) & 1U) ^ ((ck8 >> 2) & 1U) ^ (ck8 & 1U);
 800178e:	7ffb      	ldrb	r3, [r7, #31]
 8001790:	099b      	lsrs	r3, r3, #6
 8001792:	b2da      	uxtb	r2, r3
 8001794:	7ffb      	ldrb	r3, [r7, #31]
 8001796:	091b      	lsrs	r3, r3, #4
 8001798:	b2db      	uxtb	r3, r3
 800179a:	4053      	eors	r3, r2
 800179c:	b2da      	uxtb	r2, r3
 800179e:	7ffb      	ldrb	r3, [r7, #31]
 80017a0:	089b      	lsrs	r3, r3, #2
 80017a2:	b2db      	uxtb	r3, r3
 80017a4:	4053      	eors	r3, r2
 80017a6:	b2da      	uxtb	r2, r3
 80017a8:	7ffb      	ldrb	r3, [r7, #31]
 80017aa:	4053      	eors	r3, r2
 80017ac:	b2db      	uxtb	r3, r3
 80017ae:	f003 0301 	and.w	r3, r3, #1
 80017b2:	767b      	strb	r3, [r7, #25]
        uint8_t bit3 = ((ck8 >> 7) & 1U) ^ ((ck8 >> 6) & 1U);
 80017b4:	7ffb      	ldrb	r3, [r7, #31]
 80017b6:	09db      	lsrs	r3, r3, #7
 80017b8:	b2da      	uxtb	r2, r3
 80017ba:	7ffb      	ldrb	r3, [r7, #31]
 80017bc:	099b      	lsrs	r3, r3, #6
 80017be:	b2db      	uxtb	r3, r3
 80017c0:	4053      	eors	r3, r2
 80017c2:	b2db      	uxtb	r3, r3
 80017c4:	f003 0301 	and.w	r3, r3, #1
 80017c8:	763b      	strb	r3, [r7, #24]
        uint8_t bit2 = ((ck8 >> 5) & 1U) ^ ((ck8 >> 4) & 1U);
 80017ca:	7ffb      	ldrb	r3, [r7, #31]
 80017cc:	095b      	lsrs	r3, r3, #5
 80017ce:	b2da      	uxtb	r2, r3
 80017d0:	7ffb      	ldrb	r3, [r7, #31]
 80017d2:	091b      	lsrs	r3, r3, #4
 80017d4:	b2db      	uxtb	r3, r3
 80017d6:	4053      	eors	r3, r2
 80017d8:	b2db      	uxtb	r3, r3
 80017da:	f003 0301 	and.w	r3, r3, #1
 80017de:	75fb      	strb	r3, [r7, #23]
        uint8_t bit1 = ((ck8 >> 3) & 1U) ^ ((ck8 >> 2) & 1U);
 80017e0:	7ffb      	ldrb	r3, [r7, #31]
 80017e2:	08db      	lsrs	r3, r3, #3
 80017e4:	b2da      	uxtb	r2, r3
 80017e6:	7ffb      	ldrb	r3, [r7, #31]
 80017e8:	089b      	lsrs	r3, r3, #2
 80017ea:	b2db      	uxtb	r3, r3
 80017ec:	4053      	eors	r3, r2
 80017ee:	b2db      	uxtb	r3, r3
 80017f0:	f003 0301 	and.w	r3, r3, #1
 80017f4:	75bb      	strb	r3, [r7, #22]
        uint8_t bit0 = ((ck8 >> 1) & 1U) ^ ((ck8 & 1U));
 80017f6:	7ffb      	ldrb	r3, [r7, #31]
 80017f8:	085b      	lsrs	r3, r3, #1
 80017fa:	b2da      	uxtb	r2, r3
 80017fc:	7ffb      	ldrb	r3, [r7, #31]
 80017fe:	4053      	eors	r3, r2
 8001800:	b2db      	uxtb	r3, r3
 8001802:	f003 0301 	and.w	r3, r3, #1
 8001806:	757b      	strb	r3, [r7, #21]
        uint8_t ck6 =   bit5 << 5 |
 8001808:	7ebb      	ldrb	r3, [r7, #26]
 800180a:	015b      	lsls	r3, r3, #5
 800180c:	b25a      	sxtb	r2, r3
                        bit4 << 4 |
 800180e:	7e7b      	ldrb	r3, [r7, #25]
 8001810:	011b      	lsls	r3, r3, #4
        uint8_t ck6 =   bit5 << 5 |
 8001812:	b25b      	sxtb	r3, r3
 8001814:	4313      	orrs	r3, r2
 8001816:	b25a      	sxtb	r2, r3
                        bit3 << 3 |
 8001818:	7e3b      	ldrb	r3, [r7, #24]
 800181a:	00db      	lsls	r3, r3, #3
                        bit4 << 4 |
 800181c:	b25b      	sxtb	r3, r3
 800181e:	4313      	orrs	r3, r2
 8001820:	b25a      	sxtb	r2, r3
                        bit2 << 2 |
 8001822:	7dfb      	ldrb	r3, [r7, #23]
 8001824:	009b      	lsls	r3, r3, #2
                        bit3 << 3 |
 8001826:	b25b      	sxtb	r3, r3
 8001828:	4313      	orrs	r3, r2
 800182a:	b25a      	sxtb	r2, r3
                        bit1 << 1 |
 800182c:	7dbb      	ldrb	r3, [r7, #22]
 800182e:	005b      	lsls	r3, r3, #1
                        bit2 << 2 |
 8001830:	b25b      	sxtb	r3, r3
 8001832:	4313      	orrs	r3, r2
 8001834:	b25a      	sxtb	r2, r3
                        bit1 << 1 |
 8001836:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800183a:	4313      	orrs	r3, r2
 800183c:	b25b      	sxtb	r3, r3
        uint8_t ck6 =   bit5 << 5 |
 800183e:	753b      	strb	r3, [r7, #20]
                        bit0;
        
        return eventbitset | ck6;
 8001840:	7efa      	ldrb	r2, [r7, #27]
 8001842:	7d3b      	ldrb	r3, [r7, #20]
 8001844:	4313      	orrs	r3, r2
 8001846:	b2db      	uxtb	r3, r3
 8001848:	e7ff      	b.n	800184a <PreOP_CKS_GetChecksum+0x242>
    }
}
 800184a:	4618      	mov	r0, r3
 800184c:	3724      	adds	r7, #36	@ 0x24
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr
	...

08001858 <IOL_PD_Buffer_Clear>:
{
    return ;
}

void IOL_PD_Buffer_Clear (void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	af00      	add	r7, sp, #0
    memset(device_ProcessDataIn_arr, 0, sizeof(device_ProcessDataIn_arr));
 800185c:	2207      	movs	r2, #7
 800185e:	2100      	movs	r1, #0
 8001860:	4804      	ldr	r0, [pc, #16]	@ (8001874 <IOL_PD_Buffer_Clear+0x1c>)
 8001862:	f00a fc53 	bl	800c10c <memset>
    memset(device_ProcessDataOut_arr, 0, sizeof(device_ProcessDataOut_arr));
 8001866:	2205      	movs	r2, #5
 8001868:	2100      	movs	r1, #0
 800186a:	4803      	ldr	r0, [pc, #12]	@ (8001878 <IOL_PD_Buffer_Clear+0x20>)
 800186c:	f00a fc4e 	bl	800c10c <memset>
}
 8001870:	bf00      	nop
 8001872:	bd80      	pop	{r7, pc}
 8001874:	20000af0 	.word	0x20000af0
 8001878:	20000af8 	.word	0x20000af8

0800187c <IOL_ConnectToIFM_ReadDP>:

void IOL_ConnectToIFM_ReadDP (void)
{
 800187c:	b480      	push	{r7}
 800187e:	b083      	sub	sp, #12
 8001880:	af00      	add	r7, sp, #0
    uint8_t i, j = 0;
 8001882:	2300      	movs	r3, #0
 8001884:	71bb      	strb	r3, [r7, #6]
    uint8_t setpage1first[2] = {0x00, 0x22};
 8001886:	f44f 5308 	mov.w	r3, #8704	@ 0x2200
 800188a:	80bb      	strh	r3, [r7, #4]
    // uint8_t Pagevalue[16] = { 0 };

    for (i = 2; i < 16; i++)
 800188c:	2302      	movs	r3, #2
 800188e:	71fb      	strb	r3, [r7, #7]
 8001890:	e01a      	b.n	80018c8 <IOL_ConnectToIFM_ReadDP+0x4c>
    {
        for(j = 0; j < 2; j++)
 8001892:	2300      	movs	r3, #0
 8001894:	71bb      	strb	r3, [r7, #6]
 8001896:	e00a      	b.n	80018ae <IOL_ConnectToIFM_ReadDP+0x32>
        {
            IOL_ISDUPage_value[j] = setpage1first[j];
 8001898:	79ba      	ldrb	r2, [r7, #6]
 800189a:	79bb      	ldrb	r3, [r7, #6]
 800189c:	3208      	adds	r2, #8
 800189e:	443a      	add	r2, r7
 80018a0:	f812 1c04 	ldrb.w	r1, [r2, #-4]
 80018a4:	4a0d      	ldr	r2, [pc, #52]	@ (80018dc <IOL_ConnectToIFM_ReadDP+0x60>)
 80018a6:	54d1      	strb	r1, [r2, r3]
        for(j = 0; j < 2; j++)
 80018a8:	79bb      	ldrb	r3, [r7, #6]
 80018aa:	3301      	adds	r3, #1
 80018ac:	71bb      	strb	r3, [r7, #6]
 80018ae:	79bb      	ldrb	r3, [r7, #6]
 80018b0:	2b01      	cmp	r3, #1
 80018b2:	d9f1      	bls.n	8001898 <IOL_ConnectToIFM_ReadDP+0x1c>
        }
        IOL_ISDUPage_value[i] = IOL_Page1_SeqValue[i - 1];
 80018b4:	79fb      	ldrb	r3, [r7, #7]
 80018b6:	1e5a      	subs	r2, r3, #1
 80018b8:	79fb      	ldrb	r3, [r7, #7]
 80018ba:	4909      	ldr	r1, [pc, #36]	@ (80018e0 <IOL_ConnectToIFM_ReadDP+0x64>)
 80018bc:	5c89      	ldrb	r1, [r1, r2]
 80018be:	4a07      	ldr	r2, [pc, #28]	@ (80018dc <IOL_ConnectToIFM_ReadDP+0x60>)
 80018c0:	54d1      	strb	r1, [r2, r3]
    for (i = 2; i < 16; i++)
 80018c2:	79fb      	ldrb	r3, [r7, #7]
 80018c4:	3301      	adds	r3, #1
 80018c6:	71fb      	strb	r3, [r7, #7]
 80018c8:	79fb      	ldrb	r3, [r7, #7]
 80018ca:	2b0f      	cmp	r3, #15
 80018cc:	d9e1      	bls.n	8001892 <IOL_ConnectToIFM_ReadDP+0x16>
    }
}
 80018ce:	bf00      	nop
 80018d0:	bf00      	nop
 80018d2:	370c      	adds	r7, #12
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr
 80018dc:	20000ae0 	.word	0x20000ae0
 80018e0:	20000004 	.word	0x20000004

080018e4 <IOL_State_OP>:

// if (stateIOLseq == IOL_OP)
void IOL_State_OP (void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0
    uint8_t i, j = 0;
 80018ea:	2300      	movs	r3, #0
 80018ec:	71fb      	strb	r3, [r7, #7]
    uint8_t IOL_Commchannel_value = 0;
 80018ee:	2300      	movs	r3, #0
 80018f0:	71bb      	strb	r3, [r7, #6]
    // static uint8_t device_ProcessDataOut_arr[OP_ISDU_OUT_PROCESSDATALENGTH];

    // static uint8_t preop_data_arr[PREOP_DATA_LENGTH + 1] = {0}; // + 1   CKS 
    // uint8_t Page_Write_ChecksumValue[0] = {0};

    IOL_Commchannel_value = Print_MC_CommunicationChannel(uart1_rx_IDLE_buf[0]);
 80018f2:	4b93      	ldr	r3, [pc, #588]	@ (8001b40 <IOL_State_OP+0x25c>)
 80018f4:	781b      	ldrb	r3, [r3, #0]
 80018f6:	4618      	mov	r0, r3
 80018f8:	f000 fa9a 	bl	8001e30 <Print_MC_CommunicationChannel>
 80018fc:	4603      	mov	r3, r0
 80018fe:	71bb      	strb	r3, [r7, #6]
    // uint8_t Page_Write_ChecksumValue[1] = {0};

    if (IOL_PreOP_ReadWriteCheck() == IOL_RW_Read)
 8001900:	f7ff fe68 	bl	80015d4 <IOL_PreOP_ReadWriteCheck>
 8001904:	4603      	mov	r3, r0
 8001906:	2b01      	cmp	r3, #1
 8001908:	f040 80aa 	bne.w	8001a60 <IOL_State_OP+0x17c>
    {
        if (IOL_Commchannel_value == IOL_Channel_ISDU)
 800190c:	79bb      	ldrb	r3, [r7, #6]
 800190e:	2b03      	cmp	r3, #3
 8001910:	d169      	bne.n	80019e6 <IOL_State_OP+0x102>
        {
            if (IOL_OP_PD_Req_ProductName_Chkpdu == 1) // Product Name 요청이 있으면.
 8001912:	4b8c      	ldr	r3, [pc, #560]	@ (8001b44 <IOL_State_OP+0x260>)
 8001914:	781b      	ldrb	r3, [r3, #0]
 8001916:	2b01      	cmp	r3, #1
 8001918:	d129      	bne.n	800196e <IOL_State_OP+0x8a>
            {
                // IOL_OP_PD_Req_ProductName = 0;
                device_ProcessDataIn_arr[0] = IOL_OP_ProductName[IOL_OP_OD_Res_cnt][0];   // OD 데이터를  Index에 대한 응답 ISDU 구조의 사이즈에 맞게 나눠서 보내기 위함  
 800191a:	4b8b      	ldr	r3, [pc, #556]	@ (8001b48 <IOL_State_OP+0x264>)
 800191c:	781b      	ldrb	r3, [r3, #0]
 800191e:	461a      	mov	r2, r3
 8001920:	4b8a      	ldr	r3, [pc, #552]	@ (8001b4c <IOL_State_OP+0x268>)
 8001922:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 8001926:	4b8a      	ldr	r3, [pc, #552]	@ (8001b50 <IOL_State_OP+0x26c>)
 8001928:	701a      	strb	r2, [r3, #0]
                device_ProcessDataIn_arr[1] = IOL_OP_ProductName[IOL_OP_OD_Res_cnt][1];   // 현재 씬그립 디바이스의 IODD는 2 octet.
 800192a:	4b87      	ldr	r3, [pc, #540]	@ (8001b48 <IOL_State_OP+0x264>)
 800192c:	781b      	ldrb	r3, [r3, #0]
 800192e:	4a87      	ldr	r2, [pc, #540]	@ (8001b4c <IOL_State_OP+0x268>)
 8001930:	005b      	lsls	r3, r3, #1
 8001932:	4413      	add	r3, r2
 8001934:	785a      	ldrb	r2, [r3, #1]
 8001936:	4b86      	ldr	r3, [pc, #536]	@ (8001b50 <IOL_State_OP+0x26c>)
 8001938:	705a      	strb	r2, [r3, #1]
                IOL_OP_OD_Res_cnt++;        // ISDU 요청에 대한 Index 응답의 사이즈에 맞게 나눠서 보내기 위한 카운트값.
 800193a:	4b83      	ldr	r3, [pc, #524]	@ (8001b48 <IOL_State_OP+0x264>)
 800193c:	781b      	ldrb	r3, [r3, #0]
 800193e:	3301      	adds	r3, #1
 8001940:	b2da      	uxtb	r2, r3
 8001942:	4b81      	ldr	r3, [pc, #516]	@ (8001b48 <IOL_State_OP+0x264>)
 8001944:	701a      	strb	r2, [r3, #0]

                if (IOL_OP_OD_Res_cnt >= 13)
 8001946:	4b80      	ldr	r3, [pc, #512]	@ (8001b48 <IOL_State_OP+0x264>)
 8001948:	781b      	ldrb	r3, [r3, #0]
 800194a:	2b0c      	cmp	r3, #12
 800194c:	d905      	bls.n	800195a <IOL_State_OP+0x76>
                {
                    IOL_OP_PD_Req_ProductName_Chkpdu = 0;
 800194e:	4b7d      	ldr	r3, [pc, #500]	@ (8001b44 <IOL_State_OP+0x260>)
 8001950:	2200      	movs	r2, #0
 8001952:	701a      	strb	r2, [r3, #0]
                    IOL_OP_OD_Res_cnt = 0;
 8001954:	4b7c      	ldr	r3, [pc, #496]	@ (8001b48 <IOL_State_OP+0x264>)
 8001956:	2200      	movs	r2, #0
 8001958:	701a      	strb	r2, [r3, #0]
                }

                device_ProcessDataIn_arr[OP_ISDU_IN_PROCESSDATALENGTH - 1] = PreOP_CKS_GetChecksum(&device_ProcessDataIn_arr[0], (OP_ISDU_IN_PROCESSDATALENGTH - 1), 0);
 800195a:	2200      	movs	r2, #0
 800195c:	2106      	movs	r1, #6
 800195e:	487c      	ldr	r0, [pc, #496]	@ (8001b50 <IOL_State_OP+0x26c>)
 8001960:	f7ff fe52 	bl	8001608 <PreOP_CKS_GetChecksum>
 8001964:	4603      	mov	r3, r0
 8001966:	461a      	mov	r2, r3
 8001968:	4b79      	ldr	r3, [pc, #484]	@ (8001b50 <IOL_State_OP+0x26c>)
 800196a:	719a      	strb	r2, [r3, #6]
 800196c:	e067      	b.n	8001a3e <IOL_State_OP+0x15a>
            }
            else if (IOL_OP_PD_Req_SerialNumber_Chkpdu == 1) // Serial Number 요청이 있으면.
 800196e:	4b79      	ldr	r3, [pc, #484]	@ (8001b54 <IOL_State_OP+0x270>)
 8001970:	781b      	ldrb	r3, [r3, #0]
 8001972:	2b01      	cmp	r3, #1
 8001974:	d129      	bne.n	80019ca <IOL_State_OP+0xe6>
            {
                // IOL_OP_PD_Req_ProductName = 0;
                device_ProcessDataIn_arr[0] = IOL_OP_SerialNumber[IOL_OP_OD_Res_cnt][0];
 8001976:	4b74      	ldr	r3, [pc, #464]	@ (8001b48 <IOL_State_OP+0x264>)
 8001978:	781b      	ldrb	r3, [r3, #0]
 800197a:	461a      	mov	r2, r3
 800197c:	4b76      	ldr	r3, [pc, #472]	@ (8001b58 <IOL_State_OP+0x274>)
 800197e:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 8001982:	4b73      	ldr	r3, [pc, #460]	@ (8001b50 <IOL_State_OP+0x26c>)
 8001984:	701a      	strb	r2, [r3, #0]
                device_ProcessDataIn_arr[1] = IOL_OP_SerialNumber[IOL_OP_OD_Res_cnt][1];
 8001986:	4b70      	ldr	r3, [pc, #448]	@ (8001b48 <IOL_State_OP+0x264>)
 8001988:	781b      	ldrb	r3, [r3, #0]
 800198a:	4a73      	ldr	r2, [pc, #460]	@ (8001b58 <IOL_State_OP+0x274>)
 800198c:	005b      	lsls	r3, r3, #1
 800198e:	4413      	add	r3, r2
 8001990:	785a      	ldrb	r2, [r3, #1]
 8001992:	4b6f      	ldr	r3, [pc, #444]	@ (8001b50 <IOL_State_OP+0x26c>)
 8001994:	705a      	strb	r2, [r3, #1]
                IOL_OP_OD_Res_cnt++;
 8001996:	4b6c      	ldr	r3, [pc, #432]	@ (8001b48 <IOL_State_OP+0x264>)
 8001998:	781b      	ldrb	r3, [r3, #0]
 800199a:	3301      	adds	r3, #1
 800199c:	b2da      	uxtb	r2, r3
 800199e:	4b6a      	ldr	r3, [pc, #424]	@ (8001b48 <IOL_State_OP+0x264>)
 80019a0:	701a      	strb	r2, [r3, #0]

                if (IOL_OP_OD_Res_cnt >= 10)
 80019a2:	4b69      	ldr	r3, [pc, #420]	@ (8001b48 <IOL_State_OP+0x264>)
 80019a4:	781b      	ldrb	r3, [r3, #0]
 80019a6:	2b09      	cmp	r3, #9
 80019a8:	d905      	bls.n	80019b6 <IOL_State_OP+0xd2>
                {
                    IOL_OP_PD_Req_SerialNumber_Chkpdu = 0;
 80019aa:	4b6a      	ldr	r3, [pc, #424]	@ (8001b54 <IOL_State_OP+0x270>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	701a      	strb	r2, [r3, #0]
                    IOL_OP_OD_Res_cnt = 0;
 80019b0:	4b65      	ldr	r3, [pc, #404]	@ (8001b48 <IOL_State_OP+0x264>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	701a      	strb	r2, [r3, #0]
                }

                device_ProcessDataIn_arr[OP_ISDU_IN_PROCESSDATALENGTH - 1] = PreOP_CKS_GetChecksum(&device_ProcessDataIn_arr[0], (OP_ISDU_IN_PROCESSDATALENGTH - 1), 0);    
 80019b6:	2200      	movs	r2, #0
 80019b8:	2106      	movs	r1, #6
 80019ba:	4865      	ldr	r0, [pc, #404]	@ (8001b50 <IOL_State_OP+0x26c>)
 80019bc:	f7ff fe24 	bl	8001608 <PreOP_CKS_GetChecksum>
 80019c0:	4603      	mov	r3, r0
 80019c2:	461a      	mov	r2, r3
 80019c4:	4b62      	ldr	r3, [pc, #392]	@ (8001b50 <IOL_State_OP+0x26c>)
 80019c6:	719a      	strb	r2, [r3, #6]
 80019c8:	e039      	b.n	8001a3e <IOL_State_OP+0x15a>
            }
            else
            {
                // device_ProcessDataIn_arr[OP_ISDU_IN_PROCESSDATALENGTH - 2] = ProcessDataIn_cnt++; // Test cnt Value 
                device_ProcessDataIn_arr[OP_ISDU_IN_PROCESSDATALENGTH - 2] = ProcessDataIn_cnt; // Test cnt Value 
 80019ca:	4b64      	ldr	r3, [pc, #400]	@ (8001b5c <IOL_State_OP+0x278>)
 80019cc:	781a      	ldrb	r2, [r3, #0]
 80019ce:	4b60      	ldr	r3, [pc, #384]	@ (8001b50 <IOL_State_OP+0x26c>)
 80019d0:	715a      	strb	r2, [r3, #5]
                device_ProcessDataIn_arr[OP_ISDU_IN_PROCESSDATALENGTH - 1] = PreOP_CKS_GetChecksum(&device_ProcessDataIn_arr[0], (OP_ISDU_IN_PROCESSDATALENGTH - 1), 0);
 80019d2:	2200      	movs	r2, #0
 80019d4:	2106      	movs	r1, #6
 80019d6:	485e      	ldr	r0, [pc, #376]	@ (8001b50 <IOL_State_OP+0x26c>)
 80019d8:	f7ff fe16 	bl	8001608 <PreOP_CKS_GetChecksum>
 80019dc:	4603      	mov	r3, r0
 80019de:	461a      	mov	r2, r3
 80019e0:	4b5b      	ldr	r3, [pc, #364]	@ (8001b50 <IOL_State_OP+0x26c>)
 80019e2:	719a      	strb	r2, [r3, #6]
 80019e4:	e02b      	b.n	8001a3e <IOL_State_OP+0x15a>
            }
        }
        else if (IOL_Commchannel_value == IOL_Channel_Page)
 80019e6:	79bb      	ldrb	r3, [r7, #6]
 80019e8:	2b01      	cmp	r3, #1
 80019ea:	d128      	bne.n	8001a3e <IOL_State_OP+0x15a>
        {
            IOL_ConnectToIFM_ReadDP();
 80019ec:	f7ff ff46 	bl	800187c <IOL_ConnectToIFM_ReadDP>

            device_ProcessDataIn_arr[0] = IOL_ISDUPage_value[IOL_OP_OD_Res_cnt];
 80019f0:	4b55      	ldr	r3, [pc, #340]	@ (8001b48 <IOL_State_OP+0x264>)
 80019f2:	781b      	ldrb	r3, [r3, #0]
 80019f4:	461a      	mov	r2, r3
 80019f6:	4b5a      	ldr	r3, [pc, #360]	@ (8001b60 <IOL_State_OP+0x27c>)
 80019f8:	5c9a      	ldrb	r2, [r3, r2]
 80019fa:	4b55      	ldr	r3, [pc, #340]	@ (8001b50 <IOL_State_OP+0x26c>)
 80019fc:	701a      	strb	r2, [r3, #0]
            device_ProcessDataIn_arr[1] = IOL_ISDUPage_value[IOL_OP_OD_Res_cnt + 1];
 80019fe:	4b52      	ldr	r3, [pc, #328]	@ (8001b48 <IOL_State_OP+0x264>)
 8001a00:	781b      	ldrb	r3, [r3, #0]
 8001a02:	3301      	adds	r3, #1
 8001a04:	4a56      	ldr	r2, [pc, #344]	@ (8001b60 <IOL_State_OP+0x27c>)
 8001a06:	5cd2      	ldrb	r2, [r2, r3]
 8001a08:	4b51      	ldr	r3, [pc, #324]	@ (8001b50 <IOL_State_OP+0x26c>)
 8001a0a:	705a      	strb	r2, [r3, #1]
            IOL_OP_OD_Res_cnt++;
 8001a0c:	4b4e      	ldr	r3, [pc, #312]	@ (8001b48 <IOL_State_OP+0x264>)
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	3301      	adds	r3, #1
 8001a12:	b2da      	uxtb	r2, r3
 8001a14:	4b4c      	ldr	r3, [pc, #304]	@ (8001b48 <IOL_State_OP+0x264>)
 8001a16:	701a      	strb	r2, [r3, #0]

            if (IOL_OP_OD_Res_cnt >= 16)
 8001a18:	4b4b      	ldr	r3, [pc, #300]	@ (8001b48 <IOL_State_OP+0x264>)
 8001a1a:	781b      	ldrb	r3, [r3, #0]
 8001a1c:	2b0f      	cmp	r3, #15
 8001a1e:	d905      	bls.n	8001a2c <IOL_State_OP+0x148>
            {
                IOL_OP_PD_Req_SerialNumber_Chkpdu = 0;
 8001a20:	4b4c      	ldr	r3, [pc, #304]	@ (8001b54 <IOL_State_OP+0x270>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	701a      	strb	r2, [r3, #0]
                IOL_OP_OD_Res_cnt = 0;
 8001a26:	4b48      	ldr	r3, [pc, #288]	@ (8001b48 <IOL_State_OP+0x264>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	701a      	strb	r2, [r3, #0]
            }

            device_ProcessDataIn_arr[OP_ISDU_IN_PROCESSDATALENGTH - 1] = PreOP_CKS_GetChecksum(&device_ProcessDataIn_arr[0], (OP_ISDU_IN_PROCESSDATALENGTH - 1), 0);
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	2106      	movs	r1, #6
 8001a30:	4847      	ldr	r0, [pc, #284]	@ (8001b50 <IOL_State_OP+0x26c>)
 8001a32:	f7ff fde9 	bl	8001608 <PreOP_CKS_GetChecksum>
 8001a36:	4603      	mov	r3, r0
 8001a38:	461a      	mov	r2, r3
 8001a3a:	4b45      	ldr	r3, [pc, #276]	@ (8001b50 <IOL_State_OP+0x26c>)
 8001a3c:	719a      	strb	r2, [r3, #6]
        }

        IOL_ENABLE;
 8001a3e:	2201      	movs	r2, #1
 8001a40:	2140      	movs	r1, #64	@ 0x40
 8001a42:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a46:	f001 f89f 	bl	8002b88 <HAL_GPIO_WritePin>
        if (HAL_UART_Transmit_IT(&huart1, device_ProcessDataIn_arr, OP_ISDU_IN_PROCESSDATALENGTH) != HAL_OK)
 8001a4a:	2207      	movs	r2, #7
 8001a4c:	4940      	ldr	r1, [pc, #256]	@ (8001b50 <IOL_State_OP+0x26c>)
 8001a4e:	4845      	ldr	r0, [pc, #276]	@ (8001b64 <IOL_State_OP+0x280>)
 8001a50:	f004 fb46 	bl	80060e0 <HAL_UART_Transmit_IT>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d06e      	beq.n	8001b38 <IOL_State_OP+0x254>
        {
            Error_Handler();
 8001a5a:	f7fe ffde 	bl	8000a1a <Error_Handler>
        if (HAL_UART_Transmit_IT(&huart1, device_ProcessDataOut_arr, OP_ISDU_OUT_PROCESSDATALENGTH) != HAL_OK)
        {
            Error_Handler();
        }
    }
}
 8001a5e:	e06b      	b.n	8001b38 <IOL_State_OP+0x254>
    else if (IOL_PreOP_ReadWriteCheck() == IOL_RW_Write)
 8001a60:	f7ff fdb8 	bl	80015d4 <IOL_PreOP_ReadWriteCheck>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d166      	bne.n	8001b38 <IOL_State_OP+0x254>
        if (IOL_Commchannel_value == IOL_Channel_ISDU)
 8001a6a:	79bb      	ldrb	r3, [r7, #6]
 8001a6c:	2b03      	cmp	r3, #3
 8001a6e:	d143      	bne.n	8001af8 <IOL_State_OP+0x214>
            if (uart1_rx_IDLE_buf[OP_ISDU_IN_PROCESSDATALENGTH - 1] == 0x93) // ISDU Req
 8001a70:	4b33      	ldr	r3, [pc, #204]	@ (8001b40 <IOL_State_OP+0x25c>)
 8001a72:	799b      	ldrb	r3, [r3, #6]
 8001a74:	2b93      	cmp	r3, #147	@ 0x93
 8001a76:	d118      	bne.n	8001aaa <IOL_State_OP+0x1c6>
                if (uart1_rx_IDLE_buf[OP_ISDU_IN_PROCESSDATALENGTH] == 0x12) // Index : 18.  Product Name
 8001a78:	4b31      	ldr	r3, [pc, #196]	@ (8001b40 <IOL_State_OP+0x25c>)
 8001a7a:	79db      	ldrb	r3, [r3, #7]
 8001a7c:	2b12      	cmp	r3, #18
 8001a7e:	d103      	bne.n	8001a88 <IOL_State_OP+0x1a4>
                    IOL_OP_PD_Req_ProductName = 1;
 8001a80:	4b39      	ldr	r3, [pc, #228]	@ (8001b68 <IOL_State_OP+0x284>)
 8001a82:	2201      	movs	r2, #1
 8001a84:	701a      	strb	r2, [r3, #0]
 8001a86:	e006      	b.n	8001a96 <IOL_State_OP+0x1b2>
                else if (uart1_rx_IDLE_buf[OP_ISDU_IN_PROCESSDATALENGTH] == 0x15) // Index : 20. Serial number
 8001a88:	4b2d      	ldr	r3, [pc, #180]	@ (8001b40 <IOL_State_OP+0x25c>)
 8001a8a:	79db      	ldrb	r3, [r3, #7]
 8001a8c:	2b15      	cmp	r3, #21
 8001a8e:	d102      	bne.n	8001a96 <IOL_State_OP+0x1b2>
                    IOL_OP_PD_Req_SerialNumber = 1;
 8001a90:	4b36      	ldr	r3, [pc, #216]	@ (8001b6c <IOL_State_OP+0x288>)
 8001a92:	2201      	movs	r2, #1
 8001a94:	701a      	strb	r2, [r3, #0]
                device_ProcessDataOut_arr[OP_ISDU_OUT_PROCESSDATALENGTH - 1] = PreOP_CKS_GetChecksum(&device_ProcessDataOut_arr[0], OP_ISDU_OUT_PROCESSDATALENGTH - 1, 0);
 8001a96:	2200      	movs	r2, #0
 8001a98:	2104      	movs	r1, #4
 8001a9a:	4835      	ldr	r0, [pc, #212]	@ (8001b70 <IOL_State_OP+0x28c>)
 8001a9c:	f7ff fdb4 	bl	8001608 <PreOP_CKS_GetChecksum>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	461a      	mov	r2, r3
 8001aa4:	4b32      	ldr	r3, [pc, #200]	@ (8001b70 <IOL_State_OP+0x28c>)
 8001aa6:	711a      	strb	r2, [r3, #4]
 8001aa8:	e036      	b.n	8001b18 <IOL_State_OP+0x234>
                if ((uart1_rx_IDLE_buf[OP_ISDU_IN_PROCESSDATALENGTH - 1] == 0x81) && (IOL_OP_PD_Req_ProductName == 1))   // Product Name CHKPDU 0x81 0x00 .
 8001aaa:	4b25      	ldr	r3, [pc, #148]	@ (8001b40 <IOL_State_OP+0x25c>)
 8001aac:	799b      	ldrb	r3, [r3, #6]
 8001aae:	2b81      	cmp	r3, #129	@ 0x81
 8001ab0:	d10a      	bne.n	8001ac8 <IOL_State_OP+0x1e4>
 8001ab2:	4b2d      	ldr	r3, [pc, #180]	@ (8001b68 <IOL_State_OP+0x284>)
 8001ab4:	781b      	ldrb	r3, [r3, #0]
 8001ab6:	2b01      	cmp	r3, #1
 8001ab8:	d106      	bne.n	8001ac8 <IOL_State_OP+0x1e4>
                    IOL_OP_PD_Req_ProductName = 0;
 8001aba:	4b2b      	ldr	r3, [pc, #172]	@ (8001b68 <IOL_State_OP+0x284>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	701a      	strb	r2, [r3, #0]
                    IOL_OP_PD_Req_ProductName_Chkpdu = 1;
 8001ac0:	4b20      	ldr	r3, [pc, #128]	@ (8001b44 <IOL_State_OP+0x260>)
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	701a      	strb	r2, [r3, #0]
 8001ac6:	e00d      	b.n	8001ae4 <IOL_State_OP+0x200>
                else if ((uart1_rx_IDLE_buf[OP_ISDU_IN_PROCESSDATALENGTH - 1] == 0x86) && (IOL_OP_PD_Req_SerialNumber == 1))   // Serial Number CHKPDU 0x86 0x00 .
 8001ac8:	4b1d      	ldr	r3, [pc, #116]	@ (8001b40 <IOL_State_OP+0x25c>)
 8001aca:	799b      	ldrb	r3, [r3, #6]
 8001acc:	2b86      	cmp	r3, #134	@ 0x86
 8001ace:	d109      	bne.n	8001ae4 <IOL_State_OP+0x200>
 8001ad0:	4b26      	ldr	r3, [pc, #152]	@ (8001b6c <IOL_State_OP+0x288>)
 8001ad2:	781b      	ldrb	r3, [r3, #0]
 8001ad4:	2b01      	cmp	r3, #1
 8001ad6:	d105      	bne.n	8001ae4 <IOL_State_OP+0x200>
                    IOL_OP_PD_Req_SerialNumber = 0;
 8001ad8:	4b24      	ldr	r3, [pc, #144]	@ (8001b6c <IOL_State_OP+0x288>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	701a      	strb	r2, [r3, #0]
                    IOL_OP_PD_Req_SerialNumber_Chkpdu = 1;
 8001ade:	4b1d      	ldr	r3, [pc, #116]	@ (8001b54 <IOL_State_OP+0x270>)
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	701a      	strb	r2, [r3, #0]
                device_ProcessDataOut_arr[OP_ISDU_OUT_PROCESSDATALENGTH - 1] = PreOP_CKS_GetChecksum(&device_ProcessDataOut_arr[0], OP_ISDU_OUT_PROCESSDATALENGTH - 1, 0);
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	2104      	movs	r1, #4
 8001ae8:	4821      	ldr	r0, [pc, #132]	@ (8001b70 <IOL_State_OP+0x28c>)
 8001aea:	f7ff fd8d 	bl	8001608 <PreOP_CKS_GetChecksum>
 8001aee:	4603      	mov	r3, r0
 8001af0:	461a      	mov	r2, r3
 8001af2:	4b1f      	ldr	r3, [pc, #124]	@ (8001b70 <IOL_State_OP+0x28c>)
 8001af4:	711a      	strb	r2, [r3, #4]
 8001af6:	e00f      	b.n	8001b18 <IOL_State_OP+0x234>
        else if (IOL_Commchannel_value == IOL_Channel_Page)  // Page Write.
 8001af8:	79bb      	ldrb	r3, [r7, #6]
 8001afa:	2b01      	cmp	r3, #1
 8001afc:	d10c      	bne.n	8001b18 <IOL_State_OP+0x234>
            if (uart1_rx_IDLE_buf[OP_ISDU_IN_PROCESSDATALENGTH - 1] == 0x98) // Master Command - ProcessDataOutputOperatre.
 8001afe:	4b10      	ldr	r3, [pc, #64]	@ (8001b40 <IOL_State_OP+0x25c>)
 8001b00:	799b      	ldrb	r3, [r3, #6]
 8001b02:	2b98      	cmp	r3, #152	@ 0x98
 8001b04:	d108      	bne.n	8001b18 <IOL_State_OP+0x234>
                device_ProcessDataOut_arr[OP_ISDU_OUT_PROCESSDATALENGTH - 1] = PreOP_CKS_GetChecksum(&device_ProcessDataOut_arr[0], OP_ISDU_OUT_PROCESSDATALENGTH - 1, 0);
 8001b06:	2200      	movs	r2, #0
 8001b08:	2104      	movs	r1, #4
 8001b0a:	4819      	ldr	r0, [pc, #100]	@ (8001b70 <IOL_State_OP+0x28c>)
 8001b0c:	f7ff fd7c 	bl	8001608 <PreOP_CKS_GetChecksum>
 8001b10:	4603      	mov	r3, r0
 8001b12:	461a      	mov	r2, r3
 8001b14:	4b16      	ldr	r3, [pc, #88]	@ (8001b70 <IOL_State_OP+0x28c>)
 8001b16:	711a      	strb	r2, [r3, #4]
        IOL_ENABLE;
 8001b18:	2201      	movs	r2, #1
 8001b1a:	2140      	movs	r1, #64	@ 0x40
 8001b1c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b20:	f001 f832 	bl	8002b88 <HAL_GPIO_WritePin>
        if (HAL_UART_Transmit_IT(&huart1, device_ProcessDataOut_arr, OP_ISDU_OUT_PROCESSDATALENGTH) != HAL_OK)
 8001b24:	2205      	movs	r2, #5
 8001b26:	4912      	ldr	r1, [pc, #72]	@ (8001b70 <IOL_State_OP+0x28c>)
 8001b28:	480e      	ldr	r0, [pc, #56]	@ (8001b64 <IOL_State_OP+0x280>)
 8001b2a:	f004 fad9 	bl	80060e0 <HAL_UART_Transmit_IT>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d001      	beq.n	8001b38 <IOL_State_OP+0x254>
            Error_Handler();
 8001b34:	f7fe ff71 	bl	8000a1a <Error_Handler>
}
 8001b38:	bf00      	nop
 8001b3a:	3708      	adds	r7, #8
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	20000a7c 	.word	0x20000a7c
 8001b44:	20000aff 	.word	0x20000aff
 8001b48:	20000b01 	.word	0x20000b01
 8001b4c:	20000054 	.word	0x20000054
 8001b50:	20000af0 	.word	0x20000af0
 8001b54:	20000b00 	.word	0x20000b00
 8001b58:	20000084 	.word	0x20000084
 8001b5c:	200002a4 	.word	0x200002a4
 8001b60:	20000ae0 	.word	0x20000ae0
 8001b64:	20000f34 	.word	0x20000f34
 8001b68:	20000afd 	.word	0x20000afd
 8001b6c:	20000afe 	.word	0x20000afe
 8001b70:	20000af8 	.word	0x20000af8

08001b74 <IOL_State_PreOP>:

// if (stateIOLseq == IOL_PreOP)
void IOL_State_PreOP (void)
{
 8001b74:	b590      	push	{r4, r7, lr}
 8001b76:	b083      	sub	sp, #12
 8001b78:	af00      	add	r7, sp, #0
    uint8_t i, j = 0;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	71bb      	strb	r3, [r7, #6]
    uint8_t IOL_Commchannel_value = 0;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	717b      	strb	r3, [r7, #5]
    static uint8_t preop_data_arr[PREOP_DATA_LENGTH + 1] = {0}; // + 1   CKS 
    // uint8_t Page_Write_ChecksumValue[0] = {0};

    IOL_Commchannel_value = Print_MC_CommunicationChannel(uart1_rx_IDLE_buf[0]);
 8001b82:	4b4b      	ldr	r3, [pc, #300]	@ (8001cb0 <IOL_State_PreOP+0x13c>)
 8001b84:	781b      	ldrb	r3, [r3, #0]
 8001b86:	4618      	mov	r0, r3
 8001b88:	f000 f952 	bl	8001e30 <Print_MC_CommunicationChannel>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	717b      	strb	r3, [r7, #5]
    // uint8_t Page_Write_ChecksumValue[1] = {0};

    if (IOL_PreOP_ReadWriteCheck() == IOL_RW_Read)
 8001b90:	f7ff fd20 	bl	80015d4 <IOL_PreOP_ReadWriteCheck>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b01      	cmp	r3, #1
 8001b98:	d151      	bne.n	8001c3e <IOL_State_PreOP+0xca>
    {
        for (i=0; i < PREOP_DATA_LENGTH; i++)
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	71fb      	strb	r3, [r7, #7]
 8001b9e:	e00e      	b.n	8001bbe <IOL_State_PreOP+0x4a>
        {
            preop_data_arr[i]= IOL_PreOP_Packet[PreOP_seq_cnt][i];
 8001ba0:	4b44      	ldr	r3, [pc, #272]	@ (8001cb4 <IOL_State_PreOP+0x140>)
 8001ba2:	781b      	ldrb	r3, [r3, #0]
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	79fa      	ldrb	r2, [r7, #7]
 8001ba8:	79fb      	ldrb	r3, [r7, #7]
 8001baa:	4843      	ldr	r0, [pc, #268]	@ (8001cb8 <IOL_State_PreOP+0x144>)
 8001bac:	00c9      	lsls	r1, r1, #3
 8001bae:	4401      	add	r1, r0
 8001bb0:	440a      	add	r2, r1
 8001bb2:	7811      	ldrb	r1, [r2, #0]
 8001bb4:	4a41      	ldr	r2, [pc, #260]	@ (8001cbc <IOL_State_PreOP+0x148>)
 8001bb6:	54d1      	strb	r1, [r2, r3]
        for (i=0; i < PREOP_DATA_LENGTH; i++)
 8001bb8:	79fb      	ldrb	r3, [r7, #7]
 8001bba:	3301      	adds	r3, #1
 8001bbc:	71fb      	strb	r3, [r7, #7]
 8001bbe:	79fb      	ldrb	r3, [r7, #7]
 8001bc0:	2b07      	cmp	r3, #7
 8001bc2:	d9ed      	bls.n	8001ba0 <IOL_State_PreOP+0x2c>
        }

        // PreOP Mode에서 Diagnosis 는 Event flag 있음 PreOP_CKS_GetChecksum 함수의 3번째 인자 1 = event set, 0 = event reset.
        if (IOL_Commchannel_value == IOL_Channel_Diagnosis)
 8001bc4:	797b      	ldrb	r3, [r7, #5]
 8001bc6:	2b02      	cmp	r3, #2
 8001bc8:	d10a      	bne.n	8001be0 <IOL_State_PreOP+0x6c>
        {
            preop_data_arr[i] = PreOP_CKS_GetChecksum(&preop_data_arr[0], PREOP_DATA_LENGTH, 1);
 8001bca:	79fc      	ldrb	r4, [r7, #7]
 8001bcc:	2201      	movs	r2, #1
 8001bce:	2108      	movs	r1, #8
 8001bd0:	483a      	ldr	r0, [pc, #232]	@ (8001cbc <IOL_State_PreOP+0x148>)
 8001bd2:	f7ff fd19 	bl	8001608 <PreOP_CKS_GetChecksum>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	461a      	mov	r2, r3
 8001bda:	4b38      	ldr	r3, [pc, #224]	@ (8001cbc <IOL_State_PreOP+0x148>)
 8001bdc:	551a      	strb	r2, [r3, r4]
 8001bde:	e017      	b.n	8001c10 <IOL_State_PreOP+0x9c>
        }
        else if (IOL_Commchannel_value == IOL_Channel_ISDU)
 8001be0:	797b      	ldrb	r3, [r7, #5]
 8001be2:	2b03      	cmp	r3, #3
 8001be4:	d10a      	bne.n	8001bfc <IOL_State_PreOP+0x88>
        {
            preop_data_arr[i] = PreOP_CKS_GetChecksum(&preop_data_arr[0], PREOP_DATA_LENGTH, 0);
 8001be6:	79fc      	ldrb	r4, [r7, #7]
 8001be8:	2200      	movs	r2, #0
 8001bea:	2108      	movs	r1, #8
 8001bec:	4833      	ldr	r0, [pc, #204]	@ (8001cbc <IOL_State_PreOP+0x148>)
 8001bee:	f7ff fd0b 	bl	8001608 <PreOP_CKS_GetChecksum>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	461a      	mov	r2, r3
 8001bf6:	4b31      	ldr	r3, [pc, #196]	@ (8001cbc <IOL_State_PreOP+0x148>)
 8001bf8:	551a      	strb	r2, [r3, r4]
 8001bfa:	e009      	b.n	8001c10 <IOL_State_PreOP+0x9c>
        }
        else
        {
            preop_data_arr[i] = PreOP_CKS_GetChecksum(&preop_data_arr[0], PREOP_DATA_LENGTH, 0);
 8001bfc:	79fc      	ldrb	r4, [r7, #7]
 8001bfe:	2200      	movs	r2, #0
 8001c00:	2108      	movs	r1, #8
 8001c02:	482e      	ldr	r0, [pc, #184]	@ (8001cbc <IOL_State_PreOP+0x148>)
 8001c04:	f7ff fd00 	bl	8001608 <PreOP_CKS_GetChecksum>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	461a      	mov	r2, r3
 8001c0c:	4b2b      	ldr	r3, [pc, #172]	@ (8001cbc <IOL_State_PreOP+0x148>)
 8001c0e:	551a      	strb	r2, [r3, r4]
        }
        
        PreOP_seq_cnt++;
 8001c10:	4b28      	ldr	r3, [pc, #160]	@ (8001cb4 <IOL_State_PreOP+0x140>)
 8001c12:	781b      	ldrb	r3, [r3, #0]
 8001c14:	3301      	adds	r3, #1
 8001c16:	b2da      	uxtb	r2, r3
 8001c18:	4b26      	ldr	r3, [pc, #152]	@ (8001cb4 <IOL_State_PreOP+0x140>)
 8001c1a:	701a      	strb	r2, [r3, #0]

        IOL_ENABLE;
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	2140      	movs	r1, #64	@ 0x40
 8001c20:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c24:	f000 ffb0 	bl	8002b88 <HAL_GPIO_WritePin>
        if (HAL_UART_Transmit_IT(&huart1, preop_data_arr, 9) != HAL_OK)
 8001c28:	2209      	movs	r2, #9
 8001c2a:	4924      	ldr	r1, [pc, #144]	@ (8001cbc <IOL_State_PreOP+0x148>)
 8001c2c:	4824      	ldr	r0, [pc, #144]	@ (8001cc0 <IOL_State_PreOP+0x14c>)
 8001c2e:	f004 fa57 	bl	80060e0 <HAL_UART_Transmit_IT>
 8001c32:	4603      	mov	r3, r0
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d037      	beq.n	8001ca8 <IOL_State_PreOP+0x134>
        {
            Error_Handler();
 8001c38:	f7fe feef 	bl	8000a1a <Error_Handler>
        if (HAL_UART_Transmit_IT(&huart1, (uint8_t *) preop_data_arr, 1) != HAL_OK)
        {
            Error_Handler();
        }
    }
}
 8001c3c:	e034      	b.n	8001ca8 <IOL_State_PreOP+0x134>
    else if (IOL_PreOP_ReadWriteCheck() == IOL_RW_Write)
 8001c3e:	f7ff fcc9 	bl	80015d4 <IOL_PreOP_ReadWriteCheck>
 8001c42:	4603      	mov	r3, r0
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d12f      	bne.n	8001ca8 <IOL_State_PreOP+0x134>
        if ((IOL_Commchannel_value == IOL_Channel_Diagnosis) || (IOL_Commchannel_value == IOL_Channel_ISDU))
 8001c48:	797b      	ldrb	r3, [r7, #5]
 8001c4a:	2b02      	cmp	r3, #2
 8001c4c:	d002      	beq.n	8001c54 <IOL_State_PreOP+0xe0>
 8001c4e:	797b      	ldrb	r3, [r7, #5]
 8001c50:	2b03      	cmp	r3, #3
 8001c52:	d109      	bne.n	8001c68 <IOL_State_PreOP+0xf4>
            preop_data_arr[0] = PreOP_CKS_GetChecksum(&preop_data_arr[0], 0, 1);
 8001c54:	2201      	movs	r2, #1
 8001c56:	2100      	movs	r1, #0
 8001c58:	4818      	ldr	r0, [pc, #96]	@ (8001cbc <IOL_State_PreOP+0x148>)
 8001c5a:	f7ff fcd5 	bl	8001608 <PreOP_CKS_GetChecksum>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	461a      	mov	r2, r3
 8001c62:	4b16      	ldr	r3, [pc, #88]	@ (8001cbc <IOL_State_PreOP+0x148>)
 8001c64:	701a      	strb	r2, [r3, #0]
 8001c66:	e00f      	b.n	8001c88 <IOL_State_PreOP+0x114>
            preop_data_arr[0] = PreOP_CKS_GetChecksum(&preop_data_arr[0], 0, 0);
 8001c68:	2200      	movs	r2, #0
 8001c6a:	2100      	movs	r1, #0
 8001c6c:	4813      	ldr	r0, [pc, #76]	@ (8001cbc <IOL_State_PreOP+0x148>)
 8001c6e:	f7ff fccb 	bl	8001608 <PreOP_CKS_GetChecksum>
 8001c72:	4603      	mov	r3, r0
 8001c74:	461a      	mov	r2, r3
 8001c76:	4b11      	ldr	r3, [pc, #68]	@ (8001cbc <IOL_State_PreOP+0x148>)
 8001c78:	701a      	strb	r2, [r3, #0]
            if(uart1_rx_IDLE_buf[2] == 0x99)
 8001c7a:	4b0d      	ldr	r3, [pc, #52]	@ (8001cb0 <IOL_State_PreOP+0x13c>)
 8001c7c:	789b      	ldrb	r3, [r3, #2]
 8001c7e:	2b99      	cmp	r3, #153	@ 0x99
 8001c80:	d102      	bne.n	8001c88 <IOL_State_PreOP+0x114>
                stateIOLseq = IOL_OP;
 8001c82:	4b10      	ldr	r3, [pc, #64]	@ (8001cc4 <IOL_State_PreOP+0x150>)
 8001c84:	2202      	movs	r2, #2
 8001c86:	701a      	strb	r2, [r3, #0]
        IOL_ENABLE;
 8001c88:	2201      	movs	r2, #1
 8001c8a:	2140      	movs	r1, #64	@ 0x40
 8001c8c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c90:	f000 ff7a 	bl	8002b88 <HAL_GPIO_WritePin>
        if (HAL_UART_Transmit_IT(&huart1, (uint8_t *) preop_data_arr, 1) != HAL_OK)
 8001c94:	2201      	movs	r2, #1
 8001c96:	4909      	ldr	r1, [pc, #36]	@ (8001cbc <IOL_State_PreOP+0x148>)
 8001c98:	4809      	ldr	r0, [pc, #36]	@ (8001cc0 <IOL_State_PreOP+0x14c>)
 8001c9a:	f004 fa21 	bl	80060e0 <HAL_UART_Transmit_IT>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d001      	beq.n	8001ca8 <IOL_State_PreOP+0x134>
            Error_Handler();
 8001ca4:	f7fe feb9 	bl	8000a1a <Error_Handler>
}
 8001ca8:	bf00      	nop
 8001caa:	370c      	adds	r7, #12
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd90      	pop	{r4, r7, pc}
 8001cb0:	20000a7c 	.word	0x20000a7c
 8001cb4:	20000b07 	.word	0x20000b07
 8001cb8:	20000014 	.word	0x20000014
 8001cbc:	20000b08 	.word	0x20000b08
 8001cc0:	20000f34 	.word	0x20000f34
 8001cc4:	20000fd8 	.word	0x20000fd8

08001cc8 <IOL_StartUp_Seq_Page>:
        
    }
}

void IOL_StartUp_Seq_Page (uint16_t size)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b084      	sub	sp, #16
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	4603      	mov	r3, r0
 8001cd0:	80fb      	strh	r3, [r7, #6]
    uint8_t rxdataSize = 0;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	73fb      	strb	r3, [r7, #15]
    uint8_t eventdebug = 0;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	73bb      	strb	r3, [r7, #14]
    uint8_t Page_Write_ChecksumValue[0] = {0};
    
    rxdataSize = (uint8_t)size;
 8001cda:	88fb      	ldrh	r3, [r7, #6]
 8001cdc:	73fb      	strb	r3, [r7, #15]

    // State = StartUP ,   Channel = Page인지 구분
    if ((stateIOLseq == IOL_StartUp) && (Print_MC_CommunicationChannel(uart1_rx_IDLE_buf[0]) == IOL_Channel_Page))
 8001cde:	4b3d      	ldr	r3, [pc, #244]	@ (8001dd4 <IOL_StartUp_Seq_Page+0x10c>)
 8001ce0:	781b      	ldrb	r3, [r3, #0]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d15b      	bne.n	8001d9e <IOL_StartUp_Seq_Page+0xd6>
 8001ce6:	4b3c      	ldr	r3, [pc, #240]	@ (8001dd8 <IOL_StartUp_Seq_Page+0x110>)
 8001ce8:	781b      	ldrb	r3, [r3, #0]
 8001cea:	4618      	mov	r0, r3
 8001cec:	f000 f8a0 	bl	8001e30 <Print_MC_CommunicationChannel>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b01      	cmp	r3, #1
 8001cf4:	d153      	bne.n	8001d9e <IOL_StartUp_Seq_Page+0xd6>
    {
        // R/W   Read 체크
        if (Decode_MC_ReadWrite(uart1_rx_IDLE_buf[0]) == IOL_RW_Read)
 8001cf6:	4b38      	ldr	r3, [pc, #224]	@ (8001dd8 <IOL_StartUp_Seq_Page+0x110>)
 8001cf8:	781b      	ldrb	r3, [r3, #0]
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f000 f87a 	bl	8001df4 <Decode_MC_ReadWrite>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b01      	cmp	r3, #1
 8001d04:	d123      	bne.n	8001d4e <IOL_StartUp_Seq_Page+0x86>
        {
            
            IOL_Page1_Packet[0] = IOL_Page1_SeqValue[Page1_seq++];
 8001d06:	4b35      	ldr	r3, [pc, #212]	@ (8001ddc <IOL_StartUp_Seq_Page+0x114>)
 8001d08:	781b      	ldrb	r3, [r3, #0]
 8001d0a:	1c5a      	adds	r2, r3, #1
 8001d0c:	b2d1      	uxtb	r1, r2
 8001d0e:	4a33      	ldr	r2, [pc, #204]	@ (8001ddc <IOL_StartUp_Seq_Page+0x114>)
 8001d10:	7011      	strb	r1, [r2, #0]
 8001d12:	461a      	mov	r2, r3
 8001d14:	4b32      	ldr	r3, [pc, #200]	@ (8001de0 <IOL_StartUp_Seq_Page+0x118>)
 8001d16:	5c9a      	ldrb	r2, [r3, r2]
 8001d18:	4b32      	ldr	r3, [pc, #200]	@ (8001de4 <IOL_StartUp_Seq_Page+0x11c>)
 8001d1a:	701a      	strb	r2, [r3, #0]

            // IOL_Page1_Packet[1] = Decode_CKS_GetChecksum(IOL_Page1_Packet[0], 1);
            IOL_Page1_Packet[1] = Decode_CKS_GetChecksum(&IOL_Page1_Packet[0], 1);
 8001d1c:	2101      	movs	r1, #1
 8001d1e:	4831      	ldr	r0, [pc, #196]	@ (8001de4 <IOL_StartUp_Seq_Page+0x11c>)
 8001d20:	f7ff fbc6 	bl	80014b0 <Decode_CKS_GetChecksum>
 8001d24:	4603      	mov	r3, r0
 8001d26:	461a      	mov	r2, r3
 8001d28:	4b2e      	ldr	r3, [pc, #184]	@ (8001de4 <IOL_StartUp_Seq_Page+0x11c>)
 8001d2a:	705a      	strb	r2, [r3, #1]

            IOL_ENABLE;
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	2140      	movs	r1, #64	@ 0x40
 8001d30:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d34:	f000 ff28 	bl	8002b88 <HAL_GPIO_WritePin>
            if (HAL_UART_Transmit_IT(&huart1, (uint8_t *) IOL_Page1_Packet, 2) != HAL_OK)
 8001d38:	2202      	movs	r2, #2
 8001d3a:	492a      	ldr	r1, [pc, #168]	@ (8001de4 <IOL_StartUp_Seq_Page+0x11c>)
 8001d3c:	482a      	ldr	r0, [pc, #168]	@ (8001de8 <IOL_StartUp_Seq_Page+0x120>)
 8001d3e:	f004 f9cf 	bl	80060e0 <HAL_UART_Transmit_IT>
 8001d42:	4603      	mov	r3, r0
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d03b      	beq.n	8001dc0 <IOL_StartUp_Seq_Page+0xf8>
            {
                Error_Handler();
 8001d48:	f7fe fe67 	bl	8000a1a <Error_Handler>
        if (Decode_MC_ReadWrite(uart1_rx_IDLE_buf[0]) == IOL_RW_Read)
 8001d4c:	e038      	b.n	8001dc0 <IOL_StartUp_Seq_Page+0xf8>
            }
            // HAL_UART_Transmit(&huart1,(uint8_t *) IOL_Page1_Packet, 2, 10);
            // IOL_DISABLE;
        }
        // R/W   Write 체크
        else if (Decode_MC_ReadWrite(uart1_rx_IDLE_buf[0]) == IOL_RW_Write)
 8001d4e:	4b22      	ldr	r3, [pc, #136]	@ (8001dd8 <IOL_StartUp_Seq_Page+0x110>)
 8001d50:	781b      	ldrb	r3, [r3, #0]
 8001d52:	4618      	mov	r0, r3
 8001d54:	f000 f84e 	bl	8001df4 <Decode_MC_ReadWrite>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d130      	bne.n	8001dc0 <IOL_StartUp_Seq_Page+0xf8>
        {
            Page_Write_ChecksumValue[0] = Decode_CKS_GetChecksum(&IOL_Checksum_SeedValue, 0);
 8001d5e:	2100      	movs	r1, #0
 8001d60:	4822      	ldr	r0, [pc, #136]	@ (8001dec <IOL_StartUp_Seq_Page+0x124>)
 8001d62:	f7ff fba5 	bl	80014b0 <Decode_CKS_GetChecksum>
 8001d66:	4603      	mov	r3, r0
 8001d68:	733b      	strb	r3, [r7, #12]
            // if (HAL_UART_Transmit_IT(&huart1, (uint8_t *) Decode_CKS_GetChecksum(0x52, 0), 1) != HAL_OK)
            IOL_ENABLE;
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	2140      	movs	r1, #64	@ 0x40
 8001d6e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d72:	f000 ff09 	bl	8002b88 <HAL_GPIO_WritePin>
            if (HAL_UART_Transmit_IT(&huart1, (uint8_t *) Page_Write_ChecksumValue, 1) != HAL_OK)
 8001d76:	f107 030c 	add.w	r3, r7, #12
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	481a      	ldr	r0, [pc, #104]	@ (8001de8 <IOL_StartUp_Seq_Page+0x120>)
 8001d80:	f004 f9ae 	bl	80060e0 <HAL_UART_Transmit_IT>
 8001d84:	4603      	mov	r3, r0
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d001      	beq.n	8001d8e <IOL_StartUp_Seq_Page+0xc6>
            {
                Error_Handler();
 8001d8a:	f7fe fe46 	bl	8000a1a <Error_Handler>
            }

            //Master Command to PreOP.
            if (uart1_rx_IDLE_buf[2] == 0x9A)
 8001d8e:	4b12      	ldr	r3, [pc, #72]	@ (8001dd8 <IOL_StartUp_Seq_Page+0x110>)
 8001d90:	789b      	ldrb	r3, [r3, #2]
 8001d92:	2b9a      	cmp	r3, #154	@ 0x9a
 8001d94:	d114      	bne.n	8001dc0 <IOL_StartUp_Seq_Page+0xf8>
            {
                stateIOLseq = IOL_PreOP;
 8001d96:	4b0f      	ldr	r3, [pc, #60]	@ (8001dd4 <IOL_StartUp_Seq_Page+0x10c>)
 8001d98:	2201      	movs	r2, #1
 8001d9a:	701a      	strb	r2, [r3, #0]
        if (Decode_MC_ReadWrite(uart1_rx_IDLE_buf[0]) == IOL_RW_Read)
 8001d9c:	e010      	b.n	8001dc0 <IOL_StartUp_Seq_Page+0xf8>
            }
            
        }
    }
    // PreOperate Mode
    else if (stateIOLseq == IOL_PreOP)
 8001d9e:	4b0d      	ldr	r3, [pc, #52]	@ (8001dd4 <IOL_StartUp_Seq_Page+0x10c>)
 8001da0:	781b      	ldrb	r3, [r3, #0]
 8001da2:	2b01      	cmp	r3, #1
 8001da4:	d102      	bne.n	8001dac <IOL_StartUp_Seq_Page+0xe4>
    {
        IOL_State_PreOP();
 8001da6:	f7ff fee5 	bl	8001b74 <IOL_State_PreOP>
 8001daa:	e00a      	b.n	8001dc2 <IOL_StartUp_Seq_Page+0xfa>
    }
    // Operate Mode
    else if (stateIOLseq == IOL_OP)
 8001dac:	4b09      	ldr	r3, [pc, #36]	@ (8001dd4 <IOL_StartUp_Seq_Page+0x10c>)
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	2b02      	cmp	r3, #2
 8001db2:	d106      	bne.n	8001dc2 <IOL_StartUp_Seq_Page+0xfa>
    {
        IOL_Parse_Rx_data(uart1_rx_IDLE_buf);
 8001db4:	4808      	ldr	r0, [pc, #32]	@ (8001dd8 <IOL_StartUp_Seq_Page+0x110>)
 8001db6:	f7fe fc7d 	bl	80006b4 <IOL_Parse_Rx_data>
        IOL_State_OP();
 8001dba:	f7ff fd93 	bl	80018e4 <IOL_State_OP>
 8001dbe:	e000      	b.n	8001dc2 <IOL_StartUp_Seq_Page+0xfa>
        if (Decode_MC_ReadWrite(uart1_rx_IDLE_buf[0]) == IOL_RW_Read)
 8001dc0:	bf00      	nop
    }

    #if 1 // debug Test 
    Test_M2D_TempValue = uart1_rx_IDLE_buf[3];
 8001dc2:	4b05      	ldr	r3, [pc, #20]	@ (8001dd8 <IOL_StartUp_Seq_Page+0x110>)
 8001dc4:	78da      	ldrb	r2, [r3, #3]
 8001dc6:	4b0a      	ldr	r3, [pc, #40]	@ (8001df0 <IOL_StartUp_Seq_Page+0x128>)
 8001dc8:	701a      	strb	r2, [r3, #0]
    #endif
}
 8001dca:	bf00      	nop
 8001dcc:	3710      	adds	r7, #16
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	20000fd8 	.word	0x20000fd8
 8001dd8:	20000a7c 	.word	0x20000a7c
 8001ddc:	20000b06 	.word	0x20000b06
 8001de0:	20000004 	.word	0x20000004
 8001de4:	20000b04 	.word	0x20000b04
 8001de8:	20000f34 	.word	0x20000f34
 8001dec:	20000098 	.word	0x20000098
 8001df0:	20000b02 	.word	0x20000b02

08001df4 <Decode_MC_ReadWrite>:
    #endif
  }
}

static uint8_t Decode_MC_ReadWrite (uint8_t Data)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b085      	sub	sp, #20
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	71fb      	strb	r3, [r7, #7]
    uint8_t MCdata = 0;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	73fb      	strb	r3, [r7, #15]

    MCdata = Data;
 8001e02:	79fb      	ldrb	r3, [r7, #7]
 8001e04:	73fb      	strb	r3, [r7, #15]
    MCdata = (MCdata >> 7) & 0x01;
 8001e06:	7bfb      	ldrb	r3, [r7, #15]
 8001e08:	09db      	lsrs	r3, r3, #7
 8001e0a:	73fb      	strb	r3, [r7, #15]

    switch (MCdata)
 8001e0c:	7bfb      	ldrb	r3, [r7, #15]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d002      	beq.n	8001e18 <Decode_MC_ReadWrite+0x24>
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d002      	beq.n	8001e1c <Decode_MC_ReadWrite+0x28>
 8001e16:	e003      	b.n	8001e20 <Decode_MC_ReadWrite+0x2c>
    {
        case 0 :
            return IOL_RW_Write;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	e002      	b.n	8001e22 <Decode_MC_ReadWrite+0x2e>
        case 1 :
            return IOL_RW_Read;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	e000      	b.n	8001e22 <Decode_MC_ReadWrite+0x2e>
        default :
            // printf("Unexpected value\n");
            return 'X';
 8001e20:	2358      	movs	r3, #88	@ 0x58
    }
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	3714      	adds	r7, #20
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr
	...

08001e30 <Print_MC_CommunicationChannel>:

//     return MCdata & 0x03;
// }

static uint8_t Print_MC_CommunicationChannel (uint8_t Data)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b085      	sub	sp, #20
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	4603      	mov	r3, r0
 8001e38:	71fb      	strb	r3, [r7, #7]
    uint8_t MCdata = 0;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	73fb      	strb	r3, [r7, #15]

    MCdata = Data;
 8001e3e:	79fb      	ldrb	r3, [r7, #7]
 8001e40:	73fb      	strb	r3, [r7, #15]
    MCdata = (MCdata >> 5) & 0x03;
 8001e42:	7bfb      	ldrb	r3, [r7, #15]
 8001e44:	095b      	lsrs	r3, r3, #5
 8001e46:	b2db      	uxtb	r3, r3
 8001e48:	f003 0303 	and.w	r3, r3, #3
 8001e4c:	73fb      	strb	r3, [r7, #15]
    
    switch (MCdata)
 8001e4e:	7bfb      	ldrb	r3, [r7, #15]
 8001e50:	2b03      	cmp	r3, #3
 8001e52:	d813      	bhi.n	8001e7c <Print_MC_CommunicationChannel+0x4c>
 8001e54:	a201      	add	r2, pc, #4	@ (adr r2, 8001e5c <Print_MC_CommunicationChannel+0x2c>)
 8001e56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e5a:	bf00      	nop
 8001e5c:	08001e6d 	.word	0x08001e6d
 8001e60:	08001e71 	.word	0x08001e71
 8001e64:	08001e75 	.word	0x08001e75
 8001e68:	08001e79 	.word	0x08001e79
    {
        case 0 :
            // printf("%s,", CommunicationChannel.MC_Com_Ch_0);
            return IOL_Channel_Process;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	e005      	b.n	8001e7c <Print_MC_CommunicationChannel+0x4c>
        case 1 :
            // printf("%s,", CommunicationChannel.MC_Com_Ch_1);
            return IOL_Channel_Page;
 8001e70:	2301      	movs	r3, #1
 8001e72:	e003      	b.n	8001e7c <Print_MC_CommunicationChannel+0x4c>
        case 2 :
            // printf("%s,", CommunicationChannel.MC_Com_Ch_2);
            return IOL_Channel_Diagnosis;
 8001e74:	2302      	movs	r3, #2
 8001e76:	e001      	b.n	8001e7c <Print_MC_CommunicationChannel+0x4c>
        case 3 :
            // printf("%s,", CommunicationChannel.MC_Com_Ch_3);
            return IOL_Channel_ISDU;
 8001e78:	2303      	movs	r3, #3
 8001e7a:	e7ff      	b.n	8001e7c <Print_MC_CommunicationChannel+0x4c>
    }
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	3714      	adds	r7, #20
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr

08001e88 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001e88:	480d      	ldr	r0, [pc, #52]	@ (8001ec0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001e8a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001e8c:	f7ff f8ea 	bl	8001064 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e90:	480c      	ldr	r0, [pc, #48]	@ (8001ec4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001e92:	490d      	ldr	r1, [pc, #52]	@ (8001ec8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001e94:	4a0d      	ldr	r2, [pc, #52]	@ (8001ecc <LoopForever+0xe>)
  movs r3, #0
 8001e96:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001e98:	e002      	b.n	8001ea0 <LoopCopyDataInit>

08001e9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e9e:	3304      	adds	r3, #4

08001ea0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ea0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ea2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ea4:	d3f9      	bcc.n	8001e9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ea6:	4a0a      	ldr	r2, [pc, #40]	@ (8001ed0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ea8:	4c0a      	ldr	r4, [pc, #40]	@ (8001ed4 <LoopForever+0x16>)
  movs r3, #0
 8001eaa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001eac:	e001      	b.n	8001eb2 <LoopFillZerobss>

08001eae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001eae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001eb0:	3204      	adds	r2, #4

08001eb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001eb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001eb4:	d3fb      	bcc.n	8001eae <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8001eb6:	f00a f97d 	bl	800c1b4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001eba:	f7fe fd23 	bl	8000904 <main>

08001ebe <LoopForever>:

LoopForever:
    b LoopForever
 8001ebe:	e7fe      	b.n	8001ebe <LoopForever>
  ldr   r0, =_estack
 8001ec0:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001ec4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ec8:	20000278 	.word	0x20000278
  ldr r2, =_sidata
 8001ecc:	0800cf48 	.word	0x0800cf48
  ldr r2, =_sbss
 8001ed0:	20000278 	.word	0x20000278
  ldr r4, =_ebss
 8001ed4:	20002904 	.word	0x20002904

08001ed8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001ed8:	e7fe      	b.n	8001ed8 <ADC1_2_IRQHandler>

08001eda <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001eda:	b580      	push	{r7, lr}
 8001edc:	b082      	sub	sp, #8
 8001ede:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ee4:	2003      	movs	r0, #3
 8001ee6:	f000 f95b 	bl	80021a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001eea:	200f      	movs	r0, #15
 8001eec:	f000 f80e 	bl	8001f0c <HAL_InitTick>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d002      	beq.n	8001efc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	71fb      	strb	r3, [r7, #7]
 8001efa:	e001      	b.n	8001f00 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001efc:	f7fe feba 	bl	8000c74 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001f00:	79fb      	ldrb	r3, [r7, #7]

}
 8001f02:	4618      	mov	r0, r3
 8001f04:	3708      	adds	r7, #8
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
	...

08001f0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b084      	sub	sp, #16
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001f14:	2300      	movs	r3, #0
 8001f16:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001f18:	4b16      	ldr	r3, [pc, #88]	@ (8001f74 <HAL_InitTick+0x68>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d022      	beq.n	8001f66 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001f20:	4b15      	ldr	r3, [pc, #84]	@ (8001f78 <HAL_InitTick+0x6c>)
 8001f22:	681a      	ldr	r2, [r3, #0]
 8001f24:	4b13      	ldr	r3, [pc, #76]	@ (8001f74 <HAL_InitTick+0x68>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001f2c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f30:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f34:	4618      	mov	r0, r3
 8001f36:	f000 f966 	bl	8002206 <HAL_SYSTICK_Config>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d10f      	bne.n	8001f60 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2b0f      	cmp	r3, #15
 8001f44:	d809      	bhi.n	8001f5a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f46:	2200      	movs	r2, #0
 8001f48:	6879      	ldr	r1, [r7, #4]
 8001f4a:	f04f 30ff 	mov.w	r0, #4294967295
 8001f4e:	f000 f932 	bl	80021b6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001f52:	4a0a      	ldr	r2, [pc, #40]	@ (8001f7c <HAL_InitTick+0x70>)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6013      	str	r3, [r2, #0]
 8001f58:	e007      	b.n	8001f6a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	73fb      	strb	r3, [r7, #15]
 8001f5e:	e004      	b.n	8001f6a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001f60:	2301      	movs	r3, #1
 8001f62:	73fb      	strb	r3, [r7, #15]
 8001f64:	e001      	b.n	8001f6a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001f66:	2301      	movs	r3, #1
 8001f68:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001f6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	3710      	adds	r7, #16
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	200000a0 	.word	0x200000a0
 8001f78:	20000000 	.word	0x20000000
 8001f7c:	2000009c 	.word	0x2000009c

08001f80 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f80:	b480      	push	{r7}
 8001f82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f84:	4b05      	ldr	r3, [pc, #20]	@ (8001f9c <HAL_IncTick+0x1c>)
 8001f86:	681a      	ldr	r2, [r3, #0]
 8001f88:	4b05      	ldr	r3, [pc, #20]	@ (8001fa0 <HAL_IncTick+0x20>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4413      	add	r3, r2
 8001f8e:	4a03      	ldr	r2, [pc, #12]	@ (8001f9c <HAL_IncTick+0x1c>)
 8001f90:	6013      	str	r3, [r2, #0]
}
 8001f92:	bf00      	nop
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr
 8001f9c:	20001954 	.word	0x20001954
 8001fa0:	200000a0 	.word	0x200000a0

08001fa4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	af00      	add	r7, sp, #0
  return uwTick;
 8001fa8:	4b03      	ldr	r3, [pc, #12]	@ (8001fb8 <HAL_GetTick+0x14>)
 8001faa:	681b      	ldr	r3, [r3, #0]
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr
 8001fb6:	bf00      	nop
 8001fb8:	20001954 	.word	0x20001954

08001fbc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b084      	sub	sp, #16
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fc4:	f7ff ffee 	bl	8001fa4 <HAL_GetTick>
 8001fc8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fd4:	d004      	beq.n	8001fe0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001fd6:	4b09      	ldr	r3, [pc, #36]	@ (8001ffc <HAL_Delay+0x40>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	68fa      	ldr	r2, [r7, #12]
 8001fdc:	4413      	add	r3, r2
 8001fde:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001fe0:	bf00      	nop
 8001fe2:	f7ff ffdf 	bl	8001fa4 <HAL_GetTick>
 8001fe6:	4602      	mov	r2, r0
 8001fe8:	68bb      	ldr	r3, [r7, #8]
 8001fea:	1ad3      	subs	r3, r2, r3
 8001fec:	68fa      	ldr	r2, [r7, #12]
 8001fee:	429a      	cmp	r2, r3
 8001ff0:	d8f7      	bhi.n	8001fe2 <HAL_Delay+0x26>
  {
  }
}
 8001ff2:	bf00      	nop
 8001ff4:	bf00      	nop
 8001ff6:	3710      	adds	r7, #16
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}
 8001ffc:	200000a0 	.word	0x200000a0

08002000 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002000:	b480      	push	{r7}
 8002002:	b085      	sub	sp, #20
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	f003 0307 	and.w	r3, r3, #7
 800200e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002010:	4b0c      	ldr	r3, [pc, #48]	@ (8002044 <__NVIC_SetPriorityGrouping+0x44>)
 8002012:	68db      	ldr	r3, [r3, #12]
 8002014:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002016:	68ba      	ldr	r2, [r7, #8]
 8002018:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800201c:	4013      	ands	r3, r2
 800201e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002028:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800202c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002030:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002032:	4a04      	ldr	r2, [pc, #16]	@ (8002044 <__NVIC_SetPriorityGrouping+0x44>)
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	60d3      	str	r3, [r2, #12]
}
 8002038:	bf00      	nop
 800203a:	3714      	adds	r7, #20
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr
 8002044:	e000ed00 	.word	0xe000ed00

08002048 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002048:	b480      	push	{r7}
 800204a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800204c:	4b04      	ldr	r3, [pc, #16]	@ (8002060 <__NVIC_GetPriorityGrouping+0x18>)
 800204e:	68db      	ldr	r3, [r3, #12]
 8002050:	0a1b      	lsrs	r3, r3, #8
 8002052:	f003 0307 	and.w	r3, r3, #7
}
 8002056:	4618      	mov	r0, r3
 8002058:	46bd      	mov	sp, r7
 800205a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205e:	4770      	bx	lr
 8002060:	e000ed00 	.word	0xe000ed00

08002064 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002064:	b480      	push	{r7}
 8002066:	b083      	sub	sp, #12
 8002068:	af00      	add	r7, sp, #0
 800206a:	4603      	mov	r3, r0
 800206c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800206e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002072:	2b00      	cmp	r3, #0
 8002074:	db0b      	blt.n	800208e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002076:	79fb      	ldrb	r3, [r7, #7]
 8002078:	f003 021f 	and.w	r2, r3, #31
 800207c:	4907      	ldr	r1, [pc, #28]	@ (800209c <__NVIC_EnableIRQ+0x38>)
 800207e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002082:	095b      	lsrs	r3, r3, #5
 8002084:	2001      	movs	r0, #1
 8002086:	fa00 f202 	lsl.w	r2, r0, r2
 800208a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800208e:	bf00      	nop
 8002090:	370c      	adds	r7, #12
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr
 800209a:	bf00      	nop
 800209c:	e000e100 	.word	0xe000e100

080020a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b083      	sub	sp, #12
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	4603      	mov	r3, r0
 80020a8:	6039      	str	r1, [r7, #0]
 80020aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	db0a      	blt.n	80020ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	b2da      	uxtb	r2, r3
 80020b8:	490c      	ldr	r1, [pc, #48]	@ (80020ec <__NVIC_SetPriority+0x4c>)
 80020ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020be:	0112      	lsls	r2, r2, #4
 80020c0:	b2d2      	uxtb	r2, r2
 80020c2:	440b      	add	r3, r1
 80020c4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020c8:	e00a      	b.n	80020e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	b2da      	uxtb	r2, r3
 80020ce:	4908      	ldr	r1, [pc, #32]	@ (80020f0 <__NVIC_SetPriority+0x50>)
 80020d0:	79fb      	ldrb	r3, [r7, #7]
 80020d2:	f003 030f 	and.w	r3, r3, #15
 80020d6:	3b04      	subs	r3, #4
 80020d8:	0112      	lsls	r2, r2, #4
 80020da:	b2d2      	uxtb	r2, r2
 80020dc:	440b      	add	r3, r1
 80020de:	761a      	strb	r2, [r3, #24]
}
 80020e0:	bf00      	nop
 80020e2:	370c      	adds	r7, #12
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr
 80020ec:	e000e100 	.word	0xe000e100
 80020f0:	e000ed00 	.word	0xe000ed00

080020f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b089      	sub	sp, #36	@ 0x24
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	60f8      	str	r0, [r7, #12]
 80020fc:	60b9      	str	r1, [r7, #8]
 80020fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	f003 0307 	and.w	r3, r3, #7
 8002106:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002108:	69fb      	ldr	r3, [r7, #28]
 800210a:	f1c3 0307 	rsb	r3, r3, #7
 800210e:	2b04      	cmp	r3, #4
 8002110:	bf28      	it	cs
 8002112:	2304      	movcs	r3, #4
 8002114:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002116:	69fb      	ldr	r3, [r7, #28]
 8002118:	3304      	adds	r3, #4
 800211a:	2b06      	cmp	r3, #6
 800211c:	d902      	bls.n	8002124 <NVIC_EncodePriority+0x30>
 800211e:	69fb      	ldr	r3, [r7, #28]
 8002120:	3b03      	subs	r3, #3
 8002122:	e000      	b.n	8002126 <NVIC_EncodePriority+0x32>
 8002124:	2300      	movs	r3, #0
 8002126:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002128:	f04f 32ff 	mov.w	r2, #4294967295
 800212c:	69bb      	ldr	r3, [r7, #24]
 800212e:	fa02 f303 	lsl.w	r3, r2, r3
 8002132:	43da      	mvns	r2, r3
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	401a      	ands	r2, r3
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800213c:	f04f 31ff 	mov.w	r1, #4294967295
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	fa01 f303 	lsl.w	r3, r1, r3
 8002146:	43d9      	mvns	r1, r3
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800214c:	4313      	orrs	r3, r2
         );
}
 800214e:	4618      	mov	r0, r3
 8002150:	3724      	adds	r7, #36	@ 0x24
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr
	...

0800215c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b082      	sub	sp, #8
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	3b01      	subs	r3, #1
 8002168:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800216c:	d301      	bcc.n	8002172 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800216e:	2301      	movs	r3, #1
 8002170:	e00f      	b.n	8002192 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002172:	4a0a      	ldr	r2, [pc, #40]	@ (800219c <SysTick_Config+0x40>)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	3b01      	subs	r3, #1
 8002178:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800217a:	210f      	movs	r1, #15
 800217c:	f04f 30ff 	mov.w	r0, #4294967295
 8002180:	f7ff ff8e 	bl	80020a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002184:	4b05      	ldr	r3, [pc, #20]	@ (800219c <SysTick_Config+0x40>)
 8002186:	2200      	movs	r2, #0
 8002188:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800218a:	4b04      	ldr	r3, [pc, #16]	@ (800219c <SysTick_Config+0x40>)
 800218c:	2207      	movs	r2, #7
 800218e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002190:	2300      	movs	r3, #0
}
 8002192:	4618      	mov	r0, r3
 8002194:	3708      	adds	r7, #8
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	e000e010 	.word	0xe000e010

080021a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b082      	sub	sp, #8
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021a8:	6878      	ldr	r0, [r7, #4]
 80021aa:	f7ff ff29 	bl	8002000 <__NVIC_SetPriorityGrouping>
}
 80021ae:	bf00      	nop
 80021b0:	3708      	adds	r7, #8
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}

080021b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021b6:	b580      	push	{r7, lr}
 80021b8:	b086      	sub	sp, #24
 80021ba:	af00      	add	r7, sp, #0
 80021bc:	4603      	mov	r3, r0
 80021be:	60b9      	str	r1, [r7, #8]
 80021c0:	607a      	str	r2, [r7, #4]
 80021c2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80021c4:	f7ff ff40 	bl	8002048 <__NVIC_GetPriorityGrouping>
 80021c8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021ca:	687a      	ldr	r2, [r7, #4]
 80021cc:	68b9      	ldr	r1, [r7, #8]
 80021ce:	6978      	ldr	r0, [r7, #20]
 80021d0:	f7ff ff90 	bl	80020f4 <NVIC_EncodePriority>
 80021d4:	4602      	mov	r2, r0
 80021d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021da:	4611      	mov	r1, r2
 80021dc:	4618      	mov	r0, r3
 80021de:	f7ff ff5f 	bl	80020a0 <__NVIC_SetPriority>
}
 80021e2:	bf00      	nop
 80021e4:	3718      	adds	r7, #24
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}

080021ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021ea:	b580      	push	{r7, lr}
 80021ec:	b082      	sub	sp, #8
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	4603      	mov	r3, r0
 80021f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021f8:	4618      	mov	r0, r3
 80021fa:	f7ff ff33 	bl	8002064 <__NVIC_EnableIRQ>
}
 80021fe:	bf00      	nop
 8002200:	3708      	adds	r7, #8
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}

08002206 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002206:	b580      	push	{r7, lr}
 8002208:	b082      	sub	sp, #8
 800220a:	af00      	add	r7, sp, #0
 800220c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800220e:	6878      	ldr	r0, [r7, #4]
 8002210:	f7ff ffa4 	bl	800215c <SysTick_Config>
 8002214:	4603      	mov	r3, r0
}
 8002216:	4618      	mov	r0, r3
 8002218:	3708      	adds	r7, #8
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
	...

08002220 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b084      	sub	sp, #16
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d101      	bne.n	8002232 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	e08d      	b.n	800234e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	461a      	mov	r2, r3
 8002238:	4b47      	ldr	r3, [pc, #284]	@ (8002358 <HAL_DMA_Init+0x138>)
 800223a:	429a      	cmp	r2, r3
 800223c:	d80f      	bhi.n	800225e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	461a      	mov	r2, r3
 8002244:	4b45      	ldr	r3, [pc, #276]	@ (800235c <HAL_DMA_Init+0x13c>)
 8002246:	4413      	add	r3, r2
 8002248:	4a45      	ldr	r2, [pc, #276]	@ (8002360 <HAL_DMA_Init+0x140>)
 800224a:	fba2 2303 	umull	r2, r3, r2, r3
 800224e:	091b      	lsrs	r3, r3, #4
 8002250:	009a      	lsls	r2, r3, #2
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	4a42      	ldr	r2, [pc, #264]	@ (8002364 <HAL_DMA_Init+0x144>)
 800225a:	641a      	str	r2, [r3, #64]	@ 0x40
 800225c:	e00e      	b.n	800227c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	461a      	mov	r2, r3
 8002264:	4b40      	ldr	r3, [pc, #256]	@ (8002368 <HAL_DMA_Init+0x148>)
 8002266:	4413      	add	r3, r2
 8002268:	4a3d      	ldr	r2, [pc, #244]	@ (8002360 <HAL_DMA_Init+0x140>)
 800226a:	fba2 2303 	umull	r2, r3, r2, r3
 800226e:	091b      	lsrs	r3, r3, #4
 8002270:	009a      	lsls	r2, r3, #2
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	4a3c      	ldr	r2, [pc, #240]	@ (800236c <HAL_DMA_Init+0x14c>)
 800227a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2202      	movs	r2, #2
 8002280:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8002292:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002296:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80022a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	691b      	ldr	r3, [r3, #16]
 80022a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	699b      	ldr	r3, [r3, #24]
 80022b2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022b8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6a1b      	ldr	r3, [r3, #32]
 80022be:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80022c0:	68fa      	ldr	r2, [r7, #12]
 80022c2:	4313      	orrs	r3, r2
 80022c4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	68fa      	ldr	r2, [r7, #12]
 80022cc:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80022ce:	6878      	ldr	r0, [r7, #4]
 80022d0:	f000 fa76 	bl	80027c0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80022dc:	d102      	bne.n	80022e4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2200      	movs	r2, #0
 80022e2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	685a      	ldr	r2, [r3, #4]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022ec:	b2d2      	uxtb	r2, r2
 80022ee:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022f4:	687a      	ldr	r2, [r7, #4]
 80022f6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80022f8:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d010      	beq.n	8002324 <HAL_DMA_Init+0x104>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	2b04      	cmp	r3, #4
 8002308:	d80c      	bhi.n	8002324 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800230a:	6878      	ldr	r0, [r7, #4]
 800230c:	f000 fa96 	bl	800283c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002314:	2200      	movs	r2, #0
 8002316:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800231c:	687a      	ldr	r2, [r7, #4]
 800231e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002320:	605a      	str	r2, [r3, #4]
 8002322:	e008      	b.n	8002336 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2200      	movs	r2, #0
 8002328:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2200      	movs	r2, #0
 800232e:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2200      	movs	r2, #0
 8002334:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2200      	movs	r2, #0
 800233a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2201      	movs	r2, #1
 8002340:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2200      	movs	r2, #0
 8002348:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800234c:	2300      	movs	r3, #0
}
 800234e:	4618      	mov	r0, r3
 8002350:	3710      	adds	r7, #16
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}
 8002356:	bf00      	nop
 8002358:	40020407 	.word	0x40020407
 800235c:	bffdfff8 	.word	0xbffdfff8
 8002360:	cccccccd 	.word	0xcccccccd
 8002364:	40020000 	.word	0x40020000
 8002368:	bffdfbf8 	.word	0xbffdfbf8
 800236c:	40020400 	.word	0x40020400

08002370 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b086      	sub	sp, #24
 8002374:	af00      	add	r7, sp, #0
 8002376:	60f8      	str	r0, [r7, #12]
 8002378:	60b9      	str	r1, [r7, #8]
 800237a:	607a      	str	r2, [r7, #4]
 800237c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800237e:	2300      	movs	r3, #0
 8002380:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002388:	2b01      	cmp	r3, #1
 800238a:	d101      	bne.n	8002390 <HAL_DMA_Start_IT+0x20>
 800238c:	2302      	movs	r3, #2
 800238e:	e066      	b.n	800245e <HAL_DMA_Start_IT+0xee>
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	2201      	movs	r2, #1
 8002394:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800239e:	b2db      	uxtb	r3, r3
 80023a0:	2b01      	cmp	r3, #1
 80023a2:	d155      	bne.n	8002450 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	2202      	movs	r2, #2
 80023a8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	2200      	movs	r2, #0
 80023b0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	681a      	ldr	r2, [r3, #0]
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f022 0201 	bic.w	r2, r2, #1
 80023c0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	687a      	ldr	r2, [r7, #4]
 80023c6:	68b9      	ldr	r1, [r7, #8]
 80023c8:	68f8      	ldr	r0, [r7, #12]
 80023ca:	f000 f9bb 	bl	8002744 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d008      	beq.n	80023e8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	681a      	ldr	r2, [r3, #0]
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f042 020e 	orr.w	r2, r2, #14
 80023e4:	601a      	str	r2, [r3, #0]
 80023e6:	e00f      	b.n	8002408 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f022 0204 	bic.w	r2, r2, #4
 80023f6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	681a      	ldr	r2, [r3, #0]
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f042 020a 	orr.w	r2, r2, #10
 8002406:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002412:	2b00      	cmp	r3, #0
 8002414:	d007      	beq.n	8002426 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800241a:	681a      	ldr	r2, [r3, #0]
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002420:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002424:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800242a:	2b00      	cmp	r3, #0
 800242c:	d007      	beq.n	800243e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002438:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800243c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f042 0201 	orr.w	r2, r2, #1
 800244c:	601a      	str	r2, [r3, #0]
 800244e:	e005      	b.n	800245c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	2200      	movs	r2, #0
 8002454:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002458:	2302      	movs	r3, #2
 800245a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800245c:	7dfb      	ldrb	r3, [r7, #23]
}
 800245e:	4618      	mov	r0, r3
 8002460:	3718      	adds	r7, #24
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}

08002466 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002466:	b480      	push	{r7}
 8002468:	b085      	sub	sp, #20
 800246a:	af00      	add	r7, sp, #0
 800246c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800246e:	2300      	movs	r3, #0
 8002470:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002478:	b2db      	uxtb	r3, r3
 800247a:	2b02      	cmp	r3, #2
 800247c:	d005      	beq.n	800248a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2204      	movs	r2, #4
 8002482:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8002484:	2301      	movs	r3, #1
 8002486:	73fb      	strb	r3, [r7, #15]
 8002488:	e037      	b.n	80024fa <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f022 020e 	bic.w	r2, r2, #14
 8002498:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800249e:	681a      	ldr	r2, [r3, #0]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80024a4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80024a8:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	681a      	ldr	r2, [r3, #0]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f022 0201 	bic.w	r2, r2, #1
 80024b8:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024be:	f003 021f 	and.w	r2, r3, #31
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024c6:	2101      	movs	r1, #1
 80024c8:	fa01 f202 	lsl.w	r2, r1, r2
 80024cc:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024d2:	687a      	ldr	r2, [r7, #4]
 80024d4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80024d6:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d00c      	beq.n	80024fa <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024ea:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80024ee:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024f4:	687a      	ldr	r2, [r7, #4]
 80024f6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80024f8:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2201      	movs	r2, #1
 80024fe:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2200      	movs	r2, #0
 8002506:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 800250a:	7bfb      	ldrb	r3, [r7, #15]
}
 800250c:	4618      	mov	r0, r3
 800250e:	3714      	adds	r7, #20
 8002510:	46bd      	mov	sp, r7
 8002512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002516:	4770      	bx	lr

08002518 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b084      	sub	sp, #16
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002520:	2300      	movs	r3, #0
 8002522:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800252a:	b2db      	uxtb	r3, r3
 800252c:	2b02      	cmp	r3, #2
 800252e:	d00d      	beq.n	800254c <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2204      	movs	r2, #4
 8002534:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2201      	movs	r2, #1
 800253a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2200      	movs	r2, #0
 8002542:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	73fb      	strb	r3, [r7, #15]
 800254a:	e047      	b.n	80025dc <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	681a      	ldr	r2, [r3, #0]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f022 020e 	bic.w	r2, r2, #14
 800255a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f022 0201 	bic.w	r2, r2, #1
 800256a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002570:	681a      	ldr	r2, [r3, #0]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002576:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800257a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002580:	f003 021f 	and.w	r2, r3, #31
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002588:	2101      	movs	r1, #1
 800258a:	fa01 f202 	lsl.w	r2, r1, r2
 800258e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002594:	687a      	ldr	r2, [r7, #4]
 8002596:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002598:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d00c      	beq.n	80025bc <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025a6:	681a      	ldr	r2, [r3, #0]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025ac:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80025b0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025b6:	687a      	ldr	r2, [r7, #4]
 80025b8:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80025ba:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2201      	movs	r2, #1
 80025c0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2200      	movs	r2, #0
 80025c8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d003      	beq.n	80025dc <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025d8:	6878      	ldr	r0, [r7, #4]
 80025da:	4798      	blx	r3
    }
  }
  return status;
 80025dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80025de:	4618      	mov	r0, r3
 80025e0:	3710      	adds	r7, #16
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}

080025e6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80025e6:	b580      	push	{r7, lr}
 80025e8:	b084      	sub	sp, #16
 80025ea:	af00      	add	r7, sp, #0
 80025ec:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002602:	f003 031f 	and.w	r3, r3, #31
 8002606:	2204      	movs	r2, #4
 8002608:	409a      	lsls	r2, r3
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	4013      	ands	r3, r2
 800260e:	2b00      	cmp	r3, #0
 8002610:	d026      	beq.n	8002660 <HAL_DMA_IRQHandler+0x7a>
 8002612:	68bb      	ldr	r3, [r7, #8]
 8002614:	f003 0304 	and.w	r3, r3, #4
 8002618:	2b00      	cmp	r3, #0
 800261a:	d021      	beq.n	8002660 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f003 0320 	and.w	r3, r3, #32
 8002626:	2b00      	cmp	r3, #0
 8002628:	d107      	bne.n	800263a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f022 0204 	bic.w	r2, r2, #4
 8002638:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800263e:	f003 021f 	and.w	r2, r3, #31
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002646:	2104      	movs	r1, #4
 8002648:	fa01 f202 	lsl.w	r2, r1, r2
 800264c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002652:	2b00      	cmp	r3, #0
 8002654:	d071      	beq.n	800273a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800265a:	6878      	ldr	r0, [r7, #4]
 800265c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800265e:	e06c      	b.n	800273a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002664:	f003 031f 	and.w	r3, r3, #31
 8002668:	2202      	movs	r2, #2
 800266a:	409a      	lsls	r2, r3
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	4013      	ands	r3, r2
 8002670:	2b00      	cmp	r3, #0
 8002672:	d02e      	beq.n	80026d2 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	f003 0302 	and.w	r3, r3, #2
 800267a:	2b00      	cmp	r3, #0
 800267c:	d029      	beq.n	80026d2 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f003 0320 	and.w	r3, r3, #32
 8002688:	2b00      	cmp	r3, #0
 800268a:	d10b      	bne.n	80026a4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	681a      	ldr	r2, [r3, #0]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f022 020a 	bic.w	r2, r2, #10
 800269a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2201      	movs	r2, #1
 80026a0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026a8:	f003 021f 	and.w	r2, r3, #31
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026b0:	2102      	movs	r1, #2
 80026b2:	fa01 f202 	lsl.w	r2, r1, r2
 80026b6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2200      	movs	r2, #0
 80026bc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d038      	beq.n	800273a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026cc:	6878      	ldr	r0, [r7, #4]
 80026ce:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80026d0:	e033      	b.n	800273a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026d6:	f003 031f 	and.w	r3, r3, #31
 80026da:	2208      	movs	r2, #8
 80026dc:	409a      	lsls	r2, r3
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	4013      	ands	r3, r2
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d02a      	beq.n	800273c <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80026e6:	68bb      	ldr	r3, [r7, #8]
 80026e8:	f003 0308 	and.w	r3, r3, #8
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d025      	beq.n	800273c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	681a      	ldr	r2, [r3, #0]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f022 020e 	bic.w	r2, r2, #14
 80026fe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002704:	f003 021f 	and.w	r2, r3, #31
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800270c:	2101      	movs	r1, #1
 800270e:	fa01 f202 	lsl.w	r2, r1, r2
 8002712:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2201      	movs	r2, #1
 8002718:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2201      	movs	r2, #1
 800271e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2200      	movs	r2, #0
 8002726:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800272e:	2b00      	cmp	r3, #0
 8002730:	d004      	beq.n	800273c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002736:	6878      	ldr	r0, [r7, #4]
 8002738:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800273a:	bf00      	nop
 800273c:	bf00      	nop
}
 800273e:	3710      	adds	r7, #16
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}

08002744 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002744:	b480      	push	{r7}
 8002746:	b085      	sub	sp, #20
 8002748:	af00      	add	r7, sp, #0
 800274a:	60f8      	str	r0, [r7, #12]
 800274c:	60b9      	str	r1, [r7, #8]
 800274e:	607a      	str	r2, [r7, #4]
 8002750:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002756:	68fa      	ldr	r2, [r7, #12]
 8002758:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800275a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002760:	2b00      	cmp	r3, #0
 8002762:	d004      	beq.n	800276e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002768:	68fa      	ldr	r2, [r7, #12]
 800276a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800276c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002772:	f003 021f 	and.w	r2, r3, #31
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800277a:	2101      	movs	r1, #1
 800277c:	fa01 f202 	lsl.w	r2, r1, r2
 8002780:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	683a      	ldr	r2, [r7, #0]
 8002788:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	2b10      	cmp	r3, #16
 8002790:	d108      	bne.n	80027a4 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	687a      	ldr	r2, [r7, #4]
 8002798:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	68ba      	ldr	r2, [r7, #8]
 80027a0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80027a2:	e007      	b.n	80027b4 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	68ba      	ldr	r2, [r7, #8]
 80027aa:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	687a      	ldr	r2, [r7, #4]
 80027b2:	60da      	str	r2, [r3, #12]
}
 80027b4:	bf00      	nop
 80027b6:	3714      	adds	r7, #20
 80027b8:	46bd      	mov	sp, r7
 80027ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027be:	4770      	bx	lr

080027c0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b087      	sub	sp, #28
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	461a      	mov	r2, r3
 80027ce:	4b16      	ldr	r3, [pc, #88]	@ (8002828 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d802      	bhi.n	80027da <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80027d4:	4b15      	ldr	r3, [pc, #84]	@ (800282c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80027d6:	617b      	str	r3, [r7, #20]
 80027d8:	e001      	b.n	80027de <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G411xB) || defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 80027da:	4b15      	ldr	r3, [pc, #84]	@ (8002830 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80027dc:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	b2db      	uxtb	r3, r3
 80027e8:	3b08      	subs	r3, #8
 80027ea:	4a12      	ldr	r2, [pc, #72]	@ (8002834 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80027ec:	fba2 2303 	umull	r2, r3, r2, r3
 80027f0:	091b      	lsrs	r3, r3, #4
 80027f2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027f8:	089b      	lsrs	r3, r3, #2
 80027fa:	009a      	lsls	r2, r3, #2
 80027fc:	693b      	ldr	r3, [r7, #16]
 80027fe:	4413      	add	r3, r2
 8002800:	461a      	mov	r2, r3
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	4a0b      	ldr	r2, [pc, #44]	@ (8002838 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800280a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	f003 031f 	and.w	r3, r3, #31
 8002812:	2201      	movs	r2, #1
 8002814:	409a      	lsls	r2, r3
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800281a:	bf00      	nop
 800281c:	371c      	adds	r7, #28
 800281e:	46bd      	mov	sp, r7
 8002820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002824:	4770      	bx	lr
 8002826:	bf00      	nop
 8002828:	40020407 	.word	0x40020407
 800282c:	40020800 	.word	0x40020800
 8002830:	40020820 	.word	0x40020820
 8002834:	cccccccd 	.word	0xcccccccd
 8002838:	40020880 	.word	0x40020880

0800283c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800283c:	b480      	push	{r7}
 800283e:	b085      	sub	sp, #20
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	b2db      	uxtb	r3, r3
 800284a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800284c:	68fa      	ldr	r2, [r7, #12]
 800284e:	4b0b      	ldr	r3, [pc, #44]	@ (800287c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002850:	4413      	add	r3, r2
 8002852:	009b      	lsls	r3, r3, #2
 8002854:	461a      	mov	r2, r3
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	4a08      	ldr	r2, [pc, #32]	@ (8002880 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800285e:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	3b01      	subs	r3, #1
 8002864:	f003 031f 	and.w	r3, r3, #31
 8002868:	2201      	movs	r2, #1
 800286a:	409a      	lsls	r2, r3
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8002870:	bf00      	nop
 8002872:	3714      	adds	r7, #20
 8002874:	46bd      	mov	sp, r7
 8002876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287a:	4770      	bx	lr
 800287c:	1000823f 	.word	0x1000823f
 8002880:	40020940 	.word	0x40020940

08002884 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002884:	b480      	push	{r7}
 8002886:	b087      	sub	sp, #28
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
 800288c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800288e:	2300      	movs	r3, #0
 8002890:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002892:	e15a      	b.n	8002b4a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	681a      	ldr	r2, [r3, #0]
 8002898:	2101      	movs	r1, #1
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	fa01 f303 	lsl.w	r3, r1, r3
 80028a0:	4013      	ands	r3, r2
 80028a2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	f000 814c 	beq.w	8002b44 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	f003 0303 	and.w	r3, r3, #3
 80028b4:	2b01      	cmp	r3, #1
 80028b6:	d005      	beq.n	80028c4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80028c0:	2b02      	cmp	r3, #2
 80028c2:	d130      	bne.n	8002926 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	005b      	lsls	r3, r3, #1
 80028ce:	2203      	movs	r2, #3
 80028d0:	fa02 f303 	lsl.w	r3, r2, r3
 80028d4:	43db      	mvns	r3, r3
 80028d6:	693a      	ldr	r2, [r7, #16]
 80028d8:	4013      	ands	r3, r2
 80028da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	68da      	ldr	r2, [r3, #12]
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	005b      	lsls	r3, r3, #1
 80028e4:	fa02 f303 	lsl.w	r3, r2, r3
 80028e8:	693a      	ldr	r2, [r7, #16]
 80028ea:	4313      	orrs	r3, r2
 80028ec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	693a      	ldr	r2, [r7, #16]
 80028f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80028fa:	2201      	movs	r2, #1
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002902:	43db      	mvns	r3, r3
 8002904:	693a      	ldr	r2, [r7, #16]
 8002906:	4013      	ands	r3, r2
 8002908:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	091b      	lsrs	r3, r3, #4
 8002910:	f003 0201 	and.w	r2, r3, #1
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	fa02 f303 	lsl.w	r3, r2, r3
 800291a:	693a      	ldr	r2, [r7, #16]
 800291c:	4313      	orrs	r3, r2
 800291e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	693a      	ldr	r2, [r7, #16]
 8002924:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	f003 0303 	and.w	r3, r3, #3
 800292e:	2b03      	cmp	r3, #3
 8002930:	d017      	beq.n	8002962 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	68db      	ldr	r3, [r3, #12]
 8002936:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	005b      	lsls	r3, r3, #1
 800293c:	2203      	movs	r2, #3
 800293e:	fa02 f303 	lsl.w	r3, r2, r3
 8002942:	43db      	mvns	r3, r3
 8002944:	693a      	ldr	r2, [r7, #16]
 8002946:	4013      	ands	r3, r2
 8002948:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	689a      	ldr	r2, [r3, #8]
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	005b      	lsls	r3, r3, #1
 8002952:	fa02 f303 	lsl.w	r3, r2, r3
 8002956:	693a      	ldr	r2, [r7, #16]
 8002958:	4313      	orrs	r3, r2
 800295a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	693a      	ldr	r2, [r7, #16]
 8002960:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	f003 0303 	and.w	r3, r3, #3
 800296a:	2b02      	cmp	r3, #2
 800296c:	d123      	bne.n	80029b6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	08da      	lsrs	r2, r3, #3
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	3208      	adds	r2, #8
 8002976:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800297a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	f003 0307 	and.w	r3, r3, #7
 8002982:	009b      	lsls	r3, r3, #2
 8002984:	220f      	movs	r2, #15
 8002986:	fa02 f303 	lsl.w	r3, r2, r3
 800298a:	43db      	mvns	r3, r3
 800298c:	693a      	ldr	r2, [r7, #16]
 800298e:	4013      	ands	r3, r2
 8002990:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	691a      	ldr	r2, [r3, #16]
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	f003 0307 	and.w	r3, r3, #7
 800299c:	009b      	lsls	r3, r3, #2
 800299e:	fa02 f303 	lsl.w	r3, r2, r3
 80029a2:	693a      	ldr	r2, [r7, #16]
 80029a4:	4313      	orrs	r3, r2
 80029a6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	08da      	lsrs	r2, r3, #3
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	3208      	adds	r2, #8
 80029b0:	6939      	ldr	r1, [r7, #16]
 80029b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	005b      	lsls	r3, r3, #1
 80029c0:	2203      	movs	r2, #3
 80029c2:	fa02 f303 	lsl.w	r3, r2, r3
 80029c6:	43db      	mvns	r3, r3
 80029c8:	693a      	ldr	r2, [r7, #16]
 80029ca:	4013      	ands	r3, r2
 80029cc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	f003 0203 	and.w	r2, r3, #3
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	005b      	lsls	r3, r3, #1
 80029da:	fa02 f303 	lsl.w	r3, r2, r3
 80029de:	693a      	ldr	r2, [r7, #16]
 80029e0:	4313      	orrs	r3, r2
 80029e2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	693a      	ldr	r2, [r7, #16]
 80029e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	f000 80a6 	beq.w	8002b44 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029f8:	4b5b      	ldr	r3, [pc, #364]	@ (8002b68 <HAL_GPIO_Init+0x2e4>)
 80029fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029fc:	4a5a      	ldr	r2, [pc, #360]	@ (8002b68 <HAL_GPIO_Init+0x2e4>)
 80029fe:	f043 0301 	orr.w	r3, r3, #1
 8002a02:	6613      	str	r3, [r2, #96]	@ 0x60
 8002a04:	4b58      	ldr	r3, [pc, #352]	@ (8002b68 <HAL_GPIO_Init+0x2e4>)
 8002a06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a08:	f003 0301 	and.w	r3, r3, #1
 8002a0c:	60bb      	str	r3, [r7, #8]
 8002a0e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a10:	4a56      	ldr	r2, [pc, #344]	@ (8002b6c <HAL_GPIO_Init+0x2e8>)
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	089b      	lsrs	r3, r3, #2
 8002a16:	3302      	adds	r3, #2
 8002a18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a1c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	f003 0303 	and.w	r3, r3, #3
 8002a24:	009b      	lsls	r3, r3, #2
 8002a26:	220f      	movs	r2, #15
 8002a28:	fa02 f303 	lsl.w	r3, r2, r3
 8002a2c:	43db      	mvns	r3, r3
 8002a2e:	693a      	ldr	r2, [r7, #16]
 8002a30:	4013      	ands	r3, r2
 8002a32:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002a3a:	d01f      	beq.n	8002a7c <HAL_GPIO_Init+0x1f8>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	4a4c      	ldr	r2, [pc, #304]	@ (8002b70 <HAL_GPIO_Init+0x2ec>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d019      	beq.n	8002a78 <HAL_GPIO_Init+0x1f4>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	4a4b      	ldr	r2, [pc, #300]	@ (8002b74 <HAL_GPIO_Init+0x2f0>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d013      	beq.n	8002a74 <HAL_GPIO_Init+0x1f0>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	4a4a      	ldr	r2, [pc, #296]	@ (8002b78 <HAL_GPIO_Init+0x2f4>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d00d      	beq.n	8002a70 <HAL_GPIO_Init+0x1ec>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	4a49      	ldr	r2, [pc, #292]	@ (8002b7c <HAL_GPIO_Init+0x2f8>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d007      	beq.n	8002a6c <HAL_GPIO_Init+0x1e8>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	4a48      	ldr	r2, [pc, #288]	@ (8002b80 <HAL_GPIO_Init+0x2fc>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d101      	bne.n	8002a68 <HAL_GPIO_Init+0x1e4>
 8002a64:	2305      	movs	r3, #5
 8002a66:	e00a      	b.n	8002a7e <HAL_GPIO_Init+0x1fa>
 8002a68:	2306      	movs	r3, #6
 8002a6a:	e008      	b.n	8002a7e <HAL_GPIO_Init+0x1fa>
 8002a6c:	2304      	movs	r3, #4
 8002a6e:	e006      	b.n	8002a7e <HAL_GPIO_Init+0x1fa>
 8002a70:	2303      	movs	r3, #3
 8002a72:	e004      	b.n	8002a7e <HAL_GPIO_Init+0x1fa>
 8002a74:	2302      	movs	r3, #2
 8002a76:	e002      	b.n	8002a7e <HAL_GPIO_Init+0x1fa>
 8002a78:	2301      	movs	r3, #1
 8002a7a:	e000      	b.n	8002a7e <HAL_GPIO_Init+0x1fa>
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	697a      	ldr	r2, [r7, #20]
 8002a80:	f002 0203 	and.w	r2, r2, #3
 8002a84:	0092      	lsls	r2, r2, #2
 8002a86:	4093      	lsls	r3, r2
 8002a88:	693a      	ldr	r2, [r7, #16]
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a8e:	4937      	ldr	r1, [pc, #220]	@ (8002b6c <HAL_GPIO_Init+0x2e8>)
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	089b      	lsrs	r3, r3, #2
 8002a94:	3302      	adds	r3, #2
 8002a96:	693a      	ldr	r2, [r7, #16]
 8002a98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002a9c:	4b39      	ldr	r3, [pc, #228]	@ (8002b84 <HAL_GPIO_Init+0x300>)
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	43db      	mvns	r3, r3
 8002aa6:	693a      	ldr	r2, [r7, #16]
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d003      	beq.n	8002ac0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002ab8:	693a      	ldr	r2, [r7, #16]
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	4313      	orrs	r3, r2
 8002abe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002ac0:	4a30      	ldr	r2, [pc, #192]	@ (8002b84 <HAL_GPIO_Init+0x300>)
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002ac6:	4b2f      	ldr	r3, [pc, #188]	@ (8002b84 <HAL_GPIO_Init+0x300>)
 8002ac8:	68db      	ldr	r3, [r3, #12]
 8002aca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	43db      	mvns	r3, r3
 8002ad0:	693a      	ldr	r2, [r7, #16]
 8002ad2:	4013      	ands	r3, r2
 8002ad4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d003      	beq.n	8002aea <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002ae2:	693a      	ldr	r2, [r7, #16]
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002aea:	4a26      	ldr	r2, [pc, #152]	@ (8002b84 <HAL_GPIO_Init+0x300>)
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002af0:	4b24      	ldr	r3, [pc, #144]	@ (8002b84 <HAL_GPIO_Init+0x300>)
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	43db      	mvns	r3, r3
 8002afa:	693a      	ldr	r2, [r7, #16]
 8002afc:	4013      	ands	r3, r2
 8002afe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d003      	beq.n	8002b14 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002b0c:	693a      	ldr	r2, [r7, #16]
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	4313      	orrs	r3, r2
 8002b12:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002b14:	4a1b      	ldr	r2, [pc, #108]	@ (8002b84 <HAL_GPIO_Init+0x300>)
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002b1a:	4b1a      	ldr	r3, [pc, #104]	@ (8002b84 <HAL_GPIO_Init+0x300>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	43db      	mvns	r3, r3
 8002b24:	693a      	ldr	r2, [r7, #16]
 8002b26:	4013      	ands	r3, r2
 8002b28:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d003      	beq.n	8002b3e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002b36:	693a      	ldr	r2, [r7, #16]
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002b3e:	4a11      	ldr	r2, [pc, #68]	@ (8002b84 <HAL_GPIO_Init+0x300>)
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	3301      	adds	r3, #1
 8002b48:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	fa22 f303 	lsr.w	r3, r2, r3
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	f47f ae9d 	bne.w	8002894 <HAL_GPIO_Init+0x10>
  }
}
 8002b5a:	bf00      	nop
 8002b5c:	bf00      	nop
 8002b5e:	371c      	adds	r7, #28
 8002b60:	46bd      	mov	sp, r7
 8002b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b66:	4770      	bx	lr
 8002b68:	40021000 	.word	0x40021000
 8002b6c:	40010000 	.word	0x40010000
 8002b70:	48000400 	.word	0x48000400
 8002b74:	48000800 	.word	0x48000800
 8002b78:	48000c00 	.word	0x48000c00
 8002b7c:	48001000 	.word	0x48001000
 8002b80:	48001400 	.word	0x48001400
 8002b84:	40010400 	.word	0x40010400

08002b88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b083      	sub	sp, #12
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
 8002b90:	460b      	mov	r3, r1
 8002b92:	807b      	strh	r3, [r7, #2]
 8002b94:	4613      	mov	r3, r2
 8002b96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002b98:	787b      	ldrb	r3, [r7, #1]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d003      	beq.n	8002ba6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002b9e:	887a      	ldrh	r2, [r7, #2]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002ba4:	e002      	b.n	8002bac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002ba6:	887a      	ldrh	r2, [r7, #2]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002bac:	bf00      	nop
 8002bae:	370c      	adds	r7, #12
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb6:	4770      	bx	lr

08002bb8 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b085      	sub	sp, #20
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
 8002bc0:	460b      	mov	r3, r1
 8002bc2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	695b      	ldr	r3, [r3, #20]
 8002bc8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002bca:	887a      	ldrh	r2, [r7, #2]
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	4013      	ands	r3, r2
 8002bd0:	041a      	lsls	r2, r3, #16
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	43d9      	mvns	r1, r3
 8002bd6:	887b      	ldrh	r3, [r7, #2]
 8002bd8:	400b      	ands	r3, r1
 8002bda:	431a      	orrs	r2, r3
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	619a      	str	r2, [r3, #24]
}
 8002be0:	bf00      	nop
 8002be2:	3714      	adds	r7, #20
 8002be4:	46bd      	mov	sp, r7
 8002be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bea:	4770      	bx	lr

08002bec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b082      	sub	sp, #8
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002bf6:	4b08      	ldr	r3, [pc, #32]	@ (8002c18 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002bf8:	695a      	ldr	r2, [r3, #20]
 8002bfa:	88fb      	ldrh	r3, [r7, #6]
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d006      	beq.n	8002c10 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002c02:	4a05      	ldr	r2, [pc, #20]	@ (8002c18 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002c04:	88fb      	ldrh	r3, [r7, #6]
 8002c06:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002c08:	88fb      	ldrh	r3, [r7, #6]
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f000 f806 	bl	8002c1c <HAL_GPIO_EXTI_Callback>
  }
}
 8002c10:	bf00      	nop
 8002c12:	3708      	adds	r7, #8
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}
 8002c18:	40010400 	.word	0x40010400

08002c1c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b083      	sub	sp, #12
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	4603      	mov	r3, r0
 8002c24:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002c26:	bf00      	nop
 8002c28:	370c      	adds	r7, #12
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c30:	4770      	bx	lr

08002c32 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002c32:	b580      	push	{r7, lr}
 8002c34:	b084      	sub	sp, #16
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d101      	bne.n	8002c44 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002c40:	2301      	movs	r3, #1
 8002c42:	e0c0      	b.n	8002dc6 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8002c4a:	b2db      	uxtb	r3, r3
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d106      	bne.n	8002c5e <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2200      	movs	r2, #0
 8002c54:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002c58:	6878      	ldr	r0, [r7, #4]
 8002c5a:	f008 fd49 	bl	800b6f0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2203      	movs	r2, #3
 8002c62:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f005 f85f 	bl	8007d2e <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c70:	2300      	movs	r3, #0
 8002c72:	73fb      	strb	r3, [r7, #15]
 8002c74:	e03e      	b.n	8002cf4 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002c76:	7bfa      	ldrb	r2, [r7, #15]
 8002c78:	6879      	ldr	r1, [r7, #4]
 8002c7a:	4613      	mov	r3, r2
 8002c7c:	009b      	lsls	r3, r3, #2
 8002c7e:	4413      	add	r3, r2
 8002c80:	00db      	lsls	r3, r3, #3
 8002c82:	440b      	add	r3, r1
 8002c84:	3311      	adds	r3, #17
 8002c86:	2201      	movs	r2, #1
 8002c88:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002c8a:	7bfa      	ldrb	r2, [r7, #15]
 8002c8c:	6879      	ldr	r1, [r7, #4]
 8002c8e:	4613      	mov	r3, r2
 8002c90:	009b      	lsls	r3, r3, #2
 8002c92:	4413      	add	r3, r2
 8002c94:	00db      	lsls	r3, r3, #3
 8002c96:	440b      	add	r3, r1
 8002c98:	3310      	adds	r3, #16
 8002c9a:	7bfa      	ldrb	r2, [r7, #15]
 8002c9c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002c9e:	7bfa      	ldrb	r2, [r7, #15]
 8002ca0:	6879      	ldr	r1, [r7, #4]
 8002ca2:	4613      	mov	r3, r2
 8002ca4:	009b      	lsls	r3, r3, #2
 8002ca6:	4413      	add	r3, r2
 8002ca8:	00db      	lsls	r3, r3, #3
 8002caa:	440b      	add	r3, r1
 8002cac:	3313      	adds	r3, #19
 8002cae:	2200      	movs	r2, #0
 8002cb0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002cb2:	7bfa      	ldrb	r2, [r7, #15]
 8002cb4:	6879      	ldr	r1, [r7, #4]
 8002cb6:	4613      	mov	r3, r2
 8002cb8:	009b      	lsls	r3, r3, #2
 8002cba:	4413      	add	r3, r2
 8002cbc:	00db      	lsls	r3, r3, #3
 8002cbe:	440b      	add	r3, r1
 8002cc0:	3320      	adds	r3, #32
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002cc6:	7bfa      	ldrb	r2, [r7, #15]
 8002cc8:	6879      	ldr	r1, [r7, #4]
 8002cca:	4613      	mov	r3, r2
 8002ccc:	009b      	lsls	r3, r3, #2
 8002cce:	4413      	add	r3, r2
 8002cd0:	00db      	lsls	r3, r3, #3
 8002cd2:	440b      	add	r3, r1
 8002cd4:	3324      	adds	r3, #36	@ 0x24
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002cda:	7bfb      	ldrb	r3, [r7, #15]
 8002cdc:	6879      	ldr	r1, [r7, #4]
 8002cde:	1c5a      	adds	r2, r3, #1
 8002ce0:	4613      	mov	r3, r2
 8002ce2:	009b      	lsls	r3, r3, #2
 8002ce4:	4413      	add	r3, r2
 8002ce6:	00db      	lsls	r3, r3, #3
 8002ce8:	440b      	add	r3, r1
 8002cea:	2200      	movs	r2, #0
 8002cec:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cee:	7bfb      	ldrb	r3, [r7, #15]
 8002cf0:	3301      	adds	r3, #1
 8002cf2:	73fb      	strb	r3, [r7, #15]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	791b      	ldrb	r3, [r3, #4]
 8002cf8:	7bfa      	ldrb	r2, [r7, #15]
 8002cfa:	429a      	cmp	r2, r3
 8002cfc:	d3bb      	bcc.n	8002c76 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cfe:	2300      	movs	r3, #0
 8002d00:	73fb      	strb	r3, [r7, #15]
 8002d02:	e044      	b.n	8002d8e <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002d04:	7bfa      	ldrb	r2, [r7, #15]
 8002d06:	6879      	ldr	r1, [r7, #4]
 8002d08:	4613      	mov	r3, r2
 8002d0a:	009b      	lsls	r3, r3, #2
 8002d0c:	4413      	add	r3, r2
 8002d0e:	00db      	lsls	r3, r3, #3
 8002d10:	440b      	add	r3, r1
 8002d12:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8002d16:	2200      	movs	r2, #0
 8002d18:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002d1a:	7bfa      	ldrb	r2, [r7, #15]
 8002d1c:	6879      	ldr	r1, [r7, #4]
 8002d1e:	4613      	mov	r3, r2
 8002d20:	009b      	lsls	r3, r3, #2
 8002d22:	4413      	add	r3, r2
 8002d24:	00db      	lsls	r3, r3, #3
 8002d26:	440b      	add	r3, r1
 8002d28:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002d2c:	7bfa      	ldrb	r2, [r7, #15]
 8002d2e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002d30:	7bfa      	ldrb	r2, [r7, #15]
 8002d32:	6879      	ldr	r1, [r7, #4]
 8002d34:	4613      	mov	r3, r2
 8002d36:	009b      	lsls	r3, r3, #2
 8002d38:	4413      	add	r3, r2
 8002d3a:	00db      	lsls	r3, r3, #3
 8002d3c:	440b      	add	r3, r1
 8002d3e:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8002d42:	2200      	movs	r2, #0
 8002d44:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002d46:	7bfa      	ldrb	r2, [r7, #15]
 8002d48:	6879      	ldr	r1, [r7, #4]
 8002d4a:	4613      	mov	r3, r2
 8002d4c:	009b      	lsls	r3, r3, #2
 8002d4e:	4413      	add	r3, r2
 8002d50:	00db      	lsls	r3, r3, #3
 8002d52:	440b      	add	r3, r1
 8002d54:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8002d58:	2200      	movs	r2, #0
 8002d5a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002d5c:	7bfa      	ldrb	r2, [r7, #15]
 8002d5e:	6879      	ldr	r1, [r7, #4]
 8002d60:	4613      	mov	r3, r2
 8002d62:	009b      	lsls	r3, r3, #2
 8002d64:	4413      	add	r3, r2
 8002d66:	00db      	lsls	r3, r3, #3
 8002d68:	440b      	add	r3, r1
 8002d6a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8002d6e:	2200      	movs	r2, #0
 8002d70:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002d72:	7bfa      	ldrb	r2, [r7, #15]
 8002d74:	6879      	ldr	r1, [r7, #4]
 8002d76:	4613      	mov	r3, r2
 8002d78:	009b      	lsls	r3, r3, #2
 8002d7a:	4413      	add	r3, r2
 8002d7c:	00db      	lsls	r3, r3, #3
 8002d7e:	440b      	add	r3, r1
 8002d80:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002d84:	2200      	movs	r2, #0
 8002d86:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d88:	7bfb      	ldrb	r3, [r7, #15]
 8002d8a:	3301      	adds	r3, #1
 8002d8c:	73fb      	strb	r3, [r7, #15]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	791b      	ldrb	r3, [r3, #4]
 8002d92:	7bfa      	ldrb	r2, [r7, #15]
 8002d94:	429a      	cmp	r2, r3
 8002d96:	d3b5      	bcc.n	8002d04 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6818      	ldr	r0, [r3, #0]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	3304      	adds	r3, #4
 8002da0:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002da4:	f004 ffde 	bl	8007d64 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2200      	movs	r2, #0
 8002dac:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2201      	movs	r2, #1
 8002db2:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	7a9b      	ldrb	r3, [r3, #10]
 8002dba:	2b01      	cmp	r3, #1
 8002dbc:	d102      	bne.n	8002dc4 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	f001 fc0e 	bl	80045e0 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8002dc4:	2300      	movs	r3, #0
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	3710      	adds	r7, #16
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}

08002dce <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002dce:	b580      	push	{r7, lr}
 8002dd0:	b082      	sub	sp, #8
 8002dd2:	af00      	add	r7, sp, #0
 8002dd4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002ddc:	2b01      	cmp	r3, #1
 8002dde:	d101      	bne.n	8002de4 <HAL_PCD_Start+0x16>
 8002de0:	2302      	movs	r3, #2
 8002de2:	e012      	b.n	8002e0a <HAL_PCD_Start+0x3c>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2201      	movs	r2, #1
 8002de8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4618      	mov	r0, r3
 8002df2:	f004 ff85 	bl	8007d00 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f006 fd62 	bl	80098c4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2200      	movs	r2, #0
 8002e04:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002e08:	2300      	movs	r3, #0
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3708      	adds	r7, #8
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}

08002e12 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002e12:	b580      	push	{r7, lr}
 8002e14:	b084      	sub	sp, #16
 8002e16:	af00      	add	r7, sp, #0
 8002e18:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f006 fd67 	bl	80098f2 <USB_ReadInterrupts>
 8002e24:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d003      	beq.n	8002e38 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002e30:	6878      	ldr	r0, [r7, #4]
 8002e32:	f000 fb06 	bl	8003442 <PCD_EP_ISR_Handler>

    return;
 8002e36:	e110      	b.n	800305a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d013      	beq.n	8002e6a <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002e4a:	b29a      	uxth	r2, r3
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e54:	b292      	uxth	r2, r2
 8002e56:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002e5a:	6878      	ldr	r0, [r7, #4]
 8002e5c:	f008 fcd9 	bl	800b812 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002e60:	2100      	movs	r1, #0
 8002e62:	6878      	ldr	r0, [r7, #4]
 8002e64:	f000 f8fc 	bl	8003060 <HAL_PCD_SetAddress>

    return;
 8002e68:	e0f7      	b.n	800305a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d00c      	beq.n	8002e8e <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002e7c:	b29a      	uxth	r2, r3
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002e86:	b292      	uxth	r2, r2
 8002e88:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002e8c:	e0e5      	b.n	800305a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d00c      	beq.n	8002eb2 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002ea0:	b29a      	uxth	r2, r3
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002eaa:	b292      	uxth	r2, r2
 8002eac:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002eb0:	e0d3      	b.n	800305a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d034      	beq.n	8002f26 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002ec4:	b29a      	uxth	r2, r3
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f022 0204 	bic.w	r2, r2, #4
 8002ece:	b292      	uxth	r2, r2
 8002ed0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002edc:	b29a      	uxth	r2, r3
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f022 0208 	bic.w	r2, r2, #8
 8002ee6:	b292      	uxth	r2, r2
 8002ee8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8002ef2:	2b01      	cmp	r3, #1
 8002ef4:	d107      	bne.n	8002f06 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002efe:	2100      	movs	r1, #0
 8002f00:	6878      	ldr	r0, [r7, #4]
 8002f02:	f008 fe79 	bl	800bbf8 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002f06:	6878      	ldr	r0, [r7, #4]
 8002f08:	f008 fcbc 	bl	800b884 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002f14:	b29a      	uxth	r2, r3
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002f1e:	b292      	uxth	r2, r2
 8002f20:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002f24:	e099      	b.n	800305a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d027      	beq.n	8002f80 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002f38:	b29a      	uxth	r2, r3
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f042 0208 	orr.w	r2, r2, #8
 8002f42:	b292      	uxth	r2, r2
 8002f44:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002f50:	b29a      	uxth	r2, r3
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002f5a:	b292      	uxth	r2, r2
 8002f5c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002f68:	b29a      	uxth	r2, r3
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f042 0204 	orr.w	r2, r2, #4
 8002f72:	b292      	uxth	r2, r2
 8002f74:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002f78:	6878      	ldr	r0, [r7, #4]
 8002f7a:	f008 fc69 	bl	800b850 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002f7e:	e06c      	b.n	800305a <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d040      	beq.n	800300c <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002f92:	b29a      	uxth	r2, r3
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002f9c:	b292      	uxth	r2, r2
 8002f9e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d12b      	bne.n	8003004 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002fb4:	b29a      	uxth	r2, r3
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f042 0204 	orr.w	r2, r2, #4
 8002fbe:	b292      	uxth	r2, r2
 8002fc0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002fcc:	b29a      	uxth	r2, r3
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f042 0208 	orr.w	r2, r2, #8
 8002fd6:	b292      	uxth	r2, r2
 8002fd8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2201      	movs	r2, #1
 8002fe0:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8002fec:	b29b      	uxth	r3, r3
 8002fee:	089b      	lsrs	r3, r3, #2
 8002ff0:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002ffa:	2101      	movs	r1, #1
 8002ffc:	6878      	ldr	r0, [r7, #4]
 8002ffe:	f008 fdfb 	bl	800bbf8 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8003002:	e02a      	b.n	800305a <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8003004:	6878      	ldr	r0, [r7, #4]
 8003006:	f008 fc23 	bl	800b850 <HAL_PCD_SuspendCallback>
    return;
 800300a:	e026      	b.n	800305a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003012:	2b00      	cmp	r3, #0
 8003014:	d00f      	beq.n	8003036 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800301e:	b29a      	uxth	r2, r3
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003028:	b292      	uxth	r2, r2
 800302a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800302e:	6878      	ldr	r0, [r7, #4]
 8003030:	f008 fbe1 	bl	800b7f6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003034:	e011      	b.n	800305a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800303c:	2b00      	cmp	r3, #0
 800303e:	d00c      	beq.n	800305a <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003048:	b29a      	uxth	r2, r3
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003052:	b292      	uxth	r2, r2
 8003054:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8003058:	bf00      	nop
  }
}
 800305a:	3710      	adds	r7, #16
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}

08003060 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b082      	sub	sp, #8
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
 8003068:	460b      	mov	r3, r1
 800306a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003072:	2b01      	cmp	r3, #1
 8003074:	d101      	bne.n	800307a <HAL_PCD_SetAddress+0x1a>
 8003076:	2302      	movs	r3, #2
 8003078:	e012      	b.n	80030a0 <HAL_PCD_SetAddress+0x40>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2201      	movs	r2, #1
 800307e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	78fa      	ldrb	r2, [r7, #3]
 8003086:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	78fa      	ldrb	r2, [r7, #3]
 800308e:	4611      	mov	r1, r2
 8003090:	4618      	mov	r0, r3
 8003092:	f006 fc03 	bl	800989c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2200      	movs	r2, #0
 800309a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800309e:	2300      	movs	r3, #0
}
 80030a0:	4618      	mov	r0, r3
 80030a2:	3708      	adds	r7, #8
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}

080030a8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b084      	sub	sp, #16
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
 80030b0:	4608      	mov	r0, r1
 80030b2:	4611      	mov	r1, r2
 80030b4:	461a      	mov	r2, r3
 80030b6:	4603      	mov	r3, r0
 80030b8:	70fb      	strb	r3, [r7, #3]
 80030ba:	460b      	mov	r3, r1
 80030bc:	803b      	strh	r3, [r7, #0]
 80030be:	4613      	mov	r3, r2
 80030c0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 80030c2:	2300      	movs	r3, #0
 80030c4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80030c6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	da0e      	bge.n	80030ec <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030ce:	78fb      	ldrb	r3, [r7, #3]
 80030d0:	f003 0207 	and.w	r2, r3, #7
 80030d4:	4613      	mov	r3, r2
 80030d6:	009b      	lsls	r3, r3, #2
 80030d8:	4413      	add	r3, r2
 80030da:	00db      	lsls	r3, r3, #3
 80030dc:	3310      	adds	r3, #16
 80030de:	687a      	ldr	r2, [r7, #4]
 80030e0:	4413      	add	r3, r2
 80030e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	2201      	movs	r2, #1
 80030e8:	705a      	strb	r2, [r3, #1]
 80030ea:	e00e      	b.n	800310a <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80030ec:	78fb      	ldrb	r3, [r7, #3]
 80030ee:	f003 0207 	and.w	r2, r3, #7
 80030f2:	4613      	mov	r3, r2
 80030f4:	009b      	lsls	r3, r3, #2
 80030f6:	4413      	add	r3, r2
 80030f8:	00db      	lsls	r3, r3, #3
 80030fa:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80030fe:	687a      	ldr	r2, [r7, #4]
 8003100:	4413      	add	r3, r2
 8003102:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	2200      	movs	r2, #0
 8003108:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800310a:	78fb      	ldrb	r3, [r7, #3]
 800310c:	f003 0307 	and.w	r3, r3, #7
 8003110:	b2da      	uxtb	r2, r3
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8003116:	883b      	ldrh	r3, [r7, #0]
 8003118:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	78ba      	ldrb	r2, [r7, #2]
 8003124:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003126:	78bb      	ldrb	r3, [r7, #2]
 8003128:	2b02      	cmp	r3, #2
 800312a:	d102      	bne.n	8003132 <HAL_PCD_EP_Open+0x8a>
  {
    ep->data_pid_start = 0U;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	2200      	movs	r2, #0
 8003130:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003138:	2b01      	cmp	r3, #1
 800313a:	d101      	bne.n	8003140 <HAL_PCD_EP_Open+0x98>
 800313c:	2302      	movs	r3, #2
 800313e:	e00e      	b.n	800315e <HAL_PCD_EP_Open+0xb6>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2201      	movs	r2, #1
 8003144:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	68f9      	ldr	r1, [r7, #12]
 800314e:	4618      	mov	r0, r3
 8003150:	f004 fe26 	bl	8007da0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2200      	movs	r2, #0
 8003158:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 800315c:	7afb      	ldrb	r3, [r7, #11]
}
 800315e:	4618      	mov	r0, r3
 8003160:	3710      	adds	r7, #16
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}

08003166 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003166:	b580      	push	{r7, lr}
 8003168:	b084      	sub	sp, #16
 800316a:	af00      	add	r7, sp, #0
 800316c:	6078      	str	r0, [r7, #4]
 800316e:	460b      	mov	r3, r1
 8003170:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003172:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003176:	2b00      	cmp	r3, #0
 8003178:	da0e      	bge.n	8003198 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800317a:	78fb      	ldrb	r3, [r7, #3]
 800317c:	f003 0207 	and.w	r2, r3, #7
 8003180:	4613      	mov	r3, r2
 8003182:	009b      	lsls	r3, r3, #2
 8003184:	4413      	add	r3, r2
 8003186:	00db      	lsls	r3, r3, #3
 8003188:	3310      	adds	r3, #16
 800318a:	687a      	ldr	r2, [r7, #4]
 800318c:	4413      	add	r3, r2
 800318e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	2201      	movs	r2, #1
 8003194:	705a      	strb	r2, [r3, #1]
 8003196:	e00e      	b.n	80031b6 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003198:	78fb      	ldrb	r3, [r7, #3]
 800319a:	f003 0207 	and.w	r2, r3, #7
 800319e:	4613      	mov	r3, r2
 80031a0:	009b      	lsls	r3, r3, #2
 80031a2:	4413      	add	r3, r2
 80031a4:	00db      	lsls	r3, r3, #3
 80031a6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80031aa:	687a      	ldr	r2, [r7, #4]
 80031ac:	4413      	add	r3, r2
 80031ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2200      	movs	r2, #0
 80031b4:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80031b6:	78fb      	ldrb	r3, [r7, #3]
 80031b8:	f003 0307 	and.w	r3, r3, #7
 80031bc:	b2da      	uxtb	r2, r3
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80031c8:	2b01      	cmp	r3, #1
 80031ca:	d101      	bne.n	80031d0 <HAL_PCD_EP_Close+0x6a>
 80031cc:	2302      	movs	r3, #2
 80031ce:	e00e      	b.n	80031ee <HAL_PCD_EP_Close+0x88>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2201      	movs	r2, #1
 80031d4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	68f9      	ldr	r1, [r7, #12]
 80031de:	4618      	mov	r0, r3
 80031e0:	f005 fac6 	bl	8008770 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2200      	movs	r2, #0
 80031e8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 80031ec:	2300      	movs	r3, #0
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	3710      	adds	r7, #16
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}

080031f6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80031f6:	b580      	push	{r7, lr}
 80031f8:	b086      	sub	sp, #24
 80031fa:	af00      	add	r7, sp, #0
 80031fc:	60f8      	str	r0, [r7, #12]
 80031fe:	607a      	str	r2, [r7, #4]
 8003200:	603b      	str	r3, [r7, #0]
 8003202:	460b      	mov	r3, r1
 8003204:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003206:	7afb      	ldrb	r3, [r7, #11]
 8003208:	f003 0207 	and.w	r2, r3, #7
 800320c:	4613      	mov	r3, r2
 800320e:	009b      	lsls	r3, r3, #2
 8003210:	4413      	add	r3, r2
 8003212:	00db      	lsls	r3, r3, #3
 8003214:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003218:	68fa      	ldr	r2, [r7, #12]
 800321a:	4413      	add	r3, r2
 800321c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	687a      	ldr	r2, [r7, #4]
 8003222:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	683a      	ldr	r2, [r7, #0]
 8003228:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	2200      	movs	r2, #0
 800322e:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	2200      	movs	r2, #0
 8003234:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003236:	7afb      	ldrb	r3, [r7, #11]
 8003238:	f003 0307 	and.w	r3, r3, #7
 800323c:	b2da      	uxtb	r2, r3
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	6979      	ldr	r1, [r7, #20]
 8003248:	4618      	mov	r0, r3
 800324a:	f005 fc7e 	bl	8008b4a <USB_EPStartXfer>

  return HAL_OK;
 800324e:	2300      	movs	r3, #0
}
 8003250:	4618      	mov	r0, r3
 8003252:	3718      	adds	r7, #24
 8003254:	46bd      	mov	sp, r7
 8003256:	bd80      	pop	{r7, pc}

08003258 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003258:	b480      	push	{r7}
 800325a:	b083      	sub	sp, #12
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
 8003260:	460b      	mov	r3, r1
 8003262:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003264:	78fb      	ldrb	r3, [r7, #3]
 8003266:	f003 0207 	and.w	r2, r3, #7
 800326a:	6879      	ldr	r1, [r7, #4]
 800326c:	4613      	mov	r3, r2
 800326e:	009b      	lsls	r3, r3, #2
 8003270:	4413      	add	r3, r2
 8003272:	00db      	lsls	r3, r3, #3
 8003274:	440b      	add	r3, r1
 8003276:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 800327a:	681b      	ldr	r3, [r3, #0]
}
 800327c:	4618      	mov	r0, r3
 800327e:	370c      	adds	r7, #12
 8003280:	46bd      	mov	sp, r7
 8003282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003286:	4770      	bx	lr

08003288 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b086      	sub	sp, #24
 800328c:	af00      	add	r7, sp, #0
 800328e:	60f8      	str	r0, [r7, #12]
 8003290:	607a      	str	r2, [r7, #4]
 8003292:	603b      	str	r3, [r7, #0]
 8003294:	460b      	mov	r3, r1
 8003296:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003298:	7afb      	ldrb	r3, [r7, #11]
 800329a:	f003 0207 	and.w	r2, r3, #7
 800329e:	4613      	mov	r3, r2
 80032a0:	009b      	lsls	r3, r3, #2
 80032a2:	4413      	add	r3, r2
 80032a4:	00db      	lsls	r3, r3, #3
 80032a6:	3310      	adds	r3, #16
 80032a8:	68fa      	ldr	r2, [r7, #12]
 80032aa:	4413      	add	r3, r2
 80032ac:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	687a      	ldr	r2, [r7, #4]
 80032b2:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	683a      	ldr	r2, [r7, #0]
 80032b8:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	2201      	movs	r2, #1
 80032be:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	683a      	ldr	r2, [r7, #0]
 80032c6:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	2200      	movs	r2, #0
 80032cc:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	2201      	movs	r2, #1
 80032d2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80032d4:	7afb      	ldrb	r3, [r7, #11]
 80032d6:	f003 0307 	and.w	r3, r3, #7
 80032da:	b2da      	uxtb	r2, r3
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	6979      	ldr	r1, [r7, #20]
 80032e6:	4618      	mov	r0, r3
 80032e8:	f005 fc2f 	bl	8008b4a <USB_EPStartXfer>

  return HAL_OK;
 80032ec:	2300      	movs	r3, #0
}
 80032ee:	4618      	mov	r0, r3
 80032f0:	3718      	adds	r7, #24
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}

080032f6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80032f6:	b580      	push	{r7, lr}
 80032f8:	b084      	sub	sp, #16
 80032fa:	af00      	add	r7, sp, #0
 80032fc:	6078      	str	r0, [r7, #4]
 80032fe:	460b      	mov	r3, r1
 8003300:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003302:	78fb      	ldrb	r3, [r7, #3]
 8003304:	f003 0307 	and.w	r3, r3, #7
 8003308:	687a      	ldr	r2, [r7, #4]
 800330a:	7912      	ldrb	r2, [r2, #4]
 800330c:	4293      	cmp	r3, r2
 800330e:	d901      	bls.n	8003314 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003310:	2301      	movs	r3, #1
 8003312:	e03e      	b.n	8003392 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003314:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003318:	2b00      	cmp	r3, #0
 800331a:	da0e      	bge.n	800333a <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800331c:	78fb      	ldrb	r3, [r7, #3]
 800331e:	f003 0207 	and.w	r2, r3, #7
 8003322:	4613      	mov	r3, r2
 8003324:	009b      	lsls	r3, r3, #2
 8003326:	4413      	add	r3, r2
 8003328:	00db      	lsls	r3, r3, #3
 800332a:	3310      	adds	r3, #16
 800332c:	687a      	ldr	r2, [r7, #4]
 800332e:	4413      	add	r3, r2
 8003330:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	2201      	movs	r2, #1
 8003336:	705a      	strb	r2, [r3, #1]
 8003338:	e00c      	b.n	8003354 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800333a:	78fa      	ldrb	r2, [r7, #3]
 800333c:	4613      	mov	r3, r2
 800333e:	009b      	lsls	r3, r3, #2
 8003340:	4413      	add	r3, r2
 8003342:	00db      	lsls	r3, r3, #3
 8003344:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003348:	687a      	ldr	r2, [r7, #4]
 800334a:	4413      	add	r3, r2
 800334c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	2200      	movs	r2, #0
 8003352:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	2201      	movs	r2, #1
 8003358:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800335a:	78fb      	ldrb	r3, [r7, #3]
 800335c:	f003 0307 	and.w	r3, r3, #7
 8003360:	b2da      	uxtb	r2, r3
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800336c:	2b01      	cmp	r3, #1
 800336e:	d101      	bne.n	8003374 <HAL_PCD_EP_SetStall+0x7e>
 8003370:	2302      	movs	r3, #2
 8003372:	e00e      	b.n	8003392 <HAL_PCD_EP_SetStall+0x9c>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2201      	movs	r2, #1
 8003378:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	68f9      	ldr	r1, [r7, #12]
 8003382:	4618      	mov	r0, r3
 8003384:	f006 f990 	bl	80096a8 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2200      	movs	r2, #0
 800338c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003390:	2300      	movs	r3, #0
}
 8003392:	4618      	mov	r0, r3
 8003394:	3710      	adds	r7, #16
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}

0800339a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800339a:	b580      	push	{r7, lr}
 800339c:	b084      	sub	sp, #16
 800339e:	af00      	add	r7, sp, #0
 80033a0:	6078      	str	r0, [r7, #4]
 80033a2:	460b      	mov	r3, r1
 80033a4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80033a6:	78fb      	ldrb	r3, [r7, #3]
 80033a8:	f003 030f 	and.w	r3, r3, #15
 80033ac:	687a      	ldr	r2, [r7, #4]
 80033ae:	7912      	ldrb	r2, [r2, #4]
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d901      	bls.n	80033b8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80033b4:	2301      	movs	r3, #1
 80033b6:	e040      	b.n	800343a <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80033b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	da0e      	bge.n	80033de <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80033c0:	78fb      	ldrb	r3, [r7, #3]
 80033c2:	f003 0207 	and.w	r2, r3, #7
 80033c6:	4613      	mov	r3, r2
 80033c8:	009b      	lsls	r3, r3, #2
 80033ca:	4413      	add	r3, r2
 80033cc:	00db      	lsls	r3, r3, #3
 80033ce:	3310      	adds	r3, #16
 80033d0:	687a      	ldr	r2, [r7, #4]
 80033d2:	4413      	add	r3, r2
 80033d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	2201      	movs	r2, #1
 80033da:	705a      	strb	r2, [r3, #1]
 80033dc:	e00e      	b.n	80033fc <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80033de:	78fb      	ldrb	r3, [r7, #3]
 80033e0:	f003 0207 	and.w	r2, r3, #7
 80033e4:	4613      	mov	r3, r2
 80033e6:	009b      	lsls	r3, r3, #2
 80033e8:	4413      	add	r3, r2
 80033ea:	00db      	lsls	r3, r3, #3
 80033ec:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80033f0:	687a      	ldr	r2, [r7, #4]
 80033f2:	4413      	add	r3, r2
 80033f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2200      	movs	r2, #0
 80033fa:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2200      	movs	r2, #0
 8003400:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003402:	78fb      	ldrb	r3, [r7, #3]
 8003404:	f003 0307 	and.w	r3, r3, #7
 8003408:	b2da      	uxtb	r2, r3
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003414:	2b01      	cmp	r3, #1
 8003416:	d101      	bne.n	800341c <HAL_PCD_EP_ClrStall+0x82>
 8003418:	2302      	movs	r3, #2
 800341a:	e00e      	b.n	800343a <HAL_PCD_EP_ClrStall+0xa0>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2201      	movs	r2, #1
 8003420:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	68f9      	ldr	r1, [r7, #12]
 800342a:	4618      	mov	r0, r3
 800342c:	f006 f98d 	bl	800974a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2200      	movs	r2, #0
 8003434:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003438:	2300      	movs	r3, #0
}
 800343a:	4618      	mov	r0, r3
 800343c:	3710      	adds	r7, #16
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}

08003442 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003442:	b580      	push	{r7, lr}
 8003444:	b092      	sub	sp, #72	@ 0x48
 8003446:	af00      	add	r7, sp, #0
 8003448:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800344a:	e333      	b.n	8003ab4 <PCD_EP_ISR_Handler+0x672>
  {
    wIstr = hpcd->Instance->ISTR;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003454:	877b      	strh	r3, [r7, #58]	@ 0x3a

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003456:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8003458:	b2db      	uxtb	r3, r3
 800345a:	f003 030f 	and.w	r3, r3, #15
 800345e:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39

    if (epindex == 0U)
 8003462:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8003466:	2b00      	cmp	r3, #0
 8003468:	f040 8108 	bne.w	800367c <PCD_EP_ISR_Handler+0x23a>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800346c:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800346e:	f003 0310 	and.w	r3, r3, #16
 8003472:	2b00      	cmp	r3, #0
 8003474:	d14c      	bne.n	8003510 <PCD_EP_ISR_Handler+0xce>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	881b      	ldrh	r3, [r3, #0]
 800347c:	b29b      	uxth	r3, r3
 800347e:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8003482:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003486:	813b      	strh	r3, [r7, #8]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681a      	ldr	r2, [r3, #0]
 800348c:	893b      	ldrh	r3, [r7, #8]
 800348e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003492:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003496:	b29b      	uxth	r3, r3
 8003498:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	3310      	adds	r3, #16
 800349e:	643b      	str	r3, [r7, #64]	@ 0x40

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80034a8:	b29b      	uxth	r3, r3
 80034aa:	461a      	mov	r2, r3
 80034ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80034ae:	781b      	ldrb	r3, [r3, #0]
 80034b0:	00db      	lsls	r3, r3, #3
 80034b2:	4413      	add	r3, r2
 80034b4:	687a      	ldr	r2, [r7, #4]
 80034b6:	6812      	ldr	r2, [r2, #0]
 80034b8:	4413      	add	r3, r2
 80034ba:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80034be:	881b      	ldrh	r3, [r3, #0]
 80034c0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80034c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80034c6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80034c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80034ca:	695a      	ldr	r2, [r3, #20]
 80034cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80034ce:	69db      	ldr	r3, [r3, #28]
 80034d0:	441a      	add	r2, r3
 80034d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80034d4:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80034d6:	2100      	movs	r1, #0
 80034d8:	6878      	ldr	r0, [r7, #4]
 80034da:	f008 f972 	bl	800b7c2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	7b1b      	ldrb	r3, [r3, #12]
 80034e2:	b2db      	uxtb	r3, r3
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	f000 82e5 	beq.w	8003ab4 <PCD_EP_ISR_Handler+0x672>
 80034ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80034ec:	699b      	ldr	r3, [r3, #24]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	f040 82e0 	bne.w	8003ab4 <PCD_EP_ISR_Handler+0x672>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	7b1b      	ldrb	r3, [r3, #12]
 80034f8:	b2db      	uxtb	r3, r3
 80034fa:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80034fe:	b2da      	uxtb	r2, r3
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2200      	movs	r2, #0
 800350c:	731a      	strb	r2, [r3, #12]
 800350e:	e2d1      	b.n	8003ab4 <PCD_EP_ISR_Handler+0x672>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003516:	643b      	str	r3, [r7, #64]	@ 0x40
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	881b      	ldrh	r3, [r3, #0]
 800351e:	86fb      	strh	r3, [r7, #54]	@ 0x36

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003520:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003522:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003526:	2b00      	cmp	r3, #0
 8003528:	d032      	beq.n	8003590 <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003532:	b29b      	uxth	r3, r3
 8003534:	461a      	mov	r2, r3
 8003536:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003538:	781b      	ldrb	r3, [r3, #0]
 800353a:	00db      	lsls	r3, r3, #3
 800353c:	4413      	add	r3, r2
 800353e:	687a      	ldr	r2, [r7, #4]
 8003540:	6812      	ldr	r2, [r2, #0]
 8003542:	4413      	add	r3, r2
 8003544:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003548:	881b      	ldrh	r3, [r3, #0]
 800354a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800354e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003550:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6818      	ldr	r0, [r3, #0]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 800355c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800355e:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003560:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003562:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003564:	b29b      	uxth	r3, r3
 8003566:	f006 fa16 	bl	8009996 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	881b      	ldrh	r3, [r3, #0]
 8003570:	b29a      	uxth	r2, r3
 8003572:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003576:	4013      	ands	r3, r2
 8003578:	817b      	strh	r3, [r7, #10]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	897a      	ldrh	r2, [r7, #10]
 8003580:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003584:	b292      	uxth	r2, r2
 8003586:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003588:	6878      	ldr	r0, [r7, #4]
 800358a:	f008 f8ed 	bl	800b768 <HAL_PCD_SetupStageCallback>
 800358e:	e291      	b.n	8003ab4 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003590:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8003594:	2b00      	cmp	r3, #0
 8003596:	f280 828d 	bge.w	8003ab4 <PCD_EP_ISR_Handler+0x672>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	881b      	ldrh	r3, [r3, #0]
 80035a0:	b29a      	uxth	r2, r3
 80035a2:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80035a6:	4013      	ands	r3, r2
 80035a8:	81fb      	strh	r3, [r7, #14]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	89fa      	ldrh	r2, [r7, #14]
 80035b0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80035b4:	b292      	uxth	r2, r2
 80035b6:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80035c0:	b29b      	uxth	r3, r3
 80035c2:	461a      	mov	r2, r3
 80035c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80035c6:	781b      	ldrb	r3, [r3, #0]
 80035c8:	00db      	lsls	r3, r3, #3
 80035ca:	4413      	add	r3, r2
 80035cc:	687a      	ldr	r2, [r7, #4]
 80035ce:	6812      	ldr	r2, [r2, #0]
 80035d0:	4413      	add	r3, r2
 80035d2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80035d6:	881b      	ldrh	r3, [r3, #0]
 80035d8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80035dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80035de:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80035e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80035e2:	69db      	ldr	r3, [r3, #28]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d019      	beq.n	800361c <PCD_EP_ISR_Handler+0x1da>
 80035e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80035ea:	695b      	ldr	r3, [r3, #20]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d015      	beq.n	800361c <PCD_EP_ISR_Handler+0x1da>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6818      	ldr	r0, [r3, #0]
 80035f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80035f6:	6959      	ldr	r1, [r3, #20]
 80035f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80035fa:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80035fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80035fe:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003600:	b29b      	uxth	r3, r3
 8003602:	f006 f9c8 	bl	8009996 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003606:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003608:	695a      	ldr	r2, [r3, #20]
 800360a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800360c:	69db      	ldr	r3, [r3, #28]
 800360e:	441a      	add	r2, r3
 8003610:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003612:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003614:	2100      	movs	r1, #0
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f008 f8b8 	bl	800b78c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	881b      	ldrh	r3, [r3, #0]
 8003622:	86fb      	strh	r3, [r7, #54]	@ 0x36

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8003624:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003626:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800362a:	2b00      	cmp	r3, #0
 800362c:	f040 8242 	bne.w	8003ab4 <PCD_EP_ISR_Handler+0x672>
 8003630:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003632:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8003636:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800363a:	f000 823b 	beq.w	8003ab4 <PCD_EP_ISR_Handler+0x672>
          {
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	881b      	ldrh	r3, [r3, #0]
 8003644:	b29b      	uxth	r3, r3
 8003646:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800364a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800364e:	81bb      	strh	r3, [r7, #12]
 8003650:	89bb      	ldrh	r3, [r7, #12]
 8003652:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8003656:	81bb      	strh	r3, [r7, #12]
 8003658:	89bb      	ldrh	r3, [r7, #12]
 800365a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800365e:	81bb      	strh	r3, [r7, #12]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681a      	ldr	r2, [r3, #0]
 8003664:	89bb      	ldrh	r3, [r7, #12]
 8003666:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800366a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800366e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003672:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003676:	b29b      	uxth	r3, r3
 8003678:	8013      	strh	r3, [r2, #0]
 800367a:	e21b      	b.n	8003ab4 <PCD_EP_ISR_Handler+0x672>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	461a      	mov	r2, r3
 8003682:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8003686:	009b      	lsls	r3, r3, #2
 8003688:	4413      	add	r3, r2
 800368a:	881b      	ldrh	r3, [r3, #0]
 800368c:	86fb      	strh	r3, [r7, #54]	@ 0x36

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800368e:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8003692:	2b00      	cmp	r3, #0
 8003694:	f280 80f1 	bge.w	800387a <PCD_EP_ISR_Handler+0x438>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	461a      	mov	r2, r3
 800369e:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80036a2:	009b      	lsls	r3, r3, #2
 80036a4:	4413      	add	r3, r2
 80036a6:	881b      	ldrh	r3, [r3, #0]
 80036a8:	b29a      	uxth	r2, r3
 80036aa:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80036ae:	4013      	ands	r3, r2
 80036b0:	86bb      	strh	r3, [r7, #52]	@ 0x34
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	461a      	mov	r2, r3
 80036b8:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80036bc:	009b      	lsls	r3, r3, #2
 80036be:	4413      	add	r3, r2
 80036c0:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80036c2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80036c6:	b292      	uxth	r2, r2
 80036c8:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80036ca:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 80036ce:	4613      	mov	r3, r2
 80036d0:	009b      	lsls	r3, r3, #2
 80036d2:	4413      	add	r3, r2
 80036d4:	00db      	lsls	r3, r3, #3
 80036d6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80036da:	687a      	ldr	r2, [r7, #4]
 80036dc:	4413      	add	r3, r2
 80036de:	643b      	str	r3, [r7, #64]	@ 0x40

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80036e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80036e2:	7b1b      	ldrb	r3, [r3, #12]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d123      	bne.n	8003730 <PCD_EP_ISR_Handler+0x2ee>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80036f0:	b29b      	uxth	r3, r3
 80036f2:	461a      	mov	r2, r3
 80036f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80036f6:	781b      	ldrb	r3, [r3, #0]
 80036f8:	00db      	lsls	r3, r3, #3
 80036fa:	4413      	add	r3, r2
 80036fc:	687a      	ldr	r2, [r7, #4]
 80036fe:	6812      	ldr	r2, [r2, #0]
 8003700:	4413      	add	r3, r2
 8003702:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003706:	881b      	ldrh	r3, [r3, #0]
 8003708:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800370c:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

          if (count != 0U)
 8003710:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8003714:	2b00      	cmp	r3, #0
 8003716:	f000 808b 	beq.w	8003830 <PCD_EP_ISR_Handler+0x3ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6818      	ldr	r0, [r3, #0]
 800371e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003720:	6959      	ldr	r1, [r3, #20]
 8003722:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003724:	88da      	ldrh	r2, [r3, #6]
 8003726:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800372a:	f006 f934 	bl	8009996 <USB_ReadPMA>
 800372e:	e07f      	b.n	8003830 <PCD_EP_ISR_Handler+0x3ee>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003730:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003732:	78db      	ldrb	r3, [r3, #3]
 8003734:	2b02      	cmp	r3, #2
 8003736:	d109      	bne.n	800374c <PCD_EP_ISR_Handler+0x30a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003738:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800373a:	461a      	mov	r2, r3
 800373c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	f000 f9c6 	bl	8003ad0 <HAL_PCD_EP_DB_Receive>
 8003744:	4603      	mov	r3, r0
 8003746:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800374a:	e071      	b.n	8003830 <PCD_EP_ISR_Handler+0x3ee>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	461a      	mov	r2, r3
 8003752:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003754:	781b      	ldrb	r3, [r3, #0]
 8003756:	009b      	lsls	r3, r3, #2
 8003758:	4413      	add	r3, r2
 800375a:	881b      	ldrh	r3, [r3, #0]
 800375c:	b29b      	uxth	r3, r3
 800375e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003762:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003766:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	461a      	mov	r2, r3
 800376e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003770:	781b      	ldrb	r3, [r3, #0]
 8003772:	009b      	lsls	r3, r3, #2
 8003774:	441a      	add	r2, r3
 8003776:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8003778:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800377c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003780:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003784:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003788:	b29b      	uxth	r3, r3
 800378a:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	461a      	mov	r2, r3
 8003792:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003794:	781b      	ldrb	r3, [r3, #0]
 8003796:	009b      	lsls	r3, r3, #2
 8003798:	4413      	add	r3, r2
 800379a:	881b      	ldrh	r3, [r3, #0]
 800379c:	b29b      	uxth	r3, r3
 800379e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d022      	beq.n	80037ec <PCD_EP_ISR_Handler+0x3aa>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80037ae:	b29b      	uxth	r3, r3
 80037b0:	461a      	mov	r2, r3
 80037b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80037b4:	781b      	ldrb	r3, [r3, #0]
 80037b6:	00db      	lsls	r3, r3, #3
 80037b8:	4413      	add	r3, r2
 80037ba:	687a      	ldr	r2, [r7, #4]
 80037bc:	6812      	ldr	r2, [r2, #0]
 80037be:	4413      	add	r3, r2
 80037c0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80037c4:	881b      	ldrh	r3, [r3, #0]
 80037c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80037ca:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 80037ce:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d02c      	beq.n	8003830 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6818      	ldr	r0, [r3, #0]
 80037da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80037dc:	6959      	ldr	r1, [r3, #20]
 80037de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80037e0:	891a      	ldrh	r2, [r3, #8]
 80037e2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80037e6:	f006 f8d6 	bl	8009996 <USB_ReadPMA>
 80037ea:	e021      	b.n	8003830 <PCD_EP_ISR_Handler+0x3ee>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80037f4:	b29b      	uxth	r3, r3
 80037f6:	461a      	mov	r2, r3
 80037f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80037fa:	781b      	ldrb	r3, [r3, #0]
 80037fc:	00db      	lsls	r3, r3, #3
 80037fe:	4413      	add	r3, r2
 8003800:	687a      	ldr	r2, [r7, #4]
 8003802:	6812      	ldr	r2, [r2, #0]
 8003804:	4413      	add	r3, r2
 8003806:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800380a:	881b      	ldrh	r3, [r3, #0]
 800380c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003810:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 8003814:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8003818:	2b00      	cmp	r3, #0
 800381a:	d009      	beq.n	8003830 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6818      	ldr	r0, [r3, #0]
 8003820:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003822:	6959      	ldr	r1, [r3, #20]
 8003824:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003826:	895a      	ldrh	r2, [r3, #10]
 8003828:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800382c:	f006 f8b3 	bl	8009996 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003830:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003832:	69da      	ldr	r2, [r3, #28]
 8003834:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8003838:	441a      	add	r2, r3
 800383a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800383c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800383e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003840:	695a      	ldr	r2, [r3, #20]
 8003842:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8003846:	441a      	add	r2, r3
 8003848:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800384a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800384c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800384e:	699b      	ldr	r3, [r3, #24]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d005      	beq.n	8003860 <PCD_EP_ISR_Handler+0x41e>
 8003854:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8003858:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800385a:	691b      	ldr	r3, [r3, #16]
 800385c:	429a      	cmp	r2, r3
 800385e:	d206      	bcs.n	800386e <PCD_EP_ISR_Handler+0x42c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003860:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003862:	781b      	ldrb	r3, [r3, #0]
 8003864:	4619      	mov	r1, r3
 8003866:	6878      	ldr	r0, [r7, #4]
 8003868:	f007 ff90 	bl	800b78c <HAL_PCD_DataOutStageCallback>
 800386c:	e005      	b.n	800387a <PCD_EP_ISR_Handler+0x438>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003874:	4618      	mov	r0, r3
 8003876:	f005 f968 	bl	8008b4a <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800387a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800387c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003880:	2b00      	cmp	r3, #0
 8003882:	f000 8117 	beq.w	8003ab4 <PCD_EP_ISR_Handler+0x672>
      {
        ep = &hpcd->IN_ep[epindex];
 8003886:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 800388a:	4613      	mov	r3, r2
 800388c:	009b      	lsls	r3, r3, #2
 800388e:	4413      	add	r3, r2
 8003890:	00db      	lsls	r3, r3, #3
 8003892:	3310      	adds	r3, #16
 8003894:	687a      	ldr	r2, [r7, #4]
 8003896:	4413      	add	r3, r2
 8003898:	643b      	str	r3, [r7, #64]	@ 0x40

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	461a      	mov	r2, r3
 80038a0:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80038a4:	009b      	lsls	r3, r3, #2
 80038a6:	4413      	add	r3, r2
 80038a8:	881b      	ldrh	r3, [r3, #0]
 80038aa:	b29b      	uxth	r3, r3
 80038ac:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80038b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80038b4:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	461a      	mov	r2, r3
 80038bc:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80038c0:	009b      	lsls	r3, r3, #2
 80038c2:	441a      	add	r2, r3
 80038c4:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80038c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80038ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80038ce:	b29b      	uxth	r3, r3
 80038d0:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 80038d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80038d4:	78db      	ldrb	r3, [r3, #3]
 80038d6:	2b01      	cmp	r3, #1
 80038d8:	f040 80a1 	bne.w	8003a1e <PCD_EP_ISR_Handler+0x5dc>
        {
          ep->xfer_len = 0U;
 80038dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80038de:	2200      	movs	r2, #0
 80038e0:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80038e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80038e4:	7b1b      	ldrb	r3, [r3, #12]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	f000 8092 	beq.w	8003a10 <PCD_EP_ISR_Handler+0x5ce>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80038ec:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80038ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d046      	beq.n	8003984 <PCD_EP_ISR_Handler+0x542>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80038f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80038f8:	785b      	ldrb	r3, [r3, #1]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d126      	bne.n	800394c <PCD_EP_ISR_Handler+0x50a>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	617b      	str	r3, [r7, #20]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800390c:	b29b      	uxth	r3, r3
 800390e:	461a      	mov	r2, r3
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	4413      	add	r3, r2
 8003914:	617b      	str	r3, [r7, #20]
 8003916:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003918:	781b      	ldrb	r3, [r3, #0]
 800391a:	00da      	lsls	r2, r3, #3
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	4413      	add	r3, r2
 8003920:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003924:	613b      	str	r3, [r7, #16]
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	881b      	ldrh	r3, [r3, #0]
 800392a:	b29b      	uxth	r3, r3
 800392c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003930:	b29a      	uxth	r2, r3
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	801a      	strh	r2, [r3, #0]
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	881b      	ldrh	r3, [r3, #0]
 800393a:	b29b      	uxth	r3, r3
 800393c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003940:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003944:	b29a      	uxth	r2, r3
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	801a      	strh	r2, [r3, #0]
 800394a:	e061      	b.n	8003a10 <PCD_EP_ISR_Handler+0x5ce>
 800394c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800394e:	785b      	ldrb	r3, [r3, #1]
 8003950:	2b01      	cmp	r3, #1
 8003952:	d15d      	bne.n	8003a10 <PCD_EP_ISR_Handler+0x5ce>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	61fb      	str	r3, [r7, #28]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003962:	b29b      	uxth	r3, r3
 8003964:	461a      	mov	r2, r3
 8003966:	69fb      	ldr	r3, [r7, #28]
 8003968:	4413      	add	r3, r2
 800396a:	61fb      	str	r3, [r7, #28]
 800396c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800396e:	781b      	ldrb	r3, [r3, #0]
 8003970:	00da      	lsls	r2, r3, #3
 8003972:	69fb      	ldr	r3, [r7, #28]
 8003974:	4413      	add	r3, r2
 8003976:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800397a:	61bb      	str	r3, [r7, #24]
 800397c:	69bb      	ldr	r3, [r7, #24]
 800397e:	2200      	movs	r2, #0
 8003980:	801a      	strh	r2, [r3, #0]
 8003982:	e045      	b.n	8003a10 <PCD_EP_ISR_Handler+0x5ce>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800398a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800398c:	785b      	ldrb	r3, [r3, #1]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d126      	bne.n	80039e0 <PCD_EP_ISR_Handler+0x59e>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	627b      	str	r3, [r7, #36]	@ 0x24
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80039a0:	b29b      	uxth	r3, r3
 80039a2:	461a      	mov	r2, r3
 80039a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039a6:	4413      	add	r3, r2
 80039a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80039aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80039ac:	781b      	ldrb	r3, [r3, #0]
 80039ae:	00da      	lsls	r2, r3, #3
 80039b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039b2:	4413      	add	r3, r2
 80039b4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80039b8:	623b      	str	r3, [r7, #32]
 80039ba:	6a3b      	ldr	r3, [r7, #32]
 80039bc:	881b      	ldrh	r3, [r3, #0]
 80039be:	b29b      	uxth	r3, r3
 80039c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80039c4:	b29a      	uxth	r2, r3
 80039c6:	6a3b      	ldr	r3, [r7, #32]
 80039c8:	801a      	strh	r2, [r3, #0]
 80039ca:	6a3b      	ldr	r3, [r7, #32]
 80039cc:	881b      	ldrh	r3, [r3, #0]
 80039ce:	b29b      	uxth	r3, r3
 80039d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80039d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80039d8:	b29a      	uxth	r2, r3
 80039da:	6a3b      	ldr	r3, [r7, #32]
 80039dc:	801a      	strh	r2, [r3, #0]
 80039de:	e017      	b.n	8003a10 <PCD_EP_ISR_Handler+0x5ce>
 80039e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80039e2:	785b      	ldrb	r3, [r3, #1]
 80039e4:	2b01      	cmp	r3, #1
 80039e6:	d113      	bne.n	8003a10 <PCD_EP_ISR_Handler+0x5ce>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80039f0:	b29b      	uxth	r3, r3
 80039f2:	461a      	mov	r2, r3
 80039f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039f6:	4413      	add	r3, r2
 80039f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80039fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80039fc:	781b      	ldrb	r3, [r3, #0]
 80039fe:	00da      	lsls	r2, r3, #3
 8003a00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a02:	4413      	add	r3, r2
 8003a04:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003a08:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003a0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003a10:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a12:	781b      	ldrb	r3, [r3, #0]
 8003a14:	4619      	mov	r1, r3
 8003a16:	6878      	ldr	r0, [r7, #4]
 8003a18:	f007 fed3 	bl	800b7c2 <HAL_PCD_DataInStageCallback>
 8003a1c:	e04a      	b.n	8003ab4 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8003a1e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003a20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d13f      	bne.n	8003aa8 <PCD_EP_ISR_Handler+0x666>
          {
            /* Multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003a30:	b29b      	uxth	r3, r3
 8003a32:	461a      	mov	r2, r3
 8003a34:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a36:	781b      	ldrb	r3, [r3, #0]
 8003a38:	00db      	lsls	r3, r3, #3
 8003a3a:	4413      	add	r3, r2
 8003a3c:	687a      	ldr	r2, [r7, #4]
 8003a3e:	6812      	ldr	r2, [r2, #0]
 8003a40:	4413      	add	r3, r2
 8003a42:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003a46:	881b      	ldrh	r3, [r3, #0]
 8003a48:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a4c:	867b      	strh	r3, [r7, #50]	@ 0x32

            if (ep->xfer_len > TxPctSize)
 8003a4e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a50:	699a      	ldr	r2, [r3, #24]
 8003a52:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8003a54:	429a      	cmp	r2, r3
 8003a56:	d906      	bls.n	8003a66 <PCD_EP_ISR_Handler+0x624>
            {
              ep->xfer_len -= TxPctSize;
 8003a58:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a5a:	699a      	ldr	r2, [r3, #24]
 8003a5c:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8003a5e:	1ad2      	subs	r2, r2, r3
 8003a60:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a62:	619a      	str	r2, [r3, #24]
 8003a64:	e002      	b.n	8003a6c <PCD_EP_ISR_Handler+0x62a>
            }
            else
            {
              ep->xfer_len = 0U;
 8003a66:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a68:	2200      	movs	r2, #0
 8003a6a:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8003a6c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a6e:	699b      	ldr	r3, [r3, #24]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d106      	bne.n	8003a82 <PCD_EP_ISR_Handler+0x640>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003a74:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a76:	781b      	ldrb	r3, [r3, #0]
 8003a78:	4619      	mov	r1, r3
 8003a7a:	6878      	ldr	r0, [r7, #4]
 8003a7c:	f007 fea1 	bl	800b7c2 <HAL_PCD_DataInStageCallback>
 8003a80:	e018      	b.n	8003ab4 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8003a82:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a84:	695a      	ldr	r2, [r3, #20]
 8003a86:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8003a88:	441a      	add	r2, r3
 8003a8a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a8c:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8003a8e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a90:	69da      	ldr	r2, [r3, #28]
 8003a92:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8003a94:	441a      	add	r2, r3
 8003a96:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a98:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	f005 f852 	bl	8008b4a <USB_EPStartXfer>
 8003aa6:	e005      	b.n	8003ab4 <PCD_EP_ISR_Handler+0x672>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003aa8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003aaa:	461a      	mov	r2, r3
 8003aac:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003aae:	6878      	ldr	r0, [r7, #4]
 8003ab0:	f000 f917 	bl	8003ce2 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003abc:	b29b      	uxth	r3, r3
 8003abe:	b21b      	sxth	r3, r3
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	f6ff acc3 	blt.w	800344c <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003ac6:	2300      	movs	r3, #0
}
 8003ac8:	4618      	mov	r0, r3
 8003aca:	3748      	adds	r7, #72	@ 0x48
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd80      	pop	{r7, pc}

08003ad0 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b088      	sub	sp, #32
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	60f8      	str	r0, [r7, #12]
 8003ad8:	60b9      	str	r1, [r7, #8]
 8003ada:	4613      	mov	r3, r2
 8003adc:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003ade:	88fb      	ldrh	r3, [r7, #6]
 8003ae0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d07c      	beq.n	8003be2 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003af0:	b29b      	uxth	r3, r3
 8003af2:	461a      	mov	r2, r3
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	781b      	ldrb	r3, [r3, #0]
 8003af8:	00db      	lsls	r3, r3, #3
 8003afa:	4413      	add	r3, r2
 8003afc:	68fa      	ldr	r2, [r7, #12]
 8003afe:	6812      	ldr	r2, [r2, #0]
 8003b00:	4413      	add	r3, r2
 8003b02:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003b06:	881b      	ldrh	r3, [r3, #0]
 8003b08:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b0c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	699a      	ldr	r2, [r3, #24]
 8003b12:	8b7b      	ldrh	r3, [r7, #26]
 8003b14:	429a      	cmp	r2, r3
 8003b16:	d306      	bcc.n	8003b26 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	699a      	ldr	r2, [r3, #24]
 8003b1c:	8b7b      	ldrh	r3, [r7, #26]
 8003b1e:	1ad2      	subs	r2, r2, r3
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	619a      	str	r2, [r3, #24]
 8003b24:	e002      	b.n	8003b2c <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	699b      	ldr	r3, [r3, #24]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d123      	bne.n	8003b7c <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* Set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	461a      	mov	r2, r3
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	781b      	ldrb	r3, [r3, #0]
 8003b3e:	009b      	lsls	r3, r3, #2
 8003b40:	4413      	add	r3, r2
 8003b42:	881b      	ldrh	r3, [r3, #0]
 8003b44:	b29b      	uxth	r3, r3
 8003b46:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003b4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b4e:	833b      	strh	r3, [r7, #24]
 8003b50:	8b3b      	ldrh	r3, [r7, #24]
 8003b52:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003b56:	833b      	strh	r3, [r7, #24]
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	461a      	mov	r2, r3
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	781b      	ldrb	r3, [r3, #0]
 8003b62:	009b      	lsls	r3, r3, #2
 8003b64:	441a      	add	r2, r3
 8003b66:	8b3b      	ldrh	r3, [r7, #24]
 8003b68:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003b6c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003b70:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003b74:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003b78:	b29b      	uxth	r3, r3
 8003b7a:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003b7c:	88fb      	ldrh	r3, [r7, #6]
 8003b7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d01f      	beq.n	8003bc6 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	461a      	mov	r2, r3
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	781b      	ldrb	r3, [r3, #0]
 8003b90:	009b      	lsls	r3, r3, #2
 8003b92:	4413      	add	r3, r2
 8003b94:	881b      	ldrh	r3, [r3, #0]
 8003b96:	b29b      	uxth	r3, r3
 8003b98:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003b9c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ba0:	82fb      	strh	r3, [r7, #22]
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	461a      	mov	r2, r3
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	781b      	ldrb	r3, [r3, #0]
 8003bac:	009b      	lsls	r3, r3, #2
 8003bae:	441a      	add	r2, r3
 8003bb0:	8afb      	ldrh	r3, [r7, #22]
 8003bb2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003bb6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003bba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003bbe:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003bc2:	b29b      	uxth	r3, r3
 8003bc4:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003bc6:	8b7b      	ldrh	r3, [r7, #26]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	f000 8085 	beq.w	8003cd8 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	6818      	ldr	r0, [r3, #0]
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	6959      	ldr	r1, [r3, #20]
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	891a      	ldrh	r2, [r3, #8]
 8003bda:	8b7b      	ldrh	r3, [r7, #26]
 8003bdc:	f005 fedb 	bl	8009996 <USB_ReadPMA>
 8003be0:	e07a      	b.n	8003cd8 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003bea:	b29b      	uxth	r3, r3
 8003bec:	461a      	mov	r2, r3
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	781b      	ldrb	r3, [r3, #0]
 8003bf2:	00db      	lsls	r3, r3, #3
 8003bf4:	4413      	add	r3, r2
 8003bf6:	68fa      	ldr	r2, [r7, #12]
 8003bf8:	6812      	ldr	r2, [r2, #0]
 8003bfa:	4413      	add	r3, r2
 8003bfc:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003c00:	881b      	ldrh	r3, [r3, #0]
 8003c02:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c06:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	699a      	ldr	r2, [r3, #24]
 8003c0c:	8b7b      	ldrh	r3, [r7, #26]
 8003c0e:	429a      	cmp	r2, r3
 8003c10:	d306      	bcc.n	8003c20 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	699a      	ldr	r2, [r3, #24]
 8003c16:	8b7b      	ldrh	r3, [r7, #26]
 8003c18:	1ad2      	subs	r2, r2, r3
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	619a      	str	r2, [r3, #24]
 8003c1e:	e002      	b.n	8003c26 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	2200      	movs	r2, #0
 8003c24:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	699b      	ldr	r3, [r3, #24]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d123      	bne.n	8003c76 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* Set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	461a      	mov	r2, r3
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	781b      	ldrb	r3, [r3, #0]
 8003c38:	009b      	lsls	r3, r3, #2
 8003c3a:	4413      	add	r3, r2
 8003c3c:	881b      	ldrh	r3, [r3, #0]
 8003c3e:	b29b      	uxth	r3, r3
 8003c40:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003c44:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c48:	83fb      	strh	r3, [r7, #30]
 8003c4a:	8bfb      	ldrh	r3, [r7, #30]
 8003c4c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003c50:	83fb      	strh	r3, [r7, #30]
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	461a      	mov	r2, r3
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	781b      	ldrb	r3, [r3, #0]
 8003c5c:	009b      	lsls	r3, r3, #2
 8003c5e:	441a      	add	r2, r3
 8003c60:	8bfb      	ldrh	r3, [r7, #30]
 8003c62:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003c66:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003c6a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003c6e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003c72:	b29b      	uxth	r3, r3
 8003c74:	8013      	strh	r3, [r2, #0]
    }

    /* Need to FreeUser Buffer */
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003c76:	88fb      	ldrh	r3, [r7, #6]
 8003c78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d11f      	bne.n	8003cc0 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	461a      	mov	r2, r3
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	781b      	ldrb	r3, [r3, #0]
 8003c8a:	009b      	lsls	r3, r3, #2
 8003c8c:	4413      	add	r3, r2
 8003c8e:	881b      	ldrh	r3, [r3, #0]
 8003c90:	b29b      	uxth	r3, r3
 8003c92:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003c96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c9a:	83bb      	strh	r3, [r7, #28]
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	461a      	mov	r2, r3
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	781b      	ldrb	r3, [r3, #0]
 8003ca6:	009b      	lsls	r3, r3, #2
 8003ca8:	441a      	add	r2, r3
 8003caa:	8bbb      	ldrh	r3, [r7, #28]
 8003cac:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003cb0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003cb4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003cb8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003cbc:	b29b      	uxth	r3, r3
 8003cbe:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003cc0:	8b7b      	ldrh	r3, [r7, #26]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d008      	beq.n	8003cd8 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	6818      	ldr	r0, [r3, #0]
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	6959      	ldr	r1, [r3, #20]
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	895a      	ldrh	r2, [r3, #10]
 8003cd2:	8b7b      	ldrh	r3, [r7, #26]
 8003cd4:	f005 fe5f 	bl	8009996 <USB_ReadPMA>
    }
  }

  return count;
 8003cd8:	8b7b      	ldrh	r3, [r7, #26]
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	3720      	adds	r7, #32
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}

08003ce2 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003ce2:	b580      	push	{r7, lr}
 8003ce4:	b0a6      	sub	sp, #152	@ 0x98
 8003ce6:	af00      	add	r7, sp, #0
 8003ce8:	60f8      	str	r0, [r7, #12]
 8003cea:	60b9      	str	r1, [r7, #8]
 8003cec:	4613      	mov	r3, r2
 8003cee:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003cf0:	88fb      	ldrh	r3, [r7, #6]
 8003cf2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	f000 81f7 	beq.w	80040ea <HAL_PCD_EP_DB_Transmit+0x408>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003d04:	b29b      	uxth	r3, r3
 8003d06:	461a      	mov	r2, r3
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	781b      	ldrb	r3, [r3, #0]
 8003d0c:	00db      	lsls	r3, r3, #3
 8003d0e:	4413      	add	r3, r2
 8003d10:	68fa      	ldr	r2, [r7, #12]
 8003d12:	6812      	ldr	r2, [r2, #0]
 8003d14:	4413      	add	r3, r2
 8003d16:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003d1a:	881b      	ldrh	r3, [r3, #0]
 8003d1c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d20:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len > TxPctSize)
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	699a      	ldr	r2, [r3, #24]
 8003d28:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8003d2c:	429a      	cmp	r2, r3
 8003d2e:	d907      	bls.n	8003d40 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	699a      	ldr	r2, [r3, #24]
 8003d34:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8003d38:	1ad2      	subs	r2, r2, r3
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	619a      	str	r2, [r3, #24]
 8003d3e:	e002      	b.n	8003d46 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	2200      	movs	r2, #0
 8003d44:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	699b      	ldr	r3, [r3, #24]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	f040 80e1 	bne.w	8003f12 <HAL_PCD_EP_DB_Transmit+0x230>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	785b      	ldrb	r3, [r3, #1]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d126      	bne.n	8003da6 <HAL_PCD_EP_DB_Transmit+0xc4>
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	633b      	str	r3, [r7, #48]	@ 0x30
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003d66:	b29b      	uxth	r3, r3
 8003d68:	461a      	mov	r2, r3
 8003d6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d6c:	4413      	add	r3, r2
 8003d6e:	633b      	str	r3, [r7, #48]	@ 0x30
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	781b      	ldrb	r3, [r3, #0]
 8003d74:	00da      	lsls	r2, r3, #3
 8003d76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d78:	4413      	add	r3, r2
 8003d7a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003d7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003d80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d82:	881b      	ldrh	r3, [r3, #0]
 8003d84:	b29b      	uxth	r3, r3
 8003d86:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d8a:	b29a      	uxth	r2, r3
 8003d8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d8e:	801a      	strh	r2, [r3, #0]
 8003d90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d92:	881b      	ldrh	r3, [r3, #0]
 8003d94:	b29b      	uxth	r3, r3
 8003d96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d9e:	b29a      	uxth	r2, r3
 8003da0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003da2:	801a      	strh	r2, [r3, #0]
 8003da4:	e01a      	b.n	8003ddc <HAL_PCD_EP_DB_Transmit+0xfa>
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	785b      	ldrb	r3, [r3, #1]
 8003daa:	2b01      	cmp	r3, #1
 8003dac:	d116      	bne.n	8003ddc <HAL_PCD_EP_DB_Transmit+0xfa>
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003dbc:	b29b      	uxth	r3, r3
 8003dbe:	461a      	mov	r2, r3
 8003dc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003dc2:	4413      	add	r3, r2
 8003dc4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	781b      	ldrb	r3, [r3, #0]
 8003dca:	00da      	lsls	r2, r3, #3
 8003dcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003dce:	4413      	add	r3, r2
 8003dd0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003dd4:	637b      	str	r3, [r7, #52]	@ 0x34
 8003dd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003dd8:	2200      	movs	r2, #0
 8003dda:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	785b      	ldrb	r3, [r3, #1]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d126      	bne.n	8003e38 <HAL_PCD_EP_DB_Transmit+0x156>
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	623b      	str	r3, [r7, #32]
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003df8:	b29b      	uxth	r3, r3
 8003dfa:	461a      	mov	r2, r3
 8003dfc:	6a3b      	ldr	r3, [r7, #32]
 8003dfe:	4413      	add	r3, r2
 8003e00:	623b      	str	r3, [r7, #32]
 8003e02:	68bb      	ldr	r3, [r7, #8]
 8003e04:	781b      	ldrb	r3, [r3, #0]
 8003e06:	00da      	lsls	r2, r3, #3
 8003e08:	6a3b      	ldr	r3, [r7, #32]
 8003e0a:	4413      	add	r3, r2
 8003e0c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003e10:	61fb      	str	r3, [r7, #28]
 8003e12:	69fb      	ldr	r3, [r7, #28]
 8003e14:	881b      	ldrh	r3, [r3, #0]
 8003e16:	b29b      	uxth	r3, r3
 8003e18:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e1c:	b29a      	uxth	r2, r3
 8003e1e:	69fb      	ldr	r3, [r7, #28]
 8003e20:	801a      	strh	r2, [r3, #0]
 8003e22:	69fb      	ldr	r3, [r7, #28]
 8003e24:	881b      	ldrh	r3, [r3, #0]
 8003e26:	b29b      	uxth	r3, r3
 8003e28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e30:	b29a      	uxth	r2, r3
 8003e32:	69fb      	ldr	r3, [r7, #28]
 8003e34:	801a      	strh	r2, [r3, #0]
 8003e36:	e017      	b.n	8003e68 <HAL_PCD_EP_DB_Transmit+0x186>
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	785b      	ldrb	r3, [r3, #1]
 8003e3c:	2b01      	cmp	r3, #1
 8003e3e:	d113      	bne.n	8003e68 <HAL_PCD_EP_DB_Transmit+0x186>
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003e48:	b29b      	uxth	r3, r3
 8003e4a:	461a      	mov	r2, r3
 8003e4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e4e:	4413      	add	r3, r2
 8003e50:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	781b      	ldrb	r3, [r3, #0]
 8003e56:	00da      	lsls	r2, r3, #3
 8003e58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e5a:	4413      	add	r3, r2
 8003e5c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003e60:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e64:	2200      	movs	r2, #0
 8003e66:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	78db      	ldrb	r3, [r3, #3]
 8003e6c:	2b02      	cmp	r3, #2
 8003e6e:	d123      	bne.n	8003eb8 <HAL_PCD_EP_DB_Transmit+0x1d6>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	461a      	mov	r2, r3
 8003e76:	68bb      	ldr	r3, [r7, #8]
 8003e78:	781b      	ldrb	r3, [r3, #0]
 8003e7a:	009b      	lsls	r3, r3, #2
 8003e7c:	4413      	add	r3, r2
 8003e7e:	881b      	ldrh	r3, [r3, #0]
 8003e80:	b29b      	uxth	r3, r3
 8003e82:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003e86:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003e8a:	837b      	strh	r3, [r7, #26]
 8003e8c:	8b7b      	ldrh	r3, [r7, #26]
 8003e8e:	f083 0320 	eor.w	r3, r3, #32
 8003e92:	837b      	strh	r3, [r7, #26]
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	461a      	mov	r2, r3
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	781b      	ldrb	r3, [r3, #0]
 8003e9e:	009b      	lsls	r3, r3, #2
 8003ea0:	441a      	add	r2, r3
 8003ea2:	8b7b      	ldrh	r3, [r7, #26]
 8003ea4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003ea8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003eac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003eb0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003eb4:	b29b      	uxth	r3, r3
 8003eb6:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	781b      	ldrb	r3, [r3, #0]
 8003ebc:	4619      	mov	r1, r3
 8003ebe:	68f8      	ldr	r0, [r7, #12]
 8003ec0:	f007 fc7f 	bl	800b7c2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003ec4:	88fb      	ldrh	r3, [r7, #6]
 8003ec6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d01f      	beq.n	8003f0e <HAL_PCD_EP_DB_Transmit+0x22c>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	461a      	mov	r2, r3
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	781b      	ldrb	r3, [r3, #0]
 8003ed8:	009b      	lsls	r3, r3, #2
 8003eda:	4413      	add	r3, r2
 8003edc:	881b      	ldrh	r3, [r3, #0]
 8003ede:	b29b      	uxth	r3, r3
 8003ee0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003ee4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ee8:	833b      	strh	r3, [r7, #24]
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	461a      	mov	r2, r3
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	781b      	ldrb	r3, [r3, #0]
 8003ef4:	009b      	lsls	r3, r3, #2
 8003ef6:	441a      	add	r2, r3
 8003ef8:	8b3b      	ldrh	r3, [r7, #24]
 8003efa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003efe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003f02:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003f06:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003f0a:	b29b      	uxth	r3, r3
 8003f0c:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 8003f0e:	2300      	movs	r3, #0
 8003f10:	e31f      	b.n	8004552 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003f12:	88fb      	ldrh	r3, [r7, #6]
 8003f14:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d021      	beq.n	8003f60 <HAL_PCD_EP_DB_Transmit+0x27e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	461a      	mov	r2, r3
 8003f22:	68bb      	ldr	r3, [r7, #8]
 8003f24:	781b      	ldrb	r3, [r3, #0]
 8003f26:	009b      	lsls	r3, r3, #2
 8003f28:	4413      	add	r3, r2
 8003f2a:	881b      	ldrh	r3, [r3, #0]
 8003f2c:	b29b      	uxth	r3, r3
 8003f2e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003f32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f36:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	461a      	mov	r2, r3
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	781b      	ldrb	r3, [r3, #0]
 8003f44:	009b      	lsls	r3, r3, #2
 8003f46:	441a      	add	r2, r3
 8003f48:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003f4c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003f50:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003f54:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003f58:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003f5c:	b29b      	uxth	r3, r3
 8003f5e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003f66:	2b01      	cmp	r3, #1
 8003f68:	f040 82ca 	bne.w	8004500 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	695a      	ldr	r2, [r3, #20]
 8003f70:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8003f74:	441a      	add	r2, r3
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	69da      	ldr	r2, [r3, #28]
 8003f7e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8003f82:	441a      	add	r2, r3
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	6a1a      	ldr	r2, [r3, #32]
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	691b      	ldr	r3, [r3, #16]
 8003f90:	429a      	cmp	r2, r3
 8003f92:	d309      	bcc.n	8003fa8 <HAL_PCD_EP_DB_Transmit+0x2c6>
        {
          len = ep->maxpacket;
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	691b      	ldr	r3, [r3, #16]
 8003f98:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	6a1a      	ldr	r2, [r3, #32]
 8003f9e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003fa0:	1ad2      	subs	r2, r2, r3
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	621a      	str	r2, [r3, #32]
 8003fa6:	e015      	b.n	8003fd4 <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else if (ep->xfer_len_db == 0U)
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	6a1b      	ldr	r3, [r3, #32]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d107      	bne.n	8003fc0 <HAL_PCD_EP_DB_Transmit+0x2de>
        {
          len = TxPctSize;
 8003fb0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8003fb4:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 8003fb6:	68bb      	ldr	r3, [r7, #8]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003fbe:	e009      	b.n	8003fd4 <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	6a1b      	ldr	r3, [r3, #32]
 8003fcc:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer0 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	785b      	ldrb	r3, [r3, #1]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d15f      	bne.n	800409c <HAL_PCD_EP_DB_Transmit+0x3ba>
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	643b      	str	r3, [r7, #64]	@ 0x40
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003fea:	b29b      	uxth	r3, r3
 8003fec:	461a      	mov	r2, r3
 8003fee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ff0:	4413      	add	r3, r2
 8003ff2:	643b      	str	r3, [r7, #64]	@ 0x40
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	781b      	ldrb	r3, [r3, #0]
 8003ff8:	00da      	lsls	r2, r3, #3
 8003ffa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ffc:	4413      	add	r3, r2
 8003ffe:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004002:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004004:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004006:	881b      	ldrh	r3, [r3, #0]
 8004008:	b29b      	uxth	r3, r3
 800400a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800400e:	b29a      	uxth	r2, r3
 8004010:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004012:	801a      	strh	r2, [r3, #0]
 8004014:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004016:	2b00      	cmp	r3, #0
 8004018:	d10a      	bne.n	8004030 <HAL_PCD_EP_DB_Transmit+0x34e>
 800401a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800401c:	881b      	ldrh	r3, [r3, #0]
 800401e:	b29b      	uxth	r3, r3
 8004020:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004024:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004028:	b29a      	uxth	r2, r3
 800402a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800402c:	801a      	strh	r2, [r3, #0]
 800402e:	e051      	b.n	80040d4 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8004030:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004032:	2b3e      	cmp	r3, #62	@ 0x3e
 8004034:	d816      	bhi.n	8004064 <HAL_PCD_EP_DB_Transmit+0x382>
 8004036:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004038:	085b      	lsrs	r3, r3, #1
 800403a:	653b      	str	r3, [r7, #80]	@ 0x50
 800403c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800403e:	f003 0301 	and.w	r3, r3, #1
 8004042:	2b00      	cmp	r3, #0
 8004044:	d002      	beq.n	800404c <HAL_PCD_EP_DB_Transmit+0x36a>
 8004046:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004048:	3301      	adds	r3, #1
 800404a:	653b      	str	r3, [r7, #80]	@ 0x50
 800404c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800404e:	881b      	ldrh	r3, [r3, #0]
 8004050:	b29a      	uxth	r2, r3
 8004052:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004054:	b29b      	uxth	r3, r3
 8004056:	029b      	lsls	r3, r3, #10
 8004058:	b29b      	uxth	r3, r3
 800405a:	4313      	orrs	r3, r2
 800405c:	b29a      	uxth	r2, r3
 800405e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004060:	801a      	strh	r2, [r3, #0]
 8004062:	e037      	b.n	80040d4 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8004064:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004066:	095b      	lsrs	r3, r3, #5
 8004068:	653b      	str	r3, [r7, #80]	@ 0x50
 800406a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800406c:	f003 031f 	and.w	r3, r3, #31
 8004070:	2b00      	cmp	r3, #0
 8004072:	d102      	bne.n	800407a <HAL_PCD_EP_DB_Transmit+0x398>
 8004074:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004076:	3b01      	subs	r3, #1
 8004078:	653b      	str	r3, [r7, #80]	@ 0x50
 800407a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800407c:	881b      	ldrh	r3, [r3, #0]
 800407e:	b29a      	uxth	r2, r3
 8004080:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004082:	b29b      	uxth	r3, r3
 8004084:	029b      	lsls	r3, r3, #10
 8004086:	b29b      	uxth	r3, r3
 8004088:	4313      	orrs	r3, r2
 800408a:	b29b      	uxth	r3, r3
 800408c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004090:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004094:	b29a      	uxth	r2, r3
 8004096:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004098:	801a      	strh	r2, [r3, #0]
 800409a:	e01b      	b.n	80040d4 <HAL_PCD_EP_DB_Transmit+0x3f2>
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	785b      	ldrb	r3, [r3, #1]
 80040a0:	2b01      	cmp	r3, #1
 80040a2:	d117      	bne.n	80040d4 <HAL_PCD_EP_DB_Transmit+0x3f2>
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80040b2:	b29b      	uxth	r3, r3
 80040b4:	461a      	mov	r2, r3
 80040b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80040b8:	4413      	add	r3, r2
 80040ba:	64bb      	str	r3, [r7, #72]	@ 0x48
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	781b      	ldrb	r3, [r3, #0]
 80040c0:	00da      	lsls	r2, r3, #3
 80040c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80040c4:	4413      	add	r3, r2
 80040c6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80040ca:	647b      	str	r3, [r7, #68]	@ 0x44
 80040cc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80040ce:	b29a      	uxth	r2, r3
 80040d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80040d2:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	6818      	ldr	r0, [r3, #0]
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	6959      	ldr	r1, [r3, #20]
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	891a      	ldrh	r2, [r3, #8]
 80040e0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80040e2:	b29b      	uxth	r3, r3
 80040e4:	f005 fc15 	bl	8009912 <USB_WritePMA>
 80040e8:	e20a      	b.n	8004500 <HAL_PCD_EP_DB_Transmit+0x81e>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80040f2:	b29b      	uxth	r3, r3
 80040f4:	461a      	mov	r2, r3
 80040f6:	68bb      	ldr	r3, [r7, #8]
 80040f8:	781b      	ldrb	r3, [r3, #0]
 80040fa:	00db      	lsls	r3, r3, #3
 80040fc:	4413      	add	r3, r2
 80040fe:	68fa      	ldr	r2, [r7, #12]
 8004100:	6812      	ldr	r2, [r2, #0]
 8004102:	4413      	add	r3, r2
 8004104:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004108:	881b      	ldrh	r3, [r3, #0]
 800410a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800410e:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len >= TxPctSize)
 8004112:	68bb      	ldr	r3, [r7, #8]
 8004114:	699a      	ldr	r2, [r3, #24]
 8004116:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800411a:	429a      	cmp	r2, r3
 800411c:	d307      	bcc.n	800412e <HAL_PCD_EP_DB_Transmit+0x44c>
    {
      ep->xfer_len -= TxPctSize;
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	699a      	ldr	r2, [r3, #24]
 8004122:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8004126:	1ad2      	subs	r2, r2, r3
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	619a      	str	r2, [r3, #24]
 800412c:	e002      	b.n	8004134 <HAL_PCD_EP_DB_Transmit+0x452>
    }
    else
    {
      ep->xfer_len = 0U;
 800412e:	68bb      	ldr	r3, [r7, #8]
 8004130:	2200      	movs	r2, #0
 8004132:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	699b      	ldr	r3, [r3, #24]
 8004138:	2b00      	cmp	r3, #0
 800413a:	f040 80f6 	bne.w	800432a <HAL_PCD_EP_DB_Transmit+0x648>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	785b      	ldrb	r3, [r3, #1]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d126      	bne.n	8004194 <HAL_PCD_EP_DB_Transmit+0x4b2>
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	677b      	str	r3, [r7, #116]	@ 0x74
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004154:	b29b      	uxth	r3, r3
 8004156:	461a      	mov	r2, r3
 8004158:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800415a:	4413      	add	r3, r2
 800415c:	677b      	str	r3, [r7, #116]	@ 0x74
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	781b      	ldrb	r3, [r3, #0]
 8004162:	00da      	lsls	r2, r3, #3
 8004164:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004166:	4413      	add	r3, r2
 8004168:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800416c:	673b      	str	r3, [r7, #112]	@ 0x70
 800416e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004170:	881b      	ldrh	r3, [r3, #0]
 8004172:	b29b      	uxth	r3, r3
 8004174:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004178:	b29a      	uxth	r2, r3
 800417a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800417c:	801a      	strh	r2, [r3, #0]
 800417e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004180:	881b      	ldrh	r3, [r3, #0]
 8004182:	b29b      	uxth	r3, r3
 8004184:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004188:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800418c:	b29a      	uxth	r2, r3
 800418e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004190:	801a      	strh	r2, [r3, #0]
 8004192:	e01a      	b.n	80041ca <HAL_PCD_EP_DB_Transmit+0x4e8>
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	785b      	ldrb	r3, [r3, #1]
 8004198:	2b01      	cmp	r3, #1
 800419a:	d116      	bne.n	80041ca <HAL_PCD_EP_DB_Transmit+0x4e8>
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80041aa:	b29b      	uxth	r3, r3
 80041ac:	461a      	mov	r2, r3
 80041ae:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80041b0:	4413      	add	r3, r2
 80041b2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	781b      	ldrb	r3, [r3, #0]
 80041b8:	00da      	lsls	r2, r3, #3
 80041ba:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80041bc:	4413      	add	r3, r2
 80041be:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80041c2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80041c4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80041c6:	2200      	movs	r2, #0
 80041c8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	785b      	ldrb	r3, [r3, #1]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d12f      	bne.n	800423a <HAL_PCD_EP_DB_Transmit+0x558>
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80041ea:	b29b      	uxth	r3, r3
 80041ec:	461a      	mov	r2, r3
 80041ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80041f2:	4413      	add	r3, r2
 80041f4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	781b      	ldrb	r3, [r3, #0]
 80041fc:	00da      	lsls	r2, r3, #3
 80041fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004202:	4413      	add	r3, r2
 8004204:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004208:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800420c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004210:	881b      	ldrh	r3, [r3, #0]
 8004212:	b29b      	uxth	r3, r3
 8004214:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004218:	b29a      	uxth	r2, r3
 800421a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800421e:	801a      	strh	r2, [r3, #0]
 8004220:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004224:	881b      	ldrh	r3, [r3, #0]
 8004226:	b29b      	uxth	r3, r3
 8004228:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800422c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004230:	b29a      	uxth	r2, r3
 8004232:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004236:	801a      	strh	r2, [r3, #0]
 8004238:	e01c      	b.n	8004274 <HAL_PCD_EP_DB_Transmit+0x592>
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	785b      	ldrb	r3, [r3, #1]
 800423e:	2b01      	cmp	r3, #1
 8004240:	d118      	bne.n	8004274 <HAL_PCD_EP_DB_Transmit+0x592>
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800424a:	b29b      	uxth	r3, r3
 800424c:	461a      	mov	r2, r3
 800424e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004252:	4413      	add	r3, r2
 8004254:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	781b      	ldrb	r3, [r3, #0]
 800425c:	00da      	lsls	r2, r3, #3
 800425e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004262:	4413      	add	r3, r2
 8004264:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004268:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800426c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004270:	2200      	movs	r2, #0
 8004272:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	78db      	ldrb	r3, [r3, #3]
 8004278:	2b02      	cmp	r3, #2
 800427a:	d127      	bne.n	80042cc <HAL_PCD_EP_DB_Transmit+0x5ea>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	461a      	mov	r2, r3
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	781b      	ldrb	r3, [r3, #0]
 8004286:	009b      	lsls	r3, r3, #2
 8004288:	4413      	add	r3, r2
 800428a:	881b      	ldrh	r3, [r3, #0]
 800428c:	b29b      	uxth	r3, r3
 800428e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004292:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004296:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800429a:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800429e:	f083 0320 	eor.w	r3, r3, #32
 80042a2:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	461a      	mov	r2, r3
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	781b      	ldrb	r3, [r3, #0]
 80042b0:	009b      	lsls	r3, r3, #2
 80042b2:	441a      	add	r2, r3
 80042b4:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80042b8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80042bc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80042c0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80042c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80042c8:	b29b      	uxth	r3, r3
 80042ca:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	781b      	ldrb	r3, [r3, #0]
 80042d0:	4619      	mov	r1, r3
 80042d2:	68f8      	ldr	r0, [r7, #12]
 80042d4:	f007 fa75 	bl	800b7c2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80042d8:	88fb      	ldrh	r3, [r7, #6]
 80042da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d121      	bne.n	8004326 <HAL_PCD_EP_DB_Transmit+0x644>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	461a      	mov	r2, r3
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	781b      	ldrb	r3, [r3, #0]
 80042ec:	009b      	lsls	r3, r3, #2
 80042ee:	4413      	add	r3, r2
 80042f0:	881b      	ldrh	r3, [r3, #0]
 80042f2:	b29b      	uxth	r3, r3
 80042f4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80042f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80042fc:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	461a      	mov	r2, r3
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	781b      	ldrb	r3, [r3, #0]
 800430a:	009b      	lsls	r3, r3, #2
 800430c:	441a      	add	r2, r3
 800430e:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8004312:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004316:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800431a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800431e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004322:	b29b      	uxth	r3, r3
 8004324:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 8004326:	2300      	movs	r3, #0
 8004328:	e113      	b.n	8004552 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800432a:	88fb      	ldrh	r3, [r7, #6]
 800432c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004330:	2b00      	cmp	r3, #0
 8004332:	d121      	bne.n	8004378 <HAL_PCD_EP_DB_Transmit+0x696>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	461a      	mov	r2, r3
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	781b      	ldrb	r3, [r3, #0]
 800433e:	009b      	lsls	r3, r3, #2
 8004340:	4413      	add	r3, r2
 8004342:	881b      	ldrh	r3, [r3, #0]
 8004344:	b29b      	uxth	r3, r3
 8004346:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800434a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800434e:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	461a      	mov	r2, r3
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	781b      	ldrb	r3, [r3, #0]
 800435c:	009b      	lsls	r3, r3, #2
 800435e:	441a      	add	r2, r3
 8004360:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8004364:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004368:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800436c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004370:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004374:	b29b      	uxth	r3, r3
 8004376:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800437e:	2b01      	cmp	r3, #1
 8004380:	f040 80be 	bne.w	8004500 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	695a      	ldr	r2, [r3, #20]
 8004388:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800438c:	441a      	add	r2, r3
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	69da      	ldr	r2, [r3, #28]
 8004396:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800439a:	441a      	add	r2, r3
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	6a1a      	ldr	r2, [r3, #32]
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	691b      	ldr	r3, [r3, #16]
 80043a8:	429a      	cmp	r2, r3
 80043aa:	d309      	bcc.n	80043c0 <HAL_PCD_EP_DB_Transmit+0x6de>
        {
          len = ep->maxpacket;
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	691b      	ldr	r3, [r3, #16]
 80043b0:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	6a1a      	ldr	r2, [r3, #32]
 80043b6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80043b8:	1ad2      	subs	r2, r2, r3
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	621a      	str	r2, [r3, #32]
 80043be:	e015      	b.n	80043ec <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else if (ep->xfer_len_db == 0U)
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	6a1b      	ldr	r3, [r3, #32]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d107      	bne.n	80043d8 <HAL_PCD_EP_DB_Transmit+0x6f6>
        {
          len = TxPctSize;
 80043c8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80043cc:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	2200      	movs	r2, #0
 80043d2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80043d6:	e009      	b.n	80043ec <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else
        {
          len = ep->xfer_len_db;
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	6a1b      	ldr	r3, [r3, #32]
 80043dc:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	2200      	movs	r2, #0
 80043e2:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	2200      	movs	r2, #0
 80043e8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	785b      	ldrb	r3, [r3, #1]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d15f      	bne.n	80044ba <HAL_PCD_EP_DB_Transmit+0x7d8>
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004408:	b29b      	uxth	r3, r3
 800440a:	461a      	mov	r2, r3
 800440c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800440e:	4413      	add	r3, r2
 8004410:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004412:	68bb      	ldr	r3, [r7, #8]
 8004414:	781b      	ldrb	r3, [r3, #0]
 8004416:	00da      	lsls	r2, r3, #3
 8004418:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800441a:	4413      	add	r3, r2
 800441c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004420:	667b      	str	r3, [r7, #100]	@ 0x64
 8004422:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004424:	881b      	ldrh	r3, [r3, #0]
 8004426:	b29b      	uxth	r3, r3
 8004428:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800442c:	b29a      	uxth	r2, r3
 800442e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004430:	801a      	strh	r2, [r3, #0]
 8004432:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004434:	2b00      	cmp	r3, #0
 8004436:	d10a      	bne.n	800444e <HAL_PCD_EP_DB_Transmit+0x76c>
 8004438:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800443a:	881b      	ldrh	r3, [r3, #0]
 800443c:	b29b      	uxth	r3, r3
 800443e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004442:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004446:	b29a      	uxth	r2, r3
 8004448:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800444a:	801a      	strh	r2, [r3, #0]
 800444c:	e04e      	b.n	80044ec <HAL_PCD_EP_DB_Transmit+0x80a>
 800444e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004450:	2b3e      	cmp	r3, #62	@ 0x3e
 8004452:	d816      	bhi.n	8004482 <HAL_PCD_EP_DB_Transmit+0x7a0>
 8004454:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004456:	085b      	lsrs	r3, r3, #1
 8004458:	663b      	str	r3, [r7, #96]	@ 0x60
 800445a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800445c:	f003 0301 	and.w	r3, r3, #1
 8004460:	2b00      	cmp	r3, #0
 8004462:	d002      	beq.n	800446a <HAL_PCD_EP_DB_Transmit+0x788>
 8004464:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004466:	3301      	adds	r3, #1
 8004468:	663b      	str	r3, [r7, #96]	@ 0x60
 800446a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800446c:	881b      	ldrh	r3, [r3, #0]
 800446e:	b29a      	uxth	r2, r3
 8004470:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004472:	b29b      	uxth	r3, r3
 8004474:	029b      	lsls	r3, r3, #10
 8004476:	b29b      	uxth	r3, r3
 8004478:	4313      	orrs	r3, r2
 800447a:	b29a      	uxth	r2, r3
 800447c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800447e:	801a      	strh	r2, [r3, #0]
 8004480:	e034      	b.n	80044ec <HAL_PCD_EP_DB_Transmit+0x80a>
 8004482:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004484:	095b      	lsrs	r3, r3, #5
 8004486:	663b      	str	r3, [r7, #96]	@ 0x60
 8004488:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800448a:	f003 031f 	and.w	r3, r3, #31
 800448e:	2b00      	cmp	r3, #0
 8004490:	d102      	bne.n	8004498 <HAL_PCD_EP_DB_Transmit+0x7b6>
 8004492:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004494:	3b01      	subs	r3, #1
 8004496:	663b      	str	r3, [r7, #96]	@ 0x60
 8004498:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800449a:	881b      	ldrh	r3, [r3, #0]
 800449c:	b29a      	uxth	r2, r3
 800449e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80044a0:	b29b      	uxth	r3, r3
 80044a2:	029b      	lsls	r3, r3, #10
 80044a4:	b29b      	uxth	r3, r3
 80044a6:	4313      	orrs	r3, r2
 80044a8:	b29b      	uxth	r3, r3
 80044aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80044ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80044b2:	b29a      	uxth	r2, r3
 80044b4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80044b6:	801a      	strh	r2, [r3, #0]
 80044b8:	e018      	b.n	80044ec <HAL_PCD_EP_DB_Transmit+0x80a>
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	785b      	ldrb	r3, [r3, #1]
 80044be:	2b01      	cmp	r3, #1
 80044c0:	d114      	bne.n	80044ec <HAL_PCD_EP_DB_Transmit+0x80a>
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80044ca:	b29b      	uxth	r3, r3
 80044cc:	461a      	mov	r2, r3
 80044ce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80044d0:	4413      	add	r3, r2
 80044d2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	781b      	ldrb	r3, [r3, #0]
 80044d8:	00da      	lsls	r2, r3, #3
 80044da:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80044dc:	4413      	add	r3, r2
 80044de:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80044e2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80044e4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80044e6:	b29a      	uxth	r2, r3
 80044e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80044ea:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	6818      	ldr	r0, [r3, #0]
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	6959      	ldr	r1, [r3, #20]
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	895a      	ldrh	r2, [r3, #10]
 80044f8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80044fa:	b29b      	uxth	r3, r3
 80044fc:	f005 fa09 	bl	8009912 <USB_WritePMA>
      }
    }
  }

  /* Enable endpoint IN */
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	461a      	mov	r2, r3
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	781b      	ldrb	r3, [r3, #0]
 800450a:	009b      	lsls	r3, r3, #2
 800450c:	4413      	add	r3, r2
 800450e:	881b      	ldrh	r3, [r3, #0]
 8004510:	b29b      	uxth	r3, r3
 8004512:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004516:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800451a:	82fb      	strh	r3, [r7, #22]
 800451c:	8afb      	ldrh	r3, [r7, #22]
 800451e:	f083 0310 	eor.w	r3, r3, #16
 8004522:	82fb      	strh	r3, [r7, #22]
 8004524:	8afb      	ldrh	r3, [r7, #22]
 8004526:	f083 0320 	eor.w	r3, r3, #32
 800452a:	82fb      	strh	r3, [r7, #22]
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	461a      	mov	r2, r3
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	781b      	ldrb	r3, [r3, #0]
 8004536:	009b      	lsls	r3, r3, #2
 8004538:	441a      	add	r2, r3
 800453a:	8afb      	ldrh	r3, [r7, #22]
 800453c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004540:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004544:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004548:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800454c:	b29b      	uxth	r3, r3
 800454e:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8004550:	2300      	movs	r3, #0
}
 8004552:	4618      	mov	r0, r3
 8004554:	3798      	adds	r7, #152	@ 0x98
 8004556:	46bd      	mov	sp, r7
 8004558:	bd80      	pop	{r7, pc}

0800455a <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800455a:	b480      	push	{r7}
 800455c:	b087      	sub	sp, #28
 800455e:	af00      	add	r7, sp, #0
 8004560:	60f8      	str	r0, [r7, #12]
 8004562:	607b      	str	r3, [r7, #4]
 8004564:	460b      	mov	r3, r1
 8004566:	817b      	strh	r3, [r7, #10]
 8004568:	4613      	mov	r3, r2
 800456a:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800456c:	897b      	ldrh	r3, [r7, #10]
 800456e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004572:	b29b      	uxth	r3, r3
 8004574:	2b00      	cmp	r3, #0
 8004576:	d00b      	beq.n	8004590 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004578:	897b      	ldrh	r3, [r7, #10]
 800457a:	f003 0207 	and.w	r2, r3, #7
 800457e:	4613      	mov	r3, r2
 8004580:	009b      	lsls	r3, r3, #2
 8004582:	4413      	add	r3, r2
 8004584:	00db      	lsls	r3, r3, #3
 8004586:	3310      	adds	r3, #16
 8004588:	68fa      	ldr	r2, [r7, #12]
 800458a:	4413      	add	r3, r2
 800458c:	617b      	str	r3, [r7, #20]
 800458e:	e009      	b.n	80045a4 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004590:	897a      	ldrh	r2, [r7, #10]
 8004592:	4613      	mov	r3, r2
 8004594:	009b      	lsls	r3, r3, #2
 8004596:	4413      	add	r3, r2
 8004598:	00db      	lsls	r3, r3, #3
 800459a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800459e:	68fa      	ldr	r2, [r7, #12]
 80045a0:	4413      	add	r3, r2
 80045a2:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80045a4:	893b      	ldrh	r3, [r7, #8]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d107      	bne.n	80045ba <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	2200      	movs	r2, #0
 80045ae:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	b29a      	uxth	r2, r3
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	80da      	strh	r2, [r3, #6]
 80045b8:	e00b      	b.n	80045d2 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80045ba:	697b      	ldr	r3, [r7, #20]
 80045bc:	2201      	movs	r2, #1
 80045be:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	b29a      	uxth	r2, r3
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	0c1b      	lsrs	r3, r3, #16
 80045cc:	b29a      	uxth	r2, r3
 80045ce:	697b      	ldr	r3, [r7, #20]
 80045d0:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80045d2:	2300      	movs	r3, #0
}
 80045d4:	4618      	mov	r0, r3
 80045d6:	371c      	adds	r7, #28
 80045d8:	46bd      	mov	sp, r7
 80045da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045de:	4770      	bx	lr

080045e0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80045e0:	b480      	push	{r7}
 80045e2:	b085      	sub	sp, #20
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2201      	movs	r2, #1
 80045f2:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2200      	movs	r2, #0
 80045fa:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8004604:	b29b      	uxth	r3, r3
 8004606:	f043 0301 	orr.w	r3, r3, #1
 800460a:	b29a      	uxth	r2, r3
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8004618:	b29b      	uxth	r3, r3
 800461a:	f043 0302 	orr.w	r3, r3, #2
 800461e:	b29a      	uxth	r2, r3
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8004626:	2300      	movs	r3, #0
}
 8004628:	4618      	mov	r0, r3
 800462a:	3714      	adds	r7, #20
 800462c:	46bd      	mov	sp, r7
 800462e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004632:	4770      	bx	lr

08004634 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004634:	b480      	push	{r7}
 8004636:	b085      	sub	sp, #20
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d141      	bne.n	80046c6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004642:	4b4b      	ldr	r3, [pc, #300]	@ (8004770 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800464a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800464e:	d131      	bne.n	80046b4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004650:	4b47      	ldr	r3, [pc, #284]	@ (8004770 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004652:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004656:	4a46      	ldr	r2, [pc, #280]	@ (8004770 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004658:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800465c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004660:	4b43      	ldr	r3, [pc, #268]	@ (8004770 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004668:	4a41      	ldr	r2, [pc, #260]	@ (8004770 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800466a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800466e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004670:	4b40      	ldr	r3, [pc, #256]	@ (8004774 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	2232      	movs	r2, #50	@ 0x32
 8004676:	fb02 f303 	mul.w	r3, r2, r3
 800467a:	4a3f      	ldr	r2, [pc, #252]	@ (8004778 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800467c:	fba2 2303 	umull	r2, r3, r2, r3
 8004680:	0c9b      	lsrs	r3, r3, #18
 8004682:	3301      	adds	r3, #1
 8004684:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004686:	e002      	b.n	800468e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	3b01      	subs	r3, #1
 800468c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800468e:	4b38      	ldr	r3, [pc, #224]	@ (8004770 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004690:	695b      	ldr	r3, [r3, #20]
 8004692:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004696:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800469a:	d102      	bne.n	80046a2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d1f2      	bne.n	8004688 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80046a2:	4b33      	ldr	r3, [pc, #204]	@ (8004770 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046a4:	695b      	ldr	r3, [r3, #20]
 80046a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80046ae:	d158      	bne.n	8004762 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80046b0:	2303      	movs	r3, #3
 80046b2:	e057      	b.n	8004764 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80046b4:	4b2e      	ldr	r3, [pc, #184]	@ (8004770 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80046ba:	4a2d      	ldr	r2, [pc, #180]	@ (8004770 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80046c0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80046c4:	e04d      	b.n	8004762 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80046cc:	d141      	bne.n	8004752 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80046ce:	4b28      	ldr	r3, [pc, #160]	@ (8004770 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80046d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80046da:	d131      	bne.n	8004740 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80046dc:	4b24      	ldr	r3, [pc, #144]	@ (8004770 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80046e2:	4a23      	ldr	r2, [pc, #140]	@ (8004770 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80046e8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80046ec:	4b20      	ldr	r3, [pc, #128]	@ (8004770 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80046f4:	4a1e      	ldr	r2, [pc, #120]	@ (8004770 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046f6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80046fa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80046fc:	4b1d      	ldr	r3, [pc, #116]	@ (8004774 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	2232      	movs	r2, #50	@ 0x32
 8004702:	fb02 f303 	mul.w	r3, r2, r3
 8004706:	4a1c      	ldr	r2, [pc, #112]	@ (8004778 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004708:	fba2 2303 	umull	r2, r3, r2, r3
 800470c:	0c9b      	lsrs	r3, r3, #18
 800470e:	3301      	adds	r3, #1
 8004710:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004712:	e002      	b.n	800471a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	3b01      	subs	r3, #1
 8004718:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800471a:	4b15      	ldr	r3, [pc, #84]	@ (8004770 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800471c:	695b      	ldr	r3, [r3, #20]
 800471e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004722:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004726:	d102      	bne.n	800472e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d1f2      	bne.n	8004714 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800472e:	4b10      	ldr	r3, [pc, #64]	@ (8004770 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004730:	695b      	ldr	r3, [r3, #20]
 8004732:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004736:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800473a:	d112      	bne.n	8004762 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800473c:	2303      	movs	r3, #3
 800473e:	e011      	b.n	8004764 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004740:	4b0b      	ldr	r3, [pc, #44]	@ (8004770 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004742:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004746:	4a0a      	ldr	r2, [pc, #40]	@ (8004770 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004748:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800474c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004750:	e007      	b.n	8004762 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004752:	4b07      	ldr	r3, [pc, #28]	@ (8004770 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800475a:	4a05      	ldr	r2, [pc, #20]	@ (8004770 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800475c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004760:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004762:	2300      	movs	r3, #0
}
 8004764:	4618      	mov	r0, r3
 8004766:	3714      	adds	r7, #20
 8004768:	46bd      	mov	sp, r7
 800476a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476e:	4770      	bx	lr
 8004770:	40007000 	.word	0x40007000
 8004774:	20000000 	.word	0x20000000
 8004778:	431bde83 	.word	0x431bde83

0800477c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800477c:	b480      	push	{r7}
 800477e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004780:	4b05      	ldr	r3, [pc, #20]	@ (8004798 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004782:	689b      	ldr	r3, [r3, #8]
 8004784:	4a04      	ldr	r2, [pc, #16]	@ (8004798 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004786:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800478a:	6093      	str	r3, [r2, #8]
}
 800478c:	bf00      	nop
 800478e:	46bd      	mov	sp, r7
 8004790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004794:	4770      	bx	lr
 8004796:	bf00      	nop
 8004798:	40007000 	.word	0x40007000

0800479c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b088      	sub	sp, #32
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d101      	bne.n	80047ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80047aa:	2301      	movs	r3, #1
 80047ac:	e2fe      	b.n	8004dac <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f003 0301 	and.w	r3, r3, #1
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d075      	beq.n	80048a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80047ba:	4b97      	ldr	r3, [pc, #604]	@ (8004a18 <HAL_RCC_OscConfig+0x27c>)
 80047bc:	689b      	ldr	r3, [r3, #8]
 80047be:	f003 030c 	and.w	r3, r3, #12
 80047c2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80047c4:	4b94      	ldr	r3, [pc, #592]	@ (8004a18 <HAL_RCC_OscConfig+0x27c>)
 80047c6:	68db      	ldr	r3, [r3, #12]
 80047c8:	f003 0303 	and.w	r3, r3, #3
 80047cc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80047ce:	69bb      	ldr	r3, [r7, #24]
 80047d0:	2b0c      	cmp	r3, #12
 80047d2:	d102      	bne.n	80047da <HAL_RCC_OscConfig+0x3e>
 80047d4:	697b      	ldr	r3, [r7, #20]
 80047d6:	2b03      	cmp	r3, #3
 80047d8:	d002      	beq.n	80047e0 <HAL_RCC_OscConfig+0x44>
 80047da:	69bb      	ldr	r3, [r7, #24]
 80047dc:	2b08      	cmp	r3, #8
 80047de:	d10b      	bne.n	80047f8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047e0:	4b8d      	ldr	r3, [pc, #564]	@ (8004a18 <HAL_RCC_OscConfig+0x27c>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d05b      	beq.n	80048a4 <HAL_RCC_OscConfig+0x108>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d157      	bne.n	80048a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80047f4:	2301      	movs	r3, #1
 80047f6:	e2d9      	b.n	8004dac <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004800:	d106      	bne.n	8004810 <HAL_RCC_OscConfig+0x74>
 8004802:	4b85      	ldr	r3, [pc, #532]	@ (8004a18 <HAL_RCC_OscConfig+0x27c>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a84      	ldr	r2, [pc, #528]	@ (8004a18 <HAL_RCC_OscConfig+0x27c>)
 8004808:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800480c:	6013      	str	r3, [r2, #0]
 800480e:	e01d      	b.n	800484c <HAL_RCC_OscConfig+0xb0>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004818:	d10c      	bne.n	8004834 <HAL_RCC_OscConfig+0x98>
 800481a:	4b7f      	ldr	r3, [pc, #508]	@ (8004a18 <HAL_RCC_OscConfig+0x27c>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4a7e      	ldr	r2, [pc, #504]	@ (8004a18 <HAL_RCC_OscConfig+0x27c>)
 8004820:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004824:	6013      	str	r3, [r2, #0]
 8004826:	4b7c      	ldr	r3, [pc, #496]	@ (8004a18 <HAL_RCC_OscConfig+0x27c>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a7b      	ldr	r2, [pc, #492]	@ (8004a18 <HAL_RCC_OscConfig+0x27c>)
 800482c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004830:	6013      	str	r3, [r2, #0]
 8004832:	e00b      	b.n	800484c <HAL_RCC_OscConfig+0xb0>
 8004834:	4b78      	ldr	r3, [pc, #480]	@ (8004a18 <HAL_RCC_OscConfig+0x27c>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4a77      	ldr	r2, [pc, #476]	@ (8004a18 <HAL_RCC_OscConfig+0x27c>)
 800483a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800483e:	6013      	str	r3, [r2, #0]
 8004840:	4b75      	ldr	r3, [pc, #468]	@ (8004a18 <HAL_RCC_OscConfig+0x27c>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a74      	ldr	r2, [pc, #464]	@ (8004a18 <HAL_RCC_OscConfig+0x27c>)
 8004846:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800484a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d013      	beq.n	800487c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004854:	f7fd fba6 	bl	8001fa4 <HAL_GetTick>
 8004858:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800485a:	e008      	b.n	800486e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800485c:	f7fd fba2 	bl	8001fa4 <HAL_GetTick>
 8004860:	4602      	mov	r2, r0
 8004862:	693b      	ldr	r3, [r7, #16]
 8004864:	1ad3      	subs	r3, r2, r3
 8004866:	2b64      	cmp	r3, #100	@ 0x64
 8004868:	d901      	bls.n	800486e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800486a:	2303      	movs	r3, #3
 800486c:	e29e      	b.n	8004dac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800486e:	4b6a      	ldr	r3, [pc, #424]	@ (8004a18 <HAL_RCC_OscConfig+0x27c>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004876:	2b00      	cmp	r3, #0
 8004878:	d0f0      	beq.n	800485c <HAL_RCC_OscConfig+0xc0>
 800487a:	e014      	b.n	80048a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800487c:	f7fd fb92 	bl	8001fa4 <HAL_GetTick>
 8004880:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004882:	e008      	b.n	8004896 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004884:	f7fd fb8e 	bl	8001fa4 <HAL_GetTick>
 8004888:	4602      	mov	r2, r0
 800488a:	693b      	ldr	r3, [r7, #16]
 800488c:	1ad3      	subs	r3, r2, r3
 800488e:	2b64      	cmp	r3, #100	@ 0x64
 8004890:	d901      	bls.n	8004896 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004892:	2303      	movs	r3, #3
 8004894:	e28a      	b.n	8004dac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004896:	4b60      	ldr	r3, [pc, #384]	@ (8004a18 <HAL_RCC_OscConfig+0x27c>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d1f0      	bne.n	8004884 <HAL_RCC_OscConfig+0xe8>
 80048a2:	e000      	b.n	80048a6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f003 0302 	and.w	r3, r3, #2
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d075      	beq.n	800499e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80048b2:	4b59      	ldr	r3, [pc, #356]	@ (8004a18 <HAL_RCC_OscConfig+0x27c>)
 80048b4:	689b      	ldr	r3, [r3, #8]
 80048b6:	f003 030c 	and.w	r3, r3, #12
 80048ba:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80048bc:	4b56      	ldr	r3, [pc, #344]	@ (8004a18 <HAL_RCC_OscConfig+0x27c>)
 80048be:	68db      	ldr	r3, [r3, #12]
 80048c0:	f003 0303 	and.w	r3, r3, #3
 80048c4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80048c6:	69bb      	ldr	r3, [r7, #24]
 80048c8:	2b0c      	cmp	r3, #12
 80048ca:	d102      	bne.n	80048d2 <HAL_RCC_OscConfig+0x136>
 80048cc:	697b      	ldr	r3, [r7, #20]
 80048ce:	2b02      	cmp	r3, #2
 80048d0:	d002      	beq.n	80048d8 <HAL_RCC_OscConfig+0x13c>
 80048d2:	69bb      	ldr	r3, [r7, #24]
 80048d4:	2b04      	cmp	r3, #4
 80048d6:	d11f      	bne.n	8004918 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80048d8:	4b4f      	ldr	r3, [pc, #316]	@ (8004a18 <HAL_RCC_OscConfig+0x27c>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d005      	beq.n	80048f0 <HAL_RCC_OscConfig+0x154>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	68db      	ldr	r3, [r3, #12]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d101      	bne.n	80048f0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80048ec:	2301      	movs	r3, #1
 80048ee:	e25d      	b.n	8004dac <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048f0:	4b49      	ldr	r3, [pc, #292]	@ (8004a18 <HAL_RCC_OscConfig+0x27c>)
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	691b      	ldr	r3, [r3, #16]
 80048fc:	061b      	lsls	r3, r3, #24
 80048fe:	4946      	ldr	r1, [pc, #280]	@ (8004a18 <HAL_RCC_OscConfig+0x27c>)
 8004900:	4313      	orrs	r3, r2
 8004902:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004904:	4b45      	ldr	r3, [pc, #276]	@ (8004a1c <HAL_RCC_OscConfig+0x280>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4618      	mov	r0, r3
 800490a:	f7fd faff 	bl	8001f0c <HAL_InitTick>
 800490e:	4603      	mov	r3, r0
 8004910:	2b00      	cmp	r3, #0
 8004912:	d043      	beq.n	800499c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004914:	2301      	movs	r3, #1
 8004916:	e249      	b.n	8004dac <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	68db      	ldr	r3, [r3, #12]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d023      	beq.n	8004968 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004920:	4b3d      	ldr	r3, [pc, #244]	@ (8004a18 <HAL_RCC_OscConfig+0x27c>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a3c      	ldr	r2, [pc, #240]	@ (8004a18 <HAL_RCC_OscConfig+0x27c>)
 8004926:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800492a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800492c:	f7fd fb3a 	bl	8001fa4 <HAL_GetTick>
 8004930:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004932:	e008      	b.n	8004946 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004934:	f7fd fb36 	bl	8001fa4 <HAL_GetTick>
 8004938:	4602      	mov	r2, r0
 800493a:	693b      	ldr	r3, [r7, #16]
 800493c:	1ad3      	subs	r3, r2, r3
 800493e:	2b02      	cmp	r3, #2
 8004940:	d901      	bls.n	8004946 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004942:	2303      	movs	r3, #3
 8004944:	e232      	b.n	8004dac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004946:	4b34      	ldr	r3, [pc, #208]	@ (8004a18 <HAL_RCC_OscConfig+0x27c>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800494e:	2b00      	cmp	r3, #0
 8004950:	d0f0      	beq.n	8004934 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004952:	4b31      	ldr	r3, [pc, #196]	@ (8004a18 <HAL_RCC_OscConfig+0x27c>)
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	691b      	ldr	r3, [r3, #16]
 800495e:	061b      	lsls	r3, r3, #24
 8004960:	492d      	ldr	r1, [pc, #180]	@ (8004a18 <HAL_RCC_OscConfig+0x27c>)
 8004962:	4313      	orrs	r3, r2
 8004964:	604b      	str	r3, [r1, #4]
 8004966:	e01a      	b.n	800499e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004968:	4b2b      	ldr	r3, [pc, #172]	@ (8004a18 <HAL_RCC_OscConfig+0x27c>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a2a      	ldr	r2, [pc, #168]	@ (8004a18 <HAL_RCC_OscConfig+0x27c>)
 800496e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004972:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004974:	f7fd fb16 	bl	8001fa4 <HAL_GetTick>
 8004978:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800497a:	e008      	b.n	800498e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800497c:	f7fd fb12 	bl	8001fa4 <HAL_GetTick>
 8004980:	4602      	mov	r2, r0
 8004982:	693b      	ldr	r3, [r7, #16]
 8004984:	1ad3      	subs	r3, r2, r3
 8004986:	2b02      	cmp	r3, #2
 8004988:	d901      	bls.n	800498e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800498a:	2303      	movs	r3, #3
 800498c:	e20e      	b.n	8004dac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800498e:	4b22      	ldr	r3, [pc, #136]	@ (8004a18 <HAL_RCC_OscConfig+0x27c>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004996:	2b00      	cmp	r3, #0
 8004998:	d1f0      	bne.n	800497c <HAL_RCC_OscConfig+0x1e0>
 800499a:	e000      	b.n	800499e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800499c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f003 0308 	and.w	r3, r3, #8
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d041      	beq.n	8004a2e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	695b      	ldr	r3, [r3, #20]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d01c      	beq.n	80049ec <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80049b2:	4b19      	ldr	r3, [pc, #100]	@ (8004a18 <HAL_RCC_OscConfig+0x27c>)
 80049b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80049b8:	4a17      	ldr	r2, [pc, #92]	@ (8004a18 <HAL_RCC_OscConfig+0x27c>)
 80049ba:	f043 0301 	orr.w	r3, r3, #1
 80049be:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049c2:	f7fd faef 	bl	8001fa4 <HAL_GetTick>
 80049c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80049c8:	e008      	b.n	80049dc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80049ca:	f7fd faeb 	bl	8001fa4 <HAL_GetTick>
 80049ce:	4602      	mov	r2, r0
 80049d0:	693b      	ldr	r3, [r7, #16]
 80049d2:	1ad3      	subs	r3, r2, r3
 80049d4:	2b02      	cmp	r3, #2
 80049d6:	d901      	bls.n	80049dc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80049d8:	2303      	movs	r3, #3
 80049da:	e1e7      	b.n	8004dac <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80049dc:	4b0e      	ldr	r3, [pc, #56]	@ (8004a18 <HAL_RCC_OscConfig+0x27c>)
 80049de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80049e2:	f003 0302 	and.w	r3, r3, #2
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d0ef      	beq.n	80049ca <HAL_RCC_OscConfig+0x22e>
 80049ea:	e020      	b.n	8004a2e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80049ec:	4b0a      	ldr	r3, [pc, #40]	@ (8004a18 <HAL_RCC_OscConfig+0x27c>)
 80049ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80049f2:	4a09      	ldr	r2, [pc, #36]	@ (8004a18 <HAL_RCC_OscConfig+0x27c>)
 80049f4:	f023 0301 	bic.w	r3, r3, #1
 80049f8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049fc:	f7fd fad2 	bl	8001fa4 <HAL_GetTick>
 8004a00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004a02:	e00d      	b.n	8004a20 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a04:	f7fd face 	bl	8001fa4 <HAL_GetTick>
 8004a08:	4602      	mov	r2, r0
 8004a0a:	693b      	ldr	r3, [r7, #16]
 8004a0c:	1ad3      	subs	r3, r2, r3
 8004a0e:	2b02      	cmp	r3, #2
 8004a10:	d906      	bls.n	8004a20 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004a12:	2303      	movs	r3, #3
 8004a14:	e1ca      	b.n	8004dac <HAL_RCC_OscConfig+0x610>
 8004a16:	bf00      	nop
 8004a18:	40021000 	.word	0x40021000
 8004a1c:	2000009c 	.word	0x2000009c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004a20:	4b8c      	ldr	r3, [pc, #560]	@ (8004c54 <HAL_RCC_OscConfig+0x4b8>)
 8004a22:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004a26:	f003 0302 	and.w	r3, r3, #2
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d1ea      	bne.n	8004a04 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f003 0304 	and.w	r3, r3, #4
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	f000 80a6 	beq.w	8004b88 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004a40:	4b84      	ldr	r3, [pc, #528]	@ (8004c54 <HAL_RCC_OscConfig+0x4b8>)
 8004a42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a44:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d101      	bne.n	8004a50 <HAL_RCC_OscConfig+0x2b4>
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	e000      	b.n	8004a52 <HAL_RCC_OscConfig+0x2b6>
 8004a50:	2300      	movs	r3, #0
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d00d      	beq.n	8004a72 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a56:	4b7f      	ldr	r3, [pc, #508]	@ (8004c54 <HAL_RCC_OscConfig+0x4b8>)
 8004a58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a5a:	4a7e      	ldr	r2, [pc, #504]	@ (8004c54 <HAL_RCC_OscConfig+0x4b8>)
 8004a5c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004a60:	6593      	str	r3, [r2, #88]	@ 0x58
 8004a62:	4b7c      	ldr	r3, [pc, #496]	@ (8004c54 <HAL_RCC_OscConfig+0x4b8>)
 8004a64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a6a:	60fb      	str	r3, [r7, #12]
 8004a6c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004a6e:	2301      	movs	r3, #1
 8004a70:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a72:	4b79      	ldr	r3, [pc, #484]	@ (8004c58 <HAL_RCC_OscConfig+0x4bc>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d118      	bne.n	8004ab0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004a7e:	4b76      	ldr	r3, [pc, #472]	@ (8004c58 <HAL_RCC_OscConfig+0x4bc>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4a75      	ldr	r2, [pc, #468]	@ (8004c58 <HAL_RCC_OscConfig+0x4bc>)
 8004a84:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a8a:	f7fd fa8b 	bl	8001fa4 <HAL_GetTick>
 8004a8e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a90:	e008      	b.n	8004aa4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a92:	f7fd fa87 	bl	8001fa4 <HAL_GetTick>
 8004a96:	4602      	mov	r2, r0
 8004a98:	693b      	ldr	r3, [r7, #16]
 8004a9a:	1ad3      	subs	r3, r2, r3
 8004a9c:	2b02      	cmp	r3, #2
 8004a9e:	d901      	bls.n	8004aa4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004aa0:	2303      	movs	r3, #3
 8004aa2:	e183      	b.n	8004dac <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004aa4:	4b6c      	ldr	r3, [pc, #432]	@ (8004c58 <HAL_RCC_OscConfig+0x4bc>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d0f0      	beq.n	8004a92 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	689b      	ldr	r3, [r3, #8]
 8004ab4:	2b01      	cmp	r3, #1
 8004ab6:	d108      	bne.n	8004aca <HAL_RCC_OscConfig+0x32e>
 8004ab8:	4b66      	ldr	r3, [pc, #408]	@ (8004c54 <HAL_RCC_OscConfig+0x4b8>)
 8004aba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004abe:	4a65      	ldr	r2, [pc, #404]	@ (8004c54 <HAL_RCC_OscConfig+0x4b8>)
 8004ac0:	f043 0301 	orr.w	r3, r3, #1
 8004ac4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004ac8:	e024      	b.n	8004b14 <HAL_RCC_OscConfig+0x378>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	689b      	ldr	r3, [r3, #8]
 8004ace:	2b05      	cmp	r3, #5
 8004ad0:	d110      	bne.n	8004af4 <HAL_RCC_OscConfig+0x358>
 8004ad2:	4b60      	ldr	r3, [pc, #384]	@ (8004c54 <HAL_RCC_OscConfig+0x4b8>)
 8004ad4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ad8:	4a5e      	ldr	r2, [pc, #376]	@ (8004c54 <HAL_RCC_OscConfig+0x4b8>)
 8004ada:	f043 0304 	orr.w	r3, r3, #4
 8004ade:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004ae2:	4b5c      	ldr	r3, [pc, #368]	@ (8004c54 <HAL_RCC_OscConfig+0x4b8>)
 8004ae4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ae8:	4a5a      	ldr	r2, [pc, #360]	@ (8004c54 <HAL_RCC_OscConfig+0x4b8>)
 8004aea:	f043 0301 	orr.w	r3, r3, #1
 8004aee:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004af2:	e00f      	b.n	8004b14 <HAL_RCC_OscConfig+0x378>
 8004af4:	4b57      	ldr	r3, [pc, #348]	@ (8004c54 <HAL_RCC_OscConfig+0x4b8>)
 8004af6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004afa:	4a56      	ldr	r2, [pc, #344]	@ (8004c54 <HAL_RCC_OscConfig+0x4b8>)
 8004afc:	f023 0301 	bic.w	r3, r3, #1
 8004b00:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004b04:	4b53      	ldr	r3, [pc, #332]	@ (8004c54 <HAL_RCC_OscConfig+0x4b8>)
 8004b06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b0a:	4a52      	ldr	r2, [pc, #328]	@ (8004c54 <HAL_RCC_OscConfig+0x4b8>)
 8004b0c:	f023 0304 	bic.w	r3, r3, #4
 8004b10:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	689b      	ldr	r3, [r3, #8]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d016      	beq.n	8004b4a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b1c:	f7fd fa42 	bl	8001fa4 <HAL_GetTick>
 8004b20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b22:	e00a      	b.n	8004b3a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b24:	f7fd fa3e 	bl	8001fa4 <HAL_GetTick>
 8004b28:	4602      	mov	r2, r0
 8004b2a:	693b      	ldr	r3, [r7, #16]
 8004b2c:	1ad3      	subs	r3, r2, r3
 8004b2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d901      	bls.n	8004b3a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004b36:	2303      	movs	r3, #3
 8004b38:	e138      	b.n	8004dac <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b3a:	4b46      	ldr	r3, [pc, #280]	@ (8004c54 <HAL_RCC_OscConfig+0x4b8>)
 8004b3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b40:	f003 0302 	and.w	r3, r3, #2
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d0ed      	beq.n	8004b24 <HAL_RCC_OscConfig+0x388>
 8004b48:	e015      	b.n	8004b76 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b4a:	f7fd fa2b 	bl	8001fa4 <HAL_GetTick>
 8004b4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004b50:	e00a      	b.n	8004b68 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b52:	f7fd fa27 	bl	8001fa4 <HAL_GetTick>
 8004b56:	4602      	mov	r2, r0
 8004b58:	693b      	ldr	r3, [r7, #16]
 8004b5a:	1ad3      	subs	r3, r2, r3
 8004b5c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d901      	bls.n	8004b68 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004b64:	2303      	movs	r3, #3
 8004b66:	e121      	b.n	8004dac <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004b68:	4b3a      	ldr	r3, [pc, #232]	@ (8004c54 <HAL_RCC_OscConfig+0x4b8>)
 8004b6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b6e:	f003 0302 	and.w	r3, r3, #2
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d1ed      	bne.n	8004b52 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004b76:	7ffb      	ldrb	r3, [r7, #31]
 8004b78:	2b01      	cmp	r3, #1
 8004b7a:	d105      	bne.n	8004b88 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b7c:	4b35      	ldr	r3, [pc, #212]	@ (8004c54 <HAL_RCC_OscConfig+0x4b8>)
 8004b7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b80:	4a34      	ldr	r2, [pc, #208]	@ (8004c54 <HAL_RCC_OscConfig+0x4b8>)
 8004b82:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004b86:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f003 0320 	and.w	r3, r3, #32
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d03c      	beq.n	8004c0e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	699b      	ldr	r3, [r3, #24]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d01c      	beq.n	8004bd6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004b9c:	4b2d      	ldr	r3, [pc, #180]	@ (8004c54 <HAL_RCC_OscConfig+0x4b8>)
 8004b9e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004ba2:	4a2c      	ldr	r2, [pc, #176]	@ (8004c54 <HAL_RCC_OscConfig+0x4b8>)
 8004ba4:	f043 0301 	orr.w	r3, r3, #1
 8004ba8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bac:	f7fd f9fa 	bl	8001fa4 <HAL_GetTick>
 8004bb0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004bb2:	e008      	b.n	8004bc6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004bb4:	f7fd f9f6 	bl	8001fa4 <HAL_GetTick>
 8004bb8:	4602      	mov	r2, r0
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	1ad3      	subs	r3, r2, r3
 8004bbe:	2b02      	cmp	r3, #2
 8004bc0:	d901      	bls.n	8004bc6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004bc2:	2303      	movs	r3, #3
 8004bc4:	e0f2      	b.n	8004dac <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004bc6:	4b23      	ldr	r3, [pc, #140]	@ (8004c54 <HAL_RCC_OscConfig+0x4b8>)
 8004bc8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004bcc:	f003 0302 	and.w	r3, r3, #2
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d0ef      	beq.n	8004bb4 <HAL_RCC_OscConfig+0x418>
 8004bd4:	e01b      	b.n	8004c0e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004bd6:	4b1f      	ldr	r3, [pc, #124]	@ (8004c54 <HAL_RCC_OscConfig+0x4b8>)
 8004bd8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004bdc:	4a1d      	ldr	r2, [pc, #116]	@ (8004c54 <HAL_RCC_OscConfig+0x4b8>)
 8004bde:	f023 0301 	bic.w	r3, r3, #1
 8004be2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004be6:	f7fd f9dd 	bl	8001fa4 <HAL_GetTick>
 8004bea:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004bec:	e008      	b.n	8004c00 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004bee:	f7fd f9d9 	bl	8001fa4 <HAL_GetTick>
 8004bf2:	4602      	mov	r2, r0
 8004bf4:	693b      	ldr	r3, [r7, #16]
 8004bf6:	1ad3      	subs	r3, r2, r3
 8004bf8:	2b02      	cmp	r3, #2
 8004bfa:	d901      	bls.n	8004c00 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004bfc:	2303      	movs	r3, #3
 8004bfe:	e0d5      	b.n	8004dac <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004c00:	4b14      	ldr	r3, [pc, #80]	@ (8004c54 <HAL_RCC_OscConfig+0x4b8>)
 8004c02:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004c06:	f003 0302 	and.w	r3, r3, #2
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d1ef      	bne.n	8004bee <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	69db      	ldr	r3, [r3, #28]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	f000 80c9 	beq.w	8004daa <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004c18:	4b0e      	ldr	r3, [pc, #56]	@ (8004c54 <HAL_RCC_OscConfig+0x4b8>)
 8004c1a:	689b      	ldr	r3, [r3, #8]
 8004c1c:	f003 030c 	and.w	r3, r3, #12
 8004c20:	2b0c      	cmp	r3, #12
 8004c22:	f000 8083 	beq.w	8004d2c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	69db      	ldr	r3, [r3, #28]
 8004c2a:	2b02      	cmp	r3, #2
 8004c2c:	d15e      	bne.n	8004cec <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c2e:	4b09      	ldr	r3, [pc, #36]	@ (8004c54 <HAL_RCC_OscConfig+0x4b8>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4a08      	ldr	r2, [pc, #32]	@ (8004c54 <HAL_RCC_OscConfig+0x4b8>)
 8004c34:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004c38:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c3a:	f7fd f9b3 	bl	8001fa4 <HAL_GetTick>
 8004c3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c40:	e00c      	b.n	8004c5c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c42:	f7fd f9af 	bl	8001fa4 <HAL_GetTick>
 8004c46:	4602      	mov	r2, r0
 8004c48:	693b      	ldr	r3, [r7, #16]
 8004c4a:	1ad3      	subs	r3, r2, r3
 8004c4c:	2b02      	cmp	r3, #2
 8004c4e:	d905      	bls.n	8004c5c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004c50:	2303      	movs	r3, #3
 8004c52:	e0ab      	b.n	8004dac <HAL_RCC_OscConfig+0x610>
 8004c54:	40021000 	.word	0x40021000
 8004c58:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c5c:	4b55      	ldr	r3, [pc, #340]	@ (8004db4 <HAL_RCC_OscConfig+0x618>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d1ec      	bne.n	8004c42 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004c68:	4b52      	ldr	r3, [pc, #328]	@ (8004db4 <HAL_RCC_OscConfig+0x618>)
 8004c6a:	68da      	ldr	r2, [r3, #12]
 8004c6c:	4b52      	ldr	r3, [pc, #328]	@ (8004db8 <HAL_RCC_OscConfig+0x61c>)
 8004c6e:	4013      	ands	r3, r2
 8004c70:	687a      	ldr	r2, [r7, #4]
 8004c72:	6a11      	ldr	r1, [r2, #32]
 8004c74:	687a      	ldr	r2, [r7, #4]
 8004c76:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004c78:	3a01      	subs	r2, #1
 8004c7a:	0112      	lsls	r2, r2, #4
 8004c7c:	4311      	orrs	r1, r2
 8004c7e:	687a      	ldr	r2, [r7, #4]
 8004c80:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004c82:	0212      	lsls	r2, r2, #8
 8004c84:	4311      	orrs	r1, r2
 8004c86:	687a      	ldr	r2, [r7, #4]
 8004c88:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004c8a:	0852      	lsrs	r2, r2, #1
 8004c8c:	3a01      	subs	r2, #1
 8004c8e:	0552      	lsls	r2, r2, #21
 8004c90:	4311      	orrs	r1, r2
 8004c92:	687a      	ldr	r2, [r7, #4]
 8004c94:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004c96:	0852      	lsrs	r2, r2, #1
 8004c98:	3a01      	subs	r2, #1
 8004c9a:	0652      	lsls	r2, r2, #25
 8004c9c:	4311      	orrs	r1, r2
 8004c9e:	687a      	ldr	r2, [r7, #4]
 8004ca0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004ca2:	06d2      	lsls	r2, r2, #27
 8004ca4:	430a      	orrs	r2, r1
 8004ca6:	4943      	ldr	r1, [pc, #268]	@ (8004db4 <HAL_RCC_OscConfig+0x618>)
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004cac:	4b41      	ldr	r3, [pc, #260]	@ (8004db4 <HAL_RCC_OscConfig+0x618>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a40      	ldr	r2, [pc, #256]	@ (8004db4 <HAL_RCC_OscConfig+0x618>)
 8004cb2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004cb6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004cb8:	4b3e      	ldr	r3, [pc, #248]	@ (8004db4 <HAL_RCC_OscConfig+0x618>)
 8004cba:	68db      	ldr	r3, [r3, #12]
 8004cbc:	4a3d      	ldr	r2, [pc, #244]	@ (8004db4 <HAL_RCC_OscConfig+0x618>)
 8004cbe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004cc2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cc4:	f7fd f96e 	bl	8001fa4 <HAL_GetTick>
 8004cc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004cca:	e008      	b.n	8004cde <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ccc:	f7fd f96a 	bl	8001fa4 <HAL_GetTick>
 8004cd0:	4602      	mov	r2, r0
 8004cd2:	693b      	ldr	r3, [r7, #16]
 8004cd4:	1ad3      	subs	r3, r2, r3
 8004cd6:	2b02      	cmp	r3, #2
 8004cd8:	d901      	bls.n	8004cde <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004cda:	2303      	movs	r3, #3
 8004cdc:	e066      	b.n	8004dac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004cde:	4b35      	ldr	r3, [pc, #212]	@ (8004db4 <HAL_RCC_OscConfig+0x618>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d0f0      	beq.n	8004ccc <HAL_RCC_OscConfig+0x530>
 8004cea:	e05e      	b.n	8004daa <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cec:	4b31      	ldr	r3, [pc, #196]	@ (8004db4 <HAL_RCC_OscConfig+0x618>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a30      	ldr	r2, [pc, #192]	@ (8004db4 <HAL_RCC_OscConfig+0x618>)
 8004cf2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004cf6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cf8:	f7fd f954 	bl	8001fa4 <HAL_GetTick>
 8004cfc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004cfe:	e008      	b.n	8004d12 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d00:	f7fd f950 	bl	8001fa4 <HAL_GetTick>
 8004d04:	4602      	mov	r2, r0
 8004d06:	693b      	ldr	r3, [r7, #16]
 8004d08:	1ad3      	subs	r3, r2, r3
 8004d0a:	2b02      	cmp	r3, #2
 8004d0c:	d901      	bls.n	8004d12 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8004d0e:	2303      	movs	r3, #3
 8004d10:	e04c      	b.n	8004dac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d12:	4b28      	ldr	r3, [pc, #160]	@ (8004db4 <HAL_RCC_OscConfig+0x618>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d1f0      	bne.n	8004d00 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004d1e:	4b25      	ldr	r3, [pc, #148]	@ (8004db4 <HAL_RCC_OscConfig+0x618>)
 8004d20:	68da      	ldr	r2, [r3, #12]
 8004d22:	4924      	ldr	r1, [pc, #144]	@ (8004db4 <HAL_RCC_OscConfig+0x618>)
 8004d24:	4b25      	ldr	r3, [pc, #148]	@ (8004dbc <HAL_RCC_OscConfig+0x620>)
 8004d26:	4013      	ands	r3, r2
 8004d28:	60cb      	str	r3, [r1, #12]
 8004d2a:	e03e      	b.n	8004daa <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	69db      	ldr	r3, [r3, #28]
 8004d30:	2b01      	cmp	r3, #1
 8004d32:	d101      	bne.n	8004d38 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004d34:	2301      	movs	r3, #1
 8004d36:	e039      	b.n	8004dac <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004d38:	4b1e      	ldr	r3, [pc, #120]	@ (8004db4 <HAL_RCC_OscConfig+0x618>)
 8004d3a:	68db      	ldr	r3, [r3, #12]
 8004d3c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	f003 0203 	and.w	r2, r3, #3
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6a1b      	ldr	r3, [r3, #32]
 8004d48:	429a      	cmp	r2, r3
 8004d4a:	d12c      	bne.n	8004da6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004d4c:	697b      	ldr	r3, [r7, #20]
 8004d4e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d56:	3b01      	subs	r3, #1
 8004d58:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d5a:	429a      	cmp	r2, r3
 8004d5c:	d123      	bne.n	8004da6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d68:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004d6a:	429a      	cmp	r2, r3
 8004d6c:	d11b      	bne.n	8004da6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004d6e:	697b      	ldr	r3, [r7, #20]
 8004d70:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d78:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004d7a:	429a      	cmp	r2, r3
 8004d7c:	d113      	bne.n	8004da6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004d7e:	697b      	ldr	r3, [r7, #20]
 8004d80:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d88:	085b      	lsrs	r3, r3, #1
 8004d8a:	3b01      	subs	r3, #1
 8004d8c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004d8e:	429a      	cmp	r2, r3
 8004d90:	d109      	bne.n	8004da6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004d92:	697b      	ldr	r3, [r7, #20]
 8004d94:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d9c:	085b      	lsrs	r3, r3, #1
 8004d9e:	3b01      	subs	r3, #1
 8004da0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004da2:	429a      	cmp	r2, r3
 8004da4:	d001      	beq.n	8004daa <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8004da6:	2301      	movs	r3, #1
 8004da8:	e000      	b.n	8004dac <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8004daa:	2300      	movs	r3, #0
}
 8004dac:	4618      	mov	r0, r3
 8004dae:	3720      	adds	r7, #32
 8004db0:	46bd      	mov	sp, r7
 8004db2:	bd80      	pop	{r7, pc}
 8004db4:	40021000 	.word	0x40021000
 8004db8:	019f800c 	.word	0x019f800c
 8004dbc:	feeefffc 	.word	0xfeeefffc

08004dc0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b086      	sub	sp, #24
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
 8004dc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004dca:	2300      	movs	r3, #0
 8004dcc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d101      	bne.n	8004dd8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	e11e      	b.n	8005016 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004dd8:	4b91      	ldr	r3, [pc, #580]	@ (8005020 <HAL_RCC_ClockConfig+0x260>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f003 030f 	and.w	r3, r3, #15
 8004de0:	683a      	ldr	r2, [r7, #0]
 8004de2:	429a      	cmp	r2, r3
 8004de4:	d910      	bls.n	8004e08 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004de6:	4b8e      	ldr	r3, [pc, #568]	@ (8005020 <HAL_RCC_ClockConfig+0x260>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f023 020f 	bic.w	r2, r3, #15
 8004dee:	498c      	ldr	r1, [pc, #560]	@ (8005020 <HAL_RCC_ClockConfig+0x260>)
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	4313      	orrs	r3, r2
 8004df4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004df6:	4b8a      	ldr	r3, [pc, #552]	@ (8005020 <HAL_RCC_ClockConfig+0x260>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f003 030f 	and.w	r3, r3, #15
 8004dfe:	683a      	ldr	r2, [r7, #0]
 8004e00:	429a      	cmp	r2, r3
 8004e02:	d001      	beq.n	8004e08 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004e04:	2301      	movs	r3, #1
 8004e06:	e106      	b.n	8005016 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f003 0301 	and.w	r3, r3, #1
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d073      	beq.n	8004efc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	2b03      	cmp	r3, #3
 8004e1a:	d129      	bne.n	8004e70 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e1c:	4b81      	ldr	r3, [pc, #516]	@ (8005024 <HAL_RCC_ClockConfig+0x264>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d101      	bne.n	8004e2c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004e28:	2301      	movs	r3, #1
 8004e2a:	e0f4      	b.n	8005016 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004e2c:	f000 f99e 	bl	800516c <RCC_GetSysClockFreqFromPLLSource>
 8004e30:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004e32:	693b      	ldr	r3, [r7, #16]
 8004e34:	4a7c      	ldr	r2, [pc, #496]	@ (8005028 <HAL_RCC_ClockConfig+0x268>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d93f      	bls.n	8004eba <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004e3a:	4b7a      	ldr	r3, [pc, #488]	@ (8005024 <HAL_RCC_ClockConfig+0x264>)
 8004e3c:	689b      	ldr	r3, [r3, #8]
 8004e3e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d009      	beq.n	8004e5a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d033      	beq.n	8004eba <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d12f      	bne.n	8004eba <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004e5a:	4b72      	ldr	r3, [pc, #456]	@ (8005024 <HAL_RCC_ClockConfig+0x264>)
 8004e5c:	689b      	ldr	r3, [r3, #8]
 8004e5e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004e62:	4a70      	ldr	r2, [pc, #448]	@ (8005024 <HAL_RCC_ClockConfig+0x264>)
 8004e64:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e68:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004e6a:	2380      	movs	r3, #128	@ 0x80
 8004e6c:	617b      	str	r3, [r7, #20]
 8004e6e:	e024      	b.n	8004eba <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	2b02      	cmp	r3, #2
 8004e76:	d107      	bne.n	8004e88 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004e78:	4b6a      	ldr	r3, [pc, #424]	@ (8005024 <HAL_RCC_ClockConfig+0x264>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d109      	bne.n	8004e98 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004e84:	2301      	movs	r3, #1
 8004e86:	e0c6      	b.n	8005016 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004e88:	4b66      	ldr	r3, [pc, #408]	@ (8005024 <HAL_RCC_ClockConfig+0x264>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d101      	bne.n	8004e98 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004e94:	2301      	movs	r3, #1
 8004e96:	e0be      	b.n	8005016 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004e98:	f000 f8ce 	bl	8005038 <HAL_RCC_GetSysClockFreq>
 8004e9c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004e9e:	693b      	ldr	r3, [r7, #16]
 8004ea0:	4a61      	ldr	r2, [pc, #388]	@ (8005028 <HAL_RCC_ClockConfig+0x268>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d909      	bls.n	8004eba <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004ea6:	4b5f      	ldr	r3, [pc, #380]	@ (8005024 <HAL_RCC_ClockConfig+0x264>)
 8004ea8:	689b      	ldr	r3, [r3, #8]
 8004eaa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004eae:	4a5d      	ldr	r2, [pc, #372]	@ (8005024 <HAL_RCC_ClockConfig+0x264>)
 8004eb0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004eb4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004eb6:	2380      	movs	r3, #128	@ 0x80
 8004eb8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004eba:	4b5a      	ldr	r3, [pc, #360]	@ (8005024 <HAL_RCC_ClockConfig+0x264>)
 8004ebc:	689b      	ldr	r3, [r3, #8]
 8004ebe:	f023 0203 	bic.w	r2, r3, #3
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	685b      	ldr	r3, [r3, #4]
 8004ec6:	4957      	ldr	r1, [pc, #348]	@ (8005024 <HAL_RCC_ClockConfig+0x264>)
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ecc:	f7fd f86a 	bl	8001fa4 <HAL_GetTick>
 8004ed0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ed2:	e00a      	b.n	8004eea <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ed4:	f7fd f866 	bl	8001fa4 <HAL_GetTick>
 8004ed8:	4602      	mov	r2, r0
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	1ad3      	subs	r3, r2, r3
 8004ede:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d901      	bls.n	8004eea <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004ee6:	2303      	movs	r3, #3
 8004ee8:	e095      	b.n	8005016 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004eea:	4b4e      	ldr	r3, [pc, #312]	@ (8005024 <HAL_RCC_ClockConfig+0x264>)
 8004eec:	689b      	ldr	r3, [r3, #8]
 8004eee:	f003 020c 	and.w	r2, r3, #12
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	685b      	ldr	r3, [r3, #4]
 8004ef6:	009b      	lsls	r3, r3, #2
 8004ef8:	429a      	cmp	r2, r3
 8004efa:	d1eb      	bne.n	8004ed4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f003 0302 	and.w	r3, r3, #2
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d023      	beq.n	8004f50 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f003 0304 	and.w	r3, r3, #4
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d005      	beq.n	8004f20 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004f14:	4b43      	ldr	r3, [pc, #268]	@ (8005024 <HAL_RCC_ClockConfig+0x264>)
 8004f16:	689b      	ldr	r3, [r3, #8]
 8004f18:	4a42      	ldr	r2, [pc, #264]	@ (8005024 <HAL_RCC_ClockConfig+0x264>)
 8004f1a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004f1e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f003 0308 	and.w	r3, r3, #8
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d007      	beq.n	8004f3c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004f2c:	4b3d      	ldr	r3, [pc, #244]	@ (8005024 <HAL_RCC_ClockConfig+0x264>)
 8004f2e:	689b      	ldr	r3, [r3, #8]
 8004f30:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004f34:	4a3b      	ldr	r2, [pc, #236]	@ (8005024 <HAL_RCC_ClockConfig+0x264>)
 8004f36:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004f3a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f3c:	4b39      	ldr	r3, [pc, #228]	@ (8005024 <HAL_RCC_ClockConfig+0x264>)
 8004f3e:	689b      	ldr	r3, [r3, #8]
 8004f40:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	689b      	ldr	r3, [r3, #8]
 8004f48:	4936      	ldr	r1, [pc, #216]	@ (8005024 <HAL_RCC_ClockConfig+0x264>)
 8004f4a:	4313      	orrs	r3, r2
 8004f4c:	608b      	str	r3, [r1, #8]
 8004f4e:	e008      	b.n	8004f62 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004f50:	697b      	ldr	r3, [r7, #20]
 8004f52:	2b80      	cmp	r3, #128	@ 0x80
 8004f54:	d105      	bne.n	8004f62 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004f56:	4b33      	ldr	r3, [pc, #204]	@ (8005024 <HAL_RCC_ClockConfig+0x264>)
 8004f58:	689b      	ldr	r3, [r3, #8]
 8004f5a:	4a32      	ldr	r2, [pc, #200]	@ (8005024 <HAL_RCC_ClockConfig+0x264>)
 8004f5c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004f60:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004f62:	4b2f      	ldr	r3, [pc, #188]	@ (8005020 <HAL_RCC_ClockConfig+0x260>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f003 030f 	and.w	r3, r3, #15
 8004f6a:	683a      	ldr	r2, [r7, #0]
 8004f6c:	429a      	cmp	r2, r3
 8004f6e:	d21d      	bcs.n	8004fac <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f70:	4b2b      	ldr	r3, [pc, #172]	@ (8005020 <HAL_RCC_ClockConfig+0x260>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f023 020f 	bic.w	r2, r3, #15
 8004f78:	4929      	ldr	r1, [pc, #164]	@ (8005020 <HAL_RCC_ClockConfig+0x260>)
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004f80:	f7fd f810 	bl	8001fa4 <HAL_GetTick>
 8004f84:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f86:	e00a      	b.n	8004f9e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f88:	f7fd f80c 	bl	8001fa4 <HAL_GetTick>
 8004f8c:	4602      	mov	r2, r0
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	1ad3      	subs	r3, r2, r3
 8004f92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d901      	bls.n	8004f9e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004f9a:	2303      	movs	r3, #3
 8004f9c:	e03b      	b.n	8005016 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f9e:	4b20      	ldr	r3, [pc, #128]	@ (8005020 <HAL_RCC_ClockConfig+0x260>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f003 030f 	and.w	r3, r3, #15
 8004fa6:	683a      	ldr	r2, [r7, #0]
 8004fa8:	429a      	cmp	r2, r3
 8004faa:	d1ed      	bne.n	8004f88 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f003 0304 	and.w	r3, r3, #4
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d008      	beq.n	8004fca <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004fb8:	4b1a      	ldr	r3, [pc, #104]	@ (8005024 <HAL_RCC_ClockConfig+0x264>)
 8004fba:	689b      	ldr	r3, [r3, #8]
 8004fbc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	68db      	ldr	r3, [r3, #12]
 8004fc4:	4917      	ldr	r1, [pc, #92]	@ (8005024 <HAL_RCC_ClockConfig+0x264>)
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f003 0308 	and.w	r3, r3, #8
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d009      	beq.n	8004fea <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004fd6:	4b13      	ldr	r3, [pc, #76]	@ (8005024 <HAL_RCC_ClockConfig+0x264>)
 8004fd8:	689b      	ldr	r3, [r3, #8]
 8004fda:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	691b      	ldr	r3, [r3, #16]
 8004fe2:	00db      	lsls	r3, r3, #3
 8004fe4:	490f      	ldr	r1, [pc, #60]	@ (8005024 <HAL_RCC_ClockConfig+0x264>)
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004fea:	f000 f825 	bl	8005038 <HAL_RCC_GetSysClockFreq>
 8004fee:	4602      	mov	r2, r0
 8004ff0:	4b0c      	ldr	r3, [pc, #48]	@ (8005024 <HAL_RCC_ClockConfig+0x264>)
 8004ff2:	689b      	ldr	r3, [r3, #8]
 8004ff4:	091b      	lsrs	r3, r3, #4
 8004ff6:	f003 030f 	and.w	r3, r3, #15
 8004ffa:	490c      	ldr	r1, [pc, #48]	@ (800502c <HAL_RCC_ClockConfig+0x26c>)
 8004ffc:	5ccb      	ldrb	r3, [r1, r3]
 8004ffe:	f003 031f 	and.w	r3, r3, #31
 8005002:	fa22 f303 	lsr.w	r3, r2, r3
 8005006:	4a0a      	ldr	r2, [pc, #40]	@ (8005030 <HAL_RCC_ClockConfig+0x270>)
 8005008:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800500a:	4b0a      	ldr	r3, [pc, #40]	@ (8005034 <HAL_RCC_ClockConfig+0x274>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4618      	mov	r0, r3
 8005010:	f7fc ff7c 	bl	8001f0c <HAL_InitTick>
 8005014:	4603      	mov	r3, r0
}
 8005016:	4618      	mov	r0, r3
 8005018:	3718      	adds	r7, #24
 800501a:	46bd      	mov	sp, r7
 800501c:	bd80      	pop	{r7, pc}
 800501e:	bf00      	nop
 8005020:	40022000 	.word	0x40022000
 8005024:	40021000 	.word	0x40021000
 8005028:	04c4b400 	.word	0x04c4b400
 800502c:	0800cec4 	.word	0x0800cec4
 8005030:	20000000 	.word	0x20000000
 8005034:	2000009c 	.word	0x2000009c

08005038 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005038:	b480      	push	{r7}
 800503a:	b087      	sub	sp, #28
 800503c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800503e:	4b2c      	ldr	r3, [pc, #176]	@ (80050f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005040:	689b      	ldr	r3, [r3, #8]
 8005042:	f003 030c 	and.w	r3, r3, #12
 8005046:	2b04      	cmp	r3, #4
 8005048:	d102      	bne.n	8005050 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800504a:	4b2a      	ldr	r3, [pc, #168]	@ (80050f4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800504c:	613b      	str	r3, [r7, #16]
 800504e:	e047      	b.n	80050e0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005050:	4b27      	ldr	r3, [pc, #156]	@ (80050f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005052:	689b      	ldr	r3, [r3, #8]
 8005054:	f003 030c 	and.w	r3, r3, #12
 8005058:	2b08      	cmp	r3, #8
 800505a:	d102      	bne.n	8005062 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800505c:	4b26      	ldr	r3, [pc, #152]	@ (80050f8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800505e:	613b      	str	r3, [r7, #16]
 8005060:	e03e      	b.n	80050e0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005062:	4b23      	ldr	r3, [pc, #140]	@ (80050f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005064:	689b      	ldr	r3, [r3, #8]
 8005066:	f003 030c 	and.w	r3, r3, #12
 800506a:	2b0c      	cmp	r3, #12
 800506c:	d136      	bne.n	80050dc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800506e:	4b20      	ldr	r3, [pc, #128]	@ (80050f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005070:	68db      	ldr	r3, [r3, #12]
 8005072:	f003 0303 	and.w	r3, r3, #3
 8005076:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005078:	4b1d      	ldr	r3, [pc, #116]	@ (80050f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800507a:	68db      	ldr	r3, [r3, #12]
 800507c:	091b      	lsrs	r3, r3, #4
 800507e:	f003 030f 	and.w	r3, r3, #15
 8005082:	3301      	adds	r3, #1
 8005084:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	2b03      	cmp	r3, #3
 800508a:	d10c      	bne.n	80050a6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800508c:	4a1a      	ldr	r2, [pc, #104]	@ (80050f8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800508e:	68bb      	ldr	r3, [r7, #8]
 8005090:	fbb2 f3f3 	udiv	r3, r2, r3
 8005094:	4a16      	ldr	r2, [pc, #88]	@ (80050f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005096:	68d2      	ldr	r2, [r2, #12]
 8005098:	0a12      	lsrs	r2, r2, #8
 800509a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800509e:	fb02 f303 	mul.w	r3, r2, r3
 80050a2:	617b      	str	r3, [r7, #20]
      break;
 80050a4:	e00c      	b.n	80050c0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80050a6:	4a13      	ldr	r2, [pc, #76]	@ (80050f4 <HAL_RCC_GetSysClockFreq+0xbc>)
 80050a8:	68bb      	ldr	r3, [r7, #8]
 80050aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80050ae:	4a10      	ldr	r2, [pc, #64]	@ (80050f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80050b0:	68d2      	ldr	r2, [r2, #12]
 80050b2:	0a12      	lsrs	r2, r2, #8
 80050b4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80050b8:	fb02 f303 	mul.w	r3, r2, r3
 80050bc:	617b      	str	r3, [r7, #20]
      break;
 80050be:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80050c0:	4b0b      	ldr	r3, [pc, #44]	@ (80050f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80050c2:	68db      	ldr	r3, [r3, #12]
 80050c4:	0e5b      	lsrs	r3, r3, #25
 80050c6:	f003 0303 	and.w	r3, r3, #3
 80050ca:	3301      	adds	r3, #1
 80050cc:	005b      	lsls	r3, r3, #1
 80050ce:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80050d0:	697a      	ldr	r2, [r7, #20]
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80050d8:	613b      	str	r3, [r7, #16]
 80050da:	e001      	b.n	80050e0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80050dc:	2300      	movs	r3, #0
 80050de:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80050e0:	693b      	ldr	r3, [r7, #16]
}
 80050e2:	4618      	mov	r0, r3
 80050e4:	371c      	adds	r7, #28
 80050e6:	46bd      	mov	sp, r7
 80050e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ec:	4770      	bx	lr
 80050ee:	bf00      	nop
 80050f0:	40021000 	.word	0x40021000
 80050f4:	00f42400 	.word	0x00f42400
 80050f8:	016e3600 	.word	0x016e3600

080050fc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80050fc:	b480      	push	{r7}
 80050fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005100:	4b03      	ldr	r3, [pc, #12]	@ (8005110 <HAL_RCC_GetHCLKFreq+0x14>)
 8005102:	681b      	ldr	r3, [r3, #0]
}
 8005104:	4618      	mov	r0, r3
 8005106:	46bd      	mov	sp, r7
 8005108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510c:	4770      	bx	lr
 800510e:	bf00      	nop
 8005110:	20000000 	.word	0x20000000

08005114 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005118:	f7ff fff0 	bl	80050fc <HAL_RCC_GetHCLKFreq>
 800511c:	4602      	mov	r2, r0
 800511e:	4b06      	ldr	r3, [pc, #24]	@ (8005138 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005120:	689b      	ldr	r3, [r3, #8]
 8005122:	0a1b      	lsrs	r3, r3, #8
 8005124:	f003 0307 	and.w	r3, r3, #7
 8005128:	4904      	ldr	r1, [pc, #16]	@ (800513c <HAL_RCC_GetPCLK1Freq+0x28>)
 800512a:	5ccb      	ldrb	r3, [r1, r3]
 800512c:	f003 031f 	and.w	r3, r3, #31
 8005130:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005134:	4618      	mov	r0, r3
 8005136:	bd80      	pop	{r7, pc}
 8005138:	40021000 	.word	0x40021000
 800513c:	0800ced4 	.word	0x0800ced4

08005140 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005144:	f7ff ffda 	bl	80050fc <HAL_RCC_GetHCLKFreq>
 8005148:	4602      	mov	r2, r0
 800514a:	4b06      	ldr	r3, [pc, #24]	@ (8005164 <HAL_RCC_GetPCLK2Freq+0x24>)
 800514c:	689b      	ldr	r3, [r3, #8]
 800514e:	0adb      	lsrs	r3, r3, #11
 8005150:	f003 0307 	and.w	r3, r3, #7
 8005154:	4904      	ldr	r1, [pc, #16]	@ (8005168 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005156:	5ccb      	ldrb	r3, [r1, r3]
 8005158:	f003 031f 	and.w	r3, r3, #31
 800515c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005160:	4618      	mov	r0, r3
 8005162:	bd80      	pop	{r7, pc}
 8005164:	40021000 	.word	0x40021000
 8005168:	0800ced4 	.word	0x0800ced4

0800516c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800516c:	b480      	push	{r7}
 800516e:	b087      	sub	sp, #28
 8005170:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005172:	4b1e      	ldr	r3, [pc, #120]	@ (80051ec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005174:	68db      	ldr	r3, [r3, #12]
 8005176:	f003 0303 	and.w	r3, r3, #3
 800517a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800517c:	4b1b      	ldr	r3, [pc, #108]	@ (80051ec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800517e:	68db      	ldr	r3, [r3, #12]
 8005180:	091b      	lsrs	r3, r3, #4
 8005182:	f003 030f 	and.w	r3, r3, #15
 8005186:	3301      	adds	r3, #1
 8005188:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800518a:	693b      	ldr	r3, [r7, #16]
 800518c:	2b03      	cmp	r3, #3
 800518e:	d10c      	bne.n	80051aa <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005190:	4a17      	ldr	r2, [pc, #92]	@ (80051f0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	fbb2 f3f3 	udiv	r3, r2, r3
 8005198:	4a14      	ldr	r2, [pc, #80]	@ (80051ec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800519a:	68d2      	ldr	r2, [r2, #12]
 800519c:	0a12      	lsrs	r2, r2, #8
 800519e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80051a2:	fb02 f303 	mul.w	r3, r2, r3
 80051a6:	617b      	str	r3, [r7, #20]
    break;
 80051a8:	e00c      	b.n	80051c4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80051aa:	4a12      	ldr	r2, [pc, #72]	@ (80051f4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80051b2:	4a0e      	ldr	r2, [pc, #56]	@ (80051ec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80051b4:	68d2      	ldr	r2, [r2, #12]
 80051b6:	0a12      	lsrs	r2, r2, #8
 80051b8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80051bc:	fb02 f303 	mul.w	r3, r2, r3
 80051c0:	617b      	str	r3, [r7, #20]
    break;
 80051c2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80051c4:	4b09      	ldr	r3, [pc, #36]	@ (80051ec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80051c6:	68db      	ldr	r3, [r3, #12]
 80051c8:	0e5b      	lsrs	r3, r3, #25
 80051ca:	f003 0303 	and.w	r3, r3, #3
 80051ce:	3301      	adds	r3, #1
 80051d0:	005b      	lsls	r3, r3, #1
 80051d2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80051d4:	697a      	ldr	r2, [r7, #20]
 80051d6:	68bb      	ldr	r3, [r7, #8]
 80051d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80051dc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80051de:	687b      	ldr	r3, [r7, #4]
}
 80051e0:	4618      	mov	r0, r3
 80051e2:	371c      	adds	r7, #28
 80051e4:	46bd      	mov	sp, r7
 80051e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ea:	4770      	bx	lr
 80051ec:	40021000 	.word	0x40021000
 80051f0:	016e3600 	.word	0x016e3600
 80051f4:	00f42400 	.word	0x00f42400

080051f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b086      	sub	sp, #24
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005200:	2300      	movs	r3, #0
 8005202:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005204:	2300      	movs	r3, #0
 8005206:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005210:	2b00      	cmp	r3, #0
 8005212:	f000 8098 	beq.w	8005346 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005216:	2300      	movs	r3, #0
 8005218:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800521a:	4b43      	ldr	r3, [pc, #268]	@ (8005328 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800521c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800521e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005222:	2b00      	cmp	r3, #0
 8005224:	d10d      	bne.n	8005242 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005226:	4b40      	ldr	r3, [pc, #256]	@ (8005328 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005228:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800522a:	4a3f      	ldr	r2, [pc, #252]	@ (8005328 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800522c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005230:	6593      	str	r3, [r2, #88]	@ 0x58
 8005232:	4b3d      	ldr	r3, [pc, #244]	@ (8005328 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005234:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005236:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800523a:	60bb      	str	r3, [r7, #8]
 800523c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800523e:	2301      	movs	r3, #1
 8005240:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005242:	4b3a      	ldr	r3, [pc, #232]	@ (800532c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4a39      	ldr	r2, [pc, #228]	@ (800532c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005248:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800524c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800524e:	f7fc fea9 	bl	8001fa4 <HAL_GetTick>
 8005252:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005254:	e009      	b.n	800526a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005256:	f7fc fea5 	bl	8001fa4 <HAL_GetTick>
 800525a:	4602      	mov	r2, r0
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	1ad3      	subs	r3, r2, r3
 8005260:	2b02      	cmp	r3, #2
 8005262:	d902      	bls.n	800526a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005264:	2303      	movs	r3, #3
 8005266:	74fb      	strb	r3, [r7, #19]
        break;
 8005268:	e005      	b.n	8005276 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800526a:	4b30      	ldr	r3, [pc, #192]	@ (800532c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005272:	2b00      	cmp	r3, #0
 8005274:	d0ef      	beq.n	8005256 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005276:	7cfb      	ldrb	r3, [r7, #19]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d159      	bne.n	8005330 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800527c:	4b2a      	ldr	r3, [pc, #168]	@ (8005328 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800527e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005282:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005286:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005288:	697b      	ldr	r3, [r7, #20]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d01e      	beq.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005292:	697a      	ldr	r2, [r7, #20]
 8005294:	429a      	cmp	r2, r3
 8005296:	d019      	beq.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005298:	4b23      	ldr	r3, [pc, #140]	@ (8005328 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800529a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800529e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80052a2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80052a4:	4b20      	ldr	r3, [pc, #128]	@ (8005328 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80052a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052aa:	4a1f      	ldr	r2, [pc, #124]	@ (8005328 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80052ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80052b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80052b4:	4b1c      	ldr	r3, [pc, #112]	@ (8005328 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80052b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052ba:	4a1b      	ldr	r2, [pc, #108]	@ (8005328 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80052bc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80052c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80052c4:	4a18      	ldr	r2, [pc, #96]	@ (8005328 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80052c6:	697b      	ldr	r3, [r7, #20]
 80052c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80052cc:	697b      	ldr	r3, [r7, #20]
 80052ce:	f003 0301 	and.w	r3, r3, #1
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d016      	beq.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052d6:	f7fc fe65 	bl	8001fa4 <HAL_GetTick>
 80052da:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80052dc:	e00b      	b.n	80052f6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052de:	f7fc fe61 	bl	8001fa4 <HAL_GetTick>
 80052e2:	4602      	mov	r2, r0
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	1ad3      	subs	r3, r2, r3
 80052e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d902      	bls.n	80052f6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80052f0:	2303      	movs	r3, #3
 80052f2:	74fb      	strb	r3, [r7, #19]
            break;
 80052f4:	e006      	b.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80052f6:	4b0c      	ldr	r3, [pc, #48]	@ (8005328 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80052f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052fc:	f003 0302 	and.w	r3, r3, #2
 8005300:	2b00      	cmp	r3, #0
 8005302:	d0ec      	beq.n	80052de <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005304:	7cfb      	ldrb	r3, [r7, #19]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d10b      	bne.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800530a:	4b07      	ldr	r3, [pc, #28]	@ (8005328 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800530c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005310:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005318:	4903      	ldr	r1, [pc, #12]	@ (8005328 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800531a:	4313      	orrs	r3, r2
 800531c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005320:	e008      	b.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005322:	7cfb      	ldrb	r3, [r7, #19]
 8005324:	74bb      	strb	r3, [r7, #18]
 8005326:	e005      	b.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005328:	40021000 	.word	0x40021000
 800532c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005330:	7cfb      	ldrb	r3, [r7, #19]
 8005332:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005334:	7c7b      	ldrb	r3, [r7, #17]
 8005336:	2b01      	cmp	r3, #1
 8005338:	d105      	bne.n	8005346 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800533a:	4ba6      	ldr	r3, [pc, #664]	@ (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800533c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800533e:	4aa5      	ldr	r2, [pc, #660]	@ (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005340:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005344:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f003 0301 	and.w	r3, r3, #1
 800534e:	2b00      	cmp	r3, #0
 8005350:	d00a      	beq.n	8005368 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005352:	4ba0      	ldr	r3, [pc, #640]	@ (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005354:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005358:	f023 0203 	bic.w	r2, r3, #3
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	685b      	ldr	r3, [r3, #4]
 8005360:	499c      	ldr	r1, [pc, #624]	@ (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005362:	4313      	orrs	r3, r2
 8005364:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f003 0302 	and.w	r3, r3, #2
 8005370:	2b00      	cmp	r3, #0
 8005372:	d00a      	beq.n	800538a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005374:	4b97      	ldr	r3, [pc, #604]	@ (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005376:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800537a:	f023 020c 	bic.w	r2, r3, #12
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	689b      	ldr	r3, [r3, #8]
 8005382:	4994      	ldr	r1, [pc, #592]	@ (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005384:	4313      	orrs	r3, r2
 8005386:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f003 0304 	and.w	r3, r3, #4
 8005392:	2b00      	cmp	r3, #0
 8005394:	d00a      	beq.n	80053ac <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005396:	4b8f      	ldr	r3, [pc, #572]	@ (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005398:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800539c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	68db      	ldr	r3, [r3, #12]
 80053a4:	498b      	ldr	r1, [pc, #556]	@ (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80053a6:	4313      	orrs	r3, r2
 80053a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f003 0308 	and.w	r3, r3, #8
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d00a      	beq.n	80053ce <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80053b8:	4b86      	ldr	r3, [pc, #536]	@ (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80053ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053be:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	691b      	ldr	r3, [r3, #16]
 80053c6:	4983      	ldr	r1, [pc, #524]	@ (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80053c8:	4313      	orrs	r3, r2
 80053ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f003 0320 	and.w	r3, r3, #32
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d00a      	beq.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80053da:	4b7e      	ldr	r3, [pc, #504]	@ (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80053dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053e0:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	695b      	ldr	r3, [r3, #20]
 80053e8:	497a      	ldr	r1, [pc, #488]	@ (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80053ea:	4313      	orrs	r3, r2
 80053ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d00a      	beq.n	8005412 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80053fc:	4b75      	ldr	r3, [pc, #468]	@ (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80053fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005402:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	699b      	ldr	r3, [r3, #24]
 800540a:	4972      	ldr	r1, [pc, #456]	@ (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800540c:	4313      	orrs	r3, r2
 800540e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800541a:	2b00      	cmp	r3, #0
 800541c:	d00a      	beq.n	8005434 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800541e:	4b6d      	ldr	r3, [pc, #436]	@ (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005420:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005424:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	69db      	ldr	r3, [r3, #28]
 800542c:	4969      	ldr	r1, [pc, #420]	@ (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800542e:	4313      	orrs	r3, r2
 8005430:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800543c:	2b00      	cmp	r3, #0
 800543e:	d00a      	beq.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005440:	4b64      	ldr	r3, [pc, #400]	@ (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005442:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005446:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6a1b      	ldr	r3, [r3, #32]
 800544e:	4961      	ldr	r1, [pc, #388]	@ (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005450:	4313      	orrs	r3, r2
 8005452:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800545e:	2b00      	cmp	r3, #0
 8005460:	d00a      	beq.n	8005478 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005462:	4b5c      	ldr	r3, [pc, #368]	@ (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005464:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005468:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005470:	4958      	ldr	r1, [pc, #352]	@ (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005472:	4313      	orrs	r3, r2
 8005474:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005480:	2b00      	cmp	r3, #0
 8005482:	d015      	beq.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005484:	4b53      	ldr	r3, [pc, #332]	@ (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005486:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800548a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005492:	4950      	ldr	r1, [pc, #320]	@ (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005494:	4313      	orrs	r3, r2
 8005496:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800549e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80054a2:	d105      	bne.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80054a4:	4b4b      	ldr	r3, [pc, #300]	@ (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054a6:	68db      	ldr	r3, [r3, #12]
 80054a8:	4a4a      	ldr	r2, [pc, #296]	@ (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054aa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80054ae:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d015      	beq.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80054bc:	4b45      	ldr	r3, [pc, #276]	@ (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054c2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054ca:	4942      	ldr	r1, [pc, #264]	@ (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054cc:	4313      	orrs	r3, r2
 80054ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054d6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80054da:	d105      	bne.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80054dc:	4b3d      	ldr	r3, [pc, #244]	@ (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054de:	68db      	ldr	r3, [r3, #12]
 80054e0:	4a3c      	ldr	r2, [pc, #240]	@ (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054e2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80054e6:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d015      	beq.n	8005520 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80054f4:	4b37      	ldr	r3, [pc, #220]	@ (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054fa:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005502:	4934      	ldr	r1, [pc, #208]	@ (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005504:	4313      	orrs	r3, r2
 8005506:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800550e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005512:	d105      	bne.n	8005520 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005514:	4b2f      	ldr	r3, [pc, #188]	@ (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005516:	68db      	ldr	r3, [r3, #12]
 8005518:	4a2e      	ldr	r2, [pc, #184]	@ (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800551a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800551e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005528:	2b00      	cmp	r3, #0
 800552a:	d015      	beq.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800552c:	4b29      	ldr	r3, [pc, #164]	@ (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800552e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005532:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800553a:	4926      	ldr	r1, [pc, #152]	@ (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800553c:	4313      	orrs	r3, r2
 800553e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005546:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800554a:	d105      	bne.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800554c:	4b21      	ldr	r3, [pc, #132]	@ (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800554e:	68db      	ldr	r3, [r3, #12]
 8005550:	4a20      	ldr	r2, [pc, #128]	@ (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005552:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005556:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005560:	2b00      	cmp	r3, #0
 8005562:	d015      	beq.n	8005590 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005564:	4b1b      	ldr	r3, [pc, #108]	@ (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005566:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800556a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005572:	4918      	ldr	r1, [pc, #96]	@ (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005574:	4313      	orrs	r3, r2
 8005576:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800557e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005582:	d105      	bne.n	8005590 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005584:	4b13      	ldr	r3, [pc, #76]	@ (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005586:	68db      	ldr	r3, [r3, #12]
 8005588:	4a12      	ldr	r2, [pc, #72]	@ (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800558a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800558e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005598:	2b00      	cmp	r3, #0
 800559a:	d015      	beq.n	80055c8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800559c:	4b0d      	ldr	r3, [pc, #52]	@ (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800559e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055a2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055aa:	490a      	ldr	r1, [pc, #40]	@ (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055ac:	4313      	orrs	r3, r2
 80055ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055b6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80055ba:	d105      	bne.n	80055c8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80055bc:	4b05      	ldr	r3, [pc, #20]	@ (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055be:	68db      	ldr	r3, [r3, #12]
 80055c0:	4a04      	ldr	r2, [pc, #16]	@ (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80055c6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80055c8:	7cbb      	ldrb	r3, [r7, #18]
}
 80055ca:	4618      	mov	r0, r3
 80055cc:	3718      	adds	r7, #24
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bd80      	pop	{r7, pc}
 80055d2:	bf00      	nop
 80055d4:	40021000 	.word	0x40021000

080055d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b082      	sub	sp, #8
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d101      	bne.n	80055ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80055e6:	2301      	movs	r3, #1
 80055e8:	e049      	b.n	800567e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80055f0:	b2db      	uxtb	r3, r3
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d106      	bne.n	8005604 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2200      	movs	r2, #0
 80055fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80055fe:	6878      	ldr	r0, [r7, #4]
 8005600:	f7fb fd96 	bl	8001130 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2202      	movs	r2, #2
 8005608:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681a      	ldr	r2, [r3, #0]
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	3304      	adds	r3, #4
 8005614:	4619      	mov	r1, r3
 8005616:	4610      	mov	r0, r2
 8005618:	f000 fb12 	bl	8005c40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2201      	movs	r2, #1
 8005620:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2201      	movs	r2, #1
 8005628:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2201      	movs	r2, #1
 8005630:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2201      	movs	r2, #1
 8005638:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2201      	movs	r2, #1
 8005640:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2201      	movs	r2, #1
 8005648:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2201      	movs	r2, #1
 8005650:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2201      	movs	r2, #1
 8005658:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2201      	movs	r2, #1
 8005660:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2201      	movs	r2, #1
 8005668:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2201      	movs	r2, #1
 8005670:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2201      	movs	r2, #1
 8005678:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800567c:	2300      	movs	r3, #0
}
 800567e:	4618      	mov	r0, r3
 8005680:	3708      	adds	r7, #8
 8005682:	46bd      	mov	sp, r7
 8005684:	bd80      	pop	{r7, pc}
	...

08005688 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005688:	b480      	push	{r7}
 800568a:	b085      	sub	sp, #20
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005696:	b2db      	uxtb	r3, r3
 8005698:	2b01      	cmp	r3, #1
 800569a:	d001      	beq.n	80056a0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800569c:	2301      	movs	r3, #1
 800569e:	e04a      	b.n	8005736 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2202      	movs	r2, #2
 80056a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	68da      	ldr	r2, [r3, #12]
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f042 0201 	orr.w	r2, r2, #1
 80056b6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	4a21      	ldr	r2, [pc, #132]	@ (8005744 <HAL_TIM_Base_Start_IT+0xbc>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d018      	beq.n	80056f4 <HAL_TIM_Base_Start_IT+0x6c>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80056ca:	d013      	beq.n	80056f4 <HAL_TIM_Base_Start_IT+0x6c>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	4a1d      	ldr	r2, [pc, #116]	@ (8005748 <HAL_TIM_Base_Start_IT+0xc0>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d00e      	beq.n	80056f4 <HAL_TIM_Base_Start_IT+0x6c>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4a1c      	ldr	r2, [pc, #112]	@ (800574c <HAL_TIM_Base_Start_IT+0xc4>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d009      	beq.n	80056f4 <HAL_TIM_Base_Start_IT+0x6c>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4a1a      	ldr	r2, [pc, #104]	@ (8005750 <HAL_TIM_Base_Start_IT+0xc8>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d004      	beq.n	80056f4 <HAL_TIM_Base_Start_IT+0x6c>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4a19      	ldr	r2, [pc, #100]	@ (8005754 <HAL_TIM_Base_Start_IT+0xcc>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d115      	bne.n	8005720 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	689a      	ldr	r2, [r3, #8]
 80056fa:	4b17      	ldr	r3, [pc, #92]	@ (8005758 <HAL_TIM_Base_Start_IT+0xd0>)
 80056fc:	4013      	ands	r3, r2
 80056fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	2b06      	cmp	r3, #6
 8005704:	d015      	beq.n	8005732 <HAL_TIM_Base_Start_IT+0xaa>
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800570c:	d011      	beq.n	8005732 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	681a      	ldr	r2, [r3, #0]
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f042 0201 	orr.w	r2, r2, #1
 800571c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800571e:	e008      	b.n	8005732 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	681a      	ldr	r2, [r3, #0]
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f042 0201 	orr.w	r2, r2, #1
 800572e:	601a      	str	r2, [r3, #0]
 8005730:	e000      	b.n	8005734 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005732:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005734:	2300      	movs	r3, #0
}
 8005736:	4618      	mov	r0, r3
 8005738:	3714      	adds	r7, #20
 800573a:	46bd      	mov	sp, r7
 800573c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005740:	4770      	bx	lr
 8005742:	bf00      	nop
 8005744:	40012c00 	.word	0x40012c00
 8005748:	40000400 	.word	0x40000400
 800574c:	40000800 	.word	0x40000800
 8005750:	40013400 	.word	0x40013400
 8005754:	40014000 	.word	0x40014000
 8005758:	00010007 	.word	0x00010007

0800575c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800575c:	b580      	push	{r7, lr}
 800575e:	b084      	sub	sp, #16
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	68db      	ldr	r3, [r3, #12]
 800576a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	691b      	ldr	r3, [r3, #16]
 8005772:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005774:	68bb      	ldr	r3, [r7, #8]
 8005776:	f003 0302 	and.w	r3, r3, #2
 800577a:	2b00      	cmp	r3, #0
 800577c:	d020      	beq.n	80057c0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	f003 0302 	and.w	r3, r3, #2
 8005784:	2b00      	cmp	r3, #0
 8005786:	d01b      	beq.n	80057c0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f06f 0202 	mvn.w	r2, #2
 8005790:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2201      	movs	r2, #1
 8005796:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	699b      	ldr	r3, [r3, #24]
 800579e:	f003 0303 	and.w	r3, r3, #3
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d003      	beq.n	80057ae <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80057a6:	6878      	ldr	r0, [r7, #4]
 80057a8:	f000 fa2c 	bl	8005c04 <HAL_TIM_IC_CaptureCallback>
 80057ac:	e005      	b.n	80057ba <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80057ae:	6878      	ldr	r0, [r7, #4]
 80057b0:	f000 fa1e 	bl	8005bf0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057b4:	6878      	ldr	r0, [r7, #4]
 80057b6:	f000 fa2f 	bl	8005c18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2200      	movs	r2, #0
 80057be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80057c0:	68bb      	ldr	r3, [r7, #8]
 80057c2:	f003 0304 	and.w	r3, r3, #4
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d020      	beq.n	800580c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	f003 0304 	and.w	r3, r3, #4
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d01b      	beq.n	800580c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f06f 0204 	mvn.w	r2, #4
 80057dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2202      	movs	r2, #2
 80057e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	699b      	ldr	r3, [r3, #24]
 80057ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d003      	beq.n	80057fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057f2:	6878      	ldr	r0, [r7, #4]
 80057f4:	f000 fa06 	bl	8005c04 <HAL_TIM_IC_CaptureCallback>
 80057f8:	e005      	b.n	8005806 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057fa:	6878      	ldr	r0, [r7, #4]
 80057fc:	f000 f9f8 	bl	8005bf0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005800:	6878      	ldr	r0, [r7, #4]
 8005802:	f000 fa09 	bl	8005c18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2200      	movs	r2, #0
 800580a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	f003 0308 	and.w	r3, r3, #8
 8005812:	2b00      	cmp	r3, #0
 8005814:	d020      	beq.n	8005858 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	f003 0308 	and.w	r3, r3, #8
 800581c:	2b00      	cmp	r3, #0
 800581e:	d01b      	beq.n	8005858 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f06f 0208 	mvn.w	r2, #8
 8005828:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2204      	movs	r2, #4
 800582e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	69db      	ldr	r3, [r3, #28]
 8005836:	f003 0303 	and.w	r3, r3, #3
 800583a:	2b00      	cmp	r3, #0
 800583c:	d003      	beq.n	8005846 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800583e:	6878      	ldr	r0, [r7, #4]
 8005840:	f000 f9e0 	bl	8005c04 <HAL_TIM_IC_CaptureCallback>
 8005844:	e005      	b.n	8005852 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005846:	6878      	ldr	r0, [r7, #4]
 8005848:	f000 f9d2 	bl	8005bf0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800584c:	6878      	ldr	r0, [r7, #4]
 800584e:	f000 f9e3 	bl	8005c18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2200      	movs	r2, #0
 8005856:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	f003 0310 	and.w	r3, r3, #16
 800585e:	2b00      	cmp	r3, #0
 8005860:	d020      	beq.n	80058a4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	f003 0310 	and.w	r3, r3, #16
 8005868:	2b00      	cmp	r3, #0
 800586a:	d01b      	beq.n	80058a4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f06f 0210 	mvn.w	r2, #16
 8005874:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2208      	movs	r2, #8
 800587a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	69db      	ldr	r3, [r3, #28]
 8005882:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005886:	2b00      	cmp	r3, #0
 8005888:	d003      	beq.n	8005892 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800588a:	6878      	ldr	r0, [r7, #4]
 800588c:	f000 f9ba 	bl	8005c04 <HAL_TIM_IC_CaptureCallback>
 8005890:	e005      	b.n	800589e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005892:	6878      	ldr	r0, [r7, #4]
 8005894:	f000 f9ac 	bl	8005bf0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005898:	6878      	ldr	r0, [r7, #4]
 800589a:	f000 f9bd 	bl	8005c18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2200      	movs	r2, #0
 80058a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80058a4:	68bb      	ldr	r3, [r7, #8]
 80058a6:	f003 0301 	and.w	r3, r3, #1
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d00c      	beq.n	80058c8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	f003 0301 	and.w	r3, r3, #1
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d007      	beq.n	80058c8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f06f 0201 	mvn.w	r2, #1
 80058c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80058c2:	6878      	ldr	r0, [r7, #4]
 80058c4:	f7fb fa72 	bl	8000dac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d104      	bne.n	80058dc <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80058d2:	68bb      	ldr	r3, [r7, #8]
 80058d4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d00c      	beq.n	80058f6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d007      	beq.n	80058f6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80058ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80058f0:	6878      	ldr	r0, [r7, #4]
 80058f2:	f000 fb69 	bl	8005fc8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80058f6:	68bb      	ldr	r3, [r7, #8]
 80058f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d00c      	beq.n	800591a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005906:	2b00      	cmp	r3, #0
 8005908:	d007      	beq.n	800591a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005912:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005914:	6878      	ldr	r0, [r7, #4]
 8005916:	f000 fb61 	bl	8005fdc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005920:	2b00      	cmp	r3, #0
 8005922:	d00c      	beq.n	800593e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800592a:	2b00      	cmp	r3, #0
 800592c:	d007      	beq.n	800593e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005936:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005938:	6878      	ldr	r0, [r7, #4]
 800593a:	f000 f977 	bl	8005c2c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	f003 0320 	and.w	r3, r3, #32
 8005944:	2b00      	cmp	r3, #0
 8005946:	d00c      	beq.n	8005962 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	f003 0320 	and.w	r3, r3, #32
 800594e:	2b00      	cmp	r3, #0
 8005950:	d007      	beq.n	8005962 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f06f 0220 	mvn.w	r2, #32
 800595a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800595c:	6878      	ldr	r0, [r7, #4]
 800595e:	f000 fb29 	bl	8005fb4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005968:	2b00      	cmp	r3, #0
 800596a:	d00c      	beq.n	8005986 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005972:	2b00      	cmp	r3, #0
 8005974:	d007      	beq.n	8005986 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800597e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8005980:	6878      	ldr	r0, [r7, #4]
 8005982:	f000 fb35 	bl	8005ff0 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8005986:	68bb      	ldr	r3, [r7, #8]
 8005988:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800598c:	2b00      	cmp	r3, #0
 800598e:	d00c      	beq.n	80059aa <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005996:	2b00      	cmp	r3, #0
 8005998:	d007      	beq.n	80059aa <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 80059a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80059a4:	6878      	ldr	r0, [r7, #4]
 80059a6:	f000 fb2d 	bl	8006004 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80059aa:	68bb      	ldr	r3, [r7, #8]
 80059ac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d00c      	beq.n	80059ce <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d007      	beq.n	80059ce <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80059c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80059c8:	6878      	ldr	r0, [r7, #4]
 80059ca:	f000 fb25 	bl	8006018 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80059ce:	68bb      	ldr	r3, [r7, #8]
 80059d0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d00c      	beq.n	80059f2 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d007      	beq.n	80059f2 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80059ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80059ec:	6878      	ldr	r0, [r7, #4]
 80059ee:	f000 fb1d 	bl	800602c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80059f2:	bf00      	nop
 80059f4:	3710      	adds	r7, #16
 80059f6:	46bd      	mov	sp, r7
 80059f8:	bd80      	pop	{r7, pc}
	...

080059fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b084      	sub	sp, #16
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
 8005a04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005a06:	2300      	movs	r3, #0
 8005a08:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005a10:	2b01      	cmp	r3, #1
 8005a12:	d101      	bne.n	8005a18 <HAL_TIM_ConfigClockSource+0x1c>
 8005a14:	2302      	movs	r3, #2
 8005a16:	e0de      	b.n	8005bd6 <HAL_TIM_ConfigClockSource+0x1da>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2201      	movs	r2, #1
 8005a1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2202      	movs	r2, #2
 8005a24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	689b      	ldr	r3, [r3, #8]
 8005a2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8005a36:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005a3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005a42:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	68ba      	ldr	r2, [r7, #8]
 8005a4a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	4a63      	ldr	r2, [pc, #396]	@ (8005be0 <HAL_TIM_ConfigClockSource+0x1e4>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	f000 80a9 	beq.w	8005baa <HAL_TIM_ConfigClockSource+0x1ae>
 8005a58:	4a61      	ldr	r2, [pc, #388]	@ (8005be0 <HAL_TIM_ConfigClockSource+0x1e4>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	f200 80ae 	bhi.w	8005bbc <HAL_TIM_ConfigClockSource+0x1c0>
 8005a60:	4a60      	ldr	r2, [pc, #384]	@ (8005be4 <HAL_TIM_ConfigClockSource+0x1e8>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	f000 80a1 	beq.w	8005baa <HAL_TIM_ConfigClockSource+0x1ae>
 8005a68:	4a5e      	ldr	r2, [pc, #376]	@ (8005be4 <HAL_TIM_ConfigClockSource+0x1e8>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	f200 80a6 	bhi.w	8005bbc <HAL_TIM_ConfigClockSource+0x1c0>
 8005a70:	4a5d      	ldr	r2, [pc, #372]	@ (8005be8 <HAL_TIM_ConfigClockSource+0x1ec>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	f000 8099 	beq.w	8005baa <HAL_TIM_ConfigClockSource+0x1ae>
 8005a78:	4a5b      	ldr	r2, [pc, #364]	@ (8005be8 <HAL_TIM_ConfigClockSource+0x1ec>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	f200 809e 	bhi.w	8005bbc <HAL_TIM_ConfigClockSource+0x1c0>
 8005a80:	4a5a      	ldr	r2, [pc, #360]	@ (8005bec <HAL_TIM_ConfigClockSource+0x1f0>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	f000 8091 	beq.w	8005baa <HAL_TIM_ConfigClockSource+0x1ae>
 8005a88:	4a58      	ldr	r2, [pc, #352]	@ (8005bec <HAL_TIM_ConfigClockSource+0x1f0>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	f200 8096 	bhi.w	8005bbc <HAL_TIM_ConfigClockSource+0x1c0>
 8005a90:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005a94:	f000 8089 	beq.w	8005baa <HAL_TIM_ConfigClockSource+0x1ae>
 8005a98:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005a9c:	f200 808e 	bhi.w	8005bbc <HAL_TIM_ConfigClockSource+0x1c0>
 8005aa0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005aa4:	d03e      	beq.n	8005b24 <HAL_TIM_ConfigClockSource+0x128>
 8005aa6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005aaa:	f200 8087 	bhi.w	8005bbc <HAL_TIM_ConfigClockSource+0x1c0>
 8005aae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ab2:	f000 8086 	beq.w	8005bc2 <HAL_TIM_ConfigClockSource+0x1c6>
 8005ab6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005aba:	d87f      	bhi.n	8005bbc <HAL_TIM_ConfigClockSource+0x1c0>
 8005abc:	2b70      	cmp	r3, #112	@ 0x70
 8005abe:	d01a      	beq.n	8005af6 <HAL_TIM_ConfigClockSource+0xfa>
 8005ac0:	2b70      	cmp	r3, #112	@ 0x70
 8005ac2:	d87b      	bhi.n	8005bbc <HAL_TIM_ConfigClockSource+0x1c0>
 8005ac4:	2b60      	cmp	r3, #96	@ 0x60
 8005ac6:	d050      	beq.n	8005b6a <HAL_TIM_ConfigClockSource+0x16e>
 8005ac8:	2b60      	cmp	r3, #96	@ 0x60
 8005aca:	d877      	bhi.n	8005bbc <HAL_TIM_ConfigClockSource+0x1c0>
 8005acc:	2b50      	cmp	r3, #80	@ 0x50
 8005ace:	d03c      	beq.n	8005b4a <HAL_TIM_ConfigClockSource+0x14e>
 8005ad0:	2b50      	cmp	r3, #80	@ 0x50
 8005ad2:	d873      	bhi.n	8005bbc <HAL_TIM_ConfigClockSource+0x1c0>
 8005ad4:	2b40      	cmp	r3, #64	@ 0x40
 8005ad6:	d058      	beq.n	8005b8a <HAL_TIM_ConfigClockSource+0x18e>
 8005ad8:	2b40      	cmp	r3, #64	@ 0x40
 8005ada:	d86f      	bhi.n	8005bbc <HAL_TIM_ConfigClockSource+0x1c0>
 8005adc:	2b30      	cmp	r3, #48	@ 0x30
 8005ade:	d064      	beq.n	8005baa <HAL_TIM_ConfigClockSource+0x1ae>
 8005ae0:	2b30      	cmp	r3, #48	@ 0x30
 8005ae2:	d86b      	bhi.n	8005bbc <HAL_TIM_ConfigClockSource+0x1c0>
 8005ae4:	2b20      	cmp	r3, #32
 8005ae6:	d060      	beq.n	8005baa <HAL_TIM_ConfigClockSource+0x1ae>
 8005ae8:	2b20      	cmp	r3, #32
 8005aea:	d867      	bhi.n	8005bbc <HAL_TIM_ConfigClockSource+0x1c0>
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d05c      	beq.n	8005baa <HAL_TIM_ConfigClockSource+0x1ae>
 8005af0:	2b10      	cmp	r3, #16
 8005af2:	d05a      	beq.n	8005baa <HAL_TIM_ConfigClockSource+0x1ae>
 8005af4:	e062      	b.n	8005bbc <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005b06:	f000 f9b3 	bl	8005e70 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	689b      	ldr	r3, [r3, #8]
 8005b10:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005b12:	68bb      	ldr	r3, [r7, #8]
 8005b14:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005b18:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	68ba      	ldr	r2, [r7, #8]
 8005b20:	609a      	str	r2, [r3, #8]
      break;
 8005b22:	e04f      	b.n	8005bc4 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005b34:	f000 f99c 	bl	8005e70 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	689a      	ldr	r2, [r3, #8]
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005b46:	609a      	str	r2, [r3, #8]
      break;
 8005b48:	e03c      	b.n	8005bc4 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b56:	461a      	mov	r2, r3
 8005b58:	f000 f90e 	bl	8005d78 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	2150      	movs	r1, #80	@ 0x50
 8005b62:	4618      	mov	r0, r3
 8005b64:	f000 f967 	bl	8005e36 <TIM_ITRx_SetConfig>
      break;
 8005b68:	e02c      	b.n	8005bc4 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005b76:	461a      	mov	r2, r3
 8005b78:	f000 f92d 	bl	8005dd6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	2160      	movs	r1, #96	@ 0x60
 8005b82:	4618      	mov	r0, r3
 8005b84:	f000 f957 	bl	8005e36 <TIM_ITRx_SetConfig>
      break;
 8005b88:	e01c      	b.n	8005bc4 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b96:	461a      	mov	r2, r3
 8005b98:	f000 f8ee 	bl	8005d78 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	2140      	movs	r1, #64	@ 0x40
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	f000 f947 	bl	8005e36 <TIM_ITRx_SetConfig>
      break;
 8005ba8:	e00c      	b.n	8005bc4 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681a      	ldr	r2, [r3, #0]
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	4619      	mov	r1, r3
 8005bb4:	4610      	mov	r0, r2
 8005bb6:	f000 f93e 	bl	8005e36 <TIM_ITRx_SetConfig>
      break;
 8005bba:	e003      	b.n	8005bc4 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	73fb      	strb	r3, [r7, #15]
      break;
 8005bc0:	e000      	b.n	8005bc4 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8005bc2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2201      	movs	r2, #1
 8005bc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2200      	movs	r2, #0
 8005bd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005bd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	3710      	adds	r7, #16
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	bd80      	pop	{r7, pc}
 8005bde:	bf00      	nop
 8005be0:	00100070 	.word	0x00100070
 8005be4:	00100040 	.word	0x00100040
 8005be8:	00100030 	.word	0x00100030
 8005bec:	00100020 	.word	0x00100020

08005bf0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005bf0:	b480      	push	{r7}
 8005bf2:	b083      	sub	sp, #12
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005bf8:	bf00      	nop
 8005bfa:	370c      	adds	r7, #12
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c02:	4770      	bx	lr

08005c04 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005c04:	b480      	push	{r7}
 8005c06:	b083      	sub	sp, #12
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005c0c:	bf00      	nop
 8005c0e:	370c      	adds	r7, #12
 8005c10:	46bd      	mov	sp, r7
 8005c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c16:	4770      	bx	lr

08005c18 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005c18:	b480      	push	{r7}
 8005c1a:	b083      	sub	sp, #12
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005c20:	bf00      	nop
 8005c22:	370c      	adds	r7, #12
 8005c24:	46bd      	mov	sp, r7
 8005c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2a:	4770      	bx	lr

08005c2c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b083      	sub	sp, #12
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005c34:	bf00      	nop
 8005c36:	370c      	adds	r7, #12
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3e:	4770      	bx	lr

08005c40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005c40:	b480      	push	{r7}
 8005c42:	b085      	sub	sp, #20
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
 8005c48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	4a42      	ldr	r2, [pc, #264]	@ (8005d5c <TIM_Base_SetConfig+0x11c>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d00f      	beq.n	8005c78 <TIM_Base_SetConfig+0x38>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c5e:	d00b      	beq.n	8005c78 <TIM_Base_SetConfig+0x38>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	4a3f      	ldr	r2, [pc, #252]	@ (8005d60 <TIM_Base_SetConfig+0x120>)
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d007      	beq.n	8005c78 <TIM_Base_SetConfig+0x38>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	4a3e      	ldr	r2, [pc, #248]	@ (8005d64 <TIM_Base_SetConfig+0x124>)
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d003      	beq.n	8005c78 <TIM_Base_SetConfig+0x38>
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	4a3d      	ldr	r2, [pc, #244]	@ (8005d68 <TIM_Base_SetConfig+0x128>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d108      	bne.n	8005c8a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c7e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	685b      	ldr	r3, [r3, #4]
 8005c84:	68fa      	ldr	r2, [r7, #12]
 8005c86:	4313      	orrs	r3, r2
 8005c88:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	4a33      	ldr	r2, [pc, #204]	@ (8005d5c <TIM_Base_SetConfig+0x11c>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d01b      	beq.n	8005cca <TIM_Base_SetConfig+0x8a>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c98:	d017      	beq.n	8005cca <TIM_Base_SetConfig+0x8a>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	4a30      	ldr	r2, [pc, #192]	@ (8005d60 <TIM_Base_SetConfig+0x120>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d013      	beq.n	8005cca <TIM_Base_SetConfig+0x8a>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	4a2f      	ldr	r2, [pc, #188]	@ (8005d64 <TIM_Base_SetConfig+0x124>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d00f      	beq.n	8005cca <TIM_Base_SetConfig+0x8a>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	4a2e      	ldr	r2, [pc, #184]	@ (8005d68 <TIM_Base_SetConfig+0x128>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d00b      	beq.n	8005cca <TIM_Base_SetConfig+0x8a>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	4a2d      	ldr	r2, [pc, #180]	@ (8005d6c <TIM_Base_SetConfig+0x12c>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d007      	beq.n	8005cca <TIM_Base_SetConfig+0x8a>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	4a2c      	ldr	r2, [pc, #176]	@ (8005d70 <TIM_Base_SetConfig+0x130>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d003      	beq.n	8005cca <TIM_Base_SetConfig+0x8a>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	4a2b      	ldr	r2, [pc, #172]	@ (8005d74 <TIM_Base_SetConfig+0x134>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d108      	bne.n	8005cdc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005cd0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	68db      	ldr	r3, [r3, #12]
 8005cd6:	68fa      	ldr	r2, [r7, #12]
 8005cd8:	4313      	orrs	r3, r2
 8005cda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	695b      	ldr	r3, [r3, #20]
 8005ce6:	4313      	orrs	r3, r2
 8005ce8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	68fa      	ldr	r2, [r7, #12]
 8005cee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	689a      	ldr	r2, [r3, #8]
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	681a      	ldr	r2, [r3, #0]
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	4a16      	ldr	r2, [pc, #88]	@ (8005d5c <TIM_Base_SetConfig+0x11c>)
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d00f      	beq.n	8005d28 <TIM_Base_SetConfig+0xe8>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	4a17      	ldr	r2, [pc, #92]	@ (8005d68 <TIM_Base_SetConfig+0x128>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d00b      	beq.n	8005d28 <TIM_Base_SetConfig+0xe8>
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	4a16      	ldr	r2, [pc, #88]	@ (8005d6c <TIM_Base_SetConfig+0x12c>)
 8005d14:	4293      	cmp	r3, r2
 8005d16:	d007      	beq.n	8005d28 <TIM_Base_SetConfig+0xe8>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	4a15      	ldr	r2, [pc, #84]	@ (8005d70 <TIM_Base_SetConfig+0x130>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d003      	beq.n	8005d28 <TIM_Base_SetConfig+0xe8>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	4a14      	ldr	r2, [pc, #80]	@ (8005d74 <TIM_Base_SetConfig+0x134>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d103      	bne.n	8005d30 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	691a      	ldr	r2, [r3, #16]
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2201      	movs	r2, #1
 8005d34:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	691b      	ldr	r3, [r3, #16]
 8005d3a:	f003 0301 	and.w	r3, r3, #1
 8005d3e:	2b01      	cmp	r3, #1
 8005d40:	d105      	bne.n	8005d4e <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	691b      	ldr	r3, [r3, #16]
 8005d46:	f023 0201 	bic.w	r2, r3, #1
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	611a      	str	r2, [r3, #16]
  }
}
 8005d4e:	bf00      	nop
 8005d50:	3714      	adds	r7, #20
 8005d52:	46bd      	mov	sp, r7
 8005d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d58:	4770      	bx	lr
 8005d5a:	bf00      	nop
 8005d5c:	40012c00 	.word	0x40012c00
 8005d60:	40000400 	.word	0x40000400
 8005d64:	40000800 	.word	0x40000800
 8005d68:	40013400 	.word	0x40013400
 8005d6c:	40014000 	.word	0x40014000
 8005d70:	40014400 	.word	0x40014400
 8005d74:	40014800 	.word	0x40014800

08005d78 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d78:	b480      	push	{r7}
 8005d7a:	b087      	sub	sp, #28
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	60f8      	str	r0, [r7, #12]
 8005d80:	60b9      	str	r1, [r7, #8]
 8005d82:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	6a1b      	ldr	r3, [r3, #32]
 8005d88:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	6a1b      	ldr	r3, [r3, #32]
 8005d8e:	f023 0201 	bic.w	r2, r3, #1
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	699b      	ldr	r3, [r3, #24]
 8005d9a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005d9c:	693b      	ldr	r3, [r7, #16]
 8005d9e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005da2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	011b      	lsls	r3, r3, #4
 8005da8:	693a      	ldr	r2, [r7, #16]
 8005daa:	4313      	orrs	r3, r2
 8005dac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005dae:	697b      	ldr	r3, [r7, #20]
 8005db0:	f023 030a 	bic.w	r3, r3, #10
 8005db4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005db6:	697a      	ldr	r2, [r7, #20]
 8005db8:	68bb      	ldr	r3, [r7, #8]
 8005dba:	4313      	orrs	r3, r2
 8005dbc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	693a      	ldr	r2, [r7, #16]
 8005dc2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	697a      	ldr	r2, [r7, #20]
 8005dc8:	621a      	str	r2, [r3, #32]
}
 8005dca:	bf00      	nop
 8005dcc:	371c      	adds	r7, #28
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd4:	4770      	bx	lr

08005dd6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005dd6:	b480      	push	{r7}
 8005dd8:	b087      	sub	sp, #28
 8005dda:	af00      	add	r7, sp, #0
 8005ddc:	60f8      	str	r0, [r7, #12]
 8005dde:	60b9      	str	r1, [r7, #8]
 8005de0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	6a1b      	ldr	r3, [r3, #32]
 8005de6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	6a1b      	ldr	r3, [r3, #32]
 8005dec:	f023 0210 	bic.w	r2, r3, #16
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	699b      	ldr	r3, [r3, #24]
 8005df8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005dfa:	693b      	ldr	r3, [r7, #16]
 8005dfc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005e00:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	031b      	lsls	r3, r3, #12
 8005e06:	693a      	ldr	r2, [r7, #16]
 8005e08:	4313      	orrs	r3, r2
 8005e0a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005e0c:	697b      	ldr	r3, [r7, #20]
 8005e0e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005e12:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005e14:	68bb      	ldr	r3, [r7, #8]
 8005e16:	011b      	lsls	r3, r3, #4
 8005e18:	697a      	ldr	r2, [r7, #20]
 8005e1a:	4313      	orrs	r3, r2
 8005e1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	693a      	ldr	r2, [r7, #16]
 8005e22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	697a      	ldr	r2, [r7, #20]
 8005e28:	621a      	str	r2, [r3, #32]
}
 8005e2a:	bf00      	nop
 8005e2c:	371c      	adds	r7, #28
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e34:	4770      	bx	lr

08005e36 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005e36:	b480      	push	{r7}
 8005e38:	b085      	sub	sp, #20
 8005e3a:	af00      	add	r7, sp, #0
 8005e3c:	6078      	str	r0, [r7, #4]
 8005e3e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	689b      	ldr	r3, [r3, #8]
 8005e44:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8005e4c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e50:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005e52:	683a      	ldr	r2, [r7, #0]
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	4313      	orrs	r3, r2
 8005e58:	f043 0307 	orr.w	r3, r3, #7
 8005e5c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	68fa      	ldr	r2, [r7, #12]
 8005e62:	609a      	str	r2, [r3, #8]
}
 8005e64:	bf00      	nop
 8005e66:	3714      	adds	r7, #20
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6e:	4770      	bx	lr

08005e70 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005e70:	b480      	push	{r7}
 8005e72:	b087      	sub	sp, #28
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	60f8      	str	r0, [r7, #12]
 8005e78:	60b9      	str	r1, [r7, #8]
 8005e7a:	607a      	str	r2, [r7, #4]
 8005e7c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	689b      	ldr	r3, [r3, #8]
 8005e82:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e84:	697b      	ldr	r3, [r7, #20]
 8005e86:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005e8a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	021a      	lsls	r2, r3, #8
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	431a      	orrs	r2, r3
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	4313      	orrs	r3, r2
 8005e98:	697a      	ldr	r2, [r7, #20]
 8005e9a:	4313      	orrs	r3, r2
 8005e9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	697a      	ldr	r2, [r7, #20]
 8005ea2:	609a      	str	r2, [r3, #8]
}
 8005ea4:	bf00      	nop
 8005ea6:	371c      	adds	r7, #28
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eae:	4770      	bx	lr

08005eb0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	b085      	sub	sp, #20
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
 8005eb8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005ec0:	2b01      	cmp	r3, #1
 8005ec2:	d101      	bne.n	8005ec8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005ec4:	2302      	movs	r3, #2
 8005ec6:	e065      	b.n	8005f94 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2201      	movs	r2, #1
 8005ecc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2202      	movs	r2, #2
 8005ed4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	685b      	ldr	r3, [r3, #4]
 8005ede:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	689b      	ldr	r3, [r3, #8]
 8005ee6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	4a2c      	ldr	r2, [pc, #176]	@ (8005fa0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d004      	beq.n	8005efc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	4a2b      	ldr	r2, [pc, #172]	@ (8005fa4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d108      	bne.n	8005f0e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005f02:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	685b      	ldr	r3, [r3, #4]
 8005f08:	68fa      	ldr	r2, [r7, #12]
 8005f0a:	4313      	orrs	r3, r2
 8005f0c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8005f14:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f18:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	68fa      	ldr	r2, [r7, #12]
 8005f20:	4313      	orrs	r3, r2
 8005f22:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	68fa      	ldr	r2, [r7, #12]
 8005f2a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	4a1b      	ldr	r2, [pc, #108]	@ (8005fa0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d018      	beq.n	8005f68 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f3e:	d013      	beq.n	8005f68 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	4a18      	ldr	r2, [pc, #96]	@ (8005fa8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d00e      	beq.n	8005f68 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	4a17      	ldr	r2, [pc, #92]	@ (8005fac <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005f50:	4293      	cmp	r3, r2
 8005f52:	d009      	beq.n	8005f68 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	4a12      	ldr	r2, [pc, #72]	@ (8005fa4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d004      	beq.n	8005f68 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	4a13      	ldr	r2, [pc, #76]	@ (8005fb0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005f64:	4293      	cmp	r3, r2
 8005f66:	d10c      	bne.n	8005f82 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005f68:	68bb      	ldr	r3, [r7, #8]
 8005f6a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005f6e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	689b      	ldr	r3, [r3, #8]
 8005f74:	68ba      	ldr	r2, [r7, #8]
 8005f76:	4313      	orrs	r3, r2
 8005f78:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	68ba      	ldr	r2, [r7, #8]
 8005f80:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2201      	movs	r2, #1
 8005f86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005f92:	2300      	movs	r3, #0
}
 8005f94:	4618      	mov	r0, r3
 8005f96:	3714      	adds	r7, #20
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9e:	4770      	bx	lr
 8005fa0:	40012c00 	.word	0x40012c00
 8005fa4:	40013400 	.word	0x40013400
 8005fa8:	40000400 	.word	0x40000400
 8005fac:	40000800 	.word	0x40000800
 8005fb0:	40014000 	.word	0x40014000

08005fb4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005fb4:	b480      	push	{r7}
 8005fb6:	b083      	sub	sp, #12
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005fbc:	bf00      	nop
 8005fbe:	370c      	adds	r7, #12
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc6:	4770      	bx	lr

08005fc8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005fc8:	b480      	push	{r7}
 8005fca:	b083      	sub	sp, #12
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005fd0:	bf00      	nop
 8005fd2:	370c      	adds	r7, #12
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fda:	4770      	bx	lr

08005fdc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005fdc:	b480      	push	{r7}
 8005fde:	b083      	sub	sp, #12
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005fe4:	bf00      	nop
 8005fe6:	370c      	adds	r7, #12
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fee:	4770      	bx	lr

08005ff0 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8005ff0:	b480      	push	{r7}
 8005ff2:	b083      	sub	sp, #12
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8005ff8:	bf00      	nop
 8005ffa:	370c      	adds	r7, #12
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006002:	4770      	bx	lr

08006004 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8006004:	b480      	push	{r7}
 8006006:	b083      	sub	sp, #12
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800600c:	bf00      	nop
 800600e:	370c      	adds	r7, #12
 8006010:	46bd      	mov	sp, r7
 8006012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006016:	4770      	bx	lr

08006018 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8006018:	b480      	push	{r7}
 800601a:	b083      	sub	sp, #12
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8006020:	bf00      	nop
 8006022:	370c      	adds	r7, #12
 8006024:	46bd      	mov	sp, r7
 8006026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602a:	4770      	bx	lr

0800602c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800602c:	b480      	push	{r7}
 800602e:	b083      	sub	sp, #12
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8006034:	bf00      	nop
 8006036:	370c      	adds	r7, #12
 8006038:	46bd      	mov	sp, r7
 800603a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603e:	4770      	bx	lr

08006040 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006040:	b580      	push	{r7, lr}
 8006042:	b082      	sub	sp, #8
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d101      	bne.n	8006052 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800604e:	2301      	movs	r3, #1
 8006050:	e042      	b.n	80060d8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006058:	2b00      	cmp	r3, #0
 800605a:	d106      	bne.n	800606a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2200      	movs	r2, #0
 8006060:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006064:	6878      	ldr	r0, [r7, #4]
 8006066:	f7fb f8d7 	bl	8001218 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2224      	movs	r2, #36	@ 0x24
 800606e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	681a      	ldr	r2, [r3, #0]
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f022 0201 	bic.w	r2, r2, #1
 8006080:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006086:	2b00      	cmp	r3, #0
 8006088:	d002      	beq.n	8006090 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800608a:	6878      	ldr	r0, [r7, #4]
 800608c:	f000 fee8 	bl	8006e60 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006090:	6878      	ldr	r0, [r7, #4]
 8006092:	f000 fc19 	bl	80068c8 <UART_SetConfig>
 8006096:	4603      	mov	r3, r0
 8006098:	2b01      	cmp	r3, #1
 800609a:	d101      	bne.n	80060a0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800609c:	2301      	movs	r3, #1
 800609e:	e01b      	b.n	80060d8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	685a      	ldr	r2, [r3, #4]
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80060ae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	689a      	ldr	r2, [r3, #8]
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80060be:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	681a      	ldr	r2, [r3, #0]
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f042 0201 	orr.w	r2, r2, #1
 80060ce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80060d0:	6878      	ldr	r0, [r7, #4]
 80060d2:	f000 ff67 	bl	8006fa4 <UART_CheckIdleState>
 80060d6:	4603      	mov	r3, r0
}
 80060d8:	4618      	mov	r0, r3
 80060da:	3708      	adds	r7, #8
 80060dc:	46bd      	mov	sp, r7
 80060de:	bd80      	pop	{r7, pc}

080060e0 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80060e0:	b480      	push	{r7}
 80060e2:	b091      	sub	sp, #68	@ 0x44
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	60f8      	str	r0, [r7, #12]
 80060e8:	60b9      	str	r1, [r7, #8]
 80060ea:	4613      	mov	r3, r2
 80060ec:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060f4:	2b20      	cmp	r3, #32
 80060f6:	d178      	bne.n	80061ea <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80060f8:	68bb      	ldr	r3, [r7, #8]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d002      	beq.n	8006104 <HAL_UART_Transmit_IT+0x24>
 80060fe:	88fb      	ldrh	r3, [r7, #6]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d101      	bne.n	8006108 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8006104:	2301      	movs	r3, #1
 8006106:	e071      	b.n	80061ec <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	68ba      	ldr	r2, [r7, #8]
 800610c:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	88fa      	ldrh	r2, [r7, #6]
 8006112:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	88fa      	ldrh	r2, [r7, #6]
 800611a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    huart->TxISR       = NULL;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	2200      	movs	r2, #0
 8006122:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	2200      	movs	r2, #0
 8006128:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	2221      	movs	r2, #33	@ 0x21
 8006130:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006138:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800613c:	d12a      	bne.n	8006194 <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	689b      	ldr	r3, [r3, #8]
 8006142:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006146:	d107      	bne.n	8006158 <HAL_UART_Transmit_IT+0x78>
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	691b      	ldr	r3, [r3, #16]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d103      	bne.n	8006158 <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	4a29      	ldr	r2, [pc, #164]	@ (80061f8 <HAL_UART_Transmit_IT+0x118>)
 8006154:	679a      	str	r2, [r3, #120]	@ 0x78
 8006156:	e002      	b.n	800615e <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	4a28      	ldr	r2, [pc, #160]	@ (80061fc <HAL_UART_Transmit_IT+0x11c>)
 800615c:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	3308      	adds	r3, #8
 8006164:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006166:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006168:	e853 3f00 	ldrex	r3, [r3]
 800616c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800616e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006170:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006174:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	3308      	adds	r3, #8
 800617c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800617e:	637a      	str	r2, [r7, #52]	@ 0x34
 8006180:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006182:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006184:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006186:	e841 2300 	strex	r3, r2, [r1]
 800618a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800618c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800618e:	2b00      	cmp	r3, #0
 8006190:	d1e5      	bne.n	800615e <HAL_UART_Transmit_IT+0x7e>
 8006192:	e028      	b.n	80061e6 <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	689b      	ldr	r3, [r3, #8]
 8006198:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800619c:	d107      	bne.n	80061ae <HAL_UART_Transmit_IT+0xce>
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	691b      	ldr	r3, [r3, #16]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d103      	bne.n	80061ae <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	4a15      	ldr	r2, [pc, #84]	@ (8006200 <HAL_UART_Transmit_IT+0x120>)
 80061aa:	679a      	str	r2, [r3, #120]	@ 0x78
 80061ac:	e002      	b.n	80061b4 <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	4a14      	ldr	r2, [pc, #80]	@ (8006204 <HAL_UART_Transmit_IT+0x124>)
 80061b2:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061ba:	697b      	ldr	r3, [r7, #20]
 80061bc:	e853 3f00 	ldrex	r3, [r3]
 80061c0:	613b      	str	r3, [r7, #16]
   return(result);
 80061c2:	693b      	ldr	r3, [r7, #16]
 80061c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80061c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	461a      	mov	r2, r3
 80061d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80061d2:	623b      	str	r3, [r7, #32]
 80061d4:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061d6:	69f9      	ldr	r1, [r7, #28]
 80061d8:	6a3a      	ldr	r2, [r7, #32]
 80061da:	e841 2300 	strex	r3, r2, [r1]
 80061de:	61bb      	str	r3, [r7, #24]
   return(result);
 80061e0:	69bb      	ldr	r3, [r7, #24]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d1e6      	bne.n	80061b4 <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 80061e6:	2300      	movs	r3, #0
 80061e8:	e000      	b.n	80061ec <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80061ea:	2302      	movs	r3, #2
  }
}
 80061ec:	4618      	mov	r0, r3
 80061ee:	3744      	adds	r7, #68	@ 0x44
 80061f0:	46bd      	mov	sp, r7
 80061f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f6:	4770      	bx	lr
 80061f8:	080078d7 	.word	0x080078d7
 80061fc:	080077f7 	.word	0x080077f7
 8006200:	08007735 	.word	0x08007735
 8006204:	0800767d 	.word	0x0800767d

08006208 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b0ba      	sub	sp, #232	@ 0xe8
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	69db      	ldr	r3, [r3, #28]
 8006216:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	689b      	ldr	r3, [r3, #8]
 800622a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800622e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8006232:	f640 030f 	movw	r3, #2063	@ 0x80f
 8006236:	4013      	ands	r3, r2
 8006238:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800623c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006240:	2b00      	cmp	r3, #0
 8006242:	d11b      	bne.n	800627c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006244:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006248:	f003 0320 	and.w	r3, r3, #32
 800624c:	2b00      	cmp	r3, #0
 800624e:	d015      	beq.n	800627c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006250:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006254:	f003 0320 	and.w	r3, r3, #32
 8006258:	2b00      	cmp	r3, #0
 800625a:	d105      	bne.n	8006268 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800625c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006260:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006264:	2b00      	cmp	r3, #0
 8006266:	d009      	beq.n	800627c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800626c:	2b00      	cmp	r3, #0
 800626e:	f000 8300 	beq.w	8006872 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006276:	6878      	ldr	r0, [r7, #4]
 8006278:	4798      	blx	r3
      }
      return;
 800627a:	e2fa      	b.n	8006872 <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800627c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006280:	2b00      	cmp	r3, #0
 8006282:	f000 8123 	beq.w	80064cc <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006286:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800628a:	4b8d      	ldr	r3, [pc, #564]	@ (80064c0 <HAL_UART_IRQHandler+0x2b8>)
 800628c:	4013      	ands	r3, r2
 800628e:	2b00      	cmp	r3, #0
 8006290:	d106      	bne.n	80062a0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006292:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8006296:	4b8b      	ldr	r3, [pc, #556]	@ (80064c4 <HAL_UART_IRQHandler+0x2bc>)
 8006298:	4013      	ands	r3, r2
 800629a:	2b00      	cmp	r3, #0
 800629c:	f000 8116 	beq.w	80064cc <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80062a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062a4:	f003 0301 	and.w	r3, r3, #1
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d011      	beq.n	80062d0 <HAL_UART_IRQHandler+0xc8>
 80062ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80062b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d00b      	beq.n	80062d0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	2201      	movs	r2, #1
 80062be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062c6:	f043 0201 	orr.w	r2, r3, #1
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80062d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062d4:	f003 0302 	and.w	r3, r3, #2
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d011      	beq.n	8006300 <HAL_UART_IRQHandler+0xf8>
 80062dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80062e0:	f003 0301 	and.w	r3, r3, #1
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d00b      	beq.n	8006300 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	2202      	movs	r2, #2
 80062ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062f6:	f043 0204 	orr.w	r2, r3, #4
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006300:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006304:	f003 0304 	and.w	r3, r3, #4
 8006308:	2b00      	cmp	r3, #0
 800630a:	d011      	beq.n	8006330 <HAL_UART_IRQHandler+0x128>
 800630c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006310:	f003 0301 	and.w	r3, r3, #1
 8006314:	2b00      	cmp	r3, #0
 8006316:	d00b      	beq.n	8006330 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	2204      	movs	r2, #4
 800631e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006326:	f043 0202 	orr.w	r2, r3, #2
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006330:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006334:	f003 0308 	and.w	r3, r3, #8
 8006338:	2b00      	cmp	r3, #0
 800633a:	d017      	beq.n	800636c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800633c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006340:	f003 0320 	and.w	r3, r3, #32
 8006344:	2b00      	cmp	r3, #0
 8006346:	d105      	bne.n	8006354 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006348:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800634c:	4b5c      	ldr	r3, [pc, #368]	@ (80064c0 <HAL_UART_IRQHandler+0x2b8>)
 800634e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006350:	2b00      	cmp	r3, #0
 8006352:	d00b      	beq.n	800636c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	2208      	movs	r2, #8
 800635a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006362:	f043 0208 	orr.w	r2, r3, #8
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800636c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006370:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006374:	2b00      	cmp	r3, #0
 8006376:	d012      	beq.n	800639e <HAL_UART_IRQHandler+0x196>
 8006378:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800637c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006380:	2b00      	cmp	r3, #0
 8006382:	d00c      	beq.n	800639e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800638c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006394:	f043 0220 	orr.w	r2, r3, #32
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	f000 8266 	beq.w	8006876 <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80063aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80063ae:	f003 0320 	and.w	r3, r3, #32
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d013      	beq.n	80063de <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80063b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80063ba:	f003 0320 	and.w	r3, r3, #32
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d105      	bne.n	80063ce <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80063c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80063c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d007      	beq.n	80063de <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d003      	beq.n	80063de <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80063da:	6878      	ldr	r0, [r7, #4]
 80063dc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063e4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	689b      	ldr	r3, [r3, #8]
 80063ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063f2:	2b40      	cmp	r3, #64	@ 0x40
 80063f4:	d005      	beq.n	8006402 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80063f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80063fa:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d054      	beq.n	80064ac <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006402:	6878      	ldr	r0, [r7, #4]
 8006404:	f000 ffcd 	bl	80073a2 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	689b      	ldr	r3, [r3, #8]
 800640e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006412:	2b40      	cmp	r3, #64	@ 0x40
 8006414:	d146      	bne.n	80064a4 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	3308      	adds	r3, #8
 800641c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006420:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006424:	e853 3f00 	ldrex	r3, [r3]
 8006428:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800642c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006430:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006434:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	3308      	adds	r3, #8
 800643e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006442:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006446:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800644a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800644e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006452:	e841 2300 	strex	r3, r2, [r1]
 8006456:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800645a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800645e:	2b00      	cmp	r3, #0
 8006460:	d1d9      	bne.n	8006416 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006468:	2b00      	cmp	r3, #0
 800646a:	d017      	beq.n	800649c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006472:	4a15      	ldr	r2, [pc, #84]	@ (80064c8 <HAL_UART_IRQHandler+0x2c0>)
 8006474:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800647c:	4618      	mov	r0, r3
 800647e:	f7fc f84b 	bl	8002518 <HAL_DMA_Abort_IT>
 8006482:	4603      	mov	r3, r0
 8006484:	2b00      	cmp	r3, #0
 8006486:	d019      	beq.n	80064bc <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800648e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006490:	687a      	ldr	r2, [r7, #4]
 8006492:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8006496:	4610      	mov	r0, r2
 8006498:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800649a:	e00f      	b.n	80064bc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800649c:	6878      	ldr	r0, [r7, #4]
 800649e:	f000 fa09 	bl	80068b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064a2:	e00b      	b.n	80064bc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80064a4:	6878      	ldr	r0, [r7, #4]
 80064a6:	f000 fa05 	bl	80068b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064aa:	e007      	b.n	80064bc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80064ac:	6878      	ldr	r0, [r7, #4]
 80064ae:	f000 fa01 	bl	80068b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2200      	movs	r2, #0
 80064b6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80064ba:	e1dc      	b.n	8006876 <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064bc:	bf00      	nop
    return;
 80064be:	e1da      	b.n	8006876 <HAL_UART_IRQHandler+0x66e>
 80064c0:	10000001 	.word	0x10000001
 80064c4:	04000120 	.word	0x04000120
 80064c8:	08007659 	.word	0x08007659

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80064d0:	2b01      	cmp	r3, #1
 80064d2:	f040 8170 	bne.w	80067b6 <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80064d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80064da:	f003 0310 	and.w	r3, r3, #16
 80064de:	2b00      	cmp	r3, #0
 80064e0:	f000 8169 	beq.w	80067b6 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80064e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80064e8:	f003 0310 	and.w	r3, r3, #16
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	f000 8162 	beq.w	80067b6 <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	2210      	movs	r2, #16
 80064f8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	689b      	ldr	r3, [r3, #8]
 8006500:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006504:	2b40      	cmp	r3, #64	@ 0x40
 8006506:	f040 80d8 	bne.w	80066ba <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	685b      	ldr	r3, [r3, #4]
 8006514:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006518:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800651c:	2b00      	cmp	r3, #0
 800651e:	f000 80af 	beq.w	8006680 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006528:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800652c:	429a      	cmp	r2, r3
 800652e:	f080 80a7 	bcs.w	8006680 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006538:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f003 0320 	and.w	r3, r3, #32
 800654a:	2b00      	cmp	r3, #0
 800654c:	f040 8087 	bne.w	800665e <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006558:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800655c:	e853 3f00 	ldrex	r3, [r3]
 8006560:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006564:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006568:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800656c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	461a      	mov	r2, r3
 8006576:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800657a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800657e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006582:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006586:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800658a:	e841 2300 	strex	r3, r2, [r1]
 800658e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006592:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006596:	2b00      	cmp	r3, #0
 8006598:	d1da      	bne.n	8006550 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	3308      	adds	r3, #8
 80065a0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065a2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80065a4:	e853 3f00 	ldrex	r3, [r3]
 80065a8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80065aa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80065ac:	f023 0301 	bic.w	r3, r3, #1
 80065b0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	3308      	adds	r3, #8
 80065ba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80065be:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80065c2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065c4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80065c6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80065ca:	e841 2300 	strex	r3, r2, [r1]
 80065ce:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80065d0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d1e1      	bne.n	800659a <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	3308      	adds	r3, #8
 80065dc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065de:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80065e0:	e853 3f00 	ldrex	r3, [r3]
 80065e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80065e6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80065e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80065ec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	3308      	adds	r3, #8
 80065f6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80065fa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80065fc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065fe:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006600:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006602:	e841 2300 	strex	r3, r2, [r1]
 8006606:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006608:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800660a:	2b00      	cmp	r3, #0
 800660c:	d1e3      	bne.n	80065d6 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	2220      	movs	r2, #32
 8006612:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2200      	movs	r2, #0
 800661a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006622:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006624:	e853 3f00 	ldrex	r3, [r3]
 8006628:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800662a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800662c:	f023 0310 	bic.w	r3, r3, #16
 8006630:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	461a      	mov	r2, r3
 800663a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800663e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006640:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006642:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006644:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006646:	e841 2300 	strex	r3, r2, [r1]
 800664a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800664c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800664e:	2b00      	cmp	r3, #0
 8006650:	d1e4      	bne.n	800661c <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006658:	4618      	mov	r0, r3
 800665a:	f7fb ff04 	bl	8002466 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2202      	movs	r2, #2
 8006662:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006670:	b29b      	uxth	r3, r3
 8006672:	1ad3      	subs	r3, r2, r3
 8006674:	b29b      	uxth	r3, r3
 8006676:	4619      	mov	r1, r3
 8006678:	6878      	ldr	r0, [r7, #4]
 800667a:	f7fa fbdb 	bl	8000e34 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800667e:	e0fc      	b.n	800687a <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006686:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800668a:	429a      	cmp	r2, r3
 800668c:	f040 80f5 	bne.w	800687a <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f003 0320 	and.w	r3, r3, #32
 800669e:	2b20      	cmp	r3, #32
 80066a0:	f040 80eb 	bne.w	800687a <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2202      	movs	r2, #2
 80066a8:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80066b0:	4619      	mov	r1, r3
 80066b2:	6878      	ldr	r0, [r7, #4]
 80066b4:	f7fa fbbe 	bl	8000e34 <HAL_UARTEx_RxEventCallback>
      return;
 80066b8:	e0df      	b.n	800687a <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80066c6:	b29b      	uxth	r3, r3
 80066c8:	1ad3      	subs	r3, r2, r3
 80066ca:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80066d4:	b29b      	uxth	r3, r3
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	f000 80d1 	beq.w	800687e <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 80066dc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	f000 80cc 	beq.w	800687e <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066ee:	e853 3f00 	ldrex	r3, [r3]
 80066f2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80066f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066f6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80066fa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	461a      	mov	r2, r3
 8006704:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006708:	647b      	str	r3, [r7, #68]	@ 0x44
 800670a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800670c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800670e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006710:	e841 2300 	strex	r3, r2, [r1]
 8006714:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006716:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006718:	2b00      	cmp	r3, #0
 800671a:	d1e4      	bne.n	80066e6 <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	3308      	adds	r3, #8
 8006722:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006724:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006726:	e853 3f00 	ldrex	r3, [r3]
 800672a:	623b      	str	r3, [r7, #32]
   return(result);
 800672c:	6a3b      	ldr	r3, [r7, #32]
 800672e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006732:	f023 0301 	bic.w	r3, r3, #1
 8006736:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	3308      	adds	r3, #8
 8006740:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006744:	633a      	str	r2, [r7, #48]	@ 0x30
 8006746:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006748:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800674a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800674c:	e841 2300 	strex	r3, r2, [r1]
 8006750:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006752:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006754:	2b00      	cmp	r3, #0
 8006756:	d1e1      	bne.n	800671c <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2220      	movs	r2, #32
 800675c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2200      	movs	r2, #0
 8006764:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2200      	movs	r2, #0
 800676a:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006772:	693b      	ldr	r3, [r7, #16]
 8006774:	e853 3f00 	ldrex	r3, [r3]
 8006778:	60fb      	str	r3, [r7, #12]
   return(result);
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	f023 0310 	bic.w	r3, r3, #16
 8006780:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	461a      	mov	r2, r3
 800678a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800678e:	61fb      	str	r3, [r7, #28]
 8006790:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006792:	69b9      	ldr	r1, [r7, #24]
 8006794:	69fa      	ldr	r2, [r7, #28]
 8006796:	e841 2300 	strex	r3, r2, [r1]
 800679a:	617b      	str	r3, [r7, #20]
   return(result);
 800679c:	697b      	ldr	r3, [r7, #20]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d1e4      	bne.n	800676c <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2202      	movs	r2, #2
 80067a6:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80067a8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80067ac:	4619      	mov	r1, r3
 80067ae:	6878      	ldr	r0, [r7, #4]
 80067b0:	f7fa fb40 	bl	8000e34 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80067b4:	e063      	b.n	800687e <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80067b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80067ba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d00e      	beq.n	80067e0 <HAL_UART_IRQHandler+0x5d8>
 80067c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80067c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d008      	beq.n	80067e0 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80067d6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80067d8:	6878      	ldr	r0, [r7, #4]
 80067da:	f001 f91c 	bl	8007a16 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80067de:	e051      	b.n	8006884 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80067e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80067e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d014      	beq.n	8006816 <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80067ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80067f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d105      	bne.n	8006804 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80067f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80067fc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006800:	2b00      	cmp	r3, #0
 8006802:	d008      	beq.n	8006816 <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006808:	2b00      	cmp	r3, #0
 800680a:	d03a      	beq.n	8006882 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006810:	6878      	ldr	r0, [r7, #4]
 8006812:	4798      	blx	r3
    }
    return;
 8006814:	e035      	b.n	8006882 <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006816:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800681a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800681e:	2b00      	cmp	r3, #0
 8006820:	d009      	beq.n	8006836 <HAL_UART_IRQHandler+0x62e>
 8006822:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006826:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800682a:	2b00      	cmp	r3, #0
 800682c:	d003      	beq.n	8006836 <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 800682e:	6878      	ldr	r0, [r7, #4]
 8006830:	f001 f8c6 	bl	80079c0 <UART_EndTransmit_IT>
    return;
 8006834:	e026      	b.n	8006884 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006836:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800683a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800683e:	2b00      	cmp	r3, #0
 8006840:	d009      	beq.n	8006856 <HAL_UART_IRQHandler+0x64e>
 8006842:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006846:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800684a:	2b00      	cmp	r3, #0
 800684c:	d003      	beq.n	8006856 <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800684e:	6878      	ldr	r0, [r7, #4]
 8006850:	f001 f8f5 	bl	8007a3e <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006854:	e016      	b.n	8006884 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006856:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800685a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800685e:	2b00      	cmp	r3, #0
 8006860:	d010      	beq.n	8006884 <HAL_UART_IRQHandler+0x67c>
 8006862:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006866:	2b00      	cmp	r3, #0
 8006868:	da0c      	bge.n	8006884 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800686a:	6878      	ldr	r0, [r7, #4]
 800686c:	f001 f8dd 	bl	8007a2a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006870:	e008      	b.n	8006884 <HAL_UART_IRQHandler+0x67c>
      return;
 8006872:	bf00      	nop
 8006874:	e006      	b.n	8006884 <HAL_UART_IRQHandler+0x67c>
    return;
 8006876:	bf00      	nop
 8006878:	e004      	b.n	8006884 <HAL_UART_IRQHandler+0x67c>
      return;
 800687a:	bf00      	nop
 800687c:	e002      	b.n	8006884 <HAL_UART_IRQHandler+0x67c>
      return;
 800687e:	bf00      	nop
 8006880:	e000      	b.n	8006884 <HAL_UART_IRQHandler+0x67c>
    return;
 8006882:	bf00      	nop
  }
}
 8006884:	37e8      	adds	r7, #232	@ 0xe8
 8006886:	46bd      	mov	sp, r7
 8006888:	bd80      	pop	{r7, pc}
 800688a:	bf00      	nop

0800688c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800688c:	b480      	push	{r7}
 800688e:	b083      	sub	sp, #12
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8006894:	bf00      	nop
 8006896:	370c      	adds	r7, #12
 8006898:	46bd      	mov	sp, r7
 800689a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689e:	4770      	bx	lr

080068a0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80068a0:	b480      	push	{r7}
 80068a2:	b083      	sub	sp, #12
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80068a8:	bf00      	nop
 80068aa:	370c      	adds	r7, #12
 80068ac:	46bd      	mov	sp, r7
 80068ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b2:	4770      	bx	lr

080068b4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80068b4:	b480      	push	{r7}
 80068b6:	b083      	sub	sp, #12
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80068bc:	bf00      	nop
 80068be:	370c      	adds	r7, #12
 80068c0:	46bd      	mov	sp, r7
 80068c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c6:	4770      	bx	lr

080068c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80068c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80068cc:	b08c      	sub	sp, #48	@ 0x30
 80068ce:	af00      	add	r7, sp, #0
 80068d0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80068d2:	2300      	movs	r3, #0
 80068d4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80068d8:	697b      	ldr	r3, [r7, #20]
 80068da:	689a      	ldr	r2, [r3, #8]
 80068dc:	697b      	ldr	r3, [r7, #20]
 80068de:	691b      	ldr	r3, [r3, #16]
 80068e0:	431a      	orrs	r2, r3
 80068e2:	697b      	ldr	r3, [r7, #20]
 80068e4:	695b      	ldr	r3, [r3, #20]
 80068e6:	431a      	orrs	r2, r3
 80068e8:	697b      	ldr	r3, [r7, #20]
 80068ea:	69db      	ldr	r3, [r3, #28]
 80068ec:	4313      	orrs	r3, r2
 80068ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80068f0:	697b      	ldr	r3, [r7, #20]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	681a      	ldr	r2, [r3, #0]
 80068f6:	4bab      	ldr	r3, [pc, #684]	@ (8006ba4 <UART_SetConfig+0x2dc>)
 80068f8:	4013      	ands	r3, r2
 80068fa:	697a      	ldr	r2, [r7, #20]
 80068fc:	6812      	ldr	r2, [r2, #0]
 80068fe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006900:	430b      	orrs	r3, r1
 8006902:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006904:	697b      	ldr	r3, [r7, #20]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	685b      	ldr	r3, [r3, #4]
 800690a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800690e:	697b      	ldr	r3, [r7, #20]
 8006910:	68da      	ldr	r2, [r3, #12]
 8006912:	697b      	ldr	r3, [r7, #20]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	430a      	orrs	r2, r1
 8006918:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800691a:	697b      	ldr	r3, [r7, #20]
 800691c:	699b      	ldr	r3, [r3, #24]
 800691e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006920:	697b      	ldr	r3, [r7, #20]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	4aa0      	ldr	r2, [pc, #640]	@ (8006ba8 <UART_SetConfig+0x2e0>)
 8006926:	4293      	cmp	r3, r2
 8006928:	d004      	beq.n	8006934 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800692a:	697b      	ldr	r3, [r7, #20]
 800692c:	6a1b      	ldr	r3, [r3, #32]
 800692e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006930:	4313      	orrs	r3, r2
 8006932:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006934:	697b      	ldr	r3, [r7, #20]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	689b      	ldr	r3, [r3, #8]
 800693a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800693e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8006942:	697a      	ldr	r2, [r7, #20]
 8006944:	6812      	ldr	r2, [r2, #0]
 8006946:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006948:	430b      	orrs	r3, r1
 800694a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800694c:	697b      	ldr	r3, [r7, #20]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006952:	f023 010f 	bic.w	r1, r3, #15
 8006956:	697b      	ldr	r3, [r7, #20]
 8006958:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800695a:	697b      	ldr	r3, [r7, #20]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	430a      	orrs	r2, r1
 8006960:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006962:	697b      	ldr	r3, [r7, #20]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	4a91      	ldr	r2, [pc, #580]	@ (8006bac <UART_SetConfig+0x2e4>)
 8006968:	4293      	cmp	r3, r2
 800696a:	d125      	bne.n	80069b8 <UART_SetConfig+0xf0>
 800696c:	4b90      	ldr	r3, [pc, #576]	@ (8006bb0 <UART_SetConfig+0x2e8>)
 800696e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006972:	f003 0303 	and.w	r3, r3, #3
 8006976:	2b03      	cmp	r3, #3
 8006978:	d81a      	bhi.n	80069b0 <UART_SetConfig+0xe8>
 800697a:	a201      	add	r2, pc, #4	@ (adr r2, 8006980 <UART_SetConfig+0xb8>)
 800697c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006980:	08006991 	.word	0x08006991
 8006984:	080069a1 	.word	0x080069a1
 8006988:	08006999 	.word	0x08006999
 800698c:	080069a9 	.word	0x080069a9
 8006990:	2301      	movs	r3, #1
 8006992:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006996:	e0d6      	b.n	8006b46 <UART_SetConfig+0x27e>
 8006998:	2302      	movs	r3, #2
 800699a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800699e:	e0d2      	b.n	8006b46 <UART_SetConfig+0x27e>
 80069a0:	2304      	movs	r3, #4
 80069a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80069a6:	e0ce      	b.n	8006b46 <UART_SetConfig+0x27e>
 80069a8:	2308      	movs	r3, #8
 80069aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80069ae:	e0ca      	b.n	8006b46 <UART_SetConfig+0x27e>
 80069b0:	2310      	movs	r3, #16
 80069b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80069b6:	e0c6      	b.n	8006b46 <UART_SetConfig+0x27e>
 80069b8:	697b      	ldr	r3, [r7, #20]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	4a7d      	ldr	r2, [pc, #500]	@ (8006bb4 <UART_SetConfig+0x2ec>)
 80069be:	4293      	cmp	r3, r2
 80069c0:	d138      	bne.n	8006a34 <UART_SetConfig+0x16c>
 80069c2:	4b7b      	ldr	r3, [pc, #492]	@ (8006bb0 <UART_SetConfig+0x2e8>)
 80069c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069c8:	f003 030c 	and.w	r3, r3, #12
 80069cc:	2b0c      	cmp	r3, #12
 80069ce:	d82d      	bhi.n	8006a2c <UART_SetConfig+0x164>
 80069d0:	a201      	add	r2, pc, #4	@ (adr r2, 80069d8 <UART_SetConfig+0x110>)
 80069d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069d6:	bf00      	nop
 80069d8:	08006a0d 	.word	0x08006a0d
 80069dc:	08006a2d 	.word	0x08006a2d
 80069e0:	08006a2d 	.word	0x08006a2d
 80069e4:	08006a2d 	.word	0x08006a2d
 80069e8:	08006a1d 	.word	0x08006a1d
 80069ec:	08006a2d 	.word	0x08006a2d
 80069f0:	08006a2d 	.word	0x08006a2d
 80069f4:	08006a2d 	.word	0x08006a2d
 80069f8:	08006a15 	.word	0x08006a15
 80069fc:	08006a2d 	.word	0x08006a2d
 8006a00:	08006a2d 	.word	0x08006a2d
 8006a04:	08006a2d 	.word	0x08006a2d
 8006a08:	08006a25 	.word	0x08006a25
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a12:	e098      	b.n	8006b46 <UART_SetConfig+0x27e>
 8006a14:	2302      	movs	r3, #2
 8006a16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a1a:	e094      	b.n	8006b46 <UART_SetConfig+0x27e>
 8006a1c:	2304      	movs	r3, #4
 8006a1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a22:	e090      	b.n	8006b46 <UART_SetConfig+0x27e>
 8006a24:	2308      	movs	r3, #8
 8006a26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a2a:	e08c      	b.n	8006b46 <UART_SetConfig+0x27e>
 8006a2c:	2310      	movs	r3, #16
 8006a2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a32:	e088      	b.n	8006b46 <UART_SetConfig+0x27e>
 8006a34:	697b      	ldr	r3, [r7, #20]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	4a5f      	ldr	r2, [pc, #380]	@ (8006bb8 <UART_SetConfig+0x2f0>)
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d125      	bne.n	8006a8a <UART_SetConfig+0x1c2>
 8006a3e:	4b5c      	ldr	r3, [pc, #368]	@ (8006bb0 <UART_SetConfig+0x2e8>)
 8006a40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a44:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006a48:	2b30      	cmp	r3, #48	@ 0x30
 8006a4a:	d016      	beq.n	8006a7a <UART_SetConfig+0x1b2>
 8006a4c:	2b30      	cmp	r3, #48	@ 0x30
 8006a4e:	d818      	bhi.n	8006a82 <UART_SetConfig+0x1ba>
 8006a50:	2b20      	cmp	r3, #32
 8006a52:	d00a      	beq.n	8006a6a <UART_SetConfig+0x1a2>
 8006a54:	2b20      	cmp	r3, #32
 8006a56:	d814      	bhi.n	8006a82 <UART_SetConfig+0x1ba>
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d002      	beq.n	8006a62 <UART_SetConfig+0x19a>
 8006a5c:	2b10      	cmp	r3, #16
 8006a5e:	d008      	beq.n	8006a72 <UART_SetConfig+0x1aa>
 8006a60:	e00f      	b.n	8006a82 <UART_SetConfig+0x1ba>
 8006a62:	2300      	movs	r3, #0
 8006a64:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a68:	e06d      	b.n	8006b46 <UART_SetConfig+0x27e>
 8006a6a:	2302      	movs	r3, #2
 8006a6c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a70:	e069      	b.n	8006b46 <UART_SetConfig+0x27e>
 8006a72:	2304      	movs	r3, #4
 8006a74:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a78:	e065      	b.n	8006b46 <UART_SetConfig+0x27e>
 8006a7a:	2308      	movs	r3, #8
 8006a7c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a80:	e061      	b.n	8006b46 <UART_SetConfig+0x27e>
 8006a82:	2310      	movs	r3, #16
 8006a84:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a88:	e05d      	b.n	8006b46 <UART_SetConfig+0x27e>
 8006a8a:	697b      	ldr	r3, [r7, #20]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	4a4b      	ldr	r2, [pc, #300]	@ (8006bbc <UART_SetConfig+0x2f4>)
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d125      	bne.n	8006ae0 <UART_SetConfig+0x218>
 8006a94:	4b46      	ldr	r3, [pc, #280]	@ (8006bb0 <UART_SetConfig+0x2e8>)
 8006a96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a9a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006a9e:	2bc0      	cmp	r3, #192	@ 0xc0
 8006aa0:	d016      	beq.n	8006ad0 <UART_SetConfig+0x208>
 8006aa2:	2bc0      	cmp	r3, #192	@ 0xc0
 8006aa4:	d818      	bhi.n	8006ad8 <UART_SetConfig+0x210>
 8006aa6:	2b80      	cmp	r3, #128	@ 0x80
 8006aa8:	d00a      	beq.n	8006ac0 <UART_SetConfig+0x1f8>
 8006aaa:	2b80      	cmp	r3, #128	@ 0x80
 8006aac:	d814      	bhi.n	8006ad8 <UART_SetConfig+0x210>
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d002      	beq.n	8006ab8 <UART_SetConfig+0x1f0>
 8006ab2:	2b40      	cmp	r3, #64	@ 0x40
 8006ab4:	d008      	beq.n	8006ac8 <UART_SetConfig+0x200>
 8006ab6:	e00f      	b.n	8006ad8 <UART_SetConfig+0x210>
 8006ab8:	2300      	movs	r3, #0
 8006aba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006abe:	e042      	b.n	8006b46 <UART_SetConfig+0x27e>
 8006ac0:	2302      	movs	r3, #2
 8006ac2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ac6:	e03e      	b.n	8006b46 <UART_SetConfig+0x27e>
 8006ac8:	2304      	movs	r3, #4
 8006aca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ace:	e03a      	b.n	8006b46 <UART_SetConfig+0x27e>
 8006ad0:	2308      	movs	r3, #8
 8006ad2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ad6:	e036      	b.n	8006b46 <UART_SetConfig+0x27e>
 8006ad8:	2310      	movs	r3, #16
 8006ada:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ade:	e032      	b.n	8006b46 <UART_SetConfig+0x27e>
 8006ae0:	697b      	ldr	r3, [r7, #20]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	4a30      	ldr	r2, [pc, #192]	@ (8006ba8 <UART_SetConfig+0x2e0>)
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	d12a      	bne.n	8006b40 <UART_SetConfig+0x278>
 8006aea:	4b31      	ldr	r3, [pc, #196]	@ (8006bb0 <UART_SetConfig+0x2e8>)
 8006aec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006af0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006af4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006af8:	d01a      	beq.n	8006b30 <UART_SetConfig+0x268>
 8006afa:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006afe:	d81b      	bhi.n	8006b38 <UART_SetConfig+0x270>
 8006b00:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006b04:	d00c      	beq.n	8006b20 <UART_SetConfig+0x258>
 8006b06:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006b0a:	d815      	bhi.n	8006b38 <UART_SetConfig+0x270>
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d003      	beq.n	8006b18 <UART_SetConfig+0x250>
 8006b10:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006b14:	d008      	beq.n	8006b28 <UART_SetConfig+0x260>
 8006b16:	e00f      	b.n	8006b38 <UART_SetConfig+0x270>
 8006b18:	2300      	movs	r3, #0
 8006b1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b1e:	e012      	b.n	8006b46 <UART_SetConfig+0x27e>
 8006b20:	2302      	movs	r3, #2
 8006b22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b26:	e00e      	b.n	8006b46 <UART_SetConfig+0x27e>
 8006b28:	2304      	movs	r3, #4
 8006b2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b2e:	e00a      	b.n	8006b46 <UART_SetConfig+0x27e>
 8006b30:	2308      	movs	r3, #8
 8006b32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b36:	e006      	b.n	8006b46 <UART_SetConfig+0x27e>
 8006b38:	2310      	movs	r3, #16
 8006b3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b3e:	e002      	b.n	8006b46 <UART_SetConfig+0x27e>
 8006b40:	2310      	movs	r3, #16
 8006b42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006b46:	697b      	ldr	r3, [r7, #20]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	4a17      	ldr	r2, [pc, #92]	@ (8006ba8 <UART_SetConfig+0x2e0>)
 8006b4c:	4293      	cmp	r3, r2
 8006b4e:	f040 80a8 	bne.w	8006ca2 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006b52:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006b56:	2b08      	cmp	r3, #8
 8006b58:	d834      	bhi.n	8006bc4 <UART_SetConfig+0x2fc>
 8006b5a:	a201      	add	r2, pc, #4	@ (adr r2, 8006b60 <UART_SetConfig+0x298>)
 8006b5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b60:	08006b85 	.word	0x08006b85
 8006b64:	08006bc5 	.word	0x08006bc5
 8006b68:	08006b8d 	.word	0x08006b8d
 8006b6c:	08006bc5 	.word	0x08006bc5
 8006b70:	08006b93 	.word	0x08006b93
 8006b74:	08006bc5 	.word	0x08006bc5
 8006b78:	08006bc5 	.word	0x08006bc5
 8006b7c:	08006bc5 	.word	0x08006bc5
 8006b80:	08006b9b 	.word	0x08006b9b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b84:	f7fe fac6 	bl	8005114 <HAL_RCC_GetPCLK1Freq>
 8006b88:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006b8a:	e021      	b.n	8006bd0 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006b8c:	4b0c      	ldr	r3, [pc, #48]	@ (8006bc0 <UART_SetConfig+0x2f8>)
 8006b8e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006b90:	e01e      	b.n	8006bd0 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006b92:	f7fe fa51 	bl	8005038 <HAL_RCC_GetSysClockFreq>
 8006b96:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006b98:	e01a      	b.n	8006bd0 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b9a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006b9e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006ba0:	e016      	b.n	8006bd0 <UART_SetConfig+0x308>
 8006ba2:	bf00      	nop
 8006ba4:	cfff69f3 	.word	0xcfff69f3
 8006ba8:	40008000 	.word	0x40008000
 8006bac:	40013800 	.word	0x40013800
 8006bb0:	40021000 	.word	0x40021000
 8006bb4:	40004400 	.word	0x40004400
 8006bb8:	40004800 	.word	0x40004800
 8006bbc:	40004c00 	.word	0x40004c00
 8006bc0:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006bc8:	2301      	movs	r3, #1
 8006bca:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006bce:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006bd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	f000 812a 	beq.w	8006e2c <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006bd8:	697b      	ldr	r3, [r7, #20]
 8006bda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bdc:	4a9e      	ldr	r2, [pc, #632]	@ (8006e58 <UART_SetConfig+0x590>)
 8006bde:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006be2:	461a      	mov	r2, r3
 8006be4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006be6:	fbb3 f3f2 	udiv	r3, r3, r2
 8006bea:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006bec:	697b      	ldr	r3, [r7, #20]
 8006bee:	685a      	ldr	r2, [r3, #4]
 8006bf0:	4613      	mov	r3, r2
 8006bf2:	005b      	lsls	r3, r3, #1
 8006bf4:	4413      	add	r3, r2
 8006bf6:	69ba      	ldr	r2, [r7, #24]
 8006bf8:	429a      	cmp	r2, r3
 8006bfa:	d305      	bcc.n	8006c08 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006bfc:	697b      	ldr	r3, [r7, #20]
 8006bfe:	685b      	ldr	r3, [r3, #4]
 8006c00:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006c02:	69ba      	ldr	r2, [r7, #24]
 8006c04:	429a      	cmp	r2, r3
 8006c06:	d903      	bls.n	8006c10 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8006c08:	2301      	movs	r3, #1
 8006c0a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006c0e:	e10d      	b.n	8006e2c <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006c10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c12:	2200      	movs	r2, #0
 8006c14:	60bb      	str	r3, [r7, #8]
 8006c16:	60fa      	str	r2, [r7, #12]
 8006c18:	697b      	ldr	r3, [r7, #20]
 8006c1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c1c:	4a8e      	ldr	r2, [pc, #568]	@ (8006e58 <UART_SetConfig+0x590>)
 8006c1e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006c22:	b29b      	uxth	r3, r3
 8006c24:	2200      	movs	r2, #0
 8006c26:	603b      	str	r3, [r7, #0]
 8006c28:	607a      	str	r2, [r7, #4]
 8006c2a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c2e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006c32:	f7f9 fb45 	bl	80002c0 <__aeabi_uldivmod>
 8006c36:	4602      	mov	r2, r0
 8006c38:	460b      	mov	r3, r1
 8006c3a:	4610      	mov	r0, r2
 8006c3c:	4619      	mov	r1, r3
 8006c3e:	f04f 0200 	mov.w	r2, #0
 8006c42:	f04f 0300 	mov.w	r3, #0
 8006c46:	020b      	lsls	r3, r1, #8
 8006c48:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006c4c:	0202      	lsls	r2, r0, #8
 8006c4e:	6979      	ldr	r1, [r7, #20]
 8006c50:	6849      	ldr	r1, [r1, #4]
 8006c52:	0849      	lsrs	r1, r1, #1
 8006c54:	2000      	movs	r0, #0
 8006c56:	460c      	mov	r4, r1
 8006c58:	4605      	mov	r5, r0
 8006c5a:	eb12 0804 	adds.w	r8, r2, r4
 8006c5e:	eb43 0905 	adc.w	r9, r3, r5
 8006c62:	697b      	ldr	r3, [r7, #20]
 8006c64:	685b      	ldr	r3, [r3, #4]
 8006c66:	2200      	movs	r2, #0
 8006c68:	469a      	mov	sl, r3
 8006c6a:	4693      	mov	fp, r2
 8006c6c:	4652      	mov	r2, sl
 8006c6e:	465b      	mov	r3, fp
 8006c70:	4640      	mov	r0, r8
 8006c72:	4649      	mov	r1, r9
 8006c74:	f7f9 fb24 	bl	80002c0 <__aeabi_uldivmod>
 8006c78:	4602      	mov	r2, r0
 8006c7a:	460b      	mov	r3, r1
 8006c7c:	4613      	mov	r3, r2
 8006c7e:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006c80:	6a3b      	ldr	r3, [r7, #32]
 8006c82:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006c86:	d308      	bcc.n	8006c9a <UART_SetConfig+0x3d2>
 8006c88:	6a3b      	ldr	r3, [r7, #32]
 8006c8a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006c8e:	d204      	bcs.n	8006c9a <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8006c90:	697b      	ldr	r3, [r7, #20]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	6a3a      	ldr	r2, [r7, #32]
 8006c96:	60da      	str	r2, [r3, #12]
 8006c98:	e0c8      	b.n	8006e2c <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8006c9a:	2301      	movs	r3, #1
 8006c9c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006ca0:	e0c4      	b.n	8006e2c <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006ca2:	697b      	ldr	r3, [r7, #20]
 8006ca4:	69db      	ldr	r3, [r3, #28]
 8006ca6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006caa:	d167      	bne.n	8006d7c <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8006cac:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006cb0:	2b08      	cmp	r3, #8
 8006cb2:	d828      	bhi.n	8006d06 <UART_SetConfig+0x43e>
 8006cb4:	a201      	add	r2, pc, #4	@ (adr r2, 8006cbc <UART_SetConfig+0x3f4>)
 8006cb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cba:	bf00      	nop
 8006cbc:	08006ce1 	.word	0x08006ce1
 8006cc0:	08006ce9 	.word	0x08006ce9
 8006cc4:	08006cf1 	.word	0x08006cf1
 8006cc8:	08006d07 	.word	0x08006d07
 8006ccc:	08006cf7 	.word	0x08006cf7
 8006cd0:	08006d07 	.word	0x08006d07
 8006cd4:	08006d07 	.word	0x08006d07
 8006cd8:	08006d07 	.word	0x08006d07
 8006cdc:	08006cff 	.word	0x08006cff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ce0:	f7fe fa18 	bl	8005114 <HAL_RCC_GetPCLK1Freq>
 8006ce4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006ce6:	e014      	b.n	8006d12 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006ce8:	f7fe fa2a 	bl	8005140 <HAL_RCC_GetPCLK2Freq>
 8006cec:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006cee:	e010      	b.n	8006d12 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006cf0:	4b5a      	ldr	r3, [pc, #360]	@ (8006e5c <UART_SetConfig+0x594>)
 8006cf2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006cf4:	e00d      	b.n	8006d12 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006cf6:	f7fe f99f 	bl	8005038 <HAL_RCC_GetSysClockFreq>
 8006cfa:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006cfc:	e009      	b.n	8006d12 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006cfe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006d02:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006d04:	e005      	b.n	8006d12 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8006d06:	2300      	movs	r3, #0
 8006d08:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006d0a:	2301      	movs	r3, #1
 8006d0c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006d10:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006d12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	f000 8089 	beq.w	8006e2c <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006d1a:	697b      	ldr	r3, [r7, #20]
 8006d1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d1e:	4a4e      	ldr	r2, [pc, #312]	@ (8006e58 <UART_SetConfig+0x590>)
 8006d20:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006d24:	461a      	mov	r2, r3
 8006d26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d28:	fbb3 f3f2 	udiv	r3, r3, r2
 8006d2c:	005a      	lsls	r2, r3, #1
 8006d2e:	697b      	ldr	r3, [r7, #20]
 8006d30:	685b      	ldr	r3, [r3, #4]
 8006d32:	085b      	lsrs	r3, r3, #1
 8006d34:	441a      	add	r2, r3
 8006d36:	697b      	ldr	r3, [r7, #20]
 8006d38:	685b      	ldr	r3, [r3, #4]
 8006d3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d3e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006d40:	6a3b      	ldr	r3, [r7, #32]
 8006d42:	2b0f      	cmp	r3, #15
 8006d44:	d916      	bls.n	8006d74 <UART_SetConfig+0x4ac>
 8006d46:	6a3b      	ldr	r3, [r7, #32]
 8006d48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006d4c:	d212      	bcs.n	8006d74 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006d4e:	6a3b      	ldr	r3, [r7, #32]
 8006d50:	b29b      	uxth	r3, r3
 8006d52:	f023 030f 	bic.w	r3, r3, #15
 8006d56:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006d58:	6a3b      	ldr	r3, [r7, #32]
 8006d5a:	085b      	lsrs	r3, r3, #1
 8006d5c:	b29b      	uxth	r3, r3
 8006d5e:	f003 0307 	and.w	r3, r3, #7
 8006d62:	b29a      	uxth	r2, r3
 8006d64:	8bfb      	ldrh	r3, [r7, #30]
 8006d66:	4313      	orrs	r3, r2
 8006d68:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006d6a:	697b      	ldr	r3, [r7, #20]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	8bfa      	ldrh	r2, [r7, #30]
 8006d70:	60da      	str	r2, [r3, #12]
 8006d72:	e05b      	b.n	8006e2c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8006d74:	2301      	movs	r3, #1
 8006d76:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006d7a:	e057      	b.n	8006e2c <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006d7c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006d80:	2b08      	cmp	r3, #8
 8006d82:	d828      	bhi.n	8006dd6 <UART_SetConfig+0x50e>
 8006d84:	a201      	add	r2, pc, #4	@ (adr r2, 8006d8c <UART_SetConfig+0x4c4>)
 8006d86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d8a:	bf00      	nop
 8006d8c:	08006db1 	.word	0x08006db1
 8006d90:	08006db9 	.word	0x08006db9
 8006d94:	08006dc1 	.word	0x08006dc1
 8006d98:	08006dd7 	.word	0x08006dd7
 8006d9c:	08006dc7 	.word	0x08006dc7
 8006da0:	08006dd7 	.word	0x08006dd7
 8006da4:	08006dd7 	.word	0x08006dd7
 8006da8:	08006dd7 	.word	0x08006dd7
 8006dac:	08006dcf 	.word	0x08006dcf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006db0:	f7fe f9b0 	bl	8005114 <HAL_RCC_GetPCLK1Freq>
 8006db4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006db6:	e014      	b.n	8006de2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006db8:	f7fe f9c2 	bl	8005140 <HAL_RCC_GetPCLK2Freq>
 8006dbc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006dbe:	e010      	b.n	8006de2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006dc0:	4b26      	ldr	r3, [pc, #152]	@ (8006e5c <UART_SetConfig+0x594>)
 8006dc2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006dc4:	e00d      	b.n	8006de2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006dc6:	f7fe f937 	bl	8005038 <HAL_RCC_GetSysClockFreq>
 8006dca:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006dcc:	e009      	b.n	8006de2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006dce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006dd2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006dd4:	e005      	b.n	8006de2 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006dda:	2301      	movs	r3, #1
 8006ddc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006de0:	bf00      	nop
    }

    if (pclk != 0U)
 8006de2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d021      	beq.n	8006e2c <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006de8:	697b      	ldr	r3, [r7, #20]
 8006dea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dec:	4a1a      	ldr	r2, [pc, #104]	@ (8006e58 <UART_SetConfig+0x590>)
 8006dee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006df2:	461a      	mov	r2, r3
 8006df4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006df6:	fbb3 f2f2 	udiv	r2, r3, r2
 8006dfa:	697b      	ldr	r3, [r7, #20]
 8006dfc:	685b      	ldr	r3, [r3, #4]
 8006dfe:	085b      	lsrs	r3, r3, #1
 8006e00:	441a      	add	r2, r3
 8006e02:	697b      	ldr	r3, [r7, #20]
 8006e04:	685b      	ldr	r3, [r3, #4]
 8006e06:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e0a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006e0c:	6a3b      	ldr	r3, [r7, #32]
 8006e0e:	2b0f      	cmp	r3, #15
 8006e10:	d909      	bls.n	8006e26 <UART_SetConfig+0x55e>
 8006e12:	6a3b      	ldr	r3, [r7, #32]
 8006e14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006e18:	d205      	bcs.n	8006e26 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006e1a:	6a3b      	ldr	r3, [r7, #32]
 8006e1c:	b29a      	uxth	r2, r3
 8006e1e:	697b      	ldr	r3, [r7, #20]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	60da      	str	r2, [r3, #12]
 8006e24:	e002      	b.n	8006e2c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8006e26:	2301      	movs	r3, #1
 8006e28:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006e2c:	697b      	ldr	r3, [r7, #20]
 8006e2e:	2201      	movs	r2, #1
 8006e30:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006e34:	697b      	ldr	r3, [r7, #20]
 8006e36:	2201      	movs	r2, #1
 8006e38:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006e3c:	697b      	ldr	r3, [r7, #20]
 8006e3e:	2200      	movs	r2, #0
 8006e40:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006e42:	697b      	ldr	r3, [r7, #20]
 8006e44:	2200      	movs	r2, #0
 8006e46:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006e48:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	3730      	adds	r7, #48	@ 0x30
 8006e50:	46bd      	mov	sp, r7
 8006e52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006e56:	bf00      	nop
 8006e58:	0800cedc 	.word	0x0800cedc
 8006e5c:	00f42400 	.word	0x00f42400

08006e60 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006e60:	b480      	push	{r7}
 8006e62:	b083      	sub	sp, #12
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e6c:	f003 0308 	and.w	r3, r3, #8
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d00a      	beq.n	8006e8a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	685b      	ldr	r3, [r3, #4]
 8006e7a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	430a      	orrs	r2, r1
 8006e88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e8e:	f003 0301 	and.w	r3, r3, #1
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d00a      	beq.n	8006eac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	685b      	ldr	r3, [r3, #4]
 8006e9c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	430a      	orrs	r2, r1
 8006eaa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006eb0:	f003 0302 	and.w	r3, r3, #2
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d00a      	beq.n	8006ece <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	685b      	ldr	r3, [r3, #4]
 8006ebe:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	430a      	orrs	r2, r1
 8006ecc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ed2:	f003 0304 	and.w	r3, r3, #4
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d00a      	beq.n	8006ef0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	685b      	ldr	r3, [r3, #4]
 8006ee0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	430a      	orrs	r2, r1
 8006eee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ef4:	f003 0310 	and.w	r3, r3, #16
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d00a      	beq.n	8006f12 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	689b      	ldr	r3, [r3, #8]
 8006f02:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	430a      	orrs	r2, r1
 8006f10:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f16:	f003 0320 	and.w	r3, r3, #32
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d00a      	beq.n	8006f34 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	689b      	ldr	r3, [r3, #8]
 8006f24:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	430a      	orrs	r2, r1
 8006f32:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d01a      	beq.n	8006f76 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	685b      	ldr	r3, [r3, #4]
 8006f46:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	430a      	orrs	r2, r1
 8006f54:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f5a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006f5e:	d10a      	bne.n	8006f76 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	685b      	ldr	r3, [r3, #4]
 8006f66:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	430a      	orrs	r2, r1
 8006f74:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d00a      	beq.n	8006f98 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	685b      	ldr	r3, [r3, #4]
 8006f88:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	430a      	orrs	r2, r1
 8006f96:	605a      	str	r2, [r3, #4]
  }
}
 8006f98:	bf00      	nop
 8006f9a:	370c      	adds	r7, #12
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa2:	4770      	bx	lr

08006fa4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b098      	sub	sp, #96	@ 0x60
 8006fa8:	af02      	add	r7, sp, #8
 8006faa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2200      	movs	r2, #0
 8006fb0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006fb4:	f7fa fff6 	bl	8001fa4 <HAL_GetTick>
 8006fb8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f003 0308 	and.w	r3, r3, #8
 8006fc4:	2b08      	cmp	r3, #8
 8006fc6:	d12f      	bne.n	8007028 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006fc8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006fcc:	9300      	str	r3, [sp, #0]
 8006fce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006fd6:	6878      	ldr	r0, [r7, #4]
 8006fd8:	f000 f88e 	bl	80070f8 <UART_WaitOnFlagUntilTimeout>
 8006fdc:	4603      	mov	r3, r0
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d022      	beq.n	8007028 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fe8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fea:	e853 3f00 	ldrex	r3, [r3]
 8006fee:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006ff0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ff2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006ff6:	653b      	str	r3, [r7, #80]	@ 0x50
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	461a      	mov	r2, r3
 8006ffe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007000:	647b      	str	r3, [r7, #68]	@ 0x44
 8007002:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007004:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007006:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007008:	e841 2300 	strex	r3, r2, [r1]
 800700c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800700e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007010:	2b00      	cmp	r3, #0
 8007012:	d1e6      	bne.n	8006fe2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2220      	movs	r2, #32
 8007018:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2200      	movs	r2, #0
 8007020:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007024:	2303      	movs	r3, #3
 8007026:	e063      	b.n	80070f0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f003 0304 	and.w	r3, r3, #4
 8007032:	2b04      	cmp	r3, #4
 8007034:	d149      	bne.n	80070ca <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007036:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800703a:	9300      	str	r3, [sp, #0]
 800703c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800703e:	2200      	movs	r2, #0
 8007040:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007044:	6878      	ldr	r0, [r7, #4]
 8007046:	f000 f857 	bl	80070f8 <UART_WaitOnFlagUntilTimeout>
 800704a:	4603      	mov	r3, r0
 800704c:	2b00      	cmp	r3, #0
 800704e:	d03c      	beq.n	80070ca <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007058:	e853 3f00 	ldrex	r3, [r3]
 800705c:	623b      	str	r3, [r7, #32]
   return(result);
 800705e:	6a3b      	ldr	r3, [r7, #32]
 8007060:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007064:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	461a      	mov	r2, r3
 800706c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800706e:	633b      	str	r3, [r7, #48]	@ 0x30
 8007070:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007072:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007074:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007076:	e841 2300 	strex	r3, r2, [r1]
 800707a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800707c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800707e:	2b00      	cmp	r3, #0
 8007080:	d1e6      	bne.n	8007050 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	3308      	adds	r3, #8
 8007088:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800708a:	693b      	ldr	r3, [r7, #16]
 800708c:	e853 3f00 	ldrex	r3, [r3]
 8007090:	60fb      	str	r3, [r7, #12]
   return(result);
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	f023 0301 	bic.w	r3, r3, #1
 8007098:	64bb      	str	r3, [r7, #72]	@ 0x48
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	3308      	adds	r3, #8
 80070a0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80070a2:	61fa      	str	r2, [r7, #28]
 80070a4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070a6:	69b9      	ldr	r1, [r7, #24]
 80070a8:	69fa      	ldr	r2, [r7, #28]
 80070aa:	e841 2300 	strex	r3, r2, [r1]
 80070ae:	617b      	str	r3, [r7, #20]
   return(result);
 80070b0:	697b      	ldr	r3, [r7, #20]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d1e5      	bne.n	8007082 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	2220      	movs	r2, #32
 80070ba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	2200      	movs	r2, #0
 80070c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80070c6:	2303      	movs	r3, #3
 80070c8:	e012      	b.n	80070f0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2220      	movs	r2, #32
 80070ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	2220      	movs	r2, #32
 80070d6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	2200      	movs	r2, #0
 80070de:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2200      	movs	r2, #0
 80070e4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	2200      	movs	r2, #0
 80070ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80070ee:	2300      	movs	r3, #0
}
 80070f0:	4618      	mov	r0, r3
 80070f2:	3758      	adds	r7, #88	@ 0x58
 80070f4:	46bd      	mov	sp, r7
 80070f6:	bd80      	pop	{r7, pc}

080070f8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b084      	sub	sp, #16
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	60f8      	str	r0, [r7, #12]
 8007100:	60b9      	str	r1, [r7, #8]
 8007102:	603b      	str	r3, [r7, #0]
 8007104:	4613      	mov	r3, r2
 8007106:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007108:	e04f      	b.n	80071aa <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800710a:	69bb      	ldr	r3, [r7, #24]
 800710c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007110:	d04b      	beq.n	80071aa <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007112:	f7fa ff47 	bl	8001fa4 <HAL_GetTick>
 8007116:	4602      	mov	r2, r0
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	1ad3      	subs	r3, r2, r3
 800711c:	69ba      	ldr	r2, [r7, #24]
 800711e:	429a      	cmp	r2, r3
 8007120:	d302      	bcc.n	8007128 <UART_WaitOnFlagUntilTimeout+0x30>
 8007122:	69bb      	ldr	r3, [r7, #24]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d101      	bne.n	800712c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007128:	2303      	movs	r3, #3
 800712a:	e04e      	b.n	80071ca <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	f003 0304 	and.w	r3, r3, #4
 8007136:	2b00      	cmp	r3, #0
 8007138:	d037      	beq.n	80071aa <UART_WaitOnFlagUntilTimeout+0xb2>
 800713a:	68bb      	ldr	r3, [r7, #8]
 800713c:	2b80      	cmp	r3, #128	@ 0x80
 800713e:	d034      	beq.n	80071aa <UART_WaitOnFlagUntilTimeout+0xb2>
 8007140:	68bb      	ldr	r3, [r7, #8]
 8007142:	2b40      	cmp	r3, #64	@ 0x40
 8007144:	d031      	beq.n	80071aa <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	69db      	ldr	r3, [r3, #28]
 800714c:	f003 0308 	and.w	r3, r3, #8
 8007150:	2b08      	cmp	r3, #8
 8007152:	d110      	bne.n	8007176 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	2208      	movs	r2, #8
 800715a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800715c:	68f8      	ldr	r0, [r7, #12]
 800715e:	f000 f920 	bl	80073a2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	2208      	movs	r2, #8
 8007166:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	2200      	movs	r2, #0
 800716e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8007172:	2301      	movs	r3, #1
 8007174:	e029      	b.n	80071ca <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	69db      	ldr	r3, [r3, #28]
 800717c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007180:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007184:	d111      	bne.n	80071aa <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800718e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007190:	68f8      	ldr	r0, [r7, #12]
 8007192:	f000 f906 	bl	80073a2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	2220      	movs	r2, #32
 800719a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	2200      	movs	r2, #0
 80071a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80071a6:	2303      	movs	r3, #3
 80071a8:	e00f      	b.n	80071ca <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	69da      	ldr	r2, [r3, #28]
 80071b0:	68bb      	ldr	r3, [r7, #8]
 80071b2:	4013      	ands	r3, r2
 80071b4:	68ba      	ldr	r2, [r7, #8]
 80071b6:	429a      	cmp	r2, r3
 80071b8:	bf0c      	ite	eq
 80071ba:	2301      	moveq	r3, #1
 80071bc:	2300      	movne	r3, #0
 80071be:	b2db      	uxtb	r3, r3
 80071c0:	461a      	mov	r2, r3
 80071c2:	79fb      	ldrb	r3, [r7, #7]
 80071c4:	429a      	cmp	r2, r3
 80071c6:	d0a0      	beq.n	800710a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80071c8:	2300      	movs	r3, #0
}
 80071ca:	4618      	mov	r0, r3
 80071cc:	3710      	adds	r7, #16
 80071ce:	46bd      	mov	sp, r7
 80071d0:	bd80      	pop	{r7, pc}
	...

080071d4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b096      	sub	sp, #88	@ 0x58
 80071d8:	af00      	add	r7, sp, #0
 80071da:	60f8      	str	r0, [r7, #12]
 80071dc:	60b9      	str	r1, [r7, #8]
 80071de:	4613      	mov	r3, r2
 80071e0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	68ba      	ldr	r2, [r7, #8]
 80071e6:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	88fa      	ldrh	r2, [r7, #6]
 80071ec:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	2200      	movs	r2, #0
 80071f4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	2222      	movs	r2, #34	@ 0x22
 80071fc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007206:	2b00      	cmp	r3, #0
 8007208:	d02d      	beq.n	8007266 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007210:	4a40      	ldr	r2, [pc, #256]	@ (8007314 <UART_Start_Receive_DMA+0x140>)
 8007212:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800721a:	4a3f      	ldr	r2, [pc, #252]	@ (8007318 <UART_Start_Receive_DMA+0x144>)
 800721c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007224:	4a3d      	ldr	r2, [pc, #244]	@ (800731c <UART_Start_Receive_DMA+0x148>)
 8007226:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800722e:	2200      	movs	r2, #0
 8007230:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	3324      	adds	r3, #36	@ 0x24
 800723e:	4619      	mov	r1, r3
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007244:	461a      	mov	r2, r3
 8007246:	88fb      	ldrh	r3, [r7, #6]
 8007248:	f7fb f892 	bl	8002370 <HAL_DMA_Start_IT>
 800724c:	4603      	mov	r3, r0
 800724e:	2b00      	cmp	r3, #0
 8007250:	d009      	beq.n	8007266 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	2210      	movs	r2, #16
 8007256:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	2220      	movs	r2, #32
 800725e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 8007262:	2301      	movs	r3, #1
 8007264:	e051      	b.n	800730a <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	691b      	ldr	r3, [r3, #16]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d018      	beq.n	80072a0 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007274:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007276:	e853 3f00 	ldrex	r3, [r3]
 800727a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800727c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800727e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007282:	657b      	str	r3, [r7, #84]	@ 0x54
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	461a      	mov	r2, r3
 800728a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800728c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800728e:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007290:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007292:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007294:	e841 2300 	strex	r3, r2, [r1]
 8007298:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800729a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800729c:	2b00      	cmp	r3, #0
 800729e:	d1e6      	bne.n	800726e <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	3308      	adds	r3, #8
 80072a6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072aa:	e853 3f00 	ldrex	r3, [r3]
 80072ae:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80072b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072b2:	f043 0301 	orr.w	r3, r3, #1
 80072b6:	653b      	str	r3, [r7, #80]	@ 0x50
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	3308      	adds	r3, #8
 80072be:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80072c0:	637a      	str	r2, [r7, #52]	@ 0x34
 80072c2:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072c4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80072c6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80072c8:	e841 2300 	strex	r3, r2, [r1]
 80072cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80072ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d1e5      	bne.n	80072a0 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	3308      	adds	r3, #8
 80072da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072dc:	697b      	ldr	r3, [r7, #20]
 80072de:	e853 3f00 	ldrex	r3, [r3]
 80072e2:	613b      	str	r3, [r7, #16]
   return(result);
 80072e4:	693b      	ldr	r3, [r7, #16]
 80072e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80072ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	3308      	adds	r3, #8
 80072f2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80072f4:	623a      	str	r2, [r7, #32]
 80072f6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072f8:	69f9      	ldr	r1, [r7, #28]
 80072fa:	6a3a      	ldr	r2, [r7, #32]
 80072fc:	e841 2300 	strex	r3, r2, [r1]
 8007300:	61bb      	str	r3, [r7, #24]
   return(result);
 8007302:	69bb      	ldr	r3, [r7, #24]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d1e5      	bne.n	80072d4 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8007308:	2300      	movs	r3, #0
}
 800730a:	4618      	mov	r0, r3
 800730c:	3758      	adds	r7, #88	@ 0x58
 800730e:	46bd      	mov	sp, r7
 8007310:	bd80      	pop	{r7, pc}
 8007312:	bf00      	nop
 8007314:	0800746f 	.word	0x0800746f
 8007318:	0800759b 	.word	0x0800759b
 800731c:	080075d9 	.word	0x080075d9

08007320 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007320:	b480      	push	{r7}
 8007322:	b08f      	sub	sp, #60	@ 0x3c
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800732e:	6a3b      	ldr	r3, [r7, #32]
 8007330:	e853 3f00 	ldrex	r3, [r3]
 8007334:	61fb      	str	r3, [r7, #28]
   return(result);
 8007336:	69fb      	ldr	r3, [r7, #28]
 8007338:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800733c:	637b      	str	r3, [r7, #52]	@ 0x34
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	461a      	mov	r2, r3
 8007344:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007346:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007348:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800734a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800734c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800734e:	e841 2300 	strex	r3, r2, [r1]
 8007352:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007354:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007356:	2b00      	cmp	r3, #0
 8007358:	d1e6      	bne.n	8007328 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	3308      	adds	r3, #8
 8007360:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	e853 3f00 	ldrex	r3, [r3]
 8007368:	60bb      	str	r3, [r7, #8]
   return(result);
 800736a:	68bb      	ldr	r3, [r7, #8]
 800736c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8007370:	633b      	str	r3, [r7, #48]	@ 0x30
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	3308      	adds	r3, #8
 8007378:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800737a:	61ba      	str	r2, [r7, #24]
 800737c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800737e:	6979      	ldr	r1, [r7, #20]
 8007380:	69ba      	ldr	r2, [r7, #24]
 8007382:	e841 2300 	strex	r3, r2, [r1]
 8007386:	613b      	str	r3, [r7, #16]
   return(result);
 8007388:	693b      	ldr	r3, [r7, #16]
 800738a:	2b00      	cmp	r3, #0
 800738c:	d1e5      	bne.n	800735a <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	2220      	movs	r2, #32
 8007392:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8007396:	bf00      	nop
 8007398:	373c      	adds	r7, #60	@ 0x3c
 800739a:	46bd      	mov	sp, r7
 800739c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a0:	4770      	bx	lr

080073a2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80073a2:	b480      	push	{r7}
 80073a4:	b095      	sub	sp, #84	@ 0x54
 80073a6:	af00      	add	r7, sp, #0
 80073a8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073b2:	e853 3f00 	ldrex	r3, [r3]
 80073b6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80073b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073ba:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80073be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	461a      	mov	r2, r3
 80073c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80073c8:	643b      	str	r3, [r7, #64]	@ 0x40
 80073ca:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073cc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80073ce:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80073d0:	e841 2300 	strex	r3, r2, [r1]
 80073d4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80073d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d1e6      	bne.n	80073aa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	3308      	adds	r3, #8
 80073e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073e4:	6a3b      	ldr	r3, [r7, #32]
 80073e6:	e853 3f00 	ldrex	r3, [r3]
 80073ea:	61fb      	str	r3, [r7, #28]
   return(result);
 80073ec:	69fb      	ldr	r3, [r7, #28]
 80073ee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80073f2:	f023 0301 	bic.w	r3, r3, #1
 80073f6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	3308      	adds	r3, #8
 80073fe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007400:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007402:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007404:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007406:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007408:	e841 2300 	strex	r3, r2, [r1]
 800740c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800740e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007410:	2b00      	cmp	r3, #0
 8007412:	d1e3      	bne.n	80073dc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007418:	2b01      	cmp	r3, #1
 800741a:	d118      	bne.n	800744e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	e853 3f00 	ldrex	r3, [r3]
 8007428:	60bb      	str	r3, [r7, #8]
   return(result);
 800742a:	68bb      	ldr	r3, [r7, #8]
 800742c:	f023 0310 	bic.w	r3, r3, #16
 8007430:	647b      	str	r3, [r7, #68]	@ 0x44
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	461a      	mov	r2, r3
 8007438:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800743a:	61bb      	str	r3, [r7, #24]
 800743c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800743e:	6979      	ldr	r1, [r7, #20]
 8007440:	69ba      	ldr	r2, [r7, #24]
 8007442:	e841 2300 	strex	r3, r2, [r1]
 8007446:	613b      	str	r3, [r7, #16]
   return(result);
 8007448:	693b      	ldr	r3, [r7, #16]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d1e6      	bne.n	800741c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	2220      	movs	r2, #32
 8007452:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	2200      	movs	r2, #0
 800745a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2200      	movs	r2, #0
 8007460:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007462:	bf00      	nop
 8007464:	3754      	adds	r7, #84	@ 0x54
 8007466:	46bd      	mov	sp, r7
 8007468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746c:	4770      	bx	lr

0800746e <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800746e:	b580      	push	{r7, lr}
 8007470:	b09c      	sub	sp, #112	@ 0x70
 8007472:	af00      	add	r7, sp, #0
 8007474:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800747a:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	f003 0320 	and.w	r3, r3, #32
 8007486:	2b00      	cmp	r3, #0
 8007488:	d171      	bne.n	800756e <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800748a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800748c:	2200      	movs	r2, #0
 800748e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007492:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007498:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800749a:	e853 3f00 	ldrex	r3, [r3]
 800749e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80074a0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80074a2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80074a6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80074a8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	461a      	mov	r2, r3
 80074ae:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80074b0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80074b2:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074b4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80074b6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80074b8:	e841 2300 	strex	r3, r2, [r1]
 80074bc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80074be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d1e6      	bne.n	8007492 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074c4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	3308      	adds	r3, #8
 80074ca:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074ce:	e853 3f00 	ldrex	r3, [r3]
 80074d2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80074d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074d6:	f023 0301 	bic.w	r3, r3, #1
 80074da:	667b      	str	r3, [r7, #100]	@ 0x64
 80074dc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	3308      	adds	r3, #8
 80074e2:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80074e4:	647a      	str	r2, [r7, #68]	@ 0x44
 80074e6:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074e8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80074ea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80074ec:	e841 2300 	strex	r3, r2, [r1]
 80074f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80074f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d1e5      	bne.n	80074c4 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80074f8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	3308      	adds	r3, #8
 80074fe:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007500:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007502:	e853 3f00 	ldrex	r3, [r3]
 8007506:	623b      	str	r3, [r7, #32]
   return(result);
 8007508:	6a3b      	ldr	r3, [r7, #32]
 800750a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800750e:	663b      	str	r3, [r7, #96]	@ 0x60
 8007510:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	3308      	adds	r3, #8
 8007516:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007518:	633a      	str	r2, [r7, #48]	@ 0x30
 800751a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800751c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800751e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007520:	e841 2300 	strex	r3, r2, [r1]
 8007524:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007526:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007528:	2b00      	cmp	r3, #0
 800752a:	d1e5      	bne.n	80074f8 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800752c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800752e:	2220      	movs	r2, #32
 8007530:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007534:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007536:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007538:	2b01      	cmp	r3, #1
 800753a:	d118      	bne.n	800756e <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800753c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007542:	693b      	ldr	r3, [r7, #16]
 8007544:	e853 3f00 	ldrex	r3, [r3]
 8007548:	60fb      	str	r3, [r7, #12]
   return(result);
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	f023 0310 	bic.w	r3, r3, #16
 8007550:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007552:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	461a      	mov	r2, r3
 8007558:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800755a:	61fb      	str	r3, [r7, #28]
 800755c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800755e:	69b9      	ldr	r1, [r7, #24]
 8007560:	69fa      	ldr	r2, [r7, #28]
 8007562:	e841 2300 	strex	r3, r2, [r1]
 8007566:	617b      	str	r3, [r7, #20]
   return(result);
 8007568:	697b      	ldr	r3, [r7, #20]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d1e6      	bne.n	800753c <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800756e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007570:	2200      	movs	r2, #0
 8007572:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007574:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007576:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007578:	2b01      	cmp	r3, #1
 800757a:	d107      	bne.n	800758c <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800757c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800757e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007582:	4619      	mov	r1, r3
 8007584:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8007586:	f7f9 fc55 	bl	8000e34 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800758a:	e002      	b.n	8007592 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800758c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800758e:	f7ff f97d 	bl	800688c <HAL_UART_RxCpltCallback>
}
 8007592:	bf00      	nop
 8007594:	3770      	adds	r7, #112	@ 0x70
 8007596:	46bd      	mov	sp, r7
 8007598:	bd80      	pop	{r7, pc}

0800759a <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800759a:	b580      	push	{r7, lr}
 800759c:	b084      	sub	sp, #16
 800759e:	af00      	add	r7, sp, #0
 80075a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075a6:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	2201      	movs	r2, #1
 80075ac:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80075b2:	2b01      	cmp	r3, #1
 80075b4:	d109      	bne.n	80075ca <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80075bc:	085b      	lsrs	r3, r3, #1
 80075be:	b29b      	uxth	r3, r3
 80075c0:	4619      	mov	r1, r3
 80075c2:	68f8      	ldr	r0, [r7, #12]
 80075c4:	f7f9 fc36 	bl	8000e34 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80075c8:	e002      	b.n	80075d0 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 80075ca:	68f8      	ldr	r0, [r7, #12]
 80075cc:	f7ff f968 	bl	80068a0 <HAL_UART_RxHalfCpltCallback>
}
 80075d0:	bf00      	nop
 80075d2:	3710      	adds	r7, #16
 80075d4:	46bd      	mov	sp, r7
 80075d6:	bd80      	pop	{r7, pc}

080075d8 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80075d8:	b580      	push	{r7, lr}
 80075da:	b086      	sub	sp, #24
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075e4:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80075e6:	697b      	ldr	r3, [r7, #20]
 80075e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80075ec:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80075ee:	697b      	ldr	r3, [r7, #20]
 80075f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80075f4:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80075f6:	697b      	ldr	r3, [r7, #20]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	689b      	ldr	r3, [r3, #8]
 80075fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007600:	2b80      	cmp	r3, #128	@ 0x80
 8007602:	d109      	bne.n	8007618 <UART_DMAError+0x40>
 8007604:	693b      	ldr	r3, [r7, #16]
 8007606:	2b21      	cmp	r3, #33	@ 0x21
 8007608:	d106      	bne.n	8007618 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800760a:	697b      	ldr	r3, [r7, #20]
 800760c:	2200      	movs	r2, #0
 800760e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8007612:	6978      	ldr	r0, [r7, #20]
 8007614:	f7ff fe84 	bl	8007320 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007618:	697b      	ldr	r3, [r7, #20]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	689b      	ldr	r3, [r3, #8]
 800761e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007622:	2b40      	cmp	r3, #64	@ 0x40
 8007624:	d109      	bne.n	800763a <UART_DMAError+0x62>
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	2b22      	cmp	r3, #34	@ 0x22
 800762a:	d106      	bne.n	800763a <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800762c:	697b      	ldr	r3, [r7, #20]
 800762e:	2200      	movs	r2, #0
 8007630:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8007634:	6978      	ldr	r0, [r7, #20]
 8007636:	f7ff feb4 	bl	80073a2 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800763a:	697b      	ldr	r3, [r7, #20]
 800763c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007640:	f043 0210 	orr.w	r2, r3, #16
 8007644:	697b      	ldr	r3, [r7, #20]
 8007646:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800764a:	6978      	ldr	r0, [r7, #20]
 800764c:	f7ff f932 	bl	80068b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007650:	bf00      	nop
 8007652:	3718      	adds	r7, #24
 8007654:	46bd      	mov	sp, r7
 8007656:	bd80      	pop	{r7, pc}

08007658 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007658:	b580      	push	{r7, lr}
 800765a:	b084      	sub	sp, #16
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007664:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	2200      	movs	r2, #0
 800766a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800766e:	68f8      	ldr	r0, [r7, #12]
 8007670:	f7ff f920 	bl	80068b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007674:	bf00      	nop
 8007676:	3710      	adds	r7, #16
 8007678:	46bd      	mov	sp, r7
 800767a:	bd80      	pop	{r7, pc}

0800767c <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800767c:	b480      	push	{r7}
 800767e:	b08f      	sub	sp, #60	@ 0x3c
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800768a:	2b21      	cmp	r3, #33	@ 0x21
 800768c:	d14c      	bne.n	8007728 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007694:	b29b      	uxth	r3, r3
 8007696:	2b00      	cmp	r3, #0
 8007698:	d132      	bne.n	8007700 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076a0:	6a3b      	ldr	r3, [r7, #32]
 80076a2:	e853 3f00 	ldrex	r3, [r3]
 80076a6:	61fb      	str	r3, [r7, #28]
   return(result);
 80076a8:	69fb      	ldr	r3, [r7, #28]
 80076aa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80076ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	461a      	mov	r2, r3
 80076b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80076b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80076ba:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076bc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80076be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80076c0:	e841 2300 	strex	r3, r2, [r1]
 80076c4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80076c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d1e6      	bne.n	800769a <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	e853 3f00 	ldrex	r3, [r3]
 80076d8:	60bb      	str	r3, [r7, #8]
   return(result);
 80076da:	68bb      	ldr	r3, [r7, #8]
 80076dc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80076e0:	633b      	str	r3, [r7, #48]	@ 0x30
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	461a      	mov	r2, r3
 80076e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076ea:	61bb      	str	r3, [r7, #24]
 80076ec:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076ee:	6979      	ldr	r1, [r7, #20]
 80076f0:	69ba      	ldr	r2, [r7, #24]
 80076f2:	e841 2300 	strex	r3, r2, [r1]
 80076f6:	613b      	str	r3, [r7, #16]
   return(result);
 80076f8:	693b      	ldr	r3, [r7, #16]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d1e6      	bne.n	80076cc <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80076fe:	e013      	b.n	8007728 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007704:	781a      	ldrb	r2, [r3, #0]
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007710:	1c5a      	adds	r2, r3, #1
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800771c:	b29b      	uxth	r3, r3
 800771e:	3b01      	subs	r3, #1
 8007720:	b29a      	uxth	r2, r3
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 8007728:	bf00      	nop
 800772a:	373c      	adds	r7, #60	@ 0x3c
 800772c:	46bd      	mov	sp, r7
 800772e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007732:	4770      	bx	lr

08007734 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007734:	b480      	push	{r7}
 8007736:	b091      	sub	sp, #68	@ 0x44
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007742:	2b21      	cmp	r3, #33	@ 0x21
 8007744:	d151      	bne.n	80077ea <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800774c:	b29b      	uxth	r3, r3
 800774e:	2b00      	cmp	r3, #0
 8007750:	d132      	bne.n	80077b8 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800775a:	e853 3f00 	ldrex	r3, [r3]
 800775e:	623b      	str	r3, [r7, #32]
   return(result);
 8007760:	6a3b      	ldr	r3, [r7, #32]
 8007762:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007766:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	461a      	mov	r2, r3
 800776e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007770:	633b      	str	r3, [r7, #48]	@ 0x30
 8007772:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007774:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007776:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007778:	e841 2300 	strex	r3, r2, [r1]
 800777c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800777e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007780:	2b00      	cmp	r3, #0
 8007782:	d1e6      	bne.n	8007752 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800778a:	693b      	ldr	r3, [r7, #16]
 800778c:	e853 3f00 	ldrex	r3, [r3]
 8007790:	60fb      	str	r3, [r7, #12]
   return(result);
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007798:	637b      	str	r3, [r7, #52]	@ 0x34
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	461a      	mov	r2, r3
 80077a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077a2:	61fb      	str	r3, [r7, #28]
 80077a4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077a6:	69b9      	ldr	r1, [r7, #24]
 80077a8:	69fa      	ldr	r2, [r7, #28]
 80077aa:	e841 2300 	strex	r3, r2, [r1]
 80077ae:	617b      	str	r3, [r7, #20]
   return(result);
 80077b0:	697b      	ldr	r3, [r7, #20]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d1e6      	bne.n	8007784 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80077b6:	e018      	b.n	80077ea <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80077bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80077be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80077c0:	881b      	ldrh	r3, [r3, #0]
 80077c2:	461a      	mov	r2, r3
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80077cc:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80077d2:	1c9a      	adds	r2, r3, #2
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80077de:	b29b      	uxth	r3, r3
 80077e0:	3b01      	subs	r3, #1
 80077e2:	b29a      	uxth	r2, r3
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 80077ea:	bf00      	nop
 80077ec:	3744      	adds	r7, #68	@ 0x44
 80077ee:	46bd      	mov	sp, r7
 80077f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f4:	4770      	bx	lr

080077f6 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80077f6:	b480      	push	{r7}
 80077f8:	b091      	sub	sp, #68	@ 0x44
 80077fa:	af00      	add	r7, sp, #0
 80077fc:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007804:	2b21      	cmp	r3, #33	@ 0x21
 8007806:	d160      	bne.n	80078ca <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800780e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8007810:	e057      	b.n	80078c2 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007818:	b29b      	uxth	r3, r3
 800781a:	2b00      	cmp	r3, #0
 800781c:	d133      	bne.n	8007886 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	3308      	adds	r3, #8
 8007824:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007828:	e853 3f00 	ldrex	r3, [r3]
 800782c:	623b      	str	r3, [r7, #32]
   return(result);
 800782e:	6a3b      	ldr	r3, [r7, #32]
 8007830:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8007834:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	3308      	adds	r3, #8
 800783c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800783e:	633a      	str	r2, [r7, #48]	@ 0x30
 8007840:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007842:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007844:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007846:	e841 2300 	strex	r3, r2, [r1]
 800784a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800784c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800784e:	2b00      	cmp	r3, #0
 8007850:	d1e5      	bne.n	800781e <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007858:	693b      	ldr	r3, [r7, #16]
 800785a:	e853 3f00 	ldrex	r3, [r3]
 800785e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007866:	637b      	str	r3, [r7, #52]	@ 0x34
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	461a      	mov	r2, r3
 800786e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007870:	61fb      	str	r3, [r7, #28]
 8007872:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007874:	69b9      	ldr	r1, [r7, #24]
 8007876:	69fa      	ldr	r2, [r7, #28]
 8007878:	e841 2300 	strex	r3, r2, [r1]
 800787c:	617b      	str	r3, [r7, #20]
   return(result);
 800787e:	697b      	ldr	r3, [r7, #20]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d1e6      	bne.n	8007852 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8007884:	e021      	b.n	80078ca <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	69db      	ldr	r3, [r3, #28]
 800788c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007890:	2b00      	cmp	r3, #0
 8007892:	d013      	beq.n	80078bc <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007898:	781a      	ldrb	r2, [r3, #0]
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80078a4:	1c5a      	adds	r2, r3, #1
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80078b0:	b29b      	uxth	r3, r3
 80078b2:	3b01      	subs	r3, #1
 80078b4:	b29a      	uxth	r2, r3
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80078bc:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80078be:	3b01      	subs	r3, #1
 80078c0:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80078c2:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d1a4      	bne.n	8007812 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 80078c8:	e7ff      	b.n	80078ca <UART_TxISR_8BIT_FIFOEN+0xd4>
 80078ca:	bf00      	nop
 80078cc:	3744      	adds	r7, #68	@ 0x44
 80078ce:	46bd      	mov	sp, r7
 80078d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d4:	4770      	bx	lr

080078d6 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80078d6:	b480      	push	{r7}
 80078d8:	b091      	sub	sp, #68	@ 0x44
 80078da:	af00      	add	r7, sp, #0
 80078dc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80078e4:	2b21      	cmp	r3, #33	@ 0x21
 80078e6:	d165      	bne.n	80079b4 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80078ee:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80078f0:	e05c      	b.n	80079ac <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80078f8:	b29b      	uxth	r3, r3
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d133      	bne.n	8007966 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	3308      	adds	r3, #8
 8007904:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007906:	6a3b      	ldr	r3, [r7, #32]
 8007908:	e853 3f00 	ldrex	r3, [r3]
 800790c:	61fb      	str	r3, [r7, #28]
   return(result);
 800790e:	69fb      	ldr	r3, [r7, #28]
 8007910:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8007914:	637b      	str	r3, [r7, #52]	@ 0x34
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	3308      	adds	r3, #8
 800791c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800791e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007920:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007922:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007924:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007926:	e841 2300 	strex	r3, r2, [r1]
 800792a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800792c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800792e:	2b00      	cmp	r3, #0
 8007930:	d1e5      	bne.n	80078fe <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	e853 3f00 	ldrex	r3, [r3]
 800793e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007940:	68bb      	ldr	r3, [r7, #8]
 8007942:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007946:	633b      	str	r3, [r7, #48]	@ 0x30
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	461a      	mov	r2, r3
 800794e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007950:	61bb      	str	r3, [r7, #24]
 8007952:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007954:	6979      	ldr	r1, [r7, #20]
 8007956:	69ba      	ldr	r2, [r7, #24]
 8007958:	e841 2300 	strex	r3, r2, [r1]
 800795c:	613b      	str	r3, [r7, #16]
   return(result);
 800795e:	693b      	ldr	r3, [r7, #16]
 8007960:	2b00      	cmp	r3, #0
 8007962:	d1e6      	bne.n	8007932 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8007964:	e026      	b.n	80079b4 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	69db      	ldr	r3, [r3, #28]
 800796c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007970:	2b00      	cmp	r3, #0
 8007972:	d018      	beq.n	80079a6 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007978:	63bb      	str	r3, [r7, #56]	@ 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800797a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800797c:	881b      	ldrh	r3, [r3, #0]
 800797e:	461a      	mov	r2, r3
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007988:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800798e:	1c9a      	adds	r2, r3, #2
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800799a:	b29b      	uxth	r3, r3
 800799c:	3b01      	subs	r3, #1
 800799e:	b29a      	uxth	r2, r3
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80079a6:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80079a8:	3b01      	subs	r3, #1
 80079aa:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80079ac:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d19f      	bne.n	80078f2 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 80079b2:	e7ff      	b.n	80079b4 <UART_TxISR_16BIT_FIFOEN+0xde>
 80079b4:	bf00      	nop
 80079b6:	3744      	adds	r7, #68	@ 0x44
 80079b8:	46bd      	mov	sp, r7
 80079ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079be:	4770      	bx	lr

080079c0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80079c0:	b580      	push	{r7, lr}
 80079c2:	b088      	sub	sp, #32
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	e853 3f00 	ldrex	r3, [r3]
 80079d4:	60bb      	str	r3, [r7, #8]
   return(result);
 80079d6:	68bb      	ldr	r3, [r7, #8]
 80079d8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80079dc:	61fb      	str	r3, [r7, #28]
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	461a      	mov	r2, r3
 80079e4:	69fb      	ldr	r3, [r7, #28]
 80079e6:	61bb      	str	r3, [r7, #24]
 80079e8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079ea:	6979      	ldr	r1, [r7, #20]
 80079ec:	69ba      	ldr	r2, [r7, #24]
 80079ee:	e841 2300 	strex	r3, r2, [r1]
 80079f2:	613b      	str	r3, [r7, #16]
   return(result);
 80079f4:	693b      	ldr	r3, [r7, #16]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d1e6      	bne.n	80079c8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	2220      	movs	r2, #32
 80079fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	2200      	movs	r2, #0
 8007a06:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007a08:	6878      	ldr	r0, [r7, #4]
 8007a0a:	f7f9 fa8b 	bl	8000f24 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007a0e:	bf00      	nop
 8007a10:	3720      	adds	r7, #32
 8007a12:	46bd      	mov	sp, r7
 8007a14:	bd80      	pop	{r7, pc}

08007a16 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007a16:	b480      	push	{r7}
 8007a18:	b083      	sub	sp, #12
 8007a1a:	af00      	add	r7, sp, #0
 8007a1c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007a1e:	bf00      	nop
 8007a20:	370c      	adds	r7, #12
 8007a22:	46bd      	mov	sp, r7
 8007a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a28:	4770      	bx	lr

08007a2a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007a2a:	b480      	push	{r7}
 8007a2c:	b083      	sub	sp, #12
 8007a2e:	af00      	add	r7, sp, #0
 8007a30:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007a32:	bf00      	nop
 8007a34:	370c      	adds	r7, #12
 8007a36:	46bd      	mov	sp, r7
 8007a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3c:	4770      	bx	lr

08007a3e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007a3e:	b480      	push	{r7}
 8007a40:	b083      	sub	sp, #12
 8007a42:	af00      	add	r7, sp, #0
 8007a44:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007a46:	bf00      	nop
 8007a48:	370c      	adds	r7, #12
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a50:	4770      	bx	lr

08007a52 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007a52:	b480      	push	{r7}
 8007a54:	b085      	sub	sp, #20
 8007a56:	af00      	add	r7, sp, #0
 8007a58:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007a60:	2b01      	cmp	r3, #1
 8007a62:	d101      	bne.n	8007a68 <HAL_UARTEx_DisableFifoMode+0x16>
 8007a64:	2302      	movs	r3, #2
 8007a66:	e027      	b.n	8007ab8 <HAL_UARTEx_DisableFifoMode+0x66>
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2201      	movs	r2, #1
 8007a6c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	2224      	movs	r2, #36	@ 0x24
 8007a74:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	681a      	ldr	r2, [r3, #0]
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	f022 0201 	bic.w	r2, r2, #1
 8007a8e:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007a96:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	68fa      	ldr	r2, [r7, #12]
 8007aa4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	2220      	movs	r2, #32
 8007aaa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007ab6:	2300      	movs	r3, #0
}
 8007ab8:	4618      	mov	r0, r3
 8007aba:	3714      	adds	r7, #20
 8007abc:	46bd      	mov	sp, r7
 8007abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac2:	4770      	bx	lr

08007ac4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b084      	sub	sp, #16
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
 8007acc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007ad4:	2b01      	cmp	r3, #1
 8007ad6:	d101      	bne.n	8007adc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007ad8:	2302      	movs	r3, #2
 8007ada:	e02d      	b.n	8007b38 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	2201      	movs	r2, #1
 8007ae0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	2224      	movs	r2, #36	@ 0x24
 8007ae8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	681a      	ldr	r2, [r3, #0]
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	f022 0201 	bic.w	r2, r2, #1
 8007b02:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	689b      	ldr	r3, [r3, #8]
 8007b0a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	683a      	ldr	r2, [r7, #0]
 8007b14:	430a      	orrs	r2, r1
 8007b16:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007b18:	6878      	ldr	r0, [r7, #4]
 8007b1a:	f000 f8a3 	bl	8007c64 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	68fa      	ldr	r2, [r7, #12]
 8007b24:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	2220      	movs	r2, #32
 8007b2a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	2200      	movs	r2, #0
 8007b32:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007b36:	2300      	movs	r3, #0
}
 8007b38:	4618      	mov	r0, r3
 8007b3a:	3710      	adds	r7, #16
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	bd80      	pop	{r7, pc}

08007b40 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b084      	sub	sp, #16
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
 8007b48:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007b50:	2b01      	cmp	r3, #1
 8007b52:	d101      	bne.n	8007b58 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007b54:	2302      	movs	r3, #2
 8007b56:	e02d      	b.n	8007bb4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	2201      	movs	r2, #1
 8007b5c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2224      	movs	r2, #36	@ 0x24
 8007b64:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	681a      	ldr	r2, [r3, #0]
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	f022 0201 	bic.w	r2, r2, #1
 8007b7e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	689b      	ldr	r3, [r3, #8]
 8007b86:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	683a      	ldr	r2, [r7, #0]
 8007b90:	430a      	orrs	r2, r1
 8007b92:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007b94:	6878      	ldr	r0, [r7, #4]
 8007b96:	f000 f865 	bl	8007c64 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	68fa      	ldr	r2, [r7, #12]
 8007ba0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	2220      	movs	r2, #32
 8007ba6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	2200      	movs	r2, #0
 8007bae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007bb2:	2300      	movs	r3, #0
}
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	3710      	adds	r7, #16
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	bd80      	pop	{r7, pc}

08007bbc <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007bbc:	b580      	push	{r7, lr}
 8007bbe:	b08c      	sub	sp, #48	@ 0x30
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	60f8      	str	r0, [r7, #12]
 8007bc4:	60b9      	str	r1, [r7, #8]
 8007bc6:	4613      	mov	r3, r2
 8007bc8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007bd0:	2b20      	cmp	r3, #32
 8007bd2:	d142      	bne.n	8007c5a <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007bd4:	68bb      	ldr	r3, [r7, #8]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d002      	beq.n	8007be0 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 8007bda:	88fb      	ldrh	r3, [r7, #6]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d101      	bne.n	8007be4 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 8007be0:	2301      	movs	r3, #1
 8007be2:	e03b      	b.n	8007c5c <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	2201      	movs	r2, #1
 8007be8:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	2200      	movs	r2, #0
 8007bee:	671a      	str	r2, [r3, #112]	@ 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8007bf0:	88fb      	ldrh	r3, [r7, #6]
 8007bf2:	461a      	mov	r2, r3
 8007bf4:	68b9      	ldr	r1, [r7, #8]
 8007bf6:	68f8      	ldr	r0, [r7, #12]
 8007bf8:	f7ff faec 	bl	80071d4 <UART_Start_Receive_DMA>
 8007bfc:	4603      	mov	r3, r0
 8007bfe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8007c02:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d124      	bne.n	8007c54 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007c0e:	2b01      	cmp	r3, #1
 8007c10:	d11d      	bne.n	8007c4e <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	2210      	movs	r2, #16
 8007c18:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c20:	69bb      	ldr	r3, [r7, #24]
 8007c22:	e853 3f00 	ldrex	r3, [r3]
 8007c26:	617b      	str	r3, [r7, #20]
   return(result);
 8007c28:	697b      	ldr	r3, [r7, #20]
 8007c2a:	f043 0310 	orr.w	r3, r3, #16
 8007c2e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	461a      	mov	r2, r3
 8007c36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c38:	627b      	str	r3, [r7, #36]	@ 0x24
 8007c3a:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c3c:	6a39      	ldr	r1, [r7, #32]
 8007c3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007c40:	e841 2300 	strex	r3, r2, [r1]
 8007c44:	61fb      	str	r3, [r7, #28]
   return(result);
 8007c46:	69fb      	ldr	r3, [r7, #28]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d1e6      	bne.n	8007c1a <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 8007c4c:	e002      	b.n	8007c54 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8007c4e:	2301      	movs	r3, #1
 8007c50:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8007c54:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007c58:	e000      	b.n	8007c5c <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8007c5a:	2302      	movs	r3, #2
  }
}
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	3730      	adds	r7, #48	@ 0x30
 8007c60:	46bd      	mov	sp, r7
 8007c62:	bd80      	pop	{r7, pc}

08007c64 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007c64:	b480      	push	{r7}
 8007c66:	b085      	sub	sp, #20
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d108      	bne.n	8007c86 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2201      	movs	r2, #1
 8007c78:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	2201      	movs	r2, #1
 8007c80:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007c84:	e031      	b.n	8007cea <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007c86:	2308      	movs	r3, #8
 8007c88:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007c8a:	2308      	movs	r3, #8
 8007c8c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	689b      	ldr	r3, [r3, #8]
 8007c94:	0e5b      	lsrs	r3, r3, #25
 8007c96:	b2db      	uxtb	r3, r3
 8007c98:	f003 0307 	and.w	r3, r3, #7
 8007c9c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	689b      	ldr	r3, [r3, #8]
 8007ca4:	0f5b      	lsrs	r3, r3, #29
 8007ca6:	b2db      	uxtb	r3, r3
 8007ca8:	f003 0307 	and.w	r3, r3, #7
 8007cac:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007cae:	7bbb      	ldrb	r3, [r7, #14]
 8007cb0:	7b3a      	ldrb	r2, [r7, #12]
 8007cb2:	4911      	ldr	r1, [pc, #68]	@ (8007cf8 <UARTEx_SetNbDataToProcess+0x94>)
 8007cb4:	5c8a      	ldrb	r2, [r1, r2]
 8007cb6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007cba:	7b3a      	ldrb	r2, [r7, #12]
 8007cbc:	490f      	ldr	r1, [pc, #60]	@ (8007cfc <UARTEx_SetNbDataToProcess+0x98>)
 8007cbe:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007cc0:	fb93 f3f2 	sdiv	r3, r3, r2
 8007cc4:	b29a      	uxth	r2, r3
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007ccc:	7bfb      	ldrb	r3, [r7, #15]
 8007cce:	7b7a      	ldrb	r2, [r7, #13]
 8007cd0:	4909      	ldr	r1, [pc, #36]	@ (8007cf8 <UARTEx_SetNbDataToProcess+0x94>)
 8007cd2:	5c8a      	ldrb	r2, [r1, r2]
 8007cd4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007cd8:	7b7a      	ldrb	r2, [r7, #13]
 8007cda:	4908      	ldr	r1, [pc, #32]	@ (8007cfc <UARTEx_SetNbDataToProcess+0x98>)
 8007cdc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007cde:	fb93 f3f2 	sdiv	r3, r3, r2
 8007ce2:	b29a      	uxth	r2, r3
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8007cea:	bf00      	nop
 8007cec:	3714      	adds	r7, #20
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf4:	4770      	bx	lr
 8007cf6:	bf00      	nop
 8007cf8:	0800cef4 	.word	0x0800cef4
 8007cfc:	0800cefc 	.word	0x0800cefc

08007d00 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8007d00:	b480      	push	{r7}
 8007d02:	b085      	sub	sp, #20
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007d10:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8007d14:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	b29a      	uxth	r2, r3
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8007d20:	2300      	movs	r3, #0
}
 8007d22:	4618      	mov	r0, r3
 8007d24:	3714      	adds	r7, #20
 8007d26:	46bd      	mov	sp, r7
 8007d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2c:	4770      	bx	lr

08007d2e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8007d2e:	b480      	push	{r7}
 8007d30:	b085      	sub	sp, #20
 8007d32:	af00      	add	r7, sp, #0
 8007d34:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007d36:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8007d3a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8007d42:	b29a      	uxth	r2, r3
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	b29b      	uxth	r3, r3
 8007d48:	43db      	mvns	r3, r3
 8007d4a:	b29b      	uxth	r3, r3
 8007d4c:	4013      	ands	r3, r2
 8007d4e:	b29a      	uxth	r2, r3
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8007d56:	2300      	movs	r3, #0
}
 8007d58:	4618      	mov	r0, r3
 8007d5a:	3714      	adds	r7, #20
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d62:	4770      	bx	lr

08007d64 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007d64:	b480      	push	{r7}
 8007d66:	b085      	sub	sp, #20
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	60f8      	str	r0, [r7, #12]
 8007d6c:	1d3b      	adds	r3, r7, #4
 8007d6e:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	2201      	movs	r2, #1
 8007d76:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	2200      	movs	r2, #0
 8007d86:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8007d92:	2300      	movs	r3, #0
}
 8007d94:	4618      	mov	r0, r3
 8007d96:	3714      	adds	r7, #20
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9e:	4770      	bx	lr

08007da0 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007da0:	b480      	push	{r7}
 8007da2:	b0a7      	sub	sp, #156	@ 0x9c
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]
 8007da8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8007daa:	2300      	movs	r3, #0
 8007dac:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8007db0:	687a      	ldr	r2, [r7, #4]
 8007db2:	683b      	ldr	r3, [r7, #0]
 8007db4:	781b      	ldrb	r3, [r3, #0]
 8007db6:	009b      	lsls	r3, r3, #2
 8007db8:	4413      	add	r3, r2
 8007dba:	881b      	ldrh	r3, [r3, #0]
 8007dbc:	b29b      	uxth	r3, r3
 8007dbe:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8007dc2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007dc6:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94

  /* initialize Endpoint */
  switch (ep->type)
 8007dca:	683b      	ldr	r3, [r7, #0]
 8007dcc:	78db      	ldrb	r3, [r3, #3]
 8007dce:	2b03      	cmp	r3, #3
 8007dd0:	d81f      	bhi.n	8007e12 <USB_ActivateEndpoint+0x72>
 8007dd2:	a201      	add	r2, pc, #4	@ (adr r2, 8007dd8 <USB_ActivateEndpoint+0x38>)
 8007dd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dd8:	08007de9 	.word	0x08007de9
 8007ddc:	08007e05 	.word	0x08007e05
 8007de0:	08007e1b 	.word	0x08007e1b
 8007de4:	08007df7 	.word	0x08007df7
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8007de8:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8007dec:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007df0:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 8007df4:	e012      	b.n	8007e1c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8007df6:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8007dfa:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8007dfe:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 8007e02:	e00b      	b.n	8007e1c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8007e04:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8007e08:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8007e0c:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 8007e10:	e004      	b.n	8007e1c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8007e12:	2301      	movs	r3, #1
 8007e14:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
      break;
 8007e18:	e000      	b.n	8007e1c <USB_ActivateEndpoint+0x7c>
      break;
 8007e1a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8007e1c:	687a      	ldr	r2, [r7, #4]
 8007e1e:	683b      	ldr	r3, [r7, #0]
 8007e20:	781b      	ldrb	r3, [r3, #0]
 8007e22:	009b      	lsls	r3, r3, #2
 8007e24:	441a      	add	r2, r3
 8007e26:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8007e2a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007e2e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007e32:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007e36:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007e3a:	b29b      	uxth	r3, r3
 8007e3c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8007e3e:	687a      	ldr	r2, [r7, #4]
 8007e40:	683b      	ldr	r3, [r7, #0]
 8007e42:	781b      	ldrb	r3, [r3, #0]
 8007e44:	009b      	lsls	r3, r3, #2
 8007e46:	4413      	add	r3, r2
 8007e48:	881b      	ldrh	r3, [r3, #0]
 8007e4a:	b29b      	uxth	r3, r3
 8007e4c:	b21b      	sxth	r3, r3
 8007e4e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007e52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007e56:	b21a      	sxth	r2, r3
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	781b      	ldrb	r3, [r3, #0]
 8007e5c:	b21b      	sxth	r3, r3
 8007e5e:	4313      	orrs	r3, r2
 8007e60:	b21b      	sxth	r3, r3
 8007e62:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
 8007e66:	687a      	ldr	r2, [r7, #4]
 8007e68:	683b      	ldr	r3, [r7, #0]
 8007e6a:	781b      	ldrb	r3, [r3, #0]
 8007e6c:	009b      	lsls	r3, r3, #2
 8007e6e:	441a      	add	r2, r3
 8007e70:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8007e74:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007e78:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007e7c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007e80:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007e84:	b29b      	uxth	r3, r3
 8007e86:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8007e88:	683b      	ldr	r3, [r7, #0]
 8007e8a:	7b1b      	ldrb	r3, [r3, #12]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	f040 8180 	bne.w	8008192 <USB_ActivateEndpoint+0x3f2>
  {
    if (ep->is_in != 0U)
 8007e92:	683b      	ldr	r3, [r7, #0]
 8007e94:	785b      	ldrb	r3, [r3, #1]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	f000 8084 	beq.w	8007fa4 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	61bb      	str	r3, [r7, #24]
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007ea6:	b29b      	uxth	r3, r3
 8007ea8:	461a      	mov	r2, r3
 8007eaa:	69bb      	ldr	r3, [r7, #24]
 8007eac:	4413      	add	r3, r2
 8007eae:	61bb      	str	r3, [r7, #24]
 8007eb0:	683b      	ldr	r3, [r7, #0]
 8007eb2:	781b      	ldrb	r3, [r3, #0]
 8007eb4:	00da      	lsls	r2, r3, #3
 8007eb6:	69bb      	ldr	r3, [r7, #24]
 8007eb8:	4413      	add	r3, r2
 8007eba:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007ebe:	617b      	str	r3, [r7, #20]
 8007ec0:	683b      	ldr	r3, [r7, #0]
 8007ec2:	88db      	ldrh	r3, [r3, #6]
 8007ec4:	085b      	lsrs	r3, r3, #1
 8007ec6:	b29b      	uxth	r3, r3
 8007ec8:	005b      	lsls	r3, r3, #1
 8007eca:	b29a      	uxth	r2, r3
 8007ecc:	697b      	ldr	r3, [r7, #20]
 8007ece:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007ed0:	687a      	ldr	r2, [r7, #4]
 8007ed2:	683b      	ldr	r3, [r7, #0]
 8007ed4:	781b      	ldrb	r3, [r3, #0]
 8007ed6:	009b      	lsls	r3, r3, #2
 8007ed8:	4413      	add	r3, r2
 8007eda:	881b      	ldrh	r3, [r3, #0]
 8007edc:	827b      	strh	r3, [r7, #18]
 8007ede:	8a7b      	ldrh	r3, [r7, #18]
 8007ee0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d01b      	beq.n	8007f20 <USB_ActivateEndpoint+0x180>
 8007ee8:	687a      	ldr	r2, [r7, #4]
 8007eea:	683b      	ldr	r3, [r7, #0]
 8007eec:	781b      	ldrb	r3, [r3, #0]
 8007eee:	009b      	lsls	r3, r3, #2
 8007ef0:	4413      	add	r3, r2
 8007ef2:	881b      	ldrh	r3, [r3, #0]
 8007ef4:	b29b      	uxth	r3, r3
 8007ef6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007efa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007efe:	823b      	strh	r3, [r7, #16]
 8007f00:	687a      	ldr	r2, [r7, #4]
 8007f02:	683b      	ldr	r3, [r7, #0]
 8007f04:	781b      	ldrb	r3, [r3, #0]
 8007f06:	009b      	lsls	r3, r3, #2
 8007f08:	441a      	add	r2, r3
 8007f0a:	8a3b      	ldrh	r3, [r7, #16]
 8007f0c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007f10:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007f14:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007f18:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007f1c:	b29b      	uxth	r3, r3
 8007f1e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007f20:	683b      	ldr	r3, [r7, #0]
 8007f22:	78db      	ldrb	r3, [r3, #3]
 8007f24:	2b01      	cmp	r3, #1
 8007f26:	d020      	beq.n	8007f6a <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007f28:	687a      	ldr	r2, [r7, #4]
 8007f2a:	683b      	ldr	r3, [r7, #0]
 8007f2c:	781b      	ldrb	r3, [r3, #0]
 8007f2e:	009b      	lsls	r3, r3, #2
 8007f30:	4413      	add	r3, r2
 8007f32:	881b      	ldrh	r3, [r3, #0]
 8007f34:	b29b      	uxth	r3, r3
 8007f36:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007f3a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007f3e:	81bb      	strh	r3, [r7, #12]
 8007f40:	89bb      	ldrh	r3, [r7, #12]
 8007f42:	f083 0320 	eor.w	r3, r3, #32
 8007f46:	81bb      	strh	r3, [r7, #12]
 8007f48:	687a      	ldr	r2, [r7, #4]
 8007f4a:	683b      	ldr	r3, [r7, #0]
 8007f4c:	781b      	ldrb	r3, [r3, #0]
 8007f4e:	009b      	lsls	r3, r3, #2
 8007f50:	441a      	add	r2, r3
 8007f52:	89bb      	ldrh	r3, [r7, #12]
 8007f54:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007f58:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007f5c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007f60:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007f64:	b29b      	uxth	r3, r3
 8007f66:	8013      	strh	r3, [r2, #0]
 8007f68:	e3f9      	b.n	800875e <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007f6a:	687a      	ldr	r2, [r7, #4]
 8007f6c:	683b      	ldr	r3, [r7, #0]
 8007f6e:	781b      	ldrb	r3, [r3, #0]
 8007f70:	009b      	lsls	r3, r3, #2
 8007f72:	4413      	add	r3, r2
 8007f74:	881b      	ldrh	r3, [r3, #0]
 8007f76:	b29b      	uxth	r3, r3
 8007f78:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007f7c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007f80:	81fb      	strh	r3, [r7, #14]
 8007f82:	687a      	ldr	r2, [r7, #4]
 8007f84:	683b      	ldr	r3, [r7, #0]
 8007f86:	781b      	ldrb	r3, [r3, #0]
 8007f88:	009b      	lsls	r3, r3, #2
 8007f8a:	441a      	add	r2, r3
 8007f8c:	89fb      	ldrh	r3, [r7, #14]
 8007f8e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007f92:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007f96:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007f9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007f9e:	b29b      	uxth	r3, r3
 8007fa0:	8013      	strh	r3, [r2, #0]
 8007fa2:	e3dc      	b.n	800875e <USB_ActivateEndpoint+0x9be>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	633b      	str	r3, [r7, #48]	@ 0x30
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007fae:	b29b      	uxth	r3, r3
 8007fb0:	461a      	mov	r2, r3
 8007fb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fb4:	4413      	add	r3, r2
 8007fb6:	633b      	str	r3, [r7, #48]	@ 0x30
 8007fb8:	683b      	ldr	r3, [r7, #0]
 8007fba:	781b      	ldrb	r3, [r3, #0]
 8007fbc:	00da      	lsls	r2, r3, #3
 8007fbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fc0:	4413      	add	r3, r2
 8007fc2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007fc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007fc8:	683b      	ldr	r3, [r7, #0]
 8007fca:	88db      	ldrh	r3, [r3, #6]
 8007fcc:	085b      	lsrs	r3, r3, #1
 8007fce:	b29b      	uxth	r3, r3
 8007fd0:	005b      	lsls	r3, r3, #1
 8007fd2:	b29a      	uxth	r2, r3
 8007fd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007fd6:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007fe2:	b29b      	uxth	r3, r3
 8007fe4:	461a      	mov	r2, r3
 8007fe6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fe8:	4413      	add	r3, r2
 8007fea:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007fec:	683b      	ldr	r3, [r7, #0]
 8007fee:	781b      	ldrb	r3, [r3, #0]
 8007ff0:	00da      	lsls	r2, r3, #3
 8007ff2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ff4:	4413      	add	r3, r2
 8007ff6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007ffa:	627b      	str	r3, [r7, #36]	@ 0x24
 8007ffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ffe:	881b      	ldrh	r3, [r3, #0]
 8008000:	b29b      	uxth	r3, r3
 8008002:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008006:	b29a      	uxth	r2, r3
 8008008:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800800a:	801a      	strh	r2, [r3, #0]
 800800c:	683b      	ldr	r3, [r7, #0]
 800800e:	691b      	ldr	r3, [r3, #16]
 8008010:	2b00      	cmp	r3, #0
 8008012:	d10a      	bne.n	800802a <USB_ActivateEndpoint+0x28a>
 8008014:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008016:	881b      	ldrh	r3, [r3, #0]
 8008018:	b29b      	uxth	r3, r3
 800801a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800801e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008022:	b29a      	uxth	r2, r3
 8008024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008026:	801a      	strh	r2, [r3, #0]
 8008028:	e041      	b.n	80080ae <USB_ActivateEndpoint+0x30e>
 800802a:	683b      	ldr	r3, [r7, #0]
 800802c:	691b      	ldr	r3, [r3, #16]
 800802e:	2b3e      	cmp	r3, #62	@ 0x3e
 8008030:	d81c      	bhi.n	800806c <USB_ActivateEndpoint+0x2cc>
 8008032:	683b      	ldr	r3, [r7, #0]
 8008034:	691b      	ldr	r3, [r3, #16]
 8008036:	085b      	lsrs	r3, r3, #1
 8008038:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800803c:	683b      	ldr	r3, [r7, #0]
 800803e:	691b      	ldr	r3, [r3, #16]
 8008040:	f003 0301 	and.w	r3, r3, #1
 8008044:	2b00      	cmp	r3, #0
 8008046:	d004      	beq.n	8008052 <USB_ActivateEndpoint+0x2b2>
 8008048:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800804c:	3301      	adds	r3, #1
 800804e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008054:	881b      	ldrh	r3, [r3, #0]
 8008056:	b29a      	uxth	r2, r3
 8008058:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800805c:	b29b      	uxth	r3, r3
 800805e:	029b      	lsls	r3, r3, #10
 8008060:	b29b      	uxth	r3, r3
 8008062:	4313      	orrs	r3, r2
 8008064:	b29a      	uxth	r2, r3
 8008066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008068:	801a      	strh	r2, [r3, #0]
 800806a:	e020      	b.n	80080ae <USB_ActivateEndpoint+0x30e>
 800806c:	683b      	ldr	r3, [r7, #0]
 800806e:	691b      	ldr	r3, [r3, #16]
 8008070:	095b      	lsrs	r3, r3, #5
 8008072:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008076:	683b      	ldr	r3, [r7, #0]
 8008078:	691b      	ldr	r3, [r3, #16]
 800807a:	f003 031f 	and.w	r3, r3, #31
 800807e:	2b00      	cmp	r3, #0
 8008080:	d104      	bne.n	800808c <USB_ActivateEndpoint+0x2ec>
 8008082:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008086:	3b01      	subs	r3, #1
 8008088:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800808c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800808e:	881b      	ldrh	r3, [r3, #0]
 8008090:	b29a      	uxth	r2, r3
 8008092:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008096:	b29b      	uxth	r3, r3
 8008098:	029b      	lsls	r3, r3, #10
 800809a:	b29b      	uxth	r3, r3
 800809c:	4313      	orrs	r3, r2
 800809e:	b29b      	uxth	r3, r3
 80080a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80080a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80080a8:	b29a      	uxth	r2, r3
 80080aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080ac:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80080ae:	687a      	ldr	r2, [r7, #4]
 80080b0:	683b      	ldr	r3, [r7, #0]
 80080b2:	781b      	ldrb	r3, [r3, #0]
 80080b4:	009b      	lsls	r3, r3, #2
 80080b6:	4413      	add	r3, r2
 80080b8:	881b      	ldrh	r3, [r3, #0]
 80080ba:	847b      	strh	r3, [r7, #34]	@ 0x22
 80080bc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80080be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d01b      	beq.n	80080fe <USB_ActivateEndpoint+0x35e>
 80080c6:	687a      	ldr	r2, [r7, #4]
 80080c8:	683b      	ldr	r3, [r7, #0]
 80080ca:	781b      	ldrb	r3, [r3, #0]
 80080cc:	009b      	lsls	r3, r3, #2
 80080ce:	4413      	add	r3, r2
 80080d0:	881b      	ldrh	r3, [r3, #0]
 80080d2:	b29b      	uxth	r3, r3
 80080d4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80080d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80080dc:	843b      	strh	r3, [r7, #32]
 80080de:	687a      	ldr	r2, [r7, #4]
 80080e0:	683b      	ldr	r3, [r7, #0]
 80080e2:	781b      	ldrb	r3, [r3, #0]
 80080e4:	009b      	lsls	r3, r3, #2
 80080e6:	441a      	add	r2, r3
 80080e8:	8c3b      	ldrh	r3, [r7, #32]
 80080ea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80080ee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80080f2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80080f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80080fa:	b29b      	uxth	r3, r3
 80080fc:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 80080fe:	683b      	ldr	r3, [r7, #0]
 8008100:	781b      	ldrb	r3, [r3, #0]
 8008102:	2b00      	cmp	r3, #0
 8008104:	d124      	bne.n	8008150 <USB_ActivateEndpoint+0x3b0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008106:	687a      	ldr	r2, [r7, #4]
 8008108:	683b      	ldr	r3, [r7, #0]
 800810a:	781b      	ldrb	r3, [r3, #0]
 800810c:	009b      	lsls	r3, r3, #2
 800810e:	4413      	add	r3, r2
 8008110:	881b      	ldrh	r3, [r3, #0]
 8008112:	b29b      	uxth	r3, r3
 8008114:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008118:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800811c:	83bb      	strh	r3, [r7, #28]
 800811e:	8bbb      	ldrh	r3, [r7, #28]
 8008120:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008124:	83bb      	strh	r3, [r7, #28]
 8008126:	8bbb      	ldrh	r3, [r7, #28]
 8008128:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800812c:	83bb      	strh	r3, [r7, #28]
 800812e:	687a      	ldr	r2, [r7, #4]
 8008130:	683b      	ldr	r3, [r7, #0]
 8008132:	781b      	ldrb	r3, [r3, #0]
 8008134:	009b      	lsls	r3, r3, #2
 8008136:	441a      	add	r2, r3
 8008138:	8bbb      	ldrh	r3, [r7, #28]
 800813a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800813e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008142:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008146:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800814a:	b29b      	uxth	r3, r3
 800814c:	8013      	strh	r3, [r2, #0]
 800814e:	e306      	b.n	800875e <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8008150:	687a      	ldr	r2, [r7, #4]
 8008152:	683b      	ldr	r3, [r7, #0]
 8008154:	781b      	ldrb	r3, [r3, #0]
 8008156:	009b      	lsls	r3, r3, #2
 8008158:	4413      	add	r3, r2
 800815a:	881b      	ldrh	r3, [r3, #0]
 800815c:	b29b      	uxth	r3, r3
 800815e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008162:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008166:	83fb      	strh	r3, [r7, #30]
 8008168:	8bfb      	ldrh	r3, [r7, #30]
 800816a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800816e:	83fb      	strh	r3, [r7, #30]
 8008170:	687a      	ldr	r2, [r7, #4]
 8008172:	683b      	ldr	r3, [r7, #0]
 8008174:	781b      	ldrb	r3, [r3, #0]
 8008176:	009b      	lsls	r3, r3, #2
 8008178:	441a      	add	r2, r3
 800817a:	8bfb      	ldrh	r3, [r7, #30]
 800817c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008180:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008184:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008188:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800818c:	b29b      	uxth	r3, r3
 800818e:	8013      	strh	r3, [r2, #0]
 8008190:	e2e5      	b.n	800875e <USB_ActivateEndpoint+0x9be>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8008192:	683b      	ldr	r3, [r7, #0]
 8008194:	78db      	ldrb	r3, [r3, #3]
 8008196:	2b02      	cmp	r3, #2
 8008198:	d11e      	bne.n	80081d8 <USB_ActivateEndpoint+0x438>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800819a:	687a      	ldr	r2, [r7, #4]
 800819c:	683b      	ldr	r3, [r7, #0]
 800819e:	781b      	ldrb	r3, [r3, #0]
 80081a0:	009b      	lsls	r3, r3, #2
 80081a2:	4413      	add	r3, r2
 80081a4:	881b      	ldrh	r3, [r3, #0]
 80081a6:	b29b      	uxth	r3, r3
 80081a8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80081ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80081b0:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 80081b4:	687a      	ldr	r2, [r7, #4]
 80081b6:	683b      	ldr	r3, [r7, #0]
 80081b8:	781b      	ldrb	r3, [r3, #0]
 80081ba:	009b      	lsls	r3, r3, #2
 80081bc:	441a      	add	r2, r3
 80081be:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 80081c2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80081c6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80081ca:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80081ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80081d2:	b29b      	uxth	r3, r3
 80081d4:	8013      	strh	r3, [r2, #0]
 80081d6:	e01d      	b.n	8008214 <USB_ActivateEndpoint+0x474>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80081d8:	687a      	ldr	r2, [r7, #4]
 80081da:	683b      	ldr	r3, [r7, #0]
 80081dc:	781b      	ldrb	r3, [r3, #0]
 80081de:	009b      	lsls	r3, r3, #2
 80081e0:	4413      	add	r3, r2
 80081e2:	881b      	ldrh	r3, [r3, #0]
 80081e4:	b29b      	uxth	r3, r3
 80081e6:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80081ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80081ee:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
 80081f2:	687a      	ldr	r2, [r7, #4]
 80081f4:	683b      	ldr	r3, [r7, #0]
 80081f6:	781b      	ldrb	r3, [r3, #0]
 80081f8:	009b      	lsls	r3, r3, #2
 80081fa:	441a      	add	r2, r3
 80081fc:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 8008200:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008204:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008208:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800820c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008210:	b29b      	uxth	r3, r3
 8008212:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800821e:	b29b      	uxth	r3, r3
 8008220:	461a      	mov	r2, r3
 8008222:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008224:	4413      	add	r3, r2
 8008226:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008228:	683b      	ldr	r3, [r7, #0]
 800822a:	781b      	ldrb	r3, [r3, #0]
 800822c:	00da      	lsls	r2, r3, #3
 800822e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008230:	4413      	add	r3, r2
 8008232:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008236:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008238:	683b      	ldr	r3, [r7, #0]
 800823a:	891b      	ldrh	r3, [r3, #8]
 800823c:	085b      	lsrs	r3, r3, #1
 800823e:	b29b      	uxth	r3, r3
 8008240:	005b      	lsls	r3, r3, #1
 8008242:	b29a      	uxth	r2, r3
 8008244:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008246:	801a      	strh	r2, [r3, #0]
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	677b      	str	r3, [r7, #116]	@ 0x74
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008252:	b29b      	uxth	r3, r3
 8008254:	461a      	mov	r2, r3
 8008256:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008258:	4413      	add	r3, r2
 800825a:	677b      	str	r3, [r7, #116]	@ 0x74
 800825c:	683b      	ldr	r3, [r7, #0]
 800825e:	781b      	ldrb	r3, [r3, #0]
 8008260:	00da      	lsls	r2, r3, #3
 8008262:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008264:	4413      	add	r3, r2
 8008266:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800826a:	673b      	str	r3, [r7, #112]	@ 0x70
 800826c:	683b      	ldr	r3, [r7, #0]
 800826e:	895b      	ldrh	r3, [r3, #10]
 8008270:	085b      	lsrs	r3, r3, #1
 8008272:	b29b      	uxth	r3, r3
 8008274:	005b      	lsls	r3, r3, #1
 8008276:	b29a      	uxth	r2, r3
 8008278:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800827a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800827c:	683b      	ldr	r3, [r7, #0]
 800827e:	785b      	ldrb	r3, [r3, #1]
 8008280:	2b00      	cmp	r3, #0
 8008282:	f040 81af 	bne.w	80085e4 <USB_ActivateEndpoint+0x844>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008286:	687a      	ldr	r2, [r7, #4]
 8008288:	683b      	ldr	r3, [r7, #0]
 800828a:	781b      	ldrb	r3, [r3, #0]
 800828c:	009b      	lsls	r3, r3, #2
 800828e:	4413      	add	r3, r2
 8008290:	881b      	ldrh	r3, [r3, #0]
 8008292:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
 8008296:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 800829a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d01d      	beq.n	80082de <USB_ActivateEndpoint+0x53e>
 80082a2:	687a      	ldr	r2, [r7, #4]
 80082a4:	683b      	ldr	r3, [r7, #0]
 80082a6:	781b      	ldrb	r3, [r3, #0]
 80082a8:	009b      	lsls	r3, r3, #2
 80082aa:	4413      	add	r3, r2
 80082ac:	881b      	ldrh	r3, [r3, #0]
 80082ae:	b29b      	uxth	r3, r3
 80082b0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80082b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80082b8:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 80082bc:	687a      	ldr	r2, [r7, #4]
 80082be:	683b      	ldr	r3, [r7, #0]
 80082c0:	781b      	ldrb	r3, [r3, #0]
 80082c2:	009b      	lsls	r3, r3, #2
 80082c4:	441a      	add	r2, r3
 80082c6:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 80082ca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80082ce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80082d2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80082d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80082da:	b29b      	uxth	r3, r3
 80082dc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80082de:	687a      	ldr	r2, [r7, #4]
 80082e0:	683b      	ldr	r3, [r7, #0]
 80082e2:	781b      	ldrb	r3, [r3, #0]
 80082e4:	009b      	lsls	r3, r3, #2
 80082e6:	4413      	add	r3, r2
 80082e8:	881b      	ldrh	r3, [r3, #0]
 80082ea:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 80082ee:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 80082f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d01d      	beq.n	8008336 <USB_ActivateEndpoint+0x596>
 80082fa:	687a      	ldr	r2, [r7, #4]
 80082fc:	683b      	ldr	r3, [r7, #0]
 80082fe:	781b      	ldrb	r3, [r3, #0]
 8008300:	009b      	lsls	r3, r3, #2
 8008302:	4413      	add	r3, r2
 8008304:	881b      	ldrh	r3, [r3, #0]
 8008306:	b29b      	uxth	r3, r3
 8008308:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800830c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008310:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 8008314:	687a      	ldr	r2, [r7, #4]
 8008316:	683b      	ldr	r3, [r7, #0]
 8008318:	781b      	ldrb	r3, [r3, #0]
 800831a:	009b      	lsls	r3, r3, #2
 800831c:	441a      	add	r2, r3
 800831e:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8008322:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008326:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800832a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800832e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008332:	b29b      	uxth	r3, r3
 8008334:	8013      	strh	r3, [r2, #0]

      /* Set endpoint RX count */
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8008336:	683b      	ldr	r3, [r7, #0]
 8008338:	785b      	ldrb	r3, [r3, #1]
 800833a:	2b00      	cmp	r3, #0
 800833c:	d16b      	bne.n	8008416 <USB_ActivateEndpoint+0x676>
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008348:	b29b      	uxth	r3, r3
 800834a:	461a      	mov	r2, r3
 800834c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800834e:	4413      	add	r3, r2
 8008350:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008352:	683b      	ldr	r3, [r7, #0]
 8008354:	781b      	ldrb	r3, [r3, #0]
 8008356:	00da      	lsls	r2, r3, #3
 8008358:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800835a:	4413      	add	r3, r2
 800835c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008360:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008362:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008364:	881b      	ldrh	r3, [r3, #0]
 8008366:	b29b      	uxth	r3, r3
 8008368:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800836c:	b29a      	uxth	r2, r3
 800836e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008370:	801a      	strh	r2, [r3, #0]
 8008372:	683b      	ldr	r3, [r7, #0]
 8008374:	691b      	ldr	r3, [r3, #16]
 8008376:	2b00      	cmp	r3, #0
 8008378:	d10a      	bne.n	8008390 <USB_ActivateEndpoint+0x5f0>
 800837a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800837c:	881b      	ldrh	r3, [r3, #0]
 800837e:	b29b      	uxth	r3, r3
 8008380:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008384:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008388:	b29a      	uxth	r2, r3
 800838a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800838c:	801a      	strh	r2, [r3, #0]
 800838e:	e05d      	b.n	800844c <USB_ActivateEndpoint+0x6ac>
 8008390:	683b      	ldr	r3, [r7, #0]
 8008392:	691b      	ldr	r3, [r3, #16]
 8008394:	2b3e      	cmp	r3, #62	@ 0x3e
 8008396:	d81c      	bhi.n	80083d2 <USB_ActivateEndpoint+0x632>
 8008398:	683b      	ldr	r3, [r7, #0]
 800839a:	691b      	ldr	r3, [r3, #16]
 800839c:	085b      	lsrs	r3, r3, #1
 800839e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80083a2:	683b      	ldr	r3, [r7, #0]
 80083a4:	691b      	ldr	r3, [r3, #16]
 80083a6:	f003 0301 	and.w	r3, r3, #1
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d004      	beq.n	80083b8 <USB_ActivateEndpoint+0x618>
 80083ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80083b2:	3301      	adds	r3, #1
 80083b4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80083b8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80083ba:	881b      	ldrh	r3, [r3, #0]
 80083bc:	b29a      	uxth	r2, r3
 80083be:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80083c2:	b29b      	uxth	r3, r3
 80083c4:	029b      	lsls	r3, r3, #10
 80083c6:	b29b      	uxth	r3, r3
 80083c8:	4313      	orrs	r3, r2
 80083ca:	b29a      	uxth	r2, r3
 80083cc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80083ce:	801a      	strh	r2, [r3, #0]
 80083d0:	e03c      	b.n	800844c <USB_ActivateEndpoint+0x6ac>
 80083d2:	683b      	ldr	r3, [r7, #0]
 80083d4:	691b      	ldr	r3, [r3, #16]
 80083d6:	095b      	lsrs	r3, r3, #5
 80083d8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80083dc:	683b      	ldr	r3, [r7, #0]
 80083de:	691b      	ldr	r3, [r3, #16]
 80083e0:	f003 031f 	and.w	r3, r3, #31
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d104      	bne.n	80083f2 <USB_ActivateEndpoint+0x652>
 80083e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80083ec:	3b01      	subs	r3, #1
 80083ee:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80083f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80083f4:	881b      	ldrh	r3, [r3, #0]
 80083f6:	b29a      	uxth	r2, r3
 80083f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80083fc:	b29b      	uxth	r3, r3
 80083fe:	029b      	lsls	r3, r3, #10
 8008400:	b29b      	uxth	r3, r3
 8008402:	4313      	orrs	r3, r2
 8008404:	b29b      	uxth	r3, r3
 8008406:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800840a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800840e:	b29a      	uxth	r2, r3
 8008410:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008412:	801a      	strh	r2, [r3, #0]
 8008414:	e01a      	b.n	800844c <USB_ActivateEndpoint+0x6ac>
 8008416:	683b      	ldr	r3, [r7, #0]
 8008418:	785b      	ldrb	r3, [r3, #1]
 800841a:	2b01      	cmp	r3, #1
 800841c:	d116      	bne.n	800844c <USB_ActivateEndpoint+0x6ac>
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	657b      	str	r3, [r7, #84]	@ 0x54
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008428:	b29b      	uxth	r3, r3
 800842a:	461a      	mov	r2, r3
 800842c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800842e:	4413      	add	r3, r2
 8008430:	657b      	str	r3, [r7, #84]	@ 0x54
 8008432:	683b      	ldr	r3, [r7, #0]
 8008434:	781b      	ldrb	r3, [r3, #0]
 8008436:	00da      	lsls	r2, r3, #3
 8008438:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800843a:	4413      	add	r3, r2
 800843c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008440:	653b      	str	r3, [r7, #80]	@ 0x50
 8008442:	683b      	ldr	r3, [r7, #0]
 8008444:	691b      	ldr	r3, [r3, #16]
 8008446:	b29a      	uxth	r2, r3
 8008448:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800844a:	801a      	strh	r2, [r3, #0]
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	647b      	str	r3, [r7, #68]	@ 0x44
 8008450:	683b      	ldr	r3, [r7, #0]
 8008452:	785b      	ldrb	r3, [r3, #1]
 8008454:	2b00      	cmp	r3, #0
 8008456:	d16b      	bne.n	8008530 <USB_ActivateEndpoint+0x790>
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008462:	b29b      	uxth	r3, r3
 8008464:	461a      	mov	r2, r3
 8008466:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008468:	4413      	add	r3, r2
 800846a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800846c:	683b      	ldr	r3, [r7, #0]
 800846e:	781b      	ldrb	r3, [r3, #0]
 8008470:	00da      	lsls	r2, r3, #3
 8008472:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008474:	4413      	add	r3, r2
 8008476:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800847a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800847c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800847e:	881b      	ldrh	r3, [r3, #0]
 8008480:	b29b      	uxth	r3, r3
 8008482:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008486:	b29a      	uxth	r2, r3
 8008488:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800848a:	801a      	strh	r2, [r3, #0]
 800848c:	683b      	ldr	r3, [r7, #0]
 800848e:	691b      	ldr	r3, [r3, #16]
 8008490:	2b00      	cmp	r3, #0
 8008492:	d10a      	bne.n	80084aa <USB_ActivateEndpoint+0x70a>
 8008494:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008496:	881b      	ldrh	r3, [r3, #0]
 8008498:	b29b      	uxth	r3, r3
 800849a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800849e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80084a2:	b29a      	uxth	r2, r3
 80084a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084a6:	801a      	strh	r2, [r3, #0]
 80084a8:	e05b      	b.n	8008562 <USB_ActivateEndpoint+0x7c2>
 80084aa:	683b      	ldr	r3, [r7, #0]
 80084ac:	691b      	ldr	r3, [r3, #16]
 80084ae:	2b3e      	cmp	r3, #62	@ 0x3e
 80084b0:	d81c      	bhi.n	80084ec <USB_ActivateEndpoint+0x74c>
 80084b2:	683b      	ldr	r3, [r7, #0]
 80084b4:	691b      	ldr	r3, [r3, #16]
 80084b6:	085b      	lsrs	r3, r3, #1
 80084b8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80084bc:	683b      	ldr	r3, [r7, #0]
 80084be:	691b      	ldr	r3, [r3, #16]
 80084c0:	f003 0301 	and.w	r3, r3, #1
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d004      	beq.n	80084d2 <USB_ActivateEndpoint+0x732>
 80084c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80084cc:	3301      	adds	r3, #1
 80084ce:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80084d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084d4:	881b      	ldrh	r3, [r3, #0]
 80084d6:	b29a      	uxth	r2, r3
 80084d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80084dc:	b29b      	uxth	r3, r3
 80084de:	029b      	lsls	r3, r3, #10
 80084e0:	b29b      	uxth	r3, r3
 80084e2:	4313      	orrs	r3, r2
 80084e4:	b29a      	uxth	r2, r3
 80084e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084e8:	801a      	strh	r2, [r3, #0]
 80084ea:	e03a      	b.n	8008562 <USB_ActivateEndpoint+0x7c2>
 80084ec:	683b      	ldr	r3, [r7, #0]
 80084ee:	691b      	ldr	r3, [r3, #16]
 80084f0:	095b      	lsrs	r3, r3, #5
 80084f2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80084f6:	683b      	ldr	r3, [r7, #0]
 80084f8:	691b      	ldr	r3, [r3, #16]
 80084fa:	f003 031f 	and.w	r3, r3, #31
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d104      	bne.n	800850c <USB_ActivateEndpoint+0x76c>
 8008502:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008506:	3b01      	subs	r3, #1
 8008508:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800850c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800850e:	881b      	ldrh	r3, [r3, #0]
 8008510:	b29a      	uxth	r2, r3
 8008512:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008516:	b29b      	uxth	r3, r3
 8008518:	029b      	lsls	r3, r3, #10
 800851a:	b29b      	uxth	r3, r3
 800851c:	4313      	orrs	r3, r2
 800851e:	b29b      	uxth	r3, r3
 8008520:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008524:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008528:	b29a      	uxth	r2, r3
 800852a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800852c:	801a      	strh	r2, [r3, #0]
 800852e:	e018      	b.n	8008562 <USB_ActivateEndpoint+0x7c2>
 8008530:	683b      	ldr	r3, [r7, #0]
 8008532:	785b      	ldrb	r3, [r3, #1]
 8008534:	2b01      	cmp	r3, #1
 8008536:	d114      	bne.n	8008562 <USB_ActivateEndpoint+0x7c2>
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800853e:	b29b      	uxth	r3, r3
 8008540:	461a      	mov	r2, r3
 8008542:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008544:	4413      	add	r3, r2
 8008546:	647b      	str	r3, [r7, #68]	@ 0x44
 8008548:	683b      	ldr	r3, [r7, #0]
 800854a:	781b      	ldrb	r3, [r3, #0]
 800854c:	00da      	lsls	r2, r3, #3
 800854e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008550:	4413      	add	r3, r2
 8008552:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008556:	643b      	str	r3, [r7, #64]	@ 0x40
 8008558:	683b      	ldr	r3, [r7, #0]
 800855a:	691b      	ldr	r3, [r3, #16]
 800855c:	b29a      	uxth	r2, r3
 800855e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008560:	801a      	strh	r2, [r3, #0]

      /* Set endpoint RX to valid state */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008562:	687a      	ldr	r2, [r7, #4]
 8008564:	683b      	ldr	r3, [r7, #0]
 8008566:	781b      	ldrb	r3, [r3, #0]
 8008568:	009b      	lsls	r3, r3, #2
 800856a:	4413      	add	r3, r2
 800856c:	881b      	ldrh	r3, [r3, #0]
 800856e:	b29b      	uxth	r3, r3
 8008570:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008574:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008578:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800857a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800857c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008580:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8008582:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8008584:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008588:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800858a:	687a      	ldr	r2, [r7, #4]
 800858c:	683b      	ldr	r3, [r7, #0]
 800858e:	781b      	ldrb	r3, [r3, #0]
 8008590:	009b      	lsls	r3, r3, #2
 8008592:	441a      	add	r2, r3
 8008594:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8008596:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800859a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800859e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80085a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80085a6:	b29b      	uxth	r3, r3
 80085a8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80085aa:	687a      	ldr	r2, [r7, #4]
 80085ac:	683b      	ldr	r3, [r7, #0]
 80085ae:	781b      	ldrb	r3, [r3, #0]
 80085b0:	009b      	lsls	r3, r3, #2
 80085b2:	4413      	add	r3, r2
 80085b4:	881b      	ldrh	r3, [r3, #0]
 80085b6:	b29b      	uxth	r3, r3
 80085b8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80085bc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80085c0:	86bb      	strh	r3, [r7, #52]	@ 0x34
 80085c2:	687a      	ldr	r2, [r7, #4]
 80085c4:	683b      	ldr	r3, [r7, #0]
 80085c6:	781b      	ldrb	r3, [r3, #0]
 80085c8:	009b      	lsls	r3, r3, #2
 80085ca:	441a      	add	r2, r3
 80085cc:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80085ce:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80085d2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80085d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80085da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80085de:	b29b      	uxth	r3, r3
 80085e0:	8013      	strh	r3, [r2, #0]
 80085e2:	e0bc      	b.n	800875e <USB_ActivateEndpoint+0x9be>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80085e4:	687a      	ldr	r2, [r7, #4]
 80085e6:	683b      	ldr	r3, [r7, #0]
 80085e8:	781b      	ldrb	r3, [r3, #0]
 80085ea:	009b      	lsls	r3, r3, #2
 80085ec:	4413      	add	r3, r2
 80085ee:	881b      	ldrh	r3, [r3, #0]
 80085f0:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 80085f4:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80085f8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d01d      	beq.n	800863c <USB_ActivateEndpoint+0x89c>
 8008600:	687a      	ldr	r2, [r7, #4]
 8008602:	683b      	ldr	r3, [r7, #0]
 8008604:	781b      	ldrb	r3, [r3, #0]
 8008606:	009b      	lsls	r3, r3, #2
 8008608:	4413      	add	r3, r2
 800860a:	881b      	ldrh	r3, [r3, #0]
 800860c:	b29b      	uxth	r3, r3
 800860e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008612:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008616:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 800861a:	687a      	ldr	r2, [r7, #4]
 800861c:	683b      	ldr	r3, [r7, #0]
 800861e:	781b      	ldrb	r3, [r3, #0]
 8008620:	009b      	lsls	r3, r3, #2
 8008622:	441a      	add	r2, r3
 8008624:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8008628:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800862c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008630:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008634:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008638:	b29b      	uxth	r3, r3
 800863a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800863c:	687a      	ldr	r2, [r7, #4]
 800863e:	683b      	ldr	r3, [r7, #0]
 8008640:	781b      	ldrb	r3, [r3, #0]
 8008642:	009b      	lsls	r3, r3, #2
 8008644:	4413      	add	r3, r2
 8008646:	881b      	ldrh	r3, [r3, #0]
 8008648:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
 800864c:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 8008650:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008654:	2b00      	cmp	r3, #0
 8008656:	d01d      	beq.n	8008694 <USB_ActivateEndpoint+0x8f4>
 8008658:	687a      	ldr	r2, [r7, #4]
 800865a:	683b      	ldr	r3, [r7, #0]
 800865c:	781b      	ldrb	r3, [r3, #0]
 800865e:	009b      	lsls	r3, r3, #2
 8008660:	4413      	add	r3, r2
 8008662:	881b      	ldrh	r3, [r3, #0]
 8008664:	b29b      	uxth	r3, r3
 8008666:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800866a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800866e:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
 8008672:	687a      	ldr	r2, [r7, #4]
 8008674:	683b      	ldr	r3, [r7, #0]
 8008676:	781b      	ldrb	r3, [r3, #0]
 8008678:	009b      	lsls	r3, r3, #2
 800867a:	441a      	add	r2, r3
 800867c:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 8008680:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008684:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008688:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800868c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008690:	b29b      	uxth	r3, r3
 8008692:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008694:	683b      	ldr	r3, [r7, #0]
 8008696:	78db      	ldrb	r3, [r3, #3]
 8008698:	2b01      	cmp	r3, #1
 800869a:	d024      	beq.n	80086e6 <USB_ActivateEndpoint+0x946>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800869c:	687a      	ldr	r2, [r7, #4]
 800869e:	683b      	ldr	r3, [r7, #0]
 80086a0:	781b      	ldrb	r3, [r3, #0]
 80086a2:	009b      	lsls	r3, r3, #2
 80086a4:	4413      	add	r3, r2
 80086a6:	881b      	ldrh	r3, [r3, #0]
 80086a8:	b29b      	uxth	r3, r3
 80086aa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80086ae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80086b2:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 80086b6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 80086ba:	f083 0320 	eor.w	r3, r3, #32
 80086be:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 80086c2:	687a      	ldr	r2, [r7, #4]
 80086c4:	683b      	ldr	r3, [r7, #0]
 80086c6:	781b      	ldrb	r3, [r3, #0]
 80086c8:	009b      	lsls	r3, r3, #2
 80086ca:	441a      	add	r2, r3
 80086cc:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 80086d0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80086d4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80086d8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80086dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80086e0:	b29b      	uxth	r3, r3
 80086e2:	8013      	strh	r3, [r2, #0]
 80086e4:	e01d      	b.n	8008722 <USB_ActivateEndpoint+0x982>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80086e6:	687a      	ldr	r2, [r7, #4]
 80086e8:	683b      	ldr	r3, [r7, #0]
 80086ea:	781b      	ldrb	r3, [r3, #0]
 80086ec:	009b      	lsls	r3, r3, #2
 80086ee:	4413      	add	r3, r2
 80086f0:	881b      	ldrh	r3, [r3, #0]
 80086f2:	b29b      	uxth	r3, r3
 80086f4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80086f8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80086fc:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8008700:	687a      	ldr	r2, [r7, #4]
 8008702:	683b      	ldr	r3, [r7, #0]
 8008704:	781b      	ldrb	r3, [r3, #0]
 8008706:	009b      	lsls	r3, r3, #2
 8008708:	441a      	add	r2, r3
 800870a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800870e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008712:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008716:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800871a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800871e:	b29b      	uxth	r3, r3
 8008720:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008722:	687a      	ldr	r2, [r7, #4]
 8008724:	683b      	ldr	r3, [r7, #0]
 8008726:	781b      	ldrb	r3, [r3, #0]
 8008728:	009b      	lsls	r3, r3, #2
 800872a:	4413      	add	r3, r2
 800872c:	881b      	ldrh	r3, [r3, #0]
 800872e:	b29b      	uxth	r3, r3
 8008730:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008734:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008738:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800873c:	687a      	ldr	r2, [r7, #4]
 800873e:	683b      	ldr	r3, [r7, #0]
 8008740:	781b      	ldrb	r3, [r3, #0]
 8008742:	009b      	lsls	r3, r3, #2
 8008744:	441a      	add	r2, r3
 8008746:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800874a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800874e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008752:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008756:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800875a:	b29b      	uxth	r3, r3
 800875c:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800875e:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
}
 8008762:	4618      	mov	r0, r3
 8008764:	379c      	adds	r7, #156	@ 0x9c
 8008766:	46bd      	mov	sp, r7
 8008768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876c:	4770      	bx	lr
 800876e:	bf00      	nop

08008770 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008770:	b480      	push	{r7}
 8008772:	b08d      	sub	sp, #52	@ 0x34
 8008774:	af00      	add	r7, sp, #0
 8008776:	6078      	str	r0, [r7, #4]
 8008778:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800877a:	683b      	ldr	r3, [r7, #0]
 800877c:	7b1b      	ldrb	r3, [r3, #12]
 800877e:	2b00      	cmp	r3, #0
 8008780:	f040 808e 	bne.w	80088a0 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8008784:	683b      	ldr	r3, [r7, #0]
 8008786:	785b      	ldrb	r3, [r3, #1]
 8008788:	2b00      	cmp	r3, #0
 800878a:	d044      	beq.n	8008816 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800878c:	687a      	ldr	r2, [r7, #4]
 800878e:	683b      	ldr	r3, [r7, #0]
 8008790:	781b      	ldrb	r3, [r3, #0]
 8008792:	009b      	lsls	r3, r3, #2
 8008794:	4413      	add	r3, r2
 8008796:	881b      	ldrh	r3, [r3, #0]
 8008798:	81bb      	strh	r3, [r7, #12]
 800879a:	89bb      	ldrh	r3, [r7, #12]
 800879c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d01b      	beq.n	80087dc <USB_DeactivateEndpoint+0x6c>
 80087a4:	687a      	ldr	r2, [r7, #4]
 80087a6:	683b      	ldr	r3, [r7, #0]
 80087a8:	781b      	ldrb	r3, [r3, #0]
 80087aa:	009b      	lsls	r3, r3, #2
 80087ac:	4413      	add	r3, r2
 80087ae:	881b      	ldrh	r3, [r3, #0]
 80087b0:	b29b      	uxth	r3, r3
 80087b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80087b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80087ba:	817b      	strh	r3, [r7, #10]
 80087bc:	687a      	ldr	r2, [r7, #4]
 80087be:	683b      	ldr	r3, [r7, #0]
 80087c0:	781b      	ldrb	r3, [r3, #0]
 80087c2:	009b      	lsls	r3, r3, #2
 80087c4:	441a      	add	r2, r3
 80087c6:	897b      	ldrh	r3, [r7, #10]
 80087c8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80087cc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80087d0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80087d4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80087d8:	b29b      	uxth	r3, r3
 80087da:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80087dc:	687a      	ldr	r2, [r7, #4]
 80087de:	683b      	ldr	r3, [r7, #0]
 80087e0:	781b      	ldrb	r3, [r3, #0]
 80087e2:	009b      	lsls	r3, r3, #2
 80087e4:	4413      	add	r3, r2
 80087e6:	881b      	ldrh	r3, [r3, #0]
 80087e8:	b29b      	uxth	r3, r3
 80087ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80087ee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80087f2:	813b      	strh	r3, [r7, #8]
 80087f4:	687a      	ldr	r2, [r7, #4]
 80087f6:	683b      	ldr	r3, [r7, #0]
 80087f8:	781b      	ldrb	r3, [r3, #0]
 80087fa:	009b      	lsls	r3, r3, #2
 80087fc:	441a      	add	r2, r3
 80087fe:	893b      	ldrh	r3, [r7, #8]
 8008800:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008804:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008808:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800880c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008810:	b29b      	uxth	r3, r3
 8008812:	8013      	strh	r3, [r2, #0]
 8008814:	e192      	b.n	8008b3c <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008816:	687a      	ldr	r2, [r7, #4]
 8008818:	683b      	ldr	r3, [r7, #0]
 800881a:	781b      	ldrb	r3, [r3, #0]
 800881c:	009b      	lsls	r3, r3, #2
 800881e:	4413      	add	r3, r2
 8008820:	881b      	ldrh	r3, [r3, #0]
 8008822:	827b      	strh	r3, [r7, #18]
 8008824:	8a7b      	ldrh	r3, [r7, #18]
 8008826:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800882a:	2b00      	cmp	r3, #0
 800882c:	d01b      	beq.n	8008866 <USB_DeactivateEndpoint+0xf6>
 800882e:	687a      	ldr	r2, [r7, #4]
 8008830:	683b      	ldr	r3, [r7, #0]
 8008832:	781b      	ldrb	r3, [r3, #0]
 8008834:	009b      	lsls	r3, r3, #2
 8008836:	4413      	add	r3, r2
 8008838:	881b      	ldrh	r3, [r3, #0]
 800883a:	b29b      	uxth	r3, r3
 800883c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008840:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008844:	823b      	strh	r3, [r7, #16]
 8008846:	687a      	ldr	r2, [r7, #4]
 8008848:	683b      	ldr	r3, [r7, #0]
 800884a:	781b      	ldrb	r3, [r3, #0]
 800884c:	009b      	lsls	r3, r3, #2
 800884e:	441a      	add	r2, r3
 8008850:	8a3b      	ldrh	r3, [r7, #16]
 8008852:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008856:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800885a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800885e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008862:	b29b      	uxth	r3, r3
 8008864:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008866:	687a      	ldr	r2, [r7, #4]
 8008868:	683b      	ldr	r3, [r7, #0]
 800886a:	781b      	ldrb	r3, [r3, #0]
 800886c:	009b      	lsls	r3, r3, #2
 800886e:	4413      	add	r3, r2
 8008870:	881b      	ldrh	r3, [r3, #0]
 8008872:	b29b      	uxth	r3, r3
 8008874:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008878:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800887c:	81fb      	strh	r3, [r7, #14]
 800887e:	687a      	ldr	r2, [r7, #4]
 8008880:	683b      	ldr	r3, [r7, #0]
 8008882:	781b      	ldrb	r3, [r3, #0]
 8008884:	009b      	lsls	r3, r3, #2
 8008886:	441a      	add	r2, r3
 8008888:	89fb      	ldrh	r3, [r7, #14]
 800888a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800888e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008892:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008896:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800889a:	b29b      	uxth	r3, r3
 800889c:	8013      	strh	r3, [r2, #0]
 800889e:	e14d      	b.n	8008b3c <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80088a0:	683b      	ldr	r3, [r7, #0]
 80088a2:	785b      	ldrb	r3, [r3, #1]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	f040 80a5 	bne.w	80089f4 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80088aa:	687a      	ldr	r2, [r7, #4]
 80088ac:	683b      	ldr	r3, [r7, #0]
 80088ae:	781b      	ldrb	r3, [r3, #0]
 80088b0:	009b      	lsls	r3, r3, #2
 80088b2:	4413      	add	r3, r2
 80088b4:	881b      	ldrh	r3, [r3, #0]
 80088b6:	843b      	strh	r3, [r7, #32]
 80088b8:	8c3b      	ldrh	r3, [r7, #32]
 80088ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d01b      	beq.n	80088fa <USB_DeactivateEndpoint+0x18a>
 80088c2:	687a      	ldr	r2, [r7, #4]
 80088c4:	683b      	ldr	r3, [r7, #0]
 80088c6:	781b      	ldrb	r3, [r3, #0]
 80088c8:	009b      	lsls	r3, r3, #2
 80088ca:	4413      	add	r3, r2
 80088cc:	881b      	ldrh	r3, [r3, #0]
 80088ce:	b29b      	uxth	r3, r3
 80088d0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80088d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80088d8:	83fb      	strh	r3, [r7, #30]
 80088da:	687a      	ldr	r2, [r7, #4]
 80088dc:	683b      	ldr	r3, [r7, #0]
 80088de:	781b      	ldrb	r3, [r3, #0]
 80088e0:	009b      	lsls	r3, r3, #2
 80088e2:	441a      	add	r2, r3
 80088e4:	8bfb      	ldrh	r3, [r7, #30]
 80088e6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80088ea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80088ee:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80088f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80088f6:	b29b      	uxth	r3, r3
 80088f8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80088fa:	687a      	ldr	r2, [r7, #4]
 80088fc:	683b      	ldr	r3, [r7, #0]
 80088fe:	781b      	ldrb	r3, [r3, #0]
 8008900:	009b      	lsls	r3, r3, #2
 8008902:	4413      	add	r3, r2
 8008904:	881b      	ldrh	r3, [r3, #0]
 8008906:	83bb      	strh	r3, [r7, #28]
 8008908:	8bbb      	ldrh	r3, [r7, #28]
 800890a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800890e:	2b00      	cmp	r3, #0
 8008910:	d01b      	beq.n	800894a <USB_DeactivateEndpoint+0x1da>
 8008912:	687a      	ldr	r2, [r7, #4]
 8008914:	683b      	ldr	r3, [r7, #0]
 8008916:	781b      	ldrb	r3, [r3, #0]
 8008918:	009b      	lsls	r3, r3, #2
 800891a:	4413      	add	r3, r2
 800891c:	881b      	ldrh	r3, [r3, #0]
 800891e:	b29b      	uxth	r3, r3
 8008920:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008924:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008928:	837b      	strh	r3, [r7, #26]
 800892a:	687a      	ldr	r2, [r7, #4]
 800892c:	683b      	ldr	r3, [r7, #0]
 800892e:	781b      	ldrb	r3, [r3, #0]
 8008930:	009b      	lsls	r3, r3, #2
 8008932:	441a      	add	r2, r3
 8008934:	8b7b      	ldrh	r3, [r7, #26]
 8008936:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800893a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800893e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008942:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008946:	b29b      	uxth	r3, r3
 8008948:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800894a:	687a      	ldr	r2, [r7, #4]
 800894c:	683b      	ldr	r3, [r7, #0]
 800894e:	781b      	ldrb	r3, [r3, #0]
 8008950:	009b      	lsls	r3, r3, #2
 8008952:	4413      	add	r3, r2
 8008954:	881b      	ldrh	r3, [r3, #0]
 8008956:	b29b      	uxth	r3, r3
 8008958:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800895c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008960:	833b      	strh	r3, [r7, #24]
 8008962:	687a      	ldr	r2, [r7, #4]
 8008964:	683b      	ldr	r3, [r7, #0]
 8008966:	781b      	ldrb	r3, [r3, #0]
 8008968:	009b      	lsls	r3, r3, #2
 800896a:	441a      	add	r2, r3
 800896c:	8b3b      	ldrh	r3, [r7, #24]
 800896e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008972:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008976:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800897a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800897e:	b29b      	uxth	r3, r3
 8008980:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008982:	687a      	ldr	r2, [r7, #4]
 8008984:	683b      	ldr	r3, [r7, #0]
 8008986:	781b      	ldrb	r3, [r3, #0]
 8008988:	009b      	lsls	r3, r3, #2
 800898a:	4413      	add	r3, r2
 800898c:	881b      	ldrh	r3, [r3, #0]
 800898e:	b29b      	uxth	r3, r3
 8008990:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008994:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008998:	82fb      	strh	r3, [r7, #22]
 800899a:	687a      	ldr	r2, [r7, #4]
 800899c:	683b      	ldr	r3, [r7, #0]
 800899e:	781b      	ldrb	r3, [r3, #0]
 80089a0:	009b      	lsls	r3, r3, #2
 80089a2:	441a      	add	r2, r3
 80089a4:	8afb      	ldrh	r3, [r7, #22]
 80089a6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80089aa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80089ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80089b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80089b6:	b29b      	uxth	r3, r3
 80089b8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80089ba:	687a      	ldr	r2, [r7, #4]
 80089bc:	683b      	ldr	r3, [r7, #0]
 80089be:	781b      	ldrb	r3, [r3, #0]
 80089c0:	009b      	lsls	r3, r3, #2
 80089c2:	4413      	add	r3, r2
 80089c4:	881b      	ldrh	r3, [r3, #0]
 80089c6:	b29b      	uxth	r3, r3
 80089c8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80089cc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80089d0:	82bb      	strh	r3, [r7, #20]
 80089d2:	687a      	ldr	r2, [r7, #4]
 80089d4:	683b      	ldr	r3, [r7, #0]
 80089d6:	781b      	ldrb	r3, [r3, #0]
 80089d8:	009b      	lsls	r3, r3, #2
 80089da:	441a      	add	r2, r3
 80089dc:	8abb      	ldrh	r3, [r7, #20]
 80089de:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80089e2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80089e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80089ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80089ee:	b29b      	uxth	r3, r3
 80089f0:	8013      	strh	r3, [r2, #0]
 80089f2:	e0a3      	b.n	8008b3c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80089f4:	687a      	ldr	r2, [r7, #4]
 80089f6:	683b      	ldr	r3, [r7, #0]
 80089f8:	781b      	ldrb	r3, [r3, #0]
 80089fa:	009b      	lsls	r3, r3, #2
 80089fc:	4413      	add	r3, r2
 80089fe:	881b      	ldrh	r3, [r3, #0]
 8008a00:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8008a02:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8008a04:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d01b      	beq.n	8008a44 <USB_DeactivateEndpoint+0x2d4>
 8008a0c:	687a      	ldr	r2, [r7, #4]
 8008a0e:	683b      	ldr	r3, [r7, #0]
 8008a10:	781b      	ldrb	r3, [r3, #0]
 8008a12:	009b      	lsls	r3, r3, #2
 8008a14:	4413      	add	r3, r2
 8008a16:	881b      	ldrh	r3, [r3, #0]
 8008a18:	b29b      	uxth	r3, r3
 8008a1a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008a1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008a22:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8008a24:	687a      	ldr	r2, [r7, #4]
 8008a26:	683b      	ldr	r3, [r7, #0]
 8008a28:	781b      	ldrb	r3, [r3, #0]
 8008a2a:	009b      	lsls	r3, r3, #2
 8008a2c:	441a      	add	r2, r3
 8008a2e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8008a30:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008a34:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008a38:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008a3c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008a40:	b29b      	uxth	r3, r3
 8008a42:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008a44:	687a      	ldr	r2, [r7, #4]
 8008a46:	683b      	ldr	r3, [r7, #0]
 8008a48:	781b      	ldrb	r3, [r3, #0]
 8008a4a:	009b      	lsls	r3, r3, #2
 8008a4c:	4413      	add	r3, r2
 8008a4e:	881b      	ldrh	r3, [r3, #0]
 8008a50:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8008a52:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8008a54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d01b      	beq.n	8008a94 <USB_DeactivateEndpoint+0x324>
 8008a5c:	687a      	ldr	r2, [r7, #4]
 8008a5e:	683b      	ldr	r3, [r7, #0]
 8008a60:	781b      	ldrb	r3, [r3, #0]
 8008a62:	009b      	lsls	r3, r3, #2
 8008a64:	4413      	add	r3, r2
 8008a66:	881b      	ldrh	r3, [r3, #0]
 8008a68:	b29b      	uxth	r3, r3
 8008a6a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008a6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008a72:	853b      	strh	r3, [r7, #40]	@ 0x28
 8008a74:	687a      	ldr	r2, [r7, #4]
 8008a76:	683b      	ldr	r3, [r7, #0]
 8008a78:	781b      	ldrb	r3, [r3, #0]
 8008a7a:	009b      	lsls	r3, r3, #2
 8008a7c:	441a      	add	r2, r3
 8008a7e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8008a80:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008a84:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008a88:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008a8c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008a90:	b29b      	uxth	r3, r3
 8008a92:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8008a94:	687a      	ldr	r2, [r7, #4]
 8008a96:	683b      	ldr	r3, [r7, #0]
 8008a98:	781b      	ldrb	r3, [r3, #0]
 8008a9a:	009b      	lsls	r3, r3, #2
 8008a9c:	4413      	add	r3, r2
 8008a9e:	881b      	ldrh	r3, [r3, #0]
 8008aa0:	b29b      	uxth	r3, r3
 8008aa2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008aa6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008aaa:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8008aac:	687a      	ldr	r2, [r7, #4]
 8008aae:	683b      	ldr	r3, [r7, #0]
 8008ab0:	781b      	ldrb	r3, [r3, #0]
 8008ab2:	009b      	lsls	r3, r3, #2
 8008ab4:	441a      	add	r2, r3
 8008ab6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008ab8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008abc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008ac0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008ac4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008ac8:	b29b      	uxth	r3, r3
 8008aca:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008acc:	687a      	ldr	r2, [r7, #4]
 8008ace:	683b      	ldr	r3, [r7, #0]
 8008ad0:	781b      	ldrb	r3, [r3, #0]
 8008ad2:	009b      	lsls	r3, r3, #2
 8008ad4:	4413      	add	r3, r2
 8008ad6:	881b      	ldrh	r3, [r3, #0]
 8008ad8:	b29b      	uxth	r3, r3
 8008ada:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008ade:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008ae2:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8008ae4:	687a      	ldr	r2, [r7, #4]
 8008ae6:	683b      	ldr	r3, [r7, #0]
 8008ae8:	781b      	ldrb	r3, [r3, #0]
 8008aea:	009b      	lsls	r3, r3, #2
 8008aec:	441a      	add	r2, r3
 8008aee:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008af0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008af4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008af8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008afc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008b00:	b29b      	uxth	r3, r3
 8008b02:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008b04:	687a      	ldr	r2, [r7, #4]
 8008b06:	683b      	ldr	r3, [r7, #0]
 8008b08:	781b      	ldrb	r3, [r3, #0]
 8008b0a:	009b      	lsls	r3, r3, #2
 8008b0c:	4413      	add	r3, r2
 8008b0e:	881b      	ldrh	r3, [r3, #0]
 8008b10:	b29b      	uxth	r3, r3
 8008b12:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008b16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008b1a:	847b      	strh	r3, [r7, #34]	@ 0x22
 8008b1c:	687a      	ldr	r2, [r7, #4]
 8008b1e:	683b      	ldr	r3, [r7, #0]
 8008b20:	781b      	ldrb	r3, [r3, #0]
 8008b22:	009b      	lsls	r3, r3, #2
 8008b24:	441a      	add	r2, r3
 8008b26:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8008b28:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008b2c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008b30:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008b34:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008b38:	b29b      	uxth	r3, r3
 8008b3a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8008b3c:	2300      	movs	r3, #0
}
 8008b3e:	4618      	mov	r0, r3
 8008b40:	3734      	adds	r7, #52	@ 0x34
 8008b42:	46bd      	mov	sp, r7
 8008b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b48:	4770      	bx	lr

08008b4a <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008b4a:	b580      	push	{r7, lr}
 8008b4c:	b0ac      	sub	sp, #176	@ 0xb0
 8008b4e:	af00      	add	r7, sp, #0
 8008b50:	6078      	str	r0, [r7, #4]
 8008b52:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008b54:	683b      	ldr	r3, [r7, #0]
 8008b56:	785b      	ldrb	r3, [r3, #1]
 8008b58:	2b01      	cmp	r3, #1
 8008b5a:	f040 84ca 	bne.w	80094f2 <USB_EPStartXfer+0x9a8>
  {
    /* Multi packet transfer */
    if (ep->xfer_len > ep->maxpacket)
 8008b5e:	683b      	ldr	r3, [r7, #0]
 8008b60:	699a      	ldr	r2, [r3, #24]
 8008b62:	683b      	ldr	r3, [r7, #0]
 8008b64:	691b      	ldr	r3, [r3, #16]
 8008b66:	429a      	cmp	r2, r3
 8008b68:	d904      	bls.n	8008b74 <USB_EPStartXfer+0x2a>
    {
      len = ep->maxpacket;
 8008b6a:	683b      	ldr	r3, [r7, #0]
 8008b6c:	691b      	ldr	r3, [r3, #16]
 8008b6e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008b72:	e003      	b.n	8008b7c <USB_EPStartXfer+0x32>
    }
    else
    {
      len = ep->xfer_len;
 8008b74:	683b      	ldr	r3, [r7, #0]
 8008b76:	699b      	ldr	r3, [r3, #24]
 8008b78:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8008b7c:	683b      	ldr	r3, [r7, #0]
 8008b7e:	7b1b      	ldrb	r3, [r3, #12]
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d122      	bne.n	8008bca <USB_EPStartXfer+0x80>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8008b84:	683b      	ldr	r3, [r7, #0]
 8008b86:	6959      	ldr	r1, [r3, #20]
 8008b88:	683b      	ldr	r3, [r7, #0]
 8008b8a:	88da      	ldrh	r2, [r3, #6]
 8008b8c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008b90:	b29b      	uxth	r3, r3
 8008b92:	6878      	ldr	r0, [r7, #4]
 8008b94:	f000 febd 	bl	8009912 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	613b      	str	r3, [r7, #16]
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008ba2:	b29b      	uxth	r3, r3
 8008ba4:	461a      	mov	r2, r3
 8008ba6:	693b      	ldr	r3, [r7, #16]
 8008ba8:	4413      	add	r3, r2
 8008baa:	613b      	str	r3, [r7, #16]
 8008bac:	683b      	ldr	r3, [r7, #0]
 8008bae:	781b      	ldrb	r3, [r3, #0]
 8008bb0:	00da      	lsls	r2, r3, #3
 8008bb2:	693b      	ldr	r3, [r7, #16]
 8008bb4:	4413      	add	r3, r2
 8008bb6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008bba:	60fb      	str	r3, [r7, #12]
 8008bbc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008bc0:	b29a      	uxth	r2, r3
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	801a      	strh	r2, [r3, #0]
 8008bc6:	f000 bc6f 	b.w	80094a8 <USB_EPStartXfer+0x95e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8008bca:	683b      	ldr	r3, [r7, #0]
 8008bcc:	78db      	ldrb	r3, [r3, #3]
 8008bce:	2b02      	cmp	r3, #2
 8008bd0:	f040 831e 	bne.w	8009210 <USB_EPStartXfer+0x6c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8008bd4:	683b      	ldr	r3, [r7, #0]
 8008bd6:	6a1a      	ldr	r2, [r3, #32]
 8008bd8:	683b      	ldr	r3, [r7, #0]
 8008bda:	691b      	ldr	r3, [r3, #16]
 8008bdc:	429a      	cmp	r2, r3
 8008bde:	f240 82cf 	bls.w	8009180 <USB_EPStartXfer+0x636>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8008be2:	687a      	ldr	r2, [r7, #4]
 8008be4:	683b      	ldr	r3, [r7, #0]
 8008be6:	781b      	ldrb	r3, [r3, #0]
 8008be8:	009b      	lsls	r3, r3, #2
 8008bea:	4413      	add	r3, r2
 8008bec:	881b      	ldrh	r3, [r3, #0]
 8008bee:	b29b      	uxth	r3, r3
 8008bf0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008bf4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008bf8:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8008bfc:	687a      	ldr	r2, [r7, #4]
 8008bfe:	683b      	ldr	r3, [r7, #0]
 8008c00:	781b      	ldrb	r3, [r3, #0]
 8008c02:	009b      	lsls	r3, r3, #2
 8008c04:	441a      	add	r2, r3
 8008c06:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8008c0a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008c0e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008c12:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8008c16:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008c1a:	b29b      	uxth	r3, r3
 8008c1c:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8008c1e:	683b      	ldr	r3, [r7, #0]
 8008c20:	6a1a      	ldr	r2, [r3, #32]
 8008c22:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008c26:	1ad2      	subs	r2, r2, r3
 8008c28:	683b      	ldr	r3, [r7, #0]
 8008c2a:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008c2c:	687a      	ldr	r2, [r7, #4]
 8008c2e:	683b      	ldr	r3, [r7, #0]
 8008c30:	781b      	ldrb	r3, [r3, #0]
 8008c32:	009b      	lsls	r3, r3, #2
 8008c34:	4413      	add	r3, r2
 8008c36:	881b      	ldrh	r3, [r3, #0]
 8008c38:	b29b      	uxth	r3, r3
 8008c3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	f000 814f 	beq.w	8008ee2 <USB_EPStartXfer+0x398>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	633b      	str	r3, [r7, #48]	@ 0x30
 8008c48:	683b      	ldr	r3, [r7, #0]
 8008c4a:	785b      	ldrb	r3, [r3, #1]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d16b      	bne.n	8008d28 <USB_EPStartXfer+0x1de>
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008c5a:	b29b      	uxth	r3, r3
 8008c5c:	461a      	mov	r2, r3
 8008c5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c60:	4413      	add	r3, r2
 8008c62:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008c64:	683b      	ldr	r3, [r7, #0]
 8008c66:	781b      	ldrb	r3, [r3, #0]
 8008c68:	00da      	lsls	r2, r3, #3
 8008c6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c6c:	4413      	add	r3, r2
 8008c6e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008c72:	627b      	str	r3, [r7, #36]	@ 0x24
 8008c74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c76:	881b      	ldrh	r3, [r3, #0]
 8008c78:	b29b      	uxth	r3, r3
 8008c7a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008c7e:	b29a      	uxth	r2, r3
 8008c80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c82:	801a      	strh	r2, [r3, #0]
 8008c84:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d10a      	bne.n	8008ca2 <USB_EPStartXfer+0x158>
 8008c8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c8e:	881b      	ldrh	r3, [r3, #0]
 8008c90:	b29b      	uxth	r3, r3
 8008c92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008c96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008c9a:	b29a      	uxth	r2, r3
 8008c9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c9e:	801a      	strh	r2, [r3, #0]
 8008ca0:	e05b      	b.n	8008d5a <USB_EPStartXfer+0x210>
 8008ca2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008ca6:	2b3e      	cmp	r3, #62	@ 0x3e
 8008ca8:	d81c      	bhi.n	8008ce4 <USB_EPStartXfer+0x19a>
 8008caa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008cae:	085b      	lsrs	r3, r3, #1
 8008cb0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008cb4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008cb8:	f003 0301 	and.w	r3, r3, #1
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d004      	beq.n	8008cca <USB_EPStartXfer+0x180>
 8008cc0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008cc4:	3301      	adds	r3, #1
 8008cc6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ccc:	881b      	ldrh	r3, [r3, #0]
 8008cce:	b29a      	uxth	r2, r3
 8008cd0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008cd4:	b29b      	uxth	r3, r3
 8008cd6:	029b      	lsls	r3, r3, #10
 8008cd8:	b29b      	uxth	r3, r3
 8008cda:	4313      	orrs	r3, r2
 8008cdc:	b29a      	uxth	r2, r3
 8008cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ce0:	801a      	strh	r2, [r3, #0]
 8008ce2:	e03a      	b.n	8008d5a <USB_EPStartXfer+0x210>
 8008ce4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008ce8:	095b      	lsrs	r3, r3, #5
 8008cea:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008cee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008cf2:	f003 031f 	and.w	r3, r3, #31
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d104      	bne.n	8008d04 <USB_EPStartXfer+0x1ba>
 8008cfa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008cfe:	3b01      	subs	r3, #1
 8008d00:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008d04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d06:	881b      	ldrh	r3, [r3, #0]
 8008d08:	b29a      	uxth	r2, r3
 8008d0a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008d0e:	b29b      	uxth	r3, r3
 8008d10:	029b      	lsls	r3, r3, #10
 8008d12:	b29b      	uxth	r3, r3
 8008d14:	4313      	orrs	r3, r2
 8008d16:	b29b      	uxth	r3, r3
 8008d18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008d1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008d20:	b29a      	uxth	r2, r3
 8008d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d24:	801a      	strh	r2, [r3, #0]
 8008d26:	e018      	b.n	8008d5a <USB_EPStartXfer+0x210>
 8008d28:	683b      	ldr	r3, [r7, #0]
 8008d2a:	785b      	ldrb	r3, [r3, #1]
 8008d2c:	2b01      	cmp	r3, #1
 8008d2e:	d114      	bne.n	8008d5a <USB_EPStartXfer+0x210>
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008d36:	b29b      	uxth	r3, r3
 8008d38:	461a      	mov	r2, r3
 8008d3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d3c:	4413      	add	r3, r2
 8008d3e:	633b      	str	r3, [r7, #48]	@ 0x30
 8008d40:	683b      	ldr	r3, [r7, #0]
 8008d42:	781b      	ldrb	r3, [r3, #0]
 8008d44:	00da      	lsls	r2, r3, #3
 8008d46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d48:	4413      	add	r3, r2
 8008d4a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008d4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008d50:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008d54:	b29a      	uxth	r2, r3
 8008d56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d58:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008d5a:	683b      	ldr	r3, [r7, #0]
 8008d5c:	895b      	ldrh	r3, [r3, #10]
 8008d5e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008d62:	683b      	ldr	r3, [r7, #0]
 8008d64:	6959      	ldr	r1, [r3, #20]
 8008d66:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008d6a:	b29b      	uxth	r3, r3
 8008d6c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008d70:	6878      	ldr	r0, [r7, #4]
 8008d72:	f000 fdce 	bl	8009912 <USB_WritePMA>
            ep->xfer_buff += len;
 8008d76:	683b      	ldr	r3, [r7, #0]
 8008d78:	695a      	ldr	r2, [r3, #20]
 8008d7a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008d7e:	441a      	add	r2, r3
 8008d80:	683b      	ldr	r3, [r7, #0]
 8008d82:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008d84:	683b      	ldr	r3, [r7, #0]
 8008d86:	6a1a      	ldr	r2, [r3, #32]
 8008d88:	683b      	ldr	r3, [r7, #0]
 8008d8a:	691b      	ldr	r3, [r3, #16]
 8008d8c:	429a      	cmp	r2, r3
 8008d8e:	d907      	bls.n	8008da0 <USB_EPStartXfer+0x256>
            {
              ep->xfer_len_db -= len;
 8008d90:	683b      	ldr	r3, [r7, #0]
 8008d92:	6a1a      	ldr	r2, [r3, #32]
 8008d94:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008d98:	1ad2      	subs	r2, r2, r3
 8008d9a:	683b      	ldr	r3, [r7, #0]
 8008d9c:	621a      	str	r2, [r3, #32]
 8008d9e:	e006      	b.n	8008dae <USB_EPStartXfer+0x264>
            }
            else
            {
              len = ep->xfer_len_db;
 8008da0:	683b      	ldr	r3, [r7, #0]
 8008da2:	6a1b      	ldr	r3, [r3, #32]
 8008da4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 8008da8:	683b      	ldr	r3, [r7, #0]
 8008daa:	2200      	movs	r2, #0
 8008dac:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008dae:	683b      	ldr	r3, [r7, #0]
 8008db0:	785b      	ldrb	r3, [r3, #1]
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d16b      	bne.n	8008e8e <USB_EPStartXfer+0x344>
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	61bb      	str	r3, [r7, #24]
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008dc0:	b29b      	uxth	r3, r3
 8008dc2:	461a      	mov	r2, r3
 8008dc4:	69bb      	ldr	r3, [r7, #24]
 8008dc6:	4413      	add	r3, r2
 8008dc8:	61bb      	str	r3, [r7, #24]
 8008dca:	683b      	ldr	r3, [r7, #0]
 8008dcc:	781b      	ldrb	r3, [r3, #0]
 8008dce:	00da      	lsls	r2, r3, #3
 8008dd0:	69bb      	ldr	r3, [r7, #24]
 8008dd2:	4413      	add	r3, r2
 8008dd4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008dd8:	617b      	str	r3, [r7, #20]
 8008dda:	697b      	ldr	r3, [r7, #20]
 8008ddc:	881b      	ldrh	r3, [r3, #0]
 8008dde:	b29b      	uxth	r3, r3
 8008de0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008de4:	b29a      	uxth	r2, r3
 8008de6:	697b      	ldr	r3, [r7, #20]
 8008de8:	801a      	strh	r2, [r3, #0]
 8008dea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d10a      	bne.n	8008e08 <USB_EPStartXfer+0x2be>
 8008df2:	697b      	ldr	r3, [r7, #20]
 8008df4:	881b      	ldrh	r3, [r3, #0]
 8008df6:	b29b      	uxth	r3, r3
 8008df8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008dfc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008e00:	b29a      	uxth	r2, r3
 8008e02:	697b      	ldr	r3, [r7, #20]
 8008e04:	801a      	strh	r2, [r3, #0]
 8008e06:	e05d      	b.n	8008ec4 <USB_EPStartXfer+0x37a>
 8008e08:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008e0c:	2b3e      	cmp	r3, #62	@ 0x3e
 8008e0e:	d81c      	bhi.n	8008e4a <USB_EPStartXfer+0x300>
 8008e10:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008e14:	085b      	lsrs	r3, r3, #1
 8008e16:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008e1a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008e1e:	f003 0301 	and.w	r3, r3, #1
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d004      	beq.n	8008e30 <USB_EPStartXfer+0x2e6>
 8008e26:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8008e2a:	3301      	adds	r3, #1
 8008e2c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008e30:	697b      	ldr	r3, [r7, #20]
 8008e32:	881b      	ldrh	r3, [r3, #0]
 8008e34:	b29a      	uxth	r2, r3
 8008e36:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8008e3a:	b29b      	uxth	r3, r3
 8008e3c:	029b      	lsls	r3, r3, #10
 8008e3e:	b29b      	uxth	r3, r3
 8008e40:	4313      	orrs	r3, r2
 8008e42:	b29a      	uxth	r2, r3
 8008e44:	697b      	ldr	r3, [r7, #20]
 8008e46:	801a      	strh	r2, [r3, #0]
 8008e48:	e03c      	b.n	8008ec4 <USB_EPStartXfer+0x37a>
 8008e4a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008e4e:	095b      	lsrs	r3, r3, #5
 8008e50:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008e54:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008e58:	f003 031f 	and.w	r3, r3, #31
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d104      	bne.n	8008e6a <USB_EPStartXfer+0x320>
 8008e60:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8008e64:	3b01      	subs	r3, #1
 8008e66:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008e6a:	697b      	ldr	r3, [r7, #20]
 8008e6c:	881b      	ldrh	r3, [r3, #0]
 8008e6e:	b29a      	uxth	r2, r3
 8008e70:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8008e74:	b29b      	uxth	r3, r3
 8008e76:	029b      	lsls	r3, r3, #10
 8008e78:	b29b      	uxth	r3, r3
 8008e7a:	4313      	orrs	r3, r2
 8008e7c:	b29b      	uxth	r3, r3
 8008e7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008e82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008e86:	b29a      	uxth	r2, r3
 8008e88:	697b      	ldr	r3, [r7, #20]
 8008e8a:	801a      	strh	r2, [r3, #0]
 8008e8c:	e01a      	b.n	8008ec4 <USB_EPStartXfer+0x37a>
 8008e8e:	683b      	ldr	r3, [r7, #0]
 8008e90:	785b      	ldrb	r3, [r3, #1]
 8008e92:	2b01      	cmp	r3, #1
 8008e94:	d116      	bne.n	8008ec4 <USB_EPStartXfer+0x37a>
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	623b      	str	r3, [r7, #32]
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008ea0:	b29b      	uxth	r3, r3
 8008ea2:	461a      	mov	r2, r3
 8008ea4:	6a3b      	ldr	r3, [r7, #32]
 8008ea6:	4413      	add	r3, r2
 8008ea8:	623b      	str	r3, [r7, #32]
 8008eaa:	683b      	ldr	r3, [r7, #0]
 8008eac:	781b      	ldrb	r3, [r3, #0]
 8008eae:	00da      	lsls	r2, r3, #3
 8008eb0:	6a3b      	ldr	r3, [r7, #32]
 8008eb2:	4413      	add	r3, r2
 8008eb4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008eb8:	61fb      	str	r3, [r7, #28]
 8008eba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008ebe:	b29a      	uxth	r2, r3
 8008ec0:	69fb      	ldr	r3, [r7, #28]
 8008ec2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008ec4:	683b      	ldr	r3, [r7, #0]
 8008ec6:	891b      	ldrh	r3, [r3, #8]
 8008ec8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008ecc:	683b      	ldr	r3, [r7, #0]
 8008ece:	6959      	ldr	r1, [r3, #20]
 8008ed0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008ed4:	b29b      	uxth	r3, r3
 8008ed6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008eda:	6878      	ldr	r0, [r7, #4]
 8008edc:	f000 fd19 	bl	8009912 <USB_WritePMA>
 8008ee0:	e2e2      	b.n	80094a8 <USB_EPStartXfer+0x95e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008ee2:	683b      	ldr	r3, [r7, #0]
 8008ee4:	785b      	ldrb	r3, [r3, #1]
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d16b      	bne.n	8008fc2 <USB_EPStartXfer+0x478>
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008ef4:	b29b      	uxth	r3, r3
 8008ef6:	461a      	mov	r2, r3
 8008ef8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008efa:	4413      	add	r3, r2
 8008efc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008efe:	683b      	ldr	r3, [r7, #0]
 8008f00:	781b      	ldrb	r3, [r3, #0]
 8008f02:	00da      	lsls	r2, r3, #3
 8008f04:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008f06:	4413      	add	r3, r2
 8008f08:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008f0c:	647b      	str	r3, [r7, #68]	@ 0x44
 8008f0e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008f10:	881b      	ldrh	r3, [r3, #0]
 8008f12:	b29b      	uxth	r3, r3
 8008f14:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008f18:	b29a      	uxth	r2, r3
 8008f1a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008f1c:	801a      	strh	r2, [r3, #0]
 8008f1e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d10a      	bne.n	8008f3c <USB_EPStartXfer+0x3f2>
 8008f26:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008f28:	881b      	ldrh	r3, [r3, #0]
 8008f2a:	b29b      	uxth	r3, r3
 8008f2c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008f30:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008f34:	b29a      	uxth	r2, r3
 8008f36:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008f38:	801a      	strh	r2, [r3, #0]
 8008f3a:	e05d      	b.n	8008ff8 <USB_EPStartXfer+0x4ae>
 8008f3c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008f40:	2b3e      	cmp	r3, #62	@ 0x3e
 8008f42:	d81c      	bhi.n	8008f7e <USB_EPStartXfer+0x434>
 8008f44:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008f48:	085b      	lsrs	r3, r3, #1
 8008f4a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008f4e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008f52:	f003 0301 	and.w	r3, r3, #1
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d004      	beq.n	8008f64 <USB_EPStartXfer+0x41a>
 8008f5a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008f5e:	3301      	adds	r3, #1
 8008f60:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008f64:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008f66:	881b      	ldrh	r3, [r3, #0]
 8008f68:	b29a      	uxth	r2, r3
 8008f6a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008f6e:	b29b      	uxth	r3, r3
 8008f70:	029b      	lsls	r3, r3, #10
 8008f72:	b29b      	uxth	r3, r3
 8008f74:	4313      	orrs	r3, r2
 8008f76:	b29a      	uxth	r2, r3
 8008f78:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008f7a:	801a      	strh	r2, [r3, #0]
 8008f7c:	e03c      	b.n	8008ff8 <USB_EPStartXfer+0x4ae>
 8008f7e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008f82:	095b      	lsrs	r3, r3, #5
 8008f84:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008f88:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008f8c:	f003 031f 	and.w	r3, r3, #31
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d104      	bne.n	8008f9e <USB_EPStartXfer+0x454>
 8008f94:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008f98:	3b01      	subs	r3, #1
 8008f9a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008f9e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008fa0:	881b      	ldrh	r3, [r3, #0]
 8008fa2:	b29a      	uxth	r2, r3
 8008fa4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008fa8:	b29b      	uxth	r3, r3
 8008faa:	029b      	lsls	r3, r3, #10
 8008fac:	b29b      	uxth	r3, r3
 8008fae:	4313      	orrs	r3, r2
 8008fb0:	b29b      	uxth	r3, r3
 8008fb2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008fb6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008fba:	b29a      	uxth	r2, r3
 8008fbc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008fbe:	801a      	strh	r2, [r3, #0]
 8008fc0:	e01a      	b.n	8008ff8 <USB_EPStartXfer+0x4ae>
 8008fc2:	683b      	ldr	r3, [r7, #0]
 8008fc4:	785b      	ldrb	r3, [r3, #1]
 8008fc6:	2b01      	cmp	r3, #1
 8008fc8:	d116      	bne.n	8008ff8 <USB_EPStartXfer+0x4ae>
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	653b      	str	r3, [r7, #80]	@ 0x50
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008fd4:	b29b      	uxth	r3, r3
 8008fd6:	461a      	mov	r2, r3
 8008fd8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008fda:	4413      	add	r3, r2
 8008fdc:	653b      	str	r3, [r7, #80]	@ 0x50
 8008fde:	683b      	ldr	r3, [r7, #0]
 8008fe0:	781b      	ldrb	r3, [r3, #0]
 8008fe2:	00da      	lsls	r2, r3, #3
 8008fe4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008fe6:	4413      	add	r3, r2
 8008fe8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008fec:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008fee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008ff2:	b29a      	uxth	r2, r3
 8008ff4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008ff6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008ff8:	683b      	ldr	r3, [r7, #0]
 8008ffa:	891b      	ldrh	r3, [r3, #8]
 8008ffc:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009000:	683b      	ldr	r3, [r7, #0]
 8009002:	6959      	ldr	r1, [r3, #20]
 8009004:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009008:	b29b      	uxth	r3, r3
 800900a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800900e:	6878      	ldr	r0, [r7, #4]
 8009010:	f000 fc7f 	bl	8009912 <USB_WritePMA>
            ep->xfer_buff += len;
 8009014:	683b      	ldr	r3, [r7, #0]
 8009016:	695a      	ldr	r2, [r3, #20]
 8009018:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800901c:	441a      	add	r2, r3
 800901e:	683b      	ldr	r3, [r7, #0]
 8009020:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8009022:	683b      	ldr	r3, [r7, #0]
 8009024:	6a1a      	ldr	r2, [r3, #32]
 8009026:	683b      	ldr	r3, [r7, #0]
 8009028:	691b      	ldr	r3, [r3, #16]
 800902a:	429a      	cmp	r2, r3
 800902c:	d907      	bls.n	800903e <USB_EPStartXfer+0x4f4>
            {
              ep->xfer_len_db -= len;
 800902e:	683b      	ldr	r3, [r7, #0]
 8009030:	6a1a      	ldr	r2, [r3, #32]
 8009032:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009036:	1ad2      	subs	r2, r2, r3
 8009038:	683b      	ldr	r3, [r7, #0]
 800903a:	621a      	str	r2, [r3, #32]
 800903c:	e006      	b.n	800904c <USB_EPStartXfer+0x502>
            }
            else
            {
              len = ep->xfer_len_db;
 800903e:	683b      	ldr	r3, [r7, #0]
 8009040:	6a1b      	ldr	r3, [r3, #32]
 8009042:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 8009046:	683b      	ldr	r3, [r7, #0]
 8009048:	2200      	movs	r2, #0
 800904a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	643b      	str	r3, [r7, #64]	@ 0x40
 8009050:	683b      	ldr	r3, [r7, #0]
 8009052:	785b      	ldrb	r3, [r3, #1]
 8009054:	2b00      	cmp	r3, #0
 8009056:	d16b      	bne.n	8009130 <USB_EPStartXfer+0x5e6>
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009062:	b29b      	uxth	r3, r3
 8009064:	461a      	mov	r2, r3
 8009066:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009068:	4413      	add	r3, r2
 800906a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800906c:	683b      	ldr	r3, [r7, #0]
 800906e:	781b      	ldrb	r3, [r3, #0]
 8009070:	00da      	lsls	r2, r3, #3
 8009072:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009074:	4413      	add	r3, r2
 8009076:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800907a:	637b      	str	r3, [r7, #52]	@ 0x34
 800907c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800907e:	881b      	ldrh	r3, [r3, #0]
 8009080:	b29b      	uxth	r3, r3
 8009082:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009086:	b29a      	uxth	r2, r3
 8009088:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800908a:	801a      	strh	r2, [r3, #0]
 800908c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009090:	2b00      	cmp	r3, #0
 8009092:	d10a      	bne.n	80090aa <USB_EPStartXfer+0x560>
 8009094:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009096:	881b      	ldrh	r3, [r3, #0]
 8009098:	b29b      	uxth	r3, r3
 800909a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800909e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80090a2:	b29a      	uxth	r2, r3
 80090a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80090a6:	801a      	strh	r2, [r3, #0]
 80090a8:	e05b      	b.n	8009162 <USB_EPStartXfer+0x618>
 80090aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80090ae:	2b3e      	cmp	r3, #62	@ 0x3e
 80090b0:	d81c      	bhi.n	80090ec <USB_EPStartXfer+0x5a2>
 80090b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80090b6:	085b      	lsrs	r3, r3, #1
 80090b8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80090bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80090c0:	f003 0301 	and.w	r3, r3, #1
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d004      	beq.n	80090d2 <USB_EPStartXfer+0x588>
 80090c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80090cc:	3301      	adds	r3, #1
 80090ce:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80090d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80090d4:	881b      	ldrh	r3, [r3, #0]
 80090d6:	b29a      	uxth	r2, r3
 80090d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80090dc:	b29b      	uxth	r3, r3
 80090de:	029b      	lsls	r3, r3, #10
 80090e0:	b29b      	uxth	r3, r3
 80090e2:	4313      	orrs	r3, r2
 80090e4:	b29a      	uxth	r2, r3
 80090e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80090e8:	801a      	strh	r2, [r3, #0]
 80090ea:	e03a      	b.n	8009162 <USB_EPStartXfer+0x618>
 80090ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80090f0:	095b      	lsrs	r3, r3, #5
 80090f2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80090f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80090fa:	f003 031f 	and.w	r3, r3, #31
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d104      	bne.n	800910c <USB_EPStartXfer+0x5c2>
 8009102:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009106:	3b01      	subs	r3, #1
 8009108:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800910c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800910e:	881b      	ldrh	r3, [r3, #0]
 8009110:	b29a      	uxth	r2, r3
 8009112:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009116:	b29b      	uxth	r3, r3
 8009118:	029b      	lsls	r3, r3, #10
 800911a:	b29b      	uxth	r3, r3
 800911c:	4313      	orrs	r3, r2
 800911e:	b29b      	uxth	r3, r3
 8009120:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009124:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009128:	b29a      	uxth	r2, r3
 800912a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800912c:	801a      	strh	r2, [r3, #0]
 800912e:	e018      	b.n	8009162 <USB_EPStartXfer+0x618>
 8009130:	683b      	ldr	r3, [r7, #0]
 8009132:	785b      	ldrb	r3, [r3, #1]
 8009134:	2b01      	cmp	r3, #1
 8009136:	d114      	bne.n	8009162 <USB_EPStartXfer+0x618>
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800913e:	b29b      	uxth	r3, r3
 8009140:	461a      	mov	r2, r3
 8009142:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009144:	4413      	add	r3, r2
 8009146:	643b      	str	r3, [r7, #64]	@ 0x40
 8009148:	683b      	ldr	r3, [r7, #0]
 800914a:	781b      	ldrb	r3, [r3, #0]
 800914c:	00da      	lsls	r2, r3, #3
 800914e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009150:	4413      	add	r3, r2
 8009152:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009156:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009158:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800915c:	b29a      	uxth	r2, r3
 800915e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009160:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8009162:	683b      	ldr	r3, [r7, #0]
 8009164:	895b      	ldrh	r3, [r3, #10]
 8009166:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800916a:	683b      	ldr	r3, [r7, #0]
 800916c:	6959      	ldr	r1, [r3, #20]
 800916e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009172:	b29b      	uxth	r3, r3
 8009174:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009178:	6878      	ldr	r0, [r7, #4]
 800917a:	f000 fbca 	bl	8009912 <USB_WritePMA>
 800917e:	e193      	b.n	80094a8 <USB_EPStartXfer+0x95e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8009180:	683b      	ldr	r3, [r7, #0]
 8009182:	6a1b      	ldr	r3, [r3, #32]
 8009184:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8009188:	687a      	ldr	r2, [r7, #4]
 800918a:	683b      	ldr	r3, [r7, #0]
 800918c:	781b      	ldrb	r3, [r3, #0]
 800918e:	009b      	lsls	r3, r3, #2
 8009190:	4413      	add	r3, r2
 8009192:	881b      	ldrh	r3, [r3, #0]
 8009194:	b29b      	uxth	r3, r3
 8009196:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800919a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800919e:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80091a2:	687a      	ldr	r2, [r7, #4]
 80091a4:	683b      	ldr	r3, [r7, #0]
 80091a6:	781b      	ldrb	r3, [r3, #0]
 80091a8:	009b      	lsls	r3, r3, #2
 80091aa:	441a      	add	r2, r3
 80091ac:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80091b0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80091b4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80091b8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80091bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80091c0:	b29b      	uxth	r3, r3
 80091c2:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80091ce:	b29b      	uxth	r3, r3
 80091d0:	461a      	mov	r2, r3
 80091d2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80091d4:	4413      	add	r3, r2
 80091d6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80091d8:	683b      	ldr	r3, [r7, #0]
 80091da:	781b      	ldrb	r3, [r3, #0]
 80091dc:	00da      	lsls	r2, r3, #3
 80091de:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80091e0:	4413      	add	r3, r2
 80091e2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80091e6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80091e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80091ec:	b29a      	uxth	r2, r3
 80091ee:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80091f0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80091f2:	683b      	ldr	r3, [r7, #0]
 80091f4:	891b      	ldrh	r3, [r3, #8]
 80091f6:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80091fa:	683b      	ldr	r3, [r7, #0]
 80091fc:	6959      	ldr	r1, [r3, #20]
 80091fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009202:	b29b      	uxth	r3, r3
 8009204:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009208:	6878      	ldr	r0, [r7, #4]
 800920a:	f000 fb82 	bl	8009912 <USB_WritePMA>
 800920e:	e14b      	b.n	80094a8 <USB_EPStartXfer+0x95e>
        }
      }
      else /* Manage isochronous double buffer IN mode */
      {
        /* Each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8009210:	683b      	ldr	r3, [r7, #0]
 8009212:	6a1a      	ldr	r2, [r3, #32]
 8009214:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009218:	1ad2      	subs	r2, r2, r3
 800921a:	683b      	ldr	r3, [r7, #0]
 800921c:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800921e:	687a      	ldr	r2, [r7, #4]
 8009220:	683b      	ldr	r3, [r7, #0]
 8009222:	781b      	ldrb	r3, [r3, #0]
 8009224:	009b      	lsls	r3, r3, #2
 8009226:	4413      	add	r3, r2
 8009228:	881b      	ldrh	r3, [r3, #0]
 800922a:	b29b      	uxth	r3, r3
 800922c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009230:	2b00      	cmp	r3, #0
 8009232:	f000 809a 	beq.w	800936a <USB_EPStartXfer+0x820>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	673b      	str	r3, [r7, #112]	@ 0x70
 800923a:	683b      	ldr	r3, [r7, #0]
 800923c:	785b      	ldrb	r3, [r3, #1]
 800923e:	2b00      	cmp	r3, #0
 8009240:	d16b      	bne.n	800931a <USB_EPStartXfer+0x7d0>
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800924c:	b29b      	uxth	r3, r3
 800924e:	461a      	mov	r2, r3
 8009250:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009252:	4413      	add	r3, r2
 8009254:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009256:	683b      	ldr	r3, [r7, #0]
 8009258:	781b      	ldrb	r3, [r3, #0]
 800925a:	00da      	lsls	r2, r3, #3
 800925c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800925e:	4413      	add	r3, r2
 8009260:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009264:	667b      	str	r3, [r7, #100]	@ 0x64
 8009266:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009268:	881b      	ldrh	r3, [r3, #0]
 800926a:	b29b      	uxth	r3, r3
 800926c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009270:	b29a      	uxth	r2, r3
 8009272:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009274:	801a      	strh	r2, [r3, #0]
 8009276:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800927a:	2b00      	cmp	r3, #0
 800927c:	d10a      	bne.n	8009294 <USB_EPStartXfer+0x74a>
 800927e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009280:	881b      	ldrh	r3, [r3, #0]
 8009282:	b29b      	uxth	r3, r3
 8009284:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009288:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800928c:	b29a      	uxth	r2, r3
 800928e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009290:	801a      	strh	r2, [r3, #0]
 8009292:	e05b      	b.n	800934c <USB_EPStartXfer+0x802>
 8009294:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009298:	2b3e      	cmp	r3, #62	@ 0x3e
 800929a:	d81c      	bhi.n	80092d6 <USB_EPStartXfer+0x78c>
 800929c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80092a0:	085b      	lsrs	r3, r3, #1
 80092a2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80092a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80092aa:	f003 0301 	and.w	r3, r3, #1
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d004      	beq.n	80092bc <USB_EPStartXfer+0x772>
 80092b2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80092b6:	3301      	adds	r3, #1
 80092b8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80092bc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80092be:	881b      	ldrh	r3, [r3, #0]
 80092c0:	b29a      	uxth	r2, r3
 80092c2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80092c6:	b29b      	uxth	r3, r3
 80092c8:	029b      	lsls	r3, r3, #10
 80092ca:	b29b      	uxth	r3, r3
 80092cc:	4313      	orrs	r3, r2
 80092ce:	b29a      	uxth	r2, r3
 80092d0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80092d2:	801a      	strh	r2, [r3, #0]
 80092d4:	e03a      	b.n	800934c <USB_EPStartXfer+0x802>
 80092d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80092da:	095b      	lsrs	r3, r3, #5
 80092dc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80092e0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80092e4:	f003 031f 	and.w	r3, r3, #31
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d104      	bne.n	80092f6 <USB_EPStartXfer+0x7ac>
 80092ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80092f0:	3b01      	subs	r3, #1
 80092f2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80092f6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80092f8:	881b      	ldrh	r3, [r3, #0]
 80092fa:	b29a      	uxth	r2, r3
 80092fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009300:	b29b      	uxth	r3, r3
 8009302:	029b      	lsls	r3, r3, #10
 8009304:	b29b      	uxth	r3, r3
 8009306:	4313      	orrs	r3, r2
 8009308:	b29b      	uxth	r3, r3
 800930a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800930e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009312:	b29a      	uxth	r2, r3
 8009314:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009316:	801a      	strh	r2, [r3, #0]
 8009318:	e018      	b.n	800934c <USB_EPStartXfer+0x802>
 800931a:	683b      	ldr	r3, [r7, #0]
 800931c:	785b      	ldrb	r3, [r3, #1]
 800931e:	2b01      	cmp	r3, #1
 8009320:	d114      	bne.n	800934c <USB_EPStartXfer+0x802>
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009328:	b29b      	uxth	r3, r3
 800932a:	461a      	mov	r2, r3
 800932c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800932e:	4413      	add	r3, r2
 8009330:	673b      	str	r3, [r7, #112]	@ 0x70
 8009332:	683b      	ldr	r3, [r7, #0]
 8009334:	781b      	ldrb	r3, [r3, #0]
 8009336:	00da      	lsls	r2, r3, #3
 8009338:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800933a:	4413      	add	r3, r2
 800933c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009340:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009342:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009346:	b29a      	uxth	r2, r3
 8009348:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800934a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800934c:	683b      	ldr	r3, [r7, #0]
 800934e:	895b      	ldrh	r3, [r3, #10]
 8009350:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009354:	683b      	ldr	r3, [r7, #0]
 8009356:	6959      	ldr	r1, [r3, #20]
 8009358:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800935c:	b29b      	uxth	r3, r3
 800935e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009362:	6878      	ldr	r0, [r7, #4]
 8009364:	f000 fad5 	bl	8009912 <USB_WritePMA>
 8009368:	e09e      	b.n	80094a8 <USB_EPStartXfer+0x95e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800936a:	683b      	ldr	r3, [r7, #0]
 800936c:	785b      	ldrb	r3, [r3, #1]
 800936e:	2b00      	cmp	r3, #0
 8009370:	d16b      	bne.n	800944a <USB_EPStartXfer+0x900>
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800937c:	b29b      	uxth	r3, r3
 800937e:	461a      	mov	r2, r3
 8009380:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009382:	4413      	add	r3, r2
 8009384:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009386:	683b      	ldr	r3, [r7, #0]
 8009388:	781b      	ldrb	r3, [r3, #0]
 800938a:	00da      	lsls	r2, r3, #3
 800938c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800938e:	4413      	add	r3, r2
 8009390:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009394:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009396:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009398:	881b      	ldrh	r3, [r3, #0]
 800939a:	b29b      	uxth	r3, r3
 800939c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80093a0:	b29a      	uxth	r2, r3
 80093a2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80093a4:	801a      	strh	r2, [r3, #0]
 80093a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d10a      	bne.n	80093c4 <USB_EPStartXfer+0x87a>
 80093ae:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80093b0:	881b      	ldrh	r3, [r3, #0]
 80093b2:	b29b      	uxth	r3, r3
 80093b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80093b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80093bc:	b29a      	uxth	r2, r3
 80093be:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80093c0:	801a      	strh	r2, [r3, #0]
 80093c2:	e063      	b.n	800948c <USB_EPStartXfer+0x942>
 80093c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80093c8:	2b3e      	cmp	r3, #62	@ 0x3e
 80093ca:	d81c      	bhi.n	8009406 <USB_EPStartXfer+0x8bc>
 80093cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80093d0:	085b      	lsrs	r3, r3, #1
 80093d2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80093d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80093da:	f003 0301 	and.w	r3, r3, #1
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d004      	beq.n	80093ec <USB_EPStartXfer+0x8a2>
 80093e2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80093e6:	3301      	adds	r3, #1
 80093e8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80093ec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80093ee:	881b      	ldrh	r3, [r3, #0]
 80093f0:	b29a      	uxth	r2, r3
 80093f2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80093f6:	b29b      	uxth	r3, r3
 80093f8:	029b      	lsls	r3, r3, #10
 80093fa:	b29b      	uxth	r3, r3
 80093fc:	4313      	orrs	r3, r2
 80093fe:	b29a      	uxth	r2, r3
 8009400:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009402:	801a      	strh	r2, [r3, #0]
 8009404:	e042      	b.n	800948c <USB_EPStartXfer+0x942>
 8009406:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800940a:	095b      	lsrs	r3, r3, #5
 800940c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009410:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009414:	f003 031f 	and.w	r3, r3, #31
 8009418:	2b00      	cmp	r3, #0
 800941a:	d104      	bne.n	8009426 <USB_EPStartXfer+0x8dc>
 800941c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8009420:	3b01      	subs	r3, #1
 8009422:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009426:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009428:	881b      	ldrh	r3, [r3, #0]
 800942a:	b29a      	uxth	r2, r3
 800942c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8009430:	b29b      	uxth	r3, r3
 8009432:	029b      	lsls	r3, r3, #10
 8009434:	b29b      	uxth	r3, r3
 8009436:	4313      	orrs	r3, r2
 8009438:	b29b      	uxth	r3, r3
 800943a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800943e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009442:	b29a      	uxth	r2, r3
 8009444:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009446:	801a      	strh	r2, [r3, #0]
 8009448:	e020      	b.n	800948c <USB_EPStartXfer+0x942>
 800944a:	683b      	ldr	r3, [r7, #0]
 800944c:	785b      	ldrb	r3, [r3, #1]
 800944e:	2b01      	cmp	r3, #1
 8009450:	d11c      	bne.n	800948c <USB_EPStartXfer+0x942>
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800945e:	b29b      	uxth	r3, r3
 8009460:	461a      	mov	r2, r3
 8009462:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009466:	4413      	add	r3, r2
 8009468:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800946c:	683b      	ldr	r3, [r7, #0]
 800946e:	781b      	ldrb	r3, [r3, #0]
 8009470:	00da      	lsls	r2, r3, #3
 8009472:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009476:	4413      	add	r3, r2
 8009478:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800947c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009480:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009484:	b29a      	uxth	r2, r3
 8009486:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800948a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800948c:	683b      	ldr	r3, [r7, #0]
 800948e:	891b      	ldrh	r3, [r3, #8]
 8009490:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009494:	683b      	ldr	r3, [r7, #0]
 8009496:	6959      	ldr	r1, [r3, #20]
 8009498:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800949c:	b29b      	uxth	r3, r3
 800949e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80094a2:	6878      	ldr	r0, [r7, #4]
 80094a4:	f000 fa35 	bl	8009912 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80094a8:	687a      	ldr	r2, [r7, #4]
 80094aa:	683b      	ldr	r3, [r7, #0]
 80094ac:	781b      	ldrb	r3, [r3, #0]
 80094ae:	009b      	lsls	r3, r3, #2
 80094b0:	4413      	add	r3, r2
 80094b2:	881b      	ldrh	r3, [r3, #0]
 80094b4:	b29b      	uxth	r3, r3
 80094b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80094ba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80094be:	817b      	strh	r3, [r7, #10]
 80094c0:	897b      	ldrh	r3, [r7, #10]
 80094c2:	f083 0310 	eor.w	r3, r3, #16
 80094c6:	817b      	strh	r3, [r7, #10]
 80094c8:	897b      	ldrh	r3, [r7, #10]
 80094ca:	f083 0320 	eor.w	r3, r3, #32
 80094ce:	817b      	strh	r3, [r7, #10]
 80094d0:	687a      	ldr	r2, [r7, #4]
 80094d2:	683b      	ldr	r3, [r7, #0]
 80094d4:	781b      	ldrb	r3, [r3, #0]
 80094d6:	009b      	lsls	r3, r3, #2
 80094d8:	441a      	add	r2, r3
 80094da:	897b      	ldrh	r3, [r7, #10]
 80094dc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80094e0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80094e4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80094e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80094ec:	b29b      	uxth	r3, r3
 80094ee:	8013      	strh	r3, [r2, #0]
 80094f0:	e0d5      	b.n	800969e <USB_EPStartXfer+0xb54>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80094f2:	683b      	ldr	r3, [r7, #0]
 80094f4:	7b1b      	ldrb	r3, [r3, #12]
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d156      	bne.n	80095a8 <USB_EPStartXfer+0xa5e>
    {
      if ((ep->xfer_len == 0U) && (ep->type == EP_TYPE_CTRL))
 80094fa:	683b      	ldr	r3, [r7, #0]
 80094fc:	699b      	ldr	r3, [r3, #24]
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d122      	bne.n	8009548 <USB_EPStartXfer+0x9fe>
 8009502:	683b      	ldr	r3, [r7, #0]
 8009504:	78db      	ldrb	r3, [r3, #3]
 8009506:	2b00      	cmp	r3, #0
 8009508:	d11e      	bne.n	8009548 <USB_EPStartXfer+0x9fe>
      {
        /* This is a status out stage set the OUT_STATUS */
        PCD_SET_OUT_STATUS(USBx, ep->num);
 800950a:	687a      	ldr	r2, [r7, #4]
 800950c:	683b      	ldr	r3, [r7, #0]
 800950e:	781b      	ldrb	r3, [r3, #0]
 8009510:	009b      	lsls	r3, r3, #2
 8009512:	4413      	add	r3, r2
 8009514:	881b      	ldrh	r3, [r3, #0]
 8009516:	b29b      	uxth	r3, r3
 8009518:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800951c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009520:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 8009524:	687a      	ldr	r2, [r7, #4]
 8009526:	683b      	ldr	r3, [r7, #0]
 8009528:	781b      	ldrb	r3, [r3, #0]
 800952a:	009b      	lsls	r3, r3, #2
 800952c:	441a      	add	r2, r3
 800952e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8009532:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009536:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800953a:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800953e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009542:	b29b      	uxth	r3, r3
 8009544:	8013      	strh	r3, [r2, #0]
 8009546:	e01d      	b.n	8009584 <USB_EPStartXfer+0xa3a>
      }
      else
      {
        PCD_CLEAR_OUT_STATUS(USBx, ep->num);
 8009548:	687a      	ldr	r2, [r7, #4]
 800954a:	683b      	ldr	r3, [r7, #0]
 800954c:	781b      	ldrb	r3, [r3, #0]
 800954e:	009b      	lsls	r3, r3, #2
 8009550:	4413      	add	r3, r2
 8009552:	881b      	ldrh	r3, [r3, #0]
 8009554:	b29b      	uxth	r3, r3
 8009556:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800955a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800955e:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
 8009562:	687a      	ldr	r2, [r7, #4]
 8009564:	683b      	ldr	r3, [r7, #0]
 8009566:	781b      	ldrb	r3, [r3, #0]
 8009568:	009b      	lsls	r3, r3, #2
 800956a:	441a      	add	r2, r3
 800956c:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 8009570:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009574:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009578:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800957c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009580:	b29b      	uxth	r3, r3
 8009582:	8013      	strh	r3, [r2, #0]
      }

      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8009584:	683b      	ldr	r3, [r7, #0]
 8009586:	699a      	ldr	r2, [r3, #24]
 8009588:	683b      	ldr	r3, [r7, #0]
 800958a:	691b      	ldr	r3, [r3, #16]
 800958c:	429a      	cmp	r2, r3
 800958e:	d907      	bls.n	80095a0 <USB_EPStartXfer+0xa56>
      {
        ep->xfer_len -= ep->maxpacket;
 8009590:	683b      	ldr	r3, [r7, #0]
 8009592:	699a      	ldr	r2, [r3, #24]
 8009594:	683b      	ldr	r3, [r7, #0]
 8009596:	691b      	ldr	r3, [r3, #16]
 8009598:	1ad2      	subs	r2, r2, r3
 800959a:	683b      	ldr	r3, [r7, #0]
 800959c:	619a      	str	r2, [r3, #24]
 800959e:	e054      	b.n	800964a <USB_EPStartXfer+0xb00>
      }
      else
      {
        ep->xfer_len = 0U;
 80095a0:	683b      	ldr	r3, [r7, #0]
 80095a2:	2200      	movs	r2, #0
 80095a4:	619a      	str	r2, [r3, #24]
 80095a6:	e050      	b.n	800964a <USB_EPStartXfer+0xb00>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80095a8:	683b      	ldr	r3, [r7, #0]
 80095aa:	78db      	ldrb	r3, [r3, #3]
 80095ac:	2b02      	cmp	r3, #2
 80095ae:	d142      	bne.n	8009636 <USB_EPStartXfer+0xaec>
      {
        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80095b0:	683b      	ldr	r3, [r7, #0]
 80095b2:	69db      	ldr	r3, [r3, #28]
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d048      	beq.n	800964a <USB_EPStartXfer+0xb00>
        {
          /* Update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80095b8:	687a      	ldr	r2, [r7, #4]
 80095ba:	683b      	ldr	r3, [r7, #0]
 80095bc:	781b      	ldrb	r3, [r3, #0]
 80095be:	009b      	lsls	r3, r3, #2
 80095c0:	4413      	add	r3, r2
 80095c2:	881b      	ldrh	r3, [r3, #0]
 80095c4:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92

          /* Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80095c8:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 80095cc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d005      	beq.n	80095e0 <USB_EPStartXfer+0xa96>
 80095d4:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 80095d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d10b      	bne.n	80095f8 <USB_EPStartXfer+0xaae>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80095e0:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 80095e4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d12e      	bne.n	800964a <USB_EPStartXfer+0xb00>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80095ec:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 80095f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d128      	bne.n	800964a <USB_EPStartXfer+0xb00>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80095f8:	687a      	ldr	r2, [r7, #4]
 80095fa:	683b      	ldr	r3, [r7, #0]
 80095fc:	781b      	ldrb	r3, [r3, #0]
 80095fe:	009b      	lsls	r3, r3, #2
 8009600:	4413      	add	r3, r2
 8009602:	881b      	ldrh	r3, [r3, #0]
 8009604:	b29b      	uxth	r3, r3
 8009606:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800960a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800960e:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
 8009612:	687a      	ldr	r2, [r7, #4]
 8009614:	683b      	ldr	r3, [r7, #0]
 8009616:	781b      	ldrb	r3, [r3, #0]
 8009618:	009b      	lsls	r3, r3, #2
 800961a:	441a      	add	r2, r3
 800961c:	f8b7 3090 	ldrh.w	r3, [r7, #144]	@ 0x90
 8009620:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009624:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009628:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800962c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009630:	b29b      	uxth	r3, r3
 8009632:	8013      	strh	r3, [r2, #0]
 8009634:	e009      	b.n	800964a <USB_EPStartXfer+0xb00>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8009636:	683b      	ldr	r3, [r7, #0]
 8009638:	78db      	ldrb	r3, [r3, #3]
 800963a:	2b01      	cmp	r3, #1
 800963c:	d103      	bne.n	8009646 <USB_EPStartXfer+0xafc>
      {
        /* Only single packet transfer supported in FS */
        ep->xfer_len = 0U;
 800963e:	683b      	ldr	r3, [r7, #0]
 8009640:	2200      	movs	r2, #0
 8009642:	619a      	str	r2, [r3, #24]
 8009644:	e001      	b.n	800964a <USB_EPStartXfer+0xb00>
      }
      else
      {
        return HAL_ERROR;
 8009646:	2301      	movs	r3, #1
 8009648:	e02a      	b.n	80096a0 <USB_EPStartXfer+0xb56>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800964a:	687a      	ldr	r2, [r7, #4]
 800964c:	683b      	ldr	r3, [r7, #0]
 800964e:	781b      	ldrb	r3, [r3, #0]
 8009650:	009b      	lsls	r3, r3, #2
 8009652:	4413      	add	r3, r2
 8009654:	881b      	ldrh	r3, [r3, #0]
 8009656:	b29b      	uxth	r3, r3
 8009658:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800965c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009660:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8009664:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8009668:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800966c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8009670:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8009674:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8009678:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800967c:	687a      	ldr	r2, [r7, #4]
 800967e:	683b      	ldr	r3, [r7, #0]
 8009680:	781b      	ldrb	r3, [r3, #0]
 8009682:	009b      	lsls	r3, r3, #2
 8009684:	441a      	add	r2, r3
 8009686:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800968a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800968e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009692:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009696:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800969a:	b29b      	uxth	r3, r3
 800969c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800969e:	2300      	movs	r3, #0
}
 80096a0:	4618      	mov	r0, r3
 80096a2:	37b0      	adds	r7, #176	@ 0xb0
 80096a4:	46bd      	mov	sp, r7
 80096a6:	bd80      	pop	{r7, pc}

080096a8 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80096a8:	b480      	push	{r7}
 80096aa:	b085      	sub	sp, #20
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	6078      	str	r0, [r7, #4]
 80096b0:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80096b2:	683b      	ldr	r3, [r7, #0]
 80096b4:	785b      	ldrb	r3, [r3, #1]
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d020      	beq.n	80096fc <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80096ba:	687a      	ldr	r2, [r7, #4]
 80096bc:	683b      	ldr	r3, [r7, #0]
 80096be:	781b      	ldrb	r3, [r3, #0]
 80096c0:	009b      	lsls	r3, r3, #2
 80096c2:	4413      	add	r3, r2
 80096c4:	881b      	ldrh	r3, [r3, #0]
 80096c6:	b29b      	uxth	r3, r3
 80096c8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80096cc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80096d0:	81bb      	strh	r3, [r7, #12]
 80096d2:	89bb      	ldrh	r3, [r7, #12]
 80096d4:	f083 0310 	eor.w	r3, r3, #16
 80096d8:	81bb      	strh	r3, [r7, #12]
 80096da:	687a      	ldr	r2, [r7, #4]
 80096dc:	683b      	ldr	r3, [r7, #0]
 80096de:	781b      	ldrb	r3, [r3, #0]
 80096e0:	009b      	lsls	r3, r3, #2
 80096e2:	441a      	add	r2, r3
 80096e4:	89bb      	ldrh	r3, [r7, #12]
 80096e6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80096ea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80096ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80096f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80096f6:	b29b      	uxth	r3, r3
 80096f8:	8013      	strh	r3, [r2, #0]
 80096fa:	e01f      	b.n	800973c <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80096fc:	687a      	ldr	r2, [r7, #4]
 80096fe:	683b      	ldr	r3, [r7, #0]
 8009700:	781b      	ldrb	r3, [r3, #0]
 8009702:	009b      	lsls	r3, r3, #2
 8009704:	4413      	add	r3, r2
 8009706:	881b      	ldrh	r3, [r3, #0]
 8009708:	b29b      	uxth	r3, r3
 800970a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800970e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009712:	81fb      	strh	r3, [r7, #14]
 8009714:	89fb      	ldrh	r3, [r7, #14]
 8009716:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800971a:	81fb      	strh	r3, [r7, #14]
 800971c:	687a      	ldr	r2, [r7, #4]
 800971e:	683b      	ldr	r3, [r7, #0]
 8009720:	781b      	ldrb	r3, [r3, #0]
 8009722:	009b      	lsls	r3, r3, #2
 8009724:	441a      	add	r2, r3
 8009726:	89fb      	ldrh	r3, [r7, #14]
 8009728:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800972c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009730:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009734:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009738:	b29b      	uxth	r3, r3
 800973a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800973c:	2300      	movs	r3, #0
}
 800973e:	4618      	mov	r0, r3
 8009740:	3714      	adds	r7, #20
 8009742:	46bd      	mov	sp, r7
 8009744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009748:	4770      	bx	lr

0800974a <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800974a:	b480      	push	{r7}
 800974c:	b087      	sub	sp, #28
 800974e:	af00      	add	r7, sp, #0
 8009750:	6078      	str	r0, [r7, #4]
 8009752:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8009754:	683b      	ldr	r3, [r7, #0]
 8009756:	785b      	ldrb	r3, [r3, #1]
 8009758:	2b00      	cmp	r3, #0
 800975a:	d04c      	beq.n	80097f6 <USB_EPClearStall+0xac>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800975c:	687a      	ldr	r2, [r7, #4]
 800975e:	683b      	ldr	r3, [r7, #0]
 8009760:	781b      	ldrb	r3, [r3, #0]
 8009762:	009b      	lsls	r3, r3, #2
 8009764:	4413      	add	r3, r2
 8009766:	881b      	ldrh	r3, [r3, #0]
 8009768:	823b      	strh	r3, [r7, #16]
 800976a:	8a3b      	ldrh	r3, [r7, #16]
 800976c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009770:	2b00      	cmp	r3, #0
 8009772:	d01b      	beq.n	80097ac <USB_EPClearStall+0x62>
 8009774:	687a      	ldr	r2, [r7, #4]
 8009776:	683b      	ldr	r3, [r7, #0]
 8009778:	781b      	ldrb	r3, [r3, #0]
 800977a:	009b      	lsls	r3, r3, #2
 800977c:	4413      	add	r3, r2
 800977e:	881b      	ldrh	r3, [r3, #0]
 8009780:	b29b      	uxth	r3, r3
 8009782:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009786:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800978a:	81fb      	strh	r3, [r7, #14]
 800978c:	687a      	ldr	r2, [r7, #4]
 800978e:	683b      	ldr	r3, [r7, #0]
 8009790:	781b      	ldrb	r3, [r3, #0]
 8009792:	009b      	lsls	r3, r3, #2
 8009794:	441a      	add	r2, r3
 8009796:	89fb      	ldrh	r3, [r7, #14]
 8009798:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800979c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80097a0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80097a4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80097a8:	b29b      	uxth	r3, r3
 80097aa:	8013      	strh	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 80097ac:	683b      	ldr	r3, [r7, #0]
 80097ae:	78db      	ldrb	r3, [r3, #3]
 80097b0:	2b01      	cmp	r3, #1
 80097b2:	d06c      	beq.n	800988e <USB_EPClearStall+0x144>
    {
      /* Configure NAK status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80097b4:	687a      	ldr	r2, [r7, #4]
 80097b6:	683b      	ldr	r3, [r7, #0]
 80097b8:	781b      	ldrb	r3, [r3, #0]
 80097ba:	009b      	lsls	r3, r3, #2
 80097bc:	4413      	add	r3, r2
 80097be:	881b      	ldrh	r3, [r3, #0]
 80097c0:	b29b      	uxth	r3, r3
 80097c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80097c6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80097ca:	81bb      	strh	r3, [r7, #12]
 80097cc:	89bb      	ldrh	r3, [r7, #12]
 80097ce:	f083 0320 	eor.w	r3, r3, #32
 80097d2:	81bb      	strh	r3, [r7, #12]
 80097d4:	687a      	ldr	r2, [r7, #4]
 80097d6:	683b      	ldr	r3, [r7, #0]
 80097d8:	781b      	ldrb	r3, [r3, #0]
 80097da:	009b      	lsls	r3, r3, #2
 80097dc:	441a      	add	r2, r3
 80097de:	89bb      	ldrh	r3, [r7, #12]
 80097e0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80097e4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80097e8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80097ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80097f0:	b29b      	uxth	r3, r3
 80097f2:	8013      	strh	r3, [r2, #0]
 80097f4:	e04b      	b.n	800988e <USB_EPClearStall+0x144>
    }
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80097f6:	687a      	ldr	r2, [r7, #4]
 80097f8:	683b      	ldr	r3, [r7, #0]
 80097fa:	781b      	ldrb	r3, [r3, #0]
 80097fc:	009b      	lsls	r3, r3, #2
 80097fe:	4413      	add	r3, r2
 8009800:	881b      	ldrh	r3, [r3, #0]
 8009802:	82fb      	strh	r3, [r7, #22]
 8009804:	8afb      	ldrh	r3, [r7, #22]
 8009806:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800980a:	2b00      	cmp	r3, #0
 800980c:	d01b      	beq.n	8009846 <USB_EPClearStall+0xfc>
 800980e:	687a      	ldr	r2, [r7, #4]
 8009810:	683b      	ldr	r3, [r7, #0]
 8009812:	781b      	ldrb	r3, [r3, #0]
 8009814:	009b      	lsls	r3, r3, #2
 8009816:	4413      	add	r3, r2
 8009818:	881b      	ldrh	r3, [r3, #0]
 800981a:	b29b      	uxth	r3, r3
 800981c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009820:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009824:	82bb      	strh	r3, [r7, #20]
 8009826:	687a      	ldr	r2, [r7, #4]
 8009828:	683b      	ldr	r3, [r7, #0]
 800982a:	781b      	ldrb	r3, [r3, #0]
 800982c:	009b      	lsls	r3, r3, #2
 800982e:	441a      	add	r2, r3
 8009830:	8abb      	ldrh	r3, [r7, #20]
 8009832:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009836:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800983a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800983e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009842:	b29b      	uxth	r3, r3
 8009844:	8013      	strh	r3, [r2, #0]

    /* Configure VALID status for the Endpoint */
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009846:	687a      	ldr	r2, [r7, #4]
 8009848:	683b      	ldr	r3, [r7, #0]
 800984a:	781b      	ldrb	r3, [r3, #0]
 800984c:	009b      	lsls	r3, r3, #2
 800984e:	4413      	add	r3, r2
 8009850:	881b      	ldrh	r3, [r3, #0]
 8009852:	b29b      	uxth	r3, r3
 8009854:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009858:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800985c:	827b      	strh	r3, [r7, #18]
 800985e:	8a7b      	ldrh	r3, [r7, #18]
 8009860:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8009864:	827b      	strh	r3, [r7, #18]
 8009866:	8a7b      	ldrh	r3, [r7, #18]
 8009868:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800986c:	827b      	strh	r3, [r7, #18]
 800986e:	687a      	ldr	r2, [r7, #4]
 8009870:	683b      	ldr	r3, [r7, #0]
 8009872:	781b      	ldrb	r3, [r3, #0]
 8009874:	009b      	lsls	r3, r3, #2
 8009876:	441a      	add	r2, r3
 8009878:	8a7b      	ldrh	r3, [r7, #18]
 800987a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800987e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009882:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009886:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800988a:	b29b      	uxth	r3, r3
 800988c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800988e:	2300      	movs	r3, #0
}
 8009890:	4618      	mov	r0, r3
 8009892:	371c      	adds	r7, #28
 8009894:	46bd      	mov	sp, r7
 8009896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800989a:	4770      	bx	lr

0800989c <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800989c:	b480      	push	{r7}
 800989e:	b083      	sub	sp, #12
 80098a0:	af00      	add	r7, sp, #0
 80098a2:	6078      	str	r0, [r7, #4]
 80098a4:	460b      	mov	r3, r1
 80098a6:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80098a8:	78fb      	ldrb	r3, [r7, #3]
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d103      	bne.n	80098b6 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	2280      	movs	r2, #128	@ 0x80
 80098b2:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 80098b6:	2300      	movs	r3, #0
}
 80098b8:	4618      	mov	r0, r3
 80098ba:	370c      	adds	r7, #12
 80098bc:	46bd      	mov	sp, r7
 80098be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c2:	4770      	bx	lr

080098c4 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80098c4:	b480      	push	{r7}
 80098c6:	b083      	sub	sp, #12
 80098c8:	af00      	add	r7, sp, #0
 80098ca:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80098d2:	b29b      	uxth	r3, r3
 80098d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80098d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80098dc:	b29a      	uxth	r2, r3
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 80098e4:	2300      	movs	r3, #0
}
 80098e6:	4618      	mov	r0, r3
 80098e8:	370c      	adds	r7, #12
 80098ea:	46bd      	mov	sp, r7
 80098ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f0:	4770      	bx	lr

080098f2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 80098f2:	b480      	push	{r7}
 80098f4:	b085      	sub	sp, #20
 80098f6:	af00      	add	r7, sp, #0
 80098f8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8009900:	b29b      	uxth	r3, r3
 8009902:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8009904:	68fb      	ldr	r3, [r7, #12]
}
 8009906:	4618      	mov	r0, r3
 8009908:	3714      	adds	r7, #20
 800990a:	46bd      	mov	sp, r7
 800990c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009910:	4770      	bx	lr

08009912 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009912:	b480      	push	{r7}
 8009914:	b08b      	sub	sp, #44	@ 0x2c
 8009916:	af00      	add	r7, sp, #0
 8009918:	60f8      	str	r0, [r7, #12]
 800991a:	60b9      	str	r1, [r7, #8]
 800991c:	4611      	mov	r1, r2
 800991e:	461a      	mov	r2, r3
 8009920:	460b      	mov	r3, r1
 8009922:	80fb      	strh	r3, [r7, #6]
 8009924:	4613      	mov	r3, r2
 8009926:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8009928:	88bb      	ldrh	r3, [r7, #4]
 800992a:	3301      	adds	r3, #1
 800992c:	085b      	lsrs	r3, r3, #1
 800992e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009934:	68bb      	ldr	r3, [r7, #8]
 8009936:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009938:	88fa      	ldrh	r2, [r7, #6]
 800993a:	697b      	ldr	r3, [r7, #20]
 800993c:	4413      	add	r3, r2
 800993e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009942:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8009944:	69bb      	ldr	r3, [r7, #24]
 8009946:	627b      	str	r3, [r7, #36]	@ 0x24
 8009948:	e01b      	b.n	8009982 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800994a:	69fb      	ldr	r3, [r7, #28]
 800994c:	781b      	ldrb	r3, [r3, #0]
 800994e:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8009950:	69fb      	ldr	r3, [r7, #28]
 8009952:	3301      	adds	r3, #1
 8009954:	781b      	ldrb	r3, [r3, #0]
 8009956:	021b      	lsls	r3, r3, #8
 8009958:	b21a      	sxth	r2, r3
 800995a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800995e:	4313      	orrs	r3, r2
 8009960:	b21b      	sxth	r3, r3
 8009962:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8009964:	6a3b      	ldr	r3, [r7, #32]
 8009966:	8a7a      	ldrh	r2, [r7, #18]
 8009968:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800996a:	6a3b      	ldr	r3, [r7, #32]
 800996c:	3302      	adds	r3, #2
 800996e:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8009970:	69fb      	ldr	r3, [r7, #28]
 8009972:	3301      	adds	r3, #1
 8009974:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8009976:	69fb      	ldr	r3, [r7, #28]
 8009978:	3301      	adds	r3, #1
 800997a:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800997c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800997e:	3b01      	subs	r3, #1
 8009980:	627b      	str	r3, [r7, #36]	@ 0x24
 8009982:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009984:	2b00      	cmp	r3, #0
 8009986:	d1e0      	bne.n	800994a <USB_WritePMA+0x38>
  }
}
 8009988:	bf00      	nop
 800998a:	bf00      	nop
 800998c:	372c      	adds	r7, #44	@ 0x2c
 800998e:	46bd      	mov	sp, r7
 8009990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009994:	4770      	bx	lr

08009996 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009996:	b480      	push	{r7}
 8009998:	b08b      	sub	sp, #44	@ 0x2c
 800999a:	af00      	add	r7, sp, #0
 800999c:	60f8      	str	r0, [r7, #12]
 800999e:	60b9      	str	r1, [r7, #8]
 80099a0:	4611      	mov	r1, r2
 80099a2:	461a      	mov	r2, r3
 80099a4:	460b      	mov	r3, r1
 80099a6:	80fb      	strh	r3, [r7, #6]
 80099a8:	4613      	mov	r3, r2
 80099aa:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80099ac:	88bb      	ldrh	r3, [r7, #4]
 80099ae:	085b      	lsrs	r3, r3, #1
 80099b0:	b29b      	uxth	r3, r3
 80099b2:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80099b8:	68bb      	ldr	r3, [r7, #8]
 80099ba:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80099bc:	88fa      	ldrh	r2, [r7, #6]
 80099be:	697b      	ldr	r3, [r7, #20]
 80099c0:	4413      	add	r3, r2
 80099c2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80099c6:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80099c8:	69bb      	ldr	r3, [r7, #24]
 80099ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80099cc:	e018      	b.n	8009a00 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 80099ce:	6a3b      	ldr	r3, [r7, #32]
 80099d0:	881b      	ldrh	r3, [r3, #0]
 80099d2:	b29b      	uxth	r3, r3
 80099d4:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80099d6:	6a3b      	ldr	r3, [r7, #32]
 80099d8:	3302      	adds	r3, #2
 80099da:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80099dc:	693b      	ldr	r3, [r7, #16]
 80099de:	b2da      	uxtb	r2, r3
 80099e0:	69fb      	ldr	r3, [r7, #28]
 80099e2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80099e4:	69fb      	ldr	r3, [r7, #28]
 80099e6:	3301      	adds	r3, #1
 80099e8:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 80099ea:	693b      	ldr	r3, [r7, #16]
 80099ec:	0a1b      	lsrs	r3, r3, #8
 80099ee:	b2da      	uxtb	r2, r3
 80099f0:	69fb      	ldr	r3, [r7, #28]
 80099f2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80099f4:	69fb      	ldr	r3, [r7, #28]
 80099f6:	3301      	adds	r3, #1
 80099f8:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80099fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099fc:	3b01      	subs	r3, #1
 80099fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8009a00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d1e3      	bne.n	80099ce <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8009a06:	88bb      	ldrh	r3, [r7, #4]
 8009a08:	f003 0301 	and.w	r3, r3, #1
 8009a0c:	b29b      	uxth	r3, r3
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d007      	beq.n	8009a22 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 8009a12:	6a3b      	ldr	r3, [r7, #32]
 8009a14:	881b      	ldrh	r3, [r3, #0]
 8009a16:	b29b      	uxth	r3, r3
 8009a18:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8009a1a:	693b      	ldr	r3, [r7, #16]
 8009a1c:	b2da      	uxtb	r2, r3
 8009a1e:	69fb      	ldr	r3, [r7, #28]
 8009a20:	701a      	strb	r2, [r3, #0]
  }
}
 8009a22:	bf00      	nop
 8009a24:	372c      	adds	r7, #44	@ 0x2c
 8009a26:	46bd      	mov	sp, r7
 8009a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a2c:	4770      	bx	lr

08009a2e <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009a2e:	b580      	push	{r7, lr}
 8009a30:	b084      	sub	sp, #16
 8009a32:	af00      	add	r7, sp, #0
 8009a34:	6078      	str	r0, [r7, #4]
 8009a36:	460b      	mov	r3, r1
 8009a38:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009a3a:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8009a3e:	f002 f911 	bl	800bc64 <USBD_static_malloc>
 8009a42:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d105      	bne.n	8009a56 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	2200      	movs	r2, #0
 8009a4e:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    return (uint8_t)USBD_EMEM;
 8009a52:	2302      	movs	r3, #2
 8009a54:	e066      	b.n	8009b24 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	68fa      	ldr	r2, [r7, #12]
 8009a5a:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	7c1b      	ldrb	r3, [r3, #16]
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d119      	bne.n	8009a9a <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009a66:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009a6a:	2202      	movs	r2, #2
 8009a6c:	2181      	movs	r1, #129	@ 0x81
 8009a6e:	6878      	ldr	r0, [r7, #4]
 8009a70:	f001 ff9f 	bl	800b9b2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	2201      	movs	r2, #1
 8009a78:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009a7a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009a7e:	2202      	movs	r2, #2
 8009a80:	2101      	movs	r1, #1
 8009a82:	6878      	ldr	r0, [r7, #4]
 8009a84:	f001 ff95 	bl	800b9b2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	2201      	movs	r2, #1
 8009a8c:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	2210      	movs	r2, #16
 8009a94:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
 8009a98:	e016      	b.n	8009ac8 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009a9a:	2340      	movs	r3, #64	@ 0x40
 8009a9c:	2202      	movs	r2, #2
 8009a9e:	2181      	movs	r1, #129	@ 0x81
 8009aa0:	6878      	ldr	r0, [r7, #4]
 8009aa2:	f001 ff86 	bl	800b9b2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	2201      	movs	r2, #1
 8009aaa:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009aac:	2340      	movs	r3, #64	@ 0x40
 8009aae:	2202      	movs	r2, #2
 8009ab0:	2101      	movs	r1, #1
 8009ab2:	6878      	ldr	r0, [r7, #4]
 8009ab4:	f001 ff7d 	bl	800b9b2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	2201      	movs	r2, #1
 8009abc:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	2210      	movs	r2, #16
 8009ac4:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009ac8:	2308      	movs	r3, #8
 8009aca:	2203      	movs	r2, #3
 8009acc:	2182      	movs	r1, #130	@ 0x82
 8009ace:	6878      	ldr	r0, [r7, #4]
 8009ad0:	f001 ff6f 	bl	800b9b2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	2201      	movs	r2, #1
 8009ad8:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	2200      	movs	r2, #0
 8009aea:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	2200      	movs	r2, #0
 8009af2:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	7c1b      	ldrb	r3, [r3, #16]
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d109      	bne.n	8009b12 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009b04:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009b08:	2101      	movs	r1, #1
 8009b0a:	6878      	ldr	r0, [r7, #4]
 8009b0c:	f002 f840 	bl	800bb90 <USBD_LL_PrepareReceive>
 8009b10:	e007      	b.n	8009b22 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009b18:	2340      	movs	r3, #64	@ 0x40
 8009b1a:	2101      	movs	r1, #1
 8009b1c:	6878      	ldr	r0, [r7, #4]
 8009b1e:	f002 f837 	bl	800bb90 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009b22:	2300      	movs	r3, #0
}
 8009b24:	4618      	mov	r0, r3
 8009b26:	3710      	adds	r7, #16
 8009b28:	46bd      	mov	sp, r7
 8009b2a:	bd80      	pop	{r7, pc}

08009b2c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009b2c:	b580      	push	{r7, lr}
 8009b2e:	b082      	sub	sp, #8
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	6078      	str	r0, [r7, #4]
 8009b34:	460b      	mov	r3, r1
 8009b36:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8009b38:	2181      	movs	r1, #129	@ 0x81
 8009b3a:	6878      	ldr	r0, [r7, #4]
 8009b3c:	f001 ff5f 	bl	800b9fe <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	2200      	movs	r2, #0
 8009b44:	871a      	strh	r2, [r3, #56]	@ 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8009b46:	2101      	movs	r1, #1
 8009b48:	6878      	ldr	r0, [r7, #4]
 8009b4a:	f001 ff58 	bl	800b9fe <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	2200      	movs	r2, #0
 8009b52:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8009b56:	2182      	movs	r1, #130	@ 0x82
 8009b58:	6878      	ldr	r0, [r7, #4]
 8009b5a:	f001 ff50 	bl	800b9fe <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	2200      	movs	r2, #0
 8009b62:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	2200      	movs	r2, #0
 8009b6a:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d00e      	beq.n	8009b96 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009b7e:	685b      	ldr	r3, [r3, #4]
 8009b80:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009b88:	4618      	mov	r0, r3
 8009b8a:	f002 f879 	bl	800bc80 <USBD_static_free>
    pdev->pClassData = NULL;
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	2200      	movs	r2, #0
 8009b92:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009b96:	2300      	movs	r3, #0
}
 8009b98:	4618      	mov	r0, r3
 8009b9a:	3708      	adds	r7, #8
 8009b9c:	46bd      	mov	sp, r7
 8009b9e:	bd80      	pop	{r7, pc}

08009ba0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8009ba0:	b580      	push	{r7, lr}
 8009ba2:	b086      	sub	sp, #24
 8009ba4:	af00      	add	r7, sp, #0
 8009ba6:	6078      	str	r0, [r7, #4]
 8009ba8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009bb0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8009bb2:	2300      	movs	r3, #0
 8009bb4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8009bb6:	2300      	movs	r3, #0
 8009bb8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8009bba:	2300      	movs	r3, #0
 8009bbc:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8009bbe:	693b      	ldr	r3, [r7, #16]
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d101      	bne.n	8009bc8 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8009bc4:	2303      	movs	r3, #3
 8009bc6:	e0af      	b.n	8009d28 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009bc8:	683b      	ldr	r3, [r7, #0]
 8009bca:	781b      	ldrb	r3, [r3, #0]
 8009bcc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d03f      	beq.n	8009c54 <USBD_CDC_Setup+0xb4>
 8009bd4:	2b20      	cmp	r3, #32
 8009bd6:	f040 809f 	bne.w	8009d18 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8009bda:	683b      	ldr	r3, [r7, #0]
 8009bdc:	88db      	ldrh	r3, [r3, #6]
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d02e      	beq.n	8009c40 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8009be2:	683b      	ldr	r3, [r7, #0]
 8009be4:	781b      	ldrb	r3, [r3, #0]
 8009be6:	b25b      	sxtb	r3, r3
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	da16      	bge.n	8009c1a <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009bf2:	689b      	ldr	r3, [r3, #8]
 8009bf4:	683a      	ldr	r2, [r7, #0]
 8009bf6:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8009bf8:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009bfa:	683a      	ldr	r2, [r7, #0]
 8009bfc:	88d2      	ldrh	r2, [r2, #6]
 8009bfe:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8009c00:	683b      	ldr	r3, [r7, #0]
 8009c02:	88db      	ldrh	r3, [r3, #6]
 8009c04:	2b07      	cmp	r3, #7
 8009c06:	bf28      	it	cs
 8009c08:	2307      	movcs	r3, #7
 8009c0a:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8009c0c:	693b      	ldr	r3, [r7, #16]
 8009c0e:	89fa      	ldrh	r2, [r7, #14]
 8009c10:	4619      	mov	r1, r3
 8009c12:	6878      	ldr	r0, [r7, #4]
 8009c14:	f001 facd 	bl	800b1b2 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8009c18:	e085      	b.n	8009d26 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8009c1a:	683b      	ldr	r3, [r7, #0]
 8009c1c:	785a      	ldrb	r2, [r3, #1]
 8009c1e:	693b      	ldr	r3, [r7, #16]
 8009c20:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8009c24:	683b      	ldr	r3, [r7, #0]
 8009c26:	88db      	ldrh	r3, [r3, #6]
 8009c28:	b2da      	uxtb	r2, r3
 8009c2a:	693b      	ldr	r3, [r7, #16]
 8009c2c:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8009c30:	6939      	ldr	r1, [r7, #16]
 8009c32:	683b      	ldr	r3, [r7, #0]
 8009c34:	88db      	ldrh	r3, [r3, #6]
 8009c36:	461a      	mov	r2, r3
 8009c38:	6878      	ldr	r0, [r7, #4]
 8009c3a:	f001 fae6 	bl	800b20a <USBD_CtlPrepareRx>
      break;
 8009c3e:	e072      	b.n	8009d26 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009c46:	689b      	ldr	r3, [r3, #8]
 8009c48:	683a      	ldr	r2, [r7, #0]
 8009c4a:	7850      	ldrb	r0, [r2, #1]
 8009c4c:	2200      	movs	r2, #0
 8009c4e:	6839      	ldr	r1, [r7, #0]
 8009c50:	4798      	blx	r3
      break;
 8009c52:	e068      	b.n	8009d26 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009c54:	683b      	ldr	r3, [r7, #0]
 8009c56:	785b      	ldrb	r3, [r3, #1]
 8009c58:	2b0b      	cmp	r3, #11
 8009c5a:	d852      	bhi.n	8009d02 <USBD_CDC_Setup+0x162>
 8009c5c:	a201      	add	r2, pc, #4	@ (adr r2, 8009c64 <USBD_CDC_Setup+0xc4>)
 8009c5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c62:	bf00      	nop
 8009c64:	08009c95 	.word	0x08009c95
 8009c68:	08009d11 	.word	0x08009d11
 8009c6c:	08009d03 	.word	0x08009d03
 8009c70:	08009d03 	.word	0x08009d03
 8009c74:	08009d03 	.word	0x08009d03
 8009c78:	08009d03 	.word	0x08009d03
 8009c7c:	08009d03 	.word	0x08009d03
 8009c80:	08009d03 	.word	0x08009d03
 8009c84:	08009d03 	.word	0x08009d03
 8009c88:	08009d03 	.word	0x08009d03
 8009c8c:	08009cbf 	.word	0x08009cbf
 8009c90:	08009ce9 	.word	0x08009ce9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009c9a:	b2db      	uxtb	r3, r3
 8009c9c:	2b03      	cmp	r3, #3
 8009c9e:	d107      	bne.n	8009cb0 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009ca0:	f107 030a 	add.w	r3, r7, #10
 8009ca4:	2202      	movs	r2, #2
 8009ca6:	4619      	mov	r1, r3
 8009ca8:	6878      	ldr	r0, [r7, #4]
 8009caa:	f001 fa82 	bl	800b1b2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009cae:	e032      	b.n	8009d16 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8009cb0:	6839      	ldr	r1, [r7, #0]
 8009cb2:	6878      	ldr	r0, [r7, #4]
 8009cb4:	f001 fa0c 	bl	800b0d0 <USBD_CtlError>
            ret = USBD_FAIL;
 8009cb8:	2303      	movs	r3, #3
 8009cba:	75fb      	strb	r3, [r7, #23]
          break;
 8009cbc:	e02b      	b.n	8009d16 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009cc4:	b2db      	uxtb	r3, r3
 8009cc6:	2b03      	cmp	r3, #3
 8009cc8:	d107      	bne.n	8009cda <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8009cca:	f107 030d 	add.w	r3, r7, #13
 8009cce:	2201      	movs	r2, #1
 8009cd0:	4619      	mov	r1, r3
 8009cd2:	6878      	ldr	r0, [r7, #4]
 8009cd4:	f001 fa6d 	bl	800b1b2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009cd8:	e01d      	b.n	8009d16 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8009cda:	6839      	ldr	r1, [r7, #0]
 8009cdc:	6878      	ldr	r0, [r7, #4]
 8009cde:	f001 f9f7 	bl	800b0d0 <USBD_CtlError>
            ret = USBD_FAIL;
 8009ce2:	2303      	movs	r3, #3
 8009ce4:	75fb      	strb	r3, [r7, #23]
          break;
 8009ce6:	e016      	b.n	8009d16 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009cee:	b2db      	uxtb	r3, r3
 8009cf0:	2b03      	cmp	r3, #3
 8009cf2:	d00f      	beq.n	8009d14 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8009cf4:	6839      	ldr	r1, [r7, #0]
 8009cf6:	6878      	ldr	r0, [r7, #4]
 8009cf8:	f001 f9ea 	bl	800b0d0 <USBD_CtlError>
            ret = USBD_FAIL;
 8009cfc:	2303      	movs	r3, #3
 8009cfe:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009d00:	e008      	b.n	8009d14 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8009d02:	6839      	ldr	r1, [r7, #0]
 8009d04:	6878      	ldr	r0, [r7, #4]
 8009d06:	f001 f9e3 	bl	800b0d0 <USBD_CtlError>
          ret = USBD_FAIL;
 8009d0a:	2303      	movs	r3, #3
 8009d0c:	75fb      	strb	r3, [r7, #23]
          break;
 8009d0e:	e002      	b.n	8009d16 <USBD_CDC_Setup+0x176>
          break;
 8009d10:	bf00      	nop
 8009d12:	e008      	b.n	8009d26 <USBD_CDC_Setup+0x186>
          break;
 8009d14:	bf00      	nop
      }
      break;
 8009d16:	e006      	b.n	8009d26 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8009d18:	6839      	ldr	r1, [r7, #0]
 8009d1a:	6878      	ldr	r0, [r7, #4]
 8009d1c:	f001 f9d8 	bl	800b0d0 <USBD_CtlError>
      ret = USBD_FAIL;
 8009d20:	2303      	movs	r3, #3
 8009d22:	75fb      	strb	r3, [r7, #23]
      break;
 8009d24:	bf00      	nop
  }

  return (uint8_t)ret;
 8009d26:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d28:	4618      	mov	r0, r3
 8009d2a:	3718      	adds	r7, #24
 8009d2c:	46bd      	mov	sp, r7
 8009d2e:	bd80      	pop	{r7, pc}

08009d30 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009d30:	b580      	push	{r7, lr}
 8009d32:	b084      	sub	sp, #16
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	6078      	str	r0, [r7, #4]
 8009d38:	460b      	mov	r3, r1
 8009d3a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8009d42:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d101      	bne.n	8009d52 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009d4e:	2303      	movs	r3, #3
 8009d50:	e04f      	b.n	8009df2 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009d58:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8009d5a:	78fa      	ldrb	r2, [r7, #3]
 8009d5c:	6879      	ldr	r1, [r7, #4]
 8009d5e:	4613      	mov	r3, r2
 8009d60:	009b      	lsls	r3, r3, #2
 8009d62:	4413      	add	r3, r2
 8009d64:	009b      	lsls	r3, r3, #2
 8009d66:	440b      	add	r3, r1
 8009d68:	3318      	adds	r3, #24
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d029      	beq.n	8009dc4 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8009d70:	78fa      	ldrb	r2, [r7, #3]
 8009d72:	6879      	ldr	r1, [r7, #4]
 8009d74:	4613      	mov	r3, r2
 8009d76:	009b      	lsls	r3, r3, #2
 8009d78:	4413      	add	r3, r2
 8009d7a:	009b      	lsls	r3, r3, #2
 8009d7c:	440b      	add	r3, r1
 8009d7e:	3318      	adds	r3, #24
 8009d80:	681a      	ldr	r2, [r3, #0]
 8009d82:	78f9      	ldrb	r1, [r7, #3]
 8009d84:	68f8      	ldr	r0, [r7, #12]
 8009d86:	460b      	mov	r3, r1
 8009d88:	009b      	lsls	r3, r3, #2
 8009d8a:	440b      	add	r3, r1
 8009d8c:	00db      	lsls	r3, r3, #3
 8009d8e:	4403      	add	r3, r0
 8009d90:	3320      	adds	r3, #32
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	fbb2 f1f3 	udiv	r1, r2, r3
 8009d98:	fb01 f303 	mul.w	r3, r1, r3
 8009d9c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d110      	bne.n	8009dc4 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8009da2:	78fa      	ldrb	r2, [r7, #3]
 8009da4:	6879      	ldr	r1, [r7, #4]
 8009da6:	4613      	mov	r3, r2
 8009da8:	009b      	lsls	r3, r3, #2
 8009daa:	4413      	add	r3, r2
 8009dac:	009b      	lsls	r3, r3, #2
 8009dae:	440b      	add	r3, r1
 8009db0:	3318      	adds	r3, #24
 8009db2:	2200      	movs	r2, #0
 8009db4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009db6:	78f9      	ldrb	r1, [r7, #3]
 8009db8:	2300      	movs	r3, #0
 8009dba:	2200      	movs	r2, #0
 8009dbc:	6878      	ldr	r0, [r7, #4]
 8009dbe:	f001 fec6 	bl	800bb4e <USBD_LL_Transmit>
 8009dc2:	e015      	b.n	8009df0 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8009dc4:	68bb      	ldr	r3, [r7, #8]
 8009dc6:	2200      	movs	r2, #0
 8009dc8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009dd2:	691b      	ldr	r3, [r3, #16]
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d00b      	beq.n	8009df0 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009dde:	691b      	ldr	r3, [r3, #16]
 8009de0:	68ba      	ldr	r2, [r7, #8]
 8009de2:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8009de6:	68ba      	ldr	r2, [r7, #8]
 8009de8:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8009dec:	78fa      	ldrb	r2, [r7, #3]
 8009dee:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8009df0:	2300      	movs	r3, #0
}
 8009df2:	4618      	mov	r0, r3
 8009df4:	3710      	adds	r7, #16
 8009df6:	46bd      	mov	sp, r7
 8009df8:	bd80      	pop	{r7, pc}

08009dfa <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009dfa:	b580      	push	{r7, lr}
 8009dfc:	b084      	sub	sp, #16
 8009dfe:	af00      	add	r7, sp, #0
 8009e00:	6078      	str	r0, [r7, #4]
 8009e02:	460b      	mov	r3, r1
 8009e04:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009e0c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d101      	bne.n	8009e1c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009e18:	2303      	movs	r3, #3
 8009e1a:	e015      	b.n	8009e48 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009e1c:	78fb      	ldrb	r3, [r7, #3]
 8009e1e:	4619      	mov	r1, r3
 8009e20:	6878      	ldr	r0, [r7, #4]
 8009e22:	f001 fed6 	bl	800bbd2 <USBD_LL_GetRxDataSize>
 8009e26:	4602      	mov	r2, r0
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009e34:	68db      	ldr	r3, [r3, #12]
 8009e36:	68fa      	ldr	r2, [r7, #12]
 8009e38:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8009e3c:	68fa      	ldr	r2, [r7, #12]
 8009e3e:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8009e42:	4611      	mov	r1, r2
 8009e44:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8009e46:	2300      	movs	r3, #0
}
 8009e48:	4618      	mov	r0, r3
 8009e4a:	3710      	adds	r7, #16
 8009e4c:	46bd      	mov	sp, r7
 8009e4e:	bd80      	pop	{r7, pc}

08009e50 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009e50:	b580      	push	{r7, lr}
 8009e52:	b084      	sub	sp, #16
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009e5e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d101      	bne.n	8009e6a <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8009e66:	2303      	movs	r3, #3
 8009e68:	e01a      	b.n	8009ea0 <USBD_CDC_EP0_RxReady+0x50>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d014      	beq.n	8009e9e <USBD_CDC_EP0_RxReady+0x4e>
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8009e7a:	2bff      	cmp	r3, #255	@ 0xff
 8009e7c:	d00f      	beq.n	8009e9e <USBD_CDC_EP0_RxReady+0x4e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009e84:	689b      	ldr	r3, [r3, #8]
 8009e86:	68fa      	ldr	r2, [r7, #12]
 8009e88:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)hcdc->data,
 8009e8c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8009e8e:	68fa      	ldr	r2, [r7, #12]
 8009e90:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009e94:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	22ff      	movs	r2, #255	@ 0xff
 8009e9a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8009e9e:	2300      	movs	r3, #0
}
 8009ea0:	4618      	mov	r0, r3
 8009ea2:	3710      	adds	r7, #16
 8009ea4:	46bd      	mov	sp, r7
 8009ea6:	bd80      	pop	{r7, pc}

08009ea8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009ea8:	b480      	push	{r7}
 8009eaa:	b083      	sub	sp, #12
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	2243      	movs	r2, #67	@ 0x43
 8009eb4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8009eb6:	4b03      	ldr	r3, [pc, #12]	@ (8009ec4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8009eb8:	4618      	mov	r0, r3
 8009eba:	370c      	adds	r7, #12
 8009ebc:	46bd      	mov	sp, r7
 8009ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec2:	4770      	bx	lr
 8009ec4:	2000012c 	.word	0x2000012c

08009ec8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009ec8:	b480      	push	{r7}
 8009eca:	b083      	sub	sp, #12
 8009ecc:	af00      	add	r7, sp, #0
 8009ece:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	2243      	movs	r2, #67	@ 0x43
 8009ed4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8009ed6:	4b03      	ldr	r3, [pc, #12]	@ (8009ee4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8009ed8:	4618      	mov	r0, r3
 8009eda:	370c      	adds	r7, #12
 8009edc:	46bd      	mov	sp, r7
 8009ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee2:	4770      	bx	lr
 8009ee4:	200000e8 	.word	0x200000e8

08009ee8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009ee8:	b480      	push	{r7}
 8009eea:	b083      	sub	sp, #12
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	2243      	movs	r2, #67	@ 0x43
 8009ef4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8009ef6:	4b03      	ldr	r3, [pc, #12]	@ (8009f04 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8009ef8:	4618      	mov	r0, r3
 8009efa:	370c      	adds	r7, #12
 8009efc:	46bd      	mov	sp, r7
 8009efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f02:	4770      	bx	lr
 8009f04:	20000170 	.word	0x20000170

08009f08 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009f08:	b480      	push	{r7}
 8009f0a:	b083      	sub	sp, #12
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	220a      	movs	r2, #10
 8009f14:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8009f16:	4b03      	ldr	r3, [pc, #12]	@ (8009f24 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009f18:	4618      	mov	r0, r3
 8009f1a:	370c      	adds	r7, #12
 8009f1c:	46bd      	mov	sp, r7
 8009f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f22:	4770      	bx	lr
 8009f24:	200000a4 	.word	0x200000a4

08009f28 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8009f28:	b480      	push	{r7}
 8009f2a:	b083      	sub	sp, #12
 8009f2c:	af00      	add	r7, sp, #0
 8009f2e:	6078      	str	r0, [r7, #4]
 8009f30:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8009f32:	683b      	ldr	r3, [r7, #0]
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d101      	bne.n	8009f3c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009f38:	2303      	movs	r3, #3
 8009f3a:	e004      	b.n	8009f46 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	683a      	ldr	r2, [r7, #0]
 8009f40:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  return (uint8_t)USBD_OK;
 8009f44:	2300      	movs	r3, #0
}
 8009f46:	4618      	mov	r0, r3
 8009f48:	370c      	adds	r7, #12
 8009f4a:	46bd      	mov	sp, r7
 8009f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f50:	4770      	bx	lr

08009f52 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8009f52:	b480      	push	{r7}
 8009f54:	b087      	sub	sp, #28
 8009f56:	af00      	add	r7, sp, #0
 8009f58:	60f8      	str	r0, [r7, #12]
 8009f5a:	60b9      	str	r1, [r7, #8]
 8009f5c:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009f64:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8009f66:	697b      	ldr	r3, [r7, #20]
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d101      	bne.n	8009f70 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8009f6c:	2303      	movs	r3, #3
 8009f6e:	e008      	b.n	8009f82 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8009f70:	697b      	ldr	r3, [r7, #20]
 8009f72:	68ba      	ldr	r2, [r7, #8]
 8009f74:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8009f78:	697b      	ldr	r3, [r7, #20]
 8009f7a:	687a      	ldr	r2, [r7, #4]
 8009f7c:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8009f80:	2300      	movs	r3, #0
}
 8009f82:	4618      	mov	r0, r3
 8009f84:	371c      	adds	r7, #28
 8009f86:	46bd      	mov	sp, r7
 8009f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f8c:	4770      	bx	lr

08009f8e <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8009f8e:	b480      	push	{r7}
 8009f90:	b085      	sub	sp, #20
 8009f92:	af00      	add	r7, sp, #0
 8009f94:	6078      	str	r0, [r7, #4]
 8009f96:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009f9e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d101      	bne.n	8009faa <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8009fa6:	2303      	movs	r3, #3
 8009fa8:	e004      	b.n	8009fb4 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	683a      	ldr	r2, [r7, #0]
 8009fae:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8009fb2:	2300      	movs	r3, #0
}
 8009fb4:	4618      	mov	r0, r3
 8009fb6:	3714      	adds	r7, #20
 8009fb8:	46bd      	mov	sp, r7
 8009fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fbe:	4770      	bx	lr

08009fc0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8009fc0:	b580      	push	{r7, lr}
 8009fc2:	b084      	sub	sp, #16
 8009fc4:	af00      	add	r7, sp, #0
 8009fc6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009fce:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8009fd0:	2301      	movs	r3, #1
 8009fd2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d101      	bne.n	8009fe2 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009fde:	2303      	movs	r3, #3
 8009fe0:	e01a      	b.n	800a018 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8009fe2:	68bb      	ldr	r3, [r7, #8]
 8009fe4:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d114      	bne.n	800a016 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8009fec:	68bb      	ldr	r3, [r7, #8]
 8009fee:	2201      	movs	r2, #1
 8009ff0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8009ff4:	68bb      	ldr	r3, [r7, #8]
 8009ff6:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8009ffe:	68bb      	ldr	r3, [r7, #8]
 800a000:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800a004:	68bb      	ldr	r3, [r7, #8]
 800a006:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800a00a:	2181      	movs	r1, #129	@ 0x81
 800a00c:	6878      	ldr	r0, [r7, #4]
 800a00e:	f001 fd9e 	bl	800bb4e <USBD_LL_Transmit>

    ret = USBD_OK;
 800a012:	2300      	movs	r3, #0
 800a014:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800a016:	7bfb      	ldrb	r3, [r7, #15]
}
 800a018:	4618      	mov	r0, r3
 800a01a:	3710      	adds	r7, #16
 800a01c:	46bd      	mov	sp, r7
 800a01e:	bd80      	pop	{r7, pc}

0800a020 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a020:	b580      	push	{r7, lr}
 800a022:	b084      	sub	sp, #16
 800a024:	af00      	add	r7, sp, #0
 800a026:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a02e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a036:	2b00      	cmp	r3, #0
 800a038:	d101      	bne.n	800a03e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800a03a:	2303      	movs	r3, #3
 800a03c:	e016      	b.n	800a06c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	7c1b      	ldrb	r3, [r3, #16]
 800a042:	2b00      	cmp	r3, #0
 800a044:	d109      	bne.n	800a05a <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a04c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a050:	2101      	movs	r1, #1
 800a052:	6878      	ldr	r0, [r7, #4]
 800a054:	f001 fd9c 	bl	800bb90 <USBD_LL_PrepareReceive>
 800a058:	e007      	b.n	800a06a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a060:	2340      	movs	r3, #64	@ 0x40
 800a062:	2101      	movs	r1, #1
 800a064:	6878      	ldr	r0, [r7, #4]
 800a066:	f001 fd93 	bl	800bb90 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a06a:	2300      	movs	r3, #0
}
 800a06c:	4618      	mov	r0, r3
 800a06e:	3710      	adds	r7, #16
 800a070:	46bd      	mov	sp, r7
 800a072:	bd80      	pop	{r7, pc}

0800a074 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a074:	b580      	push	{r7, lr}
 800a076:	b086      	sub	sp, #24
 800a078:	af00      	add	r7, sp, #0
 800a07a:	60f8      	str	r0, [r7, #12]
 800a07c:	60b9      	str	r1, [r7, #8]
 800a07e:	4613      	mov	r3, r2
 800a080:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	2b00      	cmp	r3, #0
 800a086:	d101      	bne.n	800a08c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800a088:	2303      	movs	r3, #3
 800a08a:	e01f      	b.n	800a0cc <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	2200      	movs	r2, #0
 800a090:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	2200      	movs	r2, #0
 800a098:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	2200      	movs	r2, #0
 800a0a0:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a0a4:	68bb      	ldr	r3, [r7, #8]
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d003      	beq.n	800a0b2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	68ba      	ldr	r2, [r7, #8]
 800a0ae:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	2201      	movs	r2, #1
 800a0b6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	79fa      	ldrb	r2, [r7, #7]
 800a0be:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a0c0:	68f8      	ldr	r0, [r7, #12]
 800a0c2:	f001 fbfb 	bl	800b8bc <USBD_LL_Init>
 800a0c6:	4603      	mov	r3, r0
 800a0c8:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a0ca:	7dfb      	ldrb	r3, [r7, #23]
}
 800a0cc:	4618      	mov	r0, r3
 800a0ce:	3718      	adds	r7, #24
 800a0d0:	46bd      	mov	sp, r7
 800a0d2:	bd80      	pop	{r7, pc}

0800a0d4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a0d4:	b580      	push	{r7, lr}
 800a0d6:	b084      	sub	sp, #16
 800a0d8:	af00      	add	r7, sp, #0
 800a0da:	6078      	str	r0, [r7, #4]
 800a0dc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a0de:	2300      	movs	r3, #0
 800a0e0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a0e2:	683b      	ldr	r3, [r7, #0]
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d101      	bne.n	800a0ec <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800a0e8:	2303      	movs	r3, #3
 800a0ea:	e016      	b.n	800a11a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	683a      	ldr	r2, [r7, #0]
 800a0f0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a0fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d00b      	beq.n	800a118 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a106:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a108:	f107 020e 	add.w	r2, r7, #14
 800a10c:	4610      	mov	r0, r2
 800a10e:	4798      	blx	r3
 800a110:	4602      	mov	r2, r0
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800a118:	2300      	movs	r3, #0
}
 800a11a:	4618      	mov	r0, r3
 800a11c:	3710      	adds	r7, #16
 800a11e:	46bd      	mov	sp, r7
 800a120:	bd80      	pop	{r7, pc}

0800a122 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a122:	b580      	push	{r7, lr}
 800a124:	b082      	sub	sp, #8
 800a126:	af00      	add	r7, sp, #0
 800a128:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a12a:	6878      	ldr	r0, [r7, #4]
 800a12c:	f001 fc26 	bl	800b97c <USBD_LL_Start>
 800a130:	4603      	mov	r3, r0
}
 800a132:	4618      	mov	r0, r3
 800a134:	3708      	adds	r7, #8
 800a136:	46bd      	mov	sp, r7
 800a138:	bd80      	pop	{r7, pc}

0800a13a <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800a13a:	b480      	push	{r7}
 800a13c:	b083      	sub	sp, #12
 800a13e:	af00      	add	r7, sp, #0
 800a140:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a142:	2300      	movs	r3, #0
}
 800a144:	4618      	mov	r0, r3
 800a146:	370c      	adds	r7, #12
 800a148:	46bd      	mov	sp, r7
 800a14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a14e:	4770      	bx	lr

0800a150 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a150:	b580      	push	{r7, lr}
 800a152:	b084      	sub	sp, #16
 800a154:	af00      	add	r7, sp, #0
 800a156:	6078      	str	r0, [r7, #4]
 800a158:	460b      	mov	r3, r1
 800a15a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800a15c:	2303      	movs	r3, #3
 800a15e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a166:	2b00      	cmp	r3, #0
 800a168:	d009      	beq.n	800a17e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	78fa      	ldrb	r2, [r7, #3]
 800a174:	4611      	mov	r1, r2
 800a176:	6878      	ldr	r0, [r7, #4]
 800a178:	4798      	blx	r3
 800a17a:	4603      	mov	r3, r0
 800a17c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800a17e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a180:	4618      	mov	r0, r3
 800a182:	3710      	adds	r7, #16
 800a184:	46bd      	mov	sp, r7
 800a186:	bd80      	pop	{r7, pc}

0800a188 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a188:	b580      	push	{r7, lr}
 800a18a:	b082      	sub	sp, #8
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	6078      	str	r0, [r7, #4]
 800a190:	460b      	mov	r3, r1
 800a192:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d007      	beq.n	800a1ae <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a1a4:	685b      	ldr	r3, [r3, #4]
 800a1a6:	78fa      	ldrb	r2, [r7, #3]
 800a1a8:	4611      	mov	r1, r2
 800a1aa:	6878      	ldr	r0, [r7, #4]
 800a1ac:	4798      	blx	r3
  }

  return USBD_OK;
 800a1ae:	2300      	movs	r3, #0
}
 800a1b0:	4618      	mov	r0, r3
 800a1b2:	3708      	adds	r7, #8
 800a1b4:	46bd      	mov	sp, r7
 800a1b6:	bd80      	pop	{r7, pc}

0800a1b8 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a1b8:	b580      	push	{r7, lr}
 800a1ba:	b084      	sub	sp, #16
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	6078      	str	r0, [r7, #4]
 800a1c0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a1c8:	6839      	ldr	r1, [r7, #0]
 800a1ca:	4618      	mov	r0, r3
 800a1cc:	f000 ff46 	bl	800b05c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	2201      	movs	r2, #1
 800a1d4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800a1de:	461a      	mov	r2, r3
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a1ec:	f003 031f 	and.w	r3, r3, #31
 800a1f0:	2b02      	cmp	r3, #2
 800a1f2:	d01a      	beq.n	800a22a <USBD_LL_SetupStage+0x72>
 800a1f4:	2b02      	cmp	r3, #2
 800a1f6:	d822      	bhi.n	800a23e <USBD_LL_SetupStage+0x86>
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d002      	beq.n	800a202 <USBD_LL_SetupStage+0x4a>
 800a1fc:	2b01      	cmp	r3, #1
 800a1fe:	d00a      	beq.n	800a216 <USBD_LL_SetupStage+0x5e>
 800a200:	e01d      	b.n	800a23e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a208:	4619      	mov	r1, r3
 800a20a:	6878      	ldr	r0, [r7, #4]
 800a20c:	f000 f9ee 	bl	800a5ec <USBD_StdDevReq>
 800a210:	4603      	mov	r3, r0
 800a212:	73fb      	strb	r3, [r7, #15]
      break;
 800a214:	e020      	b.n	800a258 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a21c:	4619      	mov	r1, r3
 800a21e:	6878      	ldr	r0, [r7, #4]
 800a220:	f000 fa52 	bl	800a6c8 <USBD_StdItfReq>
 800a224:	4603      	mov	r3, r0
 800a226:	73fb      	strb	r3, [r7, #15]
      break;
 800a228:	e016      	b.n	800a258 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a230:	4619      	mov	r1, r3
 800a232:	6878      	ldr	r0, [r7, #4]
 800a234:	f000 fa91 	bl	800a75a <USBD_StdEPReq>
 800a238:	4603      	mov	r3, r0
 800a23a:	73fb      	strb	r3, [r7, #15]
      break;
 800a23c:	e00c      	b.n	800a258 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a244:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a248:	b2db      	uxtb	r3, r3
 800a24a:	4619      	mov	r1, r3
 800a24c:	6878      	ldr	r0, [r7, #4]
 800a24e:	f001 fbf5 	bl	800ba3c <USBD_LL_StallEP>
 800a252:	4603      	mov	r3, r0
 800a254:	73fb      	strb	r3, [r7, #15]
      break;
 800a256:	bf00      	nop
  }

  return ret;
 800a258:	7bfb      	ldrb	r3, [r7, #15]
}
 800a25a:	4618      	mov	r0, r3
 800a25c:	3710      	adds	r7, #16
 800a25e:	46bd      	mov	sp, r7
 800a260:	bd80      	pop	{r7, pc}

0800a262 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a262:	b580      	push	{r7, lr}
 800a264:	b086      	sub	sp, #24
 800a266:	af00      	add	r7, sp, #0
 800a268:	60f8      	str	r0, [r7, #12]
 800a26a:	460b      	mov	r3, r1
 800a26c:	607a      	str	r2, [r7, #4]
 800a26e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800a270:	7afb      	ldrb	r3, [r7, #11]
 800a272:	2b00      	cmp	r3, #0
 800a274:	d138      	bne.n	800a2e8 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800a27c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a284:	2b03      	cmp	r3, #3
 800a286:	d14a      	bne.n	800a31e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800a288:	693b      	ldr	r3, [r7, #16]
 800a28a:	689a      	ldr	r2, [r3, #8]
 800a28c:	693b      	ldr	r3, [r7, #16]
 800a28e:	68db      	ldr	r3, [r3, #12]
 800a290:	429a      	cmp	r2, r3
 800a292:	d913      	bls.n	800a2bc <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a294:	693b      	ldr	r3, [r7, #16]
 800a296:	689a      	ldr	r2, [r3, #8]
 800a298:	693b      	ldr	r3, [r7, #16]
 800a29a:	68db      	ldr	r3, [r3, #12]
 800a29c:	1ad2      	subs	r2, r2, r3
 800a29e:	693b      	ldr	r3, [r7, #16]
 800a2a0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a2a2:	693b      	ldr	r3, [r7, #16]
 800a2a4:	68da      	ldr	r2, [r3, #12]
 800a2a6:	693b      	ldr	r3, [r7, #16]
 800a2a8:	689b      	ldr	r3, [r3, #8]
 800a2aa:	4293      	cmp	r3, r2
 800a2ac:	bf28      	it	cs
 800a2ae:	4613      	movcs	r3, r2
 800a2b0:	461a      	mov	r2, r3
 800a2b2:	6879      	ldr	r1, [r7, #4]
 800a2b4:	68f8      	ldr	r0, [r7, #12]
 800a2b6:	f000 ffc5 	bl	800b244 <USBD_CtlContinueRx>
 800a2ba:	e030      	b.n	800a31e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a2c2:	b2db      	uxtb	r3, r3
 800a2c4:	2b03      	cmp	r3, #3
 800a2c6:	d10b      	bne.n	800a2e0 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a2ce:	691b      	ldr	r3, [r3, #16]
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d005      	beq.n	800a2e0 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a2da:	691b      	ldr	r3, [r3, #16]
 800a2dc:	68f8      	ldr	r0, [r7, #12]
 800a2de:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a2e0:	68f8      	ldr	r0, [r7, #12]
 800a2e2:	f000 ffc0 	bl	800b266 <USBD_CtlSendStatus>
 800a2e6:	e01a      	b.n	800a31e <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a2ee:	b2db      	uxtb	r3, r3
 800a2f0:	2b03      	cmp	r3, #3
 800a2f2:	d114      	bne.n	800a31e <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a2fa:	699b      	ldr	r3, [r3, #24]
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d00e      	beq.n	800a31e <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a306:	699b      	ldr	r3, [r3, #24]
 800a308:	7afa      	ldrb	r2, [r7, #11]
 800a30a:	4611      	mov	r1, r2
 800a30c:	68f8      	ldr	r0, [r7, #12]
 800a30e:	4798      	blx	r3
 800a310:	4603      	mov	r3, r0
 800a312:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800a314:	7dfb      	ldrb	r3, [r7, #23]
 800a316:	2b00      	cmp	r3, #0
 800a318:	d001      	beq.n	800a31e <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800a31a:	7dfb      	ldrb	r3, [r7, #23]
 800a31c:	e000      	b.n	800a320 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800a31e:	2300      	movs	r3, #0
}
 800a320:	4618      	mov	r0, r3
 800a322:	3718      	adds	r7, #24
 800a324:	46bd      	mov	sp, r7
 800a326:	bd80      	pop	{r7, pc}

0800a328 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a328:	b580      	push	{r7, lr}
 800a32a:	b086      	sub	sp, #24
 800a32c:	af00      	add	r7, sp, #0
 800a32e:	60f8      	str	r0, [r7, #12]
 800a330:	460b      	mov	r3, r1
 800a332:	607a      	str	r2, [r7, #4]
 800a334:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800a336:	7afb      	ldrb	r3, [r7, #11]
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d16b      	bne.n	800a414 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	3314      	adds	r3, #20
 800a340:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a348:	2b02      	cmp	r3, #2
 800a34a:	d156      	bne.n	800a3fa <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800a34c:	693b      	ldr	r3, [r7, #16]
 800a34e:	689a      	ldr	r2, [r3, #8]
 800a350:	693b      	ldr	r3, [r7, #16]
 800a352:	68db      	ldr	r3, [r3, #12]
 800a354:	429a      	cmp	r2, r3
 800a356:	d914      	bls.n	800a382 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a358:	693b      	ldr	r3, [r7, #16]
 800a35a:	689a      	ldr	r2, [r3, #8]
 800a35c:	693b      	ldr	r3, [r7, #16]
 800a35e:	68db      	ldr	r3, [r3, #12]
 800a360:	1ad2      	subs	r2, r2, r3
 800a362:	693b      	ldr	r3, [r7, #16]
 800a364:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a366:	693b      	ldr	r3, [r7, #16]
 800a368:	689b      	ldr	r3, [r3, #8]
 800a36a:	461a      	mov	r2, r3
 800a36c:	6879      	ldr	r1, [r7, #4]
 800a36e:	68f8      	ldr	r0, [r7, #12]
 800a370:	f000 ff3a 	bl	800b1e8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a374:	2300      	movs	r3, #0
 800a376:	2200      	movs	r2, #0
 800a378:	2100      	movs	r1, #0
 800a37a:	68f8      	ldr	r0, [r7, #12]
 800a37c:	f001 fc08 	bl	800bb90 <USBD_LL_PrepareReceive>
 800a380:	e03b      	b.n	800a3fa <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a382:	693b      	ldr	r3, [r7, #16]
 800a384:	68da      	ldr	r2, [r3, #12]
 800a386:	693b      	ldr	r3, [r7, #16]
 800a388:	689b      	ldr	r3, [r3, #8]
 800a38a:	429a      	cmp	r2, r3
 800a38c:	d11c      	bne.n	800a3c8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a38e:	693b      	ldr	r3, [r7, #16]
 800a390:	685a      	ldr	r2, [r3, #4]
 800a392:	693b      	ldr	r3, [r7, #16]
 800a394:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a396:	429a      	cmp	r2, r3
 800a398:	d316      	bcc.n	800a3c8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a39a:	693b      	ldr	r3, [r7, #16]
 800a39c:	685a      	ldr	r2, [r3, #4]
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a3a4:	429a      	cmp	r2, r3
 800a3a6:	d20f      	bcs.n	800a3c8 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a3a8:	2200      	movs	r2, #0
 800a3aa:	2100      	movs	r1, #0
 800a3ac:	68f8      	ldr	r0, [r7, #12]
 800a3ae:	f000 ff1b 	bl	800b1e8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	2200      	movs	r2, #0
 800a3b6:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a3ba:	2300      	movs	r3, #0
 800a3bc:	2200      	movs	r2, #0
 800a3be:	2100      	movs	r1, #0
 800a3c0:	68f8      	ldr	r0, [r7, #12]
 800a3c2:	f001 fbe5 	bl	800bb90 <USBD_LL_PrepareReceive>
 800a3c6:	e018      	b.n	800a3fa <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a3ce:	b2db      	uxtb	r3, r3
 800a3d0:	2b03      	cmp	r3, #3
 800a3d2:	d10b      	bne.n	800a3ec <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a3da:	68db      	ldr	r3, [r3, #12]
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d005      	beq.n	800a3ec <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a3e6:	68db      	ldr	r3, [r3, #12]
 800a3e8:	68f8      	ldr	r0, [r7, #12]
 800a3ea:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a3ec:	2180      	movs	r1, #128	@ 0x80
 800a3ee:	68f8      	ldr	r0, [r7, #12]
 800a3f0:	f001 fb24 	bl	800ba3c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a3f4:	68f8      	ldr	r0, [r7, #12]
 800a3f6:	f000 ff49 	bl	800b28c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800a400:	2b01      	cmp	r3, #1
 800a402:	d122      	bne.n	800a44a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800a404:	68f8      	ldr	r0, [r7, #12]
 800a406:	f7ff fe98 	bl	800a13a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	2200      	movs	r2, #0
 800a40e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800a412:	e01a      	b.n	800a44a <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a41a:	b2db      	uxtb	r3, r3
 800a41c:	2b03      	cmp	r3, #3
 800a41e:	d114      	bne.n	800a44a <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a426:	695b      	ldr	r3, [r3, #20]
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d00e      	beq.n	800a44a <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a432:	695b      	ldr	r3, [r3, #20]
 800a434:	7afa      	ldrb	r2, [r7, #11]
 800a436:	4611      	mov	r1, r2
 800a438:	68f8      	ldr	r0, [r7, #12]
 800a43a:	4798      	blx	r3
 800a43c:	4603      	mov	r3, r0
 800a43e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800a440:	7dfb      	ldrb	r3, [r7, #23]
 800a442:	2b00      	cmp	r3, #0
 800a444:	d001      	beq.n	800a44a <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800a446:	7dfb      	ldrb	r3, [r7, #23]
 800a448:	e000      	b.n	800a44c <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800a44a:	2300      	movs	r3, #0
}
 800a44c:	4618      	mov	r0, r3
 800a44e:	3718      	adds	r7, #24
 800a450:	46bd      	mov	sp, r7
 800a452:	bd80      	pop	{r7, pc}

0800a454 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a454:	b580      	push	{r7, lr}
 800a456:	b082      	sub	sp, #8
 800a458:	af00      	add	r7, sp, #0
 800a45a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	2201      	movs	r2, #1
 800a460:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	2200      	movs	r2, #0
 800a468:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	2200      	movs	r2, #0
 800a470:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	2200      	movs	r2, #0
 800a476:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a480:	2b00      	cmp	r3, #0
 800a482:	d101      	bne.n	800a488 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800a484:	2303      	movs	r3, #3
 800a486:	e02f      	b.n	800a4e8 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d00f      	beq.n	800a4b2 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a498:	685b      	ldr	r3, [r3, #4]
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d009      	beq.n	800a4b2 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a4a4:	685b      	ldr	r3, [r3, #4]
 800a4a6:	687a      	ldr	r2, [r7, #4]
 800a4a8:	6852      	ldr	r2, [r2, #4]
 800a4aa:	b2d2      	uxtb	r2, r2
 800a4ac:	4611      	mov	r1, r2
 800a4ae:	6878      	ldr	r0, [r7, #4]
 800a4b0:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a4b2:	2340      	movs	r3, #64	@ 0x40
 800a4b4:	2200      	movs	r2, #0
 800a4b6:	2100      	movs	r1, #0
 800a4b8:	6878      	ldr	r0, [r7, #4]
 800a4ba:	f001 fa7a 	bl	800b9b2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	2201      	movs	r2, #1
 800a4c2:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	2240      	movs	r2, #64	@ 0x40
 800a4ca:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a4ce:	2340      	movs	r3, #64	@ 0x40
 800a4d0:	2200      	movs	r2, #0
 800a4d2:	2180      	movs	r1, #128	@ 0x80
 800a4d4:	6878      	ldr	r0, [r7, #4]
 800a4d6:	f001 fa6c 	bl	800b9b2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	2201      	movs	r2, #1
 800a4de:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	2240      	movs	r2, #64	@ 0x40
 800a4e4:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800a4e6:	2300      	movs	r3, #0
}
 800a4e8:	4618      	mov	r0, r3
 800a4ea:	3708      	adds	r7, #8
 800a4ec:	46bd      	mov	sp, r7
 800a4ee:	bd80      	pop	{r7, pc}

0800a4f0 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a4f0:	b480      	push	{r7}
 800a4f2:	b083      	sub	sp, #12
 800a4f4:	af00      	add	r7, sp, #0
 800a4f6:	6078      	str	r0, [r7, #4]
 800a4f8:	460b      	mov	r3, r1
 800a4fa:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	78fa      	ldrb	r2, [r7, #3]
 800a500:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a502:	2300      	movs	r3, #0
}
 800a504:	4618      	mov	r0, r3
 800a506:	370c      	adds	r7, #12
 800a508:	46bd      	mov	sp, r7
 800a50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a50e:	4770      	bx	lr

0800a510 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a510:	b480      	push	{r7}
 800a512:	b083      	sub	sp, #12
 800a514:	af00      	add	r7, sp, #0
 800a516:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a51e:	b2da      	uxtb	r2, r3
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	2204      	movs	r2, #4
 800a52a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800a52e:	2300      	movs	r3, #0
}
 800a530:	4618      	mov	r0, r3
 800a532:	370c      	adds	r7, #12
 800a534:	46bd      	mov	sp, r7
 800a536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a53a:	4770      	bx	lr

0800a53c <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a53c:	b480      	push	{r7}
 800a53e:	b083      	sub	sp, #12
 800a540:	af00      	add	r7, sp, #0
 800a542:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a54a:	b2db      	uxtb	r3, r3
 800a54c:	2b04      	cmp	r3, #4
 800a54e:	d106      	bne.n	800a55e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800a556:	b2da      	uxtb	r2, r3
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800a55e:	2300      	movs	r3, #0
}
 800a560:	4618      	mov	r0, r3
 800a562:	370c      	adds	r7, #12
 800a564:	46bd      	mov	sp, r7
 800a566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a56a:	4770      	bx	lr

0800a56c <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a56c:	b580      	push	{r7, lr}
 800a56e:	b082      	sub	sp, #8
 800a570:	af00      	add	r7, sp, #0
 800a572:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d101      	bne.n	800a582 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800a57e:	2303      	movs	r3, #3
 800a580:	e012      	b.n	800a5a8 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a588:	b2db      	uxtb	r3, r3
 800a58a:	2b03      	cmp	r3, #3
 800a58c:	d10b      	bne.n	800a5a6 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a594:	69db      	ldr	r3, [r3, #28]
 800a596:	2b00      	cmp	r3, #0
 800a598:	d005      	beq.n	800a5a6 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a5a0:	69db      	ldr	r3, [r3, #28]
 800a5a2:	6878      	ldr	r0, [r7, #4]
 800a5a4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a5a6:	2300      	movs	r3, #0
}
 800a5a8:	4618      	mov	r0, r3
 800a5aa:	3708      	adds	r7, #8
 800a5ac:	46bd      	mov	sp, r7
 800a5ae:	bd80      	pop	{r7, pc}

0800a5b0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a5b0:	b480      	push	{r7}
 800a5b2:	b087      	sub	sp, #28
 800a5b4:	af00      	add	r7, sp, #0
 800a5b6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a5bc:	697b      	ldr	r3, [r7, #20]
 800a5be:	781b      	ldrb	r3, [r3, #0]
 800a5c0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a5c2:	697b      	ldr	r3, [r7, #20]
 800a5c4:	3301      	adds	r3, #1
 800a5c6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a5c8:	697b      	ldr	r3, [r7, #20]
 800a5ca:	781b      	ldrb	r3, [r3, #0]
 800a5cc:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a5ce:	8a3b      	ldrh	r3, [r7, #16]
 800a5d0:	021b      	lsls	r3, r3, #8
 800a5d2:	b21a      	sxth	r2, r3
 800a5d4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a5d8:	4313      	orrs	r3, r2
 800a5da:	b21b      	sxth	r3, r3
 800a5dc:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a5de:	89fb      	ldrh	r3, [r7, #14]
}
 800a5e0:	4618      	mov	r0, r3
 800a5e2:	371c      	adds	r7, #28
 800a5e4:	46bd      	mov	sp, r7
 800a5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ea:	4770      	bx	lr

0800a5ec <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a5ec:	b580      	push	{r7, lr}
 800a5ee:	b084      	sub	sp, #16
 800a5f0:	af00      	add	r7, sp, #0
 800a5f2:	6078      	str	r0, [r7, #4]
 800a5f4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a5f6:	2300      	movs	r3, #0
 800a5f8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a5fa:	683b      	ldr	r3, [r7, #0]
 800a5fc:	781b      	ldrb	r3, [r3, #0]
 800a5fe:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a602:	2b40      	cmp	r3, #64	@ 0x40
 800a604:	d005      	beq.n	800a612 <USBD_StdDevReq+0x26>
 800a606:	2b40      	cmp	r3, #64	@ 0x40
 800a608:	d853      	bhi.n	800a6b2 <USBD_StdDevReq+0xc6>
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d00b      	beq.n	800a626 <USBD_StdDevReq+0x3a>
 800a60e:	2b20      	cmp	r3, #32
 800a610:	d14f      	bne.n	800a6b2 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a618:	689b      	ldr	r3, [r3, #8]
 800a61a:	6839      	ldr	r1, [r7, #0]
 800a61c:	6878      	ldr	r0, [r7, #4]
 800a61e:	4798      	blx	r3
 800a620:	4603      	mov	r3, r0
 800a622:	73fb      	strb	r3, [r7, #15]
      break;
 800a624:	e04a      	b.n	800a6bc <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a626:	683b      	ldr	r3, [r7, #0]
 800a628:	785b      	ldrb	r3, [r3, #1]
 800a62a:	2b09      	cmp	r3, #9
 800a62c:	d83b      	bhi.n	800a6a6 <USBD_StdDevReq+0xba>
 800a62e:	a201      	add	r2, pc, #4	@ (adr r2, 800a634 <USBD_StdDevReq+0x48>)
 800a630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a634:	0800a689 	.word	0x0800a689
 800a638:	0800a69d 	.word	0x0800a69d
 800a63c:	0800a6a7 	.word	0x0800a6a7
 800a640:	0800a693 	.word	0x0800a693
 800a644:	0800a6a7 	.word	0x0800a6a7
 800a648:	0800a667 	.word	0x0800a667
 800a64c:	0800a65d 	.word	0x0800a65d
 800a650:	0800a6a7 	.word	0x0800a6a7
 800a654:	0800a67f 	.word	0x0800a67f
 800a658:	0800a671 	.word	0x0800a671
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a65c:	6839      	ldr	r1, [r7, #0]
 800a65e:	6878      	ldr	r0, [r7, #4]
 800a660:	f000 f9de 	bl	800aa20 <USBD_GetDescriptor>
          break;
 800a664:	e024      	b.n	800a6b0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a666:	6839      	ldr	r1, [r7, #0]
 800a668:	6878      	ldr	r0, [r7, #4]
 800a66a:	f000 fb6d 	bl	800ad48 <USBD_SetAddress>
          break;
 800a66e:	e01f      	b.n	800a6b0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800a670:	6839      	ldr	r1, [r7, #0]
 800a672:	6878      	ldr	r0, [r7, #4]
 800a674:	f000 fbac 	bl	800add0 <USBD_SetConfig>
 800a678:	4603      	mov	r3, r0
 800a67a:	73fb      	strb	r3, [r7, #15]
          break;
 800a67c:	e018      	b.n	800a6b0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a67e:	6839      	ldr	r1, [r7, #0]
 800a680:	6878      	ldr	r0, [r7, #4]
 800a682:	f000 fc4b 	bl	800af1c <USBD_GetConfig>
          break;
 800a686:	e013      	b.n	800a6b0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a688:	6839      	ldr	r1, [r7, #0]
 800a68a:	6878      	ldr	r0, [r7, #4]
 800a68c:	f000 fc7c 	bl	800af88 <USBD_GetStatus>
          break;
 800a690:	e00e      	b.n	800a6b0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a692:	6839      	ldr	r1, [r7, #0]
 800a694:	6878      	ldr	r0, [r7, #4]
 800a696:	f000 fcab 	bl	800aff0 <USBD_SetFeature>
          break;
 800a69a:	e009      	b.n	800a6b0 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a69c:	6839      	ldr	r1, [r7, #0]
 800a69e:	6878      	ldr	r0, [r7, #4]
 800a6a0:	f000 fcba 	bl	800b018 <USBD_ClrFeature>
          break;
 800a6a4:	e004      	b.n	800a6b0 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800a6a6:	6839      	ldr	r1, [r7, #0]
 800a6a8:	6878      	ldr	r0, [r7, #4]
 800a6aa:	f000 fd11 	bl	800b0d0 <USBD_CtlError>
          break;
 800a6ae:	bf00      	nop
      }
      break;
 800a6b0:	e004      	b.n	800a6bc <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800a6b2:	6839      	ldr	r1, [r7, #0]
 800a6b4:	6878      	ldr	r0, [r7, #4]
 800a6b6:	f000 fd0b 	bl	800b0d0 <USBD_CtlError>
      break;
 800a6ba:	bf00      	nop
  }

  return ret;
 800a6bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6be:	4618      	mov	r0, r3
 800a6c0:	3710      	adds	r7, #16
 800a6c2:	46bd      	mov	sp, r7
 800a6c4:	bd80      	pop	{r7, pc}
 800a6c6:	bf00      	nop

0800a6c8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a6c8:	b580      	push	{r7, lr}
 800a6ca:	b084      	sub	sp, #16
 800a6cc:	af00      	add	r7, sp, #0
 800a6ce:	6078      	str	r0, [r7, #4]
 800a6d0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a6d2:	2300      	movs	r3, #0
 800a6d4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a6d6:	683b      	ldr	r3, [r7, #0]
 800a6d8:	781b      	ldrb	r3, [r3, #0]
 800a6da:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a6de:	2b40      	cmp	r3, #64	@ 0x40
 800a6e0:	d005      	beq.n	800a6ee <USBD_StdItfReq+0x26>
 800a6e2:	2b40      	cmp	r3, #64	@ 0x40
 800a6e4:	d82f      	bhi.n	800a746 <USBD_StdItfReq+0x7e>
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d001      	beq.n	800a6ee <USBD_StdItfReq+0x26>
 800a6ea:	2b20      	cmp	r3, #32
 800a6ec:	d12b      	bne.n	800a746 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a6f4:	b2db      	uxtb	r3, r3
 800a6f6:	3b01      	subs	r3, #1
 800a6f8:	2b02      	cmp	r3, #2
 800a6fa:	d81d      	bhi.n	800a738 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a6fc:	683b      	ldr	r3, [r7, #0]
 800a6fe:	889b      	ldrh	r3, [r3, #4]
 800a700:	b2db      	uxtb	r3, r3
 800a702:	2b01      	cmp	r3, #1
 800a704:	d813      	bhi.n	800a72e <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a70c:	689b      	ldr	r3, [r3, #8]
 800a70e:	6839      	ldr	r1, [r7, #0]
 800a710:	6878      	ldr	r0, [r7, #4]
 800a712:	4798      	blx	r3
 800a714:	4603      	mov	r3, r0
 800a716:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a718:	683b      	ldr	r3, [r7, #0]
 800a71a:	88db      	ldrh	r3, [r3, #6]
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d110      	bne.n	800a742 <USBD_StdItfReq+0x7a>
 800a720:	7bfb      	ldrb	r3, [r7, #15]
 800a722:	2b00      	cmp	r3, #0
 800a724:	d10d      	bne.n	800a742 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800a726:	6878      	ldr	r0, [r7, #4]
 800a728:	f000 fd9d 	bl	800b266 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a72c:	e009      	b.n	800a742 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800a72e:	6839      	ldr	r1, [r7, #0]
 800a730:	6878      	ldr	r0, [r7, #4]
 800a732:	f000 fccd 	bl	800b0d0 <USBD_CtlError>
          break;
 800a736:	e004      	b.n	800a742 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800a738:	6839      	ldr	r1, [r7, #0]
 800a73a:	6878      	ldr	r0, [r7, #4]
 800a73c:	f000 fcc8 	bl	800b0d0 <USBD_CtlError>
          break;
 800a740:	e000      	b.n	800a744 <USBD_StdItfReq+0x7c>
          break;
 800a742:	bf00      	nop
      }
      break;
 800a744:	e004      	b.n	800a750 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800a746:	6839      	ldr	r1, [r7, #0]
 800a748:	6878      	ldr	r0, [r7, #4]
 800a74a:	f000 fcc1 	bl	800b0d0 <USBD_CtlError>
      break;
 800a74e:	bf00      	nop
  }

  return ret;
 800a750:	7bfb      	ldrb	r3, [r7, #15]
}
 800a752:	4618      	mov	r0, r3
 800a754:	3710      	adds	r7, #16
 800a756:	46bd      	mov	sp, r7
 800a758:	bd80      	pop	{r7, pc}

0800a75a <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a75a:	b580      	push	{r7, lr}
 800a75c:	b084      	sub	sp, #16
 800a75e:	af00      	add	r7, sp, #0
 800a760:	6078      	str	r0, [r7, #4]
 800a762:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800a764:	2300      	movs	r3, #0
 800a766:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800a768:	683b      	ldr	r3, [r7, #0]
 800a76a:	889b      	ldrh	r3, [r3, #4]
 800a76c:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a76e:	683b      	ldr	r3, [r7, #0]
 800a770:	781b      	ldrb	r3, [r3, #0]
 800a772:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a776:	2b40      	cmp	r3, #64	@ 0x40
 800a778:	d007      	beq.n	800a78a <USBD_StdEPReq+0x30>
 800a77a:	2b40      	cmp	r3, #64	@ 0x40
 800a77c:	f200 8145 	bhi.w	800aa0a <USBD_StdEPReq+0x2b0>
 800a780:	2b00      	cmp	r3, #0
 800a782:	d00c      	beq.n	800a79e <USBD_StdEPReq+0x44>
 800a784:	2b20      	cmp	r3, #32
 800a786:	f040 8140 	bne.w	800aa0a <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a790:	689b      	ldr	r3, [r3, #8]
 800a792:	6839      	ldr	r1, [r7, #0]
 800a794:	6878      	ldr	r0, [r7, #4]
 800a796:	4798      	blx	r3
 800a798:	4603      	mov	r3, r0
 800a79a:	73fb      	strb	r3, [r7, #15]
      break;
 800a79c:	e13a      	b.n	800aa14 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a79e:	683b      	ldr	r3, [r7, #0]
 800a7a0:	785b      	ldrb	r3, [r3, #1]
 800a7a2:	2b03      	cmp	r3, #3
 800a7a4:	d007      	beq.n	800a7b6 <USBD_StdEPReq+0x5c>
 800a7a6:	2b03      	cmp	r3, #3
 800a7a8:	f300 8129 	bgt.w	800a9fe <USBD_StdEPReq+0x2a4>
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d07f      	beq.n	800a8b0 <USBD_StdEPReq+0x156>
 800a7b0:	2b01      	cmp	r3, #1
 800a7b2:	d03c      	beq.n	800a82e <USBD_StdEPReq+0xd4>
 800a7b4:	e123      	b.n	800a9fe <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a7bc:	b2db      	uxtb	r3, r3
 800a7be:	2b02      	cmp	r3, #2
 800a7c0:	d002      	beq.n	800a7c8 <USBD_StdEPReq+0x6e>
 800a7c2:	2b03      	cmp	r3, #3
 800a7c4:	d016      	beq.n	800a7f4 <USBD_StdEPReq+0x9a>
 800a7c6:	e02c      	b.n	800a822 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a7c8:	7bbb      	ldrb	r3, [r7, #14]
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d00d      	beq.n	800a7ea <USBD_StdEPReq+0x90>
 800a7ce:	7bbb      	ldrb	r3, [r7, #14]
 800a7d0:	2b80      	cmp	r3, #128	@ 0x80
 800a7d2:	d00a      	beq.n	800a7ea <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a7d4:	7bbb      	ldrb	r3, [r7, #14]
 800a7d6:	4619      	mov	r1, r3
 800a7d8:	6878      	ldr	r0, [r7, #4]
 800a7da:	f001 f92f 	bl	800ba3c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a7de:	2180      	movs	r1, #128	@ 0x80
 800a7e0:	6878      	ldr	r0, [r7, #4]
 800a7e2:	f001 f92b 	bl	800ba3c <USBD_LL_StallEP>
 800a7e6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a7e8:	e020      	b.n	800a82c <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800a7ea:	6839      	ldr	r1, [r7, #0]
 800a7ec:	6878      	ldr	r0, [r7, #4]
 800a7ee:	f000 fc6f 	bl	800b0d0 <USBD_CtlError>
              break;
 800a7f2:	e01b      	b.n	800a82c <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a7f4:	683b      	ldr	r3, [r7, #0]
 800a7f6:	885b      	ldrh	r3, [r3, #2]
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d10e      	bne.n	800a81a <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a7fc:	7bbb      	ldrb	r3, [r7, #14]
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d00b      	beq.n	800a81a <USBD_StdEPReq+0xc0>
 800a802:	7bbb      	ldrb	r3, [r7, #14]
 800a804:	2b80      	cmp	r3, #128	@ 0x80
 800a806:	d008      	beq.n	800a81a <USBD_StdEPReq+0xc0>
 800a808:	683b      	ldr	r3, [r7, #0]
 800a80a:	88db      	ldrh	r3, [r3, #6]
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d104      	bne.n	800a81a <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800a810:	7bbb      	ldrb	r3, [r7, #14]
 800a812:	4619      	mov	r1, r3
 800a814:	6878      	ldr	r0, [r7, #4]
 800a816:	f001 f911 	bl	800ba3c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800a81a:	6878      	ldr	r0, [r7, #4]
 800a81c:	f000 fd23 	bl	800b266 <USBD_CtlSendStatus>

              break;
 800a820:	e004      	b.n	800a82c <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800a822:	6839      	ldr	r1, [r7, #0]
 800a824:	6878      	ldr	r0, [r7, #4]
 800a826:	f000 fc53 	bl	800b0d0 <USBD_CtlError>
              break;
 800a82a:	bf00      	nop
          }
          break;
 800a82c:	e0ec      	b.n	800aa08 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a834:	b2db      	uxtb	r3, r3
 800a836:	2b02      	cmp	r3, #2
 800a838:	d002      	beq.n	800a840 <USBD_StdEPReq+0xe6>
 800a83a:	2b03      	cmp	r3, #3
 800a83c:	d016      	beq.n	800a86c <USBD_StdEPReq+0x112>
 800a83e:	e030      	b.n	800a8a2 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a840:	7bbb      	ldrb	r3, [r7, #14]
 800a842:	2b00      	cmp	r3, #0
 800a844:	d00d      	beq.n	800a862 <USBD_StdEPReq+0x108>
 800a846:	7bbb      	ldrb	r3, [r7, #14]
 800a848:	2b80      	cmp	r3, #128	@ 0x80
 800a84a:	d00a      	beq.n	800a862 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a84c:	7bbb      	ldrb	r3, [r7, #14]
 800a84e:	4619      	mov	r1, r3
 800a850:	6878      	ldr	r0, [r7, #4]
 800a852:	f001 f8f3 	bl	800ba3c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a856:	2180      	movs	r1, #128	@ 0x80
 800a858:	6878      	ldr	r0, [r7, #4]
 800a85a:	f001 f8ef 	bl	800ba3c <USBD_LL_StallEP>
 800a85e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a860:	e025      	b.n	800a8ae <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800a862:	6839      	ldr	r1, [r7, #0]
 800a864:	6878      	ldr	r0, [r7, #4]
 800a866:	f000 fc33 	bl	800b0d0 <USBD_CtlError>
              break;
 800a86a:	e020      	b.n	800a8ae <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a86c:	683b      	ldr	r3, [r7, #0]
 800a86e:	885b      	ldrh	r3, [r3, #2]
 800a870:	2b00      	cmp	r3, #0
 800a872:	d11b      	bne.n	800a8ac <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a874:	7bbb      	ldrb	r3, [r7, #14]
 800a876:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d004      	beq.n	800a888 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800a87e:	7bbb      	ldrb	r3, [r7, #14]
 800a880:	4619      	mov	r1, r3
 800a882:	6878      	ldr	r0, [r7, #4]
 800a884:	f001 f8f9 	bl	800ba7a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800a888:	6878      	ldr	r0, [r7, #4]
 800a88a:	f000 fcec 	bl	800b266 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a894:	689b      	ldr	r3, [r3, #8]
 800a896:	6839      	ldr	r1, [r7, #0]
 800a898:	6878      	ldr	r0, [r7, #4]
 800a89a:	4798      	blx	r3
 800a89c:	4603      	mov	r3, r0
 800a89e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800a8a0:	e004      	b.n	800a8ac <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800a8a2:	6839      	ldr	r1, [r7, #0]
 800a8a4:	6878      	ldr	r0, [r7, #4]
 800a8a6:	f000 fc13 	bl	800b0d0 <USBD_CtlError>
              break;
 800a8aa:	e000      	b.n	800a8ae <USBD_StdEPReq+0x154>
              break;
 800a8ac:	bf00      	nop
          }
          break;
 800a8ae:	e0ab      	b.n	800aa08 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a8b6:	b2db      	uxtb	r3, r3
 800a8b8:	2b02      	cmp	r3, #2
 800a8ba:	d002      	beq.n	800a8c2 <USBD_StdEPReq+0x168>
 800a8bc:	2b03      	cmp	r3, #3
 800a8be:	d032      	beq.n	800a926 <USBD_StdEPReq+0x1cc>
 800a8c0:	e097      	b.n	800a9f2 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a8c2:	7bbb      	ldrb	r3, [r7, #14]
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d007      	beq.n	800a8d8 <USBD_StdEPReq+0x17e>
 800a8c8:	7bbb      	ldrb	r3, [r7, #14]
 800a8ca:	2b80      	cmp	r3, #128	@ 0x80
 800a8cc:	d004      	beq.n	800a8d8 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800a8ce:	6839      	ldr	r1, [r7, #0]
 800a8d0:	6878      	ldr	r0, [r7, #4]
 800a8d2:	f000 fbfd 	bl	800b0d0 <USBD_CtlError>
                break;
 800a8d6:	e091      	b.n	800a9fc <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a8d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	da0b      	bge.n	800a8f8 <USBD_StdEPReq+0x19e>
 800a8e0:	7bbb      	ldrb	r3, [r7, #14]
 800a8e2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a8e6:	4613      	mov	r3, r2
 800a8e8:	009b      	lsls	r3, r3, #2
 800a8ea:	4413      	add	r3, r2
 800a8ec:	009b      	lsls	r3, r3, #2
 800a8ee:	3310      	adds	r3, #16
 800a8f0:	687a      	ldr	r2, [r7, #4]
 800a8f2:	4413      	add	r3, r2
 800a8f4:	3304      	adds	r3, #4
 800a8f6:	e00b      	b.n	800a910 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a8f8:	7bbb      	ldrb	r3, [r7, #14]
 800a8fa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a8fe:	4613      	mov	r3, r2
 800a900:	009b      	lsls	r3, r3, #2
 800a902:	4413      	add	r3, r2
 800a904:	009b      	lsls	r3, r3, #2
 800a906:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a90a:	687a      	ldr	r2, [r7, #4]
 800a90c:	4413      	add	r3, r2
 800a90e:	3304      	adds	r3, #4
 800a910:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a912:	68bb      	ldr	r3, [r7, #8]
 800a914:	2200      	movs	r2, #0
 800a916:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a918:	68bb      	ldr	r3, [r7, #8]
 800a91a:	2202      	movs	r2, #2
 800a91c:	4619      	mov	r1, r3
 800a91e:	6878      	ldr	r0, [r7, #4]
 800a920:	f000 fc47 	bl	800b1b2 <USBD_CtlSendData>
              break;
 800a924:	e06a      	b.n	800a9fc <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a926:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	da11      	bge.n	800a952 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a92e:	7bbb      	ldrb	r3, [r7, #14]
 800a930:	f003 020f 	and.w	r2, r3, #15
 800a934:	6879      	ldr	r1, [r7, #4]
 800a936:	4613      	mov	r3, r2
 800a938:	009b      	lsls	r3, r3, #2
 800a93a:	4413      	add	r3, r2
 800a93c:	009b      	lsls	r3, r3, #2
 800a93e:	440b      	add	r3, r1
 800a940:	3324      	adds	r3, #36	@ 0x24
 800a942:	881b      	ldrh	r3, [r3, #0]
 800a944:	2b00      	cmp	r3, #0
 800a946:	d117      	bne.n	800a978 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800a948:	6839      	ldr	r1, [r7, #0]
 800a94a:	6878      	ldr	r0, [r7, #4]
 800a94c:	f000 fbc0 	bl	800b0d0 <USBD_CtlError>
                  break;
 800a950:	e054      	b.n	800a9fc <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a952:	7bbb      	ldrb	r3, [r7, #14]
 800a954:	f003 020f 	and.w	r2, r3, #15
 800a958:	6879      	ldr	r1, [r7, #4]
 800a95a:	4613      	mov	r3, r2
 800a95c:	009b      	lsls	r3, r3, #2
 800a95e:	4413      	add	r3, r2
 800a960:	009b      	lsls	r3, r3, #2
 800a962:	440b      	add	r3, r1
 800a964:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a968:	881b      	ldrh	r3, [r3, #0]
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d104      	bne.n	800a978 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800a96e:	6839      	ldr	r1, [r7, #0]
 800a970:	6878      	ldr	r0, [r7, #4]
 800a972:	f000 fbad 	bl	800b0d0 <USBD_CtlError>
                  break;
 800a976:	e041      	b.n	800a9fc <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a978:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	da0b      	bge.n	800a998 <USBD_StdEPReq+0x23e>
 800a980:	7bbb      	ldrb	r3, [r7, #14]
 800a982:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a986:	4613      	mov	r3, r2
 800a988:	009b      	lsls	r3, r3, #2
 800a98a:	4413      	add	r3, r2
 800a98c:	009b      	lsls	r3, r3, #2
 800a98e:	3310      	adds	r3, #16
 800a990:	687a      	ldr	r2, [r7, #4]
 800a992:	4413      	add	r3, r2
 800a994:	3304      	adds	r3, #4
 800a996:	e00b      	b.n	800a9b0 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a998:	7bbb      	ldrb	r3, [r7, #14]
 800a99a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a99e:	4613      	mov	r3, r2
 800a9a0:	009b      	lsls	r3, r3, #2
 800a9a2:	4413      	add	r3, r2
 800a9a4:	009b      	lsls	r3, r3, #2
 800a9a6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a9aa:	687a      	ldr	r2, [r7, #4]
 800a9ac:	4413      	add	r3, r2
 800a9ae:	3304      	adds	r3, #4
 800a9b0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a9b2:	7bbb      	ldrb	r3, [r7, #14]
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d002      	beq.n	800a9be <USBD_StdEPReq+0x264>
 800a9b8:	7bbb      	ldrb	r3, [r7, #14]
 800a9ba:	2b80      	cmp	r3, #128	@ 0x80
 800a9bc:	d103      	bne.n	800a9c6 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800a9be:	68bb      	ldr	r3, [r7, #8]
 800a9c0:	2200      	movs	r2, #0
 800a9c2:	601a      	str	r2, [r3, #0]
 800a9c4:	e00e      	b.n	800a9e4 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800a9c6:	7bbb      	ldrb	r3, [r7, #14]
 800a9c8:	4619      	mov	r1, r3
 800a9ca:	6878      	ldr	r0, [r7, #4]
 800a9cc:	f001 f874 	bl	800bab8 <USBD_LL_IsStallEP>
 800a9d0:	4603      	mov	r3, r0
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d003      	beq.n	800a9de <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800a9d6:	68bb      	ldr	r3, [r7, #8]
 800a9d8:	2201      	movs	r2, #1
 800a9da:	601a      	str	r2, [r3, #0]
 800a9dc:	e002      	b.n	800a9e4 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800a9de:	68bb      	ldr	r3, [r7, #8]
 800a9e0:	2200      	movs	r2, #0
 800a9e2:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a9e4:	68bb      	ldr	r3, [r7, #8]
 800a9e6:	2202      	movs	r2, #2
 800a9e8:	4619      	mov	r1, r3
 800a9ea:	6878      	ldr	r0, [r7, #4]
 800a9ec:	f000 fbe1 	bl	800b1b2 <USBD_CtlSendData>
              break;
 800a9f0:	e004      	b.n	800a9fc <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800a9f2:	6839      	ldr	r1, [r7, #0]
 800a9f4:	6878      	ldr	r0, [r7, #4]
 800a9f6:	f000 fb6b 	bl	800b0d0 <USBD_CtlError>
              break;
 800a9fa:	bf00      	nop
          }
          break;
 800a9fc:	e004      	b.n	800aa08 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800a9fe:	6839      	ldr	r1, [r7, #0]
 800aa00:	6878      	ldr	r0, [r7, #4]
 800aa02:	f000 fb65 	bl	800b0d0 <USBD_CtlError>
          break;
 800aa06:	bf00      	nop
      }
      break;
 800aa08:	e004      	b.n	800aa14 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800aa0a:	6839      	ldr	r1, [r7, #0]
 800aa0c:	6878      	ldr	r0, [r7, #4]
 800aa0e:	f000 fb5f 	bl	800b0d0 <USBD_CtlError>
      break;
 800aa12:	bf00      	nop
  }

  return ret;
 800aa14:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa16:	4618      	mov	r0, r3
 800aa18:	3710      	adds	r7, #16
 800aa1a:	46bd      	mov	sp, r7
 800aa1c:	bd80      	pop	{r7, pc}
	...

0800aa20 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aa20:	b580      	push	{r7, lr}
 800aa22:	b084      	sub	sp, #16
 800aa24:	af00      	add	r7, sp, #0
 800aa26:	6078      	str	r0, [r7, #4]
 800aa28:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800aa2a:	2300      	movs	r3, #0
 800aa2c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800aa2e:	2300      	movs	r3, #0
 800aa30:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800aa32:	2300      	movs	r3, #0
 800aa34:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800aa36:	683b      	ldr	r3, [r7, #0]
 800aa38:	885b      	ldrh	r3, [r3, #2]
 800aa3a:	0a1b      	lsrs	r3, r3, #8
 800aa3c:	b29b      	uxth	r3, r3
 800aa3e:	3b01      	subs	r3, #1
 800aa40:	2b0e      	cmp	r3, #14
 800aa42:	f200 8152 	bhi.w	800acea <USBD_GetDescriptor+0x2ca>
 800aa46:	a201      	add	r2, pc, #4	@ (adr r2, 800aa4c <USBD_GetDescriptor+0x2c>)
 800aa48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa4c:	0800aabd 	.word	0x0800aabd
 800aa50:	0800aad5 	.word	0x0800aad5
 800aa54:	0800ab15 	.word	0x0800ab15
 800aa58:	0800aceb 	.word	0x0800aceb
 800aa5c:	0800aceb 	.word	0x0800aceb
 800aa60:	0800ac8b 	.word	0x0800ac8b
 800aa64:	0800acb7 	.word	0x0800acb7
 800aa68:	0800aceb 	.word	0x0800aceb
 800aa6c:	0800aceb 	.word	0x0800aceb
 800aa70:	0800aceb 	.word	0x0800aceb
 800aa74:	0800aceb 	.word	0x0800aceb
 800aa78:	0800aceb 	.word	0x0800aceb
 800aa7c:	0800aceb 	.word	0x0800aceb
 800aa80:	0800aceb 	.word	0x0800aceb
 800aa84:	0800aa89 	.word	0x0800aa89
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800aa8e:	69db      	ldr	r3, [r3, #28]
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d00b      	beq.n	800aaac <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800aa9a:	69db      	ldr	r3, [r3, #28]
 800aa9c:	687a      	ldr	r2, [r7, #4]
 800aa9e:	7c12      	ldrb	r2, [r2, #16]
 800aaa0:	f107 0108 	add.w	r1, r7, #8
 800aaa4:	4610      	mov	r0, r2
 800aaa6:	4798      	blx	r3
 800aaa8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800aaaa:	e126      	b.n	800acfa <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800aaac:	6839      	ldr	r1, [r7, #0]
 800aaae:	6878      	ldr	r0, [r7, #4]
 800aab0:	f000 fb0e 	bl	800b0d0 <USBD_CtlError>
        err++;
 800aab4:	7afb      	ldrb	r3, [r7, #11]
 800aab6:	3301      	adds	r3, #1
 800aab8:	72fb      	strb	r3, [r7, #11]
      break;
 800aaba:	e11e      	b.n	800acfa <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	687a      	ldr	r2, [r7, #4]
 800aac6:	7c12      	ldrb	r2, [r2, #16]
 800aac8:	f107 0108 	add.w	r1, r7, #8
 800aacc:	4610      	mov	r0, r2
 800aace:	4798      	blx	r3
 800aad0:	60f8      	str	r0, [r7, #12]
      break;
 800aad2:	e112      	b.n	800acfa <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	7c1b      	ldrb	r3, [r3, #16]
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d10d      	bne.n	800aaf8 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aae2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aae4:	f107 0208 	add.w	r2, r7, #8
 800aae8:	4610      	mov	r0, r2
 800aaea:	4798      	blx	r3
 800aaec:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	3301      	adds	r3, #1
 800aaf2:	2202      	movs	r2, #2
 800aaf4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800aaf6:	e100      	b.n	800acfa <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aafe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab00:	f107 0208 	add.w	r2, r7, #8
 800ab04:	4610      	mov	r0, r2
 800ab06:	4798      	blx	r3
 800ab08:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	3301      	adds	r3, #1
 800ab0e:	2202      	movs	r2, #2
 800ab10:	701a      	strb	r2, [r3, #0]
      break;
 800ab12:	e0f2      	b.n	800acfa <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800ab14:	683b      	ldr	r3, [r7, #0]
 800ab16:	885b      	ldrh	r3, [r3, #2]
 800ab18:	b2db      	uxtb	r3, r3
 800ab1a:	2b05      	cmp	r3, #5
 800ab1c:	f200 80ac 	bhi.w	800ac78 <USBD_GetDescriptor+0x258>
 800ab20:	a201      	add	r2, pc, #4	@ (adr r2, 800ab28 <USBD_GetDescriptor+0x108>)
 800ab22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab26:	bf00      	nop
 800ab28:	0800ab41 	.word	0x0800ab41
 800ab2c:	0800ab75 	.word	0x0800ab75
 800ab30:	0800aba9 	.word	0x0800aba9
 800ab34:	0800abdd 	.word	0x0800abdd
 800ab38:	0800ac11 	.word	0x0800ac11
 800ab3c:	0800ac45 	.word	0x0800ac45
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ab46:	685b      	ldr	r3, [r3, #4]
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d00b      	beq.n	800ab64 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ab52:	685b      	ldr	r3, [r3, #4]
 800ab54:	687a      	ldr	r2, [r7, #4]
 800ab56:	7c12      	ldrb	r2, [r2, #16]
 800ab58:	f107 0108 	add.w	r1, r7, #8
 800ab5c:	4610      	mov	r0, r2
 800ab5e:	4798      	blx	r3
 800ab60:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ab62:	e091      	b.n	800ac88 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ab64:	6839      	ldr	r1, [r7, #0]
 800ab66:	6878      	ldr	r0, [r7, #4]
 800ab68:	f000 fab2 	bl	800b0d0 <USBD_CtlError>
            err++;
 800ab6c:	7afb      	ldrb	r3, [r7, #11]
 800ab6e:	3301      	adds	r3, #1
 800ab70:	72fb      	strb	r3, [r7, #11]
          break;
 800ab72:	e089      	b.n	800ac88 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ab7a:	689b      	ldr	r3, [r3, #8]
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d00b      	beq.n	800ab98 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ab86:	689b      	ldr	r3, [r3, #8]
 800ab88:	687a      	ldr	r2, [r7, #4]
 800ab8a:	7c12      	ldrb	r2, [r2, #16]
 800ab8c:	f107 0108 	add.w	r1, r7, #8
 800ab90:	4610      	mov	r0, r2
 800ab92:	4798      	blx	r3
 800ab94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ab96:	e077      	b.n	800ac88 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ab98:	6839      	ldr	r1, [r7, #0]
 800ab9a:	6878      	ldr	r0, [r7, #4]
 800ab9c:	f000 fa98 	bl	800b0d0 <USBD_CtlError>
            err++;
 800aba0:	7afb      	ldrb	r3, [r7, #11]
 800aba2:	3301      	adds	r3, #1
 800aba4:	72fb      	strb	r3, [r7, #11]
          break;
 800aba6:	e06f      	b.n	800ac88 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800abae:	68db      	ldr	r3, [r3, #12]
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d00b      	beq.n	800abcc <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800abba:	68db      	ldr	r3, [r3, #12]
 800abbc:	687a      	ldr	r2, [r7, #4]
 800abbe:	7c12      	ldrb	r2, [r2, #16]
 800abc0:	f107 0108 	add.w	r1, r7, #8
 800abc4:	4610      	mov	r0, r2
 800abc6:	4798      	blx	r3
 800abc8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800abca:	e05d      	b.n	800ac88 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800abcc:	6839      	ldr	r1, [r7, #0]
 800abce:	6878      	ldr	r0, [r7, #4]
 800abd0:	f000 fa7e 	bl	800b0d0 <USBD_CtlError>
            err++;
 800abd4:	7afb      	ldrb	r3, [r7, #11]
 800abd6:	3301      	adds	r3, #1
 800abd8:	72fb      	strb	r3, [r7, #11]
          break;
 800abda:	e055      	b.n	800ac88 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800abe2:	691b      	ldr	r3, [r3, #16]
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d00b      	beq.n	800ac00 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800abee:	691b      	ldr	r3, [r3, #16]
 800abf0:	687a      	ldr	r2, [r7, #4]
 800abf2:	7c12      	ldrb	r2, [r2, #16]
 800abf4:	f107 0108 	add.w	r1, r7, #8
 800abf8:	4610      	mov	r0, r2
 800abfa:	4798      	blx	r3
 800abfc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800abfe:	e043      	b.n	800ac88 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ac00:	6839      	ldr	r1, [r7, #0]
 800ac02:	6878      	ldr	r0, [r7, #4]
 800ac04:	f000 fa64 	bl	800b0d0 <USBD_CtlError>
            err++;
 800ac08:	7afb      	ldrb	r3, [r7, #11]
 800ac0a:	3301      	adds	r3, #1
 800ac0c:	72fb      	strb	r3, [r7, #11]
          break;
 800ac0e:	e03b      	b.n	800ac88 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ac16:	695b      	ldr	r3, [r3, #20]
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d00b      	beq.n	800ac34 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ac22:	695b      	ldr	r3, [r3, #20]
 800ac24:	687a      	ldr	r2, [r7, #4]
 800ac26:	7c12      	ldrb	r2, [r2, #16]
 800ac28:	f107 0108 	add.w	r1, r7, #8
 800ac2c:	4610      	mov	r0, r2
 800ac2e:	4798      	blx	r3
 800ac30:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ac32:	e029      	b.n	800ac88 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ac34:	6839      	ldr	r1, [r7, #0]
 800ac36:	6878      	ldr	r0, [r7, #4]
 800ac38:	f000 fa4a 	bl	800b0d0 <USBD_CtlError>
            err++;
 800ac3c:	7afb      	ldrb	r3, [r7, #11]
 800ac3e:	3301      	adds	r3, #1
 800ac40:	72fb      	strb	r3, [r7, #11]
          break;
 800ac42:	e021      	b.n	800ac88 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ac4a:	699b      	ldr	r3, [r3, #24]
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d00b      	beq.n	800ac68 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ac56:	699b      	ldr	r3, [r3, #24]
 800ac58:	687a      	ldr	r2, [r7, #4]
 800ac5a:	7c12      	ldrb	r2, [r2, #16]
 800ac5c:	f107 0108 	add.w	r1, r7, #8
 800ac60:	4610      	mov	r0, r2
 800ac62:	4798      	blx	r3
 800ac64:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ac66:	e00f      	b.n	800ac88 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ac68:	6839      	ldr	r1, [r7, #0]
 800ac6a:	6878      	ldr	r0, [r7, #4]
 800ac6c:	f000 fa30 	bl	800b0d0 <USBD_CtlError>
            err++;
 800ac70:	7afb      	ldrb	r3, [r7, #11]
 800ac72:	3301      	adds	r3, #1
 800ac74:	72fb      	strb	r3, [r7, #11]
          break;
 800ac76:	e007      	b.n	800ac88 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800ac78:	6839      	ldr	r1, [r7, #0]
 800ac7a:	6878      	ldr	r0, [r7, #4]
 800ac7c:	f000 fa28 	bl	800b0d0 <USBD_CtlError>
          err++;
 800ac80:	7afb      	ldrb	r3, [r7, #11]
 800ac82:	3301      	adds	r3, #1
 800ac84:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800ac86:	bf00      	nop
      }
      break;
 800ac88:	e037      	b.n	800acfa <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	7c1b      	ldrb	r3, [r3, #16]
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d109      	bne.n	800aca6 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ac98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ac9a:	f107 0208 	add.w	r2, r7, #8
 800ac9e:	4610      	mov	r0, r2
 800aca0:	4798      	blx	r3
 800aca2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800aca4:	e029      	b.n	800acfa <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800aca6:	6839      	ldr	r1, [r7, #0]
 800aca8:	6878      	ldr	r0, [r7, #4]
 800acaa:	f000 fa11 	bl	800b0d0 <USBD_CtlError>
        err++;
 800acae:	7afb      	ldrb	r3, [r7, #11]
 800acb0:	3301      	adds	r3, #1
 800acb2:	72fb      	strb	r3, [r7, #11]
      break;
 800acb4:	e021      	b.n	800acfa <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	7c1b      	ldrb	r3, [r3, #16]
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d10d      	bne.n	800acda <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800acc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800acc6:	f107 0208 	add.w	r2, r7, #8
 800acca:	4610      	mov	r0, r2
 800accc:	4798      	blx	r3
 800acce:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	3301      	adds	r3, #1
 800acd4:	2207      	movs	r2, #7
 800acd6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800acd8:	e00f      	b.n	800acfa <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800acda:	6839      	ldr	r1, [r7, #0]
 800acdc:	6878      	ldr	r0, [r7, #4]
 800acde:	f000 f9f7 	bl	800b0d0 <USBD_CtlError>
        err++;
 800ace2:	7afb      	ldrb	r3, [r7, #11]
 800ace4:	3301      	adds	r3, #1
 800ace6:	72fb      	strb	r3, [r7, #11]
      break;
 800ace8:	e007      	b.n	800acfa <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800acea:	6839      	ldr	r1, [r7, #0]
 800acec:	6878      	ldr	r0, [r7, #4]
 800acee:	f000 f9ef 	bl	800b0d0 <USBD_CtlError>
      err++;
 800acf2:	7afb      	ldrb	r3, [r7, #11]
 800acf4:	3301      	adds	r3, #1
 800acf6:	72fb      	strb	r3, [r7, #11]
      break;
 800acf8:	bf00      	nop
  }

  if (err != 0U)
 800acfa:	7afb      	ldrb	r3, [r7, #11]
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d11e      	bne.n	800ad3e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800ad00:	683b      	ldr	r3, [r7, #0]
 800ad02:	88db      	ldrh	r3, [r3, #6]
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d016      	beq.n	800ad36 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800ad08:	893b      	ldrh	r3, [r7, #8]
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d00e      	beq.n	800ad2c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800ad0e:	683b      	ldr	r3, [r7, #0]
 800ad10:	88da      	ldrh	r2, [r3, #6]
 800ad12:	893b      	ldrh	r3, [r7, #8]
 800ad14:	4293      	cmp	r3, r2
 800ad16:	bf28      	it	cs
 800ad18:	4613      	movcs	r3, r2
 800ad1a:	b29b      	uxth	r3, r3
 800ad1c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800ad1e:	893b      	ldrh	r3, [r7, #8]
 800ad20:	461a      	mov	r2, r3
 800ad22:	68f9      	ldr	r1, [r7, #12]
 800ad24:	6878      	ldr	r0, [r7, #4]
 800ad26:	f000 fa44 	bl	800b1b2 <USBD_CtlSendData>
 800ad2a:	e009      	b.n	800ad40 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800ad2c:	6839      	ldr	r1, [r7, #0]
 800ad2e:	6878      	ldr	r0, [r7, #4]
 800ad30:	f000 f9ce 	bl	800b0d0 <USBD_CtlError>
 800ad34:	e004      	b.n	800ad40 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800ad36:	6878      	ldr	r0, [r7, #4]
 800ad38:	f000 fa95 	bl	800b266 <USBD_CtlSendStatus>
 800ad3c:	e000      	b.n	800ad40 <USBD_GetDescriptor+0x320>
    return;
 800ad3e:	bf00      	nop
  }
}
 800ad40:	3710      	adds	r7, #16
 800ad42:	46bd      	mov	sp, r7
 800ad44:	bd80      	pop	{r7, pc}
 800ad46:	bf00      	nop

0800ad48 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ad48:	b580      	push	{r7, lr}
 800ad4a:	b084      	sub	sp, #16
 800ad4c:	af00      	add	r7, sp, #0
 800ad4e:	6078      	str	r0, [r7, #4]
 800ad50:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800ad52:	683b      	ldr	r3, [r7, #0]
 800ad54:	889b      	ldrh	r3, [r3, #4]
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d131      	bne.n	800adbe <USBD_SetAddress+0x76>
 800ad5a:	683b      	ldr	r3, [r7, #0]
 800ad5c:	88db      	ldrh	r3, [r3, #6]
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d12d      	bne.n	800adbe <USBD_SetAddress+0x76>
 800ad62:	683b      	ldr	r3, [r7, #0]
 800ad64:	885b      	ldrh	r3, [r3, #2]
 800ad66:	2b7f      	cmp	r3, #127	@ 0x7f
 800ad68:	d829      	bhi.n	800adbe <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800ad6a:	683b      	ldr	r3, [r7, #0]
 800ad6c:	885b      	ldrh	r3, [r3, #2]
 800ad6e:	b2db      	uxtb	r3, r3
 800ad70:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ad74:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ad7c:	b2db      	uxtb	r3, r3
 800ad7e:	2b03      	cmp	r3, #3
 800ad80:	d104      	bne.n	800ad8c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800ad82:	6839      	ldr	r1, [r7, #0]
 800ad84:	6878      	ldr	r0, [r7, #4]
 800ad86:	f000 f9a3 	bl	800b0d0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ad8a:	e01d      	b.n	800adc8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	7bfa      	ldrb	r2, [r7, #15]
 800ad90:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800ad94:	7bfb      	ldrb	r3, [r7, #15]
 800ad96:	4619      	mov	r1, r3
 800ad98:	6878      	ldr	r0, [r7, #4]
 800ad9a:	f000 feb9 	bl	800bb10 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800ad9e:	6878      	ldr	r0, [r7, #4]
 800ada0:	f000 fa61 	bl	800b266 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800ada4:	7bfb      	ldrb	r3, [r7, #15]
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d004      	beq.n	800adb4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	2202      	movs	r2, #2
 800adae:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800adb2:	e009      	b.n	800adc8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	2201      	movs	r2, #1
 800adb8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800adbc:	e004      	b.n	800adc8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800adbe:	6839      	ldr	r1, [r7, #0]
 800adc0:	6878      	ldr	r0, [r7, #4]
 800adc2:	f000 f985 	bl	800b0d0 <USBD_CtlError>
  }
}
 800adc6:	bf00      	nop
 800adc8:	bf00      	nop
 800adca:	3710      	adds	r7, #16
 800adcc:	46bd      	mov	sp, r7
 800adce:	bd80      	pop	{r7, pc}

0800add0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800add0:	b580      	push	{r7, lr}
 800add2:	b084      	sub	sp, #16
 800add4:	af00      	add	r7, sp, #0
 800add6:	6078      	str	r0, [r7, #4]
 800add8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800adda:	2300      	movs	r3, #0
 800addc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800adde:	683b      	ldr	r3, [r7, #0]
 800ade0:	885b      	ldrh	r3, [r3, #2]
 800ade2:	b2da      	uxtb	r2, r3
 800ade4:	4b4c      	ldr	r3, [pc, #304]	@ (800af18 <USBD_SetConfig+0x148>)
 800ade6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800ade8:	4b4b      	ldr	r3, [pc, #300]	@ (800af18 <USBD_SetConfig+0x148>)
 800adea:	781b      	ldrb	r3, [r3, #0]
 800adec:	2b01      	cmp	r3, #1
 800adee:	d905      	bls.n	800adfc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800adf0:	6839      	ldr	r1, [r7, #0]
 800adf2:	6878      	ldr	r0, [r7, #4]
 800adf4:	f000 f96c 	bl	800b0d0 <USBD_CtlError>
    return USBD_FAIL;
 800adf8:	2303      	movs	r3, #3
 800adfa:	e088      	b.n	800af0e <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ae02:	b2db      	uxtb	r3, r3
 800ae04:	2b02      	cmp	r3, #2
 800ae06:	d002      	beq.n	800ae0e <USBD_SetConfig+0x3e>
 800ae08:	2b03      	cmp	r3, #3
 800ae0a:	d025      	beq.n	800ae58 <USBD_SetConfig+0x88>
 800ae0c:	e071      	b.n	800aef2 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800ae0e:	4b42      	ldr	r3, [pc, #264]	@ (800af18 <USBD_SetConfig+0x148>)
 800ae10:	781b      	ldrb	r3, [r3, #0]
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d01c      	beq.n	800ae50 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800ae16:	4b40      	ldr	r3, [pc, #256]	@ (800af18 <USBD_SetConfig+0x148>)
 800ae18:	781b      	ldrb	r3, [r3, #0]
 800ae1a:	461a      	mov	r2, r3
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ae20:	4b3d      	ldr	r3, [pc, #244]	@ (800af18 <USBD_SetConfig+0x148>)
 800ae22:	781b      	ldrb	r3, [r3, #0]
 800ae24:	4619      	mov	r1, r3
 800ae26:	6878      	ldr	r0, [r7, #4]
 800ae28:	f7ff f992 	bl	800a150 <USBD_SetClassConfig>
 800ae2c:	4603      	mov	r3, r0
 800ae2e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800ae30:	7bfb      	ldrb	r3, [r7, #15]
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d004      	beq.n	800ae40 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800ae36:	6839      	ldr	r1, [r7, #0]
 800ae38:	6878      	ldr	r0, [r7, #4]
 800ae3a:	f000 f949 	bl	800b0d0 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ae3e:	e065      	b.n	800af0c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800ae40:	6878      	ldr	r0, [r7, #4]
 800ae42:	f000 fa10 	bl	800b266 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	2203      	movs	r2, #3
 800ae4a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800ae4e:	e05d      	b.n	800af0c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800ae50:	6878      	ldr	r0, [r7, #4]
 800ae52:	f000 fa08 	bl	800b266 <USBD_CtlSendStatus>
      break;
 800ae56:	e059      	b.n	800af0c <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800ae58:	4b2f      	ldr	r3, [pc, #188]	@ (800af18 <USBD_SetConfig+0x148>)
 800ae5a:	781b      	ldrb	r3, [r3, #0]
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d112      	bne.n	800ae86 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	2202      	movs	r2, #2
 800ae64:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800ae68:	4b2b      	ldr	r3, [pc, #172]	@ (800af18 <USBD_SetConfig+0x148>)
 800ae6a:	781b      	ldrb	r3, [r3, #0]
 800ae6c:	461a      	mov	r2, r3
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ae72:	4b29      	ldr	r3, [pc, #164]	@ (800af18 <USBD_SetConfig+0x148>)
 800ae74:	781b      	ldrb	r3, [r3, #0]
 800ae76:	4619      	mov	r1, r3
 800ae78:	6878      	ldr	r0, [r7, #4]
 800ae7a:	f7ff f985 	bl	800a188 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800ae7e:	6878      	ldr	r0, [r7, #4]
 800ae80:	f000 f9f1 	bl	800b266 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ae84:	e042      	b.n	800af0c <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800ae86:	4b24      	ldr	r3, [pc, #144]	@ (800af18 <USBD_SetConfig+0x148>)
 800ae88:	781b      	ldrb	r3, [r3, #0]
 800ae8a:	461a      	mov	r2, r3
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	685b      	ldr	r3, [r3, #4]
 800ae90:	429a      	cmp	r2, r3
 800ae92:	d02a      	beq.n	800aeea <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	685b      	ldr	r3, [r3, #4]
 800ae98:	b2db      	uxtb	r3, r3
 800ae9a:	4619      	mov	r1, r3
 800ae9c:	6878      	ldr	r0, [r7, #4]
 800ae9e:	f7ff f973 	bl	800a188 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800aea2:	4b1d      	ldr	r3, [pc, #116]	@ (800af18 <USBD_SetConfig+0x148>)
 800aea4:	781b      	ldrb	r3, [r3, #0]
 800aea6:	461a      	mov	r2, r3
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800aeac:	4b1a      	ldr	r3, [pc, #104]	@ (800af18 <USBD_SetConfig+0x148>)
 800aeae:	781b      	ldrb	r3, [r3, #0]
 800aeb0:	4619      	mov	r1, r3
 800aeb2:	6878      	ldr	r0, [r7, #4]
 800aeb4:	f7ff f94c 	bl	800a150 <USBD_SetClassConfig>
 800aeb8:	4603      	mov	r3, r0
 800aeba:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800aebc:	7bfb      	ldrb	r3, [r7, #15]
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d00f      	beq.n	800aee2 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800aec2:	6839      	ldr	r1, [r7, #0]
 800aec4:	6878      	ldr	r0, [r7, #4]
 800aec6:	f000 f903 	bl	800b0d0 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	685b      	ldr	r3, [r3, #4]
 800aece:	b2db      	uxtb	r3, r3
 800aed0:	4619      	mov	r1, r3
 800aed2:	6878      	ldr	r0, [r7, #4]
 800aed4:	f7ff f958 	bl	800a188 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	2202      	movs	r2, #2
 800aedc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800aee0:	e014      	b.n	800af0c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800aee2:	6878      	ldr	r0, [r7, #4]
 800aee4:	f000 f9bf 	bl	800b266 <USBD_CtlSendStatus>
      break;
 800aee8:	e010      	b.n	800af0c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800aeea:	6878      	ldr	r0, [r7, #4]
 800aeec:	f000 f9bb 	bl	800b266 <USBD_CtlSendStatus>
      break;
 800aef0:	e00c      	b.n	800af0c <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800aef2:	6839      	ldr	r1, [r7, #0]
 800aef4:	6878      	ldr	r0, [r7, #4]
 800aef6:	f000 f8eb 	bl	800b0d0 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800aefa:	4b07      	ldr	r3, [pc, #28]	@ (800af18 <USBD_SetConfig+0x148>)
 800aefc:	781b      	ldrb	r3, [r3, #0]
 800aefe:	4619      	mov	r1, r3
 800af00:	6878      	ldr	r0, [r7, #4]
 800af02:	f7ff f941 	bl	800a188 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800af06:	2303      	movs	r3, #3
 800af08:	73fb      	strb	r3, [r7, #15]
      break;
 800af0a:	bf00      	nop
  }

  return ret;
 800af0c:	7bfb      	ldrb	r3, [r7, #15]
}
 800af0e:	4618      	mov	r0, r3
 800af10:	3710      	adds	r7, #16
 800af12:	46bd      	mov	sp, r7
 800af14:	bd80      	pop	{r7, pc}
 800af16:	bf00      	nop
 800af18:	20000b11 	.word	0x20000b11

0800af1c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800af1c:	b580      	push	{r7, lr}
 800af1e:	b082      	sub	sp, #8
 800af20:	af00      	add	r7, sp, #0
 800af22:	6078      	str	r0, [r7, #4]
 800af24:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800af26:	683b      	ldr	r3, [r7, #0]
 800af28:	88db      	ldrh	r3, [r3, #6]
 800af2a:	2b01      	cmp	r3, #1
 800af2c:	d004      	beq.n	800af38 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800af2e:	6839      	ldr	r1, [r7, #0]
 800af30:	6878      	ldr	r0, [r7, #4]
 800af32:	f000 f8cd 	bl	800b0d0 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800af36:	e023      	b.n	800af80 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800af3e:	b2db      	uxtb	r3, r3
 800af40:	2b02      	cmp	r3, #2
 800af42:	dc02      	bgt.n	800af4a <USBD_GetConfig+0x2e>
 800af44:	2b00      	cmp	r3, #0
 800af46:	dc03      	bgt.n	800af50 <USBD_GetConfig+0x34>
 800af48:	e015      	b.n	800af76 <USBD_GetConfig+0x5a>
 800af4a:	2b03      	cmp	r3, #3
 800af4c:	d00b      	beq.n	800af66 <USBD_GetConfig+0x4a>
 800af4e:	e012      	b.n	800af76 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	2200      	movs	r2, #0
 800af54:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	3308      	adds	r3, #8
 800af5a:	2201      	movs	r2, #1
 800af5c:	4619      	mov	r1, r3
 800af5e:	6878      	ldr	r0, [r7, #4]
 800af60:	f000 f927 	bl	800b1b2 <USBD_CtlSendData>
        break;
 800af64:	e00c      	b.n	800af80 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	3304      	adds	r3, #4
 800af6a:	2201      	movs	r2, #1
 800af6c:	4619      	mov	r1, r3
 800af6e:	6878      	ldr	r0, [r7, #4]
 800af70:	f000 f91f 	bl	800b1b2 <USBD_CtlSendData>
        break;
 800af74:	e004      	b.n	800af80 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800af76:	6839      	ldr	r1, [r7, #0]
 800af78:	6878      	ldr	r0, [r7, #4]
 800af7a:	f000 f8a9 	bl	800b0d0 <USBD_CtlError>
        break;
 800af7e:	bf00      	nop
}
 800af80:	bf00      	nop
 800af82:	3708      	adds	r7, #8
 800af84:	46bd      	mov	sp, r7
 800af86:	bd80      	pop	{r7, pc}

0800af88 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800af88:	b580      	push	{r7, lr}
 800af8a:	b082      	sub	sp, #8
 800af8c:	af00      	add	r7, sp, #0
 800af8e:	6078      	str	r0, [r7, #4]
 800af90:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800af98:	b2db      	uxtb	r3, r3
 800af9a:	3b01      	subs	r3, #1
 800af9c:	2b02      	cmp	r3, #2
 800af9e:	d81e      	bhi.n	800afde <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800afa0:	683b      	ldr	r3, [r7, #0]
 800afa2:	88db      	ldrh	r3, [r3, #6]
 800afa4:	2b02      	cmp	r3, #2
 800afa6:	d004      	beq.n	800afb2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800afa8:	6839      	ldr	r1, [r7, #0]
 800afaa:	6878      	ldr	r0, [r7, #4]
 800afac:	f000 f890 	bl	800b0d0 <USBD_CtlError>
        break;
 800afb0:	e01a      	b.n	800afe8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	2201      	movs	r2, #1
 800afb6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d005      	beq.n	800afce <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	68db      	ldr	r3, [r3, #12]
 800afc6:	f043 0202 	orr.w	r2, r3, #2
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	330c      	adds	r3, #12
 800afd2:	2202      	movs	r2, #2
 800afd4:	4619      	mov	r1, r3
 800afd6:	6878      	ldr	r0, [r7, #4]
 800afd8:	f000 f8eb 	bl	800b1b2 <USBD_CtlSendData>
      break;
 800afdc:	e004      	b.n	800afe8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800afde:	6839      	ldr	r1, [r7, #0]
 800afe0:	6878      	ldr	r0, [r7, #4]
 800afe2:	f000 f875 	bl	800b0d0 <USBD_CtlError>
      break;
 800afe6:	bf00      	nop
  }
}
 800afe8:	bf00      	nop
 800afea:	3708      	adds	r7, #8
 800afec:	46bd      	mov	sp, r7
 800afee:	bd80      	pop	{r7, pc}

0800aff0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aff0:	b580      	push	{r7, lr}
 800aff2:	b082      	sub	sp, #8
 800aff4:	af00      	add	r7, sp, #0
 800aff6:	6078      	str	r0, [r7, #4]
 800aff8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800affa:	683b      	ldr	r3, [r7, #0]
 800affc:	885b      	ldrh	r3, [r3, #2]
 800affe:	2b01      	cmp	r3, #1
 800b000:	d106      	bne.n	800b010 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	2201      	movs	r2, #1
 800b006:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b00a:	6878      	ldr	r0, [r7, #4]
 800b00c:	f000 f92b 	bl	800b266 <USBD_CtlSendStatus>
  }
}
 800b010:	bf00      	nop
 800b012:	3708      	adds	r7, #8
 800b014:	46bd      	mov	sp, r7
 800b016:	bd80      	pop	{r7, pc}

0800b018 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b018:	b580      	push	{r7, lr}
 800b01a:	b082      	sub	sp, #8
 800b01c:	af00      	add	r7, sp, #0
 800b01e:	6078      	str	r0, [r7, #4]
 800b020:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b028:	b2db      	uxtb	r3, r3
 800b02a:	3b01      	subs	r3, #1
 800b02c:	2b02      	cmp	r3, #2
 800b02e:	d80b      	bhi.n	800b048 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b030:	683b      	ldr	r3, [r7, #0]
 800b032:	885b      	ldrh	r3, [r3, #2]
 800b034:	2b01      	cmp	r3, #1
 800b036:	d10c      	bne.n	800b052 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	2200      	movs	r2, #0
 800b03c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b040:	6878      	ldr	r0, [r7, #4]
 800b042:	f000 f910 	bl	800b266 <USBD_CtlSendStatus>
      }
      break;
 800b046:	e004      	b.n	800b052 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b048:	6839      	ldr	r1, [r7, #0]
 800b04a:	6878      	ldr	r0, [r7, #4]
 800b04c:	f000 f840 	bl	800b0d0 <USBD_CtlError>
      break;
 800b050:	e000      	b.n	800b054 <USBD_ClrFeature+0x3c>
      break;
 800b052:	bf00      	nop
  }
}
 800b054:	bf00      	nop
 800b056:	3708      	adds	r7, #8
 800b058:	46bd      	mov	sp, r7
 800b05a:	bd80      	pop	{r7, pc}

0800b05c <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b05c:	b580      	push	{r7, lr}
 800b05e:	b084      	sub	sp, #16
 800b060:	af00      	add	r7, sp, #0
 800b062:	6078      	str	r0, [r7, #4]
 800b064:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b066:	683b      	ldr	r3, [r7, #0]
 800b068:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	781a      	ldrb	r2, [r3, #0]
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	3301      	adds	r3, #1
 800b076:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	781a      	ldrb	r2, [r3, #0]
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	3301      	adds	r3, #1
 800b084:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b086:	68f8      	ldr	r0, [r7, #12]
 800b088:	f7ff fa92 	bl	800a5b0 <SWAPBYTE>
 800b08c:	4603      	mov	r3, r0
 800b08e:	461a      	mov	r2, r3
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	3301      	adds	r3, #1
 800b098:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	3301      	adds	r3, #1
 800b09e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b0a0:	68f8      	ldr	r0, [r7, #12]
 800b0a2:	f7ff fa85 	bl	800a5b0 <SWAPBYTE>
 800b0a6:	4603      	mov	r3, r0
 800b0a8:	461a      	mov	r2, r3
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	3301      	adds	r3, #1
 800b0b2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	3301      	adds	r3, #1
 800b0b8:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b0ba:	68f8      	ldr	r0, [r7, #12]
 800b0bc:	f7ff fa78 	bl	800a5b0 <SWAPBYTE>
 800b0c0:	4603      	mov	r3, r0
 800b0c2:	461a      	mov	r2, r3
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	80da      	strh	r2, [r3, #6]
}
 800b0c8:	bf00      	nop
 800b0ca:	3710      	adds	r7, #16
 800b0cc:	46bd      	mov	sp, r7
 800b0ce:	bd80      	pop	{r7, pc}

0800b0d0 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b0d0:	b580      	push	{r7, lr}
 800b0d2:	b082      	sub	sp, #8
 800b0d4:	af00      	add	r7, sp, #0
 800b0d6:	6078      	str	r0, [r7, #4]
 800b0d8:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b0da:	2180      	movs	r1, #128	@ 0x80
 800b0dc:	6878      	ldr	r0, [r7, #4]
 800b0de:	f000 fcad 	bl	800ba3c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b0e2:	2100      	movs	r1, #0
 800b0e4:	6878      	ldr	r0, [r7, #4]
 800b0e6:	f000 fca9 	bl	800ba3c <USBD_LL_StallEP>
}
 800b0ea:	bf00      	nop
 800b0ec:	3708      	adds	r7, #8
 800b0ee:	46bd      	mov	sp, r7
 800b0f0:	bd80      	pop	{r7, pc}

0800b0f2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b0f2:	b580      	push	{r7, lr}
 800b0f4:	b086      	sub	sp, #24
 800b0f6:	af00      	add	r7, sp, #0
 800b0f8:	60f8      	str	r0, [r7, #12]
 800b0fa:	60b9      	str	r1, [r7, #8]
 800b0fc:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b0fe:	2300      	movs	r3, #0
 800b100:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	2b00      	cmp	r3, #0
 800b106:	d036      	beq.n	800b176 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800b10c:	6938      	ldr	r0, [r7, #16]
 800b10e:	f000 f836 	bl	800b17e <USBD_GetLen>
 800b112:	4603      	mov	r3, r0
 800b114:	3301      	adds	r3, #1
 800b116:	b29b      	uxth	r3, r3
 800b118:	005b      	lsls	r3, r3, #1
 800b11a:	b29a      	uxth	r2, r3
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b120:	7dfb      	ldrb	r3, [r7, #23]
 800b122:	68ba      	ldr	r2, [r7, #8]
 800b124:	4413      	add	r3, r2
 800b126:	687a      	ldr	r2, [r7, #4]
 800b128:	7812      	ldrb	r2, [r2, #0]
 800b12a:	701a      	strb	r2, [r3, #0]
  idx++;
 800b12c:	7dfb      	ldrb	r3, [r7, #23]
 800b12e:	3301      	adds	r3, #1
 800b130:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b132:	7dfb      	ldrb	r3, [r7, #23]
 800b134:	68ba      	ldr	r2, [r7, #8]
 800b136:	4413      	add	r3, r2
 800b138:	2203      	movs	r2, #3
 800b13a:	701a      	strb	r2, [r3, #0]
  idx++;
 800b13c:	7dfb      	ldrb	r3, [r7, #23]
 800b13e:	3301      	adds	r3, #1
 800b140:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b142:	e013      	b.n	800b16c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800b144:	7dfb      	ldrb	r3, [r7, #23]
 800b146:	68ba      	ldr	r2, [r7, #8]
 800b148:	4413      	add	r3, r2
 800b14a:	693a      	ldr	r2, [r7, #16]
 800b14c:	7812      	ldrb	r2, [r2, #0]
 800b14e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b150:	693b      	ldr	r3, [r7, #16]
 800b152:	3301      	adds	r3, #1
 800b154:	613b      	str	r3, [r7, #16]
    idx++;
 800b156:	7dfb      	ldrb	r3, [r7, #23]
 800b158:	3301      	adds	r3, #1
 800b15a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b15c:	7dfb      	ldrb	r3, [r7, #23]
 800b15e:	68ba      	ldr	r2, [r7, #8]
 800b160:	4413      	add	r3, r2
 800b162:	2200      	movs	r2, #0
 800b164:	701a      	strb	r2, [r3, #0]
    idx++;
 800b166:	7dfb      	ldrb	r3, [r7, #23]
 800b168:	3301      	adds	r3, #1
 800b16a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b16c:	693b      	ldr	r3, [r7, #16]
 800b16e:	781b      	ldrb	r3, [r3, #0]
 800b170:	2b00      	cmp	r3, #0
 800b172:	d1e7      	bne.n	800b144 <USBD_GetString+0x52>
 800b174:	e000      	b.n	800b178 <USBD_GetString+0x86>
    return;
 800b176:	bf00      	nop
  }
}
 800b178:	3718      	adds	r7, #24
 800b17a:	46bd      	mov	sp, r7
 800b17c:	bd80      	pop	{r7, pc}

0800b17e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b17e:	b480      	push	{r7}
 800b180:	b085      	sub	sp, #20
 800b182:	af00      	add	r7, sp, #0
 800b184:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b186:	2300      	movs	r3, #0
 800b188:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b18e:	e005      	b.n	800b19c <USBD_GetLen+0x1e>
  {
    len++;
 800b190:	7bfb      	ldrb	r3, [r7, #15]
 800b192:	3301      	adds	r3, #1
 800b194:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b196:	68bb      	ldr	r3, [r7, #8]
 800b198:	3301      	adds	r3, #1
 800b19a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b19c:	68bb      	ldr	r3, [r7, #8]
 800b19e:	781b      	ldrb	r3, [r3, #0]
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d1f5      	bne.n	800b190 <USBD_GetLen+0x12>
  }

  return len;
 800b1a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1a6:	4618      	mov	r0, r3
 800b1a8:	3714      	adds	r7, #20
 800b1aa:	46bd      	mov	sp, r7
 800b1ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b0:	4770      	bx	lr

0800b1b2 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b1b2:	b580      	push	{r7, lr}
 800b1b4:	b084      	sub	sp, #16
 800b1b6:	af00      	add	r7, sp, #0
 800b1b8:	60f8      	str	r0, [r7, #12]
 800b1ba:	60b9      	str	r1, [r7, #8]
 800b1bc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	2202      	movs	r2, #2
 800b1c2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	687a      	ldr	r2, [r7, #4]
 800b1ca:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	687a      	ldr	r2, [r7, #4]
 800b1d0:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	68ba      	ldr	r2, [r7, #8]
 800b1d6:	2100      	movs	r1, #0
 800b1d8:	68f8      	ldr	r0, [r7, #12]
 800b1da:	f000 fcb8 	bl	800bb4e <USBD_LL_Transmit>

  return USBD_OK;
 800b1de:	2300      	movs	r3, #0
}
 800b1e0:	4618      	mov	r0, r3
 800b1e2:	3710      	adds	r7, #16
 800b1e4:	46bd      	mov	sp, r7
 800b1e6:	bd80      	pop	{r7, pc}

0800b1e8 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b1e8:	b580      	push	{r7, lr}
 800b1ea:	b084      	sub	sp, #16
 800b1ec:	af00      	add	r7, sp, #0
 800b1ee:	60f8      	str	r0, [r7, #12]
 800b1f0:	60b9      	str	r1, [r7, #8]
 800b1f2:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	68ba      	ldr	r2, [r7, #8]
 800b1f8:	2100      	movs	r1, #0
 800b1fa:	68f8      	ldr	r0, [r7, #12]
 800b1fc:	f000 fca7 	bl	800bb4e <USBD_LL_Transmit>

  return USBD_OK;
 800b200:	2300      	movs	r3, #0
}
 800b202:	4618      	mov	r0, r3
 800b204:	3710      	adds	r7, #16
 800b206:	46bd      	mov	sp, r7
 800b208:	bd80      	pop	{r7, pc}

0800b20a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b20a:	b580      	push	{r7, lr}
 800b20c:	b084      	sub	sp, #16
 800b20e:	af00      	add	r7, sp, #0
 800b210:	60f8      	str	r0, [r7, #12]
 800b212:	60b9      	str	r1, [r7, #8]
 800b214:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	2203      	movs	r2, #3
 800b21a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	687a      	ldr	r2, [r7, #4]
 800b222:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	687a      	ldr	r2, [r7, #4]
 800b22a:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	68ba      	ldr	r2, [r7, #8]
 800b232:	2100      	movs	r1, #0
 800b234:	68f8      	ldr	r0, [r7, #12]
 800b236:	f000 fcab 	bl	800bb90 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b23a:	2300      	movs	r3, #0
}
 800b23c:	4618      	mov	r0, r3
 800b23e:	3710      	adds	r7, #16
 800b240:	46bd      	mov	sp, r7
 800b242:	bd80      	pop	{r7, pc}

0800b244 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b244:	b580      	push	{r7, lr}
 800b246:	b084      	sub	sp, #16
 800b248:	af00      	add	r7, sp, #0
 800b24a:	60f8      	str	r0, [r7, #12]
 800b24c:	60b9      	str	r1, [r7, #8]
 800b24e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	68ba      	ldr	r2, [r7, #8]
 800b254:	2100      	movs	r1, #0
 800b256:	68f8      	ldr	r0, [r7, #12]
 800b258:	f000 fc9a 	bl	800bb90 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b25c:	2300      	movs	r3, #0
}
 800b25e:	4618      	mov	r0, r3
 800b260:	3710      	adds	r7, #16
 800b262:	46bd      	mov	sp, r7
 800b264:	bd80      	pop	{r7, pc}

0800b266 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b266:	b580      	push	{r7, lr}
 800b268:	b082      	sub	sp, #8
 800b26a:	af00      	add	r7, sp, #0
 800b26c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	2204      	movs	r2, #4
 800b272:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b276:	2300      	movs	r3, #0
 800b278:	2200      	movs	r2, #0
 800b27a:	2100      	movs	r1, #0
 800b27c:	6878      	ldr	r0, [r7, #4]
 800b27e:	f000 fc66 	bl	800bb4e <USBD_LL_Transmit>

  return USBD_OK;
 800b282:	2300      	movs	r3, #0
}
 800b284:	4618      	mov	r0, r3
 800b286:	3708      	adds	r7, #8
 800b288:	46bd      	mov	sp, r7
 800b28a:	bd80      	pop	{r7, pc}

0800b28c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b28c:	b580      	push	{r7, lr}
 800b28e:	b082      	sub	sp, #8
 800b290:	af00      	add	r7, sp, #0
 800b292:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	2205      	movs	r2, #5
 800b298:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b29c:	2300      	movs	r3, #0
 800b29e:	2200      	movs	r2, #0
 800b2a0:	2100      	movs	r1, #0
 800b2a2:	6878      	ldr	r0, [r7, #4]
 800b2a4:	f000 fc74 	bl	800bb90 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b2a8:	2300      	movs	r3, #0
}
 800b2aa:	4618      	mov	r0, r3
 800b2ac:	3708      	adds	r7, #8
 800b2ae:	46bd      	mov	sp, r7
 800b2b0:	bd80      	pop	{r7, pc}
	...

0800b2b4 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800b2b4:	b580      	push	{r7, lr}
 800b2b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800b2b8:	2200      	movs	r2, #0
 800b2ba:	4912      	ldr	r1, [pc, #72]	@ (800b304 <MX_USB_Device_Init+0x50>)
 800b2bc:	4812      	ldr	r0, [pc, #72]	@ (800b308 <MX_USB_Device_Init+0x54>)
 800b2be:	f7fe fed9 	bl	800a074 <USBD_Init>
 800b2c2:	4603      	mov	r3, r0
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d001      	beq.n	800b2cc <MX_USB_Device_Init+0x18>
    Error_Handler();
 800b2c8:	f7f5 fba7 	bl	8000a1a <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800b2cc:	490f      	ldr	r1, [pc, #60]	@ (800b30c <MX_USB_Device_Init+0x58>)
 800b2ce:	480e      	ldr	r0, [pc, #56]	@ (800b308 <MX_USB_Device_Init+0x54>)
 800b2d0:	f7fe ff00 	bl	800a0d4 <USBD_RegisterClass>
 800b2d4:	4603      	mov	r3, r0
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d001      	beq.n	800b2de <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800b2da:	f7f5 fb9e 	bl	8000a1a <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800b2de:	490c      	ldr	r1, [pc, #48]	@ (800b310 <MX_USB_Device_Init+0x5c>)
 800b2e0:	4809      	ldr	r0, [pc, #36]	@ (800b308 <MX_USB_Device_Init+0x54>)
 800b2e2:	f7fe fe21 	bl	8009f28 <USBD_CDC_RegisterInterface>
 800b2e6:	4603      	mov	r3, r0
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d001      	beq.n	800b2f0 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800b2ec:	f7f5 fb95 	bl	8000a1a <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800b2f0:	4805      	ldr	r0, [pc, #20]	@ (800b308 <MX_USB_Device_Init+0x54>)
 800b2f2:	f7fe ff16 	bl	800a122 <USBD_Start>
 800b2f6:	4603      	mov	r3, r0
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d001      	beq.n	800b300 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800b2fc:	f7f5 fb8d 	bl	8000a1a <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800b300:	bf00      	nop
 800b302:	bd80      	pop	{r7, pc}
 800b304:	200001c8 	.word	0x200001c8
 800b308:	20001958 	.word	0x20001958
 800b30c:	200000b0 	.word	0x200000b0
 800b310:	200001b4 	.word	0x200001b4

0800b314 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b314:	b580      	push	{r7, lr}
 800b316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b318:	2200      	movs	r2, #0
 800b31a:	4905      	ldr	r1, [pc, #20]	@ (800b330 <CDC_Init_FS+0x1c>)
 800b31c:	4805      	ldr	r0, [pc, #20]	@ (800b334 <CDC_Init_FS+0x20>)
 800b31e:	f7fe fe18 	bl	8009f52 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b322:	4905      	ldr	r1, [pc, #20]	@ (800b338 <CDC_Init_FS+0x24>)
 800b324:	4803      	ldr	r0, [pc, #12]	@ (800b334 <CDC_Init_FS+0x20>)
 800b326:	f7fe fe32 	bl	8009f8e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b32a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b32c:	4618      	mov	r0, r3
 800b32e:	bd80      	pop	{r7, pc}
 800b330:	20002028 	.word	0x20002028
 800b334:	20001958 	.word	0x20001958
 800b338:	20001c28 	.word	0x20001c28

0800b33c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b33c:	b480      	push	{r7}
 800b33e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b340:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b342:	4618      	mov	r0, r3
 800b344:	46bd      	mov	sp, r7
 800b346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b34a:	4770      	bx	lr

0800b34c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b34c:	b480      	push	{r7}
 800b34e:	b083      	sub	sp, #12
 800b350:	af00      	add	r7, sp, #0
 800b352:	4603      	mov	r3, r0
 800b354:	6039      	str	r1, [r7, #0]
 800b356:	71fb      	strb	r3, [r7, #7]
 800b358:	4613      	mov	r3, r2
 800b35a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b35c:	79fb      	ldrb	r3, [r7, #7]
 800b35e:	2b23      	cmp	r3, #35	@ 0x23
 800b360:	d84a      	bhi.n	800b3f8 <CDC_Control_FS+0xac>
 800b362:	a201      	add	r2, pc, #4	@ (adr r2, 800b368 <CDC_Control_FS+0x1c>)
 800b364:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b368:	0800b3f9 	.word	0x0800b3f9
 800b36c:	0800b3f9 	.word	0x0800b3f9
 800b370:	0800b3f9 	.word	0x0800b3f9
 800b374:	0800b3f9 	.word	0x0800b3f9
 800b378:	0800b3f9 	.word	0x0800b3f9
 800b37c:	0800b3f9 	.word	0x0800b3f9
 800b380:	0800b3f9 	.word	0x0800b3f9
 800b384:	0800b3f9 	.word	0x0800b3f9
 800b388:	0800b3f9 	.word	0x0800b3f9
 800b38c:	0800b3f9 	.word	0x0800b3f9
 800b390:	0800b3f9 	.word	0x0800b3f9
 800b394:	0800b3f9 	.word	0x0800b3f9
 800b398:	0800b3f9 	.word	0x0800b3f9
 800b39c:	0800b3f9 	.word	0x0800b3f9
 800b3a0:	0800b3f9 	.word	0x0800b3f9
 800b3a4:	0800b3f9 	.word	0x0800b3f9
 800b3a8:	0800b3f9 	.word	0x0800b3f9
 800b3ac:	0800b3f9 	.word	0x0800b3f9
 800b3b0:	0800b3f9 	.word	0x0800b3f9
 800b3b4:	0800b3f9 	.word	0x0800b3f9
 800b3b8:	0800b3f9 	.word	0x0800b3f9
 800b3bc:	0800b3f9 	.word	0x0800b3f9
 800b3c0:	0800b3f9 	.word	0x0800b3f9
 800b3c4:	0800b3f9 	.word	0x0800b3f9
 800b3c8:	0800b3f9 	.word	0x0800b3f9
 800b3cc:	0800b3f9 	.word	0x0800b3f9
 800b3d0:	0800b3f9 	.word	0x0800b3f9
 800b3d4:	0800b3f9 	.word	0x0800b3f9
 800b3d8:	0800b3f9 	.word	0x0800b3f9
 800b3dc:	0800b3f9 	.word	0x0800b3f9
 800b3e0:	0800b3f9 	.word	0x0800b3f9
 800b3e4:	0800b3f9 	.word	0x0800b3f9
 800b3e8:	0800b3f9 	.word	0x0800b3f9
 800b3ec:	0800b3f9 	.word	0x0800b3f9
 800b3f0:	0800b3f9 	.word	0x0800b3f9
 800b3f4:	0800b3f9 	.word	0x0800b3f9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b3f8:	bf00      	nop
  }

  return (USBD_OK);
 800b3fa:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b3fc:	4618      	mov	r0, r3
 800b3fe:	370c      	adds	r7, #12
 800b400:	46bd      	mov	sp, r7
 800b402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b406:	4770      	bx	lr

0800b408 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b408:	b580      	push	{r7, lr}
 800b40a:	b082      	sub	sp, #8
 800b40c:	af00      	add	r7, sp, #0
 800b40e:	6078      	str	r0, [r7, #4]
 800b410:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b412:	6879      	ldr	r1, [r7, #4]
 800b414:	4805      	ldr	r0, [pc, #20]	@ (800b42c <CDC_Receive_FS+0x24>)
 800b416:	f7fe fdba 	bl	8009f8e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b41a:	4804      	ldr	r0, [pc, #16]	@ (800b42c <CDC_Receive_FS+0x24>)
 800b41c:	f7fe fe00 	bl	800a020 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800b420:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b422:	4618      	mov	r0, r3
 800b424:	3708      	adds	r7, #8
 800b426:	46bd      	mov	sp, r7
 800b428:	bd80      	pop	{r7, pc}
 800b42a:	bf00      	nop
 800b42c:	20001958 	.word	0x20001958

0800b430 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800b430:	b580      	push	{r7, lr}
 800b432:	b084      	sub	sp, #16
 800b434:	af00      	add	r7, sp, #0
 800b436:	6078      	str	r0, [r7, #4]
 800b438:	460b      	mov	r3, r1
 800b43a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800b43c:	2300      	movs	r3, #0
 800b43e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800b440:	4b0d      	ldr	r3, [pc, #52]	@ (800b478 <CDC_Transmit_FS+0x48>)
 800b442:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b446:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800b448:	68bb      	ldr	r3, [r7, #8]
 800b44a:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d001      	beq.n	800b456 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800b452:	2301      	movs	r3, #1
 800b454:	e00b      	b.n	800b46e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800b456:	887b      	ldrh	r3, [r7, #2]
 800b458:	461a      	mov	r2, r3
 800b45a:	6879      	ldr	r1, [r7, #4]
 800b45c:	4806      	ldr	r0, [pc, #24]	@ (800b478 <CDC_Transmit_FS+0x48>)
 800b45e:	f7fe fd78 	bl	8009f52 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800b462:	4805      	ldr	r0, [pc, #20]	@ (800b478 <CDC_Transmit_FS+0x48>)
 800b464:	f7fe fdac 	bl	8009fc0 <USBD_CDC_TransmitPacket>
 800b468:	4603      	mov	r3, r0
 800b46a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800b46c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b46e:	4618      	mov	r0, r3
 800b470:	3710      	adds	r7, #16
 800b472:	46bd      	mov	sp, r7
 800b474:	bd80      	pop	{r7, pc}
 800b476:	bf00      	nop
 800b478:	20001958 	.word	0x20001958

0800b47c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800b47c:	b480      	push	{r7}
 800b47e:	b087      	sub	sp, #28
 800b480:	af00      	add	r7, sp, #0
 800b482:	60f8      	str	r0, [r7, #12]
 800b484:	60b9      	str	r1, [r7, #8]
 800b486:	4613      	mov	r3, r2
 800b488:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800b48a:	2300      	movs	r3, #0
 800b48c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800b48e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b492:	4618      	mov	r0, r3
 800b494:	371c      	adds	r7, #28
 800b496:	46bd      	mov	sp, r7
 800b498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b49c:	4770      	bx	lr
	...

0800b4a0 <CDC_Transmit_Is_Busy>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
uint8_t CDC_Transmit_Is_Busy(void)
{
 800b4a0:	b480      	push	{r7}
 800b4a2:	b083      	sub	sp, #12
 800b4a4:	af00      	add	r7, sp, #0
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800b4a6:	4b09      	ldr	r3, [pc, #36]	@ (800b4cc <CDC_Transmit_Is_Busy+0x2c>)
 800b4a8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b4ac:	607b      	str	r3, [r7, #4]
  if (hcdc->TxState != 0)
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d001      	beq.n	800b4bc <CDC_Transmit_Is_Busy+0x1c>
  {
    return USBD_BUSY;
 800b4b8:	2301      	movs	r3, #1
 800b4ba:	e000      	b.n	800b4be <CDC_Transmit_Is_Busy+0x1e>
  }  
  else
  {
    return USBD_OK;
 800b4bc:	2300      	movs	r3, #0
  }
}
 800b4be:	4618      	mov	r0, r3
 800b4c0:	370c      	adds	r7, #12
 800b4c2:	46bd      	mov	sp, r7
 800b4c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4c8:	4770      	bx	lr
 800b4ca:	bf00      	nop
 800b4cc:	20001958 	.word	0x20001958

0800b4d0 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b4d0:	b480      	push	{r7}
 800b4d2:	b083      	sub	sp, #12
 800b4d4:	af00      	add	r7, sp, #0
 800b4d6:	4603      	mov	r3, r0
 800b4d8:	6039      	str	r1, [r7, #0]
 800b4da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800b4dc:	683b      	ldr	r3, [r7, #0]
 800b4de:	2212      	movs	r2, #18
 800b4e0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800b4e2:	4b03      	ldr	r3, [pc, #12]	@ (800b4f0 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800b4e4:	4618      	mov	r0, r3
 800b4e6:	370c      	adds	r7, #12
 800b4e8:	46bd      	mov	sp, r7
 800b4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ee:	4770      	bx	lr
 800b4f0:	200001e8 	.word	0x200001e8

0800b4f4 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b4f4:	b480      	push	{r7}
 800b4f6:	b083      	sub	sp, #12
 800b4f8:	af00      	add	r7, sp, #0
 800b4fa:	4603      	mov	r3, r0
 800b4fc:	6039      	str	r1, [r7, #0]
 800b4fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b500:	683b      	ldr	r3, [r7, #0]
 800b502:	2204      	movs	r2, #4
 800b504:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b506:	4b03      	ldr	r3, [pc, #12]	@ (800b514 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800b508:	4618      	mov	r0, r3
 800b50a:	370c      	adds	r7, #12
 800b50c:	46bd      	mov	sp, r7
 800b50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b512:	4770      	bx	lr
 800b514:	200001fc 	.word	0x200001fc

0800b518 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b518:	b580      	push	{r7, lr}
 800b51a:	b082      	sub	sp, #8
 800b51c:	af00      	add	r7, sp, #0
 800b51e:	4603      	mov	r3, r0
 800b520:	6039      	str	r1, [r7, #0]
 800b522:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b524:	79fb      	ldrb	r3, [r7, #7]
 800b526:	2b00      	cmp	r3, #0
 800b528:	d105      	bne.n	800b536 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800b52a:	683a      	ldr	r2, [r7, #0]
 800b52c:	4907      	ldr	r1, [pc, #28]	@ (800b54c <USBD_CDC_ProductStrDescriptor+0x34>)
 800b52e:	4808      	ldr	r0, [pc, #32]	@ (800b550 <USBD_CDC_ProductStrDescriptor+0x38>)
 800b530:	f7ff fddf 	bl	800b0f2 <USBD_GetString>
 800b534:	e004      	b.n	800b540 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800b536:	683a      	ldr	r2, [r7, #0]
 800b538:	4904      	ldr	r1, [pc, #16]	@ (800b54c <USBD_CDC_ProductStrDescriptor+0x34>)
 800b53a:	4805      	ldr	r0, [pc, #20]	@ (800b550 <USBD_CDC_ProductStrDescriptor+0x38>)
 800b53c:	f7ff fdd9 	bl	800b0f2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b540:	4b02      	ldr	r3, [pc, #8]	@ (800b54c <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800b542:	4618      	mov	r0, r3
 800b544:	3708      	adds	r7, #8
 800b546:	46bd      	mov	sp, r7
 800b548:	bd80      	pop	{r7, pc}
 800b54a:	bf00      	nop
 800b54c:	20002428 	.word	0x20002428
 800b550:	0800ce7c 	.word	0x0800ce7c

0800b554 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b554:	b580      	push	{r7, lr}
 800b556:	b082      	sub	sp, #8
 800b558:	af00      	add	r7, sp, #0
 800b55a:	4603      	mov	r3, r0
 800b55c:	6039      	str	r1, [r7, #0]
 800b55e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b560:	683a      	ldr	r2, [r7, #0]
 800b562:	4904      	ldr	r1, [pc, #16]	@ (800b574 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800b564:	4804      	ldr	r0, [pc, #16]	@ (800b578 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800b566:	f7ff fdc4 	bl	800b0f2 <USBD_GetString>
  return USBD_StrDesc;
 800b56a:	4b02      	ldr	r3, [pc, #8]	@ (800b574 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800b56c:	4618      	mov	r0, r3
 800b56e:	3708      	adds	r7, #8
 800b570:	46bd      	mov	sp, r7
 800b572:	bd80      	pop	{r7, pc}
 800b574:	20002428 	.word	0x20002428
 800b578:	0800ce94 	.word	0x0800ce94

0800b57c <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b57c:	b580      	push	{r7, lr}
 800b57e:	b082      	sub	sp, #8
 800b580:	af00      	add	r7, sp, #0
 800b582:	4603      	mov	r3, r0
 800b584:	6039      	str	r1, [r7, #0]
 800b586:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b588:	683b      	ldr	r3, [r7, #0]
 800b58a:	221a      	movs	r2, #26
 800b58c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b58e:	f000 f843 	bl	800b618 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800b592:	4b02      	ldr	r3, [pc, #8]	@ (800b59c <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800b594:	4618      	mov	r0, r3
 800b596:	3708      	adds	r7, #8
 800b598:	46bd      	mov	sp, r7
 800b59a:	bd80      	pop	{r7, pc}
 800b59c:	20000200 	.word	0x20000200

0800b5a0 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b5a0:	b580      	push	{r7, lr}
 800b5a2:	b082      	sub	sp, #8
 800b5a4:	af00      	add	r7, sp, #0
 800b5a6:	4603      	mov	r3, r0
 800b5a8:	6039      	str	r1, [r7, #0]
 800b5aa:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b5ac:	79fb      	ldrb	r3, [r7, #7]
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d105      	bne.n	800b5be <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800b5b2:	683a      	ldr	r2, [r7, #0]
 800b5b4:	4907      	ldr	r1, [pc, #28]	@ (800b5d4 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800b5b6:	4808      	ldr	r0, [pc, #32]	@ (800b5d8 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800b5b8:	f7ff fd9b 	bl	800b0f2 <USBD_GetString>
 800b5bc:	e004      	b.n	800b5c8 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800b5be:	683a      	ldr	r2, [r7, #0]
 800b5c0:	4904      	ldr	r1, [pc, #16]	@ (800b5d4 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800b5c2:	4805      	ldr	r0, [pc, #20]	@ (800b5d8 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800b5c4:	f7ff fd95 	bl	800b0f2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b5c8:	4b02      	ldr	r3, [pc, #8]	@ (800b5d4 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800b5ca:	4618      	mov	r0, r3
 800b5cc:	3708      	adds	r7, #8
 800b5ce:	46bd      	mov	sp, r7
 800b5d0:	bd80      	pop	{r7, pc}
 800b5d2:	bf00      	nop
 800b5d4:	20002428 	.word	0x20002428
 800b5d8:	0800cea8 	.word	0x0800cea8

0800b5dc <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b5dc:	b580      	push	{r7, lr}
 800b5de:	b082      	sub	sp, #8
 800b5e0:	af00      	add	r7, sp, #0
 800b5e2:	4603      	mov	r3, r0
 800b5e4:	6039      	str	r1, [r7, #0]
 800b5e6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b5e8:	79fb      	ldrb	r3, [r7, #7]
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d105      	bne.n	800b5fa <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800b5ee:	683a      	ldr	r2, [r7, #0]
 800b5f0:	4907      	ldr	r1, [pc, #28]	@ (800b610 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800b5f2:	4808      	ldr	r0, [pc, #32]	@ (800b614 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800b5f4:	f7ff fd7d 	bl	800b0f2 <USBD_GetString>
 800b5f8:	e004      	b.n	800b604 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800b5fa:	683a      	ldr	r2, [r7, #0]
 800b5fc:	4904      	ldr	r1, [pc, #16]	@ (800b610 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800b5fe:	4805      	ldr	r0, [pc, #20]	@ (800b614 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800b600:	f7ff fd77 	bl	800b0f2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b604:	4b02      	ldr	r3, [pc, #8]	@ (800b610 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800b606:	4618      	mov	r0, r3
 800b608:	3708      	adds	r7, #8
 800b60a:	46bd      	mov	sp, r7
 800b60c:	bd80      	pop	{r7, pc}
 800b60e:	bf00      	nop
 800b610:	20002428 	.word	0x20002428
 800b614:	0800ceb4 	.word	0x0800ceb4

0800b618 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b618:	b580      	push	{r7, lr}
 800b61a:	b084      	sub	sp, #16
 800b61c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b61e:	4b0f      	ldr	r3, [pc, #60]	@ (800b65c <Get_SerialNum+0x44>)
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b624:	4b0e      	ldr	r3, [pc, #56]	@ (800b660 <Get_SerialNum+0x48>)
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b62a:	4b0e      	ldr	r3, [pc, #56]	@ (800b664 <Get_SerialNum+0x4c>)
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b630:	68fa      	ldr	r2, [r7, #12]
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	4413      	add	r3, r2
 800b636:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d009      	beq.n	800b652 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b63e:	2208      	movs	r2, #8
 800b640:	4909      	ldr	r1, [pc, #36]	@ (800b668 <Get_SerialNum+0x50>)
 800b642:	68f8      	ldr	r0, [r7, #12]
 800b644:	f000 f814 	bl	800b670 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b648:	2204      	movs	r2, #4
 800b64a:	4908      	ldr	r1, [pc, #32]	@ (800b66c <Get_SerialNum+0x54>)
 800b64c:	68b8      	ldr	r0, [r7, #8]
 800b64e:	f000 f80f 	bl	800b670 <IntToUnicode>
  }
}
 800b652:	bf00      	nop
 800b654:	3710      	adds	r7, #16
 800b656:	46bd      	mov	sp, r7
 800b658:	bd80      	pop	{r7, pc}
 800b65a:	bf00      	nop
 800b65c:	1fff7590 	.word	0x1fff7590
 800b660:	1fff7594 	.word	0x1fff7594
 800b664:	1fff7598 	.word	0x1fff7598
 800b668:	20000202 	.word	0x20000202
 800b66c:	20000212 	.word	0x20000212

0800b670 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b670:	b480      	push	{r7}
 800b672:	b087      	sub	sp, #28
 800b674:	af00      	add	r7, sp, #0
 800b676:	60f8      	str	r0, [r7, #12]
 800b678:	60b9      	str	r1, [r7, #8]
 800b67a:	4613      	mov	r3, r2
 800b67c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b67e:	2300      	movs	r3, #0
 800b680:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b682:	2300      	movs	r3, #0
 800b684:	75fb      	strb	r3, [r7, #23]
 800b686:	e027      	b.n	800b6d8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	0f1b      	lsrs	r3, r3, #28
 800b68c:	2b09      	cmp	r3, #9
 800b68e:	d80b      	bhi.n	800b6a8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	0f1b      	lsrs	r3, r3, #28
 800b694:	b2da      	uxtb	r2, r3
 800b696:	7dfb      	ldrb	r3, [r7, #23]
 800b698:	005b      	lsls	r3, r3, #1
 800b69a:	4619      	mov	r1, r3
 800b69c:	68bb      	ldr	r3, [r7, #8]
 800b69e:	440b      	add	r3, r1
 800b6a0:	3230      	adds	r2, #48	@ 0x30
 800b6a2:	b2d2      	uxtb	r2, r2
 800b6a4:	701a      	strb	r2, [r3, #0]
 800b6a6:	e00a      	b.n	800b6be <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	0f1b      	lsrs	r3, r3, #28
 800b6ac:	b2da      	uxtb	r2, r3
 800b6ae:	7dfb      	ldrb	r3, [r7, #23]
 800b6b0:	005b      	lsls	r3, r3, #1
 800b6b2:	4619      	mov	r1, r3
 800b6b4:	68bb      	ldr	r3, [r7, #8]
 800b6b6:	440b      	add	r3, r1
 800b6b8:	3237      	adds	r2, #55	@ 0x37
 800b6ba:	b2d2      	uxtb	r2, r2
 800b6bc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	011b      	lsls	r3, r3, #4
 800b6c2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b6c4:	7dfb      	ldrb	r3, [r7, #23]
 800b6c6:	005b      	lsls	r3, r3, #1
 800b6c8:	3301      	adds	r3, #1
 800b6ca:	68ba      	ldr	r2, [r7, #8]
 800b6cc:	4413      	add	r3, r2
 800b6ce:	2200      	movs	r2, #0
 800b6d0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b6d2:	7dfb      	ldrb	r3, [r7, #23]
 800b6d4:	3301      	adds	r3, #1
 800b6d6:	75fb      	strb	r3, [r7, #23]
 800b6d8:	7dfa      	ldrb	r2, [r7, #23]
 800b6da:	79fb      	ldrb	r3, [r7, #7]
 800b6dc:	429a      	cmp	r2, r3
 800b6de:	d3d3      	bcc.n	800b688 <IntToUnicode+0x18>
  }
}
 800b6e0:	bf00      	nop
 800b6e2:	bf00      	nop
 800b6e4:	371c      	adds	r7, #28
 800b6e6:	46bd      	mov	sp, r7
 800b6e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ec:	4770      	bx	lr
	...

0800b6f0 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b6f0:	b580      	push	{r7, lr}
 800b6f2:	b094      	sub	sp, #80	@ 0x50
 800b6f4:	af00      	add	r7, sp, #0
 800b6f6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800b6f8:	f107 030c 	add.w	r3, r7, #12
 800b6fc:	2244      	movs	r2, #68	@ 0x44
 800b6fe:	2100      	movs	r1, #0
 800b700:	4618      	mov	r0, r3
 800b702:	f000 fd03 	bl	800c10c <memset>
  if(pcdHandle->Instance==USB)
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	4a15      	ldr	r2, [pc, #84]	@ (800b760 <HAL_PCD_MspInit+0x70>)
 800b70c:	4293      	cmp	r3, r2
 800b70e:	d122      	bne.n	800b756 <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800b710:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800b714:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800b716:	2300      	movs	r3, #0
 800b718:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800b71a:	f107 030c 	add.w	r3, r7, #12
 800b71e:	4618      	mov	r0, r3
 800b720:	f7f9 fd6a 	bl	80051f8 <HAL_RCCEx_PeriphCLKConfig>
 800b724:	4603      	mov	r3, r0
 800b726:	2b00      	cmp	r3, #0
 800b728:	d001      	beq.n	800b72e <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 800b72a:	f7f5 f976 	bl	8000a1a <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800b72e:	4b0d      	ldr	r3, [pc, #52]	@ (800b764 <HAL_PCD_MspInit+0x74>)
 800b730:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b732:	4a0c      	ldr	r2, [pc, #48]	@ (800b764 <HAL_PCD_MspInit+0x74>)
 800b734:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800b738:	6593      	str	r3, [r2, #88]	@ 0x58
 800b73a:	4b0a      	ldr	r3, [pc, #40]	@ (800b764 <HAL_PCD_MspInit+0x74>)
 800b73c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b73e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b742:	60bb      	str	r3, [r7, #8]
 800b744:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800b746:	2200      	movs	r2, #0
 800b748:	2100      	movs	r1, #0
 800b74a:	2014      	movs	r0, #20
 800b74c:	f7f6 fd33 	bl	80021b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800b750:	2014      	movs	r0, #20
 800b752:	f7f6 fd4a 	bl	80021ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800b756:	bf00      	nop
 800b758:	3750      	adds	r7, #80	@ 0x50
 800b75a:	46bd      	mov	sp, r7
 800b75c:	bd80      	pop	{r7, pc}
 800b75e:	bf00      	nop
 800b760:	40005c00 	.word	0x40005c00
 800b764:	40021000 	.word	0x40021000

0800b768 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b768:	b580      	push	{r7, lr}
 800b76a:	b082      	sub	sp, #8
 800b76c:	af00      	add	r7, sp, #0
 800b76e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800b77c:	4619      	mov	r1, r3
 800b77e:	4610      	mov	r0, r2
 800b780:	f7fe fd1a 	bl	800a1b8 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800b784:	bf00      	nop
 800b786:	3708      	adds	r7, #8
 800b788:	46bd      	mov	sp, r7
 800b78a:	bd80      	pop	{r7, pc}

0800b78c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b78c:	b580      	push	{r7, lr}
 800b78e:	b082      	sub	sp, #8
 800b790:	af00      	add	r7, sp, #0
 800b792:	6078      	str	r0, [r7, #4]
 800b794:	460b      	mov	r3, r1
 800b796:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800b79e:	78fa      	ldrb	r2, [r7, #3]
 800b7a0:	6879      	ldr	r1, [r7, #4]
 800b7a2:	4613      	mov	r3, r2
 800b7a4:	009b      	lsls	r3, r3, #2
 800b7a6:	4413      	add	r3, r2
 800b7a8:	00db      	lsls	r3, r3, #3
 800b7aa:	440b      	add	r3, r1
 800b7ac:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b7b0:	681a      	ldr	r2, [r3, #0]
 800b7b2:	78fb      	ldrb	r3, [r7, #3]
 800b7b4:	4619      	mov	r1, r3
 800b7b6:	f7fe fd54 	bl	800a262 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800b7ba:	bf00      	nop
 800b7bc:	3708      	adds	r7, #8
 800b7be:	46bd      	mov	sp, r7
 800b7c0:	bd80      	pop	{r7, pc}

0800b7c2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b7c2:	b580      	push	{r7, lr}
 800b7c4:	b082      	sub	sp, #8
 800b7c6:	af00      	add	r7, sp, #0
 800b7c8:	6078      	str	r0, [r7, #4]
 800b7ca:	460b      	mov	r3, r1
 800b7cc:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800b7d4:	78fa      	ldrb	r2, [r7, #3]
 800b7d6:	6879      	ldr	r1, [r7, #4]
 800b7d8:	4613      	mov	r3, r2
 800b7da:	009b      	lsls	r3, r3, #2
 800b7dc:	4413      	add	r3, r2
 800b7de:	00db      	lsls	r3, r3, #3
 800b7e0:	440b      	add	r3, r1
 800b7e2:	3324      	adds	r3, #36	@ 0x24
 800b7e4:	681a      	ldr	r2, [r3, #0]
 800b7e6:	78fb      	ldrb	r3, [r7, #3]
 800b7e8:	4619      	mov	r1, r3
 800b7ea:	f7fe fd9d 	bl	800a328 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800b7ee:	bf00      	nop
 800b7f0:	3708      	adds	r7, #8
 800b7f2:	46bd      	mov	sp, r7
 800b7f4:	bd80      	pop	{r7, pc}

0800b7f6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b7f6:	b580      	push	{r7, lr}
 800b7f8:	b082      	sub	sp, #8
 800b7fa:	af00      	add	r7, sp, #0
 800b7fc:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800b804:	4618      	mov	r0, r3
 800b806:	f7fe feb1 	bl	800a56c <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800b80a:	bf00      	nop
 800b80c:	3708      	adds	r7, #8
 800b80e:	46bd      	mov	sp, r7
 800b810:	bd80      	pop	{r7, pc}

0800b812 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b812:	b580      	push	{r7, lr}
 800b814:	b084      	sub	sp, #16
 800b816:	af00      	add	r7, sp, #0
 800b818:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b81a:	2301      	movs	r3, #1
 800b81c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	795b      	ldrb	r3, [r3, #5]
 800b822:	2b02      	cmp	r3, #2
 800b824:	d001      	beq.n	800b82a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800b826:	f7f5 f8f8 	bl	8000a1a <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800b830:	7bfa      	ldrb	r2, [r7, #15]
 800b832:	4611      	mov	r1, r2
 800b834:	4618      	mov	r0, r3
 800b836:	f7fe fe5b 	bl	800a4f0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800b840:	4618      	mov	r0, r3
 800b842:	f7fe fe07 	bl	800a454 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800b846:	bf00      	nop
 800b848:	3710      	adds	r7, #16
 800b84a:	46bd      	mov	sp, r7
 800b84c:	bd80      	pop	{r7, pc}
	...

0800b850 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b850:	b580      	push	{r7, lr}
 800b852:	b082      	sub	sp, #8
 800b854:	af00      	add	r7, sp, #0
 800b856:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800b85e:	4618      	mov	r0, r3
 800b860:	f7fe fe56 	bl	800a510 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	7a5b      	ldrb	r3, [r3, #9]
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d005      	beq.n	800b878 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b86c:	4b04      	ldr	r3, [pc, #16]	@ (800b880 <HAL_PCD_SuspendCallback+0x30>)
 800b86e:	691b      	ldr	r3, [r3, #16]
 800b870:	4a03      	ldr	r2, [pc, #12]	@ (800b880 <HAL_PCD_SuspendCallback+0x30>)
 800b872:	f043 0306 	orr.w	r3, r3, #6
 800b876:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800b878:	bf00      	nop
 800b87a:	3708      	adds	r7, #8
 800b87c:	46bd      	mov	sp, r7
 800b87e:	bd80      	pop	{r7, pc}
 800b880:	e000ed00 	.word	0xe000ed00

0800b884 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b884:	b580      	push	{r7, lr}
 800b886:	b082      	sub	sp, #8
 800b888:	af00      	add	r7, sp, #0
 800b88a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	7a5b      	ldrb	r3, [r3, #9]
 800b890:	2b00      	cmp	r3, #0
 800b892:	d007      	beq.n	800b8a4 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b894:	4b08      	ldr	r3, [pc, #32]	@ (800b8b8 <HAL_PCD_ResumeCallback+0x34>)
 800b896:	691b      	ldr	r3, [r3, #16]
 800b898:	4a07      	ldr	r2, [pc, #28]	@ (800b8b8 <HAL_PCD_ResumeCallback+0x34>)
 800b89a:	f023 0306 	bic.w	r3, r3, #6
 800b89e:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800b8a0:	f000 f9f8 	bl	800bc94 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800b8aa:	4618      	mov	r0, r3
 800b8ac:	f7fe fe46 	bl	800a53c <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800b8b0:	bf00      	nop
 800b8b2:	3708      	adds	r7, #8
 800b8b4:	46bd      	mov	sp, r7
 800b8b6:	bd80      	pop	{r7, pc}
 800b8b8:	e000ed00 	.word	0xe000ed00

0800b8bc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b8bc:	b580      	push	{r7, lr}
 800b8be:	b082      	sub	sp, #8
 800b8c0:	af00      	add	r7, sp, #0
 800b8c2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800b8c4:	4a2b      	ldr	r2, [pc, #172]	@ (800b974 <USBD_LL_Init+0xb8>)
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	4a29      	ldr	r2, [pc, #164]	@ (800b974 <USBD_LL_Init+0xb8>)
 800b8d0:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4

  hpcd_USB_FS.Instance = USB;
 800b8d4:	4b27      	ldr	r3, [pc, #156]	@ (800b974 <USBD_LL_Init+0xb8>)
 800b8d6:	4a28      	ldr	r2, [pc, #160]	@ (800b978 <USBD_LL_Init+0xbc>)
 800b8d8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800b8da:	4b26      	ldr	r3, [pc, #152]	@ (800b974 <USBD_LL_Init+0xb8>)
 800b8dc:	2208      	movs	r2, #8
 800b8de:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800b8e0:	4b24      	ldr	r3, [pc, #144]	@ (800b974 <USBD_LL_Init+0xb8>)
 800b8e2:	2202      	movs	r2, #2
 800b8e4:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800b8e6:	4b23      	ldr	r3, [pc, #140]	@ (800b974 <USBD_LL_Init+0xb8>)
 800b8e8:	2202      	movs	r2, #2
 800b8ea:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800b8ec:	4b21      	ldr	r3, [pc, #132]	@ (800b974 <USBD_LL_Init+0xb8>)
 800b8ee:	2200      	movs	r2, #0
 800b8f0:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800b8f2:	4b20      	ldr	r3, [pc, #128]	@ (800b974 <USBD_LL_Init+0xb8>)
 800b8f4:	2200      	movs	r2, #0
 800b8f6:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800b8f8:	4b1e      	ldr	r3, [pc, #120]	@ (800b974 <USBD_LL_Init+0xb8>)
 800b8fa:	2200      	movs	r2, #0
 800b8fc:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800b8fe:	4b1d      	ldr	r3, [pc, #116]	@ (800b974 <USBD_LL_Init+0xb8>)
 800b900:	2200      	movs	r2, #0
 800b902:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800b904:	481b      	ldr	r0, [pc, #108]	@ (800b974 <USBD_LL_Init+0xb8>)
 800b906:	f7f7 f994 	bl	8002c32 <HAL_PCD_Init>
 800b90a:	4603      	mov	r3, r0
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d001      	beq.n	800b914 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800b910:	f7f5 f883 	bl	8000a1a <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800b91a:	2318      	movs	r3, #24
 800b91c:	2200      	movs	r2, #0
 800b91e:	2100      	movs	r1, #0
 800b920:	f7f8 fe1b 	bl	800455a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800b92a:	2358      	movs	r3, #88	@ 0x58
 800b92c:	2200      	movs	r2, #0
 800b92e:	2180      	movs	r1, #128	@ 0x80
 800b930:	f7f8 fe13 	bl	800455a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800b93a:	23c0      	movs	r3, #192	@ 0xc0
 800b93c:	2200      	movs	r2, #0
 800b93e:	2181      	movs	r1, #129	@ 0x81
 800b940:	f7f8 fe0b 	bl	800455a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800b94a:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800b94e:	2200      	movs	r2, #0
 800b950:	2101      	movs	r1, #1
 800b952:	f7f8 fe02 	bl	800455a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800b95c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b960:	2200      	movs	r2, #0
 800b962:	2182      	movs	r1, #130	@ 0x82
 800b964:	f7f8 fdf9 	bl	800455a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800b968:	2300      	movs	r3, #0
}
 800b96a:	4618      	mov	r0, r3
 800b96c:	3708      	adds	r7, #8
 800b96e:	46bd      	mov	sp, r7
 800b970:	bd80      	pop	{r7, pc}
 800b972:	bf00      	nop
 800b974:	20002628 	.word	0x20002628
 800b978:	40005c00 	.word	0x40005c00

0800b97c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b97c:	b580      	push	{r7, lr}
 800b97e:	b084      	sub	sp, #16
 800b980:	af00      	add	r7, sp, #0
 800b982:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b984:	2300      	movs	r3, #0
 800b986:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b988:	2300      	movs	r3, #0
 800b98a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800b992:	4618      	mov	r0, r3
 800b994:	f7f7 fa1b 	bl	8002dce <HAL_PCD_Start>
 800b998:	4603      	mov	r3, r0
 800b99a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b99c:	7bfb      	ldrb	r3, [r7, #15]
 800b99e:	4618      	mov	r0, r3
 800b9a0:	f000 f97e 	bl	800bca0 <USBD_Get_USB_Status>
 800b9a4:	4603      	mov	r3, r0
 800b9a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b9a8:	7bbb      	ldrb	r3, [r7, #14]
}
 800b9aa:	4618      	mov	r0, r3
 800b9ac:	3710      	adds	r7, #16
 800b9ae:	46bd      	mov	sp, r7
 800b9b0:	bd80      	pop	{r7, pc}

0800b9b2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b9b2:	b580      	push	{r7, lr}
 800b9b4:	b084      	sub	sp, #16
 800b9b6:	af00      	add	r7, sp, #0
 800b9b8:	6078      	str	r0, [r7, #4]
 800b9ba:	4608      	mov	r0, r1
 800b9bc:	4611      	mov	r1, r2
 800b9be:	461a      	mov	r2, r3
 800b9c0:	4603      	mov	r3, r0
 800b9c2:	70fb      	strb	r3, [r7, #3]
 800b9c4:	460b      	mov	r3, r1
 800b9c6:	70bb      	strb	r3, [r7, #2]
 800b9c8:	4613      	mov	r3, r2
 800b9ca:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b9cc:	2300      	movs	r3, #0
 800b9ce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b9d0:	2300      	movs	r3, #0
 800b9d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800b9da:	78bb      	ldrb	r3, [r7, #2]
 800b9dc:	883a      	ldrh	r2, [r7, #0]
 800b9de:	78f9      	ldrb	r1, [r7, #3]
 800b9e0:	f7f7 fb62 	bl	80030a8 <HAL_PCD_EP_Open>
 800b9e4:	4603      	mov	r3, r0
 800b9e6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b9e8:	7bfb      	ldrb	r3, [r7, #15]
 800b9ea:	4618      	mov	r0, r3
 800b9ec:	f000 f958 	bl	800bca0 <USBD_Get_USB_Status>
 800b9f0:	4603      	mov	r3, r0
 800b9f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b9f4:	7bbb      	ldrb	r3, [r7, #14]
}
 800b9f6:	4618      	mov	r0, r3
 800b9f8:	3710      	adds	r7, #16
 800b9fa:	46bd      	mov	sp, r7
 800b9fc:	bd80      	pop	{r7, pc}

0800b9fe <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b9fe:	b580      	push	{r7, lr}
 800ba00:	b084      	sub	sp, #16
 800ba02:	af00      	add	r7, sp, #0
 800ba04:	6078      	str	r0, [r7, #4]
 800ba06:	460b      	mov	r3, r1
 800ba08:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ba0a:	2300      	movs	r3, #0
 800ba0c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ba0e:	2300      	movs	r3, #0
 800ba10:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800ba18:	78fa      	ldrb	r2, [r7, #3]
 800ba1a:	4611      	mov	r1, r2
 800ba1c:	4618      	mov	r0, r3
 800ba1e:	f7f7 fba2 	bl	8003166 <HAL_PCD_EP_Close>
 800ba22:	4603      	mov	r3, r0
 800ba24:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ba26:	7bfb      	ldrb	r3, [r7, #15]
 800ba28:	4618      	mov	r0, r3
 800ba2a:	f000 f939 	bl	800bca0 <USBD_Get_USB_Status>
 800ba2e:	4603      	mov	r3, r0
 800ba30:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ba32:	7bbb      	ldrb	r3, [r7, #14]
}
 800ba34:	4618      	mov	r0, r3
 800ba36:	3710      	adds	r7, #16
 800ba38:	46bd      	mov	sp, r7
 800ba3a:	bd80      	pop	{r7, pc}

0800ba3c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ba3c:	b580      	push	{r7, lr}
 800ba3e:	b084      	sub	sp, #16
 800ba40:	af00      	add	r7, sp, #0
 800ba42:	6078      	str	r0, [r7, #4]
 800ba44:	460b      	mov	r3, r1
 800ba46:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ba48:	2300      	movs	r3, #0
 800ba4a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ba4c:	2300      	movs	r3, #0
 800ba4e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800ba56:	78fa      	ldrb	r2, [r7, #3]
 800ba58:	4611      	mov	r1, r2
 800ba5a:	4618      	mov	r0, r3
 800ba5c:	f7f7 fc4b 	bl	80032f6 <HAL_PCD_EP_SetStall>
 800ba60:	4603      	mov	r3, r0
 800ba62:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ba64:	7bfb      	ldrb	r3, [r7, #15]
 800ba66:	4618      	mov	r0, r3
 800ba68:	f000 f91a 	bl	800bca0 <USBD_Get_USB_Status>
 800ba6c:	4603      	mov	r3, r0
 800ba6e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ba70:	7bbb      	ldrb	r3, [r7, #14]
}
 800ba72:	4618      	mov	r0, r3
 800ba74:	3710      	adds	r7, #16
 800ba76:	46bd      	mov	sp, r7
 800ba78:	bd80      	pop	{r7, pc}

0800ba7a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ba7a:	b580      	push	{r7, lr}
 800ba7c:	b084      	sub	sp, #16
 800ba7e:	af00      	add	r7, sp, #0
 800ba80:	6078      	str	r0, [r7, #4]
 800ba82:	460b      	mov	r3, r1
 800ba84:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ba86:	2300      	movs	r3, #0
 800ba88:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ba8a:	2300      	movs	r3, #0
 800ba8c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800ba94:	78fa      	ldrb	r2, [r7, #3]
 800ba96:	4611      	mov	r1, r2
 800ba98:	4618      	mov	r0, r3
 800ba9a:	f7f7 fc7e 	bl	800339a <HAL_PCD_EP_ClrStall>
 800ba9e:	4603      	mov	r3, r0
 800baa0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800baa2:	7bfb      	ldrb	r3, [r7, #15]
 800baa4:	4618      	mov	r0, r3
 800baa6:	f000 f8fb 	bl	800bca0 <USBD_Get_USB_Status>
 800baaa:	4603      	mov	r3, r0
 800baac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800baae:	7bbb      	ldrb	r3, [r7, #14]
}
 800bab0:	4618      	mov	r0, r3
 800bab2:	3710      	adds	r7, #16
 800bab4:	46bd      	mov	sp, r7
 800bab6:	bd80      	pop	{r7, pc}

0800bab8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bab8:	b480      	push	{r7}
 800baba:	b085      	sub	sp, #20
 800babc:	af00      	add	r7, sp, #0
 800babe:	6078      	str	r0, [r7, #4]
 800bac0:	460b      	mov	r3, r1
 800bac2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800baca:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800bacc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	da0b      	bge.n	800baec <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800bad4:	78fb      	ldrb	r3, [r7, #3]
 800bad6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800bada:	68f9      	ldr	r1, [r7, #12]
 800badc:	4613      	mov	r3, r2
 800bade:	009b      	lsls	r3, r3, #2
 800bae0:	4413      	add	r3, r2
 800bae2:	00db      	lsls	r3, r3, #3
 800bae4:	440b      	add	r3, r1
 800bae6:	3312      	adds	r3, #18
 800bae8:	781b      	ldrb	r3, [r3, #0]
 800baea:	e00b      	b.n	800bb04 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800baec:	78fb      	ldrb	r3, [r7, #3]
 800baee:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800baf2:	68f9      	ldr	r1, [r7, #12]
 800baf4:	4613      	mov	r3, r2
 800baf6:	009b      	lsls	r3, r3, #2
 800baf8:	4413      	add	r3, r2
 800bafa:	00db      	lsls	r3, r3, #3
 800bafc:	440b      	add	r3, r1
 800bafe:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800bb02:	781b      	ldrb	r3, [r3, #0]
  }
}
 800bb04:	4618      	mov	r0, r3
 800bb06:	3714      	adds	r7, #20
 800bb08:	46bd      	mov	sp, r7
 800bb0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb0e:	4770      	bx	lr

0800bb10 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800bb10:	b580      	push	{r7, lr}
 800bb12:	b084      	sub	sp, #16
 800bb14:	af00      	add	r7, sp, #0
 800bb16:	6078      	str	r0, [r7, #4]
 800bb18:	460b      	mov	r3, r1
 800bb1a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bb1c:	2300      	movs	r3, #0
 800bb1e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bb20:	2300      	movs	r3, #0
 800bb22:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800bb2a:	78fa      	ldrb	r2, [r7, #3]
 800bb2c:	4611      	mov	r1, r2
 800bb2e:	4618      	mov	r0, r3
 800bb30:	f7f7 fa96 	bl	8003060 <HAL_PCD_SetAddress>
 800bb34:	4603      	mov	r3, r0
 800bb36:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bb38:	7bfb      	ldrb	r3, [r7, #15]
 800bb3a:	4618      	mov	r0, r3
 800bb3c:	f000 f8b0 	bl	800bca0 <USBD_Get_USB_Status>
 800bb40:	4603      	mov	r3, r0
 800bb42:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bb44:	7bbb      	ldrb	r3, [r7, #14]
}
 800bb46:	4618      	mov	r0, r3
 800bb48:	3710      	adds	r7, #16
 800bb4a:	46bd      	mov	sp, r7
 800bb4c:	bd80      	pop	{r7, pc}

0800bb4e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800bb4e:	b580      	push	{r7, lr}
 800bb50:	b086      	sub	sp, #24
 800bb52:	af00      	add	r7, sp, #0
 800bb54:	60f8      	str	r0, [r7, #12]
 800bb56:	607a      	str	r2, [r7, #4]
 800bb58:	603b      	str	r3, [r7, #0]
 800bb5a:	460b      	mov	r3, r1
 800bb5c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bb5e:	2300      	movs	r3, #0
 800bb60:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bb62:	2300      	movs	r3, #0
 800bb64:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800bb6c:	7af9      	ldrb	r1, [r7, #11]
 800bb6e:	683b      	ldr	r3, [r7, #0]
 800bb70:	687a      	ldr	r2, [r7, #4]
 800bb72:	f7f7 fb89 	bl	8003288 <HAL_PCD_EP_Transmit>
 800bb76:	4603      	mov	r3, r0
 800bb78:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bb7a:	7dfb      	ldrb	r3, [r7, #23]
 800bb7c:	4618      	mov	r0, r3
 800bb7e:	f000 f88f 	bl	800bca0 <USBD_Get_USB_Status>
 800bb82:	4603      	mov	r3, r0
 800bb84:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bb86:	7dbb      	ldrb	r3, [r7, #22]
}
 800bb88:	4618      	mov	r0, r3
 800bb8a:	3718      	adds	r7, #24
 800bb8c:	46bd      	mov	sp, r7
 800bb8e:	bd80      	pop	{r7, pc}

0800bb90 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800bb90:	b580      	push	{r7, lr}
 800bb92:	b086      	sub	sp, #24
 800bb94:	af00      	add	r7, sp, #0
 800bb96:	60f8      	str	r0, [r7, #12]
 800bb98:	607a      	str	r2, [r7, #4]
 800bb9a:	603b      	str	r3, [r7, #0]
 800bb9c:	460b      	mov	r3, r1
 800bb9e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bba0:	2300      	movs	r3, #0
 800bba2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bba4:	2300      	movs	r3, #0
 800bba6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800bbae:	7af9      	ldrb	r1, [r7, #11]
 800bbb0:	683b      	ldr	r3, [r7, #0]
 800bbb2:	687a      	ldr	r2, [r7, #4]
 800bbb4:	f7f7 fb1f 	bl	80031f6 <HAL_PCD_EP_Receive>
 800bbb8:	4603      	mov	r3, r0
 800bbba:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bbbc:	7dfb      	ldrb	r3, [r7, #23]
 800bbbe:	4618      	mov	r0, r3
 800bbc0:	f000 f86e 	bl	800bca0 <USBD_Get_USB_Status>
 800bbc4:	4603      	mov	r3, r0
 800bbc6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bbc8:	7dbb      	ldrb	r3, [r7, #22]
}
 800bbca:	4618      	mov	r0, r3
 800bbcc:	3718      	adds	r7, #24
 800bbce:	46bd      	mov	sp, r7
 800bbd0:	bd80      	pop	{r7, pc}

0800bbd2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bbd2:	b580      	push	{r7, lr}
 800bbd4:	b082      	sub	sp, #8
 800bbd6:	af00      	add	r7, sp, #0
 800bbd8:	6078      	str	r0, [r7, #4]
 800bbda:	460b      	mov	r3, r1
 800bbdc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800bbe4:	78fa      	ldrb	r2, [r7, #3]
 800bbe6:	4611      	mov	r1, r2
 800bbe8:	4618      	mov	r0, r3
 800bbea:	f7f7 fb35 	bl	8003258 <HAL_PCD_EP_GetRxCount>
 800bbee:	4603      	mov	r3, r0
}
 800bbf0:	4618      	mov	r0, r3
 800bbf2:	3708      	adds	r7, #8
 800bbf4:	46bd      	mov	sp, r7
 800bbf6:	bd80      	pop	{r7, pc}

0800bbf8 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bbf8:	b580      	push	{r7, lr}
 800bbfa:	b082      	sub	sp, #8
 800bbfc:	af00      	add	r7, sp, #0
 800bbfe:	6078      	str	r0, [r7, #4]
 800bc00:	460b      	mov	r3, r1
 800bc02:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800bc04:	78fb      	ldrb	r3, [r7, #3]
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d002      	beq.n	800bc10 <HAL_PCDEx_LPM_Callback+0x18>
 800bc0a:	2b01      	cmp	r3, #1
 800bc0c:	d013      	beq.n	800bc36 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800bc0e:	e023      	b.n	800bc58 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	7a5b      	ldrb	r3, [r3, #9]
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d007      	beq.n	800bc28 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800bc18:	f000 f83c 	bl	800bc94 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bc1c:	4b10      	ldr	r3, [pc, #64]	@ (800bc60 <HAL_PCDEx_LPM_Callback+0x68>)
 800bc1e:	691b      	ldr	r3, [r3, #16]
 800bc20:	4a0f      	ldr	r2, [pc, #60]	@ (800bc60 <HAL_PCDEx_LPM_Callback+0x68>)
 800bc22:	f023 0306 	bic.w	r3, r3, #6
 800bc26:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800bc2e:	4618      	mov	r0, r3
 800bc30:	f7fe fc84 	bl	800a53c <USBD_LL_Resume>
    break;
 800bc34:	e010      	b.n	800bc58 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800bc3c:	4618      	mov	r0, r3
 800bc3e:	f7fe fc67 	bl	800a510 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	7a5b      	ldrb	r3, [r3, #9]
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d005      	beq.n	800bc56 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bc4a:	4b05      	ldr	r3, [pc, #20]	@ (800bc60 <HAL_PCDEx_LPM_Callback+0x68>)
 800bc4c:	691b      	ldr	r3, [r3, #16]
 800bc4e:	4a04      	ldr	r2, [pc, #16]	@ (800bc60 <HAL_PCDEx_LPM_Callback+0x68>)
 800bc50:	f043 0306 	orr.w	r3, r3, #6
 800bc54:	6113      	str	r3, [r2, #16]
    break;
 800bc56:	bf00      	nop
}
 800bc58:	bf00      	nop
 800bc5a:	3708      	adds	r7, #8
 800bc5c:	46bd      	mov	sp, r7
 800bc5e:	bd80      	pop	{r7, pc}
 800bc60:	e000ed00 	.word	0xe000ed00

0800bc64 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800bc64:	b480      	push	{r7}
 800bc66:	b083      	sub	sp, #12
 800bc68:	af00      	add	r7, sp, #0
 800bc6a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800bc6c:	4b03      	ldr	r3, [pc, #12]	@ (800bc7c <USBD_static_malloc+0x18>)
}
 800bc6e:	4618      	mov	r0, r3
 800bc70:	370c      	adds	r7, #12
 800bc72:	46bd      	mov	sp, r7
 800bc74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc78:	4770      	bx	lr
 800bc7a:	bf00      	nop
 800bc7c:	20000b14 	.word	0x20000b14

0800bc80 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800bc80:	b480      	push	{r7}
 800bc82:	b083      	sub	sp, #12
 800bc84:	af00      	add	r7, sp, #0
 800bc86:	6078      	str	r0, [r7, #4]

}
 800bc88:	bf00      	nop
 800bc8a:	370c      	adds	r7, #12
 800bc8c:	46bd      	mov	sp, r7
 800bc8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc92:	4770      	bx	lr

0800bc94 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800bc94:	b580      	push	{r7, lr}
 800bc96:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800bc98:	f7f4 fe74 	bl	8000984 <SystemClock_Config>
}
 800bc9c:	bf00      	nop
 800bc9e:	bd80      	pop	{r7, pc}

0800bca0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800bca0:	b480      	push	{r7}
 800bca2:	b085      	sub	sp, #20
 800bca4:	af00      	add	r7, sp, #0
 800bca6:	4603      	mov	r3, r0
 800bca8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bcaa:	2300      	movs	r3, #0
 800bcac:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800bcae:	79fb      	ldrb	r3, [r7, #7]
 800bcb0:	2b03      	cmp	r3, #3
 800bcb2:	d817      	bhi.n	800bce4 <USBD_Get_USB_Status+0x44>
 800bcb4:	a201      	add	r2, pc, #4	@ (adr r2, 800bcbc <USBD_Get_USB_Status+0x1c>)
 800bcb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bcba:	bf00      	nop
 800bcbc:	0800bccd 	.word	0x0800bccd
 800bcc0:	0800bcd3 	.word	0x0800bcd3
 800bcc4:	0800bcd9 	.word	0x0800bcd9
 800bcc8:	0800bcdf 	.word	0x0800bcdf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800bccc:	2300      	movs	r3, #0
 800bcce:	73fb      	strb	r3, [r7, #15]
    break;
 800bcd0:	e00b      	b.n	800bcea <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bcd2:	2303      	movs	r3, #3
 800bcd4:	73fb      	strb	r3, [r7, #15]
    break;
 800bcd6:	e008      	b.n	800bcea <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bcd8:	2301      	movs	r3, #1
 800bcda:	73fb      	strb	r3, [r7, #15]
    break;
 800bcdc:	e005      	b.n	800bcea <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bcde:	2303      	movs	r3, #3
 800bce0:	73fb      	strb	r3, [r7, #15]
    break;
 800bce2:	e002      	b.n	800bcea <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800bce4:	2303      	movs	r3, #3
 800bce6:	73fb      	strb	r3, [r7, #15]
    break;
 800bce8:	bf00      	nop
  }
  return usb_status;
 800bcea:	7bfb      	ldrb	r3, [r7, #15]
}
 800bcec:	4618      	mov	r0, r3
 800bcee:	3714      	adds	r7, #20
 800bcf0:	46bd      	mov	sp, r7
 800bcf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcf6:	4770      	bx	lr

0800bcf8 <std>:
 800bcf8:	2300      	movs	r3, #0
 800bcfa:	b510      	push	{r4, lr}
 800bcfc:	4604      	mov	r4, r0
 800bcfe:	e9c0 3300 	strd	r3, r3, [r0]
 800bd02:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bd06:	6083      	str	r3, [r0, #8]
 800bd08:	8181      	strh	r1, [r0, #12]
 800bd0a:	6643      	str	r3, [r0, #100]	@ 0x64
 800bd0c:	81c2      	strh	r2, [r0, #14]
 800bd0e:	6183      	str	r3, [r0, #24]
 800bd10:	4619      	mov	r1, r3
 800bd12:	2208      	movs	r2, #8
 800bd14:	305c      	adds	r0, #92	@ 0x5c
 800bd16:	f000 f9f9 	bl	800c10c <memset>
 800bd1a:	4b0d      	ldr	r3, [pc, #52]	@ (800bd50 <std+0x58>)
 800bd1c:	6263      	str	r3, [r4, #36]	@ 0x24
 800bd1e:	4b0d      	ldr	r3, [pc, #52]	@ (800bd54 <std+0x5c>)
 800bd20:	62a3      	str	r3, [r4, #40]	@ 0x28
 800bd22:	4b0d      	ldr	r3, [pc, #52]	@ (800bd58 <std+0x60>)
 800bd24:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800bd26:	4b0d      	ldr	r3, [pc, #52]	@ (800bd5c <std+0x64>)
 800bd28:	6323      	str	r3, [r4, #48]	@ 0x30
 800bd2a:	4b0d      	ldr	r3, [pc, #52]	@ (800bd60 <std+0x68>)
 800bd2c:	6224      	str	r4, [r4, #32]
 800bd2e:	429c      	cmp	r4, r3
 800bd30:	d006      	beq.n	800bd40 <std+0x48>
 800bd32:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800bd36:	4294      	cmp	r4, r2
 800bd38:	d002      	beq.n	800bd40 <std+0x48>
 800bd3a:	33d0      	adds	r3, #208	@ 0xd0
 800bd3c:	429c      	cmp	r4, r3
 800bd3e:	d105      	bne.n	800bd4c <std+0x54>
 800bd40:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800bd44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bd48:	f000 ba58 	b.w	800c1fc <__retarget_lock_init_recursive>
 800bd4c:	bd10      	pop	{r4, pc}
 800bd4e:	bf00      	nop
 800bd50:	0800bf5d 	.word	0x0800bf5d
 800bd54:	0800bf7f 	.word	0x0800bf7f
 800bd58:	0800bfb7 	.word	0x0800bfb7
 800bd5c:	0800bfdb 	.word	0x0800bfdb
 800bd60:	20000d34 	.word	0x20000d34

0800bd64 <stdio_exit_handler>:
 800bd64:	4a02      	ldr	r2, [pc, #8]	@ (800bd70 <stdio_exit_handler+0xc>)
 800bd66:	4903      	ldr	r1, [pc, #12]	@ (800bd74 <stdio_exit_handler+0x10>)
 800bd68:	4803      	ldr	r0, [pc, #12]	@ (800bd78 <stdio_exit_handler+0x14>)
 800bd6a:	f000 b869 	b.w	800be40 <_fwalk_sglue>
 800bd6e:	bf00      	nop
 800bd70:	2000021c 	.word	0x2000021c
 800bd74:	0800cab9 	.word	0x0800cab9
 800bd78:	2000022c 	.word	0x2000022c

0800bd7c <cleanup_stdio>:
 800bd7c:	6841      	ldr	r1, [r0, #4]
 800bd7e:	4b0c      	ldr	r3, [pc, #48]	@ (800bdb0 <cleanup_stdio+0x34>)
 800bd80:	4299      	cmp	r1, r3
 800bd82:	b510      	push	{r4, lr}
 800bd84:	4604      	mov	r4, r0
 800bd86:	d001      	beq.n	800bd8c <cleanup_stdio+0x10>
 800bd88:	f000 fe96 	bl	800cab8 <_fflush_r>
 800bd8c:	68a1      	ldr	r1, [r4, #8]
 800bd8e:	4b09      	ldr	r3, [pc, #36]	@ (800bdb4 <cleanup_stdio+0x38>)
 800bd90:	4299      	cmp	r1, r3
 800bd92:	d002      	beq.n	800bd9a <cleanup_stdio+0x1e>
 800bd94:	4620      	mov	r0, r4
 800bd96:	f000 fe8f 	bl	800cab8 <_fflush_r>
 800bd9a:	68e1      	ldr	r1, [r4, #12]
 800bd9c:	4b06      	ldr	r3, [pc, #24]	@ (800bdb8 <cleanup_stdio+0x3c>)
 800bd9e:	4299      	cmp	r1, r3
 800bda0:	d004      	beq.n	800bdac <cleanup_stdio+0x30>
 800bda2:	4620      	mov	r0, r4
 800bda4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bda8:	f000 be86 	b.w	800cab8 <_fflush_r>
 800bdac:	bd10      	pop	{r4, pc}
 800bdae:	bf00      	nop
 800bdb0:	20000d34 	.word	0x20000d34
 800bdb4:	20000d9c 	.word	0x20000d9c
 800bdb8:	20000e04 	.word	0x20000e04

0800bdbc <global_stdio_init.part.0>:
 800bdbc:	b510      	push	{r4, lr}
 800bdbe:	4b0b      	ldr	r3, [pc, #44]	@ (800bdec <global_stdio_init.part.0+0x30>)
 800bdc0:	4c0b      	ldr	r4, [pc, #44]	@ (800bdf0 <global_stdio_init.part.0+0x34>)
 800bdc2:	4a0c      	ldr	r2, [pc, #48]	@ (800bdf4 <global_stdio_init.part.0+0x38>)
 800bdc4:	601a      	str	r2, [r3, #0]
 800bdc6:	4620      	mov	r0, r4
 800bdc8:	2200      	movs	r2, #0
 800bdca:	2104      	movs	r1, #4
 800bdcc:	f7ff ff94 	bl	800bcf8 <std>
 800bdd0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800bdd4:	2201      	movs	r2, #1
 800bdd6:	2109      	movs	r1, #9
 800bdd8:	f7ff ff8e 	bl	800bcf8 <std>
 800bddc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800bde0:	2202      	movs	r2, #2
 800bde2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bde6:	2112      	movs	r1, #18
 800bde8:	f7ff bf86 	b.w	800bcf8 <std>
 800bdec:	20000e6c 	.word	0x20000e6c
 800bdf0:	20000d34 	.word	0x20000d34
 800bdf4:	0800bd65 	.word	0x0800bd65

0800bdf8 <__sfp_lock_acquire>:
 800bdf8:	4801      	ldr	r0, [pc, #4]	@ (800be00 <__sfp_lock_acquire+0x8>)
 800bdfa:	f000 ba00 	b.w	800c1fe <__retarget_lock_acquire_recursive>
 800bdfe:	bf00      	nop
 800be00:	20000e75 	.word	0x20000e75

0800be04 <__sfp_lock_release>:
 800be04:	4801      	ldr	r0, [pc, #4]	@ (800be0c <__sfp_lock_release+0x8>)
 800be06:	f000 b9fb 	b.w	800c200 <__retarget_lock_release_recursive>
 800be0a:	bf00      	nop
 800be0c:	20000e75 	.word	0x20000e75

0800be10 <__sinit>:
 800be10:	b510      	push	{r4, lr}
 800be12:	4604      	mov	r4, r0
 800be14:	f7ff fff0 	bl	800bdf8 <__sfp_lock_acquire>
 800be18:	6a23      	ldr	r3, [r4, #32]
 800be1a:	b11b      	cbz	r3, 800be24 <__sinit+0x14>
 800be1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800be20:	f7ff bff0 	b.w	800be04 <__sfp_lock_release>
 800be24:	4b04      	ldr	r3, [pc, #16]	@ (800be38 <__sinit+0x28>)
 800be26:	6223      	str	r3, [r4, #32]
 800be28:	4b04      	ldr	r3, [pc, #16]	@ (800be3c <__sinit+0x2c>)
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d1f5      	bne.n	800be1c <__sinit+0xc>
 800be30:	f7ff ffc4 	bl	800bdbc <global_stdio_init.part.0>
 800be34:	e7f2      	b.n	800be1c <__sinit+0xc>
 800be36:	bf00      	nop
 800be38:	0800bd7d 	.word	0x0800bd7d
 800be3c:	20000e6c 	.word	0x20000e6c

0800be40 <_fwalk_sglue>:
 800be40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800be44:	4607      	mov	r7, r0
 800be46:	4688      	mov	r8, r1
 800be48:	4614      	mov	r4, r2
 800be4a:	2600      	movs	r6, #0
 800be4c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800be50:	f1b9 0901 	subs.w	r9, r9, #1
 800be54:	d505      	bpl.n	800be62 <_fwalk_sglue+0x22>
 800be56:	6824      	ldr	r4, [r4, #0]
 800be58:	2c00      	cmp	r4, #0
 800be5a:	d1f7      	bne.n	800be4c <_fwalk_sglue+0xc>
 800be5c:	4630      	mov	r0, r6
 800be5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800be62:	89ab      	ldrh	r3, [r5, #12]
 800be64:	2b01      	cmp	r3, #1
 800be66:	d907      	bls.n	800be78 <_fwalk_sglue+0x38>
 800be68:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800be6c:	3301      	adds	r3, #1
 800be6e:	d003      	beq.n	800be78 <_fwalk_sglue+0x38>
 800be70:	4629      	mov	r1, r5
 800be72:	4638      	mov	r0, r7
 800be74:	47c0      	blx	r8
 800be76:	4306      	orrs	r6, r0
 800be78:	3568      	adds	r5, #104	@ 0x68
 800be7a:	e7e9      	b.n	800be50 <_fwalk_sglue+0x10>

0800be7c <iprintf>:
 800be7c:	b40f      	push	{r0, r1, r2, r3}
 800be7e:	b507      	push	{r0, r1, r2, lr}
 800be80:	4906      	ldr	r1, [pc, #24]	@ (800be9c <iprintf+0x20>)
 800be82:	ab04      	add	r3, sp, #16
 800be84:	6808      	ldr	r0, [r1, #0]
 800be86:	f853 2b04 	ldr.w	r2, [r3], #4
 800be8a:	6881      	ldr	r1, [r0, #8]
 800be8c:	9301      	str	r3, [sp, #4]
 800be8e:	f000 fae9 	bl	800c464 <_vfiprintf_r>
 800be92:	b003      	add	sp, #12
 800be94:	f85d eb04 	ldr.w	lr, [sp], #4
 800be98:	b004      	add	sp, #16
 800be9a:	4770      	bx	lr
 800be9c:	20000228 	.word	0x20000228

0800bea0 <_puts_r>:
 800bea0:	6a03      	ldr	r3, [r0, #32]
 800bea2:	b570      	push	{r4, r5, r6, lr}
 800bea4:	6884      	ldr	r4, [r0, #8]
 800bea6:	4605      	mov	r5, r0
 800bea8:	460e      	mov	r6, r1
 800beaa:	b90b      	cbnz	r3, 800beb0 <_puts_r+0x10>
 800beac:	f7ff ffb0 	bl	800be10 <__sinit>
 800beb0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800beb2:	07db      	lsls	r3, r3, #31
 800beb4:	d405      	bmi.n	800bec2 <_puts_r+0x22>
 800beb6:	89a3      	ldrh	r3, [r4, #12]
 800beb8:	0598      	lsls	r0, r3, #22
 800beba:	d402      	bmi.n	800bec2 <_puts_r+0x22>
 800bebc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bebe:	f000 f99e 	bl	800c1fe <__retarget_lock_acquire_recursive>
 800bec2:	89a3      	ldrh	r3, [r4, #12]
 800bec4:	0719      	lsls	r1, r3, #28
 800bec6:	d502      	bpl.n	800bece <_puts_r+0x2e>
 800bec8:	6923      	ldr	r3, [r4, #16]
 800beca:	2b00      	cmp	r3, #0
 800becc:	d135      	bne.n	800bf3a <_puts_r+0x9a>
 800bece:	4621      	mov	r1, r4
 800bed0:	4628      	mov	r0, r5
 800bed2:	f000 f8c5 	bl	800c060 <__swsetup_r>
 800bed6:	b380      	cbz	r0, 800bf3a <_puts_r+0x9a>
 800bed8:	f04f 35ff 	mov.w	r5, #4294967295
 800bedc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bede:	07da      	lsls	r2, r3, #31
 800bee0:	d405      	bmi.n	800beee <_puts_r+0x4e>
 800bee2:	89a3      	ldrh	r3, [r4, #12]
 800bee4:	059b      	lsls	r3, r3, #22
 800bee6:	d402      	bmi.n	800beee <_puts_r+0x4e>
 800bee8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800beea:	f000 f989 	bl	800c200 <__retarget_lock_release_recursive>
 800beee:	4628      	mov	r0, r5
 800bef0:	bd70      	pop	{r4, r5, r6, pc}
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	da04      	bge.n	800bf00 <_puts_r+0x60>
 800bef6:	69a2      	ldr	r2, [r4, #24]
 800bef8:	429a      	cmp	r2, r3
 800befa:	dc17      	bgt.n	800bf2c <_puts_r+0x8c>
 800befc:	290a      	cmp	r1, #10
 800befe:	d015      	beq.n	800bf2c <_puts_r+0x8c>
 800bf00:	6823      	ldr	r3, [r4, #0]
 800bf02:	1c5a      	adds	r2, r3, #1
 800bf04:	6022      	str	r2, [r4, #0]
 800bf06:	7019      	strb	r1, [r3, #0]
 800bf08:	68a3      	ldr	r3, [r4, #8]
 800bf0a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800bf0e:	3b01      	subs	r3, #1
 800bf10:	60a3      	str	r3, [r4, #8]
 800bf12:	2900      	cmp	r1, #0
 800bf14:	d1ed      	bne.n	800bef2 <_puts_r+0x52>
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	da11      	bge.n	800bf3e <_puts_r+0x9e>
 800bf1a:	4622      	mov	r2, r4
 800bf1c:	210a      	movs	r1, #10
 800bf1e:	4628      	mov	r0, r5
 800bf20:	f000 f85f 	bl	800bfe2 <__swbuf_r>
 800bf24:	3001      	adds	r0, #1
 800bf26:	d0d7      	beq.n	800bed8 <_puts_r+0x38>
 800bf28:	250a      	movs	r5, #10
 800bf2a:	e7d7      	b.n	800bedc <_puts_r+0x3c>
 800bf2c:	4622      	mov	r2, r4
 800bf2e:	4628      	mov	r0, r5
 800bf30:	f000 f857 	bl	800bfe2 <__swbuf_r>
 800bf34:	3001      	adds	r0, #1
 800bf36:	d1e7      	bne.n	800bf08 <_puts_r+0x68>
 800bf38:	e7ce      	b.n	800bed8 <_puts_r+0x38>
 800bf3a:	3e01      	subs	r6, #1
 800bf3c:	e7e4      	b.n	800bf08 <_puts_r+0x68>
 800bf3e:	6823      	ldr	r3, [r4, #0]
 800bf40:	1c5a      	adds	r2, r3, #1
 800bf42:	6022      	str	r2, [r4, #0]
 800bf44:	220a      	movs	r2, #10
 800bf46:	701a      	strb	r2, [r3, #0]
 800bf48:	e7ee      	b.n	800bf28 <_puts_r+0x88>
	...

0800bf4c <puts>:
 800bf4c:	4b02      	ldr	r3, [pc, #8]	@ (800bf58 <puts+0xc>)
 800bf4e:	4601      	mov	r1, r0
 800bf50:	6818      	ldr	r0, [r3, #0]
 800bf52:	f7ff bfa5 	b.w	800bea0 <_puts_r>
 800bf56:	bf00      	nop
 800bf58:	20000228 	.word	0x20000228

0800bf5c <__sread>:
 800bf5c:	b510      	push	{r4, lr}
 800bf5e:	460c      	mov	r4, r1
 800bf60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf64:	f000 f8fc 	bl	800c160 <_read_r>
 800bf68:	2800      	cmp	r0, #0
 800bf6a:	bfab      	itete	ge
 800bf6c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800bf6e:	89a3      	ldrhlt	r3, [r4, #12]
 800bf70:	181b      	addge	r3, r3, r0
 800bf72:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800bf76:	bfac      	ite	ge
 800bf78:	6563      	strge	r3, [r4, #84]	@ 0x54
 800bf7a:	81a3      	strhlt	r3, [r4, #12]
 800bf7c:	bd10      	pop	{r4, pc}

0800bf7e <__swrite>:
 800bf7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf82:	461f      	mov	r7, r3
 800bf84:	898b      	ldrh	r3, [r1, #12]
 800bf86:	05db      	lsls	r3, r3, #23
 800bf88:	4605      	mov	r5, r0
 800bf8a:	460c      	mov	r4, r1
 800bf8c:	4616      	mov	r6, r2
 800bf8e:	d505      	bpl.n	800bf9c <__swrite+0x1e>
 800bf90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf94:	2302      	movs	r3, #2
 800bf96:	2200      	movs	r2, #0
 800bf98:	f000 f8d0 	bl	800c13c <_lseek_r>
 800bf9c:	89a3      	ldrh	r3, [r4, #12]
 800bf9e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bfa2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800bfa6:	81a3      	strh	r3, [r4, #12]
 800bfa8:	4632      	mov	r2, r6
 800bfaa:	463b      	mov	r3, r7
 800bfac:	4628      	mov	r0, r5
 800bfae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bfb2:	f000 b8e7 	b.w	800c184 <_write_r>

0800bfb6 <__sseek>:
 800bfb6:	b510      	push	{r4, lr}
 800bfb8:	460c      	mov	r4, r1
 800bfba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bfbe:	f000 f8bd 	bl	800c13c <_lseek_r>
 800bfc2:	1c43      	adds	r3, r0, #1
 800bfc4:	89a3      	ldrh	r3, [r4, #12]
 800bfc6:	bf15      	itete	ne
 800bfc8:	6560      	strne	r0, [r4, #84]	@ 0x54
 800bfca:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800bfce:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800bfd2:	81a3      	strheq	r3, [r4, #12]
 800bfd4:	bf18      	it	ne
 800bfd6:	81a3      	strhne	r3, [r4, #12]
 800bfd8:	bd10      	pop	{r4, pc}

0800bfda <__sclose>:
 800bfda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bfde:	f000 b89d 	b.w	800c11c <_close_r>

0800bfe2 <__swbuf_r>:
 800bfe2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfe4:	460e      	mov	r6, r1
 800bfe6:	4614      	mov	r4, r2
 800bfe8:	4605      	mov	r5, r0
 800bfea:	b118      	cbz	r0, 800bff4 <__swbuf_r+0x12>
 800bfec:	6a03      	ldr	r3, [r0, #32]
 800bfee:	b90b      	cbnz	r3, 800bff4 <__swbuf_r+0x12>
 800bff0:	f7ff ff0e 	bl	800be10 <__sinit>
 800bff4:	69a3      	ldr	r3, [r4, #24]
 800bff6:	60a3      	str	r3, [r4, #8]
 800bff8:	89a3      	ldrh	r3, [r4, #12]
 800bffa:	071a      	lsls	r2, r3, #28
 800bffc:	d501      	bpl.n	800c002 <__swbuf_r+0x20>
 800bffe:	6923      	ldr	r3, [r4, #16]
 800c000:	b943      	cbnz	r3, 800c014 <__swbuf_r+0x32>
 800c002:	4621      	mov	r1, r4
 800c004:	4628      	mov	r0, r5
 800c006:	f000 f82b 	bl	800c060 <__swsetup_r>
 800c00a:	b118      	cbz	r0, 800c014 <__swbuf_r+0x32>
 800c00c:	f04f 37ff 	mov.w	r7, #4294967295
 800c010:	4638      	mov	r0, r7
 800c012:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c014:	6823      	ldr	r3, [r4, #0]
 800c016:	6922      	ldr	r2, [r4, #16]
 800c018:	1a98      	subs	r0, r3, r2
 800c01a:	6963      	ldr	r3, [r4, #20]
 800c01c:	b2f6      	uxtb	r6, r6
 800c01e:	4283      	cmp	r3, r0
 800c020:	4637      	mov	r7, r6
 800c022:	dc05      	bgt.n	800c030 <__swbuf_r+0x4e>
 800c024:	4621      	mov	r1, r4
 800c026:	4628      	mov	r0, r5
 800c028:	f000 fd46 	bl	800cab8 <_fflush_r>
 800c02c:	2800      	cmp	r0, #0
 800c02e:	d1ed      	bne.n	800c00c <__swbuf_r+0x2a>
 800c030:	68a3      	ldr	r3, [r4, #8]
 800c032:	3b01      	subs	r3, #1
 800c034:	60a3      	str	r3, [r4, #8]
 800c036:	6823      	ldr	r3, [r4, #0]
 800c038:	1c5a      	adds	r2, r3, #1
 800c03a:	6022      	str	r2, [r4, #0]
 800c03c:	701e      	strb	r6, [r3, #0]
 800c03e:	6962      	ldr	r2, [r4, #20]
 800c040:	1c43      	adds	r3, r0, #1
 800c042:	429a      	cmp	r2, r3
 800c044:	d004      	beq.n	800c050 <__swbuf_r+0x6e>
 800c046:	89a3      	ldrh	r3, [r4, #12]
 800c048:	07db      	lsls	r3, r3, #31
 800c04a:	d5e1      	bpl.n	800c010 <__swbuf_r+0x2e>
 800c04c:	2e0a      	cmp	r6, #10
 800c04e:	d1df      	bne.n	800c010 <__swbuf_r+0x2e>
 800c050:	4621      	mov	r1, r4
 800c052:	4628      	mov	r0, r5
 800c054:	f000 fd30 	bl	800cab8 <_fflush_r>
 800c058:	2800      	cmp	r0, #0
 800c05a:	d0d9      	beq.n	800c010 <__swbuf_r+0x2e>
 800c05c:	e7d6      	b.n	800c00c <__swbuf_r+0x2a>
	...

0800c060 <__swsetup_r>:
 800c060:	b538      	push	{r3, r4, r5, lr}
 800c062:	4b29      	ldr	r3, [pc, #164]	@ (800c108 <__swsetup_r+0xa8>)
 800c064:	4605      	mov	r5, r0
 800c066:	6818      	ldr	r0, [r3, #0]
 800c068:	460c      	mov	r4, r1
 800c06a:	b118      	cbz	r0, 800c074 <__swsetup_r+0x14>
 800c06c:	6a03      	ldr	r3, [r0, #32]
 800c06e:	b90b      	cbnz	r3, 800c074 <__swsetup_r+0x14>
 800c070:	f7ff fece 	bl	800be10 <__sinit>
 800c074:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c078:	0719      	lsls	r1, r3, #28
 800c07a:	d422      	bmi.n	800c0c2 <__swsetup_r+0x62>
 800c07c:	06da      	lsls	r2, r3, #27
 800c07e:	d407      	bmi.n	800c090 <__swsetup_r+0x30>
 800c080:	2209      	movs	r2, #9
 800c082:	602a      	str	r2, [r5, #0]
 800c084:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c088:	81a3      	strh	r3, [r4, #12]
 800c08a:	f04f 30ff 	mov.w	r0, #4294967295
 800c08e:	e033      	b.n	800c0f8 <__swsetup_r+0x98>
 800c090:	0758      	lsls	r0, r3, #29
 800c092:	d512      	bpl.n	800c0ba <__swsetup_r+0x5a>
 800c094:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c096:	b141      	cbz	r1, 800c0aa <__swsetup_r+0x4a>
 800c098:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c09c:	4299      	cmp	r1, r3
 800c09e:	d002      	beq.n	800c0a6 <__swsetup_r+0x46>
 800c0a0:	4628      	mov	r0, r5
 800c0a2:	f000 f8bd 	bl	800c220 <_free_r>
 800c0a6:	2300      	movs	r3, #0
 800c0a8:	6363      	str	r3, [r4, #52]	@ 0x34
 800c0aa:	89a3      	ldrh	r3, [r4, #12]
 800c0ac:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c0b0:	81a3      	strh	r3, [r4, #12]
 800c0b2:	2300      	movs	r3, #0
 800c0b4:	6063      	str	r3, [r4, #4]
 800c0b6:	6923      	ldr	r3, [r4, #16]
 800c0b8:	6023      	str	r3, [r4, #0]
 800c0ba:	89a3      	ldrh	r3, [r4, #12]
 800c0bc:	f043 0308 	orr.w	r3, r3, #8
 800c0c0:	81a3      	strh	r3, [r4, #12]
 800c0c2:	6923      	ldr	r3, [r4, #16]
 800c0c4:	b94b      	cbnz	r3, 800c0da <__swsetup_r+0x7a>
 800c0c6:	89a3      	ldrh	r3, [r4, #12]
 800c0c8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c0cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c0d0:	d003      	beq.n	800c0da <__swsetup_r+0x7a>
 800c0d2:	4621      	mov	r1, r4
 800c0d4:	4628      	mov	r0, r5
 800c0d6:	f000 fd3d 	bl	800cb54 <__smakebuf_r>
 800c0da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c0de:	f013 0201 	ands.w	r2, r3, #1
 800c0e2:	d00a      	beq.n	800c0fa <__swsetup_r+0x9a>
 800c0e4:	2200      	movs	r2, #0
 800c0e6:	60a2      	str	r2, [r4, #8]
 800c0e8:	6962      	ldr	r2, [r4, #20]
 800c0ea:	4252      	negs	r2, r2
 800c0ec:	61a2      	str	r2, [r4, #24]
 800c0ee:	6922      	ldr	r2, [r4, #16]
 800c0f0:	b942      	cbnz	r2, 800c104 <__swsetup_r+0xa4>
 800c0f2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c0f6:	d1c5      	bne.n	800c084 <__swsetup_r+0x24>
 800c0f8:	bd38      	pop	{r3, r4, r5, pc}
 800c0fa:	0799      	lsls	r1, r3, #30
 800c0fc:	bf58      	it	pl
 800c0fe:	6962      	ldrpl	r2, [r4, #20]
 800c100:	60a2      	str	r2, [r4, #8]
 800c102:	e7f4      	b.n	800c0ee <__swsetup_r+0x8e>
 800c104:	2000      	movs	r0, #0
 800c106:	e7f7      	b.n	800c0f8 <__swsetup_r+0x98>
 800c108:	20000228 	.word	0x20000228

0800c10c <memset>:
 800c10c:	4402      	add	r2, r0
 800c10e:	4603      	mov	r3, r0
 800c110:	4293      	cmp	r3, r2
 800c112:	d100      	bne.n	800c116 <memset+0xa>
 800c114:	4770      	bx	lr
 800c116:	f803 1b01 	strb.w	r1, [r3], #1
 800c11a:	e7f9      	b.n	800c110 <memset+0x4>

0800c11c <_close_r>:
 800c11c:	b538      	push	{r3, r4, r5, lr}
 800c11e:	4d06      	ldr	r5, [pc, #24]	@ (800c138 <_close_r+0x1c>)
 800c120:	2300      	movs	r3, #0
 800c122:	4604      	mov	r4, r0
 800c124:	4608      	mov	r0, r1
 800c126:	602b      	str	r3, [r5, #0]
 800c128:	f7f4 ff31 	bl	8000f8e <_close>
 800c12c:	1c43      	adds	r3, r0, #1
 800c12e:	d102      	bne.n	800c136 <_close_r+0x1a>
 800c130:	682b      	ldr	r3, [r5, #0]
 800c132:	b103      	cbz	r3, 800c136 <_close_r+0x1a>
 800c134:	6023      	str	r3, [r4, #0]
 800c136:	bd38      	pop	{r3, r4, r5, pc}
 800c138:	20000e70 	.word	0x20000e70

0800c13c <_lseek_r>:
 800c13c:	b538      	push	{r3, r4, r5, lr}
 800c13e:	4d07      	ldr	r5, [pc, #28]	@ (800c15c <_lseek_r+0x20>)
 800c140:	4604      	mov	r4, r0
 800c142:	4608      	mov	r0, r1
 800c144:	4611      	mov	r1, r2
 800c146:	2200      	movs	r2, #0
 800c148:	602a      	str	r2, [r5, #0]
 800c14a:	461a      	mov	r2, r3
 800c14c:	f7f4 ff46 	bl	8000fdc <_lseek>
 800c150:	1c43      	adds	r3, r0, #1
 800c152:	d102      	bne.n	800c15a <_lseek_r+0x1e>
 800c154:	682b      	ldr	r3, [r5, #0]
 800c156:	b103      	cbz	r3, 800c15a <_lseek_r+0x1e>
 800c158:	6023      	str	r3, [r4, #0]
 800c15a:	bd38      	pop	{r3, r4, r5, pc}
 800c15c:	20000e70 	.word	0x20000e70

0800c160 <_read_r>:
 800c160:	b538      	push	{r3, r4, r5, lr}
 800c162:	4d07      	ldr	r5, [pc, #28]	@ (800c180 <_read_r+0x20>)
 800c164:	4604      	mov	r4, r0
 800c166:	4608      	mov	r0, r1
 800c168:	4611      	mov	r1, r2
 800c16a:	2200      	movs	r2, #0
 800c16c:	602a      	str	r2, [r5, #0]
 800c16e:	461a      	mov	r2, r3
 800c170:	f7f4 fef0 	bl	8000f54 <_read>
 800c174:	1c43      	adds	r3, r0, #1
 800c176:	d102      	bne.n	800c17e <_read_r+0x1e>
 800c178:	682b      	ldr	r3, [r5, #0]
 800c17a:	b103      	cbz	r3, 800c17e <_read_r+0x1e>
 800c17c:	6023      	str	r3, [r4, #0]
 800c17e:	bd38      	pop	{r3, r4, r5, pc}
 800c180:	20000e70 	.word	0x20000e70

0800c184 <_write_r>:
 800c184:	b538      	push	{r3, r4, r5, lr}
 800c186:	4d07      	ldr	r5, [pc, #28]	@ (800c1a4 <_write_r+0x20>)
 800c188:	4604      	mov	r4, r0
 800c18a:	4608      	mov	r0, r1
 800c18c:	4611      	mov	r1, r2
 800c18e:	2200      	movs	r2, #0
 800c190:	602a      	str	r2, [r5, #0]
 800c192:	461a      	mov	r2, r3
 800c194:	f7f5 f8ce 	bl	8001334 <_write>
 800c198:	1c43      	adds	r3, r0, #1
 800c19a:	d102      	bne.n	800c1a2 <_write_r+0x1e>
 800c19c:	682b      	ldr	r3, [r5, #0]
 800c19e:	b103      	cbz	r3, 800c1a2 <_write_r+0x1e>
 800c1a0:	6023      	str	r3, [r4, #0]
 800c1a2:	bd38      	pop	{r3, r4, r5, pc}
 800c1a4:	20000e70 	.word	0x20000e70

0800c1a8 <__errno>:
 800c1a8:	4b01      	ldr	r3, [pc, #4]	@ (800c1b0 <__errno+0x8>)
 800c1aa:	6818      	ldr	r0, [r3, #0]
 800c1ac:	4770      	bx	lr
 800c1ae:	bf00      	nop
 800c1b0:	20000228 	.word	0x20000228

0800c1b4 <__libc_init_array>:
 800c1b4:	b570      	push	{r4, r5, r6, lr}
 800c1b6:	4d0d      	ldr	r5, [pc, #52]	@ (800c1ec <__libc_init_array+0x38>)
 800c1b8:	4c0d      	ldr	r4, [pc, #52]	@ (800c1f0 <__libc_init_array+0x3c>)
 800c1ba:	1b64      	subs	r4, r4, r5
 800c1bc:	10a4      	asrs	r4, r4, #2
 800c1be:	2600      	movs	r6, #0
 800c1c0:	42a6      	cmp	r6, r4
 800c1c2:	d109      	bne.n	800c1d8 <__libc_init_array+0x24>
 800c1c4:	4d0b      	ldr	r5, [pc, #44]	@ (800c1f4 <__libc_init_array+0x40>)
 800c1c6:	4c0c      	ldr	r4, [pc, #48]	@ (800c1f8 <__libc_init_array+0x44>)
 800c1c8:	f000 fd32 	bl	800cc30 <_init>
 800c1cc:	1b64      	subs	r4, r4, r5
 800c1ce:	10a4      	asrs	r4, r4, #2
 800c1d0:	2600      	movs	r6, #0
 800c1d2:	42a6      	cmp	r6, r4
 800c1d4:	d105      	bne.n	800c1e2 <__libc_init_array+0x2e>
 800c1d6:	bd70      	pop	{r4, r5, r6, pc}
 800c1d8:	f855 3b04 	ldr.w	r3, [r5], #4
 800c1dc:	4798      	blx	r3
 800c1de:	3601      	adds	r6, #1
 800c1e0:	e7ee      	b.n	800c1c0 <__libc_init_array+0xc>
 800c1e2:	f855 3b04 	ldr.w	r3, [r5], #4
 800c1e6:	4798      	blx	r3
 800c1e8:	3601      	adds	r6, #1
 800c1ea:	e7f2      	b.n	800c1d2 <__libc_init_array+0x1e>
 800c1ec:	0800cf40 	.word	0x0800cf40
 800c1f0:	0800cf40 	.word	0x0800cf40
 800c1f4:	0800cf40 	.word	0x0800cf40
 800c1f8:	0800cf44 	.word	0x0800cf44

0800c1fc <__retarget_lock_init_recursive>:
 800c1fc:	4770      	bx	lr

0800c1fe <__retarget_lock_acquire_recursive>:
 800c1fe:	4770      	bx	lr

0800c200 <__retarget_lock_release_recursive>:
 800c200:	4770      	bx	lr

0800c202 <memcpy>:
 800c202:	440a      	add	r2, r1
 800c204:	4291      	cmp	r1, r2
 800c206:	f100 33ff 	add.w	r3, r0, #4294967295
 800c20a:	d100      	bne.n	800c20e <memcpy+0xc>
 800c20c:	4770      	bx	lr
 800c20e:	b510      	push	{r4, lr}
 800c210:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c214:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c218:	4291      	cmp	r1, r2
 800c21a:	d1f9      	bne.n	800c210 <memcpy+0xe>
 800c21c:	bd10      	pop	{r4, pc}
	...

0800c220 <_free_r>:
 800c220:	b538      	push	{r3, r4, r5, lr}
 800c222:	4605      	mov	r5, r0
 800c224:	2900      	cmp	r1, #0
 800c226:	d041      	beq.n	800c2ac <_free_r+0x8c>
 800c228:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c22c:	1f0c      	subs	r4, r1, #4
 800c22e:	2b00      	cmp	r3, #0
 800c230:	bfb8      	it	lt
 800c232:	18e4      	addlt	r4, r4, r3
 800c234:	f000 f8e0 	bl	800c3f8 <__malloc_lock>
 800c238:	4a1d      	ldr	r2, [pc, #116]	@ (800c2b0 <_free_r+0x90>)
 800c23a:	6813      	ldr	r3, [r2, #0]
 800c23c:	b933      	cbnz	r3, 800c24c <_free_r+0x2c>
 800c23e:	6063      	str	r3, [r4, #4]
 800c240:	6014      	str	r4, [r2, #0]
 800c242:	4628      	mov	r0, r5
 800c244:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c248:	f000 b8dc 	b.w	800c404 <__malloc_unlock>
 800c24c:	42a3      	cmp	r3, r4
 800c24e:	d908      	bls.n	800c262 <_free_r+0x42>
 800c250:	6820      	ldr	r0, [r4, #0]
 800c252:	1821      	adds	r1, r4, r0
 800c254:	428b      	cmp	r3, r1
 800c256:	bf01      	itttt	eq
 800c258:	6819      	ldreq	r1, [r3, #0]
 800c25a:	685b      	ldreq	r3, [r3, #4]
 800c25c:	1809      	addeq	r1, r1, r0
 800c25e:	6021      	streq	r1, [r4, #0]
 800c260:	e7ed      	b.n	800c23e <_free_r+0x1e>
 800c262:	461a      	mov	r2, r3
 800c264:	685b      	ldr	r3, [r3, #4]
 800c266:	b10b      	cbz	r3, 800c26c <_free_r+0x4c>
 800c268:	42a3      	cmp	r3, r4
 800c26a:	d9fa      	bls.n	800c262 <_free_r+0x42>
 800c26c:	6811      	ldr	r1, [r2, #0]
 800c26e:	1850      	adds	r0, r2, r1
 800c270:	42a0      	cmp	r0, r4
 800c272:	d10b      	bne.n	800c28c <_free_r+0x6c>
 800c274:	6820      	ldr	r0, [r4, #0]
 800c276:	4401      	add	r1, r0
 800c278:	1850      	adds	r0, r2, r1
 800c27a:	4283      	cmp	r3, r0
 800c27c:	6011      	str	r1, [r2, #0]
 800c27e:	d1e0      	bne.n	800c242 <_free_r+0x22>
 800c280:	6818      	ldr	r0, [r3, #0]
 800c282:	685b      	ldr	r3, [r3, #4]
 800c284:	6053      	str	r3, [r2, #4]
 800c286:	4408      	add	r0, r1
 800c288:	6010      	str	r0, [r2, #0]
 800c28a:	e7da      	b.n	800c242 <_free_r+0x22>
 800c28c:	d902      	bls.n	800c294 <_free_r+0x74>
 800c28e:	230c      	movs	r3, #12
 800c290:	602b      	str	r3, [r5, #0]
 800c292:	e7d6      	b.n	800c242 <_free_r+0x22>
 800c294:	6820      	ldr	r0, [r4, #0]
 800c296:	1821      	adds	r1, r4, r0
 800c298:	428b      	cmp	r3, r1
 800c29a:	bf04      	itt	eq
 800c29c:	6819      	ldreq	r1, [r3, #0]
 800c29e:	685b      	ldreq	r3, [r3, #4]
 800c2a0:	6063      	str	r3, [r4, #4]
 800c2a2:	bf04      	itt	eq
 800c2a4:	1809      	addeq	r1, r1, r0
 800c2a6:	6021      	streq	r1, [r4, #0]
 800c2a8:	6054      	str	r4, [r2, #4]
 800c2aa:	e7ca      	b.n	800c242 <_free_r+0x22>
 800c2ac:	bd38      	pop	{r3, r4, r5, pc}
 800c2ae:	bf00      	nop
 800c2b0:	20000e7c 	.word	0x20000e7c

0800c2b4 <sbrk_aligned>:
 800c2b4:	b570      	push	{r4, r5, r6, lr}
 800c2b6:	4e0f      	ldr	r6, [pc, #60]	@ (800c2f4 <sbrk_aligned+0x40>)
 800c2b8:	460c      	mov	r4, r1
 800c2ba:	6831      	ldr	r1, [r6, #0]
 800c2bc:	4605      	mov	r5, r0
 800c2be:	b911      	cbnz	r1, 800c2c6 <sbrk_aligned+0x12>
 800c2c0:	f000 fca6 	bl	800cc10 <_sbrk_r>
 800c2c4:	6030      	str	r0, [r6, #0]
 800c2c6:	4621      	mov	r1, r4
 800c2c8:	4628      	mov	r0, r5
 800c2ca:	f000 fca1 	bl	800cc10 <_sbrk_r>
 800c2ce:	1c43      	adds	r3, r0, #1
 800c2d0:	d103      	bne.n	800c2da <sbrk_aligned+0x26>
 800c2d2:	f04f 34ff 	mov.w	r4, #4294967295
 800c2d6:	4620      	mov	r0, r4
 800c2d8:	bd70      	pop	{r4, r5, r6, pc}
 800c2da:	1cc4      	adds	r4, r0, #3
 800c2dc:	f024 0403 	bic.w	r4, r4, #3
 800c2e0:	42a0      	cmp	r0, r4
 800c2e2:	d0f8      	beq.n	800c2d6 <sbrk_aligned+0x22>
 800c2e4:	1a21      	subs	r1, r4, r0
 800c2e6:	4628      	mov	r0, r5
 800c2e8:	f000 fc92 	bl	800cc10 <_sbrk_r>
 800c2ec:	3001      	adds	r0, #1
 800c2ee:	d1f2      	bne.n	800c2d6 <sbrk_aligned+0x22>
 800c2f0:	e7ef      	b.n	800c2d2 <sbrk_aligned+0x1e>
 800c2f2:	bf00      	nop
 800c2f4:	20000e78 	.word	0x20000e78

0800c2f8 <_malloc_r>:
 800c2f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c2fc:	1ccd      	adds	r5, r1, #3
 800c2fe:	f025 0503 	bic.w	r5, r5, #3
 800c302:	3508      	adds	r5, #8
 800c304:	2d0c      	cmp	r5, #12
 800c306:	bf38      	it	cc
 800c308:	250c      	movcc	r5, #12
 800c30a:	2d00      	cmp	r5, #0
 800c30c:	4606      	mov	r6, r0
 800c30e:	db01      	blt.n	800c314 <_malloc_r+0x1c>
 800c310:	42a9      	cmp	r1, r5
 800c312:	d904      	bls.n	800c31e <_malloc_r+0x26>
 800c314:	230c      	movs	r3, #12
 800c316:	6033      	str	r3, [r6, #0]
 800c318:	2000      	movs	r0, #0
 800c31a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c31e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c3f4 <_malloc_r+0xfc>
 800c322:	f000 f869 	bl	800c3f8 <__malloc_lock>
 800c326:	f8d8 3000 	ldr.w	r3, [r8]
 800c32a:	461c      	mov	r4, r3
 800c32c:	bb44      	cbnz	r4, 800c380 <_malloc_r+0x88>
 800c32e:	4629      	mov	r1, r5
 800c330:	4630      	mov	r0, r6
 800c332:	f7ff ffbf 	bl	800c2b4 <sbrk_aligned>
 800c336:	1c43      	adds	r3, r0, #1
 800c338:	4604      	mov	r4, r0
 800c33a:	d158      	bne.n	800c3ee <_malloc_r+0xf6>
 800c33c:	f8d8 4000 	ldr.w	r4, [r8]
 800c340:	4627      	mov	r7, r4
 800c342:	2f00      	cmp	r7, #0
 800c344:	d143      	bne.n	800c3ce <_malloc_r+0xd6>
 800c346:	2c00      	cmp	r4, #0
 800c348:	d04b      	beq.n	800c3e2 <_malloc_r+0xea>
 800c34a:	6823      	ldr	r3, [r4, #0]
 800c34c:	4639      	mov	r1, r7
 800c34e:	4630      	mov	r0, r6
 800c350:	eb04 0903 	add.w	r9, r4, r3
 800c354:	f000 fc5c 	bl	800cc10 <_sbrk_r>
 800c358:	4581      	cmp	r9, r0
 800c35a:	d142      	bne.n	800c3e2 <_malloc_r+0xea>
 800c35c:	6821      	ldr	r1, [r4, #0]
 800c35e:	1a6d      	subs	r5, r5, r1
 800c360:	4629      	mov	r1, r5
 800c362:	4630      	mov	r0, r6
 800c364:	f7ff ffa6 	bl	800c2b4 <sbrk_aligned>
 800c368:	3001      	adds	r0, #1
 800c36a:	d03a      	beq.n	800c3e2 <_malloc_r+0xea>
 800c36c:	6823      	ldr	r3, [r4, #0]
 800c36e:	442b      	add	r3, r5
 800c370:	6023      	str	r3, [r4, #0]
 800c372:	f8d8 3000 	ldr.w	r3, [r8]
 800c376:	685a      	ldr	r2, [r3, #4]
 800c378:	bb62      	cbnz	r2, 800c3d4 <_malloc_r+0xdc>
 800c37a:	f8c8 7000 	str.w	r7, [r8]
 800c37e:	e00f      	b.n	800c3a0 <_malloc_r+0xa8>
 800c380:	6822      	ldr	r2, [r4, #0]
 800c382:	1b52      	subs	r2, r2, r5
 800c384:	d420      	bmi.n	800c3c8 <_malloc_r+0xd0>
 800c386:	2a0b      	cmp	r2, #11
 800c388:	d917      	bls.n	800c3ba <_malloc_r+0xc2>
 800c38a:	1961      	adds	r1, r4, r5
 800c38c:	42a3      	cmp	r3, r4
 800c38e:	6025      	str	r5, [r4, #0]
 800c390:	bf18      	it	ne
 800c392:	6059      	strne	r1, [r3, #4]
 800c394:	6863      	ldr	r3, [r4, #4]
 800c396:	bf08      	it	eq
 800c398:	f8c8 1000 	streq.w	r1, [r8]
 800c39c:	5162      	str	r2, [r4, r5]
 800c39e:	604b      	str	r3, [r1, #4]
 800c3a0:	4630      	mov	r0, r6
 800c3a2:	f000 f82f 	bl	800c404 <__malloc_unlock>
 800c3a6:	f104 000b 	add.w	r0, r4, #11
 800c3aa:	1d23      	adds	r3, r4, #4
 800c3ac:	f020 0007 	bic.w	r0, r0, #7
 800c3b0:	1ac2      	subs	r2, r0, r3
 800c3b2:	bf1c      	itt	ne
 800c3b4:	1a1b      	subne	r3, r3, r0
 800c3b6:	50a3      	strne	r3, [r4, r2]
 800c3b8:	e7af      	b.n	800c31a <_malloc_r+0x22>
 800c3ba:	6862      	ldr	r2, [r4, #4]
 800c3bc:	42a3      	cmp	r3, r4
 800c3be:	bf0c      	ite	eq
 800c3c0:	f8c8 2000 	streq.w	r2, [r8]
 800c3c4:	605a      	strne	r2, [r3, #4]
 800c3c6:	e7eb      	b.n	800c3a0 <_malloc_r+0xa8>
 800c3c8:	4623      	mov	r3, r4
 800c3ca:	6864      	ldr	r4, [r4, #4]
 800c3cc:	e7ae      	b.n	800c32c <_malloc_r+0x34>
 800c3ce:	463c      	mov	r4, r7
 800c3d0:	687f      	ldr	r7, [r7, #4]
 800c3d2:	e7b6      	b.n	800c342 <_malloc_r+0x4a>
 800c3d4:	461a      	mov	r2, r3
 800c3d6:	685b      	ldr	r3, [r3, #4]
 800c3d8:	42a3      	cmp	r3, r4
 800c3da:	d1fb      	bne.n	800c3d4 <_malloc_r+0xdc>
 800c3dc:	2300      	movs	r3, #0
 800c3de:	6053      	str	r3, [r2, #4]
 800c3e0:	e7de      	b.n	800c3a0 <_malloc_r+0xa8>
 800c3e2:	230c      	movs	r3, #12
 800c3e4:	6033      	str	r3, [r6, #0]
 800c3e6:	4630      	mov	r0, r6
 800c3e8:	f000 f80c 	bl	800c404 <__malloc_unlock>
 800c3ec:	e794      	b.n	800c318 <_malloc_r+0x20>
 800c3ee:	6005      	str	r5, [r0, #0]
 800c3f0:	e7d6      	b.n	800c3a0 <_malloc_r+0xa8>
 800c3f2:	bf00      	nop
 800c3f4:	20000e7c 	.word	0x20000e7c

0800c3f8 <__malloc_lock>:
 800c3f8:	4801      	ldr	r0, [pc, #4]	@ (800c400 <__malloc_lock+0x8>)
 800c3fa:	f7ff bf00 	b.w	800c1fe <__retarget_lock_acquire_recursive>
 800c3fe:	bf00      	nop
 800c400:	20000e74 	.word	0x20000e74

0800c404 <__malloc_unlock>:
 800c404:	4801      	ldr	r0, [pc, #4]	@ (800c40c <__malloc_unlock+0x8>)
 800c406:	f7ff befb 	b.w	800c200 <__retarget_lock_release_recursive>
 800c40a:	bf00      	nop
 800c40c:	20000e74 	.word	0x20000e74

0800c410 <__sfputc_r>:
 800c410:	6893      	ldr	r3, [r2, #8]
 800c412:	3b01      	subs	r3, #1
 800c414:	2b00      	cmp	r3, #0
 800c416:	b410      	push	{r4}
 800c418:	6093      	str	r3, [r2, #8]
 800c41a:	da08      	bge.n	800c42e <__sfputc_r+0x1e>
 800c41c:	6994      	ldr	r4, [r2, #24]
 800c41e:	42a3      	cmp	r3, r4
 800c420:	db01      	blt.n	800c426 <__sfputc_r+0x16>
 800c422:	290a      	cmp	r1, #10
 800c424:	d103      	bne.n	800c42e <__sfputc_r+0x1e>
 800c426:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c42a:	f7ff bdda 	b.w	800bfe2 <__swbuf_r>
 800c42e:	6813      	ldr	r3, [r2, #0]
 800c430:	1c58      	adds	r0, r3, #1
 800c432:	6010      	str	r0, [r2, #0]
 800c434:	7019      	strb	r1, [r3, #0]
 800c436:	4608      	mov	r0, r1
 800c438:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c43c:	4770      	bx	lr

0800c43e <__sfputs_r>:
 800c43e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c440:	4606      	mov	r6, r0
 800c442:	460f      	mov	r7, r1
 800c444:	4614      	mov	r4, r2
 800c446:	18d5      	adds	r5, r2, r3
 800c448:	42ac      	cmp	r4, r5
 800c44a:	d101      	bne.n	800c450 <__sfputs_r+0x12>
 800c44c:	2000      	movs	r0, #0
 800c44e:	e007      	b.n	800c460 <__sfputs_r+0x22>
 800c450:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c454:	463a      	mov	r2, r7
 800c456:	4630      	mov	r0, r6
 800c458:	f7ff ffda 	bl	800c410 <__sfputc_r>
 800c45c:	1c43      	adds	r3, r0, #1
 800c45e:	d1f3      	bne.n	800c448 <__sfputs_r+0xa>
 800c460:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c464 <_vfiprintf_r>:
 800c464:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c468:	460d      	mov	r5, r1
 800c46a:	b09d      	sub	sp, #116	@ 0x74
 800c46c:	4614      	mov	r4, r2
 800c46e:	4698      	mov	r8, r3
 800c470:	4606      	mov	r6, r0
 800c472:	b118      	cbz	r0, 800c47c <_vfiprintf_r+0x18>
 800c474:	6a03      	ldr	r3, [r0, #32]
 800c476:	b90b      	cbnz	r3, 800c47c <_vfiprintf_r+0x18>
 800c478:	f7ff fcca 	bl	800be10 <__sinit>
 800c47c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c47e:	07d9      	lsls	r1, r3, #31
 800c480:	d405      	bmi.n	800c48e <_vfiprintf_r+0x2a>
 800c482:	89ab      	ldrh	r3, [r5, #12]
 800c484:	059a      	lsls	r2, r3, #22
 800c486:	d402      	bmi.n	800c48e <_vfiprintf_r+0x2a>
 800c488:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c48a:	f7ff feb8 	bl	800c1fe <__retarget_lock_acquire_recursive>
 800c48e:	89ab      	ldrh	r3, [r5, #12]
 800c490:	071b      	lsls	r3, r3, #28
 800c492:	d501      	bpl.n	800c498 <_vfiprintf_r+0x34>
 800c494:	692b      	ldr	r3, [r5, #16]
 800c496:	b99b      	cbnz	r3, 800c4c0 <_vfiprintf_r+0x5c>
 800c498:	4629      	mov	r1, r5
 800c49a:	4630      	mov	r0, r6
 800c49c:	f7ff fde0 	bl	800c060 <__swsetup_r>
 800c4a0:	b170      	cbz	r0, 800c4c0 <_vfiprintf_r+0x5c>
 800c4a2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c4a4:	07dc      	lsls	r4, r3, #31
 800c4a6:	d504      	bpl.n	800c4b2 <_vfiprintf_r+0x4e>
 800c4a8:	f04f 30ff 	mov.w	r0, #4294967295
 800c4ac:	b01d      	add	sp, #116	@ 0x74
 800c4ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4b2:	89ab      	ldrh	r3, [r5, #12]
 800c4b4:	0598      	lsls	r0, r3, #22
 800c4b6:	d4f7      	bmi.n	800c4a8 <_vfiprintf_r+0x44>
 800c4b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c4ba:	f7ff fea1 	bl	800c200 <__retarget_lock_release_recursive>
 800c4be:	e7f3      	b.n	800c4a8 <_vfiprintf_r+0x44>
 800c4c0:	2300      	movs	r3, #0
 800c4c2:	9309      	str	r3, [sp, #36]	@ 0x24
 800c4c4:	2320      	movs	r3, #32
 800c4c6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c4ca:	f8cd 800c 	str.w	r8, [sp, #12]
 800c4ce:	2330      	movs	r3, #48	@ 0x30
 800c4d0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c680 <_vfiprintf_r+0x21c>
 800c4d4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c4d8:	f04f 0901 	mov.w	r9, #1
 800c4dc:	4623      	mov	r3, r4
 800c4de:	469a      	mov	sl, r3
 800c4e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c4e4:	b10a      	cbz	r2, 800c4ea <_vfiprintf_r+0x86>
 800c4e6:	2a25      	cmp	r2, #37	@ 0x25
 800c4e8:	d1f9      	bne.n	800c4de <_vfiprintf_r+0x7a>
 800c4ea:	ebba 0b04 	subs.w	fp, sl, r4
 800c4ee:	d00b      	beq.n	800c508 <_vfiprintf_r+0xa4>
 800c4f0:	465b      	mov	r3, fp
 800c4f2:	4622      	mov	r2, r4
 800c4f4:	4629      	mov	r1, r5
 800c4f6:	4630      	mov	r0, r6
 800c4f8:	f7ff ffa1 	bl	800c43e <__sfputs_r>
 800c4fc:	3001      	adds	r0, #1
 800c4fe:	f000 80a7 	beq.w	800c650 <_vfiprintf_r+0x1ec>
 800c502:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c504:	445a      	add	r2, fp
 800c506:	9209      	str	r2, [sp, #36]	@ 0x24
 800c508:	f89a 3000 	ldrb.w	r3, [sl]
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	f000 809f 	beq.w	800c650 <_vfiprintf_r+0x1ec>
 800c512:	2300      	movs	r3, #0
 800c514:	f04f 32ff 	mov.w	r2, #4294967295
 800c518:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c51c:	f10a 0a01 	add.w	sl, sl, #1
 800c520:	9304      	str	r3, [sp, #16]
 800c522:	9307      	str	r3, [sp, #28]
 800c524:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c528:	931a      	str	r3, [sp, #104]	@ 0x68
 800c52a:	4654      	mov	r4, sl
 800c52c:	2205      	movs	r2, #5
 800c52e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c532:	4853      	ldr	r0, [pc, #332]	@ (800c680 <_vfiprintf_r+0x21c>)
 800c534:	f7f3 fe74 	bl	8000220 <memchr>
 800c538:	9a04      	ldr	r2, [sp, #16]
 800c53a:	b9d8      	cbnz	r0, 800c574 <_vfiprintf_r+0x110>
 800c53c:	06d1      	lsls	r1, r2, #27
 800c53e:	bf44      	itt	mi
 800c540:	2320      	movmi	r3, #32
 800c542:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c546:	0713      	lsls	r3, r2, #28
 800c548:	bf44      	itt	mi
 800c54a:	232b      	movmi	r3, #43	@ 0x2b
 800c54c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c550:	f89a 3000 	ldrb.w	r3, [sl]
 800c554:	2b2a      	cmp	r3, #42	@ 0x2a
 800c556:	d015      	beq.n	800c584 <_vfiprintf_r+0x120>
 800c558:	9a07      	ldr	r2, [sp, #28]
 800c55a:	4654      	mov	r4, sl
 800c55c:	2000      	movs	r0, #0
 800c55e:	f04f 0c0a 	mov.w	ip, #10
 800c562:	4621      	mov	r1, r4
 800c564:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c568:	3b30      	subs	r3, #48	@ 0x30
 800c56a:	2b09      	cmp	r3, #9
 800c56c:	d94b      	bls.n	800c606 <_vfiprintf_r+0x1a2>
 800c56e:	b1b0      	cbz	r0, 800c59e <_vfiprintf_r+0x13a>
 800c570:	9207      	str	r2, [sp, #28]
 800c572:	e014      	b.n	800c59e <_vfiprintf_r+0x13a>
 800c574:	eba0 0308 	sub.w	r3, r0, r8
 800c578:	fa09 f303 	lsl.w	r3, r9, r3
 800c57c:	4313      	orrs	r3, r2
 800c57e:	9304      	str	r3, [sp, #16]
 800c580:	46a2      	mov	sl, r4
 800c582:	e7d2      	b.n	800c52a <_vfiprintf_r+0xc6>
 800c584:	9b03      	ldr	r3, [sp, #12]
 800c586:	1d19      	adds	r1, r3, #4
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	9103      	str	r1, [sp, #12]
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	bfbb      	ittet	lt
 800c590:	425b      	neglt	r3, r3
 800c592:	f042 0202 	orrlt.w	r2, r2, #2
 800c596:	9307      	strge	r3, [sp, #28]
 800c598:	9307      	strlt	r3, [sp, #28]
 800c59a:	bfb8      	it	lt
 800c59c:	9204      	strlt	r2, [sp, #16]
 800c59e:	7823      	ldrb	r3, [r4, #0]
 800c5a0:	2b2e      	cmp	r3, #46	@ 0x2e
 800c5a2:	d10a      	bne.n	800c5ba <_vfiprintf_r+0x156>
 800c5a4:	7863      	ldrb	r3, [r4, #1]
 800c5a6:	2b2a      	cmp	r3, #42	@ 0x2a
 800c5a8:	d132      	bne.n	800c610 <_vfiprintf_r+0x1ac>
 800c5aa:	9b03      	ldr	r3, [sp, #12]
 800c5ac:	1d1a      	adds	r2, r3, #4
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	9203      	str	r2, [sp, #12]
 800c5b2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c5b6:	3402      	adds	r4, #2
 800c5b8:	9305      	str	r3, [sp, #20]
 800c5ba:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c690 <_vfiprintf_r+0x22c>
 800c5be:	7821      	ldrb	r1, [r4, #0]
 800c5c0:	2203      	movs	r2, #3
 800c5c2:	4650      	mov	r0, sl
 800c5c4:	f7f3 fe2c 	bl	8000220 <memchr>
 800c5c8:	b138      	cbz	r0, 800c5da <_vfiprintf_r+0x176>
 800c5ca:	9b04      	ldr	r3, [sp, #16]
 800c5cc:	eba0 000a 	sub.w	r0, r0, sl
 800c5d0:	2240      	movs	r2, #64	@ 0x40
 800c5d2:	4082      	lsls	r2, r0
 800c5d4:	4313      	orrs	r3, r2
 800c5d6:	3401      	adds	r4, #1
 800c5d8:	9304      	str	r3, [sp, #16]
 800c5da:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c5de:	4829      	ldr	r0, [pc, #164]	@ (800c684 <_vfiprintf_r+0x220>)
 800c5e0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c5e4:	2206      	movs	r2, #6
 800c5e6:	f7f3 fe1b 	bl	8000220 <memchr>
 800c5ea:	2800      	cmp	r0, #0
 800c5ec:	d03f      	beq.n	800c66e <_vfiprintf_r+0x20a>
 800c5ee:	4b26      	ldr	r3, [pc, #152]	@ (800c688 <_vfiprintf_r+0x224>)
 800c5f0:	bb1b      	cbnz	r3, 800c63a <_vfiprintf_r+0x1d6>
 800c5f2:	9b03      	ldr	r3, [sp, #12]
 800c5f4:	3307      	adds	r3, #7
 800c5f6:	f023 0307 	bic.w	r3, r3, #7
 800c5fa:	3308      	adds	r3, #8
 800c5fc:	9303      	str	r3, [sp, #12]
 800c5fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c600:	443b      	add	r3, r7
 800c602:	9309      	str	r3, [sp, #36]	@ 0x24
 800c604:	e76a      	b.n	800c4dc <_vfiprintf_r+0x78>
 800c606:	fb0c 3202 	mla	r2, ip, r2, r3
 800c60a:	460c      	mov	r4, r1
 800c60c:	2001      	movs	r0, #1
 800c60e:	e7a8      	b.n	800c562 <_vfiprintf_r+0xfe>
 800c610:	2300      	movs	r3, #0
 800c612:	3401      	adds	r4, #1
 800c614:	9305      	str	r3, [sp, #20]
 800c616:	4619      	mov	r1, r3
 800c618:	f04f 0c0a 	mov.w	ip, #10
 800c61c:	4620      	mov	r0, r4
 800c61e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c622:	3a30      	subs	r2, #48	@ 0x30
 800c624:	2a09      	cmp	r2, #9
 800c626:	d903      	bls.n	800c630 <_vfiprintf_r+0x1cc>
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d0c6      	beq.n	800c5ba <_vfiprintf_r+0x156>
 800c62c:	9105      	str	r1, [sp, #20]
 800c62e:	e7c4      	b.n	800c5ba <_vfiprintf_r+0x156>
 800c630:	fb0c 2101 	mla	r1, ip, r1, r2
 800c634:	4604      	mov	r4, r0
 800c636:	2301      	movs	r3, #1
 800c638:	e7f0      	b.n	800c61c <_vfiprintf_r+0x1b8>
 800c63a:	ab03      	add	r3, sp, #12
 800c63c:	9300      	str	r3, [sp, #0]
 800c63e:	462a      	mov	r2, r5
 800c640:	4b12      	ldr	r3, [pc, #72]	@ (800c68c <_vfiprintf_r+0x228>)
 800c642:	a904      	add	r1, sp, #16
 800c644:	4630      	mov	r0, r6
 800c646:	f3af 8000 	nop.w
 800c64a:	4607      	mov	r7, r0
 800c64c:	1c78      	adds	r0, r7, #1
 800c64e:	d1d6      	bne.n	800c5fe <_vfiprintf_r+0x19a>
 800c650:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c652:	07d9      	lsls	r1, r3, #31
 800c654:	d405      	bmi.n	800c662 <_vfiprintf_r+0x1fe>
 800c656:	89ab      	ldrh	r3, [r5, #12]
 800c658:	059a      	lsls	r2, r3, #22
 800c65a:	d402      	bmi.n	800c662 <_vfiprintf_r+0x1fe>
 800c65c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c65e:	f7ff fdcf 	bl	800c200 <__retarget_lock_release_recursive>
 800c662:	89ab      	ldrh	r3, [r5, #12]
 800c664:	065b      	lsls	r3, r3, #25
 800c666:	f53f af1f 	bmi.w	800c4a8 <_vfiprintf_r+0x44>
 800c66a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c66c:	e71e      	b.n	800c4ac <_vfiprintf_r+0x48>
 800c66e:	ab03      	add	r3, sp, #12
 800c670:	9300      	str	r3, [sp, #0]
 800c672:	462a      	mov	r2, r5
 800c674:	4b05      	ldr	r3, [pc, #20]	@ (800c68c <_vfiprintf_r+0x228>)
 800c676:	a904      	add	r1, sp, #16
 800c678:	4630      	mov	r0, r6
 800c67a:	f000 f879 	bl	800c770 <_printf_i>
 800c67e:	e7e4      	b.n	800c64a <_vfiprintf_r+0x1e6>
 800c680:	0800cf04 	.word	0x0800cf04
 800c684:	0800cf0e 	.word	0x0800cf0e
 800c688:	00000000 	.word	0x00000000
 800c68c:	0800c43f 	.word	0x0800c43f
 800c690:	0800cf0a 	.word	0x0800cf0a

0800c694 <_printf_common>:
 800c694:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c698:	4616      	mov	r6, r2
 800c69a:	4698      	mov	r8, r3
 800c69c:	688a      	ldr	r2, [r1, #8]
 800c69e:	690b      	ldr	r3, [r1, #16]
 800c6a0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c6a4:	4293      	cmp	r3, r2
 800c6a6:	bfb8      	it	lt
 800c6a8:	4613      	movlt	r3, r2
 800c6aa:	6033      	str	r3, [r6, #0]
 800c6ac:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c6b0:	4607      	mov	r7, r0
 800c6b2:	460c      	mov	r4, r1
 800c6b4:	b10a      	cbz	r2, 800c6ba <_printf_common+0x26>
 800c6b6:	3301      	adds	r3, #1
 800c6b8:	6033      	str	r3, [r6, #0]
 800c6ba:	6823      	ldr	r3, [r4, #0]
 800c6bc:	0699      	lsls	r1, r3, #26
 800c6be:	bf42      	ittt	mi
 800c6c0:	6833      	ldrmi	r3, [r6, #0]
 800c6c2:	3302      	addmi	r3, #2
 800c6c4:	6033      	strmi	r3, [r6, #0]
 800c6c6:	6825      	ldr	r5, [r4, #0]
 800c6c8:	f015 0506 	ands.w	r5, r5, #6
 800c6cc:	d106      	bne.n	800c6dc <_printf_common+0x48>
 800c6ce:	f104 0a19 	add.w	sl, r4, #25
 800c6d2:	68e3      	ldr	r3, [r4, #12]
 800c6d4:	6832      	ldr	r2, [r6, #0]
 800c6d6:	1a9b      	subs	r3, r3, r2
 800c6d8:	42ab      	cmp	r3, r5
 800c6da:	dc26      	bgt.n	800c72a <_printf_common+0x96>
 800c6dc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c6e0:	6822      	ldr	r2, [r4, #0]
 800c6e2:	3b00      	subs	r3, #0
 800c6e4:	bf18      	it	ne
 800c6e6:	2301      	movne	r3, #1
 800c6e8:	0692      	lsls	r2, r2, #26
 800c6ea:	d42b      	bmi.n	800c744 <_printf_common+0xb0>
 800c6ec:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c6f0:	4641      	mov	r1, r8
 800c6f2:	4638      	mov	r0, r7
 800c6f4:	47c8      	blx	r9
 800c6f6:	3001      	adds	r0, #1
 800c6f8:	d01e      	beq.n	800c738 <_printf_common+0xa4>
 800c6fa:	6823      	ldr	r3, [r4, #0]
 800c6fc:	6922      	ldr	r2, [r4, #16]
 800c6fe:	f003 0306 	and.w	r3, r3, #6
 800c702:	2b04      	cmp	r3, #4
 800c704:	bf02      	ittt	eq
 800c706:	68e5      	ldreq	r5, [r4, #12]
 800c708:	6833      	ldreq	r3, [r6, #0]
 800c70a:	1aed      	subeq	r5, r5, r3
 800c70c:	68a3      	ldr	r3, [r4, #8]
 800c70e:	bf0c      	ite	eq
 800c710:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c714:	2500      	movne	r5, #0
 800c716:	4293      	cmp	r3, r2
 800c718:	bfc4      	itt	gt
 800c71a:	1a9b      	subgt	r3, r3, r2
 800c71c:	18ed      	addgt	r5, r5, r3
 800c71e:	2600      	movs	r6, #0
 800c720:	341a      	adds	r4, #26
 800c722:	42b5      	cmp	r5, r6
 800c724:	d11a      	bne.n	800c75c <_printf_common+0xc8>
 800c726:	2000      	movs	r0, #0
 800c728:	e008      	b.n	800c73c <_printf_common+0xa8>
 800c72a:	2301      	movs	r3, #1
 800c72c:	4652      	mov	r2, sl
 800c72e:	4641      	mov	r1, r8
 800c730:	4638      	mov	r0, r7
 800c732:	47c8      	blx	r9
 800c734:	3001      	adds	r0, #1
 800c736:	d103      	bne.n	800c740 <_printf_common+0xac>
 800c738:	f04f 30ff 	mov.w	r0, #4294967295
 800c73c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c740:	3501      	adds	r5, #1
 800c742:	e7c6      	b.n	800c6d2 <_printf_common+0x3e>
 800c744:	18e1      	adds	r1, r4, r3
 800c746:	1c5a      	adds	r2, r3, #1
 800c748:	2030      	movs	r0, #48	@ 0x30
 800c74a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c74e:	4422      	add	r2, r4
 800c750:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c754:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c758:	3302      	adds	r3, #2
 800c75a:	e7c7      	b.n	800c6ec <_printf_common+0x58>
 800c75c:	2301      	movs	r3, #1
 800c75e:	4622      	mov	r2, r4
 800c760:	4641      	mov	r1, r8
 800c762:	4638      	mov	r0, r7
 800c764:	47c8      	blx	r9
 800c766:	3001      	adds	r0, #1
 800c768:	d0e6      	beq.n	800c738 <_printf_common+0xa4>
 800c76a:	3601      	adds	r6, #1
 800c76c:	e7d9      	b.n	800c722 <_printf_common+0x8e>
	...

0800c770 <_printf_i>:
 800c770:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c774:	7e0f      	ldrb	r7, [r1, #24]
 800c776:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c778:	2f78      	cmp	r7, #120	@ 0x78
 800c77a:	4691      	mov	r9, r2
 800c77c:	4680      	mov	r8, r0
 800c77e:	460c      	mov	r4, r1
 800c780:	469a      	mov	sl, r3
 800c782:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c786:	d807      	bhi.n	800c798 <_printf_i+0x28>
 800c788:	2f62      	cmp	r7, #98	@ 0x62
 800c78a:	d80a      	bhi.n	800c7a2 <_printf_i+0x32>
 800c78c:	2f00      	cmp	r7, #0
 800c78e:	f000 80d2 	beq.w	800c936 <_printf_i+0x1c6>
 800c792:	2f58      	cmp	r7, #88	@ 0x58
 800c794:	f000 80b9 	beq.w	800c90a <_printf_i+0x19a>
 800c798:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c79c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c7a0:	e03a      	b.n	800c818 <_printf_i+0xa8>
 800c7a2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c7a6:	2b15      	cmp	r3, #21
 800c7a8:	d8f6      	bhi.n	800c798 <_printf_i+0x28>
 800c7aa:	a101      	add	r1, pc, #4	@ (adr r1, 800c7b0 <_printf_i+0x40>)
 800c7ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c7b0:	0800c809 	.word	0x0800c809
 800c7b4:	0800c81d 	.word	0x0800c81d
 800c7b8:	0800c799 	.word	0x0800c799
 800c7bc:	0800c799 	.word	0x0800c799
 800c7c0:	0800c799 	.word	0x0800c799
 800c7c4:	0800c799 	.word	0x0800c799
 800c7c8:	0800c81d 	.word	0x0800c81d
 800c7cc:	0800c799 	.word	0x0800c799
 800c7d0:	0800c799 	.word	0x0800c799
 800c7d4:	0800c799 	.word	0x0800c799
 800c7d8:	0800c799 	.word	0x0800c799
 800c7dc:	0800c91d 	.word	0x0800c91d
 800c7e0:	0800c847 	.word	0x0800c847
 800c7e4:	0800c8d7 	.word	0x0800c8d7
 800c7e8:	0800c799 	.word	0x0800c799
 800c7ec:	0800c799 	.word	0x0800c799
 800c7f0:	0800c93f 	.word	0x0800c93f
 800c7f4:	0800c799 	.word	0x0800c799
 800c7f8:	0800c847 	.word	0x0800c847
 800c7fc:	0800c799 	.word	0x0800c799
 800c800:	0800c799 	.word	0x0800c799
 800c804:	0800c8df 	.word	0x0800c8df
 800c808:	6833      	ldr	r3, [r6, #0]
 800c80a:	1d1a      	adds	r2, r3, #4
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	6032      	str	r2, [r6, #0]
 800c810:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c814:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c818:	2301      	movs	r3, #1
 800c81a:	e09d      	b.n	800c958 <_printf_i+0x1e8>
 800c81c:	6833      	ldr	r3, [r6, #0]
 800c81e:	6820      	ldr	r0, [r4, #0]
 800c820:	1d19      	adds	r1, r3, #4
 800c822:	6031      	str	r1, [r6, #0]
 800c824:	0606      	lsls	r6, r0, #24
 800c826:	d501      	bpl.n	800c82c <_printf_i+0xbc>
 800c828:	681d      	ldr	r5, [r3, #0]
 800c82a:	e003      	b.n	800c834 <_printf_i+0xc4>
 800c82c:	0645      	lsls	r5, r0, #25
 800c82e:	d5fb      	bpl.n	800c828 <_printf_i+0xb8>
 800c830:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c834:	2d00      	cmp	r5, #0
 800c836:	da03      	bge.n	800c840 <_printf_i+0xd0>
 800c838:	232d      	movs	r3, #45	@ 0x2d
 800c83a:	426d      	negs	r5, r5
 800c83c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c840:	4859      	ldr	r0, [pc, #356]	@ (800c9a8 <_printf_i+0x238>)
 800c842:	230a      	movs	r3, #10
 800c844:	e011      	b.n	800c86a <_printf_i+0xfa>
 800c846:	6821      	ldr	r1, [r4, #0]
 800c848:	6833      	ldr	r3, [r6, #0]
 800c84a:	0608      	lsls	r0, r1, #24
 800c84c:	f853 5b04 	ldr.w	r5, [r3], #4
 800c850:	d402      	bmi.n	800c858 <_printf_i+0xe8>
 800c852:	0649      	lsls	r1, r1, #25
 800c854:	bf48      	it	mi
 800c856:	b2ad      	uxthmi	r5, r5
 800c858:	2f6f      	cmp	r7, #111	@ 0x6f
 800c85a:	4853      	ldr	r0, [pc, #332]	@ (800c9a8 <_printf_i+0x238>)
 800c85c:	6033      	str	r3, [r6, #0]
 800c85e:	bf14      	ite	ne
 800c860:	230a      	movne	r3, #10
 800c862:	2308      	moveq	r3, #8
 800c864:	2100      	movs	r1, #0
 800c866:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c86a:	6866      	ldr	r6, [r4, #4]
 800c86c:	60a6      	str	r6, [r4, #8]
 800c86e:	2e00      	cmp	r6, #0
 800c870:	bfa2      	ittt	ge
 800c872:	6821      	ldrge	r1, [r4, #0]
 800c874:	f021 0104 	bicge.w	r1, r1, #4
 800c878:	6021      	strge	r1, [r4, #0]
 800c87a:	b90d      	cbnz	r5, 800c880 <_printf_i+0x110>
 800c87c:	2e00      	cmp	r6, #0
 800c87e:	d04b      	beq.n	800c918 <_printf_i+0x1a8>
 800c880:	4616      	mov	r6, r2
 800c882:	fbb5 f1f3 	udiv	r1, r5, r3
 800c886:	fb03 5711 	mls	r7, r3, r1, r5
 800c88a:	5dc7      	ldrb	r7, [r0, r7]
 800c88c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c890:	462f      	mov	r7, r5
 800c892:	42bb      	cmp	r3, r7
 800c894:	460d      	mov	r5, r1
 800c896:	d9f4      	bls.n	800c882 <_printf_i+0x112>
 800c898:	2b08      	cmp	r3, #8
 800c89a:	d10b      	bne.n	800c8b4 <_printf_i+0x144>
 800c89c:	6823      	ldr	r3, [r4, #0]
 800c89e:	07df      	lsls	r7, r3, #31
 800c8a0:	d508      	bpl.n	800c8b4 <_printf_i+0x144>
 800c8a2:	6923      	ldr	r3, [r4, #16]
 800c8a4:	6861      	ldr	r1, [r4, #4]
 800c8a6:	4299      	cmp	r1, r3
 800c8a8:	bfde      	ittt	le
 800c8aa:	2330      	movle	r3, #48	@ 0x30
 800c8ac:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c8b0:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c8b4:	1b92      	subs	r2, r2, r6
 800c8b6:	6122      	str	r2, [r4, #16]
 800c8b8:	f8cd a000 	str.w	sl, [sp]
 800c8bc:	464b      	mov	r3, r9
 800c8be:	aa03      	add	r2, sp, #12
 800c8c0:	4621      	mov	r1, r4
 800c8c2:	4640      	mov	r0, r8
 800c8c4:	f7ff fee6 	bl	800c694 <_printf_common>
 800c8c8:	3001      	adds	r0, #1
 800c8ca:	d14a      	bne.n	800c962 <_printf_i+0x1f2>
 800c8cc:	f04f 30ff 	mov.w	r0, #4294967295
 800c8d0:	b004      	add	sp, #16
 800c8d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c8d6:	6823      	ldr	r3, [r4, #0]
 800c8d8:	f043 0320 	orr.w	r3, r3, #32
 800c8dc:	6023      	str	r3, [r4, #0]
 800c8de:	4833      	ldr	r0, [pc, #204]	@ (800c9ac <_printf_i+0x23c>)
 800c8e0:	2778      	movs	r7, #120	@ 0x78
 800c8e2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c8e6:	6823      	ldr	r3, [r4, #0]
 800c8e8:	6831      	ldr	r1, [r6, #0]
 800c8ea:	061f      	lsls	r7, r3, #24
 800c8ec:	f851 5b04 	ldr.w	r5, [r1], #4
 800c8f0:	d402      	bmi.n	800c8f8 <_printf_i+0x188>
 800c8f2:	065f      	lsls	r7, r3, #25
 800c8f4:	bf48      	it	mi
 800c8f6:	b2ad      	uxthmi	r5, r5
 800c8f8:	6031      	str	r1, [r6, #0]
 800c8fa:	07d9      	lsls	r1, r3, #31
 800c8fc:	bf44      	itt	mi
 800c8fe:	f043 0320 	orrmi.w	r3, r3, #32
 800c902:	6023      	strmi	r3, [r4, #0]
 800c904:	b11d      	cbz	r5, 800c90e <_printf_i+0x19e>
 800c906:	2310      	movs	r3, #16
 800c908:	e7ac      	b.n	800c864 <_printf_i+0xf4>
 800c90a:	4827      	ldr	r0, [pc, #156]	@ (800c9a8 <_printf_i+0x238>)
 800c90c:	e7e9      	b.n	800c8e2 <_printf_i+0x172>
 800c90e:	6823      	ldr	r3, [r4, #0]
 800c910:	f023 0320 	bic.w	r3, r3, #32
 800c914:	6023      	str	r3, [r4, #0]
 800c916:	e7f6      	b.n	800c906 <_printf_i+0x196>
 800c918:	4616      	mov	r6, r2
 800c91a:	e7bd      	b.n	800c898 <_printf_i+0x128>
 800c91c:	6833      	ldr	r3, [r6, #0]
 800c91e:	6825      	ldr	r5, [r4, #0]
 800c920:	6961      	ldr	r1, [r4, #20]
 800c922:	1d18      	adds	r0, r3, #4
 800c924:	6030      	str	r0, [r6, #0]
 800c926:	062e      	lsls	r6, r5, #24
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	d501      	bpl.n	800c930 <_printf_i+0x1c0>
 800c92c:	6019      	str	r1, [r3, #0]
 800c92e:	e002      	b.n	800c936 <_printf_i+0x1c6>
 800c930:	0668      	lsls	r0, r5, #25
 800c932:	d5fb      	bpl.n	800c92c <_printf_i+0x1bc>
 800c934:	8019      	strh	r1, [r3, #0]
 800c936:	2300      	movs	r3, #0
 800c938:	6123      	str	r3, [r4, #16]
 800c93a:	4616      	mov	r6, r2
 800c93c:	e7bc      	b.n	800c8b8 <_printf_i+0x148>
 800c93e:	6833      	ldr	r3, [r6, #0]
 800c940:	1d1a      	adds	r2, r3, #4
 800c942:	6032      	str	r2, [r6, #0]
 800c944:	681e      	ldr	r6, [r3, #0]
 800c946:	6862      	ldr	r2, [r4, #4]
 800c948:	2100      	movs	r1, #0
 800c94a:	4630      	mov	r0, r6
 800c94c:	f7f3 fc68 	bl	8000220 <memchr>
 800c950:	b108      	cbz	r0, 800c956 <_printf_i+0x1e6>
 800c952:	1b80      	subs	r0, r0, r6
 800c954:	6060      	str	r0, [r4, #4]
 800c956:	6863      	ldr	r3, [r4, #4]
 800c958:	6123      	str	r3, [r4, #16]
 800c95a:	2300      	movs	r3, #0
 800c95c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c960:	e7aa      	b.n	800c8b8 <_printf_i+0x148>
 800c962:	6923      	ldr	r3, [r4, #16]
 800c964:	4632      	mov	r2, r6
 800c966:	4649      	mov	r1, r9
 800c968:	4640      	mov	r0, r8
 800c96a:	47d0      	blx	sl
 800c96c:	3001      	adds	r0, #1
 800c96e:	d0ad      	beq.n	800c8cc <_printf_i+0x15c>
 800c970:	6823      	ldr	r3, [r4, #0]
 800c972:	079b      	lsls	r3, r3, #30
 800c974:	d413      	bmi.n	800c99e <_printf_i+0x22e>
 800c976:	68e0      	ldr	r0, [r4, #12]
 800c978:	9b03      	ldr	r3, [sp, #12]
 800c97a:	4298      	cmp	r0, r3
 800c97c:	bfb8      	it	lt
 800c97e:	4618      	movlt	r0, r3
 800c980:	e7a6      	b.n	800c8d0 <_printf_i+0x160>
 800c982:	2301      	movs	r3, #1
 800c984:	4632      	mov	r2, r6
 800c986:	4649      	mov	r1, r9
 800c988:	4640      	mov	r0, r8
 800c98a:	47d0      	blx	sl
 800c98c:	3001      	adds	r0, #1
 800c98e:	d09d      	beq.n	800c8cc <_printf_i+0x15c>
 800c990:	3501      	adds	r5, #1
 800c992:	68e3      	ldr	r3, [r4, #12]
 800c994:	9903      	ldr	r1, [sp, #12]
 800c996:	1a5b      	subs	r3, r3, r1
 800c998:	42ab      	cmp	r3, r5
 800c99a:	dcf2      	bgt.n	800c982 <_printf_i+0x212>
 800c99c:	e7eb      	b.n	800c976 <_printf_i+0x206>
 800c99e:	2500      	movs	r5, #0
 800c9a0:	f104 0619 	add.w	r6, r4, #25
 800c9a4:	e7f5      	b.n	800c992 <_printf_i+0x222>
 800c9a6:	bf00      	nop
 800c9a8:	0800cf15 	.word	0x0800cf15
 800c9ac:	0800cf26 	.word	0x0800cf26

0800c9b0 <__sflush_r>:
 800c9b0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c9b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c9b8:	0716      	lsls	r6, r2, #28
 800c9ba:	4605      	mov	r5, r0
 800c9bc:	460c      	mov	r4, r1
 800c9be:	d454      	bmi.n	800ca6a <__sflush_r+0xba>
 800c9c0:	684b      	ldr	r3, [r1, #4]
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	dc02      	bgt.n	800c9cc <__sflush_r+0x1c>
 800c9c6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	dd48      	ble.n	800ca5e <__sflush_r+0xae>
 800c9cc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c9ce:	2e00      	cmp	r6, #0
 800c9d0:	d045      	beq.n	800ca5e <__sflush_r+0xae>
 800c9d2:	2300      	movs	r3, #0
 800c9d4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c9d8:	682f      	ldr	r7, [r5, #0]
 800c9da:	6a21      	ldr	r1, [r4, #32]
 800c9dc:	602b      	str	r3, [r5, #0]
 800c9de:	d030      	beq.n	800ca42 <__sflush_r+0x92>
 800c9e0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c9e2:	89a3      	ldrh	r3, [r4, #12]
 800c9e4:	0759      	lsls	r1, r3, #29
 800c9e6:	d505      	bpl.n	800c9f4 <__sflush_r+0x44>
 800c9e8:	6863      	ldr	r3, [r4, #4]
 800c9ea:	1ad2      	subs	r2, r2, r3
 800c9ec:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c9ee:	b10b      	cbz	r3, 800c9f4 <__sflush_r+0x44>
 800c9f0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c9f2:	1ad2      	subs	r2, r2, r3
 800c9f4:	2300      	movs	r3, #0
 800c9f6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c9f8:	6a21      	ldr	r1, [r4, #32]
 800c9fa:	4628      	mov	r0, r5
 800c9fc:	47b0      	blx	r6
 800c9fe:	1c43      	adds	r3, r0, #1
 800ca00:	89a3      	ldrh	r3, [r4, #12]
 800ca02:	d106      	bne.n	800ca12 <__sflush_r+0x62>
 800ca04:	6829      	ldr	r1, [r5, #0]
 800ca06:	291d      	cmp	r1, #29
 800ca08:	d82b      	bhi.n	800ca62 <__sflush_r+0xb2>
 800ca0a:	4a2a      	ldr	r2, [pc, #168]	@ (800cab4 <__sflush_r+0x104>)
 800ca0c:	410a      	asrs	r2, r1
 800ca0e:	07d6      	lsls	r6, r2, #31
 800ca10:	d427      	bmi.n	800ca62 <__sflush_r+0xb2>
 800ca12:	2200      	movs	r2, #0
 800ca14:	6062      	str	r2, [r4, #4]
 800ca16:	04d9      	lsls	r1, r3, #19
 800ca18:	6922      	ldr	r2, [r4, #16]
 800ca1a:	6022      	str	r2, [r4, #0]
 800ca1c:	d504      	bpl.n	800ca28 <__sflush_r+0x78>
 800ca1e:	1c42      	adds	r2, r0, #1
 800ca20:	d101      	bne.n	800ca26 <__sflush_r+0x76>
 800ca22:	682b      	ldr	r3, [r5, #0]
 800ca24:	b903      	cbnz	r3, 800ca28 <__sflush_r+0x78>
 800ca26:	6560      	str	r0, [r4, #84]	@ 0x54
 800ca28:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ca2a:	602f      	str	r7, [r5, #0]
 800ca2c:	b1b9      	cbz	r1, 800ca5e <__sflush_r+0xae>
 800ca2e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ca32:	4299      	cmp	r1, r3
 800ca34:	d002      	beq.n	800ca3c <__sflush_r+0x8c>
 800ca36:	4628      	mov	r0, r5
 800ca38:	f7ff fbf2 	bl	800c220 <_free_r>
 800ca3c:	2300      	movs	r3, #0
 800ca3e:	6363      	str	r3, [r4, #52]	@ 0x34
 800ca40:	e00d      	b.n	800ca5e <__sflush_r+0xae>
 800ca42:	2301      	movs	r3, #1
 800ca44:	4628      	mov	r0, r5
 800ca46:	47b0      	blx	r6
 800ca48:	4602      	mov	r2, r0
 800ca4a:	1c50      	adds	r0, r2, #1
 800ca4c:	d1c9      	bne.n	800c9e2 <__sflush_r+0x32>
 800ca4e:	682b      	ldr	r3, [r5, #0]
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	d0c6      	beq.n	800c9e2 <__sflush_r+0x32>
 800ca54:	2b1d      	cmp	r3, #29
 800ca56:	d001      	beq.n	800ca5c <__sflush_r+0xac>
 800ca58:	2b16      	cmp	r3, #22
 800ca5a:	d11e      	bne.n	800ca9a <__sflush_r+0xea>
 800ca5c:	602f      	str	r7, [r5, #0]
 800ca5e:	2000      	movs	r0, #0
 800ca60:	e022      	b.n	800caa8 <__sflush_r+0xf8>
 800ca62:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ca66:	b21b      	sxth	r3, r3
 800ca68:	e01b      	b.n	800caa2 <__sflush_r+0xf2>
 800ca6a:	690f      	ldr	r7, [r1, #16]
 800ca6c:	2f00      	cmp	r7, #0
 800ca6e:	d0f6      	beq.n	800ca5e <__sflush_r+0xae>
 800ca70:	0793      	lsls	r3, r2, #30
 800ca72:	680e      	ldr	r6, [r1, #0]
 800ca74:	bf08      	it	eq
 800ca76:	694b      	ldreq	r3, [r1, #20]
 800ca78:	600f      	str	r7, [r1, #0]
 800ca7a:	bf18      	it	ne
 800ca7c:	2300      	movne	r3, #0
 800ca7e:	eba6 0807 	sub.w	r8, r6, r7
 800ca82:	608b      	str	r3, [r1, #8]
 800ca84:	f1b8 0f00 	cmp.w	r8, #0
 800ca88:	dde9      	ble.n	800ca5e <__sflush_r+0xae>
 800ca8a:	6a21      	ldr	r1, [r4, #32]
 800ca8c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800ca8e:	4643      	mov	r3, r8
 800ca90:	463a      	mov	r2, r7
 800ca92:	4628      	mov	r0, r5
 800ca94:	47b0      	blx	r6
 800ca96:	2800      	cmp	r0, #0
 800ca98:	dc08      	bgt.n	800caac <__sflush_r+0xfc>
 800ca9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ca9e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800caa2:	81a3      	strh	r3, [r4, #12]
 800caa4:	f04f 30ff 	mov.w	r0, #4294967295
 800caa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800caac:	4407      	add	r7, r0
 800caae:	eba8 0800 	sub.w	r8, r8, r0
 800cab2:	e7e7      	b.n	800ca84 <__sflush_r+0xd4>
 800cab4:	dfbffffe 	.word	0xdfbffffe

0800cab8 <_fflush_r>:
 800cab8:	b538      	push	{r3, r4, r5, lr}
 800caba:	690b      	ldr	r3, [r1, #16]
 800cabc:	4605      	mov	r5, r0
 800cabe:	460c      	mov	r4, r1
 800cac0:	b913      	cbnz	r3, 800cac8 <_fflush_r+0x10>
 800cac2:	2500      	movs	r5, #0
 800cac4:	4628      	mov	r0, r5
 800cac6:	bd38      	pop	{r3, r4, r5, pc}
 800cac8:	b118      	cbz	r0, 800cad2 <_fflush_r+0x1a>
 800caca:	6a03      	ldr	r3, [r0, #32]
 800cacc:	b90b      	cbnz	r3, 800cad2 <_fflush_r+0x1a>
 800cace:	f7ff f99f 	bl	800be10 <__sinit>
 800cad2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	d0f3      	beq.n	800cac2 <_fflush_r+0xa>
 800cada:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800cadc:	07d0      	lsls	r0, r2, #31
 800cade:	d404      	bmi.n	800caea <_fflush_r+0x32>
 800cae0:	0599      	lsls	r1, r3, #22
 800cae2:	d402      	bmi.n	800caea <_fflush_r+0x32>
 800cae4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cae6:	f7ff fb8a 	bl	800c1fe <__retarget_lock_acquire_recursive>
 800caea:	4628      	mov	r0, r5
 800caec:	4621      	mov	r1, r4
 800caee:	f7ff ff5f 	bl	800c9b0 <__sflush_r>
 800caf2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800caf4:	07da      	lsls	r2, r3, #31
 800caf6:	4605      	mov	r5, r0
 800caf8:	d4e4      	bmi.n	800cac4 <_fflush_r+0xc>
 800cafa:	89a3      	ldrh	r3, [r4, #12]
 800cafc:	059b      	lsls	r3, r3, #22
 800cafe:	d4e1      	bmi.n	800cac4 <_fflush_r+0xc>
 800cb00:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cb02:	f7ff fb7d 	bl	800c200 <__retarget_lock_release_recursive>
 800cb06:	e7dd      	b.n	800cac4 <_fflush_r+0xc>

0800cb08 <__swhatbuf_r>:
 800cb08:	b570      	push	{r4, r5, r6, lr}
 800cb0a:	460c      	mov	r4, r1
 800cb0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cb10:	2900      	cmp	r1, #0
 800cb12:	b096      	sub	sp, #88	@ 0x58
 800cb14:	4615      	mov	r5, r2
 800cb16:	461e      	mov	r6, r3
 800cb18:	da0d      	bge.n	800cb36 <__swhatbuf_r+0x2e>
 800cb1a:	89a3      	ldrh	r3, [r4, #12]
 800cb1c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800cb20:	f04f 0100 	mov.w	r1, #0
 800cb24:	bf14      	ite	ne
 800cb26:	2340      	movne	r3, #64	@ 0x40
 800cb28:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800cb2c:	2000      	movs	r0, #0
 800cb2e:	6031      	str	r1, [r6, #0]
 800cb30:	602b      	str	r3, [r5, #0]
 800cb32:	b016      	add	sp, #88	@ 0x58
 800cb34:	bd70      	pop	{r4, r5, r6, pc}
 800cb36:	466a      	mov	r2, sp
 800cb38:	f000 f848 	bl	800cbcc <_fstat_r>
 800cb3c:	2800      	cmp	r0, #0
 800cb3e:	dbec      	blt.n	800cb1a <__swhatbuf_r+0x12>
 800cb40:	9901      	ldr	r1, [sp, #4]
 800cb42:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800cb46:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800cb4a:	4259      	negs	r1, r3
 800cb4c:	4159      	adcs	r1, r3
 800cb4e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cb52:	e7eb      	b.n	800cb2c <__swhatbuf_r+0x24>

0800cb54 <__smakebuf_r>:
 800cb54:	898b      	ldrh	r3, [r1, #12]
 800cb56:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cb58:	079d      	lsls	r5, r3, #30
 800cb5a:	4606      	mov	r6, r0
 800cb5c:	460c      	mov	r4, r1
 800cb5e:	d507      	bpl.n	800cb70 <__smakebuf_r+0x1c>
 800cb60:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800cb64:	6023      	str	r3, [r4, #0]
 800cb66:	6123      	str	r3, [r4, #16]
 800cb68:	2301      	movs	r3, #1
 800cb6a:	6163      	str	r3, [r4, #20]
 800cb6c:	b003      	add	sp, #12
 800cb6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cb70:	ab01      	add	r3, sp, #4
 800cb72:	466a      	mov	r2, sp
 800cb74:	f7ff ffc8 	bl	800cb08 <__swhatbuf_r>
 800cb78:	9f00      	ldr	r7, [sp, #0]
 800cb7a:	4605      	mov	r5, r0
 800cb7c:	4639      	mov	r1, r7
 800cb7e:	4630      	mov	r0, r6
 800cb80:	f7ff fbba 	bl	800c2f8 <_malloc_r>
 800cb84:	b948      	cbnz	r0, 800cb9a <__smakebuf_r+0x46>
 800cb86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cb8a:	059a      	lsls	r2, r3, #22
 800cb8c:	d4ee      	bmi.n	800cb6c <__smakebuf_r+0x18>
 800cb8e:	f023 0303 	bic.w	r3, r3, #3
 800cb92:	f043 0302 	orr.w	r3, r3, #2
 800cb96:	81a3      	strh	r3, [r4, #12]
 800cb98:	e7e2      	b.n	800cb60 <__smakebuf_r+0xc>
 800cb9a:	89a3      	ldrh	r3, [r4, #12]
 800cb9c:	6020      	str	r0, [r4, #0]
 800cb9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cba2:	81a3      	strh	r3, [r4, #12]
 800cba4:	9b01      	ldr	r3, [sp, #4]
 800cba6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800cbaa:	b15b      	cbz	r3, 800cbc4 <__smakebuf_r+0x70>
 800cbac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cbb0:	4630      	mov	r0, r6
 800cbb2:	f000 f81d 	bl	800cbf0 <_isatty_r>
 800cbb6:	b128      	cbz	r0, 800cbc4 <__smakebuf_r+0x70>
 800cbb8:	89a3      	ldrh	r3, [r4, #12]
 800cbba:	f023 0303 	bic.w	r3, r3, #3
 800cbbe:	f043 0301 	orr.w	r3, r3, #1
 800cbc2:	81a3      	strh	r3, [r4, #12]
 800cbc4:	89a3      	ldrh	r3, [r4, #12]
 800cbc6:	431d      	orrs	r5, r3
 800cbc8:	81a5      	strh	r5, [r4, #12]
 800cbca:	e7cf      	b.n	800cb6c <__smakebuf_r+0x18>

0800cbcc <_fstat_r>:
 800cbcc:	b538      	push	{r3, r4, r5, lr}
 800cbce:	4d07      	ldr	r5, [pc, #28]	@ (800cbec <_fstat_r+0x20>)
 800cbd0:	2300      	movs	r3, #0
 800cbd2:	4604      	mov	r4, r0
 800cbd4:	4608      	mov	r0, r1
 800cbd6:	4611      	mov	r1, r2
 800cbd8:	602b      	str	r3, [r5, #0]
 800cbda:	f7f4 f9e4 	bl	8000fa6 <_fstat>
 800cbde:	1c43      	adds	r3, r0, #1
 800cbe0:	d102      	bne.n	800cbe8 <_fstat_r+0x1c>
 800cbe2:	682b      	ldr	r3, [r5, #0]
 800cbe4:	b103      	cbz	r3, 800cbe8 <_fstat_r+0x1c>
 800cbe6:	6023      	str	r3, [r4, #0]
 800cbe8:	bd38      	pop	{r3, r4, r5, pc}
 800cbea:	bf00      	nop
 800cbec:	20000e70 	.word	0x20000e70

0800cbf0 <_isatty_r>:
 800cbf0:	b538      	push	{r3, r4, r5, lr}
 800cbf2:	4d06      	ldr	r5, [pc, #24]	@ (800cc0c <_isatty_r+0x1c>)
 800cbf4:	2300      	movs	r3, #0
 800cbf6:	4604      	mov	r4, r0
 800cbf8:	4608      	mov	r0, r1
 800cbfa:	602b      	str	r3, [r5, #0]
 800cbfc:	f7f4 f9e3 	bl	8000fc6 <_isatty>
 800cc00:	1c43      	adds	r3, r0, #1
 800cc02:	d102      	bne.n	800cc0a <_isatty_r+0x1a>
 800cc04:	682b      	ldr	r3, [r5, #0]
 800cc06:	b103      	cbz	r3, 800cc0a <_isatty_r+0x1a>
 800cc08:	6023      	str	r3, [r4, #0]
 800cc0a:	bd38      	pop	{r3, r4, r5, pc}
 800cc0c:	20000e70 	.word	0x20000e70

0800cc10 <_sbrk_r>:
 800cc10:	b538      	push	{r3, r4, r5, lr}
 800cc12:	4d06      	ldr	r5, [pc, #24]	@ (800cc2c <_sbrk_r+0x1c>)
 800cc14:	2300      	movs	r3, #0
 800cc16:	4604      	mov	r4, r0
 800cc18:	4608      	mov	r0, r1
 800cc1a:	602b      	str	r3, [r5, #0]
 800cc1c:	f7f4 f9ec 	bl	8000ff8 <_sbrk>
 800cc20:	1c43      	adds	r3, r0, #1
 800cc22:	d102      	bne.n	800cc2a <_sbrk_r+0x1a>
 800cc24:	682b      	ldr	r3, [r5, #0]
 800cc26:	b103      	cbz	r3, 800cc2a <_sbrk_r+0x1a>
 800cc28:	6023      	str	r3, [r4, #0]
 800cc2a:	bd38      	pop	{r3, r4, r5, pc}
 800cc2c:	20000e70 	.word	0x20000e70

0800cc30 <_init>:
 800cc30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc32:	bf00      	nop
 800cc34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cc36:	bc08      	pop	{r3}
 800cc38:	469e      	mov	lr, r3
 800cc3a:	4770      	bx	lr

0800cc3c <_fini>:
 800cc3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc3e:	bf00      	nop
 800cc40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cc42:	bc08      	pop	{r3}
 800cc44:	469e      	mov	lr, r3
 800cc46:	4770      	bx	lr
