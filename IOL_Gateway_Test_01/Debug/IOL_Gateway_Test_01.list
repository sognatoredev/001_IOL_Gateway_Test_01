
IOL_Gateway_Test_01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d10c  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f0  0800d2ec  0800d2ec  0000e2ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d5dc  0800d5dc  0000f3c8  2**0
                  CONTENTS
  4 .ARM          00000008  0800d5dc  0800d5dc  0000e5dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d5e4  0800d5e4  0000f3c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d5e4  0800d5e4  0000e5e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d5e8  0800d5e8  0000e5e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000003c8  20000000  0800d5ec  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000026dc  200003c8  0800d9b4  0000f3c8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002aa4  0800d9b4  0000faa4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f3c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000229e5  00000000  00000000  0000f3f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005613  00000000  00000000  00031ddd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ba0  00000000  00000000  000373f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001510  00000000  00000000  00038f90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000247d3  00000000  00000000  0003a4a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000252fc  00000000  00000000  0005ec73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cecbf  00000000  00000000  00083f6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00152c2e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000078e8  00000000  00000000  00152c74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  0015a55c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200003c8 	.word	0x200003c8
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800d2d4 	.word	0x0800d2d4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200003cc 	.word	0x200003cc
 800021c:	0800d2d4 	.word	0x0800d2d4

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <Decode_MC_ReadWrite>:

static uint8_t Page1_seq = 0;
static uint8_t PreOP_seq_cnt = 0;

static uint8_t Decode_MC_ReadWrite (uint8_t Data)
{
 80005b0:	b480      	push	{r7}
 80005b2:	b085      	sub	sp, #20
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	4603      	mov	r3, r0
 80005b8:	71fb      	strb	r3, [r7, #7]
    uint8_t MCdata = 0;
 80005ba:	2300      	movs	r3, #0
 80005bc:	73fb      	strb	r3, [r7, #15]

    MCdata = Data;
 80005be:	79fb      	ldrb	r3, [r7, #7]
 80005c0:	73fb      	strb	r3, [r7, #15]
    MCdata = (MCdata >> 7) & 0x01;
 80005c2:	7bfb      	ldrb	r3, [r7, #15]
 80005c4:	09db      	lsrs	r3, r3, #7
 80005c6:	73fb      	strb	r3, [r7, #15]

    switch (MCdata)
 80005c8:	7bfb      	ldrb	r3, [r7, #15]
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d002      	beq.n	80005d4 <Decode_MC_ReadWrite+0x24>
 80005ce:	2b01      	cmp	r3, #1
 80005d0:	d002      	beq.n	80005d8 <Decode_MC_ReadWrite+0x28>
 80005d2:	e003      	b.n	80005dc <Decode_MC_ReadWrite+0x2c>
    {
        case 0 :
            return IOL_RW_Write;
 80005d4:	2300      	movs	r3, #0
 80005d6:	e002      	b.n	80005de <Decode_MC_ReadWrite+0x2e>
        case 1 :
            return IOL_RW_Read;
 80005d8:	2301      	movs	r3, #1
 80005da:	e000      	b.n	80005de <Decode_MC_ReadWrite+0x2e>
        default :
            // printf("Unexpected value\n");
            return 'X';
 80005dc:	2358      	movs	r3, #88	@ 0x58
    }
}
 80005de:	4618      	mov	r0, r3
 80005e0:	3714      	adds	r7, #20
 80005e2:	46bd      	mov	sp, r7
 80005e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e8:	4770      	bx	lr
	...

080005ec <Decode_MC_CommunicationChannel>:

static uint8_t Decode_MC_CommunicationChannel (uint8_t Data)
{
 80005ec:	b480      	push	{r7}
 80005ee:	b085      	sub	sp, #20
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	4603      	mov	r3, r0
 80005f4:	71fb      	strb	r3, [r7, #7]
    uint8_t MCdata = 0;
 80005f6:	2300      	movs	r3, #0
 80005f8:	73fb      	strb	r3, [r7, #15]

    MCdata = Data;
 80005fa:	79fb      	ldrb	r3, [r7, #7]
 80005fc:	73fb      	strb	r3, [r7, #15]
    MCdata = (MCdata >> 5) & 0x03;
 80005fe:	7bfb      	ldrb	r3, [r7, #15]
 8000600:	095b      	lsrs	r3, r3, #5
 8000602:	b2db      	uxtb	r3, r3
 8000604:	f003 0303 	and.w	r3, r3, #3
 8000608:	73fb      	strb	r3, [r7, #15]
    
    switch (MCdata)
 800060a:	7bfb      	ldrb	r3, [r7, #15]
 800060c:	2b03      	cmp	r3, #3
 800060e:	d813      	bhi.n	8000638 <Decode_MC_CommunicationChannel+0x4c>
 8000610:	a201      	add	r2, pc, #4	@ (adr r2, 8000618 <Decode_MC_CommunicationChannel+0x2c>)
 8000612:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000616:	bf00      	nop
 8000618:	08000629 	.word	0x08000629
 800061c:	0800062d 	.word	0x0800062d
 8000620:	08000631 	.word	0x08000631
 8000624:	08000635 	.word	0x08000635
    {
        case 0 :
            // printf("%s,", CommunicationChannel.MC_Com_Ch_0);
            return IOL_Channel_Process;
 8000628:	2300      	movs	r3, #0
 800062a:	e005      	b.n	8000638 <Decode_MC_CommunicationChannel+0x4c>
        case 1 :
            // printf("%s,", CommunicationChannel.MC_Com_Ch_1);
            return IOL_Channel_Page;
 800062c:	2301      	movs	r3, #1
 800062e:	e003      	b.n	8000638 <Decode_MC_CommunicationChannel+0x4c>
        case 2 :
            // printf("%s,", CommunicationChannel.MC_Com_Ch_2);
            return IOL_Channel_Diagnosis;
 8000630:	2302      	movs	r3, #2
 8000632:	e001      	b.n	8000638 <Decode_MC_CommunicationChannel+0x4c>
        case 3 :
            // printf("%s,", CommunicationChannel.MC_Com_Ch_3);
            return IOL_Channel_ISDU;
 8000634:	2303      	movs	r3, #3
 8000636:	e7ff      	b.n	8000638 <Decode_MC_CommunicationChannel+0x4c>
    }
}
 8000638:	4618      	mov	r0, r3
 800063a:	3714      	adds	r7, #20
 800063c:	46bd      	mov	sp, r7
 800063e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000642:	4770      	bx	lr

08000644 <Decode_MC_Address>:

static uint8_t Decode_MC_Address (uint8_t Data)
{
 8000644:	b480      	push	{r7}
 8000646:	b085      	sub	sp, #20
 8000648:	af00      	add	r7, sp, #0
 800064a:	4603      	mov	r3, r0
 800064c:	71fb      	strb	r3, [r7, #7]
    uint8_t MCdata = 0;
 800064e:	2300      	movs	r3, #0
 8000650:	73fb      	strb	r3, [r7, #15]

    MCdata = Data;
 8000652:	79fb      	ldrb	r3, [r7, #7]
 8000654:	73fb      	strb	r3, [r7, #15]
    
    return MCdata & 0x1F;
 8000656:	7bfb      	ldrb	r3, [r7, #15]
 8000658:	f003 031f 	and.w	r3, r3, #31
 800065c:	b2db      	uxtb	r3, r3
}
 800065e:	4618      	mov	r0, r3
 8000660:	3714      	adds	r7, #20
 8000662:	46bd      	mov	sp, r7
 8000664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000668:	4770      	bx	lr

0800066a <Decode_CKT_Type>:

static uint8_t Decode_CKT_Type (uint8_t Data)
{
 800066a:	b480      	push	{r7}
 800066c:	b085      	sub	sp, #20
 800066e:	af00      	add	r7, sp, #0
 8000670:	4603      	mov	r3, r0
 8000672:	71fb      	strb	r3, [r7, #7]
    uint8_t MCdata = 0;
 8000674:	2300      	movs	r3, #0
 8000676:	73fb      	strb	r3, [r7, #15]
    
    MCdata = Data;
 8000678:	79fb      	ldrb	r3, [r7, #7]
 800067a:	73fb      	strb	r3, [r7, #15]

    return (MCdata >> 6) & 0x03;
 800067c:	7bfb      	ldrb	r3, [r7, #15]
 800067e:	099b      	lsrs	r3, r3, #6
 8000680:	b2db      	uxtb	r3, r3
}
 8000682:	4618      	mov	r0, r3
 8000684:	3714      	adds	r7, #20
 8000686:	46bd      	mov	sp, r7
 8000688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068c:	4770      	bx	lr

0800068e <Decode_CKT_Checksum>:

static uint8_t Decode_CKT_Checksum (uint8_t Data)
{
 800068e:	b480      	push	{r7}
 8000690:	b085      	sub	sp, #20
 8000692:	af00      	add	r7, sp, #0
 8000694:	4603      	mov	r3, r0
 8000696:	71fb      	strb	r3, [r7, #7]
    uint8_t MCdata = 0;
 8000698:	2300      	movs	r3, #0
 800069a:	73fb      	strb	r3, [r7, #15]

    MCdata = Data;
 800069c:	79fb      	ldrb	r3, [r7, #7]
 800069e:	73fb      	strb	r3, [r7, #15]

    return MCdata & 0x3F;
 80006a0:	7bfb      	ldrb	r3, [r7, #15]
 80006a2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80006a6:	b2db      	uxtb	r3, r3
}
 80006a8:	4618      	mov	r0, r3
 80006aa:	3714      	adds	r7, #20
 80006ac:	46bd      	mov	sp, r7
 80006ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b2:	4770      	bx	lr

080006b4 <Decode_CKS_GetChecksum>:

static uint8_t Decode_CKS_GetChecksum (const uint8_t * pData, uint8_t length)
{
 80006b4:	b480      	push	{r7}
 80006b6:	b087      	sub	sp, #28
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
 80006bc:	460b      	mov	r3, r1
 80006be:	70fb      	strb	r3, [r7, #3]
    uint8_t ck8 = 0x52;
 80006c0:	2352      	movs	r3, #82	@ 0x52
 80006c2:	75fb      	strb	r3, [r7, #23]
    uint8_t checksumsize = 0;
 80006c4:	2300      	movs	r3, #0
 80006c6:	757b      	strb	r3, [r7, #21]

    checksumsize = length;
 80006c8:	78fb      	ldrb	r3, [r7, #3]
 80006ca:	757b      	strb	r3, [r7, #21]

    for (uint8_t i = 0; i < checksumsize; i++)
 80006cc:	2300      	movs	r3, #0
 80006ce:	75bb      	strb	r3, [r7, #22]
 80006d0:	e009      	b.n	80006e6 <Decode_CKS_GetChecksum+0x32>
    {
        ck8 ^= *pData++;
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	1c5a      	adds	r2, r3, #1
 80006d6:	607a      	str	r2, [r7, #4]
 80006d8:	781a      	ldrb	r2, [r3, #0]
 80006da:	7dfb      	ldrb	r3, [r7, #23]
 80006dc:	4053      	eors	r3, r2
 80006de:	75fb      	strb	r3, [r7, #23]
    for (uint8_t i = 0; i < checksumsize; i++)
 80006e0:	7dbb      	ldrb	r3, [r7, #22]
 80006e2:	3301      	adds	r3, #1
 80006e4:	75bb      	strb	r3, [r7, #22]
 80006e6:	7dba      	ldrb	r2, [r7, #22]
 80006e8:	7d7b      	ldrb	r3, [r7, #21]
 80006ea:	429a      	cmp	r2, r3
 80006ec:	d3f1      	bcc.n	80006d2 <Decode_CKS_GetChecksum+0x1e>
    }

    //Section A.1.6
    uint8_t bit5 = ((ck8 >> 7) & 1U) ^ ((ck8 >> 5) & 1U) ^ ((ck8 >> 3) & 1U) ^ ((ck8 >> 1) & 1U);
 80006ee:	7dfb      	ldrb	r3, [r7, #23]
 80006f0:	09db      	lsrs	r3, r3, #7
 80006f2:	b2da      	uxtb	r2, r3
 80006f4:	7dfb      	ldrb	r3, [r7, #23]
 80006f6:	095b      	lsrs	r3, r3, #5
 80006f8:	b2db      	uxtb	r3, r3
 80006fa:	4053      	eors	r3, r2
 80006fc:	b2da      	uxtb	r2, r3
 80006fe:	7dfb      	ldrb	r3, [r7, #23]
 8000700:	08db      	lsrs	r3, r3, #3
 8000702:	b2db      	uxtb	r3, r3
 8000704:	4053      	eors	r3, r2
 8000706:	b2da      	uxtb	r2, r3
 8000708:	7dfb      	ldrb	r3, [r7, #23]
 800070a:	085b      	lsrs	r3, r3, #1
 800070c:	b2db      	uxtb	r3, r3
 800070e:	4053      	eors	r3, r2
 8000710:	b2db      	uxtb	r3, r3
 8000712:	f003 0301 	and.w	r3, r3, #1
 8000716:	753b      	strb	r3, [r7, #20]
    uint8_t bit4 = ((ck8 >> 6) & 1U) ^ ((ck8 >> 4) & 1U) ^ ((ck8 >> 2) & 1U) ^ (ck8 & 1U);
 8000718:	7dfb      	ldrb	r3, [r7, #23]
 800071a:	099b      	lsrs	r3, r3, #6
 800071c:	b2da      	uxtb	r2, r3
 800071e:	7dfb      	ldrb	r3, [r7, #23]
 8000720:	091b      	lsrs	r3, r3, #4
 8000722:	b2db      	uxtb	r3, r3
 8000724:	4053      	eors	r3, r2
 8000726:	b2da      	uxtb	r2, r3
 8000728:	7dfb      	ldrb	r3, [r7, #23]
 800072a:	089b      	lsrs	r3, r3, #2
 800072c:	b2db      	uxtb	r3, r3
 800072e:	4053      	eors	r3, r2
 8000730:	b2da      	uxtb	r2, r3
 8000732:	7dfb      	ldrb	r3, [r7, #23]
 8000734:	4053      	eors	r3, r2
 8000736:	b2db      	uxtb	r3, r3
 8000738:	f003 0301 	and.w	r3, r3, #1
 800073c:	74fb      	strb	r3, [r7, #19]
    uint8_t bit3 = ((ck8 >> 7) & 1U) ^ ((ck8 >> 6) & 1U);
 800073e:	7dfb      	ldrb	r3, [r7, #23]
 8000740:	09db      	lsrs	r3, r3, #7
 8000742:	b2da      	uxtb	r2, r3
 8000744:	7dfb      	ldrb	r3, [r7, #23]
 8000746:	099b      	lsrs	r3, r3, #6
 8000748:	b2db      	uxtb	r3, r3
 800074a:	4053      	eors	r3, r2
 800074c:	b2db      	uxtb	r3, r3
 800074e:	f003 0301 	and.w	r3, r3, #1
 8000752:	74bb      	strb	r3, [r7, #18]
    uint8_t bit2 = ((ck8 >> 5) & 1U) ^ ((ck8 >> 4) & 1U);
 8000754:	7dfb      	ldrb	r3, [r7, #23]
 8000756:	095b      	lsrs	r3, r3, #5
 8000758:	b2da      	uxtb	r2, r3
 800075a:	7dfb      	ldrb	r3, [r7, #23]
 800075c:	091b      	lsrs	r3, r3, #4
 800075e:	b2db      	uxtb	r3, r3
 8000760:	4053      	eors	r3, r2
 8000762:	b2db      	uxtb	r3, r3
 8000764:	f003 0301 	and.w	r3, r3, #1
 8000768:	747b      	strb	r3, [r7, #17]
    uint8_t bit1 = ((ck8 >> 3) & 1U) ^ ((ck8 >> 2) & 1U);
 800076a:	7dfb      	ldrb	r3, [r7, #23]
 800076c:	08db      	lsrs	r3, r3, #3
 800076e:	b2da      	uxtb	r2, r3
 8000770:	7dfb      	ldrb	r3, [r7, #23]
 8000772:	089b      	lsrs	r3, r3, #2
 8000774:	b2db      	uxtb	r3, r3
 8000776:	4053      	eors	r3, r2
 8000778:	b2db      	uxtb	r3, r3
 800077a:	f003 0301 	and.w	r3, r3, #1
 800077e:	743b      	strb	r3, [r7, #16]
    uint8_t bit0 = ((ck8 >> 1) & 1U) ^ ((ck8 & 1U));
 8000780:	7dfb      	ldrb	r3, [r7, #23]
 8000782:	085b      	lsrs	r3, r3, #1
 8000784:	b2da      	uxtb	r2, r3
 8000786:	7dfb      	ldrb	r3, [r7, #23]
 8000788:	4053      	eors	r3, r2
 800078a:	b2db      	uxtb	r3, r3
 800078c:	f003 0301 	and.w	r3, r3, #1
 8000790:	73fb      	strb	r3, [r7, #15]
    uint8_t ck6 =   bit5 << 5 |
 8000792:	7d3b      	ldrb	r3, [r7, #20]
 8000794:	015b      	lsls	r3, r3, #5
 8000796:	b25a      	sxtb	r2, r3
                    bit4 << 4 |
 8000798:	7cfb      	ldrb	r3, [r7, #19]
 800079a:	011b      	lsls	r3, r3, #4
    uint8_t ck6 =   bit5 << 5 |
 800079c:	b25b      	sxtb	r3, r3
 800079e:	4313      	orrs	r3, r2
 80007a0:	b25a      	sxtb	r2, r3
                    bit3 << 3 |
 80007a2:	7cbb      	ldrb	r3, [r7, #18]
 80007a4:	00db      	lsls	r3, r3, #3
                    bit4 << 4 |
 80007a6:	b25b      	sxtb	r3, r3
 80007a8:	4313      	orrs	r3, r2
 80007aa:	b25a      	sxtb	r2, r3
                    bit2 << 2 |
 80007ac:	7c7b      	ldrb	r3, [r7, #17]
 80007ae:	009b      	lsls	r3, r3, #2
                    bit3 << 3 |
 80007b0:	b25b      	sxtb	r3, r3
 80007b2:	4313      	orrs	r3, r2
 80007b4:	b25a      	sxtb	r2, r3
                    bit1 << 1 |
 80007b6:	7c3b      	ldrb	r3, [r7, #16]
 80007b8:	005b      	lsls	r3, r3, #1
                    bit2 << 2 |
 80007ba:	b25b      	sxtb	r3, r3
 80007bc:	4313      	orrs	r3, r2
 80007be:	b25a      	sxtb	r2, r3
                    bit1 << 1 |
 80007c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007c4:	4313      	orrs	r3, r2
 80007c6:	b25b      	sxtb	r3, r3
    uint8_t ck6 =   bit5 << 5 |
 80007c8:	73bb      	strb	r3, [r7, #14]
                    bit0;
    return ck6;
 80007ca:	7bbb      	ldrb	r3, [r7, #14]
}
 80007cc:	4618      	mov	r0, r3
 80007ce:	371c      	adds	r7, #28
 80007d0:	46bd      	mov	sp, r7
 80007d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d6:	4770      	bx	lr

080007d8 <OP_CKS_GetChecksum>:

//OP 모드 Event 비트 포함 CKS 생성
uint8_t OP_CKS_GetChecksum (const uint8_t * pData, uint8_t length, uint8_t eventflag)
{
 80007d8:	b480      	push	{r7}
 80007da:	b089      	sub	sp, #36	@ 0x24
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
 80007e0:	460b      	mov	r3, r1
 80007e2:	70fb      	strb	r3, [r7, #3]
 80007e4:	4613      	mov	r3, r2
 80007e6:	70bb      	strb	r3, [r7, #2]
    uint8_t ck8 = 0x52;
 80007e8:	2352      	movs	r3, #82	@ 0x52
 80007ea:	77fb      	strb	r3, [r7, #31]
    uint8_t checksumsize = 0;
 80007ec:	2300      	movs	r3, #0
 80007ee:	773b      	strb	r3, [r7, #28]
    uint8_t eventbitset = 0x80;
 80007f0:	2380      	movs	r3, #128	@ 0x80
 80007f2:	76fb      	strb	r3, [r7, #27]

    checksumsize = length;
 80007f4:	78fb      	ldrb	r3, [r7, #3]
 80007f6:	773b      	strb	r3, [r7, #28]

    if (eventflag == 0)
 80007f8:	78bb      	ldrb	r3, [r7, #2]
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	f040 8081 	bne.w	8000902 <OP_CKS_GetChecksum+0x12a>
    {
        for (uint8_t i = 0; i < checksumsize; i++)
 8000800:	2300      	movs	r3, #0
 8000802:	77bb      	strb	r3, [r7, #30]
 8000804:	e009      	b.n	800081a <OP_CKS_GetChecksum+0x42>
        {
            ck8 ^= *pData++;
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	1c5a      	adds	r2, r3, #1
 800080a:	607a      	str	r2, [r7, #4]
 800080c:	781a      	ldrb	r2, [r3, #0]
 800080e:	7ffb      	ldrb	r3, [r7, #31]
 8000810:	4053      	eors	r3, r2
 8000812:	77fb      	strb	r3, [r7, #31]
        for (uint8_t i = 0; i < checksumsize; i++)
 8000814:	7fbb      	ldrb	r3, [r7, #30]
 8000816:	3301      	adds	r3, #1
 8000818:	77bb      	strb	r3, [r7, #30]
 800081a:	7fba      	ldrb	r2, [r7, #30]
 800081c:	7f3b      	ldrb	r3, [r7, #28]
 800081e:	429a      	cmp	r2, r3
 8000820:	d3f1      	bcc.n	8000806 <OP_CKS_GetChecksum+0x2e>
        }
        //Section A.1.6
        uint8_t bit5 = ((ck8 >> 7) & 1U) ^ ((ck8 >> 5) & 1U) ^ ((ck8 >> 3) & 1U) ^ ((ck8 >> 1) & 1U);
 8000822:	7ffb      	ldrb	r3, [r7, #31]
 8000824:	09db      	lsrs	r3, r3, #7
 8000826:	b2da      	uxtb	r2, r3
 8000828:	7ffb      	ldrb	r3, [r7, #31]
 800082a:	095b      	lsrs	r3, r3, #5
 800082c:	b2db      	uxtb	r3, r3
 800082e:	4053      	eors	r3, r2
 8000830:	b2da      	uxtb	r2, r3
 8000832:	7ffb      	ldrb	r3, [r7, #31]
 8000834:	08db      	lsrs	r3, r3, #3
 8000836:	b2db      	uxtb	r3, r3
 8000838:	4053      	eors	r3, r2
 800083a:	b2da      	uxtb	r2, r3
 800083c:	7ffb      	ldrb	r3, [r7, #31]
 800083e:	085b      	lsrs	r3, r3, #1
 8000840:	b2db      	uxtb	r3, r3
 8000842:	4053      	eors	r3, r2
 8000844:	b2db      	uxtb	r3, r3
 8000846:	f003 0301 	and.w	r3, r3, #1
 800084a:	74fb      	strb	r3, [r7, #19]
        uint8_t bit4 = ((ck8 >> 6) & 1U) ^ ((ck8 >> 4) & 1U) ^ ((ck8 >> 2) & 1U) ^ (ck8 & 1U);
 800084c:	7ffb      	ldrb	r3, [r7, #31]
 800084e:	099b      	lsrs	r3, r3, #6
 8000850:	b2da      	uxtb	r2, r3
 8000852:	7ffb      	ldrb	r3, [r7, #31]
 8000854:	091b      	lsrs	r3, r3, #4
 8000856:	b2db      	uxtb	r3, r3
 8000858:	4053      	eors	r3, r2
 800085a:	b2da      	uxtb	r2, r3
 800085c:	7ffb      	ldrb	r3, [r7, #31]
 800085e:	089b      	lsrs	r3, r3, #2
 8000860:	b2db      	uxtb	r3, r3
 8000862:	4053      	eors	r3, r2
 8000864:	b2da      	uxtb	r2, r3
 8000866:	7ffb      	ldrb	r3, [r7, #31]
 8000868:	4053      	eors	r3, r2
 800086a:	b2db      	uxtb	r3, r3
 800086c:	f003 0301 	and.w	r3, r3, #1
 8000870:	74bb      	strb	r3, [r7, #18]
        uint8_t bit3 = ((ck8 >> 7) & 1U) ^ ((ck8 >> 6) & 1U);
 8000872:	7ffb      	ldrb	r3, [r7, #31]
 8000874:	09db      	lsrs	r3, r3, #7
 8000876:	b2da      	uxtb	r2, r3
 8000878:	7ffb      	ldrb	r3, [r7, #31]
 800087a:	099b      	lsrs	r3, r3, #6
 800087c:	b2db      	uxtb	r3, r3
 800087e:	4053      	eors	r3, r2
 8000880:	b2db      	uxtb	r3, r3
 8000882:	f003 0301 	and.w	r3, r3, #1
 8000886:	747b      	strb	r3, [r7, #17]
        uint8_t bit2 = ((ck8 >> 5) & 1U) ^ ((ck8 >> 4) & 1U);
 8000888:	7ffb      	ldrb	r3, [r7, #31]
 800088a:	095b      	lsrs	r3, r3, #5
 800088c:	b2da      	uxtb	r2, r3
 800088e:	7ffb      	ldrb	r3, [r7, #31]
 8000890:	091b      	lsrs	r3, r3, #4
 8000892:	b2db      	uxtb	r3, r3
 8000894:	4053      	eors	r3, r2
 8000896:	b2db      	uxtb	r3, r3
 8000898:	f003 0301 	and.w	r3, r3, #1
 800089c:	743b      	strb	r3, [r7, #16]
        uint8_t bit1 = ((ck8 >> 3) & 1U) ^ ((ck8 >> 2) & 1U);
 800089e:	7ffb      	ldrb	r3, [r7, #31]
 80008a0:	08db      	lsrs	r3, r3, #3
 80008a2:	b2da      	uxtb	r2, r3
 80008a4:	7ffb      	ldrb	r3, [r7, #31]
 80008a6:	089b      	lsrs	r3, r3, #2
 80008a8:	b2db      	uxtb	r3, r3
 80008aa:	4053      	eors	r3, r2
 80008ac:	b2db      	uxtb	r3, r3
 80008ae:	f003 0301 	and.w	r3, r3, #1
 80008b2:	73fb      	strb	r3, [r7, #15]
        uint8_t bit0 = ((ck8 >> 1) & 1U) ^ ((ck8 & 1U));
 80008b4:	7ffb      	ldrb	r3, [r7, #31]
 80008b6:	085b      	lsrs	r3, r3, #1
 80008b8:	b2da      	uxtb	r2, r3
 80008ba:	7ffb      	ldrb	r3, [r7, #31]
 80008bc:	4053      	eors	r3, r2
 80008be:	b2db      	uxtb	r3, r3
 80008c0:	f003 0301 	and.w	r3, r3, #1
 80008c4:	73bb      	strb	r3, [r7, #14]
        uint8_t ck6 =   bit5 << 5 |
 80008c6:	7cfb      	ldrb	r3, [r7, #19]
 80008c8:	015b      	lsls	r3, r3, #5
 80008ca:	b25a      	sxtb	r2, r3
                        bit4 << 4 |
 80008cc:	7cbb      	ldrb	r3, [r7, #18]
 80008ce:	011b      	lsls	r3, r3, #4
        uint8_t ck6 =   bit5 << 5 |
 80008d0:	b25b      	sxtb	r3, r3
 80008d2:	4313      	orrs	r3, r2
 80008d4:	b25a      	sxtb	r2, r3
                        bit3 << 3 |
 80008d6:	7c7b      	ldrb	r3, [r7, #17]
 80008d8:	00db      	lsls	r3, r3, #3
                        bit4 << 4 |
 80008da:	b25b      	sxtb	r3, r3
 80008dc:	4313      	orrs	r3, r2
 80008de:	b25a      	sxtb	r2, r3
                        bit2 << 2 |
 80008e0:	7c3b      	ldrb	r3, [r7, #16]
 80008e2:	009b      	lsls	r3, r3, #2
                        bit3 << 3 |
 80008e4:	b25b      	sxtb	r3, r3
 80008e6:	4313      	orrs	r3, r2
 80008e8:	b25a      	sxtb	r2, r3
                        bit1 << 1 |
 80008ea:	7bfb      	ldrb	r3, [r7, #15]
 80008ec:	005b      	lsls	r3, r3, #1
                        bit2 << 2 |
 80008ee:	b25b      	sxtb	r3, r3
 80008f0:	4313      	orrs	r3, r2
 80008f2:	b25a      	sxtb	r2, r3
                        bit1 << 1 |
 80008f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80008f8:	4313      	orrs	r3, r2
 80008fa:	b25b      	sxtb	r3, r3
        uint8_t ck6 =   bit5 << 5 |
 80008fc:	737b      	strb	r3, [r7, #13]
                        bit0;
        
        return ck6;
 80008fe:	7b7b      	ldrb	r3, [r7, #13]
 8000900:	e08b      	b.n	8000a1a <OP_CKS_GetChecksum+0x242>
    }
    else if (eventflag == 1)
 8000902:	78bb      	ldrb	r3, [r7, #2]
 8000904:	2b01      	cmp	r3, #1
 8000906:	f040 8088 	bne.w	8000a1a <OP_CKS_GetChecksum+0x242>
    {
        for (uint8_t i = 0; i < checksumsize; i++)
 800090a:	2300      	movs	r3, #0
 800090c:	777b      	strb	r3, [r7, #29]
 800090e:	e009      	b.n	8000924 <OP_CKS_GetChecksum+0x14c>
        {
            ck8 ^= *pData++;
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	1c5a      	adds	r2, r3, #1
 8000914:	607a      	str	r2, [r7, #4]
 8000916:	781a      	ldrb	r2, [r3, #0]
 8000918:	7ffb      	ldrb	r3, [r7, #31]
 800091a:	4053      	eors	r3, r2
 800091c:	77fb      	strb	r3, [r7, #31]
        for (uint8_t i = 0; i < checksumsize; i++)
 800091e:	7f7b      	ldrb	r3, [r7, #29]
 8000920:	3301      	adds	r3, #1
 8000922:	777b      	strb	r3, [r7, #29]
 8000924:	7f7a      	ldrb	r2, [r7, #29]
 8000926:	7f3b      	ldrb	r3, [r7, #28]
 8000928:	429a      	cmp	r2, r3
 800092a:	d3f1      	bcc.n	8000910 <OP_CKS_GetChecksum+0x138>
        }

        ck8 ^= eventbitset;
 800092c:	7ffa      	ldrb	r2, [r7, #31]
 800092e:	7efb      	ldrb	r3, [r7, #27]
 8000930:	4053      	eors	r3, r2
 8000932:	77fb      	strb	r3, [r7, #31]

        //Section A.1.6
        uint8_t bit5 = ((ck8 >> 7) & 1U) ^ ((ck8 >> 5) & 1U) ^ ((ck8 >> 3) & 1U) ^ ((ck8 >> 1) & 1U);
 8000934:	7ffb      	ldrb	r3, [r7, #31]
 8000936:	09db      	lsrs	r3, r3, #7
 8000938:	b2da      	uxtb	r2, r3
 800093a:	7ffb      	ldrb	r3, [r7, #31]
 800093c:	095b      	lsrs	r3, r3, #5
 800093e:	b2db      	uxtb	r3, r3
 8000940:	4053      	eors	r3, r2
 8000942:	b2da      	uxtb	r2, r3
 8000944:	7ffb      	ldrb	r3, [r7, #31]
 8000946:	08db      	lsrs	r3, r3, #3
 8000948:	b2db      	uxtb	r3, r3
 800094a:	4053      	eors	r3, r2
 800094c:	b2da      	uxtb	r2, r3
 800094e:	7ffb      	ldrb	r3, [r7, #31]
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	b2db      	uxtb	r3, r3
 8000954:	4053      	eors	r3, r2
 8000956:	b2db      	uxtb	r3, r3
 8000958:	f003 0301 	and.w	r3, r3, #1
 800095c:	76bb      	strb	r3, [r7, #26]
        uint8_t bit4 = ((ck8 >> 6) & 1U) ^ ((ck8 >> 4) & 1U) ^ ((ck8 >> 2) & 1U) ^ (ck8 & 1U);
 800095e:	7ffb      	ldrb	r3, [r7, #31]
 8000960:	099b      	lsrs	r3, r3, #6
 8000962:	b2da      	uxtb	r2, r3
 8000964:	7ffb      	ldrb	r3, [r7, #31]
 8000966:	091b      	lsrs	r3, r3, #4
 8000968:	b2db      	uxtb	r3, r3
 800096a:	4053      	eors	r3, r2
 800096c:	b2da      	uxtb	r2, r3
 800096e:	7ffb      	ldrb	r3, [r7, #31]
 8000970:	089b      	lsrs	r3, r3, #2
 8000972:	b2db      	uxtb	r3, r3
 8000974:	4053      	eors	r3, r2
 8000976:	b2da      	uxtb	r2, r3
 8000978:	7ffb      	ldrb	r3, [r7, #31]
 800097a:	4053      	eors	r3, r2
 800097c:	b2db      	uxtb	r3, r3
 800097e:	f003 0301 	and.w	r3, r3, #1
 8000982:	767b      	strb	r3, [r7, #25]
        uint8_t bit3 = ((ck8 >> 7) & 1U) ^ ((ck8 >> 6) & 1U);
 8000984:	7ffb      	ldrb	r3, [r7, #31]
 8000986:	09db      	lsrs	r3, r3, #7
 8000988:	b2da      	uxtb	r2, r3
 800098a:	7ffb      	ldrb	r3, [r7, #31]
 800098c:	099b      	lsrs	r3, r3, #6
 800098e:	b2db      	uxtb	r3, r3
 8000990:	4053      	eors	r3, r2
 8000992:	b2db      	uxtb	r3, r3
 8000994:	f003 0301 	and.w	r3, r3, #1
 8000998:	763b      	strb	r3, [r7, #24]
        uint8_t bit2 = ((ck8 >> 5) & 1U) ^ ((ck8 >> 4) & 1U);
 800099a:	7ffb      	ldrb	r3, [r7, #31]
 800099c:	095b      	lsrs	r3, r3, #5
 800099e:	b2da      	uxtb	r2, r3
 80009a0:	7ffb      	ldrb	r3, [r7, #31]
 80009a2:	091b      	lsrs	r3, r3, #4
 80009a4:	b2db      	uxtb	r3, r3
 80009a6:	4053      	eors	r3, r2
 80009a8:	b2db      	uxtb	r3, r3
 80009aa:	f003 0301 	and.w	r3, r3, #1
 80009ae:	75fb      	strb	r3, [r7, #23]
        uint8_t bit1 = ((ck8 >> 3) & 1U) ^ ((ck8 >> 2) & 1U);
 80009b0:	7ffb      	ldrb	r3, [r7, #31]
 80009b2:	08db      	lsrs	r3, r3, #3
 80009b4:	b2da      	uxtb	r2, r3
 80009b6:	7ffb      	ldrb	r3, [r7, #31]
 80009b8:	089b      	lsrs	r3, r3, #2
 80009ba:	b2db      	uxtb	r3, r3
 80009bc:	4053      	eors	r3, r2
 80009be:	b2db      	uxtb	r3, r3
 80009c0:	f003 0301 	and.w	r3, r3, #1
 80009c4:	75bb      	strb	r3, [r7, #22]
        uint8_t bit0 = ((ck8 >> 1) & 1U) ^ ((ck8 & 1U));
 80009c6:	7ffb      	ldrb	r3, [r7, #31]
 80009c8:	085b      	lsrs	r3, r3, #1
 80009ca:	b2da      	uxtb	r2, r3
 80009cc:	7ffb      	ldrb	r3, [r7, #31]
 80009ce:	4053      	eors	r3, r2
 80009d0:	b2db      	uxtb	r3, r3
 80009d2:	f003 0301 	and.w	r3, r3, #1
 80009d6:	757b      	strb	r3, [r7, #21]
        uint8_t ck6 =   bit5 << 5 |
 80009d8:	7ebb      	ldrb	r3, [r7, #26]
 80009da:	015b      	lsls	r3, r3, #5
 80009dc:	b25a      	sxtb	r2, r3
                        bit4 << 4 |
 80009de:	7e7b      	ldrb	r3, [r7, #25]
 80009e0:	011b      	lsls	r3, r3, #4
        uint8_t ck6 =   bit5 << 5 |
 80009e2:	b25b      	sxtb	r3, r3
 80009e4:	4313      	orrs	r3, r2
 80009e6:	b25a      	sxtb	r2, r3
                        bit3 << 3 |
 80009e8:	7e3b      	ldrb	r3, [r7, #24]
 80009ea:	00db      	lsls	r3, r3, #3
                        bit4 << 4 |
 80009ec:	b25b      	sxtb	r3, r3
 80009ee:	4313      	orrs	r3, r2
 80009f0:	b25a      	sxtb	r2, r3
                        bit2 << 2 |
 80009f2:	7dfb      	ldrb	r3, [r7, #23]
 80009f4:	009b      	lsls	r3, r3, #2
                        bit3 << 3 |
 80009f6:	b25b      	sxtb	r3, r3
 80009f8:	4313      	orrs	r3, r2
 80009fa:	b25a      	sxtb	r2, r3
                        bit1 << 1 |
 80009fc:	7dbb      	ldrb	r3, [r7, #22]
 80009fe:	005b      	lsls	r3, r3, #1
                        bit2 << 2 |
 8000a00:	b25b      	sxtb	r3, r3
 8000a02:	4313      	orrs	r3, r2
 8000a04:	b25a      	sxtb	r2, r3
                        bit1 << 1 |
 8000a06:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000a0a:	4313      	orrs	r3, r2
 8000a0c:	b25b      	sxtb	r3, r3
        uint8_t ck6 =   bit5 << 5 |
 8000a0e:	753b      	strb	r3, [r7, #20]
                        bit0;
        
        return eventbitset | ck6;
 8000a10:	7efa      	ldrb	r2, [r7, #27]
 8000a12:	7d3b      	ldrb	r3, [r7, #20]
 8000a14:	4313      	orrs	r3, r2
 8000a16:	b2db      	uxtb	r3, r3
 8000a18:	e7ff      	b.n	8000a1a <OP_CKS_GetChecksum+0x242>
    }
}
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	3724      	adds	r7, #36	@ 0x24
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a24:	4770      	bx	lr
	...

08000a28 <IOL_StartUp_Read_MakePacket>:

static uint8_t* IOL_StartUp_Read_MakePacket (uint8_t * pData)
{
 8000a28:	b590      	push	{r4, r7, lr}
 8000a2a:	b085      	sub	sp, #20
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
    uint8_t i = 0;
 8000a30:	2300      	movs	r3, #0
 8000a32:	73fb      	strb	r3, [r7, #15]
    
    pData[0] = IOL_Page1_SeqValue[Page1_seq++];
 8000a34:	4b0b      	ldr	r3, [pc, #44]	@ (8000a64 <IOL_StartUp_Read_MakePacket+0x3c>)
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	1c5a      	adds	r2, r3, #1
 8000a3a:	b2d1      	uxtb	r1, r2
 8000a3c:	4a09      	ldr	r2, [pc, #36]	@ (8000a64 <IOL_StartUp_Read_MakePacket+0x3c>)
 8000a3e:	7011      	strb	r1, [r2, #0]
 8000a40:	461a      	mov	r2, r3
 8000a42:	4b09      	ldr	r3, [pc, #36]	@ (8000a68 <IOL_StartUp_Read_MakePacket+0x40>)
 8000a44:	5c9a      	ldrb	r2, [r3, r2]
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	701a      	strb	r2, [r3, #0]
    pData[1] = Decode_CKS_GetChecksum(&pData[0], 1);
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	1c5c      	adds	r4, r3, #1
 8000a4e:	2101      	movs	r1, #1
 8000a50:	6878      	ldr	r0, [r7, #4]
 8000a52:	f7ff fe2f 	bl	80006b4 <Decode_CKS_GetChecksum>
 8000a56:	4603      	mov	r3, r0
 8000a58:	7023      	strb	r3, [r4, #0]
    
    return pData;
 8000a5a:	687b      	ldr	r3, [r7, #4]
}
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	3714      	adds	r7, #20
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd90      	pop	{r4, r7, pc}
 8000a64:	200003e4 	.word	0x200003e4
 8000a68:	20000004 	.word	0x20000004

08000a6c <IOL_StartUp_Write_MakePacket>:

static uint8_t* IOL_StartUp_Write_MakePacket (uint8_t * pData)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b084      	sub	sp, #16
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
    uint8_t i = 0;
 8000a74:	2300      	movs	r3, #0
 8000a76:	73fb      	strb	r3, [r7, #15]
    
    pData[0] = Decode_CKS_GetChecksum(&IOL_Checksum_SeedValue, 0);
 8000a78:	2100      	movs	r1, #0
 8000a7a:	4806      	ldr	r0, [pc, #24]	@ (8000a94 <IOL_StartUp_Write_MakePacket+0x28>)
 8000a7c:	f7ff fe1a 	bl	80006b4 <Decode_CKS_GetChecksum>
 8000a80:	4603      	mov	r3, r0
 8000a82:	461a      	mov	r2, r3
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	701a      	strb	r2, [r3, #0]
    
    return pData;
 8000a88:	687b      	ldr	r3, [r7, #4]
}
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	3710      	adds	r7, #16
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	20000000 	.word	0x20000000

08000a98 <IOL_State_StartUp>:

static uint8_t IOL_State_StartUp (void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b084      	sub	sp, #16
 8000a9c:	af00      	add	r7, sp, #0
    uint8_t Page_ChecksumValue = 0;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	71fb      	strb	r3, [r7, #7]
    uint8_t Length = 0;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	73fb      	strb	r3, [r7, #15]
    uint8_t * pData;

    switch (IOL_M2D_rxpacket.rw)
 8000aa6:	4b19      	ldr	r3, [pc, #100]	@ (8000b0c <IOL_State_StartUp+0x74>)
 8000aa8:	781b      	ldrb	r3, [r3, #0]
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d008      	beq.n	8000ac0 <IOL_State_StartUp+0x28>
 8000aae:	2b01      	cmp	r3, #1
 8000ab0:	d10d      	bne.n	8000ace <IOL_State_StartUp+0x36>
    {
        case IOL_RW_Read :
            //to do
            Length = 2;
 8000ab2:	2302      	movs	r3, #2
 8000ab4:	73fb      	strb	r3, [r7, #15]
            pData = IOL_StartUp_Read_MakePacket(uart1_rx_IDLE_buf);
 8000ab6:	4816      	ldr	r0, [pc, #88]	@ (8000b10 <IOL_State_StartUp+0x78>)
 8000ab8:	f7ff ffb6 	bl	8000a28 <IOL_StartUp_Read_MakePacket>
 8000abc:	60b8      	str	r0, [r7, #8]
            break;
 8000abe:	e006      	b.n	8000ace <IOL_State_StartUp+0x36>
        case IOL_RW_Write :
            // to do
            Length = 1;
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	73fb      	strb	r3, [r7, #15]
            pData = IOL_StartUp_Write_MakePacket(uart1_rx_IDLE_buf);
 8000ac4:	4812      	ldr	r0, [pc, #72]	@ (8000b10 <IOL_State_StartUp+0x78>)
 8000ac6:	f7ff ffd1 	bl	8000a6c <IOL_StartUp_Write_MakePacket>
 8000aca:	60b8      	str	r0, [r7, #8]
            break;
 8000acc:	bf00      	nop
    }

    IOL_ENABLE;
 8000ace:	2201      	movs	r2, #1
 8000ad0:	2140      	movs	r1, #64	@ 0x40
 8000ad2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ad6:	f002 fba9 	bl	800322c <HAL_GPIO_WritePin>
    if (HAL_UART_Transmit_IT(&huart1, (uint8_t *) pData, Length) != HAL_OK)
 8000ada:	7bfb      	ldrb	r3, [r7, #15]
 8000adc:	b29b      	uxth	r3, r3
 8000ade:	461a      	mov	r2, r3
 8000ae0:	68b9      	ldr	r1, [r7, #8]
 8000ae2:	480c      	ldr	r0, [pc, #48]	@ (8000b14 <IOL_State_StartUp+0x7c>)
 8000ae4:	f005 fe4e 	bl	8006784 <HAL_UART_Transmit_IT>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <IOL_State_StartUp+0x5a>
    {
        Error_Handler();
 8000aee:	f000 ffd8 	bl	8001aa2 <Error_Handler>
    }

    //Master Command to PreOP.
    if (uart1_rx_IDLE_buf[2] == 0x9A)
 8000af2:	4b07      	ldr	r3, [pc, #28]	@ (8000b10 <IOL_State_StartUp+0x78>)
 8000af4:	789b      	ldrb	r3, [r3, #2]
 8000af6:	2b9a      	cmp	r3, #154	@ 0x9a
 8000af8:	d102      	bne.n	8000b00 <IOL_State_StartUp+0x68>
    {
        stateIOLseq = IOL_PreOP;
 8000afa:	4b07      	ldr	r3, [pc, #28]	@ (8000b18 <IOL_State_StartUp+0x80>)
 8000afc:	2201      	movs	r2, #1
 8000afe:	701a      	strb	r2, [r3, #0]
    }

    return ;
 8000b00:	bf00      	nop
 8000b02:	bf00      	nop
}
 8000b04:	4618      	mov	r0, r3
 8000b06:	3710      	adds	r7, #16
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	20000fd4 	.word	0x20000fd4
 8000b10:	20000c00 	.word	0x20000c00
 8000b14:	200010d4 	.word	0x200010d4
 8000b18:	20001178 	.word	0x20001178

08000b1c <IOL_State_PreOP_Read_Channel>:

//  OP 모드 Read 인 경우 Channel 별로 프로세스 처리
static uint8_t IOL_State_PreOP_Read_Channel (void)
{
 8000b1c:	b590      	push	{r4, r7, lr}
 8000b1e:	b083      	sub	sp, #12
 8000b20:	af00      	add	r7, sp, #0
    uint8_t i, j = 0;
 8000b22:	2300      	movs	r3, #0
 8000b24:	71bb      	strb	r3, [r7, #6]
    uint8_t IOL_Commchannel_value = 0;
 8000b26:	2300      	movs	r3, #0
 8000b28:	717b      	strb	r3, [r7, #5]
    static uint8_t preop_data_arr[PREOP_DATA_LENGTH + 1] = {0}; // + 1   CKS 

    for (i=0; i < PREOP_DATA_LENGTH; i++)
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	71fb      	strb	r3, [r7, #7]
 8000b2e:	e00e      	b.n	8000b4e <IOL_State_PreOP_Read_Channel+0x32>
    {
        preop_data_arr[i]= IOL_PreOP_Packet[PreOP_seq_cnt][i];
 8000b30:	4b34      	ldr	r3, [pc, #208]	@ (8000c04 <IOL_State_PreOP_Read_Channel+0xe8>)
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	4619      	mov	r1, r3
 8000b36:	79fa      	ldrb	r2, [r7, #7]
 8000b38:	79fb      	ldrb	r3, [r7, #7]
 8000b3a:	4833      	ldr	r0, [pc, #204]	@ (8000c08 <IOL_State_PreOP_Read_Channel+0xec>)
 8000b3c:	00c9      	lsls	r1, r1, #3
 8000b3e:	4401      	add	r1, r0
 8000b40:	440a      	add	r2, r1
 8000b42:	7811      	ldrb	r1, [r2, #0]
 8000b44:	4a31      	ldr	r2, [pc, #196]	@ (8000c0c <IOL_State_PreOP_Read_Channel+0xf0>)
 8000b46:	54d1      	strb	r1, [r2, r3]
    for (i=0; i < PREOP_DATA_LENGTH; i++)
 8000b48:	79fb      	ldrb	r3, [r7, #7]
 8000b4a:	3301      	adds	r3, #1
 8000b4c:	71fb      	strb	r3, [r7, #7]
 8000b4e:	79fb      	ldrb	r3, [r7, #7]
 8000b50:	2b07      	cmp	r3, #7
 8000b52:	d9ed      	bls.n	8000b30 <IOL_State_PreOP_Read_Channel+0x14>
    }

    switch (IOL_M2D_rxpacket.commchannel)
 8000b54:	4b2e      	ldr	r3, [pc, #184]	@ (8000c10 <IOL_State_PreOP_Read_Channel+0xf4>)
 8000b56:	785b      	ldrb	r3, [r3, #1]
 8000b58:	2b03      	cmp	r3, #3
 8000b5a:	d837      	bhi.n	8000bcc <IOL_State_PreOP_Read_Channel+0xb0>
 8000b5c:	a201      	add	r2, pc, #4	@ (adr r2, 8000b64 <IOL_State_PreOP_Read_Channel+0x48>)
 8000b5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b62:	bf00      	nop
 8000b64:	08000b75 	.word	0x08000b75
 8000b68:	08000b8b 	.word	0x08000b8b
 8000b6c:	08000ba1 	.word	0x08000ba1
 8000b70:	08000bb7 	.word	0x08000bb7
    {
        case IOL_Channel_Process :
            preop_data_arr[i] = OP_CKS_GetChecksum(&preop_data_arr[0], PREOP_DATA_LENGTH, 0);
 8000b74:	79fc      	ldrb	r4, [r7, #7]
 8000b76:	2200      	movs	r2, #0
 8000b78:	2108      	movs	r1, #8
 8000b7a:	4824      	ldr	r0, [pc, #144]	@ (8000c0c <IOL_State_PreOP_Read_Channel+0xf0>)
 8000b7c:	f7ff fe2c 	bl	80007d8 <OP_CKS_GetChecksum>
 8000b80:	4603      	mov	r3, r0
 8000b82:	461a      	mov	r2, r3
 8000b84:	4b21      	ldr	r3, [pc, #132]	@ (8000c0c <IOL_State_PreOP_Read_Channel+0xf0>)
 8000b86:	551a      	strb	r2, [r3, r4]
            break;
 8000b88:	e020      	b.n	8000bcc <IOL_State_PreOP_Read_Channel+0xb0>

        case IOL_Channel_Page :
            preop_data_arr[i] = OP_CKS_GetChecksum(&preop_data_arr[0], PREOP_DATA_LENGTH, 0);
 8000b8a:	79fc      	ldrb	r4, [r7, #7]
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	2108      	movs	r1, #8
 8000b90:	481e      	ldr	r0, [pc, #120]	@ (8000c0c <IOL_State_PreOP_Read_Channel+0xf0>)
 8000b92:	f7ff fe21 	bl	80007d8 <OP_CKS_GetChecksum>
 8000b96:	4603      	mov	r3, r0
 8000b98:	461a      	mov	r2, r3
 8000b9a:	4b1c      	ldr	r3, [pc, #112]	@ (8000c0c <IOL_State_PreOP_Read_Channel+0xf0>)
 8000b9c:	551a      	strb	r2, [r3, r4]
            break;
 8000b9e:	e015      	b.n	8000bcc <IOL_State_PreOP_Read_Channel+0xb0>

        case IOL_Channel_Diagnosis :
            preop_data_arr[i] = OP_CKS_GetChecksum(&preop_data_arr[0], PREOP_DATA_LENGTH, 1);
 8000ba0:	79fc      	ldrb	r4, [r7, #7]
 8000ba2:	2201      	movs	r2, #1
 8000ba4:	2108      	movs	r1, #8
 8000ba6:	4819      	ldr	r0, [pc, #100]	@ (8000c0c <IOL_State_PreOP_Read_Channel+0xf0>)
 8000ba8:	f7ff fe16 	bl	80007d8 <OP_CKS_GetChecksum>
 8000bac:	4603      	mov	r3, r0
 8000bae:	461a      	mov	r2, r3
 8000bb0:	4b16      	ldr	r3, [pc, #88]	@ (8000c0c <IOL_State_PreOP_Read_Channel+0xf0>)
 8000bb2:	551a      	strb	r2, [r3, r4]
            break;
 8000bb4:	e00a      	b.n	8000bcc <IOL_State_PreOP_Read_Channel+0xb0>

        case IOL_Channel_ISDU :
            preop_data_arr[i] = OP_CKS_GetChecksum(&preop_data_arr[0], PREOP_DATA_LENGTH, 0);
 8000bb6:	79fc      	ldrb	r4, [r7, #7]
 8000bb8:	2200      	movs	r2, #0
 8000bba:	2108      	movs	r1, #8
 8000bbc:	4813      	ldr	r0, [pc, #76]	@ (8000c0c <IOL_State_PreOP_Read_Channel+0xf0>)
 8000bbe:	f7ff fe0b 	bl	80007d8 <OP_CKS_GetChecksum>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	461a      	mov	r2, r3
 8000bc6:	4b11      	ldr	r3, [pc, #68]	@ (8000c0c <IOL_State_PreOP_Read_Channel+0xf0>)
 8000bc8:	551a      	strb	r2, [r3, r4]
            break;
 8000bca:	bf00      	nop
    }

    PreOP_seq_cnt++;
 8000bcc:	4b0d      	ldr	r3, [pc, #52]	@ (8000c04 <IOL_State_PreOP_Read_Channel+0xe8>)
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	3301      	adds	r3, #1
 8000bd2:	b2da      	uxtb	r2, r3
 8000bd4:	4b0b      	ldr	r3, [pc, #44]	@ (8000c04 <IOL_State_PreOP_Read_Channel+0xe8>)
 8000bd6:	701a      	strb	r2, [r3, #0]

    IOL_ENABLE;
 8000bd8:	2201      	movs	r2, #1
 8000bda:	2140      	movs	r1, #64	@ 0x40
 8000bdc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000be0:	f002 fb24 	bl	800322c <HAL_GPIO_WritePin>
    if (HAL_UART_Transmit_IT(&huart1, preop_data_arr, 9) != HAL_OK)
 8000be4:	2209      	movs	r2, #9
 8000be6:	4909      	ldr	r1, [pc, #36]	@ (8000c0c <IOL_State_PreOP_Read_Channel+0xf0>)
 8000be8:	480a      	ldr	r0, [pc, #40]	@ (8000c14 <IOL_State_PreOP_Read_Channel+0xf8>)
 8000bea:	f005 fdcb 	bl	8006784 <HAL_UART_Transmit_IT>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d001      	beq.n	8000bf8 <IOL_State_PreOP_Read_Channel+0xdc>
    {
        Error_Handler();
 8000bf4:	f000 ff55 	bl	8001aa2 <Error_Handler>
    }

    return ;
 8000bf8:	bf00      	nop
 8000bfa:	bf00      	nop
}
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	370c      	adds	r7, #12
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd90      	pop	{r4, r7, pc}
 8000c04:	200003e5 	.word	0x200003e5
 8000c08:	20000014 	.word	0x20000014
 8000c0c:	200003e8 	.word	0x200003e8
 8000c10:	20000fd4 	.word	0x20000fd4
 8000c14:	200010d4 	.word	0x200010d4

08000c18 <IOL_State_PreOP_Write_Channel>:

//  OP 모드 Write 인 경우 Channel 별로 프로세스 처리
static uint8_t IOL_State_PreOP_Write_Channel (void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
    uint8_t i, j = 0;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	71fb      	strb	r3, [r7, #7]
    uint8_t IOL_Commchannel_value = 0;
 8000c22:	2300      	movs	r3, #0
 8000c24:	71bb      	strb	r3, [r7, #6]
    static uint8_t preop_data_arr[PREOP_DATA_LENGTH + 1] = {0}; // + 1   CKS 

    switch (IOL_M2D_rxpacket.commchannel)
 8000c26:	4b2a      	ldr	r3, [pc, #168]	@ (8000cd0 <IOL_State_PreOP_Write_Channel+0xb8>)
 8000c28:	785b      	ldrb	r3, [r3, #1]
 8000c2a:	2b03      	cmp	r3, #3
 8000c2c:	d832      	bhi.n	8000c94 <IOL_State_PreOP_Write_Channel+0x7c>
 8000c2e:	a201      	add	r2, pc, #4	@ (adr r2, 8000c34 <IOL_State_PreOP_Write_Channel+0x1c>)
 8000c30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c34:	08000c45 	.word	0x08000c45
 8000c38:	08000c59 	.word	0x08000c59
 8000c3c:	08000c6d 	.word	0x08000c6d
 8000c40:	08000c81 	.word	0x08000c81
    {
        case IOL_Channel_Process :
            preop_data_arr[0] = OP_CKS_GetChecksum(&preop_data_arr[0], 0, 0);
 8000c44:	2200      	movs	r2, #0
 8000c46:	2100      	movs	r1, #0
 8000c48:	4822      	ldr	r0, [pc, #136]	@ (8000cd4 <IOL_State_PreOP_Write_Channel+0xbc>)
 8000c4a:	f7ff fdc5 	bl	80007d8 <OP_CKS_GetChecksum>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	461a      	mov	r2, r3
 8000c52:	4b20      	ldr	r3, [pc, #128]	@ (8000cd4 <IOL_State_PreOP_Write_Channel+0xbc>)
 8000c54:	701a      	strb	r2, [r3, #0]
            break;
 8000c56:	e01d      	b.n	8000c94 <IOL_State_PreOP_Write_Channel+0x7c>

        case IOL_Channel_Page :
            preop_data_arr[0] = OP_CKS_GetChecksum(&preop_data_arr[0], 0, 0);
 8000c58:	2200      	movs	r2, #0
 8000c5a:	2100      	movs	r1, #0
 8000c5c:	481d      	ldr	r0, [pc, #116]	@ (8000cd4 <IOL_State_PreOP_Write_Channel+0xbc>)
 8000c5e:	f7ff fdbb 	bl	80007d8 <OP_CKS_GetChecksum>
 8000c62:	4603      	mov	r3, r0
 8000c64:	461a      	mov	r2, r3
 8000c66:	4b1b      	ldr	r3, [pc, #108]	@ (8000cd4 <IOL_State_PreOP_Write_Channel+0xbc>)
 8000c68:	701a      	strb	r2, [r3, #0]
            break;
 8000c6a:	e013      	b.n	8000c94 <IOL_State_PreOP_Write_Channel+0x7c>

        case IOL_Channel_Diagnosis :
            preop_data_arr[0] = OP_CKS_GetChecksum(&preop_data_arr[0], 0, 1);
 8000c6c:	2201      	movs	r2, #1
 8000c6e:	2100      	movs	r1, #0
 8000c70:	4818      	ldr	r0, [pc, #96]	@ (8000cd4 <IOL_State_PreOP_Write_Channel+0xbc>)
 8000c72:	f7ff fdb1 	bl	80007d8 <OP_CKS_GetChecksum>
 8000c76:	4603      	mov	r3, r0
 8000c78:	461a      	mov	r2, r3
 8000c7a:	4b16      	ldr	r3, [pc, #88]	@ (8000cd4 <IOL_State_PreOP_Write_Channel+0xbc>)
 8000c7c:	701a      	strb	r2, [r3, #0]
            break;
 8000c7e:	e009      	b.n	8000c94 <IOL_State_PreOP_Write_Channel+0x7c>

        case IOL_Channel_ISDU :
            preop_data_arr[0] = OP_CKS_GetChecksum(&preop_data_arr[0], 0, 1);
 8000c80:	2201      	movs	r2, #1
 8000c82:	2100      	movs	r1, #0
 8000c84:	4813      	ldr	r0, [pc, #76]	@ (8000cd4 <IOL_State_PreOP_Write_Channel+0xbc>)
 8000c86:	f7ff fda7 	bl	80007d8 <OP_CKS_GetChecksum>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	461a      	mov	r2, r3
 8000c8e:	4b11      	ldr	r3, [pc, #68]	@ (8000cd4 <IOL_State_PreOP_Write_Channel+0xbc>)
 8000c90:	701a      	strb	r2, [r3, #0]
            break;
 8000c92:	bf00      	nop
    }

    //Master Command to OP.
    if(uart1_rx_IDLE_buf[2] == 0x99)
 8000c94:	4b10      	ldr	r3, [pc, #64]	@ (8000cd8 <IOL_State_PreOP_Write_Channel+0xc0>)
 8000c96:	789b      	ldrb	r3, [r3, #2]
 8000c98:	2b99      	cmp	r3, #153	@ 0x99
 8000c9a:	d102      	bne.n	8000ca2 <IOL_State_PreOP_Write_Channel+0x8a>
    {
        stateIOLseq = IOL_OP;
 8000c9c:	4b0f      	ldr	r3, [pc, #60]	@ (8000cdc <IOL_State_PreOP_Write_Channel+0xc4>)
 8000c9e:	2202      	movs	r2, #2
 8000ca0:	701a      	strb	r2, [r3, #0]
    }
    
    IOL_ENABLE;
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	2140      	movs	r1, #64	@ 0x40
 8000ca6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000caa:	f002 fabf 	bl	800322c <HAL_GPIO_WritePin>
    if (HAL_UART_Transmit_IT(&huart1, (uint8_t *) preop_data_arr, 1) != HAL_OK)
 8000cae:	2201      	movs	r2, #1
 8000cb0:	4908      	ldr	r1, [pc, #32]	@ (8000cd4 <IOL_State_PreOP_Write_Channel+0xbc>)
 8000cb2:	480b      	ldr	r0, [pc, #44]	@ (8000ce0 <IOL_State_PreOP_Write_Channel+0xc8>)
 8000cb4:	f005 fd66 	bl	8006784 <HAL_UART_Transmit_IT>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <IOL_State_PreOP_Write_Channel+0xaa>
    {
        Error_Handler();
 8000cbe:	f000 fef0 	bl	8001aa2 <Error_Handler>
    }
    return ;
 8000cc2:	bf00      	nop
 8000cc4:	bf00      	nop
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	3708      	adds	r7, #8
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	20000fd4 	.word	0x20000fd4
 8000cd4:	200003f4 	.word	0x200003f4
 8000cd8:	20000c00 	.word	0x20000c00
 8000cdc:	20001178 	.word	0x20001178
 8000ce0:	200010d4 	.word	0x200010d4

08000ce4 <IOL_State_PreOP_Process>:

static uint8_t IOL_State_PreOP_Process (void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0

    switch ( IOL_M2D_rxpacket.rw)
 8000ce8:	4b07      	ldr	r3, [pc, #28]	@ (8000d08 <IOL_State_PreOP_Process+0x24>)
 8000cea:	781b      	ldrb	r3, [r3, #0]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d004      	beq.n	8000cfa <IOL_State_PreOP_Process+0x16>
 8000cf0:	2b01      	cmp	r3, #1
 8000cf2:	d105      	bne.n	8000d00 <IOL_State_PreOP_Process+0x1c>
    {
        case IOL_RW_Read :
            IOL_State_PreOP_Read_Channel();
 8000cf4:	f7ff ff12 	bl	8000b1c <IOL_State_PreOP_Read_Channel>
            break;
 8000cf8:	e002      	b.n	8000d00 <IOL_State_PreOP_Process+0x1c>
        case IOL_RW_Write :
            IOL_State_PreOP_Write_Channel();
 8000cfa:	f7ff ff8d 	bl	8000c18 <IOL_State_PreOP_Write_Channel>
            break;
 8000cfe:	bf00      	nop
    }

    return ;
 8000d00:	bf00      	nop
 8000d02:	bf00      	nop
}
 8000d04:	4618      	mov	r0, r3
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	20000fd4 	.word	0x20000fd4

08000d0c <IOL_State_OP_Read_Channel>:


//  OP 모드 Read 인 경우 Channel 별로 프로세스 처리
static uint8_t IOL_State_OP_Read_Channel (void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
    switch (IOL_M2D_rxpacket.commchannel)
 8000d10:	4b0d      	ldr	r3, [pc, #52]	@ (8000d48 <IOL_State_OP_Read_Channel+0x3c>)
 8000d12:	785b      	ldrb	r3, [r3, #1]
 8000d14:	2b03      	cmp	r3, #3
 8000d16:	d812      	bhi.n	8000d3e <IOL_State_OP_Read_Channel+0x32>
 8000d18:	a201      	add	r2, pc, #4	@ (adr r2, 8000d20 <IOL_State_OP_Read_Channel+0x14>)
 8000d1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d1e:	bf00      	nop
 8000d20:	08000d3d 	.word	0x08000d3d
 8000d24:	08000d31 	.word	0x08000d31
 8000d28:	08000d3d 	.word	0x08000d3d
 8000d2c:	08000d37 	.word	0x08000d37
        case IOL_Channel_Process :
            
            break;

        case IOL_Channel_Page :
            IOL_State_OP_Page_ReadProcess();
 8000d30:	f000 fcf8 	bl	8001724 <IOL_State_OP_Page_ReadProcess>

            break;
 8000d34:	e003      	b.n	8000d3e <IOL_State_OP_Read_Channel+0x32>
            

            break;

        case IOL_Channel_ISDU :
            IOL_State_OP_ISDU_ReadProcess();
 8000d36:	f000 fbd5 	bl	80014e4 <IOL_State_OP_ISDU_ReadProcess>

            break;
 8000d3a:	e000      	b.n	8000d3e <IOL_State_OP_Read_Channel+0x32>
            break;
 8000d3c:	bf00      	nop
    }

    return ;
 8000d3e:	bf00      	nop
 8000d40:	bf00      	nop
}
 8000d42:	4618      	mov	r0, r3
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	20000fd4 	.word	0x20000fd4

08000d4c <IOL_State_OP_Write_Channel>:

//  OP 모드 Write 인 경우 Channel 별로 프로세스 처리
static uint8_t IOL_State_OP_Write_Channel (void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
    switch (IOL_M2D_rxpacket.commchannel)
 8000d50:	4b0e      	ldr	r3, [pc, #56]	@ (8000d8c <IOL_State_OP_Write_Channel+0x40>)
 8000d52:	785b      	ldrb	r3, [r3, #1]
 8000d54:	2b03      	cmp	r3, #3
 8000d56:	d815      	bhi.n	8000d84 <IOL_State_OP_Write_Channel+0x38>
 8000d58:	a201      	add	r2, pc, #4	@ (adr r2, 8000d60 <IOL_State_OP_Write_Channel+0x14>)
 8000d5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d5e:	bf00      	nop
 8000d60:	08000d83 	.word	0x08000d83
 8000d64:	08000d71 	.word	0x08000d71
 8000d68:	08000d83 	.word	0x08000d83
 8000d6c:	08000d77 	.word	0x08000d77
            
            
            break;

        case IOL_Channel_Page :
            IOL_State_OP_Page_WriteProcess();
 8000d70:	f000 fd22 	bl	80017b8 <IOL_State_OP_Page_WriteProcess>

            break;
 8000d74:	e006      	b.n	8000d84 <IOL_State_OP_Write_Channel+0x38>
            

            break;

        case IOL_Channel_ISDU :
            IOL_Get_ISDU_WR_ODArr(uart1_rx_IDLE_buf);
 8000d76:	4806      	ldr	r0, [pc, #24]	@ (8000d90 <IOL_State_OP_Write_Channel+0x44>)
 8000d78:	f000 f928 	bl	8000fcc <IOL_Get_ISDU_WR_ODArr>
            IOL_State_OP_ISDU_WriteProcess();
 8000d7c:	f000 fc6c 	bl	8001658 <IOL_State_OP_ISDU_WriteProcess>

            break;
 8000d80:	e000      	b.n	8000d84 <IOL_State_OP_Write_Channel+0x38>
            break;
 8000d82:	bf00      	nop
    }

    return ;
 8000d84:	bf00      	nop
 8000d86:	bf00      	nop
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	20000fd4 	.word	0x20000fd4
 8000d90:	20000c00 	.word	0x20000c00

08000d94 <IOL_State_OP_Process>:

static uint8_t IOL_State_OP_Process (void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
    switch ( IOL_M2D_rxpacket.rw)
 8000d98:	4b07      	ldr	r3, [pc, #28]	@ (8000db8 <IOL_State_OP_Process+0x24>)
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d004      	beq.n	8000daa <IOL_State_OP_Process+0x16>
 8000da0:	2b01      	cmp	r3, #1
 8000da2:	d105      	bne.n	8000db0 <IOL_State_OP_Process+0x1c>
    {
        case IOL_RW_Read :
            IOL_State_OP_Read_Channel();
 8000da4:	f7ff ffb2 	bl	8000d0c <IOL_State_OP_Read_Channel>
            break;
 8000da8:	e002      	b.n	8000db0 <IOL_State_OP_Process+0x1c>
        case IOL_RW_Write :
            IOL_State_OP_Write_Channel();
 8000daa:	f7ff ffcf 	bl	8000d4c <IOL_State_OP_Write_Channel>
            break;
 8000dae:	bf00      	nop
    }

    return ;
 8000db0:	bf00      	nop
 8000db2:	bf00      	nop
}
 8000db4:	4618      	mov	r0, r3
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	20000fd4 	.word	0x20000fd4

08000dbc <IOL_StateM_Process>:

uint8_t IOL_StateM_Process (void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
    switch (stateIOLseq)
 8000dc0:	4b0d      	ldr	r3, [pc, #52]	@ (8000df8 <IOL_StateM_Process+0x3c>)
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	2b02      	cmp	r3, #2
 8000dc6:	d00c      	beq.n	8000de2 <IOL_StateM_Process+0x26>
 8000dc8:	2b02      	cmp	r3, #2
 8000dca:	dc0d      	bgt.n	8000de8 <IOL_StateM_Process+0x2c>
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d002      	beq.n	8000dd6 <IOL_StateM_Process+0x1a>
 8000dd0:	2b01      	cmp	r3, #1
 8000dd2:	d003      	beq.n	8000ddc <IOL_StateM_Process+0x20>
 8000dd4:	e008      	b.n	8000de8 <IOL_StateM_Process+0x2c>
    {
        case IOL_StartUp :
            IOL_State_StartUp();
 8000dd6:	f7ff fe5f 	bl	8000a98 <IOL_State_StartUp>
            break;
 8000dda:	e005      	b.n	8000de8 <IOL_StateM_Process+0x2c>
        case IOL_PreOP :
            IOL_State_PreOP_Process();
 8000ddc:	f7ff ff82 	bl	8000ce4 <IOL_State_PreOP_Process>
            break;
 8000de0:	e002      	b.n	8000de8 <IOL_StateM_Process+0x2c>
        case IOL_OP :
            // IOL_Get_ISDU_WR_ODArr(uart1_rx_IDLE_buf);
            IOL_State_OP_Process();
 8000de2:	f7ff ffd7 	bl	8000d94 <IOL_State_OP_Process>
            break;
 8000de6:	bf00      	nop
    }
    #if 1 // debug Test 
    Test_M2D_TempValue = uart1_rx_IDLE_buf[3];
 8000de8:	4b04      	ldr	r3, [pc, #16]	@ (8000dfc <IOL_StateM_Process+0x40>)
 8000dea:	78da      	ldrb	r2, [r3, #3]
 8000dec:	4b04      	ldr	r3, [pc, #16]	@ (8000e00 <IOL_StateM_Process+0x44>)
 8000dee:	701a      	strb	r2, [r3, #0]
    #endif
    return ;
 8000df0:	bf00      	nop
 8000df2:	bf00      	nop
}
 8000df4:	4618      	mov	r0, r3
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	20001178 	.word	0x20001178
 8000dfc:	20000c00 	.word	0x20000c00
 8000e00:	20000c64 	.word	0x20000c64

08000e04 <IOL_Parse_Rx_data>:

// 마스터로부터 받은 데이터를 분석하기 위해 파싱하여 해당 구조체멤버에 넣어줌
uint8_t IOL_Parse_Rx_data (uint8_t * pData)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
    IOL_M2D_rxpacket.rw = Decode_MC_ReadWrite(*pData);
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	4618      	mov	r0, r3
 8000e12:	f7ff fbcd 	bl	80005b0 <Decode_MC_ReadWrite>
 8000e16:	4603      	mov	r3, r0
 8000e18:	461a      	mov	r2, r3
 8000e1a:	4b17      	ldr	r3, [pc, #92]	@ (8000e78 <IOL_Parse_Rx_data+0x74>)
 8000e1c:	701a      	strb	r2, [r3, #0]
    IOL_M2D_rxpacket.commchannel = Decode_MC_CommunicationChannel(*pData);
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	781b      	ldrb	r3, [r3, #0]
 8000e22:	4618      	mov	r0, r3
 8000e24:	f7ff fbe2 	bl	80005ec <Decode_MC_CommunicationChannel>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	461a      	mov	r2, r3
 8000e2c:	4b12      	ldr	r3, [pc, #72]	@ (8000e78 <IOL_Parse_Rx_data+0x74>)
 8000e2e:	705a      	strb	r2, [r3, #1]
    IOL_M2D_rxpacket.addr = Decode_MC_Address(*pData);
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	4618      	mov	r0, r3
 8000e36:	f7ff fc05 	bl	8000644 <Decode_MC_Address>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	461a      	mov	r2, r3
 8000e3e:	4b0e      	ldr	r3, [pc, #56]	@ (8000e78 <IOL_Parse_Rx_data+0x74>)
 8000e40:	709a      	strb	r2, [r3, #2]

    IOL_M2D_rxpacket.mseqtype = Decode_CKT_Type(*(++pData));
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	3301      	adds	r3, #1
 8000e46:	607b      	str	r3, [r7, #4]
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	781b      	ldrb	r3, [r3, #0]
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f7ff fc0c 	bl	800066a <Decode_CKT_Type>
 8000e52:	4603      	mov	r3, r0
 8000e54:	461a      	mov	r2, r3
 8000e56:	4b08      	ldr	r3, [pc, #32]	@ (8000e78 <IOL_Parse_Rx_data+0x74>)
 8000e58:	70da      	strb	r2, [r3, #3]
    IOL_M2D_rxpacket.ckt = Decode_CKT_Checksum(*pData);
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	781b      	ldrb	r3, [r3, #0]
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f7ff fc15 	bl	800068e <Decode_CKT_Checksum>
 8000e64:	4603      	mov	r3, r0
 8000e66:	461a      	mov	r2, r3
 8000e68:	4b03      	ldr	r3, [pc, #12]	@ (8000e78 <IOL_Parse_Rx_data+0x74>)
 8000e6a:	711a      	strb	r2, [r3, #4]

    return 0;
 8000e6c:	2300      	movs	r3, #0
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	3708      	adds	r7, #8
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	20000fd4 	.word	0x20000fd4

08000e7c <IOL_Print_ParsingM2Ddata>:

void IOL_Print_ParsingM2Ddata (void)
{
 8000e7c:	b590      	push	{r4, r7, lr}
 8000e7e:	b083      	sub	sp, #12
 8000e80:	af02      	add	r7, sp, #8
    printf("M2D Rx Data Parsing :  %02X, %02X, %02X, %02X, %02X\r\n", IOL_M2D_rxpacket.rw
 8000e82:	4b0f      	ldr	r3, [pc, #60]	@ (8000ec0 <IOL_Print_ParsingM2Ddata+0x44>)
 8000e84:	781b      	ldrb	r3, [r3, #0]
 8000e86:	4619      	mov	r1, r3
                                                                    , IOL_M2D_rxpacket.commchannel
 8000e88:	4b0d      	ldr	r3, [pc, #52]	@ (8000ec0 <IOL_Print_ParsingM2Ddata+0x44>)
 8000e8a:	785b      	ldrb	r3, [r3, #1]
    printf("M2D Rx Data Parsing :  %02X, %02X, %02X, %02X, %02X\r\n", IOL_M2D_rxpacket.rw
 8000e8c:	4618      	mov	r0, r3
                                                                    , IOL_M2D_rxpacket.addr
 8000e8e:	4b0c      	ldr	r3, [pc, #48]	@ (8000ec0 <IOL_Print_ParsingM2Ddata+0x44>)
 8000e90:	789b      	ldrb	r3, [r3, #2]
    printf("M2D Rx Data Parsing :  %02X, %02X, %02X, %02X, %02X\r\n", IOL_M2D_rxpacket.rw
 8000e92:	461c      	mov	r4, r3
                                                                    , IOL_M2D_rxpacket.mseqtype
 8000e94:	4b0a      	ldr	r3, [pc, #40]	@ (8000ec0 <IOL_Print_ParsingM2Ddata+0x44>)
 8000e96:	78db      	ldrb	r3, [r3, #3]
    printf("M2D Rx Data Parsing :  %02X, %02X, %02X, %02X, %02X\r\n", IOL_M2D_rxpacket.rw
 8000e98:	461a      	mov	r2, r3
                                                                    , IOL_M2D_rxpacket.ckt);
 8000e9a:	4b09      	ldr	r3, [pc, #36]	@ (8000ec0 <IOL_Print_ParsingM2Ddata+0x44>)
 8000e9c:	791b      	ldrb	r3, [r3, #4]
    printf("M2D Rx Data Parsing :  %02X, %02X, %02X, %02X, %02X\r\n", IOL_M2D_rxpacket.rw
 8000e9e:	9301      	str	r3, [sp, #4]
 8000ea0:	9200      	str	r2, [sp, #0]
 8000ea2:	4623      	mov	r3, r4
 8000ea4:	4602      	mov	r2, r0
 8000ea6:	4807      	ldr	r0, [pc, #28]	@ (8000ec4 <IOL_Print_ParsingM2Ddata+0x48>)
 8000ea8:	f00b fb3a 	bl	800c520 <iprintf>

    printf("Device State : %d\r\n", stateIOLseq);
 8000eac:	4b06      	ldr	r3, [pc, #24]	@ (8000ec8 <IOL_Print_ParsingM2Ddata+0x4c>)
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	4806      	ldr	r0, [pc, #24]	@ (8000ecc <IOL_Print_ParsingM2Ddata+0x50>)
 8000eb4:	f00b fb34 	bl	800c520 <iprintf>
}
 8000eb8:	bf00      	nop
 8000eba:	3704      	adds	r7, #4
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd90      	pop	{r4, r7, pc}
 8000ec0:	20000fd4 	.word	0x20000fd4
 8000ec4:	0800d2ec 	.word	0x0800d2ec
 8000ec8:	20001178 	.word	0x20001178
 8000ecc:	0800d324 	.word	0x0800d324

08000ed0 <IOL_Get_ISDU_Iservice>:
    {0xbd, 0x00},
};

//IO-Link ISDU 의 Iservice
static uint8_t IOL_Get_ISDU_Iservice (uint8_t * pData)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b085      	sub	sp, #20
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
    uint8_t first_od = 0;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	73fb      	strb	r3, [r7, #15]
    // IOL_ISDUPacket_t isdudata;

    first_od = pData[IOL_OP_ISDU_IN_PROCESSDATALENGTH - 1];
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	799b      	ldrb	r3, [r3, #6]
 8000ee0:	73fb      	strb	r3, [r7, #15]
    first_od = (first_od >> 4 ) & 0x0F;
 8000ee2:	7bfb      	ldrb	r3, [r7, #15]
 8000ee4:	091b      	lsrs	r3, r3, #4
 8000ee6:	73fb      	strb	r3, [r7, #15]

    isdudata.iservice = first_od;
 8000ee8:	4a05      	ldr	r2, [pc, #20]	@ (8000f00 <IOL_Get_ISDU_Iservice+0x30>)
 8000eea:	7bfb      	ldrb	r3, [r7, #15]
 8000eec:	7013      	strb	r3, [r2, #0]
  
    return isdudata.iservice;
 8000eee:	4b04      	ldr	r3, [pc, #16]	@ (8000f00 <IOL_Get_ISDU_Iservice+0x30>)
 8000ef0:	781b      	ldrb	r3, [r3, #0]
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	3714      	adds	r7, #20
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop
 8000f00:	20000fec 	.word	0x20000fec

08000f04 <IOL_Get_ISDU_ExtLength>:

// IO-lInk ISDU 의 extLength 
static uint8_t IOL_Get_ISDU_ExtLength (uint8_t * pData)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b085      	sub	sp, #20
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
    uint8_t od_extlength = 0;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	73fb      	strb	r3, [r7, #15]

    od_extlength = pData[IOL_OP_ISDU_IN_PROCESSDATALENGTH];
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	79db      	ldrb	r3, [r3, #7]
 8000f14:	73fb      	strb	r3, [r7, #15]
    
    return od_extlength;
 8000f16:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f18:	4618      	mov	r0, r3
 8000f1a:	3714      	adds	r7, #20
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr

08000f24 <IOL_Get_ISDU_Length>:

// IO-Link ISDU 의 Length
static uint8_t IOL_Get_ISDU_Length (uint8_t * pData)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b084      	sub	sp, #16
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
    uint8_t first_od = 0;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	73fb      	strb	r3, [r7, #15]
    uint8_t extlength = 0;
 8000f30:	2300      	movs	r3, #0
 8000f32:	73bb      	strb	r3, [r7, #14]
    // IOL_ISDUPacket_t isdudata;

    first_od = pData[IOL_OP_ISDU_IN_PROCESSDATALENGTH - 1];
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	799b      	ldrb	r3, [r3, #6]
 8000f38:	73fb      	strb	r3, [r7, #15]
    extlength = first_od & 0x0F;
 8000f3a:	7bfb      	ldrb	r3, [r7, #15]
 8000f3c:	f003 030f 	and.w	r3, r3, #15
 8000f40:	73bb      	strb	r3, [r7, #14]

    // extlength 있는 경우
    if (extlength == 1)
 8000f42:	7bbb      	ldrb	r3, [r7, #14]
 8000f44:	2b01      	cmp	r3, #1
 8000f46:	d10b      	bne.n	8000f60 <IOL_Get_ISDU_Length+0x3c>
    {
        extlength_flag = 1;
 8000f48:	4b0a      	ldr	r3, [pc, #40]	@ (8000f74 <IOL_Get_ISDU_Length+0x50>)
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	701a      	strb	r2, [r3, #0]
        extlength = IOL_Get_ISDU_ExtLength(pData);
 8000f4e:	6878      	ldr	r0, [r7, #4]
 8000f50:	f7ff ffd8 	bl	8000f04 <IOL_Get_ISDU_ExtLength>
 8000f54:	4603      	mov	r3, r0
 8000f56:	73bb      	strb	r3, [r7, #14]
        isdudata.length = extlength;
 8000f58:	4a07      	ldr	r2, [pc, #28]	@ (8000f78 <IOL_Get_ISDU_Length+0x54>)
 8000f5a:	7bbb      	ldrb	r3, [r7, #14]
 8000f5c:	7053      	strb	r3, [r2, #1]
 8000f5e:	e002      	b.n	8000f66 <IOL_Get_ISDU_Length+0x42>
    }
    else // extlegnth 없는 경우
    {
        isdudata.length = extlength;
 8000f60:	4a05      	ldr	r2, [pc, #20]	@ (8000f78 <IOL_Get_ISDU_Length+0x54>)
 8000f62:	7bbb      	ldrb	r3, [r7, #14]
 8000f64:	7053      	strb	r3, [r2, #1]
    }

    return isdudata.length;
 8000f66:	4b04      	ldr	r3, [pc, #16]	@ (8000f78 <IOL_Get_ISDU_Length+0x54>)
 8000f68:	785b      	ldrb	r3, [r3, #1]
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	3710      	adds	r7, #16
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	200003fd 	.word	0x200003fd
 8000f78:	20000fec 	.word	0x20000fec

08000f7c <IOL_Get_ISDU_Index>:

static uint8_t IOL_Get_ISDU_Index (uint8_t * pData)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b083      	sub	sp, #12
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
    //extlegnth 있는 경우
    if (extlength_flag == 1)
 8000f84:	4b0f      	ldr	r3, [pc, #60]	@ (8000fc4 <IOL_Get_ISDU_Index+0x48>)
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	2b01      	cmp	r3, #1
 8000f8a:	d107      	bne.n	8000f9c <IOL_Get_ISDU_Index+0x20>
    {
        isdudata.index = isdudata.isdu_od[2];
 8000f8c:	4b0e      	ldr	r3, [pc, #56]	@ (8000fc8 <IOL_Get_ISDU_Index+0x4c>)
 8000f8e:	79da      	ldrb	r2, [r3, #7]
 8000f90:	4b0d      	ldr	r3, [pc, #52]	@ (8000fc8 <IOL_Get_ISDU_Index+0x4c>)
 8000f92:	709a      	strb	r2, [r3, #2]
        extlength_flag = 0;
 8000f94:	4b0b      	ldr	r3, [pc, #44]	@ (8000fc4 <IOL_Get_ISDU_Index+0x48>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	701a      	strb	r2, [r3, #0]
 8000f9a:	e003      	b.n	8000fa4 <IOL_Get_ISDU_Index+0x28>
    }
    else // extlength 없는 경우
    {
        isdudata.index = isdudata.isdu_od[1];
 8000f9c:	4b0a      	ldr	r3, [pc, #40]	@ (8000fc8 <IOL_Get_ISDU_Index+0x4c>)
 8000f9e:	799a      	ldrb	r2, [r3, #6]
 8000fa0:	4b09      	ldr	r3, [pc, #36]	@ (8000fc8 <IOL_Get_ISDU_Index+0x4c>)
 8000fa2:	709a      	strb	r2, [r3, #2]
    }

    // 마스터에서 8bit index 쓰기 요청이 있는 경우
    if(isdudata.iservice == 0x01)
 8000fa4:	4b08      	ldr	r3, [pc, #32]	@ (8000fc8 <IOL_Get_ISDU_Index+0x4c>)
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	2b01      	cmp	r3, #1
 8000faa:	d103      	bne.n	8000fb4 <IOL_Get_ISDU_Index+0x38>
    {
        // 8bit 쓰기 요청 플래그 셋
        isdudata.isdu_od_writeReq8bit_flag = 1;
 8000fac:	4b06      	ldr	r3, [pc, #24]	@ (8000fc8 <IOL_Get_ISDU_Index+0x4c>)
 8000fae:	2201      	movs	r2, #1
 8000fb0:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
    }

    return isdudata.index;
 8000fb4:	4b04      	ldr	r3, [pc, #16]	@ (8000fc8 <IOL_Get_ISDU_Index+0x4c>)
 8000fb6:	789b      	ldrb	r3, [r3, #2]
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	370c      	adds	r7, #12
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr
 8000fc4:	200003fd 	.word	0x200003fd
 8000fc8:	20000fec 	.word	0x20000fec

08000fcc <IOL_Get_ISDU_WR_ODArr>:

// ISDU Write OD 데이터 수신 처리
uint8_t IOL_Get_ISDU_WR_ODArr (uint8_t * pData)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
    
    isdudata.isdu_od[isdudata.isdu_od_cnt++] = pData[IOL_OP_ISDU_IN_PROCESSDATALENGTH - 1];
 8000fd4:	4b20      	ldr	r3, [pc, #128]	@ (8001058 <IOL_Get_ISDU_WR_ODArr+0x8c>)
 8000fd6:	f893 3037 	ldrb.w	r3, [r3, #55]	@ 0x37
 8000fda:	1c5a      	adds	r2, r3, #1
 8000fdc:	b2d1      	uxtb	r1, r2
 8000fde:	4a1e      	ldr	r2, [pc, #120]	@ (8001058 <IOL_Get_ISDU_WR_ODArr+0x8c>)
 8000fe0:	f882 1037 	strb.w	r1, [r2, #55]	@ 0x37
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	799a      	ldrb	r2, [r3, #6]
 8000fea:	4b1b      	ldr	r3, [pc, #108]	@ (8001058 <IOL_Get_ISDU_WR_ODArr+0x8c>)
 8000fec:	440b      	add	r3, r1
 8000fee:	715a      	strb	r2, [r3, #5]
    isdudata.isdu_od[isdudata.isdu_od_cnt++] = pData[IOL_OP_ISDU_IN_PROCESSDATALENGTH];
 8000ff0:	4b19      	ldr	r3, [pc, #100]	@ (8001058 <IOL_Get_ISDU_WR_ODArr+0x8c>)
 8000ff2:	f893 3037 	ldrb.w	r3, [r3, #55]	@ 0x37
 8000ff6:	1c5a      	adds	r2, r3, #1
 8000ff8:	b2d1      	uxtb	r1, r2
 8000ffa:	4a17      	ldr	r2, [pc, #92]	@ (8001058 <IOL_Get_ISDU_WR_ODArr+0x8c>)
 8000ffc:	f882 1037 	strb.w	r1, [r2, #55]	@ 0x37
 8001000:	4619      	mov	r1, r3
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	79da      	ldrb	r2, [r3, #7]
 8001006:	4b14      	ldr	r3, [pc, #80]	@ (8001058 <IOL_Get_ISDU_WR_ODArr+0x8c>)
 8001008:	440b      	add	r3, r1
 800100a:	715a      	strb	r2, [r3, #5]
    
    // 첫 OD 데이터 수신시 Iservice값과 ISDU의 데이터 길이를 구하기 위함.
    if (isdudata.isdu_od_cnt == 2)
 800100c:	4b12      	ldr	r3, [pc, #72]	@ (8001058 <IOL_Get_ISDU_WR_ODArr+0x8c>)
 800100e:	f893 3037 	ldrb.w	r3, [r3, #55]	@ 0x37
 8001012:	2b02      	cmp	r3, #2
 8001014:	d105      	bne.n	8001022 <IOL_Get_ISDU_WR_ODArr+0x56>
    {
        IOL_Get_ISDU_Iservice(pData);
 8001016:	6878      	ldr	r0, [r7, #4]
 8001018:	f7ff ff5a 	bl	8000ed0 <IOL_Get_ISDU_Iservice>
        IOL_Get_ISDU_Length(pData);
 800101c:	6878      	ldr	r0, [r7, #4]
 800101e:	f7ff ff81 	bl	8000f24 <IOL_Get_ISDU_Length>
    }

    // OD 데이터의 길이까지 데이터 쌓은 경우.
    if (isdudata.isdu_od_cnt >= isdudata.length)
 8001022:	4b0d      	ldr	r3, [pc, #52]	@ (8001058 <IOL_Get_ISDU_WR_ODArr+0x8c>)
 8001024:	f893 2037 	ldrb.w	r2, [r3, #55]	@ 0x37
 8001028:	4b0b      	ldr	r3, [pc, #44]	@ (8001058 <IOL_Get_ISDU_WR_ODArr+0x8c>)
 800102a:	785b      	ldrb	r3, [r3, #1]
 800102c:	429a      	cmp	r2, r3
 800102e:	d30d      	bcc.n	800104c <IOL_Get_ISDU_WR_ODArr+0x80>
    {
        IOL_Get_ISDU_Index(pData);
 8001030:	6878      	ldr	r0, [r7, #4]
 8001032:	f7ff ffa3 	bl	8000f7c <IOL_Get_ISDU_Index>

        isdudata.length = 0;
 8001036:	4b08      	ldr	r3, [pc, #32]	@ (8001058 <IOL_Get_ISDU_WR_ODArr+0x8c>)
 8001038:	2200      	movs	r2, #0
 800103a:	705a      	strb	r2, [r3, #1]
        isdudata.isdu_od_cnt = 0; // od length clear
 800103c:	4b06      	ldr	r3, [pc, #24]	@ (8001058 <IOL_Get_ISDU_WR_ODArr+0x8c>)
 800103e:	2200      	movs	r2, #0
 8001040:	f883 2037 	strb.w	r2, [r3, #55]	@ 0x37
        isdudata.isdu_od_rxcplt = 1;
 8001044:	4b04      	ldr	r3, [pc, #16]	@ (8001058 <IOL_Get_ISDU_WR_ODArr+0x8c>)
 8001046:	2201      	movs	r2, #1
 8001048:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    }

    return ;
 800104c:	bf00      	nop
 800104e:	bf00      	nop
}
 8001050:	4618      	mov	r0, r3
 8001052:	3708      	adds	r7, #8
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}
 8001058:	20000fec 	.word	0x20000fec

0800105c <IOL_Clear_PDBuffer>:

    return ;
}

void IOL_Clear_PDBuffer (void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
    memset(device_ProcessDataIn_Arr, 0, sizeof(device_ProcessDataIn_Arr));
 8001060:	2207      	movs	r2, #7
 8001062:	2100      	movs	r1, #0
 8001064:	4804      	ldr	r0, [pc, #16]	@ (8001078 <IOL_Clear_PDBuffer+0x1c>)
 8001066:	f00b fba3 	bl	800c7b0 <memset>
    memset(device_ProcessDataOut_Arr, 0, sizeof(device_ProcessDataOut_Arr));
 800106a:	2205      	movs	r2, #5
 800106c:	2100      	movs	r1, #0
 800106e:	4803      	ldr	r0, [pc, #12]	@ (800107c <IOL_Clear_PDBuffer+0x20>)
 8001070:	f00b fb9e 	bl	800c7b0 <memset>
}
 8001074:	bf00      	nop
 8001076:	bd80      	pop	{r7, pc}
 8001078:	20000fe4 	.word	0x20000fe4
 800107c:	20000fdc 	.word	0x20000fdc

08001080 <IOL_Make_Resp_ProductName>:

static void IOL_Make_Resp_ProductName (void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
    device_ProcessDataIn_Arr[0] = IOL_OP_ProductName[IOL_OP_ISDU_OD_Res_cnt][0];   // OD 데이터를  Index에 대한 응답 ISDU 구조의 사이즈에 맞게 나눠서 보내기 위함  
 8001084:	4b15      	ldr	r3, [pc, #84]	@ (80010dc <IOL_Make_Resp_ProductName+0x5c>)
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	461a      	mov	r2, r3
 800108a:	4b15      	ldr	r3, [pc, #84]	@ (80010e0 <IOL_Make_Resp_ProductName+0x60>)
 800108c:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 8001090:	4b14      	ldr	r3, [pc, #80]	@ (80010e4 <IOL_Make_Resp_ProductName+0x64>)
 8001092:	701a      	strb	r2, [r3, #0]
    device_ProcessDataIn_Arr[1] = IOL_OP_ProductName[IOL_OP_ISDU_OD_Res_cnt][1];   // 현재 씬그립 디바이스의 IODD는 2 octet.
 8001094:	4b11      	ldr	r3, [pc, #68]	@ (80010dc <IOL_Make_Resp_ProductName+0x5c>)
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	4a11      	ldr	r2, [pc, #68]	@ (80010e0 <IOL_Make_Resp_ProductName+0x60>)
 800109a:	005b      	lsls	r3, r3, #1
 800109c:	4413      	add	r3, r2
 800109e:	785a      	ldrb	r2, [r3, #1]
 80010a0:	4b10      	ldr	r3, [pc, #64]	@ (80010e4 <IOL_Make_Resp_ProductName+0x64>)
 80010a2:	705a      	strb	r2, [r3, #1]
    IOL_OP_ISDU_OD_Res_cnt++;        // ISDU 요청에 대한 Index 응답의 사이즈에 맞게 나눠서 보내기 위한 카운트값.
 80010a4:	4b0d      	ldr	r3, [pc, #52]	@ (80010dc <IOL_Make_Resp_ProductName+0x5c>)
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	3301      	adds	r3, #1
 80010aa:	b2da      	uxtb	r2, r3
 80010ac:	4b0b      	ldr	r3, [pc, #44]	@ (80010dc <IOL_Make_Resp_ProductName+0x5c>)
 80010ae:	701a      	strb	r2, [r3, #0]

    if (IOL_OP_ISDU_OD_Res_cnt >= 13)
 80010b0:	4b0a      	ldr	r3, [pc, #40]	@ (80010dc <IOL_Make_Resp_ProductName+0x5c>)
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	2b0c      	cmp	r3, #12
 80010b6:	d906      	bls.n	80010c6 <IOL_Make_Resp_ProductName+0x46>
    {
        isdudata.isdu_od_writereq_flag = 0;
 80010b8:	4b0b      	ldr	r3, [pc, #44]	@ (80010e8 <IOL_Make_Resp_ProductName+0x68>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        IOL_OP_ISDU_OD_Res_cnt = 0;
 80010c0:	4b06      	ldr	r3, [pc, #24]	@ (80010dc <IOL_Make_Resp_ProductName+0x5c>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	701a      	strb	r2, [r3, #0]
    }

    device_ProcessDataIn_Arr[IOL_OP_ISDU_IN_PROCESSDATALENGTH - 1] = OP_CKS_GetChecksum(&device_ProcessDataIn_Arr[0], (IOL_OP_ISDU_IN_PROCESSDATALENGTH - 1), 0);
 80010c6:	2200      	movs	r2, #0
 80010c8:	2106      	movs	r1, #6
 80010ca:	4806      	ldr	r0, [pc, #24]	@ (80010e4 <IOL_Make_Resp_ProductName+0x64>)
 80010cc:	f7ff fb84 	bl	80007d8 <OP_CKS_GetChecksum>
 80010d0:	4603      	mov	r3, r0
 80010d2:	461a      	mov	r2, r3
 80010d4:	4b03      	ldr	r3, [pc, #12]	@ (80010e4 <IOL_Make_Resp_ProductName+0x64>)
 80010d6:	719a      	strb	r2, [r3, #6]
}
 80010d8:	bf00      	nop
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	200003fe 	.word	0x200003fe
 80010e0:	20000054 	.word	0x20000054
 80010e4:	20000fe4 	.word	0x20000fe4
 80010e8:	20000fec 	.word	0x20000fec

080010ec <IOL_Make_Resp_SerialNumber>:

static void IOL_Make_Resp_SerialNumber (void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
    device_ProcessDataIn_Arr[0] = IOL_OP_SerialNumber[IOL_OP_ISDU_OD_Res_cnt][0];   // OD 데이터를  Index에 대한 응답 ISDU 구조의 사이즈에 맞게 나눠서 보내기 위함  
 80010f0:	4b15      	ldr	r3, [pc, #84]	@ (8001148 <IOL_Make_Resp_SerialNumber+0x5c>)
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	461a      	mov	r2, r3
 80010f6:	4b15      	ldr	r3, [pc, #84]	@ (800114c <IOL_Make_Resp_SerialNumber+0x60>)
 80010f8:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 80010fc:	4b14      	ldr	r3, [pc, #80]	@ (8001150 <IOL_Make_Resp_SerialNumber+0x64>)
 80010fe:	701a      	strb	r2, [r3, #0]
    device_ProcessDataIn_Arr[1] = IOL_OP_SerialNumber[IOL_OP_ISDU_OD_Res_cnt][1];   // 현재 씬그립 디바이스의 IODD는 2 octet.
 8001100:	4b11      	ldr	r3, [pc, #68]	@ (8001148 <IOL_Make_Resp_SerialNumber+0x5c>)
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	4a11      	ldr	r2, [pc, #68]	@ (800114c <IOL_Make_Resp_SerialNumber+0x60>)
 8001106:	005b      	lsls	r3, r3, #1
 8001108:	4413      	add	r3, r2
 800110a:	785a      	ldrb	r2, [r3, #1]
 800110c:	4b10      	ldr	r3, [pc, #64]	@ (8001150 <IOL_Make_Resp_SerialNumber+0x64>)
 800110e:	705a      	strb	r2, [r3, #1]
    IOL_OP_ISDU_OD_Res_cnt++;        // ISDU 요청에 대한 Index 응답의 사이즈에 맞게 나눠서 보내기 위한 카운트값.
 8001110:	4b0d      	ldr	r3, [pc, #52]	@ (8001148 <IOL_Make_Resp_SerialNumber+0x5c>)
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	3301      	adds	r3, #1
 8001116:	b2da      	uxtb	r2, r3
 8001118:	4b0b      	ldr	r3, [pc, #44]	@ (8001148 <IOL_Make_Resp_SerialNumber+0x5c>)
 800111a:	701a      	strb	r2, [r3, #0]

    // if (IOL_OP_ISDU_OD_Res_cnt >= 10)
    if (IOL_OP_ISDU_OD_Res_cnt >= 5)
 800111c:	4b0a      	ldr	r3, [pc, #40]	@ (8001148 <IOL_Make_Resp_SerialNumber+0x5c>)
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	2b04      	cmp	r3, #4
 8001122:	d906      	bls.n	8001132 <IOL_Make_Resp_SerialNumber+0x46>
    {
        isdudata.isdu_od_writereq_flag = 0;
 8001124:	4b0b      	ldr	r3, [pc, #44]	@ (8001154 <IOL_Make_Resp_SerialNumber+0x68>)
 8001126:	2200      	movs	r2, #0
 8001128:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        IOL_OP_ISDU_OD_Res_cnt = 0;
 800112c:	4b06      	ldr	r3, [pc, #24]	@ (8001148 <IOL_Make_Resp_SerialNumber+0x5c>)
 800112e:	2200      	movs	r2, #0
 8001130:	701a      	strb	r2, [r3, #0]
    }

    device_ProcessDataIn_Arr[IOL_OP_ISDU_IN_PROCESSDATALENGTH - 1] = OP_CKS_GetChecksum(&device_ProcessDataIn_Arr[0], (IOL_OP_ISDU_IN_PROCESSDATALENGTH - 1), 0);
 8001132:	2200      	movs	r2, #0
 8001134:	2106      	movs	r1, #6
 8001136:	4806      	ldr	r0, [pc, #24]	@ (8001150 <IOL_Make_Resp_SerialNumber+0x64>)
 8001138:	f7ff fb4e 	bl	80007d8 <OP_CKS_GetChecksum>
 800113c:	4603      	mov	r3, r0
 800113e:	461a      	mov	r2, r3
 8001140:	4b03      	ldr	r3, [pc, #12]	@ (8001150 <IOL_Make_Resp_SerialNumber+0x64>)
 8001142:	719a      	strb	r2, [r3, #6]
}
 8001144:	bf00      	nop
 8001146:	bd80      	pop	{r7, pc}
 8001148:	200003fe 	.word	0x200003fe
 800114c:	20000084 	.word	0x20000084
 8001150:	20000fe4 	.word	0x20000fe4
 8001154:	20000fec 	.word	0x20000fec

08001158 <IOL_Make_Resp_ApplicationSpecificTag>:

static void IOL_Make_Resp_ApplicationSpecificTag (void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
    device_ProcessDataIn_Arr[0] = IOL_OP_ApplicationSpecificTag[IOL_OP_ISDU_OD_Res_cnt][0];   // OD 데이터를  Index에 대한 응답 ISDU 구조의 사이즈에 맞게 나눠서 보내기 위함  
 800115c:	4b15      	ldr	r3, [pc, #84]	@ (80011b4 <IOL_Make_Resp_ApplicationSpecificTag+0x5c>)
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	461a      	mov	r2, r3
 8001162:	4b15      	ldr	r3, [pc, #84]	@ (80011b8 <IOL_Make_Resp_ApplicationSpecificTag+0x60>)
 8001164:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 8001168:	4b14      	ldr	r3, [pc, #80]	@ (80011bc <IOL_Make_Resp_ApplicationSpecificTag+0x64>)
 800116a:	701a      	strb	r2, [r3, #0]
    device_ProcessDataIn_Arr[1] = IOL_OP_ApplicationSpecificTag[IOL_OP_ISDU_OD_Res_cnt][1];   // 현재 씬그립 디바이스의 IODD는 2 octet.
 800116c:	4b11      	ldr	r3, [pc, #68]	@ (80011b4 <IOL_Make_Resp_ApplicationSpecificTag+0x5c>)
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	4a11      	ldr	r2, [pc, #68]	@ (80011b8 <IOL_Make_Resp_ApplicationSpecificTag+0x60>)
 8001172:	005b      	lsls	r3, r3, #1
 8001174:	4413      	add	r3, r2
 8001176:	785a      	ldrb	r2, [r3, #1]
 8001178:	4b10      	ldr	r3, [pc, #64]	@ (80011bc <IOL_Make_Resp_ApplicationSpecificTag+0x64>)
 800117a:	705a      	strb	r2, [r3, #1]
    IOL_OP_ISDU_OD_Res_cnt++;        // ISDU 요청에 대한 Index 응답의 사이즈에 맞게 나눠서 보내기 위한 카운트값.
 800117c:	4b0d      	ldr	r3, [pc, #52]	@ (80011b4 <IOL_Make_Resp_ApplicationSpecificTag+0x5c>)
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	3301      	adds	r3, #1
 8001182:	b2da      	uxtb	r2, r3
 8001184:	4b0b      	ldr	r3, [pc, #44]	@ (80011b4 <IOL_Make_Resp_ApplicationSpecificTag+0x5c>)
 8001186:	701a      	strb	r2, [r3, #0]

    if (IOL_OP_ISDU_OD_Res_cnt >= 18)
 8001188:	4b0a      	ldr	r3, [pc, #40]	@ (80011b4 <IOL_Make_Resp_ApplicationSpecificTag+0x5c>)
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	2b11      	cmp	r3, #17
 800118e:	d906      	bls.n	800119e <IOL_Make_Resp_ApplicationSpecificTag+0x46>
    {
        isdudata.isdu_od_writereq_flag = 0;
 8001190:	4b0b      	ldr	r3, [pc, #44]	@ (80011c0 <IOL_Make_Resp_ApplicationSpecificTag+0x68>)
 8001192:	2200      	movs	r2, #0
 8001194:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        IOL_OP_ISDU_OD_Res_cnt = 0;
 8001198:	4b06      	ldr	r3, [pc, #24]	@ (80011b4 <IOL_Make_Resp_ApplicationSpecificTag+0x5c>)
 800119a:	2200      	movs	r2, #0
 800119c:	701a      	strb	r2, [r3, #0]
    }

    device_ProcessDataIn_Arr[IOL_OP_ISDU_IN_PROCESSDATALENGTH - 1] = OP_CKS_GetChecksum(&device_ProcessDataIn_Arr[0], (IOL_OP_ISDU_IN_PROCESSDATALENGTH - 1), 0);
 800119e:	2200      	movs	r2, #0
 80011a0:	2106      	movs	r1, #6
 80011a2:	4806      	ldr	r0, [pc, #24]	@ (80011bc <IOL_Make_Resp_ApplicationSpecificTag+0x64>)
 80011a4:	f7ff fb18 	bl	80007d8 <OP_CKS_GetChecksum>
 80011a8:	4603      	mov	r3, r0
 80011aa:	461a      	mov	r2, r3
 80011ac:	4b03      	ldr	r3, [pc, #12]	@ (80011bc <IOL_Make_Resp_ApplicationSpecificTag+0x64>)
 80011ae:	719a      	strb	r2, [r3, #6]
}
 80011b0:	bf00      	nop
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	200003fe 	.word	0x200003fe
 80011b8:	20000098 	.word	0x20000098
 80011bc:	20000fe4 	.word	0x20000fe4
 80011c0:	20000fec 	.word	0x20000fec

080011c4 <IOL_Make_Resp_ProductID>:

static void IOL_Make_Resp_ProductID (void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0
    device_ProcessDataIn_Arr[0] = IOL_OP_ProductID[IOL_OP_ISDU_OD_Res_cnt][0];   // OD 데이터를  Index에 대한 응답 ISDU 구조의 사이즈에 맞게 나눠서 보내기 위함  
 80011c8:	4b15      	ldr	r3, [pc, #84]	@ (8001220 <IOL_Make_Resp_ProductID+0x5c>)
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	461a      	mov	r2, r3
 80011ce:	4b15      	ldr	r3, [pc, #84]	@ (8001224 <IOL_Make_Resp_ProductID+0x60>)
 80011d0:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 80011d4:	4b14      	ldr	r3, [pc, #80]	@ (8001228 <IOL_Make_Resp_ProductID+0x64>)
 80011d6:	701a      	strb	r2, [r3, #0]
    device_ProcessDataIn_Arr[1] = IOL_OP_ProductID[IOL_OP_ISDU_OD_Res_cnt][1];   // 현재 씬그립 디바이스의 IODD는 2 octet.
 80011d8:	4b11      	ldr	r3, [pc, #68]	@ (8001220 <IOL_Make_Resp_ProductID+0x5c>)
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	4a11      	ldr	r2, [pc, #68]	@ (8001224 <IOL_Make_Resp_ProductID+0x60>)
 80011de:	005b      	lsls	r3, r3, #1
 80011e0:	4413      	add	r3, r2
 80011e2:	785a      	ldrb	r2, [r3, #1]
 80011e4:	4b10      	ldr	r3, [pc, #64]	@ (8001228 <IOL_Make_Resp_ProductID+0x64>)
 80011e6:	705a      	strb	r2, [r3, #1]
    IOL_OP_ISDU_OD_Res_cnt++;        // ISDU 요청에 대한 Index 응답의 사이즈에 맞게 나눠서 보내기 위한 카운트값.
 80011e8:	4b0d      	ldr	r3, [pc, #52]	@ (8001220 <IOL_Make_Resp_ProductID+0x5c>)
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	3301      	adds	r3, #1
 80011ee:	b2da      	uxtb	r2, r3
 80011f0:	4b0b      	ldr	r3, [pc, #44]	@ (8001220 <IOL_Make_Resp_ProductID+0x5c>)
 80011f2:	701a      	strb	r2, [r3, #0]

    if (IOL_OP_ISDU_OD_Res_cnt >= 6)
 80011f4:	4b0a      	ldr	r3, [pc, #40]	@ (8001220 <IOL_Make_Resp_ProductID+0x5c>)
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	2b05      	cmp	r3, #5
 80011fa:	d906      	bls.n	800120a <IOL_Make_Resp_ProductID+0x46>
    {
        isdudata.isdu_od_writereq_flag = 0;
 80011fc:	4b0b      	ldr	r3, [pc, #44]	@ (800122c <IOL_Make_Resp_ProductID+0x68>)
 80011fe:	2200      	movs	r2, #0
 8001200:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        IOL_OP_ISDU_OD_Res_cnt = 0;
 8001204:	4b06      	ldr	r3, [pc, #24]	@ (8001220 <IOL_Make_Resp_ProductID+0x5c>)
 8001206:	2200      	movs	r2, #0
 8001208:	701a      	strb	r2, [r3, #0]
    }

    device_ProcessDataIn_Arr[IOL_OP_ISDU_IN_PROCESSDATALENGTH - 1] = OP_CKS_GetChecksum(&device_ProcessDataIn_Arr[0], (IOL_OP_ISDU_IN_PROCESSDATALENGTH - 1), 0);
 800120a:	2200      	movs	r2, #0
 800120c:	2106      	movs	r1, #6
 800120e:	4806      	ldr	r0, [pc, #24]	@ (8001228 <IOL_Make_Resp_ProductID+0x64>)
 8001210:	f7ff fae2 	bl	80007d8 <OP_CKS_GetChecksum>
 8001214:	4603      	mov	r3, r0
 8001216:	461a      	mov	r2, r3
 8001218:	4b03      	ldr	r3, [pc, #12]	@ (8001228 <IOL_Make_Resp_ProductID+0x64>)
 800121a:	719a      	strb	r2, [r3, #6]
}
 800121c:	bf00      	nop
 800121e:	bd80      	pop	{r7, pc}
 8001220:	200003fe 	.word	0x200003fe
 8001224:	200000d4 	.word	0x200000d4
 8001228:	20000fe4 	.word	0x20000fe4
 800122c:	20000fec 	.word	0x20000fec

08001230 <IOL_Make_Resp_ExampleParameter>:

static void IOL_Make_Resp_ExampleParameter (void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0
    device_ProcessDataIn_Arr[0] = IOL_OP_ExampleParameter[IOL_OP_ISDU_OD_Res_cnt][0];   // OD 데이터를  Index에 대한 응답 ISDU 구조의 사이즈에 맞게 나눠서 보내기 위함  
 8001234:	4b15      	ldr	r3, [pc, #84]	@ (800128c <IOL_Make_Resp_ExampleParameter+0x5c>)
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	461a      	mov	r2, r3
 800123a:	4b15      	ldr	r3, [pc, #84]	@ (8001290 <IOL_Make_Resp_ExampleParameter+0x60>)
 800123c:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 8001240:	4b14      	ldr	r3, [pc, #80]	@ (8001294 <IOL_Make_Resp_ExampleParameter+0x64>)
 8001242:	701a      	strb	r2, [r3, #0]
    device_ProcessDataIn_Arr[1] = IOL_OP_ExampleParameter[IOL_OP_ISDU_OD_Res_cnt][1];   // 현재 씬그립 디바이스의 IODD는 2 octet.
 8001244:	4b11      	ldr	r3, [pc, #68]	@ (800128c <IOL_Make_Resp_ExampleParameter+0x5c>)
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	4a11      	ldr	r2, [pc, #68]	@ (8001290 <IOL_Make_Resp_ExampleParameter+0x60>)
 800124a:	005b      	lsls	r3, r3, #1
 800124c:	4413      	add	r3, r2
 800124e:	785a      	ldrb	r2, [r3, #1]
 8001250:	4b10      	ldr	r3, [pc, #64]	@ (8001294 <IOL_Make_Resp_ExampleParameter+0x64>)
 8001252:	705a      	strb	r2, [r3, #1]
    IOL_OP_ISDU_OD_Res_cnt++;        // ISDU 요청에 대한 Index 응답의 사이즈에 맞게 나눠서 보내기 위한 카운트값.
 8001254:	4b0d      	ldr	r3, [pc, #52]	@ (800128c <IOL_Make_Resp_ExampleParameter+0x5c>)
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	3301      	adds	r3, #1
 800125a:	b2da      	uxtb	r2, r3
 800125c:	4b0b      	ldr	r3, [pc, #44]	@ (800128c <IOL_Make_Resp_ExampleParameter+0x5c>)
 800125e:	701a      	strb	r2, [r3, #0]

    if (IOL_OP_ISDU_OD_Res_cnt >= 2)
 8001260:	4b0a      	ldr	r3, [pc, #40]	@ (800128c <IOL_Make_Resp_ExampleParameter+0x5c>)
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	2b01      	cmp	r3, #1
 8001266:	d906      	bls.n	8001276 <IOL_Make_Resp_ExampleParameter+0x46>
    {
        isdudata.isdu_od_writereq_flag = 0;
 8001268:	4b0b      	ldr	r3, [pc, #44]	@ (8001298 <IOL_Make_Resp_ExampleParameter+0x68>)
 800126a:	2200      	movs	r2, #0
 800126c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        IOL_OP_ISDU_OD_Res_cnt = 0;
 8001270:	4b06      	ldr	r3, [pc, #24]	@ (800128c <IOL_Make_Resp_ExampleParameter+0x5c>)
 8001272:	2200      	movs	r2, #0
 8001274:	701a      	strb	r2, [r3, #0]
    }

    device_ProcessDataIn_Arr[IOL_OP_ISDU_IN_PROCESSDATALENGTH - 1] = OP_CKS_GetChecksum(&device_ProcessDataIn_Arr[0], (IOL_OP_ISDU_IN_PROCESSDATALENGTH - 1), 0);
 8001276:	2200      	movs	r2, #0
 8001278:	2106      	movs	r1, #6
 800127a:	4806      	ldr	r0, [pc, #24]	@ (8001294 <IOL_Make_Resp_ExampleParameter+0x64>)
 800127c:	f7ff faac 	bl	80007d8 <OP_CKS_GetChecksum>
 8001280:	4603      	mov	r3, r0
 8001282:	461a      	mov	r2, r3
 8001284:	4b03      	ldr	r3, [pc, #12]	@ (8001294 <IOL_Make_Resp_ExampleParameter+0x64>)
 8001286:	719a      	strb	r2, [r3, #6]
}
 8001288:	bf00      	nop
 800128a:	bd80      	pop	{r7, pc}
 800128c:	200003fe 	.word	0x200003fe
 8001290:	200000e8 	.word	0x200000e8
 8001294:	20000fe4 	.word	0x20000fe4
 8001298:	20000fec 	.word	0x20000fec

0800129c <IOL_Make_Resp_DeviceStatus>:

static void IOL_Make_Resp_DeviceStatus (void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
    device_ProcessDataIn_Arr[0] = IOL_OP_DeviceStatus[IOL_OP_ISDU_OD_Res_cnt][0];   // OD 데이터를  Index에 대한 응답 ISDU 구조의 사이즈에 맞게 나눠서 보내기 위함  
 80012a0:	4b15      	ldr	r3, [pc, #84]	@ (80012f8 <IOL_Make_Resp_DeviceStatus+0x5c>)
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	461a      	mov	r2, r3
 80012a6:	4b15      	ldr	r3, [pc, #84]	@ (80012fc <IOL_Make_Resp_DeviceStatus+0x60>)
 80012a8:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 80012ac:	4b14      	ldr	r3, [pc, #80]	@ (8001300 <IOL_Make_Resp_DeviceStatus+0x64>)
 80012ae:	701a      	strb	r2, [r3, #0]
    device_ProcessDataIn_Arr[1] = IOL_OP_DeviceStatus[IOL_OP_ISDU_OD_Res_cnt][1];   // 현재 씬그립 디바이스의 IODD는 2 octet.
 80012b0:	4b11      	ldr	r3, [pc, #68]	@ (80012f8 <IOL_Make_Resp_DeviceStatus+0x5c>)
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	4a11      	ldr	r2, [pc, #68]	@ (80012fc <IOL_Make_Resp_DeviceStatus+0x60>)
 80012b6:	005b      	lsls	r3, r3, #1
 80012b8:	4413      	add	r3, r2
 80012ba:	785a      	ldrb	r2, [r3, #1]
 80012bc:	4b10      	ldr	r3, [pc, #64]	@ (8001300 <IOL_Make_Resp_DeviceStatus+0x64>)
 80012be:	705a      	strb	r2, [r3, #1]
    IOL_OP_ISDU_OD_Res_cnt++;        // ISDU 요청에 대한 Index 응답의 사이즈에 맞게 나눠서 보내기 위한 카운트값.
 80012c0:	4b0d      	ldr	r3, [pc, #52]	@ (80012f8 <IOL_Make_Resp_DeviceStatus+0x5c>)
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	3301      	adds	r3, #1
 80012c6:	b2da      	uxtb	r2, r3
 80012c8:	4b0b      	ldr	r3, [pc, #44]	@ (80012f8 <IOL_Make_Resp_DeviceStatus+0x5c>)
 80012ca:	701a      	strb	r2, [r3, #0]

    if (IOL_OP_ISDU_OD_Res_cnt >= 2)
 80012cc:	4b0a      	ldr	r3, [pc, #40]	@ (80012f8 <IOL_Make_Resp_DeviceStatus+0x5c>)
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	2b01      	cmp	r3, #1
 80012d2:	d906      	bls.n	80012e2 <IOL_Make_Resp_DeviceStatus+0x46>
    {
        isdudata.isdu_od_writereq_flag = 0;
 80012d4:	4b0b      	ldr	r3, [pc, #44]	@ (8001304 <IOL_Make_Resp_DeviceStatus+0x68>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        IOL_OP_ISDU_OD_Res_cnt = 0;
 80012dc:	4b06      	ldr	r3, [pc, #24]	@ (80012f8 <IOL_Make_Resp_DeviceStatus+0x5c>)
 80012de:	2200      	movs	r2, #0
 80012e0:	701a      	strb	r2, [r3, #0]
    }

    device_ProcessDataIn_Arr[IOL_OP_ISDU_IN_PROCESSDATALENGTH - 1] = OP_CKS_GetChecksum(&device_ProcessDataIn_Arr[0], (IOL_OP_ISDU_IN_PROCESSDATALENGTH - 1), 0);
 80012e2:	2200      	movs	r2, #0
 80012e4:	2106      	movs	r1, #6
 80012e6:	4806      	ldr	r0, [pc, #24]	@ (8001300 <IOL_Make_Resp_DeviceStatus+0x64>)
 80012e8:	f7ff fa76 	bl	80007d8 <OP_CKS_GetChecksum>
 80012ec:	4603      	mov	r3, r0
 80012ee:	461a      	mov	r2, r3
 80012f0:	4b03      	ldr	r3, [pc, #12]	@ (8001300 <IOL_Make_Resp_DeviceStatus+0x64>)
 80012f2:	719a      	strb	r2, [r3, #6]
}
 80012f4:	bf00      	nop
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	200003fe 	.word	0x200003fe
 80012fc:	200000fc 	.word	0x200000fc
 8001300:	20000fe4 	.word	0x20000fe4
 8001304:	20000fec 	.word	0x20000fec

08001308 <IOL_Make_Resp_DetailedDeviceStatus>:

static void IOL_Make_Resp_DetailedDeviceStatus (void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0
    device_ProcessDataIn_Arr[0] = IOL_OP_DetailedDeviceStatus[IOL_OP_ISDU_OD_Res_cnt][0];   // OD 데이터를  Index에 대한 응답 ISDU 구조의 사이즈에 맞게 나눠서 보내기 위함  
 800130c:	4b15      	ldr	r3, [pc, #84]	@ (8001364 <IOL_Make_Resp_DetailedDeviceStatus+0x5c>)
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	461a      	mov	r2, r3
 8001312:	4b15      	ldr	r3, [pc, #84]	@ (8001368 <IOL_Make_Resp_DetailedDeviceStatus+0x60>)
 8001314:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 8001318:	4b14      	ldr	r3, [pc, #80]	@ (800136c <IOL_Make_Resp_DetailedDeviceStatus+0x64>)
 800131a:	701a      	strb	r2, [r3, #0]
    device_ProcessDataIn_Arr[1] = IOL_OP_DetailedDeviceStatus[IOL_OP_ISDU_OD_Res_cnt][1];   // 현재 씬그립 디바이스의 IODD는 2 octet.
 800131c:	4b11      	ldr	r3, [pc, #68]	@ (8001364 <IOL_Make_Resp_DetailedDeviceStatus+0x5c>)
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	4a11      	ldr	r2, [pc, #68]	@ (8001368 <IOL_Make_Resp_DetailedDeviceStatus+0x60>)
 8001322:	005b      	lsls	r3, r3, #1
 8001324:	4413      	add	r3, r2
 8001326:	785a      	ldrb	r2, [r3, #1]
 8001328:	4b10      	ldr	r3, [pc, #64]	@ (800136c <IOL_Make_Resp_DetailedDeviceStatus+0x64>)
 800132a:	705a      	strb	r2, [r3, #1]
    IOL_OP_ISDU_OD_Res_cnt++;        // ISDU 요청에 대한 Index 응답의 사이즈에 맞게 나눠서 보내기 위한 카운트값.
 800132c:	4b0d      	ldr	r3, [pc, #52]	@ (8001364 <IOL_Make_Resp_DetailedDeviceStatus+0x5c>)
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	3301      	adds	r3, #1
 8001332:	b2da      	uxtb	r2, r3
 8001334:	4b0b      	ldr	r3, [pc, #44]	@ (8001364 <IOL_Make_Resp_DetailedDeviceStatus+0x5c>)
 8001336:	701a      	strb	r2, [r3, #0]

    if (IOL_OP_ISDU_OD_Res_cnt >= 3)
 8001338:	4b0a      	ldr	r3, [pc, #40]	@ (8001364 <IOL_Make_Resp_DetailedDeviceStatus+0x5c>)
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	2b02      	cmp	r3, #2
 800133e:	d906      	bls.n	800134e <IOL_Make_Resp_DetailedDeviceStatus+0x46>
    {
        isdudata.isdu_od_writereq_flag = 0;
 8001340:	4b0b      	ldr	r3, [pc, #44]	@ (8001370 <IOL_Make_Resp_DetailedDeviceStatus+0x68>)
 8001342:	2200      	movs	r2, #0
 8001344:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        IOL_OP_ISDU_OD_Res_cnt = 0;
 8001348:	4b06      	ldr	r3, [pc, #24]	@ (8001364 <IOL_Make_Resp_DetailedDeviceStatus+0x5c>)
 800134a:	2200      	movs	r2, #0
 800134c:	701a      	strb	r2, [r3, #0]
    }

    device_ProcessDataIn_Arr[IOL_OP_ISDU_IN_PROCESSDATALENGTH - 1] = OP_CKS_GetChecksum(&device_ProcessDataIn_Arr[0], (IOL_OP_ISDU_IN_PROCESSDATALENGTH - 1), 0);
 800134e:	2200      	movs	r2, #0
 8001350:	2106      	movs	r1, #6
 8001352:	4806      	ldr	r0, [pc, #24]	@ (800136c <IOL_Make_Resp_DetailedDeviceStatus+0x64>)
 8001354:	f7ff fa40 	bl	80007d8 <OP_CKS_GetChecksum>
 8001358:	4603      	mov	r3, r0
 800135a:	461a      	mov	r2, r3
 800135c:	4b03      	ldr	r3, [pc, #12]	@ (800136c <IOL_Make_Resp_DetailedDeviceStatus+0x64>)
 800135e:	719a      	strb	r2, [r3, #6]
}
 8001360:	bf00      	nop
 8001362:	bd80      	pop	{r7, pc}
 8001364:	200003fe 	.word	0x200003fe
 8001368:	20000104 	.word	0x20000104
 800136c:	20000fe4 	.word	0x20000fe4
 8001370:	20000fec 	.word	0x20000fec

08001374 <IOL_Make_Resp_VendorName>:

static void IOL_Make_Resp_VendorName (void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	af00      	add	r7, sp, #0
    device_ProcessDataIn_Arr[0] = IOL_OP_VendorName[IOL_OP_ISDU_OD_Res_cnt][0];   // OD 데이터를  Index에 대한 응답 ISDU 구조의 사이즈에 맞게 나눠서 보내기 위함  
 8001378:	4b15      	ldr	r3, [pc, #84]	@ (80013d0 <IOL_Make_Resp_VendorName+0x5c>)
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	461a      	mov	r2, r3
 800137e:	4b15      	ldr	r3, [pc, #84]	@ (80013d4 <IOL_Make_Resp_VendorName+0x60>)
 8001380:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 8001384:	4b14      	ldr	r3, [pc, #80]	@ (80013d8 <IOL_Make_Resp_VendorName+0x64>)
 8001386:	701a      	strb	r2, [r3, #0]
    device_ProcessDataIn_Arr[1] = IOL_OP_VendorName[IOL_OP_ISDU_OD_Res_cnt][1];   // 현재 씬그립 디바이스의 IODD는 2 octet.
 8001388:	4b11      	ldr	r3, [pc, #68]	@ (80013d0 <IOL_Make_Resp_VendorName+0x5c>)
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	4a11      	ldr	r2, [pc, #68]	@ (80013d4 <IOL_Make_Resp_VendorName+0x60>)
 800138e:	005b      	lsls	r3, r3, #1
 8001390:	4413      	add	r3, r2
 8001392:	785a      	ldrb	r2, [r3, #1]
 8001394:	4b10      	ldr	r3, [pc, #64]	@ (80013d8 <IOL_Make_Resp_VendorName+0x64>)
 8001396:	705a      	strb	r2, [r3, #1]
    IOL_OP_ISDU_OD_Res_cnt++;        // ISDU 요청에 대한 Index 응답의 사이즈에 맞게 나눠서 보내기 위한 카운트값.
 8001398:	4b0d      	ldr	r3, [pc, #52]	@ (80013d0 <IOL_Make_Resp_VendorName+0x5c>)
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	3301      	adds	r3, #1
 800139e:	b2da      	uxtb	r2, r3
 80013a0:	4b0b      	ldr	r3, [pc, #44]	@ (80013d0 <IOL_Make_Resp_VendorName+0x5c>)
 80013a2:	701a      	strb	r2, [r3, #0]

    if (IOL_OP_ISDU_OD_Res_cnt >= IOL_OP_ISDU_VENDORNAME_LENGTH)
 80013a4:	4b0a      	ldr	r3, [pc, #40]	@ (80013d0 <IOL_Make_Resp_VendorName+0x5c>)
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	2b21      	cmp	r3, #33	@ 0x21
 80013aa:	d906      	bls.n	80013ba <IOL_Make_Resp_VendorName+0x46>
    {
        isdudata.isdu_od_writereq_flag = 0;
 80013ac:	4b0b      	ldr	r3, [pc, #44]	@ (80013dc <IOL_Make_Resp_VendorName+0x68>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        IOL_OP_ISDU_OD_Res_cnt = 0;
 80013b4:	4b06      	ldr	r3, [pc, #24]	@ (80013d0 <IOL_Make_Resp_VendorName+0x5c>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	701a      	strb	r2, [r3, #0]
    }

    device_ProcessDataIn_Arr[IOL_OP_ISDU_IN_PROCESSDATALENGTH - 1] = OP_CKS_GetChecksum(&device_ProcessDataIn_Arr[0], (IOL_OP_ISDU_IN_PROCESSDATALENGTH - 1), 0);
 80013ba:	2200      	movs	r2, #0
 80013bc:	2106      	movs	r1, #6
 80013be:	4806      	ldr	r0, [pc, #24]	@ (80013d8 <IOL_Make_Resp_VendorName+0x64>)
 80013c0:	f7ff fa0a 	bl	80007d8 <OP_CKS_GetChecksum>
 80013c4:	4603      	mov	r3, r0
 80013c6:	461a      	mov	r2, r3
 80013c8:	4b03      	ldr	r3, [pc, #12]	@ (80013d8 <IOL_Make_Resp_VendorName+0x64>)
 80013ca:	719a      	strb	r2, [r3, #6]
}
 80013cc:	bf00      	nop
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	200003fe 	.word	0x200003fe
 80013d4:	2000010c 	.word	0x2000010c
 80013d8:	20000fe4 	.word	0x20000fe4
 80013dc:	20000fec 	.word	0x20000fec

080013e0 <IOL_Make_Resp_HWRevision>:

static void IOL_Make_Resp_HWRevision (void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
    device_ProcessDataIn_Arr[0] = IOL_OP_HWRevision[IOL_OP_ISDU_OD_Res_cnt][0];   // OD 데이터를  Index에 대한 응답 ISDU 구조의 사이즈에 맞게 나눠서 보내기 위함  
 80013e4:	4b15      	ldr	r3, [pc, #84]	@ (800143c <IOL_Make_Resp_HWRevision+0x5c>)
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	461a      	mov	r2, r3
 80013ea:	4b15      	ldr	r3, [pc, #84]	@ (8001440 <IOL_Make_Resp_HWRevision+0x60>)
 80013ec:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 80013f0:	4b14      	ldr	r3, [pc, #80]	@ (8001444 <IOL_Make_Resp_HWRevision+0x64>)
 80013f2:	701a      	strb	r2, [r3, #0]
    device_ProcessDataIn_Arr[1] = IOL_OP_HWRevision[IOL_OP_ISDU_OD_Res_cnt][1];   // 현재 씬그립 디바이스의 IODD는 2 octet.
 80013f4:	4b11      	ldr	r3, [pc, #68]	@ (800143c <IOL_Make_Resp_HWRevision+0x5c>)
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	4a11      	ldr	r2, [pc, #68]	@ (8001440 <IOL_Make_Resp_HWRevision+0x60>)
 80013fa:	005b      	lsls	r3, r3, #1
 80013fc:	4413      	add	r3, r2
 80013fe:	785a      	ldrb	r2, [r3, #1]
 8001400:	4b10      	ldr	r3, [pc, #64]	@ (8001444 <IOL_Make_Resp_HWRevision+0x64>)
 8001402:	705a      	strb	r2, [r3, #1]
    IOL_OP_ISDU_OD_Res_cnt++;        // ISDU 요청에 대한 Index 응답의 사이즈에 맞게 나눠서 보내기 위한 카운트값.
 8001404:	4b0d      	ldr	r3, [pc, #52]	@ (800143c <IOL_Make_Resp_HWRevision+0x5c>)
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	3301      	adds	r3, #1
 800140a:	b2da      	uxtb	r2, r3
 800140c:	4b0b      	ldr	r3, [pc, #44]	@ (800143c <IOL_Make_Resp_HWRevision+0x5c>)
 800140e:	701a      	strb	r2, [r3, #0]

    if (IOL_OP_ISDU_OD_Res_cnt >= IOL_OP_ISDU_HWREVISION_LENGTH)
 8001410:	4b0a      	ldr	r3, [pc, #40]	@ (800143c <IOL_Make_Resp_HWRevision+0x5c>)
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	2b21      	cmp	r3, #33	@ 0x21
 8001416:	d906      	bls.n	8001426 <IOL_Make_Resp_HWRevision+0x46>
    {
        isdudata.isdu_od_writereq_flag = 0;
 8001418:	4b0b      	ldr	r3, [pc, #44]	@ (8001448 <IOL_Make_Resp_HWRevision+0x68>)
 800141a:	2200      	movs	r2, #0
 800141c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        IOL_OP_ISDU_OD_Res_cnt = 0;
 8001420:	4b06      	ldr	r3, [pc, #24]	@ (800143c <IOL_Make_Resp_HWRevision+0x5c>)
 8001422:	2200      	movs	r2, #0
 8001424:	701a      	strb	r2, [r3, #0]
    }

    device_ProcessDataIn_Arr[IOL_OP_ISDU_IN_PROCESSDATALENGTH - 1] = OP_CKS_GetChecksum(&device_ProcessDataIn_Arr[0], (IOL_OP_ISDU_IN_PROCESSDATALENGTH - 1), 0);
 8001426:	2200      	movs	r2, #0
 8001428:	2106      	movs	r1, #6
 800142a:	4806      	ldr	r0, [pc, #24]	@ (8001444 <IOL_Make_Resp_HWRevision+0x64>)
 800142c:	f7ff f9d4 	bl	80007d8 <OP_CKS_GetChecksum>
 8001430:	4603      	mov	r3, r0
 8001432:	461a      	mov	r2, r3
 8001434:	4b03      	ldr	r3, [pc, #12]	@ (8001444 <IOL_Make_Resp_HWRevision+0x64>)
 8001436:	719a      	strb	r2, [r3, #6]
}
 8001438:	bf00      	nop
 800143a:	bd80      	pop	{r7, pc}
 800143c:	200003fe 	.word	0x200003fe
 8001440:	20000150 	.word	0x20000150
 8001444:	20000fe4 	.word	0x20000fe4
 8001448:	20000fec 	.word	0x20000fec

0800144c <IOL_Make_Resp_FWRevision>:

static void IOL_Make_Resp_FWRevision (void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0
    device_ProcessDataIn_Arr[0] = IOL_OP_FWRevision[IOL_OP_ISDU_OD_Res_cnt][0];   // OD 데이터를  Index에 대한 응답 ISDU 구조의 사이즈에 맞게 나눠서 보내기 위함  
 8001450:	4b15      	ldr	r3, [pc, #84]	@ (80014a8 <IOL_Make_Resp_FWRevision+0x5c>)
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	461a      	mov	r2, r3
 8001456:	4b15      	ldr	r3, [pc, #84]	@ (80014ac <IOL_Make_Resp_FWRevision+0x60>)
 8001458:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 800145c:	4b14      	ldr	r3, [pc, #80]	@ (80014b0 <IOL_Make_Resp_FWRevision+0x64>)
 800145e:	701a      	strb	r2, [r3, #0]
    device_ProcessDataIn_Arr[1] = IOL_OP_FWRevision[IOL_OP_ISDU_OD_Res_cnt][1];   // 현재 씬그립 디바이스의 IODD는 2 octet.
 8001460:	4b11      	ldr	r3, [pc, #68]	@ (80014a8 <IOL_Make_Resp_FWRevision+0x5c>)
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	4a11      	ldr	r2, [pc, #68]	@ (80014ac <IOL_Make_Resp_FWRevision+0x60>)
 8001466:	005b      	lsls	r3, r3, #1
 8001468:	4413      	add	r3, r2
 800146a:	785a      	ldrb	r2, [r3, #1]
 800146c:	4b10      	ldr	r3, [pc, #64]	@ (80014b0 <IOL_Make_Resp_FWRevision+0x64>)
 800146e:	705a      	strb	r2, [r3, #1]
    IOL_OP_ISDU_OD_Res_cnt++;        // ISDU 요청에 대한 Index 응답의 사이즈에 맞게 나눠서 보내기 위한 카운트값.
 8001470:	4b0d      	ldr	r3, [pc, #52]	@ (80014a8 <IOL_Make_Resp_FWRevision+0x5c>)
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	3301      	adds	r3, #1
 8001476:	b2da      	uxtb	r2, r3
 8001478:	4b0b      	ldr	r3, [pc, #44]	@ (80014a8 <IOL_Make_Resp_FWRevision+0x5c>)
 800147a:	701a      	strb	r2, [r3, #0]

    if (IOL_OP_ISDU_OD_Res_cnt >= IOL_OP_ISDU_FWREVISION_LENGTH)
 800147c:	4b0a      	ldr	r3, [pc, #40]	@ (80014a8 <IOL_Make_Resp_FWRevision+0x5c>)
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	2b21      	cmp	r3, #33	@ 0x21
 8001482:	d906      	bls.n	8001492 <IOL_Make_Resp_FWRevision+0x46>
    {
        isdudata.isdu_od_writereq_flag = 0;
 8001484:	4b0b      	ldr	r3, [pc, #44]	@ (80014b4 <IOL_Make_Resp_FWRevision+0x68>)
 8001486:	2200      	movs	r2, #0
 8001488:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        IOL_OP_ISDU_OD_Res_cnt = 0;
 800148c:	4b06      	ldr	r3, [pc, #24]	@ (80014a8 <IOL_Make_Resp_FWRevision+0x5c>)
 800148e:	2200      	movs	r2, #0
 8001490:	701a      	strb	r2, [r3, #0]
    }

    device_ProcessDataIn_Arr[IOL_OP_ISDU_IN_PROCESSDATALENGTH - 1] = OP_CKS_GetChecksum(&device_ProcessDataIn_Arr[0], (IOL_OP_ISDU_IN_PROCESSDATALENGTH - 1), 0);
 8001492:	2200      	movs	r2, #0
 8001494:	2106      	movs	r1, #6
 8001496:	4806      	ldr	r0, [pc, #24]	@ (80014b0 <IOL_Make_Resp_FWRevision+0x64>)
 8001498:	f7ff f99e 	bl	80007d8 <OP_CKS_GetChecksum>
 800149c:	4603      	mov	r3, r0
 800149e:	461a      	mov	r2, r3
 80014a0:	4b03      	ldr	r3, [pc, #12]	@ (80014b0 <IOL_Make_Resp_FWRevision+0x64>)
 80014a2:	719a      	strb	r2, [r3, #6]
}
 80014a4:	bf00      	nop
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	200003fe 	.word	0x200003fe
 80014ac:	20000194 	.word	0x20000194
 80014b0:	20000fe4 	.word	0x20000fe4
 80014b4:	20000fec 	.word	0x20000fec

080014b8 <IOL_Make_Resp_default>:


static void IOL_Make_Resp_default (void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
    // device_ProcessDataIn_arr[OP_ISDU_IN_PROCESSDATALENGTH - 2] = ProcessDataIn_cnt++; // Test cnt Value 
    device_ProcessDataIn_Arr[IOL_OP_ISDU_IN_PROCESSDATALENGTH - 2] = ProcessDataIn_cnt; // Test cnt Value 
 80014bc:	4b07      	ldr	r3, [pc, #28]	@ (80014dc <IOL_Make_Resp_default+0x24>)
 80014be:	781a      	ldrb	r2, [r3, #0]
 80014c0:	4b07      	ldr	r3, [pc, #28]	@ (80014e0 <IOL_Make_Resp_default+0x28>)
 80014c2:	715a      	strb	r2, [r3, #5]
    device_ProcessDataIn_Arr[IOL_OP_ISDU_IN_PROCESSDATALENGTH - 1] = OP_CKS_GetChecksum(&device_ProcessDataIn_Arr[0], (IOL_OP_ISDU_IN_PROCESSDATALENGTH - 1), 0);
 80014c4:	2200      	movs	r2, #0
 80014c6:	2106      	movs	r1, #6
 80014c8:	4805      	ldr	r0, [pc, #20]	@ (80014e0 <IOL_Make_Resp_default+0x28>)
 80014ca:	f7ff f985 	bl	80007d8 <OP_CKS_GetChecksum>
 80014ce:	4603      	mov	r3, r0
 80014d0:	461a      	mov	r2, r3
 80014d2:	4b03      	ldr	r3, [pc, #12]	@ (80014e0 <IOL_Make_Resp_default+0x28>)
 80014d4:	719a      	strb	r2, [r3, #6]
}
 80014d6:	bf00      	nop
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	20000428 	.word	0x20000428
 80014e0:	20000fe4 	.word	0x20000fe4

080014e4 <IOL_State_OP_ISDU_ReadProcess>:
    device_ProcessDataIn_Arr[IOL_OP_ISDU_IN_PROCESSDATALENGTH - 1] = OP_CKS_GetChecksum(&device_ProcessDataIn_Arr[0], (IOL_OP_ISDU_IN_PROCESSDATALENGTH - 1), 0);
}

// ISDU OD Read Process
uint8_t IOL_State_OP_ISDU_ReadProcess (void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	af00      	add	r7, sp, #0
            //     break;
        }
        // device_ProcessDataOut_arr[IOL_OP_ISDU_OUT_PROCESSDATALENGTH - 1] = OP_CKS_GetChecksum(&device_ProcessDataOut_arr[0], IOL_OP_ISDU_OUT_PROCESSDATALENGTH - 1, 0); // CKS 생성
    }
    #else
    if (isdudata.isdu_od_writereq_flag == 1)
 80014e8:	4b57      	ldr	r3, [pc, #348]	@ (8001648 <IOL_State_OP_ISDU_ReadProcess+0x164>)
 80014ea:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80014ee:	2b01      	cmp	r3, #1
 80014f0:	f040 8094 	bne.w	800161c <IOL_State_OP_ISDU_ReadProcess+0x138>
    {
        // isdudata.isdudata.isdu_od_writereq_flag = 0;

        switch (isdudata.index)
 80014f4:	4b54      	ldr	r3, [pc, #336]	@ (8001648 <IOL_State_OP_ISDU_ReadProcess+0x164>)
 80014f6:	789b      	ldrb	r3, [r3, #2]
 80014f8:	3b10      	subs	r3, #16
 80014fa:	2b30      	cmp	r3, #48	@ 0x30
 80014fc:	f200 8090 	bhi.w	8001620 <IOL_State_OP_ISDU_ReadProcess+0x13c>
 8001500:	a201      	add	r2, pc, #4	@ (adr r2, 8001508 <IOL_State_OP_ISDU_ReadProcess+0x24>)
 8001502:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001506:	bf00      	nop
 8001508:	0800160b 	.word	0x0800160b
 800150c:	08001621 	.word	0x08001621
 8001510:	080015cd 	.word	0x080015cd
 8001514:	080015e1 	.word	0x080015e1
 8001518:	08001621 	.word	0x08001621
 800151c:	080015d3 	.word	0x080015d3
 8001520:	08001611 	.word	0x08001611
 8001524:	08001617 	.word	0x08001617
 8001528:	080015e7 	.word	0x080015e7
 800152c:	080015ed 	.word	0x080015ed
 8001530:	080015f3 	.word	0x080015f3
 8001534:	08001621 	.word	0x08001621
 8001538:	08001621 	.word	0x08001621
 800153c:	08001621 	.word	0x08001621
 8001540:	08001621 	.word	0x08001621
 8001544:	08001621 	.word	0x08001621
 8001548:	08001621 	.word	0x08001621
 800154c:	08001621 	.word	0x08001621
 8001550:	08001621 	.word	0x08001621
 8001554:	08001621 	.word	0x08001621
 8001558:	080015ff 	.word	0x080015ff
 800155c:	08001605 	.word	0x08001605
 8001560:	08001621 	.word	0x08001621
 8001564:	08001621 	.word	0x08001621
 8001568:	08001621 	.word	0x08001621
 800156c:	08001621 	.word	0x08001621
 8001570:	08001621 	.word	0x08001621
 8001574:	08001621 	.word	0x08001621
 8001578:	08001621 	.word	0x08001621
 800157c:	08001621 	.word	0x08001621
 8001580:	08001621 	.word	0x08001621
 8001584:	08001621 	.word	0x08001621
 8001588:	08001621 	.word	0x08001621
 800158c:	08001621 	.word	0x08001621
 8001590:	08001621 	.word	0x08001621
 8001594:	08001621 	.word	0x08001621
 8001598:	08001621 	.word	0x08001621
 800159c:	08001621 	.word	0x08001621
 80015a0:	08001621 	.word	0x08001621
 80015a4:	08001621 	.word	0x08001621
 80015a8:	08001621 	.word	0x08001621
 80015ac:	08001621 	.word	0x08001621
 80015b0:	08001621 	.word	0x08001621
 80015b4:	08001621 	.word	0x08001621
 80015b8:	08001621 	.word	0x08001621
 80015bc:	08001621 	.word	0x08001621
 80015c0:	08001621 	.word	0x08001621
 80015c4:	08001621 	.word	0x08001621
 80015c8:	080015f9 	.word	0x080015f9
        {
            case IOL_Index_ProductName :
                IOL_Make_Resp_ProductName();
 80015cc:	f7ff fd58 	bl	8001080 <IOL_Make_Resp_ProductName>
                break;
 80015d0:	e026      	b.n	8001620 <IOL_State_OP_ISDU_ReadProcess+0x13c>

            case IOL_Index_SerialNumber :
                DEBUG_GPIO_TOGGLE;
 80015d2:	2101      	movs	r1, #1
 80015d4:	481d      	ldr	r0, [pc, #116]	@ (800164c <IOL_State_OP_ISDU_ReadProcess+0x168>)
 80015d6:	f001 fe41 	bl	800325c <HAL_GPIO_TogglePin>
                IOL_Make_Resp_SerialNumber();
 80015da:	f7ff fd87 	bl	80010ec <IOL_Make_Resp_SerialNumber>
                break;
 80015de:	e01f      	b.n	8001620 <IOL_State_OP_ISDU_ReadProcess+0x13c>
            // case IOL_Index_VendorText :
            //     break;
            // case IOL_Index_ProductText :
            //     break;
            case IOL_Index_ProductID :
                IOL_Make_Resp_ProductID();
 80015e0:	f7ff fdf0 	bl	80011c4 <IOL_Make_Resp_ProductID>
                break;
 80015e4:	e01c      	b.n	8001620 <IOL_State_OP_ISDU_ReadProcess+0x13c>

            case IOL_Index_ApplicationSpecificTag :
                IOL_Make_Resp_ApplicationSpecificTag();
 80015e6:	f7ff fdb7 	bl	8001158 <IOL_Make_Resp_ApplicationSpecificTag>
                break;
 80015ea:	e019      	b.n	8001620 <IOL_State_OP_ISDU_ReadProcess+0x13c>

            case IOL_Index_FunctionTag :
                IOL_Make_Resp_ApplicationSpecificTag();
 80015ec:	f7ff fdb4 	bl	8001158 <IOL_Make_Resp_ApplicationSpecificTag>
                break;
 80015f0:	e016      	b.n	8001620 <IOL_State_OP_ISDU_ReadProcess+0x13c>
                
            case IOL_Index_LocationTag :
                IOL_Make_Resp_ApplicationSpecificTag();
 80015f2:	f7ff fdb1 	bl	8001158 <IOL_Make_Resp_ApplicationSpecificTag>
                break;
 80015f6:	e013      	b.n	8001620 <IOL_State_OP_ISDU_ReadProcess+0x13c>

            case IOL_Index_PreferredIndex :
                // DEBUG_GPIO_TOGGLE;
                IOL_Make_Resp_ExampleParameter();
 80015f8:	f7ff fe1a 	bl	8001230 <IOL_Make_Resp_ExampleParameter>
                break;
 80015fc:	e010      	b.n	8001620 <IOL_State_OP_ISDU_ReadProcess+0x13c>

            case IOL_Index_DeviceStatus :
                IOL_Make_Resp_DeviceStatus();
 80015fe:	f7ff fe4d 	bl	800129c <IOL_Make_Resp_DeviceStatus>
                break;
 8001602:	e00d      	b.n	8001620 <IOL_State_OP_ISDU_ReadProcess+0x13c>

            case IOL_Index_DetailedDeviceStatus :
                IOL_Make_Resp_DetailedDeviceStatus();
 8001604:	f7ff fe80 	bl	8001308 <IOL_Make_Resp_DetailedDeviceStatus>
                break;
 8001608:	e00a      	b.n	8001620 <IOL_State_OP_ISDU_ReadProcess+0x13c>
            
            case IOL_Index_VendorName :
                IOL_Make_Resp_VendorName();
 800160a:	f7ff feb3 	bl	8001374 <IOL_Make_Resp_VendorName>
                break;
 800160e:	e007      	b.n	8001620 <IOL_State_OP_ISDU_ReadProcess+0x13c>

            case IOL_Index_HardwareRevision :
                IOL_Make_Resp_HWRevision();
 8001610:	f7ff fee6 	bl	80013e0 <IOL_Make_Resp_HWRevision>
                break;
 8001614:	e004      	b.n	8001620 <IOL_State_OP_ISDU_ReadProcess+0x13c>
            
            case IOL_Index_FirmwareRevision :
                IOL_Make_Resp_FWRevision();
 8001616:	f7ff ff19 	bl	800144c <IOL_Make_Resp_FWRevision>
 800161a:	e001      	b.n	8001620 <IOL_State_OP_ISDU_ReadProcess+0x13c>
        // device_ProcessDataOut_arr[IOL_OP_ISDU_OUT_PROCESSDATALENGTH - 1] = OP_CKS_GetChecksum(&device_ProcessDataOut_arr[0], IOL_OP_ISDU_OUT_PROCESSDATALENGTH - 1, 0); // CKS 생성
    }
    #endif
    else
    {
        IOL_Make_Resp_default();
 800161c:	f7ff ff4c 	bl	80014b8 <IOL_Make_Resp_default>
    }

    IOL_ENABLE;
 8001620:	2201      	movs	r2, #1
 8001622:	2140      	movs	r1, #64	@ 0x40
 8001624:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001628:	f001 fe00 	bl	800322c <HAL_GPIO_WritePin>
    
    if (HAL_UART_Transmit_IT(&huart1, device_ProcessDataIn_Arr, IOL_OP_ISDU_IN_PROCESSDATALENGTH) != HAL_OK)
 800162c:	2207      	movs	r2, #7
 800162e:	4908      	ldr	r1, [pc, #32]	@ (8001650 <IOL_State_OP_ISDU_ReadProcess+0x16c>)
 8001630:	4808      	ldr	r0, [pc, #32]	@ (8001654 <IOL_State_OP_ISDU_ReadProcess+0x170>)
 8001632:	f005 f8a7 	bl	8006784 <HAL_UART_Transmit_IT>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d001      	beq.n	8001640 <IOL_State_OP_ISDU_ReadProcess+0x15c>
    {
        Error_Handler();
 800163c:	f000 fa31 	bl	8001aa2 <Error_Handler>
    }

    return ;
 8001640:	bf00      	nop
 8001642:	bf00      	nop
}
 8001644:	4618      	mov	r0, r3
 8001646:	bd80      	pop	{r7, pc}
 8001648:	20000fec 	.word	0x20000fec
 800164c:	48000400 	.word	0x48000400
 8001650:	20000fe4 	.word	0x20000fe4
 8001654:	200010d4 	.word	0x200010d4

08001658 <IOL_State_OP_ISDU_WriteProcess>:

// ISDU OD Process
uint8_t IOL_State_OP_ISDU_WriteProcess (void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0
    if (isdudata.isdu_od_rxcplt == 1)
 800165c:	4b14      	ldr	r3, [pc, #80]	@ (80016b0 <IOL_State_OP_ISDU_WriteProcess+0x58>)
 800165e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001662:	2b01      	cmp	r3, #1
 8001664:	d107      	bne.n	8001676 <IOL_State_OP_ISDU_WriteProcess+0x1e>
    {
        isdudata.isdu_od_rxcplt = 0;
 8001666:	4b12      	ldr	r3, [pc, #72]	@ (80016b0 <IOL_State_OP_ISDU_WriteProcess+0x58>)
 8001668:	2200      	movs	r2, #0
 800166a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        isdudata.isdu_od_writereq_flag = 1;
 800166e:	4b10      	ldr	r3, [pc, #64]	@ (80016b0 <IOL_State_OP_ISDU_WriteProcess+0x58>)
 8001670:	2201      	movs	r2, #1
 8001672:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
    }
    device_ProcessDataOut_Arr[IOL_OP_ISDU_OUT_PROCESSDATALENGTH - 1] = OP_CKS_GetChecksum(&device_ProcessDataOut_Arr[0], IOL_OP_ISDU_OUT_PROCESSDATALENGTH - 1, 0); // CKS 생성
 8001676:	2200      	movs	r2, #0
 8001678:	2104      	movs	r1, #4
 800167a:	480e      	ldr	r0, [pc, #56]	@ (80016b4 <IOL_State_OP_ISDU_WriteProcess+0x5c>)
 800167c:	f7ff f8ac 	bl	80007d8 <OP_CKS_GetChecksum>
 8001680:	4603      	mov	r3, r0
 8001682:	461a      	mov	r2, r3
 8001684:	4b0b      	ldr	r3, [pc, #44]	@ (80016b4 <IOL_State_OP_ISDU_WriteProcess+0x5c>)
 8001686:	711a      	strb	r2, [r3, #4]

    IOL_ENABLE;
 8001688:	2201      	movs	r2, #1
 800168a:	2140      	movs	r1, #64	@ 0x40
 800168c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001690:	f001 fdcc 	bl	800322c <HAL_GPIO_WritePin>
    
    if (HAL_UART_Transmit_IT(&huart1, device_ProcessDataOut_Arr, IOL_OP_ISDU_OUT_PROCESSDATALENGTH) != HAL_OK)
 8001694:	2205      	movs	r2, #5
 8001696:	4907      	ldr	r1, [pc, #28]	@ (80016b4 <IOL_State_OP_ISDU_WriteProcess+0x5c>)
 8001698:	4807      	ldr	r0, [pc, #28]	@ (80016b8 <IOL_State_OP_ISDU_WriteProcess+0x60>)
 800169a:	f005 f873 	bl	8006784 <HAL_UART_Transmit_IT>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d001      	beq.n	80016a8 <IOL_State_OP_ISDU_WriteProcess+0x50>
    {
        Error_Handler();
 80016a4:	f000 f9fd 	bl	8001aa2 <Error_Handler>
    }

    return ;
 80016a8:	bf00      	nop
 80016aa:	bf00      	nop
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	20000fec 	.word	0x20000fec
 80016b4:	20000fdc 	.word	0x20000fdc
 80016b8:	200010d4 	.word	0x200010d4

080016bc <IOL_ConnectToIFM_Read>:
extern uint8_t device_ProcessDataOut_Arr[IOL_OP_ISDU_OUT_PROCESSDATALENGTH];
extern uint8_t ProcessDataIn_cnt;

// for 문 수정이 필요. j 카운트 부분이 쓸모없이 중복 실행.
void IOL_ConnectToIFM_Read (void)
{
 80016bc:	b480      	push	{r7}
 80016be:	b083      	sub	sp, #12
 80016c0:	af00      	add	r7, sp, #0
    uint8_t i, j = 0;
 80016c2:	2300      	movs	r3, #0
 80016c4:	71bb      	strb	r3, [r7, #6]
    uint8_t setpage1first[2] = {0x00, 0x22};
 80016c6:	f44f 5308 	mov.w	r3, #8704	@ 0x2200
 80016ca:	80bb      	strh	r3, [r7, #4]
    // uint8_t Pagevalue[16] = { 0 };

    for (i = 2; i < 16; i++)
 80016cc:	2302      	movs	r3, #2
 80016ce:	71fb      	strb	r3, [r7, #7]
 80016d0:	e01a      	b.n	8001708 <IOL_ConnectToIFM_Read+0x4c>
    {
        for(j = 0; j < 2; j++)
 80016d2:	2300      	movs	r3, #0
 80016d4:	71bb      	strb	r3, [r7, #6]
 80016d6:	e00a      	b.n	80016ee <IOL_ConnectToIFM_Read+0x32>
        {
            IOL_ISDUPage_value[j] = setpage1first[j];
 80016d8:	79ba      	ldrb	r2, [r7, #6]
 80016da:	79bb      	ldrb	r3, [r7, #6]
 80016dc:	3208      	adds	r2, #8
 80016de:	443a      	add	r2, r7
 80016e0:	f812 1c04 	ldrb.w	r1, [r2, #-4]
 80016e4:	4a0d      	ldr	r2, [pc, #52]	@ (800171c <IOL_ConnectToIFM_Read+0x60>)
 80016e6:	54d1      	strb	r1, [r2, r3]
        for(j = 0; j < 2; j++)
 80016e8:	79bb      	ldrb	r3, [r7, #6]
 80016ea:	3301      	adds	r3, #1
 80016ec:	71bb      	strb	r3, [r7, #6]
 80016ee:	79bb      	ldrb	r3, [r7, #6]
 80016f0:	2b01      	cmp	r3, #1
 80016f2:	d9f1      	bls.n	80016d8 <IOL_ConnectToIFM_Read+0x1c>
        }
        IOL_ISDUPage_value[i] = IOL_Page1_SeqValue[i - 1];
 80016f4:	79fb      	ldrb	r3, [r7, #7]
 80016f6:	1e5a      	subs	r2, r3, #1
 80016f8:	79fb      	ldrb	r3, [r7, #7]
 80016fa:	4909      	ldr	r1, [pc, #36]	@ (8001720 <IOL_ConnectToIFM_Read+0x64>)
 80016fc:	5c89      	ldrb	r1, [r1, r2]
 80016fe:	4a07      	ldr	r2, [pc, #28]	@ (800171c <IOL_ConnectToIFM_Read+0x60>)
 8001700:	54d1      	strb	r1, [r2, r3]
    for (i = 2; i < 16; i++)
 8001702:	79fb      	ldrb	r3, [r7, #7]
 8001704:	3301      	adds	r3, #1
 8001706:	71fb      	strb	r3, [r7, #7]
 8001708:	79fb      	ldrb	r3, [r7, #7]
 800170a:	2b0f      	cmp	r3, #15
 800170c:	d9e1      	bls.n	80016d2 <IOL_ConnectToIFM_Read+0x16>
    }
}
 800170e:	bf00      	nop
 8001710:	bf00      	nop
 8001712:	370c      	adds	r7, #12
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr
 800171c:	20000400 	.word	0x20000400
 8001720:	200001d8 	.word	0x200001d8

08001724 <IOL_State_OP_Page_ReadProcess>:

uint8_t IOL_State_OP_Page_ReadProcess (void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
    IOL_ConnectToIFM_Read();
 8001728:	f7ff ffc8 	bl	80016bc <IOL_ConnectToIFM_Read>

    device_Page_OD_arr[0] = IOL_ISDUPage_value[IOL_OP_OD_Page_Res_cnt];
 800172c:	4b1d      	ldr	r3, [pc, #116]	@ (80017a4 <IOL_State_OP_Page_ReadProcess+0x80>)
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	461a      	mov	r2, r3
 8001732:	4b1d      	ldr	r3, [pc, #116]	@ (80017a8 <IOL_State_OP_Page_ReadProcess+0x84>)
 8001734:	5c9a      	ldrb	r2, [r3, r2]
 8001736:	4b1d      	ldr	r3, [pc, #116]	@ (80017ac <IOL_State_OP_Page_ReadProcess+0x88>)
 8001738:	701a      	strb	r2, [r3, #0]
    device_Page_OD_arr[1] = IOL_ISDUPage_value[IOL_OP_OD_Page_Res_cnt + 1];
 800173a:	4b1a      	ldr	r3, [pc, #104]	@ (80017a4 <IOL_State_OP_Page_ReadProcess+0x80>)
 800173c:	781b      	ldrb	r3, [r3, #0]
 800173e:	3301      	adds	r3, #1
 8001740:	4a19      	ldr	r2, [pc, #100]	@ (80017a8 <IOL_State_OP_Page_ReadProcess+0x84>)
 8001742:	5cd2      	ldrb	r2, [r2, r3]
 8001744:	4b19      	ldr	r3, [pc, #100]	@ (80017ac <IOL_State_OP_Page_ReadProcess+0x88>)
 8001746:	705a      	strb	r2, [r3, #1]
    IOL_OP_OD_Page_Res_cnt++;
 8001748:	4b16      	ldr	r3, [pc, #88]	@ (80017a4 <IOL_State_OP_Page_ReadProcess+0x80>)
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	3301      	adds	r3, #1
 800174e:	b2da      	uxtb	r2, r3
 8001750:	4b14      	ldr	r3, [pc, #80]	@ (80017a4 <IOL_State_OP_Page_ReadProcess+0x80>)
 8001752:	701a      	strb	r2, [r3, #0]

    if (IOL_OP_OD_Page_Res_cnt >= 16)
 8001754:	4b13      	ldr	r3, [pc, #76]	@ (80017a4 <IOL_State_OP_Page_ReadProcess+0x80>)
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	2b0f      	cmp	r3, #15
 800175a:	d906      	bls.n	800176a <IOL_State_OP_Page_ReadProcess+0x46>
    {
        DEBUG_GPIO_TOGGLE; // 디버깅 트리거
 800175c:	2101      	movs	r1, #1
 800175e:	4814      	ldr	r0, [pc, #80]	@ (80017b0 <IOL_State_OP_Page_ReadProcess+0x8c>)
 8001760:	f001 fd7c 	bl	800325c <HAL_GPIO_TogglePin>
        IOL_OP_OD_Page_Res_cnt = 0;
 8001764:	4b0f      	ldr	r3, [pc, #60]	@ (80017a4 <IOL_State_OP_Page_ReadProcess+0x80>)
 8001766:	2200      	movs	r2, #0
 8001768:	701a      	strb	r2, [r3, #0]
    }

    device_Page_OD_arr[IOL_OP_ISDU_IN_PROCESSDATALENGTH - 1] = OP_CKS_GetChecksum(&device_Page_OD_arr[0], (IOL_OP_ISDU_IN_PROCESSDATALENGTH - 1), 0);
 800176a:	2200      	movs	r2, #0
 800176c:	2106      	movs	r1, #6
 800176e:	480f      	ldr	r0, [pc, #60]	@ (80017ac <IOL_State_OP_Page_ReadProcess+0x88>)
 8001770:	f7ff f832 	bl	80007d8 <OP_CKS_GetChecksum>
 8001774:	4603      	mov	r3, r0
 8001776:	461a      	mov	r2, r3
 8001778:	4b0c      	ldr	r3, [pc, #48]	@ (80017ac <IOL_State_OP_Page_ReadProcess+0x88>)
 800177a:	719a      	strb	r2, [r3, #6]

    IOL_ENABLE;
 800177c:	2201      	movs	r2, #1
 800177e:	2140      	movs	r1, #64	@ 0x40
 8001780:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001784:	f001 fd52 	bl	800322c <HAL_GPIO_WritePin>
    
    if (HAL_UART_Transmit_IT(&huart1, device_Page_OD_arr, IOL_OP_ISDU_IN_PROCESSDATALENGTH) != HAL_OK)
 8001788:	2207      	movs	r2, #7
 800178a:	4908      	ldr	r1, [pc, #32]	@ (80017ac <IOL_State_OP_Page_ReadProcess+0x88>)
 800178c:	4809      	ldr	r0, [pc, #36]	@ (80017b4 <IOL_State_OP_Page_ReadProcess+0x90>)
 800178e:	f004 fff9 	bl	8006784 <HAL_UART_Transmit_IT>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d001      	beq.n	800179c <IOL_State_OP_Page_ReadProcess+0x78>
    {
        Error_Handler();
 8001798:	f000 f983 	bl	8001aa2 <Error_Handler>
    }
}
 800179c:	bf00      	nop
 800179e:	4618      	mov	r0, r3
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	20000412 	.word	0x20000412
 80017a8:	20000400 	.word	0x20000400
 80017ac:	20000414 	.word	0x20000414
 80017b0:	48000400 	.word	0x48000400
 80017b4:	200010d4 	.word	0x200010d4

080017b8 <IOL_State_OP_Page_WriteProcess>:

uint8_t IOL_State_OP_Page_WriteProcess (void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0
    device_ProcessDataOut_Arr[IOL_OP_ISDU_OUT_PROCESSDATALENGTH - 2] = ProcessDataIn_cnt; // Test cnt Value 
 80017bc:	4b0f      	ldr	r3, [pc, #60]	@ (80017fc <IOL_State_OP_Page_WriteProcess+0x44>)
 80017be:	781a      	ldrb	r2, [r3, #0]
 80017c0:	4b0f      	ldr	r3, [pc, #60]	@ (8001800 <IOL_State_OP_Page_WriteProcess+0x48>)
 80017c2:	70da      	strb	r2, [r3, #3]
    device_ProcessDataOut_Arr[IOL_OP_ISDU_OUT_PROCESSDATALENGTH - 1] = OP_CKS_GetChecksum(&device_ProcessDataOut_Arr[0], IOL_OP_ISDU_OUT_PROCESSDATALENGTH - 1, 0);
 80017c4:	2200      	movs	r2, #0
 80017c6:	2104      	movs	r1, #4
 80017c8:	480d      	ldr	r0, [pc, #52]	@ (8001800 <IOL_State_OP_Page_WriteProcess+0x48>)
 80017ca:	f7ff f805 	bl	80007d8 <OP_CKS_GetChecksum>
 80017ce:	4603      	mov	r3, r0
 80017d0:	461a      	mov	r2, r3
 80017d2:	4b0b      	ldr	r3, [pc, #44]	@ (8001800 <IOL_State_OP_Page_WriteProcess+0x48>)
 80017d4:	711a      	strb	r2, [r3, #4]

    IOL_ENABLE;
 80017d6:	2201      	movs	r2, #1
 80017d8:	2140      	movs	r1, #64	@ 0x40
 80017da:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80017de:	f001 fd25 	bl	800322c <HAL_GPIO_WritePin>
    if (HAL_UART_Transmit_IT(&huart1, device_ProcessDataOut_Arr, IOL_OP_ISDU_OUT_PROCESSDATALENGTH) != HAL_OK)
 80017e2:	2205      	movs	r2, #5
 80017e4:	4906      	ldr	r1, [pc, #24]	@ (8001800 <IOL_State_OP_Page_WriteProcess+0x48>)
 80017e6:	4807      	ldr	r0, [pc, #28]	@ (8001804 <IOL_State_OP_Page_WriteProcess+0x4c>)
 80017e8:	f004 ffcc 	bl	8006784 <HAL_UART_Transmit_IT>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d001      	beq.n	80017f6 <IOL_State_OP_Page_WriteProcess+0x3e>
    {
        Error_Handler();
 80017f2:	f000 f956 	bl	8001aa2 <Error_Handler>
    }
}
 80017f6:	bf00      	nop
 80017f8:	4618      	mov	r0, r3
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	20000428 	.word	0x20000428
 8001800:	20000fdc 	.word	0x20000fdc
 8001804:	200010d4 	.word	0x200010d4

08001808 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800180e:	4b12      	ldr	r3, [pc, #72]	@ (8001858 <MX_DMA_Init+0x50>)
 8001810:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001812:	4a11      	ldr	r2, [pc, #68]	@ (8001858 <MX_DMA_Init+0x50>)
 8001814:	f043 0304 	orr.w	r3, r3, #4
 8001818:	6493      	str	r3, [r2, #72]	@ 0x48
 800181a:	4b0f      	ldr	r3, [pc, #60]	@ (8001858 <MX_DMA_Init+0x50>)
 800181c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800181e:	f003 0304 	and.w	r3, r3, #4
 8001822:	607b      	str	r3, [r7, #4]
 8001824:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001826:	4b0c      	ldr	r3, [pc, #48]	@ (8001858 <MX_DMA_Init+0x50>)
 8001828:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800182a:	4a0b      	ldr	r2, [pc, #44]	@ (8001858 <MX_DMA_Init+0x50>)
 800182c:	f043 0301 	orr.w	r3, r3, #1
 8001830:	6493      	str	r3, [r2, #72]	@ 0x48
 8001832:	4b09      	ldr	r3, [pc, #36]	@ (8001858 <MX_DMA_Init+0x50>)
 8001834:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001836:	f003 0301 	and.w	r3, r3, #1
 800183a:	603b      	str	r3, [r7, #0]
 800183c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800183e:	2200      	movs	r2, #0
 8001840:	2100      	movs	r1, #0
 8001842:	200b      	movs	r0, #11
 8001844:	f001 f809 	bl	800285a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001848:	200b      	movs	r0, #11
 800184a:	f001 f820 	bl	800288e <HAL_NVIC_EnableIRQ>

}
 800184e:	bf00      	nop
 8001850:	3708      	adds	r7, #8
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	40021000 	.word	0x40021000

0800185c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b08a      	sub	sp, #40	@ 0x28
 8001860:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001862:	f107 0314 	add.w	r3, r7, #20
 8001866:	2200      	movs	r2, #0
 8001868:	601a      	str	r2, [r3, #0]
 800186a:	605a      	str	r2, [r3, #4]
 800186c:	609a      	str	r2, [r3, #8]
 800186e:	60da      	str	r2, [r3, #12]
 8001870:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001872:	4b43      	ldr	r3, [pc, #268]	@ (8001980 <MX_GPIO_Init+0x124>)
 8001874:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001876:	4a42      	ldr	r2, [pc, #264]	@ (8001980 <MX_GPIO_Init+0x124>)
 8001878:	f043 0304 	orr.w	r3, r3, #4
 800187c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800187e:	4b40      	ldr	r3, [pc, #256]	@ (8001980 <MX_GPIO_Init+0x124>)
 8001880:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001882:	f003 0304 	and.w	r3, r3, #4
 8001886:	613b      	str	r3, [r7, #16]
 8001888:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800188a:	4b3d      	ldr	r3, [pc, #244]	@ (8001980 <MX_GPIO_Init+0x124>)
 800188c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800188e:	4a3c      	ldr	r2, [pc, #240]	@ (8001980 <MX_GPIO_Init+0x124>)
 8001890:	f043 0320 	orr.w	r3, r3, #32
 8001894:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001896:	4b3a      	ldr	r3, [pc, #232]	@ (8001980 <MX_GPIO_Init+0x124>)
 8001898:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800189a:	f003 0320 	and.w	r3, r3, #32
 800189e:	60fb      	str	r3, [r7, #12]
 80018a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018a2:	4b37      	ldr	r3, [pc, #220]	@ (8001980 <MX_GPIO_Init+0x124>)
 80018a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018a6:	4a36      	ldr	r2, [pc, #216]	@ (8001980 <MX_GPIO_Init+0x124>)
 80018a8:	f043 0301 	orr.w	r3, r3, #1
 80018ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018ae:	4b34      	ldr	r3, [pc, #208]	@ (8001980 <MX_GPIO_Init+0x124>)
 80018b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018b2:	f003 0301 	and.w	r3, r3, #1
 80018b6:	60bb      	str	r3, [r7, #8]
 80018b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018ba:	4b31      	ldr	r3, [pc, #196]	@ (8001980 <MX_GPIO_Init+0x124>)
 80018bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018be:	4a30      	ldr	r2, [pc, #192]	@ (8001980 <MX_GPIO_Init+0x124>)
 80018c0:	f043 0302 	orr.w	r3, r3, #2
 80018c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018c6:	4b2e      	ldr	r3, [pc, #184]	@ (8001980 <MX_GPIO_Init+0x124>)
 80018c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018ca:	f003 0302 	and.w	r3, r3, #2
 80018ce:	607b      	str	r3, [r7, #4]
 80018d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80018d2:	2200      	movs	r2, #0
 80018d4:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 80018d8:	482a      	ldr	r0, [pc, #168]	@ (8001984 <MX_GPIO_Init+0x128>)
 80018da:	f001 fca7 	bl	800322c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 80018de:	2200      	movs	r2, #0
 80018e0:	2140      	movs	r1, #64	@ 0x40
 80018e2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018e6:	f001 fca1 	bl	800322c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80018ea:	2200      	movs	r2, #0
 80018ec:	2101      	movs	r1, #1
 80018ee:	4826      	ldr	r0, [pc, #152]	@ (8001988 <MX_GPIO_Init+0x12c>)
 80018f0:	f001 fc9c 	bl	800322c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80018f4:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80018f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018fa:	2301      	movs	r3, #1
 80018fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fe:	2300      	movs	r3, #0
 8001900:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001902:	2300      	movs	r3, #0
 8001904:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001906:	f107 0314 	add.w	r3, r7, #20
 800190a:	4619      	mov	r1, r3
 800190c:	481d      	ldr	r0, [pc, #116]	@ (8001984 <MX_GPIO_Init+0x128>)
 800190e:	f001 fb0b 	bl	8002f28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001912:	23a0      	movs	r3, #160	@ 0xa0
 8001914:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001916:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800191a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800191c:	2300      	movs	r3, #0
 800191e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001920:	f107 0314 	add.w	r3, r7, #20
 8001924:	4619      	mov	r1, r3
 8001926:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800192a:	f001 fafd 	bl	8002f28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800192e:	2340      	movs	r3, #64	@ 0x40
 8001930:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001932:	2301      	movs	r3, #1
 8001934:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001936:	2300      	movs	r3, #0
 8001938:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800193a:	2300      	movs	r3, #0
 800193c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800193e:	f107 0314 	add.w	r3, r7, #20
 8001942:	4619      	mov	r1, r3
 8001944:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001948:	f001 faee 	bl	8002f28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800194c:	2301      	movs	r3, #1
 800194e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001950:	2301      	movs	r3, #1
 8001952:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001954:	2300      	movs	r3, #0
 8001956:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001958:	2300      	movs	r3, #0
 800195a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800195c:	f107 0314 	add.w	r3, r7, #20
 8001960:	4619      	mov	r1, r3
 8001962:	4809      	ldr	r0, [pc, #36]	@ (8001988 <MX_GPIO_Init+0x12c>)
 8001964:	f001 fae0 	bl	8002f28 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001968:	2200      	movs	r2, #0
 800196a:	2100      	movs	r1, #0
 800196c:	2017      	movs	r0, #23
 800196e:	f000 ff74 	bl	800285a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001972:	2017      	movs	r0, #23
 8001974:	f000 ff8b 	bl	800288e <HAL_NVIC_EnableIRQ>

}
 8001978:	bf00      	nop
 800197a:	3728      	adds	r7, #40	@ 0x28
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}
 8001980:	40021000 	.word	0x40021000
 8001984:	48000800 	.word	0x48000800
 8001988:	48000400 	.word	0x48000400

0800198c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001990:	f000 fdf5 	bl	800257e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001994:	f000 f83a 	bl	8001a0c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001998:	f7ff ff60 	bl	800185c <MX_GPIO_Init>
  MX_DMA_Init();
 800199c:	f7ff ff34 	bl	8001808 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80019a0:	f000 fc2a 	bl	80021f8 <MX_USART1_UART_Init>
  MX_USB_Device_Init();
 80019a4:	f009 ffd8 	bl	800b958 <MX_USB_Device_Init>
  MX_TIM1_Init();
 80019a8:	f000 fbac 	bl	8002104 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  Q_Init(&USB_TX_Q, (uint8_t *) USB_TX_Data, quedata_arraylength);
 80019ac:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80019b0:	4910      	ldr	r1, [pc, #64]	@ (80019f4 <main+0x68>)
 80019b2:	4811      	ldr	r0, [pc, #68]	@ (80019f8 <main+0x6c>)
 80019b4:	f000 f87b 	bl	8001aae <Q_Init>

  HAL_Delay(3000);
 80019b8:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80019bc:	f000 fe50 	bl	8002660 <HAL_Delay>
  HAL_TIM_Base_Start_IT(&htim1);
 80019c0:	480e      	ldr	r0, [pc, #56]	@ (80019fc <main+0x70>)
 80019c2:	f004 f9b3 	bl	8005d2c <HAL_TIM_Base_Start_IT>
  GetClockSourcePrint();
 80019c6:	f000 fd6f 	bl	80024a8 <GetClockSourcePrint>
  BootMessagePrint();
 80019ca:	f000 fd3d 	bl	8002448 <BootMessagePrint>

  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, (uint8_t *)uart1_rx_IDLE_buf, UART_RX_IDLE_BUFSIZE);
 80019ce:	2264      	movs	r2, #100	@ 0x64
 80019d0:	490b      	ldr	r1, [pc, #44]	@ (8001a00 <main+0x74>)
 80019d2:	480c      	ldr	r0, [pc, #48]	@ (8001a04 <main+0x78>)
 80019d4:	f006 fc44 	bl	8008260 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 80019d8:	4b0b      	ldr	r3, [pc, #44]	@ (8001a08 <main+0x7c>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	681a      	ldr	r2, [r3, #0]
 80019de:	4b0a      	ldr	r3, [pc, #40]	@ (8001a08 <main+0x7c>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f022 0204 	bic.w	r2, r2, #4
 80019e6:	601a      	str	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    User_Toggle_Led();
 80019e8:	f000 fcf6 	bl	80023d8 <User_Toggle_Led>
    ProcessDataIn_IncreaseCntValue();
 80019ec:	f000 fd0a 	bl	8002404 <ProcessDataIn_IncreaseCntValue>
    User_Toggle_Led();
 80019f0:	bf00      	nop
 80019f2:	e7f9      	b.n	80019e8 <main+0x5c>
 80019f4:	20000814 	.word	0x20000814
 80019f8:	20001168 	.word	0x20001168
 80019fc:	20001028 	.word	0x20001028
 8001a00:	20000c00 	.word	0x20000c00
 8001a04:	200010d4 	.word	0x200010d4
 8001a08:	20001074 	.word	0x20001074

08001a0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b094      	sub	sp, #80	@ 0x50
 8001a10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a12:	f107 0318 	add.w	r3, r7, #24
 8001a16:	2238      	movs	r2, #56	@ 0x38
 8001a18:	2100      	movs	r1, #0
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f00a fec8 	bl	800c7b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a20:	1d3b      	adds	r3, r7, #4
 8001a22:	2200      	movs	r2, #0
 8001a24:	601a      	str	r2, [r3, #0]
 8001a26:	605a      	str	r2, [r3, #4]
 8001a28:	609a      	str	r2, [r3, #8]
 8001a2a:	60da      	str	r2, [r3, #12]
 8001a2c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001a2e:	2000      	movs	r0, #0
 8001a30:	f003 f952 	bl	8004cd8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8001a34:	2321      	movs	r3, #33	@ 0x21
 8001a36:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001a38:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8001a3c:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a42:	2302      	movs	r3, #2
 8001a44:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a46:	2303      	movs	r3, #3
 8001a48:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 8001a4a:	2306      	movs	r3, #6
 8001a4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001a4e:	2355      	movs	r3, #85	@ 0x55
 8001a50:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a52:	2302      	movs	r3, #2
 8001a54:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 8001a56:	2304      	movs	r3, #4
 8001a58:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001a5a:	2302      	movs	r3, #2
 8001a5c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a5e:	f107 0318 	add.w	r3, r7, #24
 8001a62:	4618      	mov	r0, r3
 8001a64:	f003 f9ec 	bl	8004e40 <HAL_RCC_OscConfig>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d001      	beq.n	8001a72 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001a6e:	f000 f818 	bl	8001aa2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a72:	230f      	movs	r3, #15
 8001a74:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a76:	2303      	movs	r3, #3
 8001a78:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a82:	2300      	movs	r3, #0
 8001a84:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001a86:	1d3b      	adds	r3, r7, #4
 8001a88:	2104      	movs	r1, #4
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f003 fcea 	bl	8005464 <HAL_RCC_ClockConfig>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d001      	beq.n	8001a9a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001a96:	f000 f804 	bl	8001aa2 <Error_Handler>
  }
}
 8001a9a:	bf00      	nop
 8001a9c:	3750      	adds	r7, #80	@ 0x50
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}

08001aa2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001aa2:	b480      	push	{r7}
 8001aa4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001aa6:	b672      	cpsid	i
}
 8001aa8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001aaa:	bf00      	nop
 8001aac:	e7fd      	b.n	8001aaa <Error_Handler+0x8>

08001aae <Q_Init>:
#include "queue.h"

void Q_Init(Q_queue_t *queue, uint8_t *data, uint16_t len){
 8001aae:	b480      	push	{r7}
 8001ab0:	b085      	sub	sp, #20
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	60f8      	str	r0, [r7, #12]
 8001ab6:	60b9      	str	r1, [r7, #8]
 8001ab8:	4613      	mov	r3, r2
 8001aba:	80fb      	strh	r3, [r7, #6]
    queue->idx_read = 0;
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	2200      	movs	r2, #0
 8001ac0:	809a      	strh	r2, [r3, #4]
    queue->idx_write = 0;
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	805a      	strh	r2, [r3, #2]
    queue->count_full = 0;
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	2200      	movs	r2, #0
 8001acc:	80da      	strh	r2, [r3, #6]
    queue->count_empty = 0;
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	811a      	strh	r2, [r3, #8]
    queue->size = len;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	88fa      	ldrh	r2, [r7, #6]
 8001ad8:	801a      	strh	r2, [r3, #0]
    queue->data = data;
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	68ba      	ldr	r2, [r7, #8]
 8001ade:	60da      	str	r2, [r3, #12]
}
 8001ae0:	bf00      	nop
 8001ae2:	3714      	adds	r7, #20
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aea:	4770      	bx	lr

08001aec <Q_Write>:

void Q_Clear(Q_queue_t *queue){
    queue->idx_write = queue->idx_read;
}

bool Q_Write(Q_queue_t *queue, uint8_t *data, uint16_t len){
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b088      	sub	sp, #32
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	60f8      	str	r0, [r7, #12]
 8001af4:	60b9      	str	r1, [r7, #8]
 8001af6:	4613      	mov	r3, r2
 8001af8:	80fb      	strh	r3, [r7, #6]
    int empty_bytes;
    uint16_t next_idx;
    uint16_t num_first;
    bool ret = false;
 8001afa:	2300      	movs	r3, #0
 8001afc:	77fb      	strb	r3, [r7, #31]
    
    empty_bytes = Q_NumEmptyBytes(queue);  
 8001afe:	68f8      	ldr	r0, [r7, #12]
 8001b00:	f000 f8ea 	bl	8001cd8 <Q_NumEmptyBytes>
 8001b04:	4603      	mov	r3, r0
 8001b06:	61bb      	str	r3, [r7, #24]
    if(empty_bytes >= len){
 8001b08:	88fb      	ldrh	r3, [r7, #6]
 8001b0a:	69ba      	ldr	r2, [r7, #24]
 8001b0c:	429a      	cmp	r2, r3
 8001b0e:	db44      	blt.n	8001b9a <Q_Write+0xae>
        next_idx = queue->idx_write + len;
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001b16:	b29a      	uxth	r2, r3
 8001b18:	88fb      	ldrh	r3, [r7, #6]
 8001b1a:	4413      	add	r3, r2
 8001b1c:	82fb      	strh	r3, [r7, #22]
        if(next_idx < queue->size){
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	881b      	ldrh	r3, [r3, #0]
 8001b22:	8afa      	ldrh	r2, [r7, #22]
 8001b24:	429a      	cmp	r2, r3
 8001b26:	d20b      	bcs.n	8001b40 <Q_Write+0x54>
            memcpy(&(queue->data[queue->idx_write]),data,len);  //memcpy(dest,source,num)
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	68db      	ldr	r3, [r3, #12]
 8001b2c:	68fa      	ldr	r2, [r7, #12]
 8001b2e:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8001b32:	4413      	add	r3, r2
 8001b34:	88fa      	ldrh	r2, [r7, #6]
 8001b36:	68b9      	ldr	r1, [r7, #8]
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f00a feb4 	bl	800c8a6 <memcpy>
 8001b3e:	e01d      	b.n	8001b7c <Q_Write+0x90>
        }
        else{
            num_first = queue->size-queue->idx_write;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	881a      	ldrh	r2, [r3, #0]
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001b4a:	b29b      	uxth	r3, r3
 8001b4c:	1ad3      	subs	r3, r2, r3
 8001b4e:	82bb      	strh	r3, [r7, #20]
            memcpy(&(queue->data[queue->idx_write]),data,num_first);
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	68db      	ldr	r3, [r3, #12]
 8001b54:	68fa      	ldr	r2, [r7, #12]
 8001b56:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8001b5a:	4413      	add	r3, r2
 8001b5c:	8aba      	ldrh	r2, [r7, #20]
 8001b5e:	68b9      	ldr	r1, [r7, #8]
 8001b60:	4618      	mov	r0, r3
 8001b62:	f00a fea0 	bl	800c8a6 <memcpy>
            memcpy(&(queue->data[0]),&(data[num_first]),len-num_first);
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	68d8      	ldr	r0, [r3, #12]
 8001b6a:	8abb      	ldrh	r3, [r7, #20]
 8001b6c:	68ba      	ldr	r2, [r7, #8]
 8001b6e:	18d1      	adds	r1, r2, r3
 8001b70:	88fa      	ldrh	r2, [r7, #6]
 8001b72:	8abb      	ldrh	r3, [r7, #20]
 8001b74:	1ad3      	subs	r3, r2, r3
 8001b76:	461a      	mov	r2, r3
 8001b78:	f00a fe95 	bl	800c8a6 <memcpy>
        }        
        queue->idx_write = next_idx % queue->size;
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	881a      	ldrh	r2, [r3, #0]
 8001b80:	8afb      	ldrh	r3, [r7, #22]
 8001b82:	fbb3 f1f2 	udiv	r1, r3, r2
 8001b86:	fb01 f202 	mul.w	r2, r1, r2
 8001b8a:	1a9b      	subs	r3, r3, r2
 8001b8c:	b29b      	uxth	r3, r3
 8001b8e:	b21a      	sxth	r2, r3
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	805a      	strh	r2, [r3, #2]
        ret = true;        
 8001b94:	2301      	movs	r3, #1
 8001b96:	77fb      	strb	r3, [r7, #31]
 8001b98:	e00e      	b.n	8001bb8 <Q_Write+0xcc>
    }
    else    queue->count_full = _upperlimit(queue->count_full+1,0xFFFF);      
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	88db      	ldrh	r3, [r3, #6]
 8001b9e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d004      	beq.n	8001bb0 <Q_Write+0xc4>
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	88db      	ldrh	r3, [r3, #6]
 8001baa:	3301      	adds	r3, #1
 8001bac:	b29a      	uxth	r2, r3
 8001bae:	e001      	b.n	8001bb4 <Q_Write+0xc8>
 8001bb0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	80da      	strh	r2, [r3, #6]
    return ret;    
 8001bb8:	7ffb      	ldrb	r3, [r7, #31]
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	3720      	adds	r7, #32
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}

08001bc2 <Q_Read>:
    }
    else    queue->count_full = _upperlimit(queue->count_full+1,0xFFFF);
    return ret;    
}

bool Q_Read(Q_queue_t *queue, uint8_t *data, uint16_t len){
 8001bc2:	b580      	push	{r7, lr}
 8001bc4:	b086      	sub	sp, #24
 8001bc6:	af00      	add	r7, sp, #0
 8001bc8:	60f8      	str	r0, [r7, #12]
 8001bca:	60b9      	str	r1, [r7, #8]
 8001bcc:	4613      	mov	r3, r2
 8001bce:	80fb      	strh	r3, [r7, #6]
    bool ret;
    uint16_t next_idx;
    uint16_t num_first;

    if(Q_NumContents(queue) >= len){
 8001bd0:	68f8      	ldr	r0, [r7, #12]
 8001bd2:	f000 f864 	bl	8001c9e <Q_NumContents>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	461a      	mov	r2, r3
 8001bda:	88fb      	ldrh	r3, [r7, #6]
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d848      	bhi.n	8001c72 <Q_Read+0xb0>
        next_idx = queue->idx_read + len;
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001be6:	b29a      	uxth	r2, r3
 8001be8:	88fb      	ldrh	r3, [r7, #6]
 8001bea:	4413      	add	r3, r2
 8001bec:	82bb      	strh	r3, [r7, #20]
        if(next_idx < queue->size){
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	881b      	ldrh	r3, [r3, #0]
 8001bf2:	8aba      	ldrh	r2, [r7, #20]
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	d20b      	bcs.n	8001c10 <Q_Read+0x4e>
            memcpy(data,&(queue->data[queue->idx_read]),len);  //memcpy(dest,source,num)
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	68db      	ldr	r3, [r3, #12]
 8001bfc:	68fa      	ldr	r2, [r7, #12]
 8001bfe:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8001c02:	4413      	add	r3, r2
 8001c04:	88fa      	ldrh	r2, [r7, #6]
 8001c06:	4619      	mov	r1, r3
 8001c08:	68b8      	ldr	r0, [r7, #8]
 8001c0a:	f00a fe4c 	bl	800c8a6 <memcpy>
 8001c0e:	e01d      	b.n	8001c4c <Q_Read+0x8a>
        }
        else{
            num_first = queue->size-queue->idx_read;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	881a      	ldrh	r2, [r3, #0]
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001c1a:	b29b      	uxth	r3, r3
 8001c1c:	1ad3      	subs	r3, r2, r3
 8001c1e:	827b      	strh	r3, [r7, #18]
            memcpy(data,&(queue->data[queue->idx_read]),num_first);  //memcpy(dest,source,num)
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	68db      	ldr	r3, [r3, #12]
 8001c24:	68fa      	ldr	r2, [r7, #12]
 8001c26:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8001c2a:	4413      	add	r3, r2
 8001c2c:	8a7a      	ldrh	r2, [r7, #18]
 8001c2e:	4619      	mov	r1, r3
 8001c30:	68b8      	ldr	r0, [r7, #8]
 8001c32:	f00a fe38 	bl	800c8a6 <memcpy>
            memcpy(&(data[num_first]),&(queue->data[0]),len-num_first);
 8001c36:	8a7b      	ldrh	r3, [r7, #18]
 8001c38:	68ba      	ldr	r2, [r7, #8]
 8001c3a:	18d0      	adds	r0, r2, r3
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	68d9      	ldr	r1, [r3, #12]
 8001c40:	88fa      	ldrh	r2, [r7, #6]
 8001c42:	8a7b      	ldrh	r3, [r7, #18]
 8001c44:	1ad3      	subs	r3, r2, r3
 8001c46:	461a      	mov	r2, r3
 8001c48:	f00a fe2d 	bl	800c8a6 <memcpy>
        }        
        queue->idx_read = (queue->idx_read+len)%queue->size;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001c52:	461a      	mov	r2, r3
 8001c54:	88fb      	ldrh	r3, [r7, #6]
 8001c56:	4413      	add	r3, r2
 8001c58:	68fa      	ldr	r2, [r7, #12]
 8001c5a:	8812      	ldrh	r2, [r2, #0]
 8001c5c:	fb93 f1f2 	sdiv	r1, r3, r2
 8001c60:	fb01 f202 	mul.w	r2, r1, r2
 8001c64:	1a9b      	subs	r3, r3, r2
 8001c66:	b21a      	sxth	r2, r3
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	809a      	strh	r2, [r3, #4]
        ret = true;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	75fb      	strb	r3, [r7, #23]
 8001c70:	e010      	b.n	8001c94 <Q_Read+0xd2>
    }
    else{
        queue->count_empty = _upperlimit(queue->count_empty+1,0xFFFF);
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	891b      	ldrh	r3, [r3, #8]
 8001c76:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d004      	beq.n	8001c88 <Q_Read+0xc6>
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	891b      	ldrh	r3, [r3, #8]
 8001c82:	3301      	adds	r3, #1
 8001c84:	b29a      	uxth	r2, r3
 8001c86:	e001      	b.n	8001c8c <Q_Read+0xca>
 8001c88:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	811a      	strh	r2, [r3, #8]
        ret = false;
 8001c90:	2300      	movs	r3, #0
 8001c92:	75fb      	strb	r3, [r7, #23]
    }
    return ret;
 8001c94:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	3718      	adds	r7, #24
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}

08001c9e <Q_NumContents>:
    else    queue->count_empty = _upperlimit(queue->count_empty+1,0xFFFF);
    return ret;
}


uint16_t Q_NumContents(Q_queue_t *queue){
 8001c9e:	b480      	push	{r7}
 8001ca0:	b083      	sub	sp, #12
 8001ca2:	af00      	add	r7, sp, #0
 8001ca4:	6078      	str	r0, [r7, #4]
    return (uint16_t)((queue->size + queue->idx_write - queue->idx_read)%(queue->size));    
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	881b      	ldrh	r3, [r3, #0]
 8001caa:	461a      	mov	r2, r3
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001cb2:	4413      	add	r3, r2
 8001cb4:	687a      	ldr	r2, [r7, #4]
 8001cb6:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8001cba:	1a9b      	subs	r3, r3, r2
 8001cbc:	687a      	ldr	r2, [r7, #4]
 8001cbe:	8812      	ldrh	r2, [r2, #0]
 8001cc0:	fb93 f1f2 	sdiv	r1, r3, r2
 8001cc4:	fb01 f202 	mul.w	r2, r1, r2
 8001cc8:	1a9b      	subs	r3, r3, r2
 8001cca:	b29b      	uxth	r3, r3
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	370c      	adds	r7, #12
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr

08001cd8 <Q_NumEmptyBytes>:

uint16_t Q_NumEmptyBytes(Q_queue_t *queue){
 8001cd8:	b590      	push	{r4, r7, lr}
 8001cda:	b083      	sub	sp, #12
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
    return queue->size - (int)Q_NumContents(queue) - 1;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	881c      	ldrh	r4, [r3, #0]
 8001ce4:	6878      	ldr	r0, [r7, #4]
 8001ce6:	f7ff ffda 	bl	8001c9e <Q_NumContents>
 8001cea:	4603      	mov	r3, r0
 8001cec:	1ae3      	subs	r3, r4, r3
 8001cee:	b29b      	uxth	r3, r3
 8001cf0:	3b01      	subs	r3, #1
 8001cf2:	b29b      	uxth	r3, r3
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	370c      	adds	r7, #12
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd90      	pop	{r4, r7, pc}

08001cfc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b082      	sub	sp, #8
 8001d00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d02:	4b0f      	ldr	r3, [pc, #60]	@ (8001d40 <HAL_MspInit+0x44>)
 8001d04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d06:	4a0e      	ldr	r2, [pc, #56]	@ (8001d40 <HAL_MspInit+0x44>)
 8001d08:	f043 0301 	orr.w	r3, r3, #1
 8001d0c:	6613      	str	r3, [r2, #96]	@ 0x60
 8001d0e:	4b0c      	ldr	r3, [pc, #48]	@ (8001d40 <HAL_MspInit+0x44>)
 8001d10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d12:	f003 0301 	and.w	r3, r3, #1
 8001d16:	607b      	str	r3, [r7, #4]
 8001d18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d1a:	4b09      	ldr	r3, [pc, #36]	@ (8001d40 <HAL_MspInit+0x44>)
 8001d1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d1e:	4a08      	ldr	r2, [pc, #32]	@ (8001d40 <HAL_MspInit+0x44>)
 8001d20:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d24:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d26:	4b06      	ldr	r3, [pc, #24]	@ (8001d40 <HAL_MspInit+0x44>)
 8001d28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d2e:	603b      	str	r3, [r7, #0]
 8001d30:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001d32:	f003 f875 	bl	8004e20 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d36:	bf00      	nop
 8001d38:	3708      	adds	r7, #8
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	40021000 	.word	0x40021000

08001d44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d44:	b480      	push	{r7}
 8001d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001d48:	bf00      	nop
 8001d4a:	e7fd      	b.n	8001d48 <NMI_Handler+0x4>

08001d4c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d50:	bf00      	nop
 8001d52:	e7fd      	b.n	8001d50 <HardFault_Handler+0x4>

08001d54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d54:	b480      	push	{r7}
 8001d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d58:	bf00      	nop
 8001d5a:	e7fd      	b.n	8001d58 <MemManage_Handler+0x4>

08001d5c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d60:	bf00      	nop
 8001d62:	e7fd      	b.n	8001d60 <BusFault_Handler+0x4>

08001d64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d68:	bf00      	nop
 8001d6a:	e7fd      	b.n	8001d68 <UsageFault_Handler+0x4>

08001d6c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d70:	bf00      	nop
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr

08001d7a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d7a:	b480      	push	{r7}
 8001d7c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d7e:	bf00      	nop
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr

08001d88 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d8c:	bf00      	nop
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr

08001d96 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d96:	b580      	push	{r7, lr}
 8001d98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d9a:	f000 fc43 	bl	8002624 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d9e:	bf00      	nop
 8001da0:	bd80      	pop	{r7, pc}
	...

08001da4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001da8:	4802      	ldr	r0, [pc, #8]	@ (8001db4 <DMA1_Channel1_IRQHandler+0x10>)
 8001daa:	f000 ff6e 	bl	8002c8a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001dae:	bf00      	nop
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	20001074 	.word	0x20001074

08001db8 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001dbc:	4802      	ldr	r0, [pc, #8]	@ (8001dc8 <USB_LP_IRQHandler+0x10>)
 8001dbe:	f001 fb7a 	bl	80034b6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8001dc2:	bf00      	nop
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	200027c8 	.word	0x200027c8

08001dcc <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8001dd0:	2020      	movs	r0, #32
 8001dd2:	f001 fa5d 	bl	8003290 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8001dd6:	2080      	movs	r0, #128	@ 0x80
 8001dd8:	f001 fa5a 	bl	8003290 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001ddc:	bf00      	nop
 8001dde:	bd80      	pop	{r7, pc}

08001de0 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001de4:	4802      	ldr	r0, [pc, #8]	@ (8001df0 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001de6:	f004 f80b 	bl	8005e00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001dea:	bf00      	nop
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	20001028 	.word	0x20001028

08001df4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
  if ((__HAL_UART_GET_FLAG(&huart1, UART_FLAG_FE)) || (__HAL_UART_GET_FLAG(&huart1, UART_FLAG_ORE)))
 8001df8:	4b0d      	ldr	r3, [pc, #52]	@ (8001e30 <USART1_IRQHandler+0x3c>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	69db      	ldr	r3, [r3, #28]
 8001dfe:	f003 0302 	and.w	r3, r3, #2
 8001e02:	2b02      	cmp	r3, #2
 8001e04:	d006      	beq.n	8001e14 <USART1_IRQHandler+0x20>
 8001e06:	4b0a      	ldr	r3, [pc, #40]	@ (8001e30 <USART1_IRQHandler+0x3c>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	69db      	ldr	r3, [r3, #28]
 8001e0c:	f003 0308 	and.w	r3, r3, #8
 8001e10:	2b08      	cmp	r3, #8
 8001e12:	d107      	bne.n	8001e24 <USART1_IRQHandler+0x30>
  {
    __HAL_UART_CLEAR_OREFLAG(&huart1);
 8001e14:	4b06      	ldr	r3, [pc, #24]	@ (8001e30 <USART1_IRQHandler+0x3c>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	2208      	movs	r2, #8
 8001e1a:	621a      	str	r2, [r3, #32]
    __HAL_UART_CLEAR_FEFLAG(&huart1);
 8001e1c:	4b04      	ldr	r3, [pc, #16]	@ (8001e30 <USART1_IRQHandler+0x3c>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	2202      	movs	r2, #2
 8001e22:	621a      	str	r2, [r3, #32]
  }
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001e24:	4802      	ldr	r0, [pc, #8]	@ (8001e30 <USART1_IRQHandler+0x3c>)
 8001e26:	f004 fd41 	bl	80068ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001e2a:	bf00      	nop
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	200010d4 	.word	0x200010d4

08001e34 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 1 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b084      	sub	sp, #16
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  uint16_t num = 0;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	81fb      	strh	r3, [r7, #14]

  if ( (num = Q_NumContents(&USB_TX_Q)) > 0 )
 8001e40:	4818      	ldr	r0, [pc, #96]	@ (8001ea4 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8001e42:	f7ff ff2c 	bl	8001c9e <Q_NumContents>
 8001e46:	4603      	mov	r3, r0
 8001e48:	81fb      	strh	r3, [r7, #14]
 8001e4a:	89fb      	ldrh	r3, [r7, #14]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d016      	beq.n	8001e7e <HAL_TIM_PeriodElapsedCallback+0x4a>
  {
    if (CDC_Transmit_Is_Busy() != USBD_BUSY)
 8001e50:	f009 fe78 	bl	800bb44 <CDC_Transmit_Is_Busy>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2b01      	cmp	r3, #1
 8001e58:	d011      	beq.n	8001e7e <HAL_TIM_PeriodElapsedCallback+0x4a>
    {
      queDataNum += num;
 8001e5a:	4b13      	ldr	r3, [pc, #76]	@ (8001ea8 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8001e5c:	881a      	ldrh	r2, [r3, #0]
 8001e5e:	89fb      	ldrh	r3, [r7, #14]
 8001e60:	4413      	add	r3, r2
 8001e62:	b29a      	uxth	r2, r3
 8001e64:	4b10      	ldr	r3, [pc, #64]	@ (8001ea8 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8001e66:	801a      	strh	r2, [r3, #0]

      Q_Read(&USB_TX_Q, (uint8_t *)queData, num);
 8001e68:	89fb      	ldrh	r3, [r7, #14]
 8001e6a:	461a      	mov	r2, r3
 8001e6c:	490f      	ldr	r1, [pc, #60]	@ (8001eac <HAL_TIM_PeriodElapsedCallback+0x78>)
 8001e6e:	480d      	ldr	r0, [pc, #52]	@ (8001ea4 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8001e70:	f7ff fea7 	bl	8001bc2 <Q_Read>

      CDC_Transmit_FS(queData, num);
 8001e74:	89fb      	ldrh	r3, [r7, #14]
 8001e76:	4619      	mov	r1, r3
 8001e78:	480c      	ldr	r0, [pc, #48]	@ (8001eac <HAL_TIM_PeriodElapsedCallback+0x78>)
 8001e7a:	f009 fe2b 	bl	800bad4 <CDC_Transmit_FS>
    }
  }

  if (htim->Instance == TIM1)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4a0b      	ldr	r2, [pc, #44]	@ (8001eb0 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d109      	bne.n	8001e9c <HAL_TIM_PeriodElapsedCallback+0x68>
  {
    TIM1_CNT_1++;
 8001e88:	4b0a      	ldr	r3, [pc, #40]	@ (8001eb4 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	3301      	adds	r3, #1
 8001e8e:	4a09      	ldr	r2, [pc, #36]	@ (8001eb4 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001e90:	6013      	str	r3, [r2, #0]
    TIM1_CNT_2++;
 8001e92:	4b09      	ldr	r3, [pc, #36]	@ (8001eb8 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	3301      	adds	r3, #1
 8001e98:	4a07      	ldr	r2, [pc, #28]	@ (8001eb8 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001e9a:	6013      	str	r3, [r2, #0]
  }
}
 8001e9c:	bf00      	nop
 8001e9e:	3710      	adds	r7, #16
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	20001168 	.word	0x20001168
 8001ea8:	2000042a 	.word	0x2000042a
 8001eac:	2000042c 	.word	0x2000042c
 8001eb0:	40012c00 	.word	0x40012c00
 8001eb4:	20000420 	.word	0x20000420
 8001eb8:	20000424 	.word	0x20000424

08001ebc <HAL_UARTEx_RxEventCallback>:

uint8_t IOL_Rx_IDLEFlag = 0;
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b088      	sub	sp, #32
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
 8001ec4:	460b      	mov	r3, r1
 8001ec6:	807b      	strh	r3, [r7, #2]
  uart_rx_IDLE_TotalCnt += Size;
 8001ec8:	887a      	ldrh	r2, [r7, #2]
 8001eca:	4b2f      	ldr	r3, [pc, #188]	@ (8001f88 <HAL_UARTEx_RxEventCallback+0xcc>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4413      	add	r3, r2
 8001ed0:	4a2d      	ldr	r2, [pc, #180]	@ (8001f88 <HAL_UARTEx_RxEventCallback+0xcc>)
 8001ed2:	6013      	str	r3, [r2, #0]
  
  if (huart->Instance == USART1)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a2c      	ldr	r2, [pc, #176]	@ (8001f8c <HAL_UARTEx_RxEventCallback+0xd0>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d150      	bne.n	8001f80 <HAL_UARTEx_RxEventCallback+0xc4>
  {


    if (uart_rx_IDLE_TotalCnt >= 3)
 8001ede:	4b2a      	ldr	r3, [pc, #168]	@ (8001f88 <HAL_UARTEx_RxEventCallback+0xcc>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	2b02      	cmp	r3, #2
 8001ee4:	d90f      	bls.n	8001f06 <HAL_UARTEx_RxEventCallback+0x4a>
    {
      // DEBUG_GPIO_TOGGLE;
      if (IOL_Rx_IDLEFlag == 1)
 8001ee6:	4b2a      	ldr	r3, [pc, #168]	@ (8001f90 <HAL_UARTEx_RxEventCallback+0xd4>)
 8001ee8:	781b      	ldrb	r3, [r3, #0]
 8001eea:	2b01      	cmp	r3, #1
 8001eec:	d103      	bne.n	8001ef6 <HAL_UARTEx_RxEventCallback+0x3a>
      {
        IOL_Rx_IDLEFlag = 0;
 8001eee:	4b28      	ldr	r3, [pc, #160]	@ (8001f90 <HAL_UARTEx_RxEventCallback+0xd4>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	701a      	strb	r2, [r3, #0]
 8001ef4:	e007      	b.n	8001f06 <HAL_UARTEx_RxEventCallback+0x4a>
      }
      else
      {
        // DEBUG_GPIO_TOGGLE;
        IOL_Rx_IDLEFlag = 1;
 8001ef6:	4b26      	ldr	r3, [pc, #152]	@ (8001f90 <HAL_UARTEx_RxEventCallback+0xd4>)
 8001ef8:	2201      	movs	r2, #1
 8001efa:	701a      	strb	r2, [r3, #0]
        // IOL_PageTest(Size);
        IOL_Parse_Rx_data(uart1_rx_IDLE_buf);
 8001efc:	4825      	ldr	r0, [pc, #148]	@ (8001f94 <HAL_UARTEx_RxEventCallback+0xd8>)
 8001efe:	f7fe ff81 	bl	8000e04 <IOL_Parse_Rx_data>
        // IOL_Parse_Rx_data();
        IOL_StateM_Process();
 8001f02:	f7fe ff5b 	bl	8000dbc <IOL_StateM_Process>
        // IOL_StartUp_Seq_Page(Size);
      }

    }

    __HAL_DMA_DISABLE(&hdma_usart1_rx);
 8001f06:	4b24      	ldr	r3, [pc, #144]	@ (8001f98 <HAL_UARTEx_RxEventCallback+0xdc>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	4b22      	ldr	r3, [pc, #136]	@ (8001f98 <HAL_UARTEx_RxEventCallback+0xdc>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f022 0201 	bic.w	r2, r2, #1
 8001f14:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Instance->CNDTR = UART_RX_IDLE_BUFSIZE;
 8001f16:	4b20      	ldr	r3, [pc, #128]	@ (8001f98 <HAL_UARTEx_RxEventCallback+0xdc>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	2264      	movs	r2, #100	@ 0x64
 8001f1c:	605a      	str	r2, [r3, #4]
    __HAL_DMA_ENABLE(&hdma_usart1_rx);
 8001f1e:	4b1e      	ldr	r3, [pc, #120]	@ (8001f98 <HAL_UARTEx_RxEventCallback+0xdc>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	681a      	ldr	r2, [r3, #0]
 8001f24:	4b1c      	ldr	r3, [pc, #112]	@ (8001f98 <HAL_UARTEx_RxEventCallback+0xdc>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f042 0201 	orr.w	r2, r2, #1
 8001f2c:	601a      	str	r2, [r3, #0]

    __HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	69db      	ldr	r3, [r3, #28]
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	e853 3f00 	ldrex	r3, [r3]
 8001f40:	60bb      	str	r3, [r7, #8]
   return(result);
 8001f42:	68bb      	ldr	r3, [r7, #8]
 8001f44:	f043 0310 	orr.w	r3, r3, #16
 8001f48:	61fb      	str	r3, [r7, #28]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	461a      	mov	r2, r3
 8001f50:	69fb      	ldr	r3, [r7, #28]
 8001f52:	61bb      	str	r3, [r7, #24]
 8001f54:	617a      	str	r2, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f56:	6979      	ldr	r1, [r7, #20]
 8001f58:	69ba      	ldr	r2, [r7, #24]
 8001f5a:	e841 2300 	strex	r3, r2, [r1]
 8001f5e:	613b      	str	r3, [r7, #16]
   return(result);
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d1e6      	bne.n	8001f34 <HAL_UARTEx_RxEventCallback+0x78>
    HAL_UARTEx_ReceiveToIdle_DMA(&huart1, (uint8_t *) uart1_rx_IDLE_buf, UART_RX_IDLE_BUFSIZE);
 8001f66:	2264      	movs	r2, #100	@ 0x64
 8001f68:	490a      	ldr	r1, [pc, #40]	@ (8001f94 <HAL_UARTEx_RxEventCallback+0xd8>)
 8001f6a:	480c      	ldr	r0, [pc, #48]	@ (8001f9c <HAL_UARTEx_RxEventCallback+0xe0>)
 8001f6c:	f006 f978 	bl	8008260 <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8001f70:	4b09      	ldr	r3, [pc, #36]	@ (8001f98 <HAL_UARTEx_RxEventCallback+0xdc>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	681a      	ldr	r2, [r3, #0]
 8001f76:	4b08      	ldr	r3, [pc, #32]	@ (8001f98 <HAL_UARTEx_RxEventCallback+0xdc>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f022 0204 	bic.w	r2, r2, #4
 8001f7e:	601a      	str	r2, [r3, #0]

    // HAL_NVIC_EnableIRQ(USART1_IRQn);
    // HAL_UART_DMAResume(&huart1);

  }
}
 8001f80:	bf00      	nop
 8001f82:	3720      	adds	r7, #32
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	20000bfc 	.word	0x20000bfc
 8001f8c:	40013800 	.word	0x40013800
 8001f90:	2000041b 	.word	0x2000041b
 8001f94:	20000c00 	.word	0x20000c00
 8001f98:	20001074 	.word	0x20001074
 8001f9c:	200010d4 	.word	0x200010d4

08001fa0 <HAL_UART_TxCpltCallback>:


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b082      	sub	sp, #8
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART1)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a07      	ldr	r2, [pc, #28]	@ (8001fcc <HAL_UART_TxCpltCallback+0x2c>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d107      	bne.n	8001fc2 <HAL_UART_TxCpltCallback+0x22>
  {
    IOL_DISABLE;
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	2140      	movs	r1, #64	@ 0x40
 8001fb6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001fba:	f001 f937 	bl	800322c <HAL_GPIO_WritePin>
    
    IOL_Clear_PDBuffer();
 8001fbe:	f7ff f84d 	bl	800105c <IOL_Clear_PDBuffer>
    // __HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE);
    // ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
    // HAL_UARTEx_ReceiveToIdle_DMA(&huart1, (uint8_t *) uart1_rx_IDLE_buf, UART_RX_IDLE_BUFSIZE);
    // __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
  }
}
 8001fc2:	bf00      	nop
 8001fc4:	3708      	adds	r7, #8
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	40013800 	.word	0x40013800

08001fd0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b086      	sub	sp, #24
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	60f8      	str	r0, [r7, #12]
 8001fd8:	60b9      	str	r1, [r7, #8]
 8001fda:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fdc:	2300      	movs	r3, #0
 8001fde:	617b      	str	r3, [r7, #20]
 8001fe0:	e00a      	b.n	8001ff8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001fe2:	f3af 8000 	nop.w
 8001fe6:	4601      	mov	r1, r0
 8001fe8:	68bb      	ldr	r3, [r7, #8]
 8001fea:	1c5a      	adds	r2, r3, #1
 8001fec:	60ba      	str	r2, [r7, #8]
 8001fee:	b2ca      	uxtb	r2, r1
 8001ff0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	3301      	adds	r3, #1
 8001ff6:	617b      	str	r3, [r7, #20]
 8001ff8:	697a      	ldr	r2, [r7, #20]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	dbf0      	blt.n	8001fe2 <_read+0x12>
  }

  return len;
 8002000:	687b      	ldr	r3, [r7, #4]
}
 8002002:	4618      	mov	r0, r3
 8002004:	3718      	adds	r7, #24
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}

0800200a <_close>:
  }
  return len;
}

int _close(int file)
{
 800200a:	b480      	push	{r7}
 800200c:	b083      	sub	sp, #12
 800200e:	af00      	add	r7, sp, #0
 8002010:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002012:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002016:	4618      	mov	r0, r3
 8002018:	370c      	adds	r7, #12
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr

08002022 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002022:	b480      	push	{r7}
 8002024:	b083      	sub	sp, #12
 8002026:	af00      	add	r7, sp, #0
 8002028:	6078      	str	r0, [r7, #4]
 800202a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002032:	605a      	str	r2, [r3, #4]
  return 0;
 8002034:	2300      	movs	r3, #0
}
 8002036:	4618      	mov	r0, r3
 8002038:	370c      	adds	r7, #12
 800203a:	46bd      	mov	sp, r7
 800203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002040:	4770      	bx	lr

08002042 <_isatty>:

int _isatty(int file)
{
 8002042:	b480      	push	{r7}
 8002044:	b083      	sub	sp, #12
 8002046:	af00      	add	r7, sp, #0
 8002048:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800204a:	2301      	movs	r3, #1
}
 800204c:	4618      	mov	r0, r3
 800204e:	370c      	adds	r7, #12
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr

08002058 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002058:	b480      	push	{r7}
 800205a:	b085      	sub	sp, #20
 800205c:	af00      	add	r7, sp, #0
 800205e:	60f8      	str	r0, [r7, #12]
 8002060:	60b9      	str	r1, [r7, #8]
 8002062:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002064:	2300      	movs	r3, #0
}
 8002066:	4618      	mov	r0, r3
 8002068:	3714      	adds	r7, #20
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr
	...

08002074 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b086      	sub	sp, #24
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800207c:	4a14      	ldr	r2, [pc, #80]	@ (80020d0 <_sbrk+0x5c>)
 800207e:	4b15      	ldr	r3, [pc, #84]	@ (80020d4 <_sbrk+0x60>)
 8002080:	1ad3      	subs	r3, r2, r3
 8002082:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002088:	4b13      	ldr	r3, [pc, #76]	@ (80020d8 <_sbrk+0x64>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d102      	bne.n	8002096 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002090:	4b11      	ldr	r3, [pc, #68]	@ (80020d8 <_sbrk+0x64>)
 8002092:	4a12      	ldr	r2, [pc, #72]	@ (80020dc <_sbrk+0x68>)
 8002094:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002096:	4b10      	ldr	r3, [pc, #64]	@ (80020d8 <_sbrk+0x64>)
 8002098:	681a      	ldr	r2, [r3, #0]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	4413      	add	r3, r2
 800209e:	693a      	ldr	r2, [r7, #16]
 80020a0:	429a      	cmp	r2, r3
 80020a2:	d207      	bcs.n	80020b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020a4:	f00a fbd2 	bl	800c84c <__errno>
 80020a8:	4603      	mov	r3, r0
 80020aa:	220c      	movs	r2, #12
 80020ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020ae:	f04f 33ff 	mov.w	r3, #4294967295
 80020b2:	e009      	b.n	80020c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020b4:	4b08      	ldr	r3, [pc, #32]	@ (80020d8 <_sbrk+0x64>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020ba:	4b07      	ldr	r3, [pc, #28]	@ (80020d8 <_sbrk+0x64>)
 80020bc:	681a      	ldr	r2, [r3, #0]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	4413      	add	r3, r2
 80020c2:	4a05      	ldr	r2, [pc, #20]	@ (80020d8 <_sbrk+0x64>)
 80020c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020c6:	68fb      	ldr	r3, [r7, #12]
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	3718      	adds	r7, #24
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}
 80020d0:	20008000 	.word	0x20008000
 80020d4:	00000400 	.word	0x00000400
 80020d8:	2000041c 	.word	0x2000041c
 80020dc:	20002aa8 	.word	0x20002aa8

080020e0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80020e0:	b480      	push	{r7}
 80020e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80020e4:	4b06      	ldr	r3, [pc, #24]	@ (8002100 <SystemInit+0x20>)
 80020e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020ea:	4a05      	ldr	r2, [pc, #20]	@ (8002100 <SystemInit+0x20>)
 80020ec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80020f0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020f4:	bf00      	nop
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr
 80020fe:	bf00      	nop
 8002100:	e000ed00 	.word	0xe000ed00

08002104 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b088      	sub	sp, #32
 8002108:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800210a:	f107 0310 	add.w	r3, r7, #16
 800210e:	2200      	movs	r2, #0
 8002110:	601a      	str	r2, [r3, #0]
 8002112:	605a      	str	r2, [r3, #4]
 8002114:	609a      	str	r2, [r3, #8]
 8002116:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002118:	1d3b      	adds	r3, r7, #4
 800211a:	2200      	movs	r2, #0
 800211c:	601a      	str	r2, [r3, #0]
 800211e:	605a      	str	r2, [r3, #4]
 8002120:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002122:	4b20      	ldr	r3, [pc, #128]	@ (80021a4 <MX_TIM1_Init+0xa0>)
 8002124:	4a20      	ldr	r2, [pc, #128]	@ (80021a8 <MX_TIM1_Init+0xa4>)
 8002126:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1000-1;
 8002128:	4b1e      	ldr	r3, [pc, #120]	@ (80021a4 <MX_TIM1_Init+0xa0>)
 800212a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800212e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002130:	4b1c      	ldr	r3, [pc, #112]	@ (80021a4 <MX_TIM1_Init+0xa0>)
 8002132:	2200      	movs	r2, #0
 8002134:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 169;
 8002136:	4b1b      	ldr	r3, [pc, #108]	@ (80021a4 <MX_TIM1_Init+0xa0>)
 8002138:	22a9      	movs	r2, #169	@ 0xa9
 800213a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800213c:	4b19      	ldr	r3, [pc, #100]	@ (80021a4 <MX_TIM1_Init+0xa0>)
 800213e:	2200      	movs	r2, #0
 8002140:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002142:	4b18      	ldr	r3, [pc, #96]	@ (80021a4 <MX_TIM1_Init+0xa0>)
 8002144:	2200      	movs	r2, #0
 8002146:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002148:	4b16      	ldr	r3, [pc, #88]	@ (80021a4 <MX_TIM1_Init+0xa0>)
 800214a:	2200      	movs	r2, #0
 800214c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800214e:	4815      	ldr	r0, [pc, #84]	@ (80021a4 <MX_TIM1_Init+0xa0>)
 8002150:	f003 fd94 	bl	8005c7c <HAL_TIM_Base_Init>
 8002154:	4603      	mov	r3, r0
 8002156:	2b00      	cmp	r3, #0
 8002158:	d001      	beq.n	800215e <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800215a:	f7ff fca2 	bl	8001aa2 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800215e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002162:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002164:	f107 0310 	add.w	r3, r7, #16
 8002168:	4619      	mov	r1, r3
 800216a:	480e      	ldr	r0, [pc, #56]	@ (80021a4 <MX_TIM1_Init+0xa0>)
 800216c:	f003 ff98 	bl	80060a0 <HAL_TIM_ConfigClockSource>
 8002170:	4603      	mov	r3, r0
 8002172:	2b00      	cmp	r3, #0
 8002174:	d001      	beq.n	800217a <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8002176:	f7ff fc94 	bl	8001aa2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800217a:	2300      	movs	r3, #0
 800217c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800217e:	2300      	movs	r3, #0
 8002180:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002182:	2300      	movs	r3, #0
 8002184:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002186:	1d3b      	adds	r3, r7, #4
 8002188:	4619      	mov	r1, r3
 800218a:	4806      	ldr	r0, [pc, #24]	@ (80021a4 <MX_TIM1_Init+0xa0>)
 800218c:	f004 f9e2 	bl	8006554 <HAL_TIMEx_MasterConfigSynchronization>
 8002190:	4603      	mov	r3, r0
 8002192:	2b00      	cmp	r3, #0
 8002194:	d001      	beq.n	800219a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8002196:	f7ff fc84 	bl	8001aa2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800219a:	bf00      	nop
 800219c:	3720      	adds	r7, #32
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	20001028 	.word	0x20001028
 80021a8:	40012c00 	.word	0x40012c00

080021ac <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b084      	sub	sp, #16
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a0d      	ldr	r2, [pc, #52]	@ (80021f0 <HAL_TIM_Base_MspInit+0x44>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d113      	bne.n	80021e6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80021be:	4b0d      	ldr	r3, [pc, #52]	@ (80021f4 <HAL_TIM_Base_MspInit+0x48>)
 80021c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021c2:	4a0c      	ldr	r2, [pc, #48]	@ (80021f4 <HAL_TIM_Base_MspInit+0x48>)
 80021c4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80021c8:	6613      	str	r3, [r2, #96]	@ 0x60
 80021ca:	4b0a      	ldr	r3, [pc, #40]	@ (80021f4 <HAL_TIM_Base_MspInit+0x48>)
 80021cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021ce:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80021d2:	60fb      	str	r3, [r7, #12]
 80021d4:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80021d6:	2200      	movs	r2, #0
 80021d8:	2100      	movs	r1, #0
 80021da:	2019      	movs	r0, #25
 80021dc:	f000 fb3d 	bl	800285a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80021e0:	2019      	movs	r0, #25
 80021e2:	f000 fb54 	bl	800288e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80021e6:	bf00      	nop
 80021e8:	3710      	adds	r7, #16
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	40012c00 	.word	0x40012c00
 80021f4:	40021000 	.word	0x40021000

080021f8 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80021fc:	4b23      	ldr	r3, [pc, #140]	@ (800228c <MX_USART1_UART_Init+0x94>)
 80021fe:	4a24      	ldr	r2, [pc, #144]	@ (8002290 <MX_USART1_UART_Init+0x98>)
 8002200:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 230400;
 8002202:	4b22      	ldr	r3, [pc, #136]	@ (800228c <MX_USART1_UART_Init+0x94>)
 8002204:	f44f 3261 	mov.w	r2, #230400	@ 0x38400
 8002208:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 800220a:	4b20      	ldr	r3, [pc, #128]	@ (800228c <MX_USART1_UART_Init+0x94>)
 800220c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002210:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002212:	4b1e      	ldr	r3, [pc, #120]	@ (800228c <MX_USART1_UART_Init+0x94>)
 8002214:	2200      	movs	r2, #0
 8002216:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_EVEN;
 8002218:	4b1c      	ldr	r3, [pc, #112]	@ (800228c <MX_USART1_UART_Init+0x94>)
 800221a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800221e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002220:	4b1a      	ldr	r3, [pc, #104]	@ (800228c <MX_USART1_UART_Init+0x94>)
 8002222:	220c      	movs	r2, #12
 8002224:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002226:	4b19      	ldr	r3, [pc, #100]	@ (800228c <MX_USART1_UART_Init+0x94>)
 8002228:	2200      	movs	r2, #0
 800222a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800222c:	4b17      	ldr	r3, [pc, #92]	@ (800228c <MX_USART1_UART_Init+0x94>)
 800222e:	2200      	movs	r2, #0
 8002230:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002232:	4b16      	ldr	r3, [pc, #88]	@ (800228c <MX_USART1_UART_Init+0x94>)
 8002234:	2200      	movs	r2, #0
 8002236:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002238:	4b14      	ldr	r3, [pc, #80]	@ (800228c <MX_USART1_UART_Init+0x94>)
 800223a:	2200      	movs	r2, #0
 800223c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800223e:	4b13      	ldr	r3, [pc, #76]	@ (800228c <MX_USART1_UART_Init+0x94>)
 8002240:	2200      	movs	r2, #0
 8002242:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002244:	4811      	ldr	r0, [pc, #68]	@ (800228c <MX_USART1_UART_Init+0x94>)
 8002246:	f004 fa4d 	bl	80066e4 <HAL_UART_Init>
 800224a:	4603      	mov	r3, r0
 800224c:	2b00      	cmp	r3, #0
 800224e:	d001      	beq.n	8002254 <MX_USART1_UART_Init+0x5c>
  {
    Error_Handler();
 8002250:	f7ff fc27 	bl	8001aa2 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002254:	2100      	movs	r1, #0
 8002256:	480d      	ldr	r0, [pc, #52]	@ (800228c <MX_USART1_UART_Init+0x94>)
 8002258:	f005 ff86 	bl	8008168 <HAL_UARTEx_SetTxFifoThreshold>
 800225c:	4603      	mov	r3, r0
 800225e:	2b00      	cmp	r3, #0
 8002260:	d001      	beq.n	8002266 <MX_USART1_UART_Init+0x6e>
  {
    Error_Handler();
 8002262:	f7ff fc1e 	bl	8001aa2 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002266:	2100      	movs	r1, #0
 8002268:	4808      	ldr	r0, [pc, #32]	@ (800228c <MX_USART1_UART_Init+0x94>)
 800226a:	f005 ffbb 	bl	80081e4 <HAL_UARTEx_SetRxFifoThreshold>
 800226e:	4603      	mov	r3, r0
 8002270:	2b00      	cmp	r3, #0
 8002272:	d001      	beq.n	8002278 <MX_USART1_UART_Init+0x80>
  {
    Error_Handler();
 8002274:	f7ff fc15 	bl	8001aa2 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002278:	4804      	ldr	r0, [pc, #16]	@ (800228c <MX_USART1_UART_Init+0x94>)
 800227a:	f005 ff3c 	bl	80080f6 <HAL_UARTEx_DisableFifoMode>
 800227e:	4603      	mov	r3, r0
 8002280:	2b00      	cmp	r3, #0
 8002282:	d001      	beq.n	8002288 <MX_USART1_UART_Init+0x90>
  {
    Error_Handler();
 8002284:	f7ff fc0d 	bl	8001aa2 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002288:	bf00      	nop
 800228a:	bd80      	pop	{r7, pc}
 800228c:	200010d4 	.word	0x200010d4
 8002290:	40013800 	.word	0x40013800

08002294 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b09a      	sub	sp, #104	@ 0x68
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800229c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80022a0:	2200      	movs	r2, #0
 80022a2:	601a      	str	r2, [r3, #0]
 80022a4:	605a      	str	r2, [r3, #4]
 80022a6:	609a      	str	r2, [r3, #8]
 80022a8:	60da      	str	r2, [r3, #12]
 80022aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80022ac:	f107 0310 	add.w	r3, r7, #16
 80022b0:	2244      	movs	r2, #68	@ 0x44
 80022b2:	2100      	movs	r1, #0
 80022b4:	4618      	mov	r0, r3
 80022b6:	f00a fa7b 	bl	800c7b0 <memset>
  if(uartHandle->Instance==USART1)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a38      	ldr	r2, [pc, #224]	@ (80023a0 <HAL_UART_MspInit+0x10c>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d169      	bne.n	8002398 <HAL_UART_MspInit+0x104>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80022c4:	2301      	movs	r3, #1
 80022c6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80022c8:	2300      	movs	r3, #0
 80022ca:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80022cc:	f107 0310 	add.w	r3, r7, #16
 80022d0:	4618      	mov	r0, r3
 80022d2:	f003 fae3 	bl	800589c <HAL_RCCEx_PeriphCLKConfig>
 80022d6:	4603      	mov	r3, r0
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d001      	beq.n	80022e0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80022dc:	f7ff fbe1 	bl	8001aa2 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80022e0:	4b30      	ldr	r3, [pc, #192]	@ (80023a4 <HAL_UART_MspInit+0x110>)
 80022e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022e4:	4a2f      	ldr	r2, [pc, #188]	@ (80023a4 <HAL_UART_MspInit+0x110>)
 80022e6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80022ea:	6613      	str	r3, [r2, #96]	@ 0x60
 80022ec:	4b2d      	ldr	r3, [pc, #180]	@ (80023a4 <HAL_UART_MspInit+0x110>)
 80022ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022f0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80022f4:	60fb      	str	r3, [r7, #12]
 80022f6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022f8:	4b2a      	ldr	r3, [pc, #168]	@ (80023a4 <HAL_UART_MspInit+0x110>)
 80022fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022fc:	4a29      	ldr	r2, [pc, #164]	@ (80023a4 <HAL_UART_MspInit+0x110>)
 80022fe:	f043 0301 	orr.w	r3, r3, #1
 8002302:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002304:	4b27      	ldr	r3, [pc, #156]	@ (80023a4 <HAL_UART_MspInit+0x110>)
 8002306:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002308:	f003 0301 	and.w	r3, r3, #1
 800230c:	60bb      	str	r3, [r7, #8]
 800230e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002310:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002314:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002316:	2302      	movs	r3, #2
 8002318:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800231a:	2300      	movs	r3, #0
 800231c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800231e:	2300      	movs	r3, #0
 8002320:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002322:	2307      	movs	r3, #7
 8002324:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002326:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800232a:	4619      	mov	r1, r3
 800232c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002330:	f000 fdfa 	bl	8002f28 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 8002334:	4b1c      	ldr	r3, [pc, #112]	@ (80023a8 <HAL_UART_MspInit+0x114>)
 8002336:	4a1d      	ldr	r2, [pc, #116]	@ (80023ac <HAL_UART_MspInit+0x118>)
 8002338:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 800233a:	4b1b      	ldr	r3, [pc, #108]	@ (80023a8 <HAL_UART_MspInit+0x114>)
 800233c:	2218      	movs	r2, #24
 800233e:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002340:	4b19      	ldr	r3, [pc, #100]	@ (80023a8 <HAL_UART_MspInit+0x114>)
 8002342:	2200      	movs	r2, #0
 8002344:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002346:	4b18      	ldr	r3, [pc, #96]	@ (80023a8 <HAL_UART_MspInit+0x114>)
 8002348:	2200      	movs	r2, #0
 800234a:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800234c:	4b16      	ldr	r3, [pc, #88]	@ (80023a8 <HAL_UART_MspInit+0x114>)
 800234e:	2280      	movs	r2, #128	@ 0x80
 8002350:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002352:	4b15      	ldr	r3, [pc, #84]	@ (80023a8 <HAL_UART_MspInit+0x114>)
 8002354:	2200      	movs	r2, #0
 8002356:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002358:	4b13      	ldr	r3, [pc, #76]	@ (80023a8 <HAL_UART_MspInit+0x114>)
 800235a:	2200      	movs	r2, #0
 800235c:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800235e:	4b12      	ldr	r3, [pc, #72]	@ (80023a8 <HAL_UART_MspInit+0x114>)
 8002360:	2200      	movs	r2, #0
 8002362:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002364:	4b10      	ldr	r3, [pc, #64]	@ (80023a8 <HAL_UART_MspInit+0x114>)
 8002366:	2200      	movs	r2, #0
 8002368:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800236a:	480f      	ldr	r0, [pc, #60]	@ (80023a8 <HAL_UART_MspInit+0x114>)
 800236c:	f000 faaa 	bl	80028c4 <HAL_DMA_Init>
 8002370:	4603      	mov	r3, r0
 8002372:	2b00      	cmp	r3, #0
 8002374:	d001      	beq.n	800237a <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 8002376:	f7ff fb94 	bl	8001aa2 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	4a0a      	ldr	r2, [pc, #40]	@ (80023a8 <HAL_UART_MspInit+0x114>)
 800237e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8002382:	4a09      	ldr	r2, [pc, #36]	@ (80023a8 <HAL_UART_MspInit+0x114>)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002388:	2200      	movs	r2, #0
 800238a:	2100      	movs	r1, #0
 800238c:	2025      	movs	r0, #37	@ 0x25
 800238e:	f000 fa64 	bl	800285a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002392:	2025      	movs	r0, #37	@ 0x25
 8002394:	f000 fa7b 	bl	800288e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002398:	bf00      	nop
 800239a:	3768      	adds	r7, #104	@ 0x68
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}
 80023a0:	40013800 	.word	0x40013800
 80023a4:	40021000 	.word	0x40021000
 80023a8:	20001074 	.word	0x20001074
 80023ac:	40020008 	.word	0x40020008

080023b0 <_write>:
uint8_t TestValue[10] = {0x70, 0x5D, 0x93, 0x15, 0x86, 0x00, 0x00, 0x00, 0x00, 0x00};             //checksum Test.

uint8_t UserButton_Flag = 0;

int _write(int file, char *ptr, int len)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b084      	sub	sp, #16
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	60f8      	str	r0, [r7, #12]
 80023b8:	60b9      	str	r1, [r7, #8]
 80023ba:	607a      	str	r2, [r7, #4]
    // CDC_Transmit_FS(ptr, len);
    Q_Write(&USB_TX_Q, ptr, len);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	b29b      	uxth	r3, r3
 80023c0:	461a      	mov	r2, r3
 80023c2:	68b9      	ldr	r1, [r7, #8]
 80023c4:	4803      	ldr	r0, [pc, #12]	@ (80023d4 <_write+0x24>)
 80023c6:	f7ff fb91 	bl	8001aec <Q_Write>
    // User_CDC_Transmit_FS(ptr, len);
    return (len);
 80023ca:	687b      	ldr	r3, [r7, #4]
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	3710      	adds	r7, #16
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}
 80023d4:	20001168 	.word	0x20001168

080023d8 <User_Toggle_Led>:

void User_Toggle_Led (void)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	af00      	add	r7, sp, #0
    if (TIM1_CNT_1 >= 1000)
 80023dc:	4b07      	ldr	r3, [pc, #28]	@ (80023fc <User_Toggle_Led+0x24>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80023e4:	d307      	bcc.n	80023f6 <User_Toggle_Led+0x1e>
    {
        TIM1_CNT_1 = 0;
 80023e6:	4b05      	ldr	r3, [pc, #20]	@ (80023fc <User_Toggle_Led+0x24>)
 80023e8:	2200      	movs	r2, #0
 80023ea:	601a      	str	r2, [r3, #0]
        // HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_14);
        LED_ALL_TOGGLE;
 80023ec:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 80023f0:	4803      	ldr	r0, [pc, #12]	@ (8002400 <User_Toggle_Led+0x28>)
 80023f2:	f000 ff33 	bl	800325c <HAL_GPIO_TogglePin>
    }
}
 80023f6:	bf00      	nop
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	20000420 	.word	0x20000420
 8002400:	48000800 	.word	0x48000800

08002404 <ProcessDataIn_IncreaseCntValue>:

void ProcessDataIn_IncreaseCntValue (void)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	af00      	add	r7, sp, #0
    if ( TIM1_CNT_2 >= 1000)
 8002408:	4b0b      	ldr	r3, [pc, #44]	@ (8002438 <ProcessDataIn_IncreaseCntValue+0x34>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002410:	d310      	bcc.n	8002434 <ProcessDataIn_IncreaseCntValue+0x30>
    {
        TIM1_CNT_2 = 0;
 8002412:	4b09      	ldr	r3, [pc, #36]	@ (8002438 <ProcessDataIn_IncreaseCntValue+0x34>)
 8002414:	2200      	movs	r2, #0
 8002416:	601a      	str	r2, [r3, #0]
        ProcessDataIn_cnt++;
 8002418:	4b08      	ldr	r3, [pc, #32]	@ (800243c <ProcessDataIn_IncreaseCntValue+0x38>)
 800241a:	781b      	ldrb	r3, [r3, #0]
 800241c:	3301      	adds	r3, #1
 800241e:	b2da      	uxtb	r2, r3
 8002420:	4b06      	ldr	r3, [pc, #24]	@ (800243c <ProcessDataIn_IncreaseCntValue+0x38>)
 8002422:	701a      	strb	r2, [r3, #0]

        printf("Master to Device Temp Value :   %d\r\n", Test_M2D_TempValue);
 8002424:	4b06      	ldr	r3, [pc, #24]	@ (8002440 <ProcessDataIn_IncreaseCntValue+0x3c>)
 8002426:	781b      	ldrb	r3, [r3, #0]
 8002428:	4619      	mov	r1, r3
 800242a:	4806      	ldr	r0, [pc, #24]	@ (8002444 <ProcessDataIn_IncreaseCntValue+0x40>)
 800242c:	f00a f878 	bl	800c520 <iprintf>
        IOL_Print_ParsingM2Ddata();
 8002430:	f7fe fd24 	bl	8000e7c <IOL_Print_ParsingM2Ddata>
    }
}
 8002434:	bf00      	nop
 8002436:	bd80      	pop	{r7, pc}
 8002438:	20000424 	.word	0x20000424
 800243c:	20000428 	.word	0x20000428
 8002440:	20000c64 	.word	0x20000c64
 8002444:	0800d338 	.word	0x0800d338

08002448 <BootMessagePrint>:
    User_CDC_Transmit_FS((uint8_t *) USB_CdcTxBuffer_FS, strlen(USB_CdcTxBuffer_FS));
}
#else
/* Display Boot Message */
void BootMessagePrint (void)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	af00      	add	r7, sp, #0
    printf("-------------------------------------------------------------------\r\n");
 800244c:	480c      	ldr	r0, [pc, #48]	@ (8002480 <BootMessagePrint+0x38>)
 800244e:	f00a f8cf 	bl	800c5f0 <puts>
    
    printf(" Project Name        : %s\r\n", PROJECT_NAME );
 8002452:	490c      	ldr	r1, [pc, #48]	@ (8002484 <BootMessagePrint+0x3c>)
 8002454:	480c      	ldr	r0, [pc, #48]	@ (8002488 <BootMessagePrint+0x40>)
 8002456:	f00a f863 	bl	800c520 <iprintf>
    
    printf(" - HW VERSION        : %s\r\n", STR_HW_VER );
 800245a:	490c      	ldr	r1, [pc, #48]	@ (800248c <BootMessagePrint+0x44>)
 800245c:	480c      	ldr	r0, [pc, #48]	@ (8002490 <BootMessagePrint+0x48>)
 800245e:	f00a f85f 	bl	800c520 <iprintf>
    
    printf(" - FW VERSION        : %s\r\n", STR_FW_VER );
 8002462:	490c      	ldr	r1, [pc, #48]	@ (8002494 <BootMessagePrint+0x4c>)
 8002464:	480c      	ldr	r0, [pc, #48]	@ (8002498 <BootMessagePrint+0x50>)
 8002466:	f00a f85b 	bl	800c520 <iprintf>
    
    printf(" - BUILD TIME        : %s, %s\r\n", __DATE__, __TIME__ );
 800246a:	4a0c      	ldr	r2, [pc, #48]	@ (800249c <BootMessagePrint+0x54>)
 800246c:	490c      	ldr	r1, [pc, #48]	@ (80024a0 <BootMessagePrint+0x58>)
 800246e:	480d      	ldr	r0, [pc, #52]	@ (80024a4 <BootMessagePrint+0x5c>)
 8002470:	f00a f856 	bl	800c520 <iprintf>
    
    printf("-------------------------------------------------------------------\r\n" );
 8002474:	4802      	ldr	r0, [pc, #8]	@ (8002480 <BootMessagePrint+0x38>)
 8002476:	f00a f8bb 	bl	800c5f0 <puts>
}
 800247a:	bf00      	nop
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	0800d360 	.word	0x0800d360
 8002484:	0800d3a8 	.word	0x0800d3a8
 8002488:	0800d3b8 	.word	0x0800d3b8
 800248c:	0800d3d4 	.word	0x0800d3d4
 8002490:	0800d3dc 	.word	0x0800d3dc
 8002494:	0800d3f8 	.word	0x0800d3f8
 8002498:	0800d40c 	.word	0x0800d40c
 800249c:	0800d428 	.word	0x0800d428
 80024a0:	0800d434 	.word	0x0800d434
 80024a4:	0800d440 	.word	0x0800d440

080024a8 <GetClockSourcePrint>:

/* Display Clcok Source Message */
void GetClockSourcePrint (void)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	af00      	add	r7, sp, #0
    printf("-------------------------------------------------------------------\r\n");
 80024ac:	4819      	ldr	r0, [pc, #100]	@ (8002514 <GetClockSourcePrint+0x6c>)
 80024ae:	f00a f89f 	bl	800c5f0 <puts>
    
    printf(" - SYSTEM Clock Frequency        : %lu MHz\r\n", (HAL_RCC_GetSysClockFreq() /1000000));
 80024b2:	f003 f913 	bl	80056dc <HAL_RCC_GetSysClockFreq>
 80024b6:	4603      	mov	r3, r0
 80024b8:	4a17      	ldr	r2, [pc, #92]	@ (8002518 <GetClockSourcePrint+0x70>)
 80024ba:	fba2 2303 	umull	r2, r3, r2, r3
 80024be:	0c9b      	lsrs	r3, r3, #18
 80024c0:	4619      	mov	r1, r3
 80024c2:	4816      	ldr	r0, [pc, #88]	@ (800251c <GetClockSourcePrint+0x74>)
 80024c4:	f00a f82c 	bl	800c520 <iprintf>
    
    printf(" - HCLK Clock   Frequency        : %lu MHz\r\n", (HAL_RCC_GetHCLKFreq() / 1000000));
 80024c8:	f003 f96a 	bl	80057a0 <HAL_RCC_GetHCLKFreq>
 80024cc:	4603      	mov	r3, r0
 80024ce:	4a12      	ldr	r2, [pc, #72]	@ (8002518 <GetClockSourcePrint+0x70>)
 80024d0:	fba2 2303 	umull	r2, r3, r2, r3
 80024d4:	0c9b      	lsrs	r3, r3, #18
 80024d6:	4619      	mov	r1, r3
 80024d8:	4811      	ldr	r0, [pc, #68]	@ (8002520 <GetClockSourcePrint+0x78>)
 80024da:	f00a f821 	bl	800c520 <iprintf>
    
    printf(" - PCLK1 Clock  Frequency        : %lu MHz\r\n", (HAL_RCC_GetPCLK1Freq() / 1000000));
 80024de:	f003 f96b 	bl	80057b8 <HAL_RCC_GetPCLK1Freq>
 80024e2:	4603      	mov	r3, r0
 80024e4:	4a0c      	ldr	r2, [pc, #48]	@ (8002518 <GetClockSourcePrint+0x70>)
 80024e6:	fba2 2303 	umull	r2, r3, r2, r3
 80024ea:	0c9b      	lsrs	r3, r3, #18
 80024ec:	4619      	mov	r1, r3
 80024ee:	480d      	ldr	r0, [pc, #52]	@ (8002524 <GetClockSourcePrint+0x7c>)
 80024f0:	f00a f816 	bl	800c520 <iprintf>
    
    printf(" - PCLK2 Clock  Frequency        : %lu MHz\r\n", (HAL_RCC_GetPCLK2Freq() / 1000000));
 80024f4:	f003 f976 	bl	80057e4 <HAL_RCC_GetPCLK2Freq>
 80024f8:	4603      	mov	r3, r0
 80024fa:	4a07      	ldr	r2, [pc, #28]	@ (8002518 <GetClockSourcePrint+0x70>)
 80024fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002500:	0c9b      	lsrs	r3, r3, #18
 8002502:	4619      	mov	r1, r3
 8002504:	4808      	ldr	r0, [pc, #32]	@ (8002528 <GetClockSourcePrint+0x80>)
 8002506:	f00a f80b 	bl	800c520 <iprintf>
    
    printf("-------------------------------------------------------------------\r\n" );
 800250a:	4802      	ldr	r0, [pc, #8]	@ (8002514 <GetClockSourcePrint+0x6c>)
 800250c:	f00a f870 	bl	800c5f0 <puts>
}
 8002510:	bf00      	nop
 8002512:	bd80      	pop	{r7, pc}
 8002514:	0800d360 	.word	0x0800d360
 8002518:	431bde83 	.word	0x431bde83
 800251c:	0800d460 	.word	0x0800d460
 8002520:	0800d490 	.word	0x0800d490
 8002524:	0800d4c0 	.word	0x0800d4c0
 8002528:	0800d4f0 	.word	0x0800d4f0

0800252c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800252c:	480d      	ldr	r0, [pc, #52]	@ (8002564 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800252e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8002530:	f7ff fdd6 	bl	80020e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002534:	480c      	ldr	r0, [pc, #48]	@ (8002568 <LoopForever+0x6>)
  ldr r1, =_edata
 8002536:	490d      	ldr	r1, [pc, #52]	@ (800256c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002538:	4a0d      	ldr	r2, [pc, #52]	@ (8002570 <LoopForever+0xe>)
  movs r3, #0
 800253a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800253c:	e002      	b.n	8002544 <LoopCopyDataInit>

0800253e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800253e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002540:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002542:	3304      	adds	r3, #4

08002544 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002544:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002546:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002548:	d3f9      	bcc.n	800253e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800254a:	4a0a      	ldr	r2, [pc, #40]	@ (8002574 <LoopForever+0x12>)
  ldr r4, =_ebss
 800254c:	4c0a      	ldr	r4, [pc, #40]	@ (8002578 <LoopForever+0x16>)
  movs r3, #0
 800254e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002550:	e001      	b.n	8002556 <LoopFillZerobss>

08002552 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002552:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002554:	3204      	adds	r2, #4

08002556 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002556:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002558:	d3fb      	bcc.n	8002552 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 800255a:	f00a f97d 	bl	800c858 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800255e:	f7ff fa15 	bl	800198c <main>

08002562 <LoopForever>:

LoopForever:
    b LoopForever
 8002562:	e7fe      	b.n	8002562 <LoopForever>
  ldr   r0, =_estack
 8002564:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8002568:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800256c:	200003c8 	.word	0x200003c8
  ldr r2, =_sidata
 8002570:	0800d5ec 	.word	0x0800d5ec
  ldr r2, =_sbss
 8002574:	200003c8 	.word	0x200003c8
  ldr r4, =_ebss
 8002578:	20002aa4 	.word	0x20002aa4

0800257c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800257c:	e7fe      	b.n	800257c <ADC1_2_IRQHandler>

0800257e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800257e:	b580      	push	{r7, lr}
 8002580:	b082      	sub	sp, #8
 8002582:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002584:	2300      	movs	r3, #0
 8002586:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002588:	2003      	movs	r0, #3
 800258a:	f000 f95b 	bl	8002844 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800258e:	200f      	movs	r0, #15
 8002590:	f000 f80e 	bl	80025b0 <HAL_InitTick>
 8002594:	4603      	mov	r3, r0
 8002596:	2b00      	cmp	r3, #0
 8002598:	d002      	beq.n	80025a0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800259a:	2301      	movs	r3, #1
 800259c:	71fb      	strb	r3, [r7, #7]
 800259e:	e001      	b.n	80025a4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80025a0:	f7ff fbac 	bl	8001cfc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80025a4:	79fb      	ldrb	r3, [r7, #7]

}
 80025a6:	4618      	mov	r0, r3
 80025a8:	3708      	adds	r7, #8
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}
	...

080025b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b084      	sub	sp, #16
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80025b8:	2300      	movs	r3, #0
 80025ba:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80025bc:	4b16      	ldr	r3, [pc, #88]	@ (8002618 <HAL_InitTick+0x68>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d022      	beq.n	800260a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80025c4:	4b15      	ldr	r3, [pc, #84]	@ (800261c <HAL_InitTick+0x6c>)
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	4b13      	ldr	r3, [pc, #76]	@ (8002618 <HAL_InitTick+0x68>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80025d0:	fbb1 f3f3 	udiv	r3, r1, r3
 80025d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80025d8:	4618      	mov	r0, r3
 80025da:	f000 f966 	bl	80028aa <HAL_SYSTICK_Config>
 80025de:	4603      	mov	r3, r0
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d10f      	bne.n	8002604 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2b0f      	cmp	r3, #15
 80025e8:	d809      	bhi.n	80025fe <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80025ea:	2200      	movs	r2, #0
 80025ec:	6879      	ldr	r1, [r7, #4]
 80025ee:	f04f 30ff 	mov.w	r0, #4294967295
 80025f2:	f000 f932 	bl	800285a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80025f6:	4a0a      	ldr	r2, [pc, #40]	@ (8002620 <HAL_InitTick+0x70>)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6013      	str	r3, [r2, #0]
 80025fc:	e007      	b.n	800260e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	73fb      	strb	r3, [r7, #15]
 8002602:	e004      	b.n	800260e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002604:	2301      	movs	r3, #1
 8002606:	73fb      	strb	r3, [r7, #15]
 8002608:	e001      	b.n	800260e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800260e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002610:	4618      	mov	r0, r3
 8002612:	3710      	adds	r7, #16
 8002614:	46bd      	mov	sp, r7
 8002616:	bd80      	pop	{r7, pc}
 8002618:	200001f0 	.word	0x200001f0
 800261c:	200001e8 	.word	0x200001e8
 8002620:	200001ec 	.word	0x200001ec

08002624 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002624:	b480      	push	{r7}
 8002626:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002628:	4b05      	ldr	r3, [pc, #20]	@ (8002640 <HAL_IncTick+0x1c>)
 800262a:	681a      	ldr	r2, [r3, #0]
 800262c:	4b05      	ldr	r3, [pc, #20]	@ (8002644 <HAL_IncTick+0x20>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4413      	add	r3, r2
 8002632:	4a03      	ldr	r2, [pc, #12]	@ (8002640 <HAL_IncTick+0x1c>)
 8002634:	6013      	str	r3, [r2, #0]
}
 8002636:	bf00      	nop
 8002638:	46bd      	mov	sp, r7
 800263a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263e:	4770      	bx	lr
 8002640:	20001af4 	.word	0x20001af4
 8002644:	200001f0 	.word	0x200001f0

08002648 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002648:	b480      	push	{r7}
 800264a:	af00      	add	r7, sp, #0
  return uwTick;
 800264c:	4b03      	ldr	r3, [pc, #12]	@ (800265c <HAL_GetTick+0x14>)
 800264e:	681b      	ldr	r3, [r3, #0]
}
 8002650:	4618      	mov	r0, r3
 8002652:	46bd      	mov	sp, r7
 8002654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002658:	4770      	bx	lr
 800265a:	bf00      	nop
 800265c:	20001af4 	.word	0x20001af4

08002660 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b084      	sub	sp, #16
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002668:	f7ff ffee 	bl	8002648 <HAL_GetTick>
 800266c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002678:	d004      	beq.n	8002684 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800267a:	4b09      	ldr	r3, [pc, #36]	@ (80026a0 <HAL_Delay+0x40>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	68fa      	ldr	r2, [r7, #12]
 8002680:	4413      	add	r3, r2
 8002682:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002684:	bf00      	nop
 8002686:	f7ff ffdf 	bl	8002648 <HAL_GetTick>
 800268a:	4602      	mov	r2, r0
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	1ad3      	subs	r3, r2, r3
 8002690:	68fa      	ldr	r2, [r7, #12]
 8002692:	429a      	cmp	r2, r3
 8002694:	d8f7      	bhi.n	8002686 <HAL_Delay+0x26>
  {
  }
}
 8002696:	bf00      	nop
 8002698:	bf00      	nop
 800269a:	3710      	adds	r7, #16
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}
 80026a0:	200001f0 	.word	0x200001f0

080026a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b085      	sub	sp, #20
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	f003 0307 	and.w	r3, r3, #7
 80026b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026b4:	4b0c      	ldr	r3, [pc, #48]	@ (80026e8 <__NVIC_SetPriorityGrouping+0x44>)
 80026b6:	68db      	ldr	r3, [r3, #12]
 80026b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026ba:	68ba      	ldr	r2, [r7, #8]
 80026bc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80026c0:	4013      	ands	r3, r2
 80026c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026cc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80026d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80026d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026d6:	4a04      	ldr	r2, [pc, #16]	@ (80026e8 <__NVIC_SetPriorityGrouping+0x44>)
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	60d3      	str	r3, [r2, #12]
}
 80026dc:	bf00      	nop
 80026de:	3714      	adds	r7, #20
 80026e0:	46bd      	mov	sp, r7
 80026e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e6:	4770      	bx	lr
 80026e8:	e000ed00 	.word	0xe000ed00

080026ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026ec:	b480      	push	{r7}
 80026ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026f0:	4b04      	ldr	r3, [pc, #16]	@ (8002704 <__NVIC_GetPriorityGrouping+0x18>)
 80026f2:	68db      	ldr	r3, [r3, #12]
 80026f4:	0a1b      	lsrs	r3, r3, #8
 80026f6:	f003 0307 	and.w	r3, r3, #7
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	46bd      	mov	sp, r7
 80026fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002702:	4770      	bx	lr
 8002704:	e000ed00 	.word	0xe000ed00

08002708 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002708:	b480      	push	{r7}
 800270a:	b083      	sub	sp, #12
 800270c:	af00      	add	r7, sp, #0
 800270e:	4603      	mov	r3, r0
 8002710:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002712:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002716:	2b00      	cmp	r3, #0
 8002718:	db0b      	blt.n	8002732 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800271a:	79fb      	ldrb	r3, [r7, #7]
 800271c:	f003 021f 	and.w	r2, r3, #31
 8002720:	4907      	ldr	r1, [pc, #28]	@ (8002740 <__NVIC_EnableIRQ+0x38>)
 8002722:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002726:	095b      	lsrs	r3, r3, #5
 8002728:	2001      	movs	r0, #1
 800272a:	fa00 f202 	lsl.w	r2, r0, r2
 800272e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002732:	bf00      	nop
 8002734:	370c      	adds	r7, #12
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr
 800273e:	bf00      	nop
 8002740:	e000e100 	.word	0xe000e100

08002744 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002744:	b480      	push	{r7}
 8002746:	b083      	sub	sp, #12
 8002748:	af00      	add	r7, sp, #0
 800274a:	4603      	mov	r3, r0
 800274c:	6039      	str	r1, [r7, #0]
 800274e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002750:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002754:	2b00      	cmp	r3, #0
 8002756:	db0a      	blt.n	800276e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	b2da      	uxtb	r2, r3
 800275c:	490c      	ldr	r1, [pc, #48]	@ (8002790 <__NVIC_SetPriority+0x4c>)
 800275e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002762:	0112      	lsls	r2, r2, #4
 8002764:	b2d2      	uxtb	r2, r2
 8002766:	440b      	add	r3, r1
 8002768:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800276c:	e00a      	b.n	8002784 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	b2da      	uxtb	r2, r3
 8002772:	4908      	ldr	r1, [pc, #32]	@ (8002794 <__NVIC_SetPriority+0x50>)
 8002774:	79fb      	ldrb	r3, [r7, #7]
 8002776:	f003 030f 	and.w	r3, r3, #15
 800277a:	3b04      	subs	r3, #4
 800277c:	0112      	lsls	r2, r2, #4
 800277e:	b2d2      	uxtb	r2, r2
 8002780:	440b      	add	r3, r1
 8002782:	761a      	strb	r2, [r3, #24]
}
 8002784:	bf00      	nop
 8002786:	370c      	adds	r7, #12
 8002788:	46bd      	mov	sp, r7
 800278a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278e:	4770      	bx	lr
 8002790:	e000e100 	.word	0xe000e100
 8002794:	e000ed00 	.word	0xe000ed00

08002798 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002798:	b480      	push	{r7}
 800279a:	b089      	sub	sp, #36	@ 0x24
 800279c:	af00      	add	r7, sp, #0
 800279e:	60f8      	str	r0, [r7, #12]
 80027a0:	60b9      	str	r1, [r7, #8]
 80027a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	f003 0307 	and.w	r3, r3, #7
 80027aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027ac:	69fb      	ldr	r3, [r7, #28]
 80027ae:	f1c3 0307 	rsb	r3, r3, #7
 80027b2:	2b04      	cmp	r3, #4
 80027b4:	bf28      	it	cs
 80027b6:	2304      	movcs	r3, #4
 80027b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027ba:	69fb      	ldr	r3, [r7, #28]
 80027bc:	3304      	adds	r3, #4
 80027be:	2b06      	cmp	r3, #6
 80027c0:	d902      	bls.n	80027c8 <NVIC_EncodePriority+0x30>
 80027c2:	69fb      	ldr	r3, [r7, #28]
 80027c4:	3b03      	subs	r3, #3
 80027c6:	e000      	b.n	80027ca <NVIC_EncodePriority+0x32>
 80027c8:	2300      	movs	r3, #0
 80027ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027cc:	f04f 32ff 	mov.w	r2, #4294967295
 80027d0:	69bb      	ldr	r3, [r7, #24]
 80027d2:	fa02 f303 	lsl.w	r3, r2, r3
 80027d6:	43da      	mvns	r2, r3
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	401a      	ands	r2, r3
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027e0:	f04f 31ff 	mov.w	r1, #4294967295
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	fa01 f303 	lsl.w	r3, r1, r3
 80027ea:	43d9      	mvns	r1, r3
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027f0:	4313      	orrs	r3, r2
         );
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	3724      	adds	r7, #36	@ 0x24
 80027f6:	46bd      	mov	sp, r7
 80027f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fc:	4770      	bx	lr
	...

08002800 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b082      	sub	sp, #8
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	3b01      	subs	r3, #1
 800280c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002810:	d301      	bcc.n	8002816 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002812:	2301      	movs	r3, #1
 8002814:	e00f      	b.n	8002836 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002816:	4a0a      	ldr	r2, [pc, #40]	@ (8002840 <SysTick_Config+0x40>)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	3b01      	subs	r3, #1
 800281c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800281e:	210f      	movs	r1, #15
 8002820:	f04f 30ff 	mov.w	r0, #4294967295
 8002824:	f7ff ff8e 	bl	8002744 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002828:	4b05      	ldr	r3, [pc, #20]	@ (8002840 <SysTick_Config+0x40>)
 800282a:	2200      	movs	r2, #0
 800282c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800282e:	4b04      	ldr	r3, [pc, #16]	@ (8002840 <SysTick_Config+0x40>)
 8002830:	2207      	movs	r2, #7
 8002832:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002834:	2300      	movs	r3, #0
}
 8002836:	4618      	mov	r0, r3
 8002838:	3708      	adds	r7, #8
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}
 800283e:	bf00      	nop
 8002840:	e000e010 	.word	0xe000e010

08002844 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b082      	sub	sp, #8
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800284c:	6878      	ldr	r0, [r7, #4]
 800284e:	f7ff ff29 	bl	80026a4 <__NVIC_SetPriorityGrouping>
}
 8002852:	bf00      	nop
 8002854:	3708      	adds	r7, #8
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}

0800285a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800285a:	b580      	push	{r7, lr}
 800285c:	b086      	sub	sp, #24
 800285e:	af00      	add	r7, sp, #0
 8002860:	4603      	mov	r3, r0
 8002862:	60b9      	str	r1, [r7, #8]
 8002864:	607a      	str	r2, [r7, #4]
 8002866:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002868:	f7ff ff40 	bl	80026ec <__NVIC_GetPriorityGrouping>
 800286c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800286e:	687a      	ldr	r2, [r7, #4]
 8002870:	68b9      	ldr	r1, [r7, #8]
 8002872:	6978      	ldr	r0, [r7, #20]
 8002874:	f7ff ff90 	bl	8002798 <NVIC_EncodePriority>
 8002878:	4602      	mov	r2, r0
 800287a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800287e:	4611      	mov	r1, r2
 8002880:	4618      	mov	r0, r3
 8002882:	f7ff ff5f 	bl	8002744 <__NVIC_SetPriority>
}
 8002886:	bf00      	nop
 8002888:	3718      	adds	r7, #24
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}

0800288e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800288e:	b580      	push	{r7, lr}
 8002890:	b082      	sub	sp, #8
 8002892:	af00      	add	r7, sp, #0
 8002894:	4603      	mov	r3, r0
 8002896:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002898:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800289c:	4618      	mov	r0, r3
 800289e:	f7ff ff33 	bl	8002708 <__NVIC_EnableIRQ>
}
 80028a2:	bf00      	nop
 80028a4:	3708      	adds	r7, #8
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}

080028aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028aa:	b580      	push	{r7, lr}
 80028ac:	b082      	sub	sp, #8
 80028ae:	af00      	add	r7, sp, #0
 80028b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028b2:	6878      	ldr	r0, [r7, #4]
 80028b4:	f7ff ffa4 	bl	8002800 <SysTick_Config>
 80028b8:	4603      	mov	r3, r0
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	3708      	adds	r7, #8
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}
	...

080028c4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b084      	sub	sp, #16
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d101      	bne.n	80028d6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	e08d      	b.n	80029f2 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	461a      	mov	r2, r3
 80028dc:	4b47      	ldr	r3, [pc, #284]	@ (80029fc <HAL_DMA_Init+0x138>)
 80028de:	429a      	cmp	r2, r3
 80028e0:	d80f      	bhi.n	8002902 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	461a      	mov	r2, r3
 80028e8:	4b45      	ldr	r3, [pc, #276]	@ (8002a00 <HAL_DMA_Init+0x13c>)
 80028ea:	4413      	add	r3, r2
 80028ec:	4a45      	ldr	r2, [pc, #276]	@ (8002a04 <HAL_DMA_Init+0x140>)
 80028ee:	fba2 2303 	umull	r2, r3, r2, r3
 80028f2:	091b      	lsrs	r3, r3, #4
 80028f4:	009a      	lsls	r2, r3, #2
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	4a42      	ldr	r2, [pc, #264]	@ (8002a08 <HAL_DMA_Init+0x144>)
 80028fe:	641a      	str	r2, [r3, #64]	@ 0x40
 8002900:	e00e      	b.n	8002920 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	461a      	mov	r2, r3
 8002908:	4b40      	ldr	r3, [pc, #256]	@ (8002a0c <HAL_DMA_Init+0x148>)
 800290a:	4413      	add	r3, r2
 800290c:	4a3d      	ldr	r2, [pc, #244]	@ (8002a04 <HAL_DMA_Init+0x140>)
 800290e:	fba2 2303 	umull	r2, r3, r2, r3
 8002912:	091b      	lsrs	r3, r3, #4
 8002914:	009a      	lsls	r2, r3, #2
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	4a3c      	ldr	r2, [pc, #240]	@ (8002a10 <HAL_DMA_Init+0x14c>)
 800291e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2202      	movs	r2, #2
 8002924:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8002936:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800293a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002944:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	691b      	ldr	r3, [r3, #16]
 800294a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002950:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	699b      	ldr	r3, [r3, #24]
 8002956:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800295c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6a1b      	ldr	r3, [r3, #32]
 8002962:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002964:	68fa      	ldr	r2, [r7, #12]
 8002966:	4313      	orrs	r3, r2
 8002968:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	68fa      	ldr	r2, [r7, #12]
 8002970:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002972:	6878      	ldr	r0, [r7, #4]
 8002974:	f000 fa76 	bl	8002e64 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002980:	d102      	bne.n	8002988 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2200      	movs	r2, #0
 8002986:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	685a      	ldr	r2, [r3, #4]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002990:	b2d2      	uxtb	r2, r2
 8002992:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002998:	687a      	ldr	r2, [r7, #4]
 800299a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800299c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d010      	beq.n	80029c8 <HAL_DMA_Init+0x104>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	2b04      	cmp	r3, #4
 80029ac:	d80c      	bhi.n	80029c8 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	f000 fa96 	bl	8002ee0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029b8:	2200      	movs	r2, #0
 80029ba:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029c0:	687a      	ldr	r2, [r7, #4]
 80029c2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80029c4:	605a      	str	r2, [r3, #4]
 80029c6:	e008      	b.n	80029da <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2200      	movs	r2, #0
 80029cc:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2200      	movs	r2, #0
 80029d2:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2200      	movs	r2, #0
 80029d8:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2200      	movs	r2, #0
 80029de:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2201      	movs	r2, #1
 80029e4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2200      	movs	r2, #0
 80029ec:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80029f0:	2300      	movs	r3, #0
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	3710      	adds	r7, #16
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}
 80029fa:	bf00      	nop
 80029fc:	40020407 	.word	0x40020407
 8002a00:	bffdfff8 	.word	0xbffdfff8
 8002a04:	cccccccd 	.word	0xcccccccd
 8002a08:	40020000 	.word	0x40020000
 8002a0c:	bffdfbf8 	.word	0xbffdfbf8
 8002a10:	40020400 	.word	0x40020400

08002a14 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b086      	sub	sp, #24
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	60f8      	str	r0, [r7, #12]
 8002a1c:	60b9      	str	r1, [r7, #8]
 8002a1e:	607a      	str	r2, [r7, #4]
 8002a20:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a22:	2300      	movs	r3, #0
 8002a24:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	d101      	bne.n	8002a34 <HAL_DMA_Start_IT+0x20>
 8002a30:	2302      	movs	r3, #2
 8002a32:	e066      	b.n	8002b02 <HAL_DMA_Start_IT+0xee>
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	2201      	movs	r2, #1
 8002a38:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002a42:	b2db      	uxtb	r3, r3
 8002a44:	2b01      	cmp	r3, #1
 8002a46:	d155      	bne.n	8002af4 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	2202      	movs	r2, #2
 8002a4c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	2200      	movs	r2, #0
 8002a54:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	681a      	ldr	r2, [r3, #0]
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f022 0201 	bic.w	r2, r2, #1
 8002a64:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	687a      	ldr	r2, [r7, #4]
 8002a6a:	68b9      	ldr	r1, [r7, #8]
 8002a6c:	68f8      	ldr	r0, [r7, #12]
 8002a6e:	f000 f9bb 	bl	8002de8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d008      	beq.n	8002a8c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f042 020e 	orr.w	r2, r2, #14
 8002a88:	601a      	str	r2, [r3, #0]
 8002a8a:	e00f      	b.n	8002aac <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	681a      	ldr	r2, [r3, #0]
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f022 0204 	bic.w	r2, r2, #4
 8002a9a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f042 020a 	orr.w	r2, r2, #10
 8002aaa:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d007      	beq.n	8002aca <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002abe:	681a      	ldr	r2, [r3, #0]
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ac4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002ac8:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d007      	beq.n	8002ae2 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ad6:	681a      	ldr	r2, [r3, #0]
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002adc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002ae0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	681a      	ldr	r2, [r3, #0]
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f042 0201 	orr.w	r2, r2, #1
 8002af0:	601a      	str	r2, [r3, #0]
 8002af2:	e005      	b.n	8002b00 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	2200      	movs	r2, #0
 8002af8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002afc:	2302      	movs	r3, #2
 8002afe:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002b00:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	3718      	adds	r7, #24
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}

08002b0a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002b0a:	b480      	push	{r7}
 8002b0c:	b085      	sub	sp, #20
 8002b0e:	af00      	add	r7, sp, #0
 8002b10:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b12:	2300      	movs	r3, #0
 8002b14:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002b1c:	b2db      	uxtb	r3, r3
 8002b1e:	2b02      	cmp	r3, #2
 8002b20:	d005      	beq.n	8002b2e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2204      	movs	r2, #4
 8002b26:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	73fb      	strb	r3, [r7, #15]
 8002b2c:	e037      	b.n	8002b9e <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	681a      	ldr	r2, [r3, #0]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f022 020e 	bic.w	r2, r2, #14
 8002b3c:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b42:	681a      	ldr	r2, [r3, #0]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b48:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002b4c:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	681a      	ldr	r2, [r3, #0]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f022 0201 	bic.w	r2, r2, #1
 8002b5c:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b62:	f003 021f 	and.w	r2, r3, #31
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b6a:	2101      	movs	r1, #1
 8002b6c:	fa01 f202 	lsl.w	r2, r1, r2
 8002b70:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b76:	687a      	ldr	r2, [r7, #4]
 8002b78:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002b7a:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d00c      	beq.n	8002b9e <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b8e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002b92:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b98:	687a      	ldr	r2, [r7, #4]
 8002b9a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002b9c:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2201      	movs	r2, #1
 8002ba2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8002bae:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	3714      	adds	r7, #20
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bba:	4770      	bx	lr

08002bbc <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b084      	sub	sp, #16
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002bce:	b2db      	uxtb	r3, r3
 8002bd0:	2b02      	cmp	r3, #2
 8002bd2:	d00d      	beq.n	8002bf0 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2204      	movs	r2, #4
 8002bd8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2201      	movs	r2, #1
 8002bde:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2200      	movs	r2, #0
 8002be6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	73fb      	strb	r3, [r7, #15]
 8002bee:	e047      	b.n	8002c80 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	681a      	ldr	r2, [r3, #0]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f022 020e 	bic.w	r2, r2, #14
 8002bfe:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f022 0201 	bic.w	r2, r2, #1
 8002c0e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c14:	681a      	ldr	r2, [r3, #0]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c1a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002c1e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c24:	f003 021f 	and.w	r2, r3, #31
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c2c:	2101      	movs	r1, #1
 8002c2e:	fa01 f202 	lsl.w	r2, r1, r2
 8002c32:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c38:	687a      	ldr	r2, [r7, #4]
 8002c3a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002c3c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d00c      	beq.n	8002c60 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c4a:	681a      	ldr	r2, [r3, #0]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c50:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002c54:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c5a:	687a      	ldr	r2, [r7, #4]
 8002c5c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002c5e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2201      	movs	r2, #1
 8002c64:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d003      	beq.n	8002c80 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c7c:	6878      	ldr	r0, [r7, #4]
 8002c7e:	4798      	blx	r3
    }
  }
  return status;
 8002c80:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	3710      	adds	r7, #16
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}

08002c8a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002c8a:	b580      	push	{r7, lr}
 8002c8c:	b084      	sub	sp, #16
 8002c8e:	af00      	add	r7, sp, #0
 8002c90:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ca6:	f003 031f 	and.w	r3, r3, #31
 8002caa:	2204      	movs	r2, #4
 8002cac:	409a      	lsls	r2, r3
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d026      	beq.n	8002d04 <HAL_DMA_IRQHandler+0x7a>
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	f003 0304 	and.w	r3, r3, #4
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d021      	beq.n	8002d04 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f003 0320 	and.w	r3, r3, #32
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d107      	bne.n	8002cde <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	681a      	ldr	r2, [r3, #0]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f022 0204 	bic.w	r2, r2, #4
 8002cdc:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ce2:	f003 021f 	and.w	r2, r3, #31
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cea:	2104      	movs	r1, #4
 8002cec:	fa01 f202 	lsl.w	r2, r1, r2
 8002cf0:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d071      	beq.n	8002dde <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002d02:	e06c      	b.n	8002dde <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d08:	f003 031f 	and.w	r3, r3, #31
 8002d0c:	2202      	movs	r2, #2
 8002d0e:	409a      	lsls	r2, r3
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	4013      	ands	r3, r2
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d02e      	beq.n	8002d76 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	f003 0302 	and.w	r3, r3, #2
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d029      	beq.n	8002d76 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f003 0320 	and.w	r3, r3, #32
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d10b      	bne.n	8002d48 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f022 020a 	bic.w	r2, r2, #10
 8002d3e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2201      	movs	r2, #1
 8002d44:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d4c:	f003 021f 	and.w	r2, r3, #31
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d54:	2102      	movs	r1, #2
 8002d56:	fa01 f202 	lsl.w	r2, r1, r2
 8002d5a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d038      	beq.n	8002dde <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d70:	6878      	ldr	r0, [r7, #4]
 8002d72:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002d74:	e033      	b.n	8002dde <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d7a:	f003 031f 	and.w	r3, r3, #31
 8002d7e:	2208      	movs	r2, #8
 8002d80:	409a      	lsls	r2, r3
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	4013      	ands	r3, r2
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d02a      	beq.n	8002de0 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	f003 0308 	and.w	r3, r3, #8
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d025      	beq.n	8002de0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	681a      	ldr	r2, [r3, #0]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f022 020e 	bic.w	r2, r2, #14
 8002da2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002da8:	f003 021f 	and.w	r2, r3, #31
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002db0:	2101      	movs	r1, #1
 8002db2:	fa01 f202 	lsl.w	r2, r1, r2
 8002db6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2201      	movs	r2, #1
 8002dbc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d004      	beq.n	8002de0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002dda:	6878      	ldr	r0, [r7, #4]
 8002ddc:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002dde:	bf00      	nop
 8002de0:	bf00      	nop
}
 8002de2:	3710      	adds	r7, #16
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}

08002de8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b085      	sub	sp, #20
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	60f8      	str	r0, [r7, #12]
 8002df0:	60b9      	str	r1, [r7, #8]
 8002df2:	607a      	str	r2, [r7, #4]
 8002df4:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002dfa:	68fa      	ldr	r2, [r7, #12]
 8002dfc:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002dfe:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d004      	beq.n	8002e12 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e0c:	68fa      	ldr	r2, [r7, #12]
 8002e0e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002e10:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e16:	f003 021f 	and.w	r2, r3, #31
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e1e:	2101      	movs	r1, #1
 8002e20:	fa01 f202 	lsl.w	r2, r1, r2
 8002e24:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	683a      	ldr	r2, [r7, #0]
 8002e2c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	2b10      	cmp	r3, #16
 8002e34:	d108      	bne.n	8002e48 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	687a      	ldr	r2, [r7, #4]
 8002e3c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	68ba      	ldr	r2, [r7, #8]
 8002e44:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002e46:	e007      	b.n	8002e58 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	68ba      	ldr	r2, [r7, #8]
 8002e4e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	687a      	ldr	r2, [r7, #4]
 8002e56:	60da      	str	r2, [r3, #12]
}
 8002e58:	bf00      	nop
 8002e5a:	3714      	adds	r7, #20
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e62:	4770      	bx	lr

08002e64 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002e64:	b480      	push	{r7}
 8002e66:	b087      	sub	sp, #28
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	461a      	mov	r2, r3
 8002e72:	4b16      	ldr	r3, [pc, #88]	@ (8002ecc <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8002e74:	429a      	cmp	r2, r3
 8002e76:	d802      	bhi.n	8002e7e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8002e78:	4b15      	ldr	r3, [pc, #84]	@ (8002ed0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8002e7a:	617b      	str	r3, [r7, #20]
 8002e7c:	e001      	b.n	8002e82 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G411xB) || defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8002e7e:	4b15      	ldr	r3, [pc, #84]	@ (8002ed4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8002e80:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	b2db      	uxtb	r3, r3
 8002e8c:	3b08      	subs	r3, #8
 8002e8e:	4a12      	ldr	r2, [pc, #72]	@ (8002ed8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8002e90:	fba2 2303 	umull	r2, r3, r2, r3
 8002e94:	091b      	lsrs	r3, r3, #4
 8002e96:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e9c:	089b      	lsrs	r3, r3, #2
 8002e9e:	009a      	lsls	r2, r3, #2
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	4413      	add	r3, r2
 8002ea4:	461a      	mov	r2, r3
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	4a0b      	ldr	r2, [pc, #44]	@ (8002edc <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8002eae:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	f003 031f 	and.w	r3, r3, #31
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	409a      	lsls	r2, r3
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002ebe:	bf00      	nop
 8002ec0:	371c      	adds	r7, #28
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec8:	4770      	bx	lr
 8002eca:	bf00      	nop
 8002ecc:	40020407 	.word	0x40020407
 8002ed0:	40020800 	.word	0x40020800
 8002ed4:	40020820 	.word	0x40020820
 8002ed8:	cccccccd 	.word	0xcccccccd
 8002edc:	40020880 	.word	0x40020880

08002ee0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b085      	sub	sp, #20
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002ef0:	68fa      	ldr	r2, [r7, #12]
 8002ef2:	4b0b      	ldr	r3, [pc, #44]	@ (8002f20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002ef4:	4413      	add	r3, r2
 8002ef6:	009b      	lsls	r3, r3, #2
 8002ef8:	461a      	mov	r2, r3
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	4a08      	ldr	r2, [pc, #32]	@ (8002f24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002f02:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	3b01      	subs	r3, #1
 8002f08:	f003 031f 	and.w	r3, r3, #31
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	409a      	lsls	r2, r3
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8002f14:	bf00      	nop
 8002f16:	3714      	adds	r7, #20
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1e:	4770      	bx	lr
 8002f20:	1000823f 	.word	0x1000823f
 8002f24:	40020940 	.word	0x40020940

08002f28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b087      	sub	sp, #28
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
 8002f30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002f32:	2300      	movs	r3, #0
 8002f34:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002f36:	e15a      	b.n	80031ee <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	681a      	ldr	r2, [r3, #0]
 8002f3c:	2101      	movs	r1, #1
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	fa01 f303 	lsl.w	r3, r1, r3
 8002f44:	4013      	ands	r3, r2
 8002f46:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	f000 814c 	beq.w	80031e8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	f003 0303 	and.w	r3, r3, #3
 8002f58:	2b01      	cmp	r3, #1
 8002f5a:	d005      	beq.n	8002f68 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002f64:	2b02      	cmp	r3, #2
 8002f66:	d130      	bne.n	8002fca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	005b      	lsls	r3, r3, #1
 8002f72:	2203      	movs	r2, #3
 8002f74:	fa02 f303 	lsl.w	r3, r2, r3
 8002f78:	43db      	mvns	r3, r3
 8002f7a:	693a      	ldr	r2, [r7, #16]
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	68da      	ldr	r2, [r3, #12]
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	005b      	lsls	r3, r3, #1
 8002f88:	fa02 f303 	lsl.w	r3, r2, r3
 8002f8c:	693a      	ldr	r2, [r7, #16]
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	693a      	ldr	r2, [r7, #16]
 8002f96:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa6:	43db      	mvns	r3, r3
 8002fa8:	693a      	ldr	r2, [r7, #16]
 8002faa:	4013      	ands	r3, r2
 8002fac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	091b      	lsrs	r3, r3, #4
 8002fb4:	f003 0201 	and.w	r2, r3, #1
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	fa02 f303 	lsl.w	r3, r2, r3
 8002fbe:	693a      	ldr	r2, [r7, #16]
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	693a      	ldr	r2, [r7, #16]
 8002fc8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	f003 0303 	and.w	r3, r3, #3
 8002fd2:	2b03      	cmp	r3, #3
 8002fd4:	d017      	beq.n	8003006 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	68db      	ldr	r3, [r3, #12]
 8002fda:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	005b      	lsls	r3, r3, #1
 8002fe0:	2203      	movs	r2, #3
 8002fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe6:	43db      	mvns	r3, r3
 8002fe8:	693a      	ldr	r2, [r7, #16]
 8002fea:	4013      	ands	r3, r2
 8002fec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	689a      	ldr	r2, [r3, #8]
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	005b      	lsls	r3, r3, #1
 8002ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8002ffa:	693a      	ldr	r2, [r7, #16]
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	693a      	ldr	r2, [r7, #16]
 8003004:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	f003 0303 	and.w	r3, r3, #3
 800300e:	2b02      	cmp	r3, #2
 8003010:	d123      	bne.n	800305a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	08da      	lsrs	r2, r3, #3
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	3208      	adds	r2, #8
 800301a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800301e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	f003 0307 	and.w	r3, r3, #7
 8003026:	009b      	lsls	r3, r3, #2
 8003028:	220f      	movs	r2, #15
 800302a:	fa02 f303 	lsl.w	r3, r2, r3
 800302e:	43db      	mvns	r3, r3
 8003030:	693a      	ldr	r2, [r7, #16]
 8003032:	4013      	ands	r3, r2
 8003034:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	691a      	ldr	r2, [r3, #16]
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	f003 0307 	and.w	r3, r3, #7
 8003040:	009b      	lsls	r3, r3, #2
 8003042:	fa02 f303 	lsl.w	r3, r2, r3
 8003046:	693a      	ldr	r2, [r7, #16]
 8003048:	4313      	orrs	r3, r2
 800304a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	08da      	lsrs	r2, r3, #3
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	3208      	adds	r2, #8
 8003054:	6939      	ldr	r1, [r7, #16]
 8003056:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	005b      	lsls	r3, r3, #1
 8003064:	2203      	movs	r2, #3
 8003066:	fa02 f303 	lsl.w	r3, r2, r3
 800306a:	43db      	mvns	r3, r3
 800306c:	693a      	ldr	r2, [r7, #16]
 800306e:	4013      	ands	r3, r2
 8003070:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	f003 0203 	and.w	r2, r3, #3
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	005b      	lsls	r3, r3, #1
 800307e:	fa02 f303 	lsl.w	r3, r2, r3
 8003082:	693a      	ldr	r2, [r7, #16]
 8003084:	4313      	orrs	r3, r2
 8003086:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	693a      	ldr	r2, [r7, #16]
 800308c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003096:	2b00      	cmp	r3, #0
 8003098:	f000 80a6 	beq.w	80031e8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800309c:	4b5b      	ldr	r3, [pc, #364]	@ (800320c <HAL_GPIO_Init+0x2e4>)
 800309e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030a0:	4a5a      	ldr	r2, [pc, #360]	@ (800320c <HAL_GPIO_Init+0x2e4>)
 80030a2:	f043 0301 	orr.w	r3, r3, #1
 80030a6:	6613      	str	r3, [r2, #96]	@ 0x60
 80030a8:	4b58      	ldr	r3, [pc, #352]	@ (800320c <HAL_GPIO_Init+0x2e4>)
 80030aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030ac:	f003 0301 	and.w	r3, r3, #1
 80030b0:	60bb      	str	r3, [r7, #8]
 80030b2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80030b4:	4a56      	ldr	r2, [pc, #344]	@ (8003210 <HAL_GPIO_Init+0x2e8>)
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	089b      	lsrs	r3, r3, #2
 80030ba:	3302      	adds	r3, #2
 80030bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030c0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	f003 0303 	and.w	r3, r3, #3
 80030c8:	009b      	lsls	r3, r3, #2
 80030ca:	220f      	movs	r2, #15
 80030cc:	fa02 f303 	lsl.w	r3, r2, r3
 80030d0:	43db      	mvns	r3, r3
 80030d2:	693a      	ldr	r2, [r7, #16]
 80030d4:	4013      	ands	r3, r2
 80030d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80030de:	d01f      	beq.n	8003120 <HAL_GPIO_Init+0x1f8>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	4a4c      	ldr	r2, [pc, #304]	@ (8003214 <HAL_GPIO_Init+0x2ec>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d019      	beq.n	800311c <HAL_GPIO_Init+0x1f4>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	4a4b      	ldr	r2, [pc, #300]	@ (8003218 <HAL_GPIO_Init+0x2f0>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d013      	beq.n	8003118 <HAL_GPIO_Init+0x1f0>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	4a4a      	ldr	r2, [pc, #296]	@ (800321c <HAL_GPIO_Init+0x2f4>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d00d      	beq.n	8003114 <HAL_GPIO_Init+0x1ec>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	4a49      	ldr	r2, [pc, #292]	@ (8003220 <HAL_GPIO_Init+0x2f8>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d007      	beq.n	8003110 <HAL_GPIO_Init+0x1e8>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	4a48      	ldr	r2, [pc, #288]	@ (8003224 <HAL_GPIO_Init+0x2fc>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d101      	bne.n	800310c <HAL_GPIO_Init+0x1e4>
 8003108:	2305      	movs	r3, #5
 800310a:	e00a      	b.n	8003122 <HAL_GPIO_Init+0x1fa>
 800310c:	2306      	movs	r3, #6
 800310e:	e008      	b.n	8003122 <HAL_GPIO_Init+0x1fa>
 8003110:	2304      	movs	r3, #4
 8003112:	e006      	b.n	8003122 <HAL_GPIO_Init+0x1fa>
 8003114:	2303      	movs	r3, #3
 8003116:	e004      	b.n	8003122 <HAL_GPIO_Init+0x1fa>
 8003118:	2302      	movs	r3, #2
 800311a:	e002      	b.n	8003122 <HAL_GPIO_Init+0x1fa>
 800311c:	2301      	movs	r3, #1
 800311e:	e000      	b.n	8003122 <HAL_GPIO_Init+0x1fa>
 8003120:	2300      	movs	r3, #0
 8003122:	697a      	ldr	r2, [r7, #20]
 8003124:	f002 0203 	and.w	r2, r2, #3
 8003128:	0092      	lsls	r2, r2, #2
 800312a:	4093      	lsls	r3, r2
 800312c:	693a      	ldr	r2, [r7, #16]
 800312e:	4313      	orrs	r3, r2
 8003130:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003132:	4937      	ldr	r1, [pc, #220]	@ (8003210 <HAL_GPIO_Init+0x2e8>)
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	089b      	lsrs	r3, r3, #2
 8003138:	3302      	adds	r3, #2
 800313a:	693a      	ldr	r2, [r7, #16]
 800313c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003140:	4b39      	ldr	r3, [pc, #228]	@ (8003228 <HAL_GPIO_Init+0x300>)
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	43db      	mvns	r3, r3
 800314a:	693a      	ldr	r2, [r7, #16]
 800314c:	4013      	ands	r3, r2
 800314e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003158:	2b00      	cmp	r3, #0
 800315a:	d003      	beq.n	8003164 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800315c:	693a      	ldr	r2, [r7, #16]
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	4313      	orrs	r3, r2
 8003162:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003164:	4a30      	ldr	r2, [pc, #192]	@ (8003228 <HAL_GPIO_Init+0x300>)
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800316a:	4b2f      	ldr	r3, [pc, #188]	@ (8003228 <HAL_GPIO_Init+0x300>)
 800316c:	68db      	ldr	r3, [r3, #12]
 800316e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	43db      	mvns	r3, r3
 8003174:	693a      	ldr	r2, [r7, #16]
 8003176:	4013      	ands	r3, r2
 8003178:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003182:	2b00      	cmp	r3, #0
 8003184:	d003      	beq.n	800318e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003186:	693a      	ldr	r2, [r7, #16]
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	4313      	orrs	r3, r2
 800318c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800318e:	4a26      	ldr	r2, [pc, #152]	@ (8003228 <HAL_GPIO_Init+0x300>)
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003194:	4b24      	ldr	r3, [pc, #144]	@ (8003228 <HAL_GPIO_Init+0x300>)
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	43db      	mvns	r3, r3
 800319e:	693a      	ldr	r2, [r7, #16]
 80031a0:	4013      	ands	r3, r2
 80031a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d003      	beq.n	80031b8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80031b0:	693a      	ldr	r2, [r7, #16]
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	4313      	orrs	r3, r2
 80031b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80031b8:	4a1b      	ldr	r2, [pc, #108]	@ (8003228 <HAL_GPIO_Init+0x300>)
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80031be:	4b1a      	ldr	r3, [pc, #104]	@ (8003228 <HAL_GPIO_Init+0x300>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	43db      	mvns	r3, r3
 80031c8:	693a      	ldr	r2, [r7, #16]
 80031ca:	4013      	ands	r3, r2
 80031cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d003      	beq.n	80031e2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80031da:	693a      	ldr	r2, [r7, #16]
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	4313      	orrs	r3, r2
 80031e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80031e2:	4a11      	ldr	r2, [pc, #68]	@ (8003228 <HAL_GPIO_Init+0x300>)
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	3301      	adds	r3, #1
 80031ec:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	681a      	ldr	r2, [r3, #0]
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	fa22 f303 	lsr.w	r3, r2, r3
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	f47f ae9d 	bne.w	8002f38 <HAL_GPIO_Init+0x10>
  }
}
 80031fe:	bf00      	nop
 8003200:	bf00      	nop
 8003202:	371c      	adds	r7, #28
 8003204:	46bd      	mov	sp, r7
 8003206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320a:	4770      	bx	lr
 800320c:	40021000 	.word	0x40021000
 8003210:	40010000 	.word	0x40010000
 8003214:	48000400 	.word	0x48000400
 8003218:	48000800 	.word	0x48000800
 800321c:	48000c00 	.word	0x48000c00
 8003220:	48001000 	.word	0x48001000
 8003224:	48001400 	.word	0x48001400
 8003228:	40010400 	.word	0x40010400

0800322c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800322c:	b480      	push	{r7}
 800322e:	b083      	sub	sp, #12
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
 8003234:	460b      	mov	r3, r1
 8003236:	807b      	strh	r3, [r7, #2]
 8003238:	4613      	mov	r3, r2
 800323a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800323c:	787b      	ldrb	r3, [r7, #1]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d003      	beq.n	800324a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003242:	887a      	ldrh	r2, [r7, #2]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003248:	e002      	b.n	8003250 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800324a:	887a      	ldrh	r2, [r7, #2]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003250:	bf00      	nop
 8003252:	370c      	adds	r7, #12
 8003254:	46bd      	mov	sp, r7
 8003256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325a:	4770      	bx	lr

0800325c <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800325c:	b480      	push	{r7}
 800325e:	b085      	sub	sp, #20
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
 8003264:	460b      	mov	r3, r1
 8003266:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	695b      	ldr	r3, [r3, #20]
 800326c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800326e:	887a      	ldrh	r2, [r7, #2]
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	4013      	ands	r3, r2
 8003274:	041a      	lsls	r2, r3, #16
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	43d9      	mvns	r1, r3
 800327a:	887b      	ldrh	r3, [r7, #2]
 800327c:	400b      	ands	r3, r1
 800327e:	431a      	orrs	r2, r3
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	619a      	str	r2, [r3, #24]
}
 8003284:	bf00      	nop
 8003286:	3714      	adds	r7, #20
 8003288:	46bd      	mov	sp, r7
 800328a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328e:	4770      	bx	lr

08003290 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b082      	sub	sp, #8
 8003294:	af00      	add	r7, sp, #0
 8003296:	4603      	mov	r3, r0
 8003298:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800329a:	4b08      	ldr	r3, [pc, #32]	@ (80032bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800329c:	695a      	ldr	r2, [r3, #20]
 800329e:	88fb      	ldrh	r3, [r7, #6]
 80032a0:	4013      	ands	r3, r2
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d006      	beq.n	80032b4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80032a6:	4a05      	ldr	r2, [pc, #20]	@ (80032bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80032a8:	88fb      	ldrh	r3, [r7, #6]
 80032aa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80032ac:	88fb      	ldrh	r3, [r7, #6]
 80032ae:	4618      	mov	r0, r3
 80032b0:	f000 f806 	bl	80032c0 <HAL_GPIO_EXTI_Callback>
  }
}
 80032b4:	bf00      	nop
 80032b6:	3708      	adds	r7, #8
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bd80      	pop	{r7, pc}
 80032bc:	40010400 	.word	0x40010400

080032c0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b083      	sub	sp, #12
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	4603      	mov	r3, r0
 80032c8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80032ca:	bf00      	nop
 80032cc:	370c      	adds	r7, #12
 80032ce:	46bd      	mov	sp, r7
 80032d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d4:	4770      	bx	lr

080032d6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80032d6:	b580      	push	{r7, lr}
 80032d8:	b084      	sub	sp, #16
 80032da:	af00      	add	r7, sp, #0
 80032dc:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d101      	bne.n	80032e8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80032e4:	2301      	movs	r3, #1
 80032e6:	e0c0      	b.n	800346a <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 80032ee:	b2db      	uxtb	r3, r3
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d106      	bne.n	8003302 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2200      	movs	r2, #0
 80032f8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80032fc:	6878      	ldr	r0, [r7, #4]
 80032fe:	f008 fd49 	bl	800bd94 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2203      	movs	r2, #3
 8003306:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4618      	mov	r0, r3
 8003310:	f005 f85f 	bl	80083d2 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003314:	2300      	movs	r3, #0
 8003316:	73fb      	strb	r3, [r7, #15]
 8003318:	e03e      	b.n	8003398 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800331a:	7bfa      	ldrb	r2, [r7, #15]
 800331c:	6879      	ldr	r1, [r7, #4]
 800331e:	4613      	mov	r3, r2
 8003320:	009b      	lsls	r3, r3, #2
 8003322:	4413      	add	r3, r2
 8003324:	00db      	lsls	r3, r3, #3
 8003326:	440b      	add	r3, r1
 8003328:	3311      	adds	r3, #17
 800332a:	2201      	movs	r2, #1
 800332c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800332e:	7bfa      	ldrb	r2, [r7, #15]
 8003330:	6879      	ldr	r1, [r7, #4]
 8003332:	4613      	mov	r3, r2
 8003334:	009b      	lsls	r3, r3, #2
 8003336:	4413      	add	r3, r2
 8003338:	00db      	lsls	r3, r3, #3
 800333a:	440b      	add	r3, r1
 800333c:	3310      	adds	r3, #16
 800333e:	7bfa      	ldrb	r2, [r7, #15]
 8003340:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003342:	7bfa      	ldrb	r2, [r7, #15]
 8003344:	6879      	ldr	r1, [r7, #4]
 8003346:	4613      	mov	r3, r2
 8003348:	009b      	lsls	r3, r3, #2
 800334a:	4413      	add	r3, r2
 800334c:	00db      	lsls	r3, r3, #3
 800334e:	440b      	add	r3, r1
 8003350:	3313      	adds	r3, #19
 8003352:	2200      	movs	r2, #0
 8003354:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003356:	7bfa      	ldrb	r2, [r7, #15]
 8003358:	6879      	ldr	r1, [r7, #4]
 800335a:	4613      	mov	r3, r2
 800335c:	009b      	lsls	r3, r3, #2
 800335e:	4413      	add	r3, r2
 8003360:	00db      	lsls	r3, r3, #3
 8003362:	440b      	add	r3, r1
 8003364:	3320      	adds	r3, #32
 8003366:	2200      	movs	r2, #0
 8003368:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800336a:	7bfa      	ldrb	r2, [r7, #15]
 800336c:	6879      	ldr	r1, [r7, #4]
 800336e:	4613      	mov	r3, r2
 8003370:	009b      	lsls	r3, r3, #2
 8003372:	4413      	add	r3, r2
 8003374:	00db      	lsls	r3, r3, #3
 8003376:	440b      	add	r3, r1
 8003378:	3324      	adds	r3, #36	@ 0x24
 800337a:	2200      	movs	r2, #0
 800337c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800337e:	7bfb      	ldrb	r3, [r7, #15]
 8003380:	6879      	ldr	r1, [r7, #4]
 8003382:	1c5a      	adds	r2, r3, #1
 8003384:	4613      	mov	r3, r2
 8003386:	009b      	lsls	r3, r3, #2
 8003388:	4413      	add	r3, r2
 800338a:	00db      	lsls	r3, r3, #3
 800338c:	440b      	add	r3, r1
 800338e:	2200      	movs	r2, #0
 8003390:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003392:	7bfb      	ldrb	r3, [r7, #15]
 8003394:	3301      	adds	r3, #1
 8003396:	73fb      	strb	r3, [r7, #15]
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	791b      	ldrb	r3, [r3, #4]
 800339c:	7bfa      	ldrb	r2, [r7, #15]
 800339e:	429a      	cmp	r2, r3
 80033a0:	d3bb      	bcc.n	800331a <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033a2:	2300      	movs	r3, #0
 80033a4:	73fb      	strb	r3, [r7, #15]
 80033a6:	e044      	b.n	8003432 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80033a8:	7bfa      	ldrb	r2, [r7, #15]
 80033aa:	6879      	ldr	r1, [r7, #4]
 80033ac:	4613      	mov	r3, r2
 80033ae:	009b      	lsls	r3, r3, #2
 80033b0:	4413      	add	r3, r2
 80033b2:	00db      	lsls	r3, r3, #3
 80033b4:	440b      	add	r3, r1
 80033b6:	f203 1351 	addw	r3, r3, #337	@ 0x151
 80033ba:	2200      	movs	r2, #0
 80033bc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80033be:	7bfa      	ldrb	r2, [r7, #15]
 80033c0:	6879      	ldr	r1, [r7, #4]
 80033c2:	4613      	mov	r3, r2
 80033c4:	009b      	lsls	r3, r3, #2
 80033c6:	4413      	add	r3, r2
 80033c8:	00db      	lsls	r3, r3, #3
 80033ca:	440b      	add	r3, r1
 80033cc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80033d0:	7bfa      	ldrb	r2, [r7, #15]
 80033d2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80033d4:	7bfa      	ldrb	r2, [r7, #15]
 80033d6:	6879      	ldr	r1, [r7, #4]
 80033d8:	4613      	mov	r3, r2
 80033da:	009b      	lsls	r3, r3, #2
 80033dc:	4413      	add	r3, r2
 80033de:	00db      	lsls	r3, r3, #3
 80033e0:	440b      	add	r3, r1
 80033e2:	f203 1353 	addw	r3, r3, #339	@ 0x153
 80033e6:	2200      	movs	r2, #0
 80033e8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80033ea:	7bfa      	ldrb	r2, [r7, #15]
 80033ec:	6879      	ldr	r1, [r7, #4]
 80033ee:	4613      	mov	r3, r2
 80033f0:	009b      	lsls	r3, r3, #2
 80033f2:	4413      	add	r3, r2
 80033f4:	00db      	lsls	r3, r3, #3
 80033f6:	440b      	add	r3, r1
 80033f8:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 80033fc:	2200      	movs	r2, #0
 80033fe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003400:	7bfa      	ldrb	r2, [r7, #15]
 8003402:	6879      	ldr	r1, [r7, #4]
 8003404:	4613      	mov	r3, r2
 8003406:	009b      	lsls	r3, r3, #2
 8003408:	4413      	add	r3, r2
 800340a:	00db      	lsls	r3, r3, #3
 800340c:	440b      	add	r3, r1
 800340e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8003412:	2200      	movs	r2, #0
 8003414:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003416:	7bfa      	ldrb	r2, [r7, #15]
 8003418:	6879      	ldr	r1, [r7, #4]
 800341a:	4613      	mov	r3, r2
 800341c:	009b      	lsls	r3, r3, #2
 800341e:	4413      	add	r3, r2
 8003420:	00db      	lsls	r3, r3, #3
 8003422:	440b      	add	r3, r1
 8003424:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8003428:	2200      	movs	r2, #0
 800342a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800342c:	7bfb      	ldrb	r3, [r7, #15]
 800342e:	3301      	adds	r3, #1
 8003430:	73fb      	strb	r3, [r7, #15]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	791b      	ldrb	r3, [r3, #4]
 8003436:	7bfa      	ldrb	r2, [r7, #15]
 8003438:	429a      	cmp	r2, r3
 800343a:	d3b5      	bcc.n	80033a8 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6818      	ldr	r0, [r3, #0]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	3304      	adds	r3, #4
 8003444:	e893 0006 	ldmia.w	r3, {r1, r2}
 8003448:	f004 ffde 	bl	8008408 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2200      	movs	r2, #0
 8003450:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2201      	movs	r2, #1
 8003456:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	7a9b      	ldrb	r3, [r3, #10]
 800345e:	2b01      	cmp	r3, #1
 8003460:	d102      	bne.n	8003468 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003462:	6878      	ldr	r0, [r7, #4]
 8003464:	f001 fc0e 	bl	8004c84 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8003468:	2300      	movs	r3, #0
}
 800346a:	4618      	mov	r0, r3
 800346c:	3710      	adds	r7, #16
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}

08003472 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003472:	b580      	push	{r7, lr}
 8003474:	b082      	sub	sp, #8
 8003476:	af00      	add	r7, sp, #0
 8003478:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003480:	2b01      	cmp	r3, #1
 8003482:	d101      	bne.n	8003488 <HAL_PCD_Start+0x16>
 8003484:	2302      	movs	r3, #2
 8003486:	e012      	b.n	80034ae <HAL_PCD_Start+0x3c>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2201      	movs	r2, #1
 800348c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4618      	mov	r0, r3
 8003496:	f004 ff85 	bl	80083a4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4618      	mov	r0, r3
 80034a0:	f006 fd62 	bl	8009f68 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2200      	movs	r2, #0
 80034a8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80034ac:	2300      	movs	r3, #0
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	3708      	adds	r7, #8
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}

080034b6 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80034b6:	b580      	push	{r7, lr}
 80034b8:	b084      	sub	sp, #16
 80034ba:	af00      	add	r7, sp, #0
 80034bc:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4618      	mov	r0, r3
 80034c4:	f006 fd67 	bl	8009f96 <USB_ReadInterrupts>
 80034c8:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d003      	beq.n	80034dc <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80034d4:	6878      	ldr	r0, [r7, #4]
 80034d6:	f000 fb06 	bl	8003ae6 <PCD_EP_ISR_Handler>

    return;
 80034da:	e110      	b.n	80036fe <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d013      	beq.n	800350e <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80034ee:	b29a      	uxth	r2, r3
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80034f8:	b292      	uxth	r2, r2
 80034fa:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	f008 fcd9 	bl	800beb6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003504:	2100      	movs	r1, #0
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	f000 f8fc 	bl	8003704 <HAL_PCD_SetAddress>

    return;
 800350c:	e0f7      	b.n	80036fe <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003514:	2b00      	cmp	r3, #0
 8003516:	d00c      	beq.n	8003532 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003520:	b29a      	uxth	r2, r3
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800352a:	b292      	uxth	r2, r2
 800352c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8003530:	e0e5      	b.n	80036fe <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003538:	2b00      	cmp	r3, #0
 800353a:	d00c      	beq.n	8003556 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003544:	b29a      	uxth	r2, r3
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800354e:	b292      	uxth	r2, r2
 8003550:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8003554:	e0d3      	b.n	80036fe <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800355c:	2b00      	cmp	r3, #0
 800355e:	d034      	beq.n	80035ca <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003568:	b29a      	uxth	r2, r3
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f022 0204 	bic.w	r2, r2, #4
 8003572:	b292      	uxth	r2, r2
 8003574:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003580:	b29a      	uxth	r2, r3
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f022 0208 	bic.w	r2, r2, #8
 800358a:	b292      	uxth	r2, r2
 800358c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8003596:	2b01      	cmp	r3, #1
 8003598:	d107      	bne.n	80035aa <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2200      	movs	r2, #0
 800359e:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80035a2:	2100      	movs	r1, #0
 80035a4:	6878      	ldr	r0, [r7, #4]
 80035a6:	f008 fe79 	bl	800c29c <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	f008 fcbc 	bl	800bf28 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80035b8:	b29a      	uxth	r2, r3
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80035c2:	b292      	uxth	r2, r2
 80035c4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80035c8:	e099      	b.n	80036fe <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d027      	beq.n	8003624 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80035dc:	b29a      	uxth	r2, r3
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f042 0208 	orr.w	r2, r2, #8
 80035e6:	b292      	uxth	r2, r2
 80035e8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80035f4:	b29a      	uxth	r2, r3
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80035fe:	b292      	uxth	r2, r2
 8003600:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800360c:	b29a      	uxth	r2, r3
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f042 0204 	orr.w	r2, r2, #4
 8003616:	b292      	uxth	r2, r2
 8003618:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800361c:	6878      	ldr	r0, [r7, #4]
 800361e:	f008 fc69 	bl	800bef4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003622:	e06c      	b.n	80036fe <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800362a:	2b00      	cmp	r3, #0
 800362c:	d040      	beq.n	80036b0 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003636:	b29a      	uxth	r2, r3
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003640:	b292      	uxth	r2, r2
 8003642:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 800364c:	2b00      	cmp	r3, #0
 800364e:	d12b      	bne.n	80036a8 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003658:	b29a      	uxth	r2, r3
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f042 0204 	orr.w	r2, r2, #4
 8003662:	b292      	uxth	r2, r2
 8003664:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003670:	b29a      	uxth	r2, r3
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f042 0208 	orr.w	r2, r2, #8
 800367a:	b292      	uxth	r2, r2
 800367c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2201      	movs	r2, #1
 8003684:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8003690:	b29b      	uxth	r3, r3
 8003692:	089b      	lsrs	r3, r3, #2
 8003694:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800369e:	2101      	movs	r1, #1
 80036a0:	6878      	ldr	r0, [r7, #4]
 80036a2:	f008 fdfb 	bl	800c29c <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 80036a6:	e02a      	b.n	80036fe <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 80036a8:	6878      	ldr	r0, [r7, #4]
 80036aa:	f008 fc23 	bl	800bef4 <HAL_PCD_SuspendCallback>
    return;
 80036ae:	e026      	b.n	80036fe <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d00f      	beq.n	80036da <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80036c2:	b29a      	uxth	r2, r3
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80036cc:	b292      	uxth	r2, r2
 80036ce:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80036d2:	6878      	ldr	r0, [r7, #4]
 80036d4:	f008 fbe1 	bl	800be9a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80036d8:	e011      	b.n	80036fe <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d00c      	beq.n	80036fe <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80036ec:	b29a      	uxth	r2, r3
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80036f6:	b292      	uxth	r2, r2
 80036f8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80036fc:	bf00      	nop
  }
}
 80036fe:	3710      	adds	r7, #16
 8003700:	46bd      	mov	sp, r7
 8003702:	bd80      	pop	{r7, pc}

08003704 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b082      	sub	sp, #8
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
 800370c:	460b      	mov	r3, r1
 800370e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003716:	2b01      	cmp	r3, #1
 8003718:	d101      	bne.n	800371e <HAL_PCD_SetAddress+0x1a>
 800371a:	2302      	movs	r3, #2
 800371c:	e012      	b.n	8003744 <HAL_PCD_SetAddress+0x40>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2201      	movs	r2, #1
 8003722:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	78fa      	ldrb	r2, [r7, #3]
 800372a:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	78fa      	ldrb	r2, [r7, #3]
 8003732:	4611      	mov	r1, r2
 8003734:	4618      	mov	r0, r3
 8003736:	f006 fc03 	bl	8009f40 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2200      	movs	r2, #0
 800373e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003742:	2300      	movs	r3, #0
}
 8003744:	4618      	mov	r0, r3
 8003746:	3708      	adds	r7, #8
 8003748:	46bd      	mov	sp, r7
 800374a:	bd80      	pop	{r7, pc}

0800374c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b084      	sub	sp, #16
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
 8003754:	4608      	mov	r0, r1
 8003756:	4611      	mov	r1, r2
 8003758:	461a      	mov	r2, r3
 800375a:	4603      	mov	r3, r0
 800375c:	70fb      	strb	r3, [r7, #3]
 800375e:	460b      	mov	r3, r1
 8003760:	803b      	strh	r3, [r7, #0]
 8003762:	4613      	mov	r3, r2
 8003764:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8003766:	2300      	movs	r3, #0
 8003768:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800376a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800376e:	2b00      	cmp	r3, #0
 8003770:	da0e      	bge.n	8003790 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003772:	78fb      	ldrb	r3, [r7, #3]
 8003774:	f003 0207 	and.w	r2, r3, #7
 8003778:	4613      	mov	r3, r2
 800377a:	009b      	lsls	r3, r3, #2
 800377c:	4413      	add	r3, r2
 800377e:	00db      	lsls	r3, r3, #3
 8003780:	3310      	adds	r3, #16
 8003782:	687a      	ldr	r2, [r7, #4]
 8003784:	4413      	add	r3, r2
 8003786:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	2201      	movs	r2, #1
 800378c:	705a      	strb	r2, [r3, #1]
 800378e:	e00e      	b.n	80037ae <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003790:	78fb      	ldrb	r3, [r7, #3]
 8003792:	f003 0207 	and.w	r2, r3, #7
 8003796:	4613      	mov	r3, r2
 8003798:	009b      	lsls	r3, r3, #2
 800379a:	4413      	add	r3, r2
 800379c:	00db      	lsls	r3, r3, #3
 800379e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80037a2:	687a      	ldr	r2, [r7, #4]
 80037a4:	4413      	add	r3, r2
 80037a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	2200      	movs	r2, #0
 80037ac:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80037ae:	78fb      	ldrb	r3, [r7, #3]
 80037b0:	f003 0307 	and.w	r3, r3, #7
 80037b4:	b2da      	uxtb	r2, r3
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80037ba:	883b      	ldrh	r3, [r7, #0]
 80037bc:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	78ba      	ldrb	r2, [r7, #2]
 80037c8:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80037ca:	78bb      	ldrb	r3, [r7, #2]
 80037cc:	2b02      	cmp	r3, #2
 80037ce:	d102      	bne.n	80037d6 <HAL_PCD_EP_Open+0x8a>
  {
    ep->data_pid_start = 0U;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	2200      	movs	r2, #0
 80037d4:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80037dc:	2b01      	cmp	r3, #1
 80037de:	d101      	bne.n	80037e4 <HAL_PCD_EP_Open+0x98>
 80037e0:	2302      	movs	r3, #2
 80037e2:	e00e      	b.n	8003802 <HAL_PCD_EP_Open+0xb6>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2201      	movs	r2, #1
 80037e8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	68f9      	ldr	r1, [r7, #12]
 80037f2:	4618      	mov	r0, r3
 80037f4:	f004 fe26 	bl	8008444 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2200      	movs	r2, #0
 80037fc:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8003800:	7afb      	ldrb	r3, [r7, #11]
}
 8003802:	4618      	mov	r0, r3
 8003804:	3710      	adds	r7, #16
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}

0800380a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800380a:	b580      	push	{r7, lr}
 800380c:	b084      	sub	sp, #16
 800380e:	af00      	add	r7, sp, #0
 8003810:	6078      	str	r0, [r7, #4]
 8003812:	460b      	mov	r3, r1
 8003814:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003816:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800381a:	2b00      	cmp	r3, #0
 800381c:	da0e      	bge.n	800383c <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800381e:	78fb      	ldrb	r3, [r7, #3]
 8003820:	f003 0207 	and.w	r2, r3, #7
 8003824:	4613      	mov	r3, r2
 8003826:	009b      	lsls	r3, r3, #2
 8003828:	4413      	add	r3, r2
 800382a:	00db      	lsls	r3, r3, #3
 800382c:	3310      	adds	r3, #16
 800382e:	687a      	ldr	r2, [r7, #4]
 8003830:	4413      	add	r3, r2
 8003832:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	2201      	movs	r2, #1
 8003838:	705a      	strb	r2, [r3, #1]
 800383a:	e00e      	b.n	800385a <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800383c:	78fb      	ldrb	r3, [r7, #3]
 800383e:	f003 0207 	and.w	r2, r3, #7
 8003842:	4613      	mov	r3, r2
 8003844:	009b      	lsls	r3, r3, #2
 8003846:	4413      	add	r3, r2
 8003848:	00db      	lsls	r3, r3, #3
 800384a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800384e:	687a      	ldr	r2, [r7, #4]
 8003850:	4413      	add	r3, r2
 8003852:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	2200      	movs	r2, #0
 8003858:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800385a:	78fb      	ldrb	r3, [r7, #3]
 800385c:	f003 0307 	and.w	r3, r3, #7
 8003860:	b2da      	uxtb	r2, r3
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800386c:	2b01      	cmp	r3, #1
 800386e:	d101      	bne.n	8003874 <HAL_PCD_EP_Close+0x6a>
 8003870:	2302      	movs	r3, #2
 8003872:	e00e      	b.n	8003892 <HAL_PCD_EP_Close+0x88>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2201      	movs	r2, #1
 8003878:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	68f9      	ldr	r1, [r7, #12]
 8003882:	4618      	mov	r0, r3
 8003884:	f005 fac6 	bl	8008e14 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2200      	movs	r2, #0
 800388c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8003890:	2300      	movs	r3, #0
}
 8003892:	4618      	mov	r0, r3
 8003894:	3710      	adds	r7, #16
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}

0800389a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800389a:	b580      	push	{r7, lr}
 800389c:	b086      	sub	sp, #24
 800389e:	af00      	add	r7, sp, #0
 80038a0:	60f8      	str	r0, [r7, #12]
 80038a2:	607a      	str	r2, [r7, #4]
 80038a4:	603b      	str	r3, [r7, #0]
 80038a6:	460b      	mov	r3, r1
 80038a8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80038aa:	7afb      	ldrb	r3, [r7, #11]
 80038ac:	f003 0207 	and.w	r2, r3, #7
 80038b0:	4613      	mov	r3, r2
 80038b2:	009b      	lsls	r3, r3, #2
 80038b4:	4413      	add	r3, r2
 80038b6:	00db      	lsls	r3, r3, #3
 80038b8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80038bc:	68fa      	ldr	r2, [r7, #12]
 80038be:	4413      	add	r3, r2
 80038c0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	687a      	ldr	r2, [r7, #4]
 80038c6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	683a      	ldr	r2, [r7, #0]
 80038cc:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	2200      	movs	r2, #0
 80038d2:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	2200      	movs	r2, #0
 80038d8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80038da:	7afb      	ldrb	r3, [r7, #11]
 80038dc:	f003 0307 	and.w	r3, r3, #7
 80038e0:	b2da      	uxtb	r2, r3
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	6979      	ldr	r1, [r7, #20]
 80038ec:	4618      	mov	r0, r3
 80038ee:	f005 fc7e 	bl	80091ee <USB_EPStartXfer>

  return HAL_OK;
 80038f2:	2300      	movs	r3, #0
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	3718      	adds	r7, #24
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}

080038fc <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b083      	sub	sp, #12
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
 8003904:	460b      	mov	r3, r1
 8003906:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003908:	78fb      	ldrb	r3, [r7, #3]
 800390a:	f003 0207 	and.w	r2, r3, #7
 800390e:	6879      	ldr	r1, [r7, #4]
 8003910:	4613      	mov	r3, r2
 8003912:	009b      	lsls	r3, r3, #2
 8003914:	4413      	add	r3, r2
 8003916:	00db      	lsls	r3, r3, #3
 8003918:	440b      	add	r3, r1
 800391a:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 800391e:	681b      	ldr	r3, [r3, #0]
}
 8003920:	4618      	mov	r0, r3
 8003922:	370c      	adds	r7, #12
 8003924:	46bd      	mov	sp, r7
 8003926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392a:	4770      	bx	lr

0800392c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b086      	sub	sp, #24
 8003930:	af00      	add	r7, sp, #0
 8003932:	60f8      	str	r0, [r7, #12]
 8003934:	607a      	str	r2, [r7, #4]
 8003936:	603b      	str	r3, [r7, #0]
 8003938:	460b      	mov	r3, r1
 800393a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800393c:	7afb      	ldrb	r3, [r7, #11]
 800393e:	f003 0207 	and.w	r2, r3, #7
 8003942:	4613      	mov	r3, r2
 8003944:	009b      	lsls	r3, r3, #2
 8003946:	4413      	add	r3, r2
 8003948:	00db      	lsls	r3, r3, #3
 800394a:	3310      	adds	r3, #16
 800394c:	68fa      	ldr	r2, [r7, #12]
 800394e:	4413      	add	r3, r2
 8003950:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003952:	697b      	ldr	r3, [r7, #20]
 8003954:	687a      	ldr	r2, [r7, #4]
 8003956:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003958:	697b      	ldr	r3, [r7, #20]
 800395a:	683a      	ldr	r2, [r7, #0]
 800395c:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	2201      	movs	r2, #1
 8003962:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	683a      	ldr	r2, [r7, #0]
 800396a:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	2200      	movs	r2, #0
 8003970:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	2201      	movs	r2, #1
 8003976:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003978:	7afb      	ldrb	r3, [r7, #11]
 800397a:	f003 0307 	and.w	r3, r3, #7
 800397e:	b2da      	uxtb	r2, r3
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	6979      	ldr	r1, [r7, #20]
 800398a:	4618      	mov	r0, r3
 800398c:	f005 fc2f 	bl	80091ee <USB_EPStartXfer>

  return HAL_OK;
 8003990:	2300      	movs	r3, #0
}
 8003992:	4618      	mov	r0, r3
 8003994:	3718      	adds	r7, #24
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}

0800399a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800399a:	b580      	push	{r7, lr}
 800399c:	b084      	sub	sp, #16
 800399e:	af00      	add	r7, sp, #0
 80039a0:	6078      	str	r0, [r7, #4]
 80039a2:	460b      	mov	r3, r1
 80039a4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80039a6:	78fb      	ldrb	r3, [r7, #3]
 80039a8:	f003 0307 	and.w	r3, r3, #7
 80039ac:	687a      	ldr	r2, [r7, #4]
 80039ae:	7912      	ldrb	r2, [r2, #4]
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d901      	bls.n	80039b8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80039b4:	2301      	movs	r3, #1
 80039b6:	e03e      	b.n	8003a36 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80039b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	da0e      	bge.n	80039de <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80039c0:	78fb      	ldrb	r3, [r7, #3]
 80039c2:	f003 0207 	and.w	r2, r3, #7
 80039c6:	4613      	mov	r3, r2
 80039c8:	009b      	lsls	r3, r3, #2
 80039ca:	4413      	add	r3, r2
 80039cc:	00db      	lsls	r3, r3, #3
 80039ce:	3310      	adds	r3, #16
 80039d0:	687a      	ldr	r2, [r7, #4]
 80039d2:	4413      	add	r3, r2
 80039d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	2201      	movs	r2, #1
 80039da:	705a      	strb	r2, [r3, #1]
 80039dc:	e00c      	b.n	80039f8 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80039de:	78fa      	ldrb	r2, [r7, #3]
 80039e0:	4613      	mov	r3, r2
 80039e2:	009b      	lsls	r3, r3, #2
 80039e4:	4413      	add	r3, r2
 80039e6:	00db      	lsls	r3, r3, #3
 80039e8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80039ec:	687a      	ldr	r2, [r7, #4]
 80039ee:	4413      	add	r3, r2
 80039f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	2200      	movs	r2, #0
 80039f6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	2201      	movs	r2, #1
 80039fc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80039fe:	78fb      	ldrb	r3, [r7, #3]
 8003a00:	f003 0307 	and.w	r3, r3, #7
 8003a04:	b2da      	uxtb	r2, r3
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003a10:	2b01      	cmp	r3, #1
 8003a12:	d101      	bne.n	8003a18 <HAL_PCD_EP_SetStall+0x7e>
 8003a14:	2302      	movs	r3, #2
 8003a16:	e00e      	b.n	8003a36 <HAL_PCD_EP_SetStall+0x9c>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	68f9      	ldr	r1, [r7, #12]
 8003a26:	4618      	mov	r0, r3
 8003a28:	f006 f990 	bl	8009d4c <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003a34:	2300      	movs	r3, #0
}
 8003a36:	4618      	mov	r0, r3
 8003a38:	3710      	adds	r7, #16
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}

08003a3e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003a3e:	b580      	push	{r7, lr}
 8003a40:	b084      	sub	sp, #16
 8003a42:	af00      	add	r7, sp, #0
 8003a44:	6078      	str	r0, [r7, #4]
 8003a46:	460b      	mov	r3, r1
 8003a48:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003a4a:	78fb      	ldrb	r3, [r7, #3]
 8003a4c:	f003 030f 	and.w	r3, r3, #15
 8003a50:	687a      	ldr	r2, [r7, #4]
 8003a52:	7912      	ldrb	r2, [r2, #4]
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d901      	bls.n	8003a5c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	e040      	b.n	8003ade <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003a5c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	da0e      	bge.n	8003a82 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a64:	78fb      	ldrb	r3, [r7, #3]
 8003a66:	f003 0207 	and.w	r2, r3, #7
 8003a6a:	4613      	mov	r3, r2
 8003a6c:	009b      	lsls	r3, r3, #2
 8003a6e:	4413      	add	r3, r2
 8003a70:	00db      	lsls	r3, r3, #3
 8003a72:	3310      	adds	r3, #16
 8003a74:	687a      	ldr	r2, [r7, #4]
 8003a76:	4413      	add	r3, r2
 8003a78:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	2201      	movs	r2, #1
 8003a7e:	705a      	strb	r2, [r3, #1]
 8003a80:	e00e      	b.n	8003aa0 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a82:	78fb      	ldrb	r3, [r7, #3]
 8003a84:	f003 0207 	and.w	r2, r3, #7
 8003a88:	4613      	mov	r3, r2
 8003a8a:	009b      	lsls	r3, r3, #2
 8003a8c:	4413      	add	r3, r2
 8003a8e:	00db      	lsls	r3, r3, #3
 8003a90:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003a94:	687a      	ldr	r2, [r7, #4]
 8003a96:	4413      	add	r3, r2
 8003a98:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003aa6:	78fb      	ldrb	r3, [r7, #3]
 8003aa8:	f003 0307 	and.w	r3, r3, #7
 8003aac:	b2da      	uxtb	r2, r3
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003ab8:	2b01      	cmp	r3, #1
 8003aba:	d101      	bne.n	8003ac0 <HAL_PCD_EP_ClrStall+0x82>
 8003abc:	2302      	movs	r3, #2
 8003abe:	e00e      	b.n	8003ade <HAL_PCD_EP_ClrStall+0xa0>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	68f9      	ldr	r1, [r7, #12]
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f006 f98d 	bl	8009dee <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003adc:	2300      	movs	r3, #0
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	3710      	adds	r7, #16
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}

08003ae6 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003ae6:	b580      	push	{r7, lr}
 8003ae8:	b092      	sub	sp, #72	@ 0x48
 8003aea:	af00      	add	r7, sp, #0
 8003aec:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003aee:	e333      	b.n	8004158 <PCD_EP_ISR_Handler+0x672>
  {
    wIstr = hpcd->Instance->ISTR;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003af8:	877b      	strh	r3, [r7, #58]	@ 0x3a

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003afa:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8003afc:	b2db      	uxtb	r3, r3
 8003afe:	f003 030f 	and.w	r3, r3, #15
 8003b02:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39

    if (epindex == 0U)
 8003b06:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	f040 8108 	bne.w	8003d20 <PCD_EP_ISR_Handler+0x23a>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003b10:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8003b12:	f003 0310 	and.w	r3, r3, #16
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d14c      	bne.n	8003bb4 <PCD_EP_ISR_Handler+0xce>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	881b      	ldrh	r3, [r3, #0]
 8003b20:	b29b      	uxth	r3, r3
 8003b22:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8003b26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b2a:	813b      	strh	r3, [r7, #8]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681a      	ldr	r2, [r3, #0]
 8003b30:	893b      	ldrh	r3, [r7, #8]
 8003b32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b3a:	b29b      	uxth	r3, r3
 8003b3c:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	3310      	adds	r3, #16
 8003b42:	643b      	str	r3, [r7, #64]	@ 0x40

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003b4c:	b29b      	uxth	r3, r3
 8003b4e:	461a      	mov	r2, r3
 8003b50:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003b52:	781b      	ldrb	r3, [r3, #0]
 8003b54:	00db      	lsls	r3, r3, #3
 8003b56:	4413      	add	r3, r2
 8003b58:	687a      	ldr	r2, [r7, #4]
 8003b5a:	6812      	ldr	r2, [r2, #0]
 8003b5c:	4413      	add	r3, r2
 8003b5e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003b62:	881b      	ldrh	r3, [r3, #0]
 8003b64:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003b68:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003b6a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003b6c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003b6e:	695a      	ldr	r2, [r3, #20]
 8003b70:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003b72:	69db      	ldr	r3, [r3, #28]
 8003b74:	441a      	add	r2, r3
 8003b76:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003b78:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003b7a:	2100      	movs	r1, #0
 8003b7c:	6878      	ldr	r0, [r7, #4]
 8003b7e:	f008 f972 	bl	800be66 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	7b1b      	ldrb	r3, [r3, #12]
 8003b86:	b2db      	uxtb	r3, r3
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	f000 82e5 	beq.w	8004158 <PCD_EP_ISR_Handler+0x672>
 8003b8e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003b90:	699b      	ldr	r3, [r3, #24]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	f040 82e0 	bne.w	8004158 <PCD_EP_ISR_Handler+0x672>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	7b1b      	ldrb	r3, [r3, #12]
 8003b9c:	b2db      	uxtb	r3, r3
 8003b9e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003ba2:	b2da      	uxtb	r2, r3
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	731a      	strb	r2, [r3, #12]
 8003bb2:	e2d1      	b.n	8004158 <PCD_EP_ISR_Handler+0x672>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003bba:	643b      	str	r3, [r7, #64]	@ 0x40
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	881b      	ldrh	r3, [r3, #0]
 8003bc2:	86fb      	strh	r3, [r7, #54]	@ 0x36

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003bc4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003bc6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d032      	beq.n	8003c34 <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003bd6:	b29b      	uxth	r3, r3
 8003bd8:	461a      	mov	r2, r3
 8003bda:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003bdc:	781b      	ldrb	r3, [r3, #0]
 8003bde:	00db      	lsls	r3, r3, #3
 8003be0:	4413      	add	r3, r2
 8003be2:	687a      	ldr	r2, [r7, #4]
 8003be4:	6812      	ldr	r2, [r2, #0]
 8003be6:	4413      	add	r3, r2
 8003be8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003bec:	881b      	ldrh	r3, [r3, #0]
 8003bee:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003bf2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003bf4:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6818      	ldr	r0, [r3, #0]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8003c00:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c02:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003c04:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c06:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003c08:	b29b      	uxth	r3, r3
 8003c0a:	f006 fa16 	bl	800a03a <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	881b      	ldrh	r3, [r3, #0]
 8003c14:	b29a      	uxth	r2, r3
 8003c16:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003c1a:	4013      	ands	r3, r2
 8003c1c:	817b      	strh	r3, [r7, #10]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	897a      	ldrh	r2, [r7, #10]
 8003c24:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003c28:	b292      	uxth	r2, r2
 8003c2a:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003c2c:	6878      	ldr	r0, [r7, #4]
 8003c2e:	f008 f8ed 	bl	800be0c <HAL_PCD_SetupStageCallback>
 8003c32:	e291      	b.n	8004158 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003c34:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	f280 828d 	bge.w	8004158 <PCD_EP_ISR_Handler+0x672>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	881b      	ldrh	r3, [r3, #0]
 8003c44:	b29a      	uxth	r2, r3
 8003c46:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003c4a:	4013      	ands	r3, r2
 8003c4c:	81fb      	strh	r3, [r7, #14]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	89fa      	ldrh	r2, [r7, #14]
 8003c54:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003c58:	b292      	uxth	r2, r2
 8003c5a:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003c64:	b29b      	uxth	r3, r3
 8003c66:	461a      	mov	r2, r3
 8003c68:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c6a:	781b      	ldrb	r3, [r3, #0]
 8003c6c:	00db      	lsls	r3, r3, #3
 8003c6e:	4413      	add	r3, r2
 8003c70:	687a      	ldr	r2, [r7, #4]
 8003c72:	6812      	ldr	r2, [r2, #0]
 8003c74:	4413      	add	r3, r2
 8003c76:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003c7a:	881b      	ldrh	r3, [r3, #0]
 8003c7c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003c80:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c82:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003c84:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c86:	69db      	ldr	r3, [r3, #28]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d019      	beq.n	8003cc0 <PCD_EP_ISR_Handler+0x1da>
 8003c8c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c8e:	695b      	ldr	r3, [r3, #20]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d015      	beq.n	8003cc0 <PCD_EP_ISR_Handler+0x1da>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6818      	ldr	r0, [r3, #0]
 8003c98:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c9a:	6959      	ldr	r1, [r3, #20]
 8003c9c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c9e:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003ca0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ca2:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003ca4:	b29b      	uxth	r3, r3
 8003ca6:	f006 f9c8 	bl	800a03a <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003caa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003cac:	695a      	ldr	r2, [r3, #20]
 8003cae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003cb0:	69db      	ldr	r3, [r3, #28]
 8003cb2:	441a      	add	r2, r3
 8003cb4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003cb6:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003cb8:	2100      	movs	r1, #0
 8003cba:	6878      	ldr	r0, [r7, #4]
 8003cbc:	f008 f8b8 	bl	800be30 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	881b      	ldrh	r3, [r3, #0]
 8003cc6:	86fb      	strh	r3, [r7, #54]	@ 0x36

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8003cc8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003cca:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	f040 8242 	bne.w	8004158 <PCD_EP_ISR_Handler+0x672>
 8003cd4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003cd6:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8003cda:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003cde:	f000 823b 	beq.w	8004158 <PCD_EP_ISR_Handler+0x672>
          {
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	881b      	ldrh	r3, [r3, #0]
 8003ce8:	b29b      	uxth	r3, r3
 8003cea:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003cee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003cf2:	81bb      	strh	r3, [r7, #12]
 8003cf4:	89bb      	ldrh	r3, [r7, #12]
 8003cf6:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8003cfa:	81bb      	strh	r3, [r7, #12]
 8003cfc:	89bb      	ldrh	r3, [r7, #12]
 8003cfe:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003d02:	81bb      	strh	r3, [r7, #12]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681a      	ldr	r2, [r3, #0]
 8003d08:	89bb      	ldrh	r3, [r7, #12]
 8003d0a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003d0e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003d12:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003d16:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003d1a:	b29b      	uxth	r3, r3
 8003d1c:	8013      	strh	r3, [r2, #0]
 8003d1e:	e21b      	b.n	8004158 <PCD_EP_ISR_Handler+0x672>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	461a      	mov	r2, r3
 8003d26:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8003d2a:	009b      	lsls	r3, r3, #2
 8003d2c:	4413      	add	r3, r2
 8003d2e:	881b      	ldrh	r3, [r3, #0]
 8003d30:	86fb      	strh	r3, [r7, #54]	@ 0x36

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003d32:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	f280 80f1 	bge.w	8003f1e <PCD_EP_ISR_Handler+0x438>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	461a      	mov	r2, r3
 8003d42:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8003d46:	009b      	lsls	r3, r3, #2
 8003d48:	4413      	add	r3, r2
 8003d4a:	881b      	ldrh	r3, [r3, #0]
 8003d4c:	b29a      	uxth	r2, r3
 8003d4e:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003d52:	4013      	ands	r3, r2
 8003d54:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	461a      	mov	r2, r3
 8003d5c:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8003d60:	009b      	lsls	r3, r3, #2
 8003d62:	4413      	add	r3, r2
 8003d64:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003d66:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003d6a:	b292      	uxth	r2, r2
 8003d6c:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003d6e:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8003d72:	4613      	mov	r3, r2
 8003d74:	009b      	lsls	r3, r3, #2
 8003d76:	4413      	add	r3, r2
 8003d78:	00db      	lsls	r3, r3, #3
 8003d7a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003d7e:	687a      	ldr	r2, [r7, #4]
 8003d80:	4413      	add	r3, r2
 8003d82:	643b      	str	r3, [r7, #64]	@ 0x40

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8003d84:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d86:	7b1b      	ldrb	r3, [r3, #12]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d123      	bne.n	8003dd4 <PCD_EP_ISR_Handler+0x2ee>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003d94:	b29b      	uxth	r3, r3
 8003d96:	461a      	mov	r2, r3
 8003d98:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d9a:	781b      	ldrb	r3, [r3, #0]
 8003d9c:	00db      	lsls	r3, r3, #3
 8003d9e:	4413      	add	r3, r2
 8003da0:	687a      	ldr	r2, [r7, #4]
 8003da2:	6812      	ldr	r2, [r2, #0]
 8003da4:	4413      	add	r3, r2
 8003da6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003daa:	881b      	ldrh	r3, [r3, #0]
 8003dac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003db0:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

          if (count != 0U)
 8003db4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	f000 808b 	beq.w	8003ed4 <PCD_EP_ISR_Handler+0x3ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6818      	ldr	r0, [r3, #0]
 8003dc2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003dc4:	6959      	ldr	r1, [r3, #20]
 8003dc6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003dc8:	88da      	ldrh	r2, [r3, #6]
 8003dca:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8003dce:	f006 f934 	bl	800a03a <USB_ReadPMA>
 8003dd2:	e07f      	b.n	8003ed4 <PCD_EP_ISR_Handler+0x3ee>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003dd4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003dd6:	78db      	ldrb	r3, [r3, #3]
 8003dd8:	2b02      	cmp	r3, #2
 8003dda:	d109      	bne.n	8003df0 <PCD_EP_ISR_Handler+0x30a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003ddc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003dde:	461a      	mov	r2, r3
 8003de0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003de2:	6878      	ldr	r0, [r7, #4]
 8003de4:	f000 f9c6 	bl	8004174 <HAL_PCD_EP_DB_Receive>
 8003de8:	4603      	mov	r3, r0
 8003dea:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8003dee:	e071      	b.n	8003ed4 <PCD_EP_ISR_Handler+0x3ee>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	461a      	mov	r2, r3
 8003df6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003df8:	781b      	ldrb	r3, [r3, #0]
 8003dfa:	009b      	lsls	r3, r3, #2
 8003dfc:	4413      	add	r3, r2
 8003dfe:	881b      	ldrh	r3, [r3, #0]
 8003e00:	b29b      	uxth	r3, r3
 8003e02:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003e06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e0a:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	461a      	mov	r2, r3
 8003e12:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e14:	781b      	ldrb	r3, [r3, #0]
 8003e16:	009b      	lsls	r3, r3, #2
 8003e18:	441a      	add	r2, r3
 8003e1a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8003e1c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003e20:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003e24:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003e28:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003e2c:	b29b      	uxth	r3, r3
 8003e2e:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	461a      	mov	r2, r3
 8003e36:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e38:	781b      	ldrb	r3, [r3, #0]
 8003e3a:	009b      	lsls	r3, r3, #2
 8003e3c:	4413      	add	r3, r2
 8003e3e:	881b      	ldrh	r3, [r3, #0]
 8003e40:	b29b      	uxth	r3, r3
 8003e42:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d022      	beq.n	8003e90 <PCD_EP_ISR_Handler+0x3aa>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003e52:	b29b      	uxth	r3, r3
 8003e54:	461a      	mov	r2, r3
 8003e56:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e58:	781b      	ldrb	r3, [r3, #0]
 8003e5a:	00db      	lsls	r3, r3, #3
 8003e5c:	4413      	add	r3, r2
 8003e5e:	687a      	ldr	r2, [r7, #4]
 8003e60:	6812      	ldr	r2, [r2, #0]
 8003e62:	4413      	add	r3, r2
 8003e64:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003e68:	881b      	ldrh	r3, [r3, #0]
 8003e6a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e6e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 8003e72:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d02c      	beq.n	8003ed4 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6818      	ldr	r0, [r3, #0]
 8003e7e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e80:	6959      	ldr	r1, [r3, #20]
 8003e82:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e84:	891a      	ldrh	r2, [r3, #8]
 8003e86:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8003e8a:	f006 f8d6 	bl	800a03a <USB_ReadPMA>
 8003e8e:	e021      	b.n	8003ed4 <PCD_EP_ISR_Handler+0x3ee>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003e98:	b29b      	uxth	r3, r3
 8003e9a:	461a      	mov	r2, r3
 8003e9c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e9e:	781b      	ldrb	r3, [r3, #0]
 8003ea0:	00db      	lsls	r3, r3, #3
 8003ea2:	4413      	add	r3, r2
 8003ea4:	687a      	ldr	r2, [r7, #4]
 8003ea6:	6812      	ldr	r2, [r2, #0]
 8003ea8:	4413      	add	r3, r2
 8003eaa:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003eae:	881b      	ldrh	r3, [r3, #0]
 8003eb0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003eb4:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 8003eb8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d009      	beq.n	8003ed4 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6818      	ldr	r0, [r3, #0]
 8003ec4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ec6:	6959      	ldr	r1, [r3, #20]
 8003ec8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003eca:	895a      	ldrh	r2, [r3, #10]
 8003ecc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8003ed0:	f006 f8b3 	bl	800a03a <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003ed4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ed6:	69da      	ldr	r2, [r3, #28]
 8003ed8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8003edc:	441a      	add	r2, r3
 8003ede:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ee0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003ee2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ee4:	695a      	ldr	r2, [r3, #20]
 8003ee6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8003eea:	441a      	add	r2, r3
 8003eec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003eee:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003ef0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ef2:	699b      	ldr	r3, [r3, #24]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d005      	beq.n	8003f04 <PCD_EP_ISR_Handler+0x41e>
 8003ef8:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8003efc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003efe:	691b      	ldr	r3, [r3, #16]
 8003f00:	429a      	cmp	r2, r3
 8003f02:	d206      	bcs.n	8003f12 <PCD_EP_ISR_Handler+0x42c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003f04:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f06:	781b      	ldrb	r3, [r3, #0]
 8003f08:	4619      	mov	r1, r3
 8003f0a:	6878      	ldr	r0, [r7, #4]
 8003f0c:	f007 ff90 	bl	800be30 <HAL_PCD_DataOutStageCallback>
 8003f10:	e005      	b.n	8003f1e <PCD_EP_ISR_Handler+0x438>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003f18:	4618      	mov	r0, r3
 8003f1a:	f005 f968 	bl	80091ee <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003f1e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003f20:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	f000 8117 	beq.w	8004158 <PCD_EP_ISR_Handler+0x672>
      {
        ep = &hpcd->IN_ep[epindex];
 8003f2a:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8003f2e:	4613      	mov	r3, r2
 8003f30:	009b      	lsls	r3, r3, #2
 8003f32:	4413      	add	r3, r2
 8003f34:	00db      	lsls	r3, r3, #3
 8003f36:	3310      	adds	r3, #16
 8003f38:	687a      	ldr	r2, [r7, #4]
 8003f3a:	4413      	add	r3, r2
 8003f3c:	643b      	str	r3, [r7, #64]	@ 0x40

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	461a      	mov	r2, r3
 8003f44:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8003f48:	009b      	lsls	r3, r3, #2
 8003f4a:	4413      	add	r3, r2
 8003f4c:	881b      	ldrh	r3, [r3, #0]
 8003f4e:	b29b      	uxth	r3, r3
 8003f50:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8003f54:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f58:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	461a      	mov	r2, r3
 8003f60:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8003f64:	009b      	lsls	r3, r3, #2
 8003f66:	441a      	add	r2, r3
 8003f68:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8003f6a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f6e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f72:	b29b      	uxth	r3, r3
 8003f74:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8003f76:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f78:	78db      	ldrb	r3, [r3, #3]
 8003f7a:	2b01      	cmp	r3, #1
 8003f7c:	f040 80a1 	bne.w	80040c2 <PCD_EP_ISR_Handler+0x5dc>
        {
          ep->xfer_len = 0U;
 8003f80:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f82:	2200      	movs	r2, #0
 8003f84:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8003f86:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f88:	7b1b      	ldrb	r3, [r3, #12]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	f000 8092 	beq.w	80040b4 <PCD_EP_ISR_Handler+0x5ce>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003f90:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003f92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d046      	beq.n	8004028 <PCD_EP_ISR_Handler+0x542>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003f9a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f9c:	785b      	ldrb	r3, [r3, #1]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d126      	bne.n	8003ff0 <PCD_EP_ISR_Handler+0x50a>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	617b      	str	r3, [r7, #20]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003fb0:	b29b      	uxth	r3, r3
 8003fb2:	461a      	mov	r2, r3
 8003fb4:	697b      	ldr	r3, [r7, #20]
 8003fb6:	4413      	add	r3, r2
 8003fb8:	617b      	str	r3, [r7, #20]
 8003fba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003fbc:	781b      	ldrb	r3, [r3, #0]
 8003fbe:	00da      	lsls	r2, r3, #3
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	4413      	add	r3, r2
 8003fc4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003fc8:	613b      	str	r3, [r7, #16]
 8003fca:	693b      	ldr	r3, [r7, #16]
 8003fcc:	881b      	ldrh	r3, [r3, #0]
 8003fce:	b29b      	uxth	r3, r3
 8003fd0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003fd4:	b29a      	uxth	r2, r3
 8003fd6:	693b      	ldr	r3, [r7, #16]
 8003fd8:	801a      	strh	r2, [r3, #0]
 8003fda:	693b      	ldr	r3, [r7, #16]
 8003fdc:	881b      	ldrh	r3, [r3, #0]
 8003fde:	b29b      	uxth	r3, r3
 8003fe0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003fe4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003fe8:	b29a      	uxth	r2, r3
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	801a      	strh	r2, [r3, #0]
 8003fee:	e061      	b.n	80040b4 <PCD_EP_ISR_Handler+0x5ce>
 8003ff0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ff2:	785b      	ldrb	r3, [r3, #1]
 8003ff4:	2b01      	cmp	r3, #1
 8003ff6:	d15d      	bne.n	80040b4 <PCD_EP_ISR_Handler+0x5ce>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	61fb      	str	r3, [r7, #28]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004006:	b29b      	uxth	r3, r3
 8004008:	461a      	mov	r2, r3
 800400a:	69fb      	ldr	r3, [r7, #28]
 800400c:	4413      	add	r3, r2
 800400e:	61fb      	str	r3, [r7, #28]
 8004010:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004012:	781b      	ldrb	r3, [r3, #0]
 8004014:	00da      	lsls	r2, r3, #3
 8004016:	69fb      	ldr	r3, [r7, #28]
 8004018:	4413      	add	r3, r2
 800401a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800401e:	61bb      	str	r3, [r7, #24]
 8004020:	69bb      	ldr	r3, [r7, #24]
 8004022:	2200      	movs	r2, #0
 8004024:	801a      	strh	r2, [r3, #0]
 8004026:	e045      	b.n	80040b4 <PCD_EP_ISR_Handler+0x5ce>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800402e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004030:	785b      	ldrb	r3, [r3, #1]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d126      	bne.n	8004084 <PCD_EP_ISR_Handler+0x59e>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	627b      	str	r3, [r7, #36]	@ 0x24
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004044:	b29b      	uxth	r3, r3
 8004046:	461a      	mov	r2, r3
 8004048:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800404a:	4413      	add	r3, r2
 800404c:	627b      	str	r3, [r7, #36]	@ 0x24
 800404e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004050:	781b      	ldrb	r3, [r3, #0]
 8004052:	00da      	lsls	r2, r3, #3
 8004054:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004056:	4413      	add	r3, r2
 8004058:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800405c:	623b      	str	r3, [r7, #32]
 800405e:	6a3b      	ldr	r3, [r7, #32]
 8004060:	881b      	ldrh	r3, [r3, #0]
 8004062:	b29b      	uxth	r3, r3
 8004064:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004068:	b29a      	uxth	r2, r3
 800406a:	6a3b      	ldr	r3, [r7, #32]
 800406c:	801a      	strh	r2, [r3, #0]
 800406e:	6a3b      	ldr	r3, [r7, #32]
 8004070:	881b      	ldrh	r3, [r3, #0]
 8004072:	b29b      	uxth	r3, r3
 8004074:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004078:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800407c:	b29a      	uxth	r2, r3
 800407e:	6a3b      	ldr	r3, [r7, #32]
 8004080:	801a      	strh	r2, [r3, #0]
 8004082:	e017      	b.n	80040b4 <PCD_EP_ISR_Handler+0x5ce>
 8004084:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004086:	785b      	ldrb	r3, [r3, #1]
 8004088:	2b01      	cmp	r3, #1
 800408a:	d113      	bne.n	80040b4 <PCD_EP_ISR_Handler+0x5ce>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004094:	b29b      	uxth	r3, r3
 8004096:	461a      	mov	r2, r3
 8004098:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800409a:	4413      	add	r3, r2
 800409c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800409e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80040a0:	781b      	ldrb	r3, [r3, #0]
 80040a2:	00da      	lsls	r2, r3, #3
 80040a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040a6:	4413      	add	r3, r2
 80040a8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80040ac:	62bb      	str	r3, [r7, #40]	@ 0x28
 80040ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040b0:	2200      	movs	r2, #0
 80040b2:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80040b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80040b6:	781b      	ldrb	r3, [r3, #0]
 80040b8:	4619      	mov	r1, r3
 80040ba:	6878      	ldr	r0, [r7, #4]
 80040bc:	f007 fed3 	bl	800be66 <HAL_PCD_DataInStageCallback>
 80040c0:	e04a      	b.n	8004158 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80040c2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80040c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d13f      	bne.n	800414c <PCD_EP_ISR_Handler+0x666>
          {
            /* Multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80040d4:	b29b      	uxth	r3, r3
 80040d6:	461a      	mov	r2, r3
 80040d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80040da:	781b      	ldrb	r3, [r3, #0]
 80040dc:	00db      	lsls	r3, r3, #3
 80040de:	4413      	add	r3, r2
 80040e0:	687a      	ldr	r2, [r7, #4]
 80040e2:	6812      	ldr	r2, [r2, #0]
 80040e4:	4413      	add	r3, r2
 80040e6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80040ea:	881b      	ldrh	r3, [r3, #0]
 80040ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80040f0:	867b      	strh	r3, [r7, #50]	@ 0x32

            if (ep->xfer_len > TxPctSize)
 80040f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80040f4:	699a      	ldr	r2, [r3, #24]
 80040f6:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80040f8:	429a      	cmp	r2, r3
 80040fa:	d906      	bls.n	800410a <PCD_EP_ISR_Handler+0x624>
            {
              ep->xfer_len -= TxPctSize;
 80040fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80040fe:	699a      	ldr	r2, [r3, #24]
 8004100:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8004102:	1ad2      	subs	r2, r2, r3
 8004104:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004106:	619a      	str	r2, [r3, #24]
 8004108:	e002      	b.n	8004110 <PCD_EP_ISR_Handler+0x62a>
            }
            else
            {
              ep->xfer_len = 0U;
 800410a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800410c:	2200      	movs	r2, #0
 800410e:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8004110:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004112:	699b      	ldr	r3, [r3, #24]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d106      	bne.n	8004126 <PCD_EP_ISR_Handler+0x640>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004118:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800411a:	781b      	ldrb	r3, [r3, #0]
 800411c:	4619      	mov	r1, r3
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	f007 fea1 	bl	800be66 <HAL_PCD_DataInStageCallback>
 8004124:	e018      	b.n	8004158 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8004126:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004128:	695a      	ldr	r2, [r3, #20]
 800412a:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800412c:	441a      	add	r2, r3
 800412e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004130:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8004132:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004134:	69da      	ldr	r2, [r3, #28]
 8004136:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8004138:	441a      	add	r2, r3
 800413a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800413c:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004144:	4618      	mov	r0, r3
 8004146:	f005 f852 	bl	80091ee <USB_EPStartXfer>
 800414a:	e005      	b.n	8004158 <PCD_EP_ISR_Handler+0x672>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800414c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800414e:	461a      	mov	r2, r3
 8004150:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004152:	6878      	ldr	r0, [r7, #4]
 8004154:	f000 f917 	bl	8004386 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004160:	b29b      	uxth	r3, r3
 8004162:	b21b      	sxth	r3, r3
 8004164:	2b00      	cmp	r3, #0
 8004166:	f6ff acc3 	blt.w	8003af0 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800416a:	2300      	movs	r3, #0
}
 800416c:	4618      	mov	r0, r3
 800416e:	3748      	adds	r7, #72	@ 0x48
 8004170:	46bd      	mov	sp, r7
 8004172:	bd80      	pop	{r7, pc}

08004174 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b088      	sub	sp, #32
 8004178:	af00      	add	r7, sp, #0
 800417a:	60f8      	str	r0, [r7, #12]
 800417c:	60b9      	str	r1, [r7, #8]
 800417e:	4613      	mov	r3, r2
 8004180:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004182:	88fb      	ldrh	r3, [r7, #6]
 8004184:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004188:	2b00      	cmp	r3, #0
 800418a:	d07c      	beq.n	8004286 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004194:	b29b      	uxth	r3, r3
 8004196:	461a      	mov	r2, r3
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	781b      	ldrb	r3, [r3, #0]
 800419c:	00db      	lsls	r3, r3, #3
 800419e:	4413      	add	r3, r2
 80041a0:	68fa      	ldr	r2, [r7, #12]
 80041a2:	6812      	ldr	r2, [r2, #0]
 80041a4:	4413      	add	r3, r2
 80041a6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80041aa:	881b      	ldrh	r3, [r3, #0]
 80041ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80041b0:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	699a      	ldr	r2, [r3, #24]
 80041b6:	8b7b      	ldrh	r3, [r7, #26]
 80041b8:	429a      	cmp	r2, r3
 80041ba:	d306      	bcc.n	80041ca <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	699a      	ldr	r2, [r3, #24]
 80041c0:	8b7b      	ldrh	r3, [r7, #26]
 80041c2:	1ad2      	subs	r2, r2, r3
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	619a      	str	r2, [r3, #24]
 80041c8:	e002      	b.n	80041d0 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 80041ca:	68bb      	ldr	r3, [r7, #8]
 80041cc:	2200      	movs	r2, #0
 80041ce:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	699b      	ldr	r3, [r3, #24]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d123      	bne.n	8004220 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* Set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	461a      	mov	r2, r3
 80041de:	68bb      	ldr	r3, [r7, #8]
 80041e0:	781b      	ldrb	r3, [r3, #0]
 80041e2:	009b      	lsls	r3, r3, #2
 80041e4:	4413      	add	r3, r2
 80041e6:	881b      	ldrh	r3, [r3, #0]
 80041e8:	b29b      	uxth	r3, r3
 80041ea:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80041ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041f2:	833b      	strh	r3, [r7, #24]
 80041f4:	8b3b      	ldrh	r3, [r7, #24]
 80041f6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80041fa:	833b      	strh	r3, [r7, #24]
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	461a      	mov	r2, r3
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	781b      	ldrb	r3, [r3, #0]
 8004206:	009b      	lsls	r3, r3, #2
 8004208:	441a      	add	r2, r3
 800420a:	8b3b      	ldrh	r3, [r7, #24]
 800420c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004210:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004214:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004218:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800421c:	b29b      	uxth	r3, r3
 800421e:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004220:	88fb      	ldrh	r3, [r7, #6]
 8004222:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004226:	2b00      	cmp	r3, #0
 8004228:	d01f      	beq.n	800426a <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	461a      	mov	r2, r3
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	781b      	ldrb	r3, [r3, #0]
 8004234:	009b      	lsls	r3, r3, #2
 8004236:	4413      	add	r3, r2
 8004238:	881b      	ldrh	r3, [r3, #0]
 800423a:	b29b      	uxth	r3, r3
 800423c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004240:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004244:	82fb      	strh	r3, [r7, #22]
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	461a      	mov	r2, r3
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	781b      	ldrb	r3, [r3, #0]
 8004250:	009b      	lsls	r3, r3, #2
 8004252:	441a      	add	r2, r3
 8004254:	8afb      	ldrh	r3, [r7, #22]
 8004256:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800425a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800425e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004262:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004266:	b29b      	uxth	r3, r3
 8004268:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800426a:	8b7b      	ldrh	r3, [r7, #26]
 800426c:	2b00      	cmp	r3, #0
 800426e:	f000 8085 	beq.w	800437c <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	6818      	ldr	r0, [r3, #0]
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	6959      	ldr	r1, [r3, #20]
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	891a      	ldrh	r2, [r3, #8]
 800427e:	8b7b      	ldrh	r3, [r7, #26]
 8004280:	f005 fedb 	bl	800a03a <USB_ReadPMA>
 8004284:	e07a      	b.n	800437c <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800428e:	b29b      	uxth	r3, r3
 8004290:	461a      	mov	r2, r3
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	781b      	ldrb	r3, [r3, #0]
 8004296:	00db      	lsls	r3, r3, #3
 8004298:	4413      	add	r3, r2
 800429a:	68fa      	ldr	r2, [r7, #12]
 800429c:	6812      	ldr	r2, [r2, #0]
 800429e:	4413      	add	r3, r2
 80042a0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80042a4:	881b      	ldrh	r3, [r3, #0]
 80042a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80042aa:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	699a      	ldr	r2, [r3, #24]
 80042b0:	8b7b      	ldrh	r3, [r7, #26]
 80042b2:	429a      	cmp	r2, r3
 80042b4:	d306      	bcc.n	80042c4 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	699a      	ldr	r2, [r3, #24]
 80042ba:	8b7b      	ldrh	r3, [r7, #26]
 80042bc:	1ad2      	subs	r2, r2, r3
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	619a      	str	r2, [r3, #24]
 80042c2:	e002      	b.n	80042ca <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	2200      	movs	r2, #0
 80042c8:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	699b      	ldr	r3, [r3, #24]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d123      	bne.n	800431a <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* Set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	461a      	mov	r2, r3
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	781b      	ldrb	r3, [r3, #0]
 80042dc:	009b      	lsls	r3, r3, #2
 80042de:	4413      	add	r3, r2
 80042e0:	881b      	ldrh	r3, [r3, #0]
 80042e2:	b29b      	uxth	r3, r3
 80042e4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80042e8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80042ec:	83fb      	strh	r3, [r7, #30]
 80042ee:	8bfb      	ldrh	r3, [r7, #30]
 80042f0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80042f4:	83fb      	strh	r3, [r7, #30]
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	461a      	mov	r2, r3
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	781b      	ldrb	r3, [r3, #0]
 8004300:	009b      	lsls	r3, r3, #2
 8004302:	441a      	add	r2, r3
 8004304:	8bfb      	ldrh	r3, [r7, #30]
 8004306:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800430a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800430e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004312:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004316:	b29b      	uxth	r3, r3
 8004318:	8013      	strh	r3, [r2, #0]
    }

    /* Need to FreeUser Buffer */
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800431a:	88fb      	ldrh	r3, [r7, #6]
 800431c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004320:	2b00      	cmp	r3, #0
 8004322:	d11f      	bne.n	8004364 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	461a      	mov	r2, r3
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	781b      	ldrb	r3, [r3, #0]
 800432e:	009b      	lsls	r3, r3, #2
 8004330:	4413      	add	r3, r2
 8004332:	881b      	ldrh	r3, [r3, #0]
 8004334:	b29b      	uxth	r3, r3
 8004336:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800433a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800433e:	83bb      	strh	r3, [r7, #28]
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	461a      	mov	r2, r3
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	781b      	ldrb	r3, [r3, #0]
 800434a:	009b      	lsls	r3, r3, #2
 800434c:	441a      	add	r2, r3
 800434e:	8bbb      	ldrh	r3, [r7, #28]
 8004350:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004354:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004358:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800435c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004360:	b29b      	uxth	r3, r3
 8004362:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004364:	8b7b      	ldrh	r3, [r7, #26]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d008      	beq.n	800437c <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	6818      	ldr	r0, [r3, #0]
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	6959      	ldr	r1, [r3, #20]
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	895a      	ldrh	r2, [r3, #10]
 8004376:	8b7b      	ldrh	r3, [r7, #26]
 8004378:	f005 fe5f 	bl	800a03a <USB_ReadPMA>
    }
  }

  return count;
 800437c:	8b7b      	ldrh	r3, [r7, #26]
}
 800437e:	4618      	mov	r0, r3
 8004380:	3720      	adds	r7, #32
 8004382:	46bd      	mov	sp, r7
 8004384:	bd80      	pop	{r7, pc}

08004386 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004386:	b580      	push	{r7, lr}
 8004388:	b0a6      	sub	sp, #152	@ 0x98
 800438a:	af00      	add	r7, sp, #0
 800438c:	60f8      	str	r0, [r7, #12]
 800438e:	60b9      	str	r1, [r7, #8]
 8004390:	4613      	mov	r3, r2
 8004392:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004394:	88fb      	ldrh	r3, [r7, #6]
 8004396:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800439a:	2b00      	cmp	r3, #0
 800439c:	f000 81f7 	beq.w	800478e <HAL_PCD_EP_DB_Transmit+0x408>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80043a8:	b29b      	uxth	r3, r3
 80043aa:	461a      	mov	r2, r3
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	781b      	ldrb	r3, [r3, #0]
 80043b0:	00db      	lsls	r3, r3, #3
 80043b2:	4413      	add	r3, r2
 80043b4:	68fa      	ldr	r2, [r7, #12]
 80043b6:	6812      	ldr	r2, [r2, #0]
 80043b8:	4413      	add	r3, r2
 80043ba:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80043be:	881b      	ldrh	r3, [r3, #0]
 80043c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80043c4:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len > TxPctSize)
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	699a      	ldr	r2, [r3, #24]
 80043cc:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80043d0:	429a      	cmp	r2, r3
 80043d2:	d907      	bls.n	80043e4 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	699a      	ldr	r2, [r3, #24]
 80043d8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80043dc:	1ad2      	subs	r2, r2, r3
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	619a      	str	r2, [r3, #24]
 80043e2:	e002      	b.n	80043ea <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	2200      	movs	r2, #0
 80043e8:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	699b      	ldr	r3, [r3, #24]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	f040 80e1 	bne.w	80045b6 <HAL_PCD_EP_DB_Transmit+0x230>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	785b      	ldrb	r3, [r3, #1]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d126      	bne.n	800444a <HAL_PCD_EP_DB_Transmit+0xc4>
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	633b      	str	r3, [r7, #48]	@ 0x30
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800440a:	b29b      	uxth	r3, r3
 800440c:	461a      	mov	r2, r3
 800440e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004410:	4413      	add	r3, r2
 8004412:	633b      	str	r3, [r7, #48]	@ 0x30
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	781b      	ldrb	r3, [r3, #0]
 8004418:	00da      	lsls	r2, r3, #3
 800441a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800441c:	4413      	add	r3, r2
 800441e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004422:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004424:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004426:	881b      	ldrh	r3, [r3, #0]
 8004428:	b29b      	uxth	r3, r3
 800442a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800442e:	b29a      	uxth	r2, r3
 8004430:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004432:	801a      	strh	r2, [r3, #0]
 8004434:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004436:	881b      	ldrh	r3, [r3, #0]
 8004438:	b29b      	uxth	r3, r3
 800443a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800443e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004442:	b29a      	uxth	r2, r3
 8004444:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004446:	801a      	strh	r2, [r3, #0]
 8004448:	e01a      	b.n	8004480 <HAL_PCD_EP_DB_Transmit+0xfa>
 800444a:	68bb      	ldr	r3, [r7, #8]
 800444c:	785b      	ldrb	r3, [r3, #1]
 800444e:	2b01      	cmp	r3, #1
 8004450:	d116      	bne.n	8004480 <HAL_PCD_EP_DB_Transmit+0xfa>
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004460:	b29b      	uxth	r3, r3
 8004462:	461a      	mov	r2, r3
 8004464:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004466:	4413      	add	r3, r2
 8004468:	63bb      	str	r3, [r7, #56]	@ 0x38
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	781b      	ldrb	r3, [r3, #0]
 800446e:	00da      	lsls	r2, r3, #3
 8004470:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004472:	4413      	add	r3, r2
 8004474:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004478:	637b      	str	r3, [r7, #52]	@ 0x34
 800447a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800447c:	2200      	movs	r2, #0
 800447e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	785b      	ldrb	r3, [r3, #1]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d126      	bne.n	80044dc <HAL_PCD_EP_DB_Transmit+0x156>
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	623b      	str	r3, [r7, #32]
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800449c:	b29b      	uxth	r3, r3
 800449e:	461a      	mov	r2, r3
 80044a0:	6a3b      	ldr	r3, [r7, #32]
 80044a2:	4413      	add	r3, r2
 80044a4:	623b      	str	r3, [r7, #32]
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	781b      	ldrb	r3, [r3, #0]
 80044aa:	00da      	lsls	r2, r3, #3
 80044ac:	6a3b      	ldr	r3, [r7, #32]
 80044ae:	4413      	add	r3, r2
 80044b0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80044b4:	61fb      	str	r3, [r7, #28]
 80044b6:	69fb      	ldr	r3, [r7, #28]
 80044b8:	881b      	ldrh	r3, [r3, #0]
 80044ba:	b29b      	uxth	r3, r3
 80044bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80044c0:	b29a      	uxth	r2, r3
 80044c2:	69fb      	ldr	r3, [r7, #28]
 80044c4:	801a      	strh	r2, [r3, #0]
 80044c6:	69fb      	ldr	r3, [r7, #28]
 80044c8:	881b      	ldrh	r3, [r3, #0]
 80044ca:	b29b      	uxth	r3, r3
 80044cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80044d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80044d4:	b29a      	uxth	r2, r3
 80044d6:	69fb      	ldr	r3, [r7, #28]
 80044d8:	801a      	strh	r2, [r3, #0]
 80044da:	e017      	b.n	800450c <HAL_PCD_EP_DB_Transmit+0x186>
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	785b      	ldrb	r3, [r3, #1]
 80044e0:	2b01      	cmp	r3, #1
 80044e2:	d113      	bne.n	800450c <HAL_PCD_EP_DB_Transmit+0x186>
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80044ec:	b29b      	uxth	r3, r3
 80044ee:	461a      	mov	r2, r3
 80044f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044f2:	4413      	add	r3, r2
 80044f4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80044f6:	68bb      	ldr	r3, [r7, #8]
 80044f8:	781b      	ldrb	r3, [r3, #0]
 80044fa:	00da      	lsls	r2, r3, #3
 80044fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044fe:	4413      	add	r3, r2
 8004500:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004504:	627b      	str	r3, [r7, #36]	@ 0x24
 8004506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004508:	2200      	movs	r2, #0
 800450a:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	78db      	ldrb	r3, [r3, #3]
 8004510:	2b02      	cmp	r3, #2
 8004512:	d123      	bne.n	800455c <HAL_PCD_EP_DB_Transmit+0x1d6>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	461a      	mov	r2, r3
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	781b      	ldrb	r3, [r3, #0]
 800451e:	009b      	lsls	r3, r3, #2
 8004520:	4413      	add	r3, r2
 8004522:	881b      	ldrh	r3, [r3, #0]
 8004524:	b29b      	uxth	r3, r3
 8004526:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800452a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800452e:	837b      	strh	r3, [r7, #26]
 8004530:	8b7b      	ldrh	r3, [r7, #26]
 8004532:	f083 0320 	eor.w	r3, r3, #32
 8004536:	837b      	strh	r3, [r7, #26]
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	461a      	mov	r2, r3
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	781b      	ldrb	r3, [r3, #0]
 8004542:	009b      	lsls	r3, r3, #2
 8004544:	441a      	add	r2, r3
 8004546:	8b7b      	ldrh	r3, [r7, #26]
 8004548:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800454c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004550:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004554:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004558:	b29b      	uxth	r3, r3
 800455a:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	781b      	ldrb	r3, [r3, #0]
 8004560:	4619      	mov	r1, r3
 8004562:	68f8      	ldr	r0, [r7, #12]
 8004564:	f007 fc7f 	bl	800be66 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004568:	88fb      	ldrh	r3, [r7, #6]
 800456a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800456e:	2b00      	cmp	r3, #0
 8004570:	d01f      	beq.n	80045b2 <HAL_PCD_EP_DB_Transmit+0x22c>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	461a      	mov	r2, r3
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	781b      	ldrb	r3, [r3, #0]
 800457c:	009b      	lsls	r3, r3, #2
 800457e:	4413      	add	r3, r2
 8004580:	881b      	ldrh	r3, [r3, #0]
 8004582:	b29b      	uxth	r3, r3
 8004584:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004588:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800458c:	833b      	strh	r3, [r7, #24]
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	461a      	mov	r2, r3
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	781b      	ldrb	r3, [r3, #0]
 8004598:	009b      	lsls	r3, r3, #2
 800459a:	441a      	add	r2, r3
 800459c:	8b3b      	ldrh	r3, [r7, #24]
 800459e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80045a2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80045a6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80045aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80045ae:	b29b      	uxth	r3, r3
 80045b0:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 80045b2:	2300      	movs	r3, #0
 80045b4:	e31f      	b.n	8004bf6 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80045b6:	88fb      	ldrh	r3, [r7, #6]
 80045b8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d021      	beq.n	8004604 <HAL_PCD_EP_DB_Transmit+0x27e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	461a      	mov	r2, r3
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	781b      	ldrb	r3, [r3, #0]
 80045ca:	009b      	lsls	r3, r3, #2
 80045cc:	4413      	add	r3, r2
 80045ce:	881b      	ldrh	r3, [r3, #0]
 80045d0:	b29b      	uxth	r3, r3
 80045d2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80045d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045da:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	461a      	mov	r2, r3
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	781b      	ldrb	r3, [r3, #0]
 80045e8:	009b      	lsls	r3, r3, #2
 80045ea:	441a      	add	r2, r3
 80045ec:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80045f0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80045f4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80045f8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80045fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004600:	b29b      	uxth	r3, r3
 8004602:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800460a:	2b01      	cmp	r3, #1
 800460c:	f040 82ca 	bne.w	8004ba4 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	695a      	ldr	r2, [r3, #20]
 8004614:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8004618:	441a      	add	r2, r3
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	69da      	ldr	r2, [r3, #28]
 8004622:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8004626:	441a      	add	r2, r3
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	6a1a      	ldr	r2, [r3, #32]
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	691b      	ldr	r3, [r3, #16]
 8004634:	429a      	cmp	r2, r3
 8004636:	d309      	bcc.n	800464c <HAL_PCD_EP_DB_Transmit+0x2c6>
        {
          len = ep->maxpacket;
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	691b      	ldr	r3, [r3, #16]
 800463c:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	6a1a      	ldr	r2, [r3, #32]
 8004642:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004644:	1ad2      	subs	r2, r2, r3
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	621a      	str	r2, [r3, #32]
 800464a:	e015      	b.n	8004678 <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else if (ep->xfer_len_db == 0U)
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	6a1b      	ldr	r3, [r3, #32]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d107      	bne.n	8004664 <HAL_PCD_EP_DB_Transmit+0x2de>
        {
          len = TxPctSize;
 8004654:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8004658:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 800465a:	68bb      	ldr	r3, [r7, #8]
 800465c:	2200      	movs	r2, #0
 800465e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8004662:	e009      	b.n	8004678 <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	2200      	movs	r2, #0
 8004668:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	6a1b      	ldr	r3, [r3, #32]
 8004670:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	2200      	movs	r2, #0
 8004676:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer0 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	785b      	ldrb	r3, [r3, #1]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d15f      	bne.n	8004740 <HAL_PCD_EP_DB_Transmit+0x3ba>
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	643b      	str	r3, [r7, #64]	@ 0x40
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800468e:	b29b      	uxth	r3, r3
 8004690:	461a      	mov	r2, r3
 8004692:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004694:	4413      	add	r3, r2
 8004696:	643b      	str	r3, [r7, #64]	@ 0x40
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	781b      	ldrb	r3, [r3, #0]
 800469c:	00da      	lsls	r2, r3, #3
 800469e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80046a0:	4413      	add	r3, r2
 80046a2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80046a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80046a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80046aa:	881b      	ldrh	r3, [r3, #0]
 80046ac:	b29b      	uxth	r3, r3
 80046ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80046b2:	b29a      	uxth	r2, r3
 80046b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80046b6:	801a      	strh	r2, [r3, #0]
 80046b8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d10a      	bne.n	80046d4 <HAL_PCD_EP_DB_Transmit+0x34e>
 80046be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80046c0:	881b      	ldrh	r3, [r3, #0]
 80046c2:	b29b      	uxth	r3, r3
 80046c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80046c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80046cc:	b29a      	uxth	r2, r3
 80046ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80046d0:	801a      	strh	r2, [r3, #0]
 80046d2:	e051      	b.n	8004778 <HAL_PCD_EP_DB_Transmit+0x3f2>
 80046d4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80046d6:	2b3e      	cmp	r3, #62	@ 0x3e
 80046d8:	d816      	bhi.n	8004708 <HAL_PCD_EP_DB_Transmit+0x382>
 80046da:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80046dc:	085b      	lsrs	r3, r3, #1
 80046de:	653b      	str	r3, [r7, #80]	@ 0x50
 80046e0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80046e2:	f003 0301 	and.w	r3, r3, #1
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d002      	beq.n	80046f0 <HAL_PCD_EP_DB_Transmit+0x36a>
 80046ea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80046ec:	3301      	adds	r3, #1
 80046ee:	653b      	str	r3, [r7, #80]	@ 0x50
 80046f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80046f2:	881b      	ldrh	r3, [r3, #0]
 80046f4:	b29a      	uxth	r2, r3
 80046f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80046f8:	b29b      	uxth	r3, r3
 80046fa:	029b      	lsls	r3, r3, #10
 80046fc:	b29b      	uxth	r3, r3
 80046fe:	4313      	orrs	r3, r2
 8004700:	b29a      	uxth	r2, r3
 8004702:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004704:	801a      	strh	r2, [r3, #0]
 8004706:	e037      	b.n	8004778 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8004708:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800470a:	095b      	lsrs	r3, r3, #5
 800470c:	653b      	str	r3, [r7, #80]	@ 0x50
 800470e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004710:	f003 031f 	and.w	r3, r3, #31
 8004714:	2b00      	cmp	r3, #0
 8004716:	d102      	bne.n	800471e <HAL_PCD_EP_DB_Transmit+0x398>
 8004718:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800471a:	3b01      	subs	r3, #1
 800471c:	653b      	str	r3, [r7, #80]	@ 0x50
 800471e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004720:	881b      	ldrh	r3, [r3, #0]
 8004722:	b29a      	uxth	r2, r3
 8004724:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004726:	b29b      	uxth	r3, r3
 8004728:	029b      	lsls	r3, r3, #10
 800472a:	b29b      	uxth	r3, r3
 800472c:	4313      	orrs	r3, r2
 800472e:	b29b      	uxth	r3, r3
 8004730:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004734:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004738:	b29a      	uxth	r2, r3
 800473a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800473c:	801a      	strh	r2, [r3, #0]
 800473e:	e01b      	b.n	8004778 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	785b      	ldrb	r3, [r3, #1]
 8004744:	2b01      	cmp	r3, #1
 8004746:	d117      	bne.n	8004778 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004756:	b29b      	uxth	r3, r3
 8004758:	461a      	mov	r2, r3
 800475a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800475c:	4413      	add	r3, r2
 800475e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	781b      	ldrb	r3, [r3, #0]
 8004764:	00da      	lsls	r2, r3, #3
 8004766:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004768:	4413      	add	r3, r2
 800476a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800476e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004770:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004772:	b29a      	uxth	r2, r3
 8004774:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004776:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	6818      	ldr	r0, [r3, #0]
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	6959      	ldr	r1, [r3, #20]
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	891a      	ldrh	r2, [r3, #8]
 8004784:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004786:	b29b      	uxth	r3, r3
 8004788:	f005 fc15 	bl	8009fb6 <USB_WritePMA>
 800478c:	e20a      	b.n	8004ba4 <HAL_PCD_EP_DB_Transmit+0x81e>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004796:	b29b      	uxth	r3, r3
 8004798:	461a      	mov	r2, r3
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	781b      	ldrb	r3, [r3, #0]
 800479e:	00db      	lsls	r3, r3, #3
 80047a0:	4413      	add	r3, r2
 80047a2:	68fa      	ldr	r2, [r7, #12]
 80047a4:	6812      	ldr	r2, [r2, #0]
 80047a6:	4413      	add	r3, r2
 80047a8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80047ac:	881b      	ldrh	r3, [r3, #0]
 80047ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80047b2:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len >= TxPctSize)
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	699a      	ldr	r2, [r3, #24]
 80047ba:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80047be:	429a      	cmp	r2, r3
 80047c0:	d307      	bcc.n	80047d2 <HAL_PCD_EP_DB_Transmit+0x44c>
    {
      ep->xfer_len -= TxPctSize;
 80047c2:	68bb      	ldr	r3, [r7, #8]
 80047c4:	699a      	ldr	r2, [r3, #24]
 80047c6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80047ca:	1ad2      	subs	r2, r2, r3
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	619a      	str	r2, [r3, #24]
 80047d0:	e002      	b.n	80047d8 <HAL_PCD_EP_DB_Transmit+0x452>
    }
    else
    {
      ep->xfer_len = 0U;
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	2200      	movs	r2, #0
 80047d6:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	699b      	ldr	r3, [r3, #24]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	f040 80f6 	bne.w	80049ce <HAL_PCD_EP_DB_Transmit+0x648>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	785b      	ldrb	r3, [r3, #1]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d126      	bne.n	8004838 <HAL_PCD_EP_DB_Transmit+0x4b2>
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	677b      	str	r3, [r7, #116]	@ 0x74
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80047f8:	b29b      	uxth	r3, r3
 80047fa:	461a      	mov	r2, r3
 80047fc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80047fe:	4413      	add	r3, r2
 8004800:	677b      	str	r3, [r7, #116]	@ 0x74
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	781b      	ldrb	r3, [r3, #0]
 8004806:	00da      	lsls	r2, r3, #3
 8004808:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800480a:	4413      	add	r3, r2
 800480c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004810:	673b      	str	r3, [r7, #112]	@ 0x70
 8004812:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004814:	881b      	ldrh	r3, [r3, #0]
 8004816:	b29b      	uxth	r3, r3
 8004818:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800481c:	b29a      	uxth	r2, r3
 800481e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004820:	801a      	strh	r2, [r3, #0]
 8004822:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004824:	881b      	ldrh	r3, [r3, #0]
 8004826:	b29b      	uxth	r3, r3
 8004828:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800482c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004830:	b29a      	uxth	r2, r3
 8004832:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004834:	801a      	strh	r2, [r3, #0]
 8004836:	e01a      	b.n	800486e <HAL_PCD_EP_DB_Transmit+0x4e8>
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	785b      	ldrb	r3, [r3, #1]
 800483c:	2b01      	cmp	r3, #1
 800483e:	d116      	bne.n	800486e <HAL_PCD_EP_DB_Transmit+0x4e8>
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800484e:	b29b      	uxth	r3, r3
 8004850:	461a      	mov	r2, r3
 8004852:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004854:	4413      	add	r3, r2
 8004856:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	781b      	ldrb	r3, [r3, #0]
 800485c:	00da      	lsls	r2, r3, #3
 800485e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004860:	4413      	add	r3, r2
 8004862:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004866:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004868:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800486a:	2200      	movs	r2, #0
 800486c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004876:	68bb      	ldr	r3, [r7, #8]
 8004878:	785b      	ldrb	r3, [r3, #1]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d12f      	bne.n	80048de <HAL_PCD_EP_DB_Transmit+0x558>
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800488e:	b29b      	uxth	r3, r3
 8004890:	461a      	mov	r2, r3
 8004892:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004896:	4413      	add	r3, r2
 8004898:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	781b      	ldrb	r3, [r3, #0]
 80048a0:	00da      	lsls	r2, r3, #3
 80048a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80048a6:	4413      	add	r3, r2
 80048a8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80048ac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80048b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80048b4:	881b      	ldrh	r3, [r3, #0]
 80048b6:	b29b      	uxth	r3, r3
 80048b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80048bc:	b29a      	uxth	r2, r3
 80048be:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80048c2:	801a      	strh	r2, [r3, #0]
 80048c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80048c8:	881b      	ldrh	r3, [r3, #0]
 80048ca:	b29b      	uxth	r3, r3
 80048cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80048d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80048d4:	b29a      	uxth	r2, r3
 80048d6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80048da:	801a      	strh	r2, [r3, #0]
 80048dc:	e01c      	b.n	8004918 <HAL_PCD_EP_DB_Transmit+0x592>
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	785b      	ldrb	r3, [r3, #1]
 80048e2:	2b01      	cmp	r3, #1
 80048e4:	d118      	bne.n	8004918 <HAL_PCD_EP_DB_Transmit+0x592>
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80048ee:	b29b      	uxth	r3, r3
 80048f0:	461a      	mov	r2, r3
 80048f2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80048f6:	4413      	add	r3, r2
 80048f8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80048fc:	68bb      	ldr	r3, [r7, #8]
 80048fe:	781b      	ldrb	r3, [r3, #0]
 8004900:	00da      	lsls	r2, r3, #3
 8004902:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004906:	4413      	add	r3, r2
 8004908:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800490c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004910:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004914:	2200      	movs	r2, #0
 8004916:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 8004918:	68bb      	ldr	r3, [r7, #8]
 800491a:	78db      	ldrb	r3, [r3, #3]
 800491c:	2b02      	cmp	r3, #2
 800491e:	d127      	bne.n	8004970 <HAL_PCD_EP_DB_Transmit+0x5ea>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	461a      	mov	r2, r3
 8004926:	68bb      	ldr	r3, [r7, #8]
 8004928:	781b      	ldrb	r3, [r3, #0]
 800492a:	009b      	lsls	r3, r3, #2
 800492c:	4413      	add	r3, r2
 800492e:	881b      	ldrh	r3, [r3, #0]
 8004930:	b29b      	uxth	r3, r3
 8004932:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004936:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800493a:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800493e:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8004942:	f083 0320 	eor.w	r3, r3, #32
 8004946:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	461a      	mov	r2, r3
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	781b      	ldrb	r3, [r3, #0]
 8004954:	009b      	lsls	r3, r3, #2
 8004956:	441a      	add	r2, r3
 8004958:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800495c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004960:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004964:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004968:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800496c:	b29b      	uxth	r3, r3
 800496e:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	781b      	ldrb	r3, [r3, #0]
 8004974:	4619      	mov	r1, r3
 8004976:	68f8      	ldr	r0, [r7, #12]
 8004978:	f007 fa75 	bl	800be66 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800497c:	88fb      	ldrh	r3, [r7, #6]
 800497e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004982:	2b00      	cmp	r3, #0
 8004984:	d121      	bne.n	80049ca <HAL_PCD_EP_DB_Transmit+0x644>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	461a      	mov	r2, r3
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	781b      	ldrb	r3, [r3, #0]
 8004990:	009b      	lsls	r3, r3, #2
 8004992:	4413      	add	r3, r2
 8004994:	881b      	ldrh	r3, [r3, #0]
 8004996:	b29b      	uxth	r3, r3
 8004998:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800499c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049a0:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	461a      	mov	r2, r3
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	781b      	ldrb	r3, [r3, #0]
 80049ae:	009b      	lsls	r3, r3, #2
 80049b0:	441a      	add	r2, r3
 80049b2:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 80049b6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80049ba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80049be:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80049c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80049c6:	b29b      	uxth	r3, r3
 80049c8:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 80049ca:	2300      	movs	r3, #0
 80049cc:	e113      	b.n	8004bf6 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80049ce:	88fb      	ldrh	r3, [r7, #6]
 80049d0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d121      	bne.n	8004a1c <HAL_PCD_EP_DB_Transmit+0x696>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	461a      	mov	r2, r3
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	781b      	ldrb	r3, [r3, #0]
 80049e2:	009b      	lsls	r3, r3, #2
 80049e4:	4413      	add	r3, r2
 80049e6:	881b      	ldrh	r3, [r3, #0]
 80049e8:	b29b      	uxth	r3, r3
 80049ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80049ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049f2:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	461a      	mov	r2, r3
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	781b      	ldrb	r3, [r3, #0]
 8004a00:	009b      	lsls	r3, r3, #2
 8004a02:	441a      	add	r2, r3
 8004a04:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8004a08:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004a0c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004a10:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004a14:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a18:	b29b      	uxth	r3, r3
 8004a1a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004a22:	2b01      	cmp	r3, #1
 8004a24:	f040 80be 	bne.w	8004ba4 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	695a      	ldr	r2, [r3, #20]
 8004a2c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8004a30:	441a      	add	r2, r3
 8004a32:	68bb      	ldr	r3, [r7, #8]
 8004a34:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	69da      	ldr	r2, [r3, #28]
 8004a3a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8004a3e:	441a      	add	r2, r3
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	6a1a      	ldr	r2, [r3, #32]
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	691b      	ldr	r3, [r3, #16]
 8004a4c:	429a      	cmp	r2, r3
 8004a4e:	d309      	bcc.n	8004a64 <HAL_PCD_EP_DB_Transmit+0x6de>
        {
          len = ep->maxpacket;
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	691b      	ldr	r3, [r3, #16]
 8004a54:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 8004a56:	68bb      	ldr	r3, [r7, #8]
 8004a58:	6a1a      	ldr	r2, [r3, #32]
 8004a5a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004a5c:	1ad2      	subs	r2, r2, r3
 8004a5e:	68bb      	ldr	r3, [r7, #8]
 8004a60:	621a      	str	r2, [r3, #32]
 8004a62:	e015      	b.n	8004a90 <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else if (ep->xfer_len_db == 0U)
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	6a1b      	ldr	r3, [r3, #32]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d107      	bne.n	8004a7c <HAL_PCD_EP_DB_Transmit+0x6f6>
        {
          len = TxPctSize;
 8004a6c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8004a70:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	2200      	movs	r2, #0
 8004a76:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8004a7a:	e009      	b.n	8004a90 <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else
        {
          len = ep->xfer_len_db;
 8004a7c:	68bb      	ldr	r3, [r7, #8]
 8004a7e:	6a1b      	ldr	r3, [r3, #32]
 8004a80:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 8004a82:	68bb      	ldr	r3, [r7, #8]
 8004a84:	2200      	movs	r2, #0
 8004a86:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	785b      	ldrb	r3, [r3, #1]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d15f      	bne.n	8004b5e <HAL_PCD_EP_DB_Transmit+0x7d8>
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004aac:	b29b      	uxth	r3, r3
 8004aae:	461a      	mov	r2, r3
 8004ab0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004ab2:	4413      	add	r3, r2
 8004ab4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004ab6:	68bb      	ldr	r3, [r7, #8]
 8004ab8:	781b      	ldrb	r3, [r3, #0]
 8004aba:	00da      	lsls	r2, r3, #3
 8004abc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004abe:	4413      	add	r3, r2
 8004ac0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004ac4:	667b      	str	r3, [r7, #100]	@ 0x64
 8004ac6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004ac8:	881b      	ldrh	r3, [r3, #0]
 8004aca:	b29b      	uxth	r3, r3
 8004acc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004ad0:	b29a      	uxth	r2, r3
 8004ad2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004ad4:	801a      	strh	r2, [r3, #0]
 8004ad6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d10a      	bne.n	8004af2 <HAL_PCD_EP_DB_Transmit+0x76c>
 8004adc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004ade:	881b      	ldrh	r3, [r3, #0]
 8004ae0:	b29b      	uxth	r3, r3
 8004ae2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ae6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004aea:	b29a      	uxth	r2, r3
 8004aec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004aee:	801a      	strh	r2, [r3, #0]
 8004af0:	e04e      	b.n	8004b90 <HAL_PCD_EP_DB_Transmit+0x80a>
 8004af2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004af4:	2b3e      	cmp	r3, #62	@ 0x3e
 8004af6:	d816      	bhi.n	8004b26 <HAL_PCD_EP_DB_Transmit+0x7a0>
 8004af8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004afa:	085b      	lsrs	r3, r3, #1
 8004afc:	663b      	str	r3, [r7, #96]	@ 0x60
 8004afe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004b00:	f003 0301 	and.w	r3, r3, #1
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d002      	beq.n	8004b0e <HAL_PCD_EP_DB_Transmit+0x788>
 8004b08:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004b0a:	3301      	adds	r3, #1
 8004b0c:	663b      	str	r3, [r7, #96]	@ 0x60
 8004b0e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004b10:	881b      	ldrh	r3, [r3, #0]
 8004b12:	b29a      	uxth	r2, r3
 8004b14:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004b16:	b29b      	uxth	r3, r3
 8004b18:	029b      	lsls	r3, r3, #10
 8004b1a:	b29b      	uxth	r3, r3
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	b29a      	uxth	r2, r3
 8004b20:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004b22:	801a      	strh	r2, [r3, #0]
 8004b24:	e034      	b.n	8004b90 <HAL_PCD_EP_DB_Transmit+0x80a>
 8004b26:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004b28:	095b      	lsrs	r3, r3, #5
 8004b2a:	663b      	str	r3, [r7, #96]	@ 0x60
 8004b2c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004b2e:	f003 031f 	and.w	r3, r3, #31
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d102      	bne.n	8004b3c <HAL_PCD_EP_DB_Transmit+0x7b6>
 8004b36:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004b38:	3b01      	subs	r3, #1
 8004b3a:	663b      	str	r3, [r7, #96]	@ 0x60
 8004b3c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004b3e:	881b      	ldrh	r3, [r3, #0]
 8004b40:	b29a      	uxth	r2, r3
 8004b42:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004b44:	b29b      	uxth	r3, r3
 8004b46:	029b      	lsls	r3, r3, #10
 8004b48:	b29b      	uxth	r3, r3
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	b29b      	uxth	r3, r3
 8004b4e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b52:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b56:	b29a      	uxth	r2, r3
 8004b58:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004b5a:	801a      	strh	r2, [r3, #0]
 8004b5c:	e018      	b.n	8004b90 <HAL_PCD_EP_DB_Transmit+0x80a>
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	785b      	ldrb	r3, [r3, #1]
 8004b62:	2b01      	cmp	r3, #1
 8004b64:	d114      	bne.n	8004b90 <HAL_PCD_EP_DB_Transmit+0x80a>
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004b6e:	b29b      	uxth	r3, r3
 8004b70:	461a      	mov	r2, r3
 8004b72:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004b74:	4413      	add	r3, r2
 8004b76:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	781b      	ldrb	r3, [r3, #0]
 8004b7c:	00da      	lsls	r2, r3, #3
 8004b7e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004b80:	4413      	add	r3, r2
 8004b82:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004b86:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004b88:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004b8a:	b29a      	uxth	r2, r3
 8004b8c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004b8e:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	6818      	ldr	r0, [r3, #0]
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	6959      	ldr	r1, [r3, #20]
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	895a      	ldrh	r2, [r3, #10]
 8004b9c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004b9e:	b29b      	uxth	r3, r3
 8004ba0:	f005 fa09 	bl	8009fb6 <USB_WritePMA>
      }
    }
  }

  /* Enable endpoint IN */
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	461a      	mov	r2, r3
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	781b      	ldrb	r3, [r3, #0]
 8004bae:	009b      	lsls	r3, r3, #2
 8004bb0:	4413      	add	r3, r2
 8004bb2:	881b      	ldrh	r3, [r3, #0]
 8004bb4:	b29b      	uxth	r3, r3
 8004bb6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004bba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004bbe:	82fb      	strh	r3, [r7, #22]
 8004bc0:	8afb      	ldrh	r3, [r7, #22]
 8004bc2:	f083 0310 	eor.w	r3, r3, #16
 8004bc6:	82fb      	strh	r3, [r7, #22]
 8004bc8:	8afb      	ldrh	r3, [r7, #22]
 8004bca:	f083 0320 	eor.w	r3, r3, #32
 8004bce:	82fb      	strh	r3, [r7, #22]
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	461a      	mov	r2, r3
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	781b      	ldrb	r3, [r3, #0]
 8004bda:	009b      	lsls	r3, r3, #2
 8004bdc:	441a      	add	r2, r3
 8004bde:	8afb      	ldrh	r3, [r7, #22]
 8004be0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004be4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004be8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004bec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004bf0:	b29b      	uxth	r3, r3
 8004bf2:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8004bf4:	2300      	movs	r3, #0
}
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	3798      	adds	r7, #152	@ 0x98
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bd80      	pop	{r7, pc}

08004bfe <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8004bfe:	b480      	push	{r7}
 8004c00:	b087      	sub	sp, #28
 8004c02:	af00      	add	r7, sp, #0
 8004c04:	60f8      	str	r0, [r7, #12]
 8004c06:	607b      	str	r3, [r7, #4]
 8004c08:	460b      	mov	r3, r1
 8004c0a:	817b      	strh	r3, [r7, #10]
 8004c0c:	4613      	mov	r3, r2
 8004c0e:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004c10:	897b      	ldrh	r3, [r7, #10]
 8004c12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c16:	b29b      	uxth	r3, r3
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d00b      	beq.n	8004c34 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004c1c:	897b      	ldrh	r3, [r7, #10]
 8004c1e:	f003 0207 	and.w	r2, r3, #7
 8004c22:	4613      	mov	r3, r2
 8004c24:	009b      	lsls	r3, r3, #2
 8004c26:	4413      	add	r3, r2
 8004c28:	00db      	lsls	r3, r3, #3
 8004c2a:	3310      	adds	r3, #16
 8004c2c:	68fa      	ldr	r2, [r7, #12]
 8004c2e:	4413      	add	r3, r2
 8004c30:	617b      	str	r3, [r7, #20]
 8004c32:	e009      	b.n	8004c48 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004c34:	897a      	ldrh	r2, [r7, #10]
 8004c36:	4613      	mov	r3, r2
 8004c38:	009b      	lsls	r3, r3, #2
 8004c3a:	4413      	add	r3, r2
 8004c3c:	00db      	lsls	r3, r3, #3
 8004c3e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004c42:	68fa      	ldr	r2, [r7, #12]
 8004c44:	4413      	add	r3, r2
 8004c46:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004c48:	893b      	ldrh	r3, [r7, #8]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d107      	bne.n	8004c5e <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	2200      	movs	r2, #0
 8004c52:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	b29a      	uxth	r2, r3
 8004c58:	697b      	ldr	r3, [r7, #20]
 8004c5a:	80da      	strh	r2, [r3, #6]
 8004c5c:	e00b      	b.n	8004c76 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8004c5e:	697b      	ldr	r3, [r7, #20]
 8004c60:	2201      	movs	r2, #1
 8004c62:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	b29a      	uxth	r2, r3
 8004c68:	697b      	ldr	r3, [r7, #20]
 8004c6a:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	0c1b      	lsrs	r3, r3, #16
 8004c70:	b29a      	uxth	r2, r3
 8004c72:	697b      	ldr	r3, [r7, #20]
 8004c74:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004c76:	2300      	movs	r3, #0
}
 8004c78:	4618      	mov	r0, r3
 8004c7a:	371c      	adds	r7, #28
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c82:	4770      	bx	lr

08004c84 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004c84:	b480      	push	{r7}
 8004c86:	b085      	sub	sp, #20
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2201      	movs	r2, #1
 8004c96:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8004ca8:	b29b      	uxth	r3, r3
 8004caa:	f043 0301 	orr.w	r3, r3, #1
 8004cae:	b29a      	uxth	r2, r3
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8004cbc:	b29b      	uxth	r3, r3
 8004cbe:	f043 0302 	orr.w	r3, r3, #2
 8004cc2:	b29a      	uxth	r2, r3
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8004cca:	2300      	movs	r3, #0
}
 8004ccc:	4618      	mov	r0, r3
 8004cce:	3714      	adds	r7, #20
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd6:	4770      	bx	lr

08004cd8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	b085      	sub	sp, #20
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d141      	bne.n	8004d6a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004ce6:	4b4b      	ldr	r3, [pc, #300]	@ (8004e14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004cee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004cf2:	d131      	bne.n	8004d58 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004cf4:	4b47      	ldr	r3, [pc, #284]	@ (8004e14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004cf6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004cfa:	4a46      	ldr	r2, [pc, #280]	@ (8004e14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004cfc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004d00:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004d04:	4b43      	ldr	r3, [pc, #268]	@ (8004e14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004d0c:	4a41      	ldr	r2, [pc, #260]	@ (8004e14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d0e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004d12:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004d14:	4b40      	ldr	r3, [pc, #256]	@ (8004e18 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	2232      	movs	r2, #50	@ 0x32
 8004d1a:	fb02 f303 	mul.w	r3, r2, r3
 8004d1e:	4a3f      	ldr	r2, [pc, #252]	@ (8004e1c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004d20:	fba2 2303 	umull	r2, r3, r2, r3
 8004d24:	0c9b      	lsrs	r3, r3, #18
 8004d26:	3301      	adds	r3, #1
 8004d28:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004d2a:	e002      	b.n	8004d32 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	3b01      	subs	r3, #1
 8004d30:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004d32:	4b38      	ldr	r3, [pc, #224]	@ (8004e14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d34:	695b      	ldr	r3, [r3, #20]
 8004d36:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d3e:	d102      	bne.n	8004d46 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d1f2      	bne.n	8004d2c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004d46:	4b33      	ldr	r3, [pc, #204]	@ (8004e14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d48:	695b      	ldr	r3, [r3, #20]
 8004d4a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d4e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d52:	d158      	bne.n	8004e06 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004d54:	2303      	movs	r3, #3
 8004d56:	e057      	b.n	8004e08 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004d58:	4b2e      	ldr	r3, [pc, #184]	@ (8004e14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004d5e:	4a2d      	ldr	r2, [pc, #180]	@ (8004e14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d60:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004d64:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004d68:	e04d      	b.n	8004e06 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004d70:	d141      	bne.n	8004df6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004d72:	4b28      	ldr	r3, [pc, #160]	@ (8004e14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004d7a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d7e:	d131      	bne.n	8004de4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004d80:	4b24      	ldr	r3, [pc, #144]	@ (8004e14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d82:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004d86:	4a23      	ldr	r2, [pc, #140]	@ (8004e14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d88:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d8c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004d90:	4b20      	ldr	r3, [pc, #128]	@ (8004e14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004d98:	4a1e      	ldr	r2, [pc, #120]	@ (8004e14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d9a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004d9e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004da0:	4b1d      	ldr	r3, [pc, #116]	@ (8004e18 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	2232      	movs	r2, #50	@ 0x32
 8004da6:	fb02 f303 	mul.w	r3, r2, r3
 8004daa:	4a1c      	ldr	r2, [pc, #112]	@ (8004e1c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004dac:	fba2 2303 	umull	r2, r3, r2, r3
 8004db0:	0c9b      	lsrs	r3, r3, #18
 8004db2:	3301      	adds	r3, #1
 8004db4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004db6:	e002      	b.n	8004dbe <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	3b01      	subs	r3, #1
 8004dbc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004dbe:	4b15      	ldr	r3, [pc, #84]	@ (8004e14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004dc0:	695b      	ldr	r3, [r3, #20]
 8004dc2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004dc6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004dca:	d102      	bne.n	8004dd2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d1f2      	bne.n	8004db8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004dd2:	4b10      	ldr	r3, [pc, #64]	@ (8004e14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004dd4:	695b      	ldr	r3, [r3, #20]
 8004dd6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004dda:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004dde:	d112      	bne.n	8004e06 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004de0:	2303      	movs	r3, #3
 8004de2:	e011      	b.n	8004e08 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004de4:	4b0b      	ldr	r3, [pc, #44]	@ (8004e14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004de6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004dea:	4a0a      	ldr	r2, [pc, #40]	@ (8004e14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004dec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004df0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004df4:	e007      	b.n	8004e06 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004df6:	4b07      	ldr	r3, [pc, #28]	@ (8004e14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004dfe:	4a05      	ldr	r2, [pc, #20]	@ (8004e14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e00:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004e04:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004e06:	2300      	movs	r3, #0
}
 8004e08:	4618      	mov	r0, r3
 8004e0a:	3714      	adds	r7, #20
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e12:	4770      	bx	lr
 8004e14:	40007000 	.word	0x40007000
 8004e18:	200001e8 	.word	0x200001e8
 8004e1c:	431bde83 	.word	0x431bde83

08004e20 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004e20:	b480      	push	{r7}
 8004e22:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004e24:	4b05      	ldr	r3, [pc, #20]	@ (8004e3c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004e26:	689b      	ldr	r3, [r3, #8]
 8004e28:	4a04      	ldr	r2, [pc, #16]	@ (8004e3c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004e2a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004e2e:	6093      	str	r3, [r2, #8]
}
 8004e30:	bf00      	nop
 8004e32:	46bd      	mov	sp, r7
 8004e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e38:	4770      	bx	lr
 8004e3a:	bf00      	nop
 8004e3c:	40007000 	.word	0x40007000

08004e40 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b088      	sub	sp, #32
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d101      	bne.n	8004e52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004e4e:	2301      	movs	r3, #1
 8004e50:	e2fe      	b.n	8005450 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f003 0301 	and.w	r3, r3, #1
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d075      	beq.n	8004f4a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e5e:	4b97      	ldr	r3, [pc, #604]	@ (80050bc <HAL_RCC_OscConfig+0x27c>)
 8004e60:	689b      	ldr	r3, [r3, #8]
 8004e62:	f003 030c 	and.w	r3, r3, #12
 8004e66:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004e68:	4b94      	ldr	r3, [pc, #592]	@ (80050bc <HAL_RCC_OscConfig+0x27c>)
 8004e6a:	68db      	ldr	r3, [r3, #12]
 8004e6c:	f003 0303 	and.w	r3, r3, #3
 8004e70:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004e72:	69bb      	ldr	r3, [r7, #24]
 8004e74:	2b0c      	cmp	r3, #12
 8004e76:	d102      	bne.n	8004e7e <HAL_RCC_OscConfig+0x3e>
 8004e78:	697b      	ldr	r3, [r7, #20]
 8004e7a:	2b03      	cmp	r3, #3
 8004e7c:	d002      	beq.n	8004e84 <HAL_RCC_OscConfig+0x44>
 8004e7e:	69bb      	ldr	r3, [r7, #24]
 8004e80:	2b08      	cmp	r3, #8
 8004e82:	d10b      	bne.n	8004e9c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e84:	4b8d      	ldr	r3, [pc, #564]	@ (80050bc <HAL_RCC_OscConfig+0x27c>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d05b      	beq.n	8004f48 <HAL_RCC_OscConfig+0x108>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d157      	bne.n	8004f48 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004e98:	2301      	movs	r3, #1
 8004e9a:	e2d9      	b.n	8005450 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	685b      	ldr	r3, [r3, #4]
 8004ea0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ea4:	d106      	bne.n	8004eb4 <HAL_RCC_OscConfig+0x74>
 8004ea6:	4b85      	ldr	r3, [pc, #532]	@ (80050bc <HAL_RCC_OscConfig+0x27c>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4a84      	ldr	r2, [pc, #528]	@ (80050bc <HAL_RCC_OscConfig+0x27c>)
 8004eac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004eb0:	6013      	str	r3, [r2, #0]
 8004eb2:	e01d      	b.n	8004ef0 <HAL_RCC_OscConfig+0xb0>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004ebc:	d10c      	bne.n	8004ed8 <HAL_RCC_OscConfig+0x98>
 8004ebe:	4b7f      	ldr	r3, [pc, #508]	@ (80050bc <HAL_RCC_OscConfig+0x27c>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4a7e      	ldr	r2, [pc, #504]	@ (80050bc <HAL_RCC_OscConfig+0x27c>)
 8004ec4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004ec8:	6013      	str	r3, [r2, #0]
 8004eca:	4b7c      	ldr	r3, [pc, #496]	@ (80050bc <HAL_RCC_OscConfig+0x27c>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a7b      	ldr	r2, [pc, #492]	@ (80050bc <HAL_RCC_OscConfig+0x27c>)
 8004ed0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ed4:	6013      	str	r3, [r2, #0]
 8004ed6:	e00b      	b.n	8004ef0 <HAL_RCC_OscConfig+0xb0>
 8004ed8:	4b78      	ldr	r3, [pc, #480]	@ (80050bc <HAL_RCC_OscConfig+0x27c>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4a77      	ldr	r2, [pc, #476]	@ (80050bc <HAL_RCC_OscConfig+0x27c>)
 8004ede:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ee2:	6013      	str	r3, [r2, #0]
 8004ee4:	4b75      	ldr	r3, [pc, #468]	@ (80050bc <HAL_RCC_OscConfig+0x27c>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4a74      	ldr	r2, [pc, #464]	@ (80050bc <HAL_RCC_OscConfig+0x27c>)
 8004eea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004eee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d013      	beq.n	8004f20 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ef8:	f7fd fba6 	bl	8002648 <HAL_GetTick>
 8004efc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004efe:	e008      	b.n	8004f12 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f00:	f7fd fba2 	bl	8002648 <HAL_GetTick>
 8004f04:	4602      	mov	r2, r0
 8004f06:	693b      	ldr	r3, [r7, #16]
 8004f08:	1ad3      	subs	r3, r2, r3
 8004f0a:	2b64      	cmp	r3, #100	@ 0x64
 8004f0c:	d901      	bls.n	8004f12 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004f0e:	2303      	movs	r3, #3
 8004f10:	e29e      	b.n	8005450 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004f12:	4b6a      	ldr	r3, [pc, #424]	@ (80050bc <HAL_RCC_OscConfig+0x27c>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d0f0      	beq.n	8004f00 <HAL_RCC_OscConfig+0xc0>
 8004f1e:	e014      	b.n	8004f4a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f20:	f7fd fb92 	bl	8002648 <HAL_GetTick>
 8004f24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004f26:	e008      	b.n	8004f3a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f28:	f7fd fb8e 	bl	8002648 <HAL_GetTick>
 8004f2c:	4602      	mov	r2, r0
 8004f2e:	693b      	ldr	r3, [r7, #16]
 8004f30:	1ad3      	subs	r3, r2, r3
 8004f32:	2b64      	cmp	r3, #100	@ 0x64
 8004f34:	d901      	bls.n	8004f3a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004f36:	2303      	movs	r3, #3
 8004f38:	e28a      	b.n	8005450 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004f3a:	4b60      	ldr	r3, [pc, #384]	@ (80050bc <HAL_RCC_OscConfig+0x27c>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d1f0      	bne.n	8004f28 <HAL_RCC_OscConfig+0xe8>
 8004f46:	e000      	b.n	8004f4a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f003 0302 	and.w	r3, r3, #2
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d075      	beq.n	8005042 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f56:	4b59      	ldr	r3, [pc, #356]	@ (80050bc <HAL_RCC_OscConfig+0x27c>)
 8004f58:	689b      	ldr	r3, [r3, #8]
 8004f5a:	f003 030c 	and.w	r3, r3, #12
 8004f5e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004f60:	4b56      	ldr	r3, [pc, #344]	@ (80050bc <HAL_RCC_OscConfig+0x27c>)
 8004f62:	68db      	ldr	r3, [r3, #12]
 8004f64:	f003 0303 	and.w	r3, r3, #3
 8004f68:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004f6a:	69bb      	ldr	r3, [r7, #24]
 8004f6c:	2b0c      	cmp	r3, #12
 8004f6e:	d102      	bne.n	8004f76 <HAL_RCC_OscConfig+0x136>
 8004f70:	697b      	ldr	r3, [r7, #20]
 8004f72:	2b02      	cmp	r3, #2
 8004f74:	d002      	beq.n	8004f7c <HAL_RCC_OscConfig+0x13c>
 8004f76:	69bb      	ldr	r3, [r7, #24]
 8004f78:	2b04      	cmp	r3, #4
 8004f7a:	d11f      	bne.n	8004fbc <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004f7c:	4b4f      	ldr	r3, [pc, #316]	@ (80050bc <HAL_RCC_OscConfig+0x27c>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d005      	beq.n	8004f94 <HAL_RCC_OscConfig+0x154>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	68db      	ldr	r3, [r3, #12]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d101      	bne.n	8004f94 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004f90:	2301      	movs	r3, #1
 8004f92:	e25d      	b.n	8005450 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f94:	4b49      	ldr	r3, [pc, #292]	@ (80050bc <HAL_RCC_OscConfig+0x27c>)
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	691b      	ldr	r3, [r3, #16]
 8004fa0:	061b      	lsls	r3, r3, #24
 8004fa2:	4946      	ldr	r1, [pc, #280]	@ (80050bc <HAL_RCC_OscConfig+0x27c>)
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004fa8:	4b45      	ldr	r3, [pc, #276]	@ (80050c0 <HAL_RCC_OscConfig+0x280>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4618      	mov	r0, r3
 8004fae:	f7fd faff 	bl	80025b0 <HAL_InitTick>
 8004fb2:	4603      	mov	r3, r0
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d043      	beq.n	8005040 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004fb8:	2301      	movs	r3, #1
 8004fba:	e249      	b.n	8005450 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	68db      	ldr	r3, [r3, #12]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d023      	beq.n	800500c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004fc4:	4b3d      	ldr	r3, [pc, #244]	@ (80050bc <HAL_RCC_OscConfig+0x27c>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4a3c      	ldr	r2, [pc, #240]	@ (80050bc <HAL_RCC_OscConfig+0x27c>)
 8004fca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004fce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fd0:	f7fd fb3a 	bl	8002648 <HAL_GetTick>
 8004fd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004fd6:	e008      	b.n	8004fea <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004fd8:	f7fd fb36 	bl	8002648 <HAL_GetTick>
 8004fdc:	4602      	mov	r2, r0
 8004fde:	693b      	ldr	r3, [r7, #16]
 8004fe0:	1ad3      	subs	r3, r2, r3
 8004fe2:	2b02      	cmp	r3, #2
 8004fe4:	d901      	bls.n	8004fea <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004fe6:	2303      	movs	r3, #3
 8004fe8:	e232      	b.n	8005450 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004fea:	4b34      	ldr	r3, [pc, #208]	@ (80050bc <HAL_RCC_OscConfig+0x27c>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d0f0      	beq.n	8004fd8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ff6:	4b31      	ldr	r3, [pc, #196]	@ (80050bc <HAL_RCC_OscConfig+0x27c>)
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	691b      	ldr	r3, [r3, #16]
 8005002:	061b      	lsls	r3, r3, #24
 8005004:	492d      	ldr	r1, [pc, #180]	@ (80050bc <HAL_RCC_OscConfig+0x27c>)
 8005006:	4313      	orrs	r3, r2
 8005008:	604b      	str	r3, [r1, #4]
 800500a:	e01a      	b.n	8005042 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800500c:	4b2b      	ldr	r3, [pc, #172]	@ (80050bc <HAL_RCC_OscConfig+0x27c>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a2a      	ldr	r2, [pc, #168]	@ (80050bc <HAL_RCC_OscConfig+0x27c>)
 8005012:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005016:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005018:	f7fd fb16 	bl	8002648 <HAL_GetTick>
 800501c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800501e:	e008      	b.n	8005032 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005020:	f7fd fb12 	bl	8002648 <HAL_GetTick>
 8005024:	4602      	mov	r2, r0
 8005026:	693b      	ldr	r3, [r7, #16]
 8005028:	1ad3      	subs	r3, r2, r3
 800502a:	2b02      	cmp	r3, #2
 800502c:	d901      	bls.n	8005032 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800502e:	2303      	movs	r3, #3
 8005030:	e20e      	b.n	8005450 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005032:	4b22      	ldr	r3, [pc, #136]	@ (80050bc <HAL_RCC_OscConfig+0x27c>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800503a:	2b00      	cmp	r3, #0
 800503c:	d1f0      	bne.n	8005020 <HAL_RCC_OscConfig+0x1e0>
 800503e:	e000      	b.n	8005042 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005040:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f003 0308 	and.w	r3, r3, #8
 800504a:	2b00      	cmp	r3, #0
 800504c:	d041      	beq.n	80050d2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	695b      	ldr	r3, [r3, #20]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d01c      	beq.n	8005090 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005056:	4b19      	ldr	r3, [pc, #100]	@ (80050bc <HAL_RCC_OscConfig+0x27c>)
 8005058:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800505c:	4a17      	ldr	r2, [pc, #92]	@ (80050bc <HAL_RCC_OscConfig+0x27c>)
 800505e:	f043 0301 	orr.w	r3, r3, #1
 8005062:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005066:	f7fd faef 	bl	8002648 <HAL_GetTick>
 800506a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800506c:	e008      	b.n	8005080 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800506e:	f7fd faeb 	bl	8002648 <HAL_GetTick>
 8005072:	4602      	mov	r2, r0
 8005074:	693b      	ldr	r3, [r7, #16]
 8005076:	1ad3      	subs	r3, r2, r3
 8005078:	2b02      	cmp	r3, #2
 800507a:	d901      	bls.n	8005080 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800507c:	2303      	movs	r3, #3
 800507e:	e1e7      	b.n	8005450 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005080:	4b0e      	ldr	r3, [pc, #56]	@ (80050bc <HAL_RCC_OscConfig+0x27c>)
 8005082:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005086:	f003 0302 	and.w	r3, r3, #2
 800508a:	2b00      	cmp	r3, #0
 800508c:	d0ef      	beq.n	800506e <HAL_RCC_OscConfig+0x22e>
 800508e:	e020      	b.n	80050d2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005090:	4b0a      	ldr	r3, [pc, #40]	@ (80050bc <HAL_RCC_OscConfig+0x27c>)
 8005092:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005096:	4a09      	ldr	r2, [pc, #36]	@ (80050bc <HAL_RCC_OscConfig+0x27c>)
 8005098:	f023 0301 	bic.w	r3, r3, #1
 800509c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050a0:	f7fd fad2 	bl	8002648 <HAL_GetTick>
 80050a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80050a6:	e00d      	b.n	80050c4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80050a8:	f7fd face 	bl	8002648 <HAL_GetTick>
 80050ac:	4602      	mov	r2, r0
 80050ae:	693b      	ldr	r3, [r7, #16]
 80050b0:	1ad3      	subs	r3, r2, r3
 80050b2:	2b02      	cmp	r3, #2
 80050b4:	d906      	bls.n	80050c4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80050b6:	2303      	movs	r3, #3
 80050b8:	e1ca      	b.n	8005450 <HAL_RCC_OscConfig+0x610>
 80050ba:	bf00      	nop
 80050bc:	40021000 	.word	0x40021000
 80050c0:	200001ec 	.word	0x200001ec
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80050c4:	4b8c      	ldr	r3, [pc, #560]	@ (80052f8 <HAL_RCC_OscConfig+0x4b8>)
 80050c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80050ca:	f003 0302 	and.w	r3, r3, #2
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d1ea      	bne.n	80050a8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f003 0304 	and.w	r3, r3, #4
 80050da:	2b00      	cmp	r3, #0
 80050dc:	f000 80a6 	beq.w	800522c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80050e0:	2300      	movs	r3, #0
 80050e2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80050e4:	4b84      	ldr	r3, [pc, #528]	@ (80052f8 <HAL_RCC_OscConfig+0x4b8>)
 80050e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d101      	bne.n	80050f4 <HAL_RCC_OscConfig+0x2b4>
 80050f0:	2301      	movs	r3, #1
 80050f2:	e000      	b.n	80050f6 <HAL_RCC_OscConfig+0x2b6>
 80050f4:	2300      	movs	r3, #0
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d00d      	beq.n	8005116 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80050fa:	4b7f      	ldr	r3, [pc, #508]	@ (80052f8 <HAL_RCC_OscConfig+0x4b8>)
 80050fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050fe:	4a7e      	ldr	r2, [pc, #504]	@ (80052f8 <HAL_RCC_OscConfig+0x4b8>)
 8005100:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005104:	6593      	str	r3, [r2, #88]	@ 0x58
 8005106:	4b7c      	ldr	r3, [pc, #496]	@ (80052f8 <HAL_RCC_OscConfig+0x4b8>)
 8005108:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800510a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800510e:	60fb      	str	r3, [r7, #12]
 8005110:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005112:	2301      	movs	r3, #1
 8005114:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005116:	4b79      	ldr	r3, [pc, #484]	@ (80052fc <HAL_RCC_OscConfig+0x4bc>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800511e:	2b00      	cmp	r3, #0
 8005120:	d118      	bne.n	8005154 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005122:	4b76      	ldr	r3, [pc, #472]	@ (80052fc <HAL_RCC_OscConfig+0x4bc>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4a75      	ldr	r2, [pc, #468]	@ (80052fc <HAL_RCC_OscConfig+0x4bc>)
 8005128:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800512c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800512e:	f7fd fa8b 	bl	8002648 <HAL_GetTick>
 8005132:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005134:	e008      	b.n	8005148 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005136:	f7fd fa87 	bl	8002648 <HAL_GetTick>
 800513a:	4602      	mov	r2, r0
 800513c:	693b      	ldr	r3, [r7, #16]
 800513e:	1ad3      	subs	r3, r2, r3
 8005140:	2b02      	cmp	r3, #2
 8005142:	d901      	bls.n	8005148 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005144:	2303      	movs	r3, #3
 8005146:	e183      	b.n	8005450 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005148:	4b6c      	ldr	r3, [pc, #432]	@ (80052fc <HAL_RCC_OscConfig+0x4bc>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005150:	2b00      	cmp	r3, #0
 8005152:	d0f0      	beq.n	8005136 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	689b      	ldr	r3, [r3, #8]
 8005158:	2b01      	cmp	r3, #1
 800515a:	d108      	bne.n	800516e <HAL_RCC_OscConfig+0x32e>
 800515c:	4b66      	ldr	r3, [pc, #408]	@ (80052f8 <HAL_RCC_OscConfig+0x4b8>)
 800515e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005162:	4a65      	ldr	r2, [pc, #404]	@ (80052f8 <HAL_RCC_OscConfig+0x4b8>)
 8005164:	f043 0301 	orr.w	r3, r3, #1
 8005168:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800516c:	e024      	b.n	80051b8 <HAL_RCC_OscConfig+0x378>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	689b      	ldr	r3, [r3, #8]
 8005172:	2b05      	cmp	r3, #5
 8005174:	d110      	bne.n	8005198 <HAL_RCC_OscConfig+0x358>
 8005176:	4b60      	ldr	r3, [pc, #384]	@ (80052f8 <HAL_RCC_OscConfig+0x4b8>)
 8005178:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800517c:	4a5e      	ldr	r2, [pc, #376]	@ (80052f8 <HAL_RCC_OscConfig+0x4b8>)
 800517e:	f043 0304 	orr.w	r3, r3, #4
 8005182:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005186:	4b5c      	ldr	r3, [pc, #368]	@ (80052f8 <HAL_RCC_OscConfig+0x4b8>)
 8005188:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800518c:	4a5a      	ldr	r2, [pc, #360]	@ (80052f8 <HAL_RCC_OscConfig+0x4b8>)
 800518e:	f043 0301 	orr.w	r3, r3, #1
 8005192:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005196:	e00f      	b.n	80051b8 <HAL_RCC_OscConfig+0x378>
 8005198:	4b57      	ldr	r3, [pc, #348]	@ (80052f8 <HAL_RCC_OscConfig+0x4b8>)
 800519a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800519e:	4a56      	ldr	r2, [pc, #344]	@ (80052f8 <HAL_RCC_OscConfig+0x4b8>)
 80051a0:	f023 0301 	bic.w	r3, r3, #1
 80051a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80051a8:	4b53      	ldr	r3, [pc, #332]	@ (80052f8 <HAL_RCC_OscConfig+0x4b8>)
 80051aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051ae:	4a52      	ldr	r2, [pc, #328]	@ (80052f8 <HAL_RCC_OscConfig+0x4b8>)
 80051b0:	f023 0304 	bic.w	r3, r3, #4
 80051b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	689b      	ldr	r3, [r3, #8]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d016      	beq.n	80051ee <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051c0:	f7fd fa42 	bl	8002648 <HAL_GetTick>
 80051c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80051c6:	e00a      	b.n	80051de <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051c8:	f7fd fa3e 	bl	8002648 <HAL_GetTick>
 80051cc:	4602      	mov	r2, r0
 80051ce:	693b      	ldr	r3, [r7, #16]
 80051d0:	1ad3      	subs	r3, r2, r3
 80051d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d901      	bls.n	80051de <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80051da:	2303      	movs	r3, #3
 80051dc:	e138      	b.n	8005450 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80051de:	4b46      	ldr	r3, [pc, #280]	@ (80052f8 <HAL_RCC_OscConfig+0x4b8>)
 80051e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051e4:	f003 0302 	and.w	r3, r3, #2
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d0ed      	beq.n	80051c8 <HAL_RCC_OscConfig+0x388>
 80051ec:	e015      	b.n	800521a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051ee:	f7fd fa2b 	bl	8002648 <HAL_GetTick>
 80051f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80051f4:	e00a      	b.n	800520c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051f6:	f7fd fa27 	bl	8002648 <HAL_GetTick>
 80051fa:	4602      	mov	r2, r0
 80051fc:	693b      	ldr	r3, [r7, #16]
 80051fe:	1ad3      	subs	r3, r2, r3
 8005200:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005204:	4293      	cmp	r3, r2
 8005206:	d901      	bls.n	800520c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005208:	2303      	movs	r3, #3
 800520a:	e121      	b.n	8005450 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800520c:	4b3a      	ldr	r3, [pc, #232]	@ (80052f8 <HAL_RCC_OscConfig+0x4b8>)
 800520e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005212:	f003 0302 	and.w	r3, r3, #2
 8005216:	2b00      	cmp	r3, #0
 8005218:	d1ed      	bne.n	80051f6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800521a:	7ffb      	ldrb	r3, [r7, #31]
 800521c:	2b01      	cmp	r3, #1
 800521e:	d105      	bne.n	800522c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005220:	4b35      	ldr	r3, [pc, #212]	@ (80052f8 <HAL_RCC_OscConfig+0x4b8>)
 8005222:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005224:	4a34      	ldr	r2, [pc, #208]	@ (80052f8 <HAL_RCC_OscConfig+0x4b8>)
 8005226:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800522a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f003 0320 	and.w	r3, r3, #32
 8005234:	2b00      	cmp	r3, #0
 8005236:	d03c      	beq.n	80052b2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	699b      	ldr	r3, [r3, #24]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d01c      	beq.n	800527a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005240:	4b2d      	ldr	r3, [pc, #180]	@ (80052f8 <HAL_RCC_OscConfig+0x4b8>)
 8005242:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005246:	4a2c      	ldr	r2, [pc, #176]	@ (80052f8 <HAL_RCC_OscConfig+0x4b8>)
 8005248:	f043 0301 	orr.w	r3, r3, #1
 800524c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005250:	f7fd f9fa 	bl	8002648 <HAL_GetTick>
 8005254:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005256:	e008      	b.n	800526a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005258:	f7fd f9f6 	bl	8002648 <HAL_GetTick>
 800525c:	4602      	mov	r2, r0
 800525e:	693b      	ldr	r3, [r7, #16]
 8005260:	1ad3      	subs	r3, r2, r3
 8005262:	2b02      	cmp	r3, #2
 8005264:	d901      	bls.n	800526a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8005266:	2303      	movs	r3, #3
 8005268:	e0f2      	b.n	8005450 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800526a:	4b23      	ldr	r3, [pc, #140]	@ (80052f8 <HAL_RCC_OscConfig+0x4b8>)
 800526c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005270:	f003 0302 	and.w	r3, r3, #2
 8005274:	2b00      	cmp	r3, #0
 8005276:	d0ef      	beq.n	8005258 <HAL_RCC_OscConfig+0x418>
 8005278:	e01b      	b.n	80052b2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800527a:	4b1f      	ldr	r3, [pc, #124]	@ (80052f8 <HAL_RCC_OscConfig+0x4b8>)
 800527c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005280:	4a1d      	ldr	r2, [pc, #116]	@ (80052f8 <HAL_RCC_OscConfig+0x4b8>)
 8005282:	f023 0301 	bic.w	r3, r3, #1
 8005286:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800528a:	f7fd f9dd 	bl	8002648 <HAL_GetTick>
 800528e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005290:	e008      	b.n	80052a4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005292:	f7fd f9d9 	bl	8002648 <HAL_GetTick>
 8005296:	4602      	mov	r2, r0
 8005298:	693b      	ldr	r3, [r7, #16]
 800529a:	1ad3      	subs	r3, r2, r3
 800529c:	2b02      	cmp	r3, #2
 800529e:	d901      	bls.n	80052a4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80052a0:	2303      	movs	r3, #3
 80052a2:	e0d5      	b.n	8005450 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80052a4:	4b14      	ldr	r3, [pc, #80]	@ (80052f8 <HAL_RCC_OscConfig+0x4b8>)
 80052a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80052aa:	f003 0302 	and.w	r3, r3, #2
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d1ef      	bne.n	8005292 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	69db      	ldr	r3, [r3, #28]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	f000 80c9 	beq.w	800544e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80052bc:	4b0e      	ldr	r3, [pc, #56]	@ (80052f8 <HAL_RCC_OscConfig+0x4b8>)
 80052be:	689b      	ldr	r3, [r3, #8]
 80052c0:	f003 030c 	and.w	r3, r3, #12
 80052c4:	2b0c      	cmp	r3, #12
 80052c6:	f000 8083 	beq.w	80053d0 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	69db      	ldr	r3, [r3, #28]
 80052ce:	2b02      	cmp	r3, #2
 80052d0:	d15e      	bne.n	8005390 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052d2:	4b09      	ldr	r3, [pc, #36]	@ (80052f8 <HAL_RCC_OscConfig+0x4b8>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4a08      	ldr	r2, [pc, #32]	@ (80052f8 <HAL_RCC_OscConfig+0x4b8>)
 80052d8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80052dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052de:	f7fd f9b3 	bl	8002648 <HAL_GetTick>
 80052e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80052e4:	e00c      	b.n	8005300 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052e6:	f7fd f9af 	bl	8002648 <HAL_GetTick>
 80052ea:	4602      	mov	r2, r0
 80052ec:	693b      	ldr	r3, [r7, #16]
 80052ee:	1ad3      	subs	r3, r2, r3
 80052f0:	2b02      	cmp	r3, #2
 80052f2:	d905      	bls.n	8005300 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80052f4:	2303      	movs	r3, #3
 80052f6:	e0ab      	b.n	8005450 <HAL_RCC_OscConfig+0x610>
 80052f8:	40021000 	.word	0x40021000
 80052fc:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005300:	4b55      	ldr	r3, [pc, #340]	@ (8005458 <HAL_RCC_OscConfig+0x618>)
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005308:	2b00      	cmp	r3, #0
 800530a:	d1ec      	bne.n	80052e6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800530c:	4b52      	ldr	r3, [pc, #328]	@ (8005458 <HAL_RCC_OscConfig+0x618>)
 800530e:	68da      	ldr	r2, [r3, #12]
 8005310:	4b52      	ldr	r3, [pc, #328]	@ (800545c <HAL_RCC_OscConfig+0x61c>)
 8005312:	4013      	ands	r3, r2
 8005314:	687a      	ldr	r2, [r7, #4]
 8005316:	6a11      	ldr	r1, [r2, #32]
 8005318:	687a      	ldr	r2, [r7, #4]
 800531a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800531c:	3a01      	subs	r2, #1
 800531e:	0112      	lsls	r2, r2, #4
 8005320:	4311      	orrs	r1, r2
 8005322:	687a      	ldr	r2, [r7, #4]
 8005324:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8005326:	0212      	lsls	r2, r2, #8
 8005328:	4311      	orrs	r1, r2
 800532a:	687a      	ldr	r2, [r7, #4]
 800532c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800532e:	0852      	lsrs	r2, r2, #1
 8005330:	3a01      	subs	r2, #1
 8005332:	0552      	lsls	r2, r2, #21
 8005334:	4311      	orrs	r1, r2
 8005336:	687a      	ldr	r2, [r7, #4]
 8005338:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800533a:	0852      	lsrs	r2, r2, #1
 800533c:	3a01      	subs	r2, #1
 800533e:	0652      	lsls	r2, r2, #25
 8005340:	4311      	orrs	r1, r2
 8005342:	687a      	ldr	r2, [r7, #4]
 8005344:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005346:	06d2      	lsls	r2, r2, #27
 8005348:	430a      	orrs	r2, r1
 800534a:	4943      	ldr	r1, [pc, #268]	@ (8005458 <HAL_RCC_OscConfig+0x618>)
 800534c:	4313      	orrs	r3, r2
 800534e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005350:	4b41      	ldr	r3, [pc, #260]	@ (8005458 <HAL_RCC_OscConfig+0x618>)
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a40      	ldr	r2, [pc, #256]	@ (8005458 <HAL_RCC_OscConfig+0x618>)
 8005356:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800535a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800535c:	4b3e      	ldr	r3, [pc, #248]	@ (8005458 <HAL_RCC_OscConfig+0x618>)
 800535e:	68db      	ldr	r3, [r3, #12]
 8005360:	4a3d      	ldr	r2, [pc, #244]	@ (8005458 <HAL_RCC_OscConfig+0x618>)
 8005362:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005366:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005368:	f7fd f96e 	bl	8002648 <HAL_GetTick>
 800536c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800536e:	e008      	b.n	8005382 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005370:	f7fd f96a 	bl	8002648 <HAL_GetTick>
 8005374:	4602      	mov	r2, r0
 8005376:	693b      	ldr	r3, [r7, #16]
 8005378:	1ad3      	subs	r3, r2, r3
 800537a:	2b02      	cmp	r3, #2
 800537c:	d901      	bls.n	8005382 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800537e:	2303      	movs	r3, #3
 8005380:	e066      	b.n	8005450 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005382:	4b35      	ldr	r3, [pc, #212]	@ (8005458 <HAL_RCC_OscConfig+0x618>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800538a:	2b00      	cmp	r3, #0
 800538c:	d0f0      	beq.n	8005370 <HAL_RCC_OscConfig+0x530>
 800538e:	e05e      	b.n	800544e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005390:	4b31      	ldr	r3, [pc, #196]	@ (8005458 <HAL_RCC_OscConfig+0x618>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	4a30      	ldr	r2, [pc, #192]	@ (8005458 <HAL_RCC_OscConfig+0x618>)
 8005396:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800539a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800539c:	f7fd f954 	bl	8002648 <HAL_GetTick>
 80053a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80053a2:	e008      	b.n	80053b6 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053a4:	f7fd f950 	bl	8002648 <HAL_GetTick>
 80053a8:	4602      	mov	r2, r0
 80053aa:	693b      	ldr	r3, [r7, #16]
 80053ac:	1ad3      	subs	r3, r2, r3
 80053ae:	2b02      	cmp	r3, #2
 80053b0:	d901      	bls.n	80053b6 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80053b2:	2303      	movs	r3, #3
 80053b4:	e04c      	b.n	8005450 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80053b6:	4b28      	ldr	r3, [pc, #160]	@ (8005458 <HAL_RCC_OscConfig+0x618>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d1f0      	bne.n	80053a4 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80053c2:	4b25      	ldr	r3, [pc, #148]	@ (8005458 <HAL_RCC_OscConfig+0x618>)
 80053c4:	68da      	ldr	r2, [r3, #12]
 80053c6:	4924      	ldr	r1, [pc, #144]	@ (8005458 <HAL_RCC_OscConfig+0x618>)
 80053c8:	4b25      	ldr	r3, [pc, #148]	@ (8005460 <HAL_RCC_OscConfig+0x620>)
 80053ca:	4013      	ands	r3, r2
 80053cc:	60cb      	str	r3, [r1, #12]
 80053ce:	e03e      	b.n	800544e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	69db      	ldr	r3, [r3, #28]
 80053d4:	2b01      	cmp	r3, #1
 80053d6:	d101      	bne.n	80053dc <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80053d8:	2301      	movs	r3, #1
 80053da:	e039      	b.n	8005450 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80053dc:	4b1e      	ldr	r3, [pc, #120]	@ (8005458 <HAL_RCC_OscConfig+0x618>)
 80053de:	68db      	ldr	r3, [r3, #12]
 80053e0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	f003 0203 	and.w	r2, r3, #3
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6a1b      	ldr	r3, [r3, #32]
 80053ec:	429a      	cmp	r2, r3
 80053ee:	d12c      	bne.n	800544a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80053f0:	697b      	ldr	r3, [r7, #20]
 80053f2:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053fa:	3b01      	subs	r3, #1
 80053fc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053fe:	429a      	cmp	r2, r3
 8005400:	d123      	bne.n	800544a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005402:	697b      	ldr	r3, [r7, #20]
 8005404:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800540c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800540e:	429a      	cmp	r2, r3
 8005410:	d11b      	bne.n	800544a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005412:	697b      	ldr	r3, [r7, #20]
 8005414:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800541c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800541e:	429a      	cmp	r2, r3
 8005420:	d113      	bne.n	800544a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005422:	697b      	ldr	r3, [r7, #20]
 8005424:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800542c:	085b      	lsrs	r3, r3, #1
 800542e:	3b01      	subs	r3, #1
 8005430:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005432:	429a      	cmp	r2, r3
 8005434:	d109      	bne.n	800544a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005436:	697b      	ldr	r3, [r7, #20]
 8005438:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005440:	085b      	lsrs	r3, r3, #1
 8005442:	3b01      	subs	r3, #1
 8005444:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005446:	429a      	cmp	r2, r3
 8005448:	d001      	beq.n	800544e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800544a:	2301      	movs	r3, #1
 800544c:	e000      	b.n	8005450 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800544e:	2300      	movs	r3, #0
}
 8005450:	4618      	mov	r0, r3
 8005452:	3720      	adds	r7, #32
 8005454:	46bd      	mov	sp, r7
 8005456:	bd80      	pop	{r7, pc}
 8005458:	40021000 	.word	0x40021000
 800545c:	019f800c 	.word	0x019f800c
 8005460:	feeefffc 	.word	0xfeeefffc

08005464 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b086      	sub	sp, #24
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
 800546c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800546e:	2300      	movs	r3, #0
 8005470:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d101      	bne.n	800547c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005478:	2301      	movs	r3, #1
 800547a:	e11e      	b.n	80056ba <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800547c:	4b91      	ldr	r3, [pc, #580]	@ (80056c4 <HAL_RCC_ClockConfig+0x260>)
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f003 030f 	and.w	r3, r3, #15
 8005484:	683a      	ldr	r2, [r7, #0]
 8005486:	429a      	cmp	r2, r3
 8005488:	d910      	bls.n	80054ac <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800548a:	4b8e      	ldr	r3, [pc, #568]	@ (80056c4 <HAL_RCC_ClockConfig+0x260>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f023 020f 	bic.w	r2, r3, #15
 8005492:	498c      	ldr	r1, [pc, #560]	@ (80056c4 <HAL_RCC_ClockConfig+0x260>)
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	4313      	orrs	r3, r2
 8005498:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800549a:	4b8a      	ldr	r3, [pc, #552]	@ (80056c4 <HAL_RCC_ClockConfig+0x260>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f003 030f 	and.w	r3, r3, #15
 80054a2:	683a      	ldr	r2, [r7, #0]
 80054a4:	429a      	cmp	r2, r3
 80054a6:	d001      	beq.n	80054ac <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80054a8:	2301      	movs	r3, #1
 80054aa:	e106      	b.n	80056ba <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f003 0301 	and.w	r3, r3, #1
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d073      	beq.n	80055a0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	685b      	ldr	r3, [r3, #4]
 80054bc:	2b03      	cmp	r3, #3
 80054be:	d129      	bne.n	8005514 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80054c0:	4b81      	ldr	r3, [pc, #516]	@ (80056c8 <HAL_RCC_ClockConfig+0x264>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d101      	bne.n	80054d0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80054cc:	2301      	movs	r3, #1
 80054ce:	e0f4      	b.n	80056ba <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80054d0:	f000 f99e 	bl	8005810 <RCC_GetSysClockFreqFromPLLSource>
 80054d4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80054d6:	693b      	ldr	r3, [r7, #16]
 80054d8:	4a7c      	ldr	r2, [pc, #496]	@ (80056cc <HAL_RCC_ClockConfig+0x268>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d93f      	bls.n	800555e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80054de:	4b7a      	ldr	r3, [pc, #488]	@ (80056c8 <HAL_RCC_ClockConfig+0x264>)
 80054e0:	689b      	ldr	r3, [r3, #8]
 80054e2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d009      	beq.n	80054fe <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d033      	beq.n	800555e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d12f      	bne.n	800555e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80054fe:	4b72      	ldr	r3, [pc, #456]	@ (80056c8 <HAL_RCC_ClockConfig+0x264>)
 8005500:	689b      	ldr	r3, [r3, #8]
 8005502:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005506:	4a70      	ldr	r2, [pc, #448]	@ (80056c8 <HAL_RCC_ClockConfig+0x264>)
 8005508:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800550c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800550e:	2380      	movs	r3, #128	@ 0x80
 8005510:	617b      	str	r3, [r7, #20]
 8005512:	e024      	b.n	800555e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	685b      	ldr	r3, [r3, #4]
 8005518:	2b02      	cmp	r3, #2
 800551a:	d107      	bne.n	800552c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800551c:	4b6a      	ldr	r3, [pc, #424]	@ (80056c8 <HAL_RCC_ClockConfig+0x264>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005524:	2b00      	cmp	r3, #0
 8005526:	d109      	bne.n	800553c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005528:	2301      	movs	r3, #1
 800552a:	e0c6      	b.n	80056ba <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800552c:	4b66      	ldr	r3, [pc, #408]	@ (80056c8 <HAL_RCC_ClockConfig+0x264>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005534:	2b00      	cmp	r3, #0
 8005536:	d101      	bne.n	800553c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005538:	2301      	movs	r3, #1
 800553a:	e0be      	b.n	80056ba <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800553c:	f000 f8ce 	bl	80056dc <HAL_RCC_GetSysClockFreq>
 8005540:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005542:	693b      	ldr	r3, [r7, #16]
 8005544:	4a61      	ldr	r2, [pc, #388]	@ (80056cc <HAL_RCC_ClockConfig+0x268>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d909      	bls.n	800555e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800554a:	4b5f      	ldr	r3, [pc, #380]	@ (80056c8 <HAL_RCC_ClockConfig+0x264>)
 800554c:	689b      	ldr	r3, [r3, #8]
 800554e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005552:	4a5d      	ldr	r2, [pc, #372]	@ (80056c8 <HAL_RCC_ClockConfig+0x264>)
 8005554:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005558:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800555a:	2380      	movs	r3, #128	@ 0x80
 800555c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800555e:	4b5a      	ldr	r3, [pc, #360]	@ (80056c8 <HAL_RCC_ClockConfig+0x264>)
 8005560:	689b      	ldr	r3, [r3, #8]
 8005562:	f023 0203 	bic.w	r2, r3, #3
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	685b      	ldr	r3, [r3, #4]
 800556a:	4957      	ldr	r1, [pc, #348]	@ (80056c8 <HAL_RCC_ClockConfig+0x264>)
 800556c:	4313      	orrs	r3, r2
 800556e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005570:	f7fd f86a 	bl	8002648 <HAL_GetTick>
 8005574:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005576:	e00a      	b.n	800558e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005578:	f7fd f866 	bl	8002648 <HAL_GetTick>
 800557c:	4602      	mov	r2, r0
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	1ad3      	subs	r3, r2, r3
 8005582:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005586:	4293      	cmp	r3, r2
 8005588:	d901      	bls.n	800558e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800558a:	2303      	movs	r3, #3
 800558c:	e095      	b.n	80056ba <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800558e:	4b4e      	ldr	r3, [pc, #312]	@ (80056c8 <HAL_RCC_ClockConfig+0x264>)
 8005590:	689b      	ldr	r3, [r3, #8]
 8005592:	f003 020c 	and.w	r2, r3, #12
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	685b      	ldr	r3, [r3, #4]
 800559a:	009b      	lsls	r3, r3, #2
 800559c:	429a      	cmp	r2, r3
 800559e:	d1eb      	bne.n	8005578 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f003 0302 	and.w	r3, r3, #2
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d023      	beq.n	80055f4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f003 0304 	and.w	r3, r3, #4
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d005      	beq.n	80055c4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80055b8:	4b43      	ldr	r3, [pc, #268]	@ (80056c8 <HAL_RCC_ClockConfig+0x264>)
 80055ba:	689b      	ldr	r3, [r3, #8]
 80055bc:	4a42      	ldr	r2, [pc, #264]	@ (80056c8 <HAL_RCC_ClockConfig+0x264>)
 80055be:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80055c2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f003 0308 	and.w	r3, r3, #8
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d007      	beq.n	80055e0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80055d0:	4b3d      	ldr	r3, [pc, #244]	@ (80056c8 <HAL_RCC_ClockConfig+0x264>)
 80055d2:	689b      	ldr	r3, [r3, #8]
 80055d4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80055d8:	4a3b      	ldr	r2, [pc, #236]	@ (80056c8 <HAL_RCC_ClockConfig+0x264>)
 80055da:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80055de:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80055e0:	4b39      	ldr	r3, [pc, #228]	@ (80056c8 <HAL_RCC_ClockConfig+0x264>)
 80055e2:	689b      	ldr	r3, [r3, #8]
 80055e4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	689b      	ldr	r3, [r3, #8]
 80055ec:	4936      	ldr	r1, [pc, #216]	@ (80056c8 <HAL_RCC_ClockConfig+0x264>)
 80055ee:	4313      	orrs	r3, r2
 80055f0:	608b      	str	r3, [r1, #8]
 80055f2:	e008      	b.n	8005606 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80055f4:	697b      	ldr	r3, [r7, #20]
 80055f6:	2b80      	cmp	r3, #128	@ 0x80
 80055f8:	d105      	bne.n	8005606 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80055fa:	4b33      	ldr	r3, [pc, #204]	@ (80056c8 <HAL_RCC_ClockConfig+0x264>)
 80055fc:	689b      	ldr	r3, [r3, #8]
 80055fe:	4a32      	ldr	r2, [pc, #200]	@ (80056c8 <HAL_RCC_ClockConfig+0x264>)
 8005600:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005604:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005606:	4b2f      	ldr	r3, [pc, #188]	@ (80056c4 <HAL_RCC_ClockConfig+0x260>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f003 030f 	and.w	r3, r3, #15
 800560e:	683a      	ldr	r2, [r7, #0]
 8005610:	429a      	cmp	r2, r3
 8005612:	d21d      	bcs.n	8005650 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005614:	4b2b      	ldr	r3, [pc, #172]	@ (80056c4 <HAL_RCC_ClockConfig+0x260>)
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f023 020f 	bic.w	r2, r3, #15
 800561c:	4929      	ldr	r1, [pc, #164]	@ (80056c4 <HAL_RCC_ClockConfig+0x260>)
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	4313      	orrs	r3, r2
 8005622:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005624:	f7fd f810 	bl	8002648 <HAL_GetTick>
 8005628:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800562a:	e00a      	b.n	8005642 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800562c:	f7fd f80c 	bl	8002648 <HAL_GetTick>
 8005630:	4602      	mov	r2, r0
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	1ad3      	subs	r3, r2, r3
 8005636:	f241 3288 	movw	r2, #5000	@ 0x1388
 800563a:	4293      	cmp	r3, r2
 800563c:	d901      	bls.n	8005642 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800563e:	2303      	movs	r3, #3
 8005640:	e03b      	b.n	80056ba <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005642:	4b20      	ldr	r3, [pc, #128]	@ (80056c4 <HAL_RCC_ClockConfig+0x260>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f003 030f 	and.w	r3, r3, #15
 800564a:	683a      	ldr	r2, [r7, #0]
 800564c:	429a      	cmp	r2, r3
 800564e:	d1ed      	bne.n	800562c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f003 0304 	and.w	r3, r3, #4
 8005658:	2b00      	cmp	r3, #0
 800565a:	d008      	beq.n	800566e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800565c:	4b1a      	ldr	r3, [pc, #104]	@ (80056c8 <HAL_RCC_ClockConfig+0x264>)
 800565e:	689b      	ldr	r3, [r3, #8]
 8005660:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	68db      	ldr	r3, [r3, #12]
 8005668:	4917      	ldr	r1, [pc, #92]	@ (80056c8 <HAL_RCC_ClockConfig+0x264>)
 800566a:	4313      	orrs	r3, r2
 800566c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f003 0308 	and.w	r3, r3, #8
 8005676:	2b00      	cmp	r3, #0
 8005678:	d009      	beq.n	800568e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800567a:	4b13      	ldr	r3, [pc, #76]	@ (80056c8 <HAL_RCC_ClockConfig+0x264>)
 800567c:	689b      	ldr	r3, [r3, #8]
 800567e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	691b      	ldr	r3, [r3, #16]
 8005686:	00db      	lsls	r3, r3, #3
 8005688:	490f      	ldr	r1, [pc, #60]	@ (80056c8 <HAL_RCC_ClockConfig+0x264>)
 800568a:	4313      	orrs	r3, r2
 800568c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800568e:	f000 f825 	bl	80056dc <HAL_RCC_GetSysClockFreq>
 8005692:	4602      	mov	r2, r0
 8005694:	4b0c      	ldr	r3, [pc, #48]	@ (80056c8 <HAL_RCC_ClockConfig+0x264>)
 8005696:	689b      	ldr	r3, [r3, #8]
 8005698:	091b      	lsrs	r3, r3, #4
 800569a:	f003 030f 	and.w	r3, r3, #15
 800569e:	490c      	ldr	r1, [pc, #48]	@ (80056d0 <HAL_RCC_ClockConfig+0x26c>)
 80056a0:	5ccb      	ldrb	r3, [r1, r3]
 80056a2:	f003 031f 	and.w	r3, r3, #31
 80056a6:	fa22 f303 	lsr.w	r3, r2, r3
 80056aa:	4a0a      	ldr	r2, [pc, #40]	@ (80056d4 <HAL_RCC_ClockConfig+0x270>)
 80056ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80056ae:	4b0a      	ldr	r3, [pc, #40]	@ (80056d8 <HAL_RCC_ClockConfig+0x274>)
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	4618      	mov	r0, r3
 80056b4:	f7fc ff7c 	bl	80025b0 <HAL_InitTick>
 80056b8:	4603      	mov	r3, r0
}
 80056ba:	4618      	mov	r0, r3
 80056bc:	3718      	adds	r7, #24
 80056be:	46bd      	mov	sp, r7
 80056c0:	bd80      	pop	{r7, pc}
 80056c2:	bf00      	nop
 80056c4:	40022000 	.word	0x40022000
 80056c8:	40021000 	.word	0x40021000
 80056cc:	04c4b400 	.word	0x04c4b400
 80056d0:	0800d568 	.word	0x0800d568
 80056d4:	200001e8 	.word	0x200001e8
 80056d8:	200001ec 	.word	0x200001ec

080056dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80056dc:	b480      	push	{r7}
 80056de:	b087      	sub	sp, #28
 80056e0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80056e2:	4b2c      	ldr	r3, [pc, #176]	@ (8005794 <HAL_RCC_GetSysClockFreq+0xb8>)
 80056e4:	689b      	ldr	r3, [r3, #8]
 80056e6:	f003 030c 	and.w	r3, r3, #12
 80056ea:	2b04      	cmp	r3, #4
 80056ec:	d102      	bne.n	80056f4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80056ee:	4b2a      	ldr	r3, [pc, #168]	@ (8005798 <HAL_RCC_GetSysClockFreq+0xbc>)
 80056f0:	613b      	str	r3, [r7, #16]
 80056f2:	e047      	b.n	8005784 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80056f4:	4b27      	ldr	r3, [pc, #156]	@ (8005794 <HAL_RCC_GetSysClockFreq+0xb8>)
 80056f6:	689b      	ldr	r3, [r3, #8]
 80056f8:	f003 030c 	and.w	r3, r3, #12
 80056fc:	2b08      	cmp	r3, #8
 80056fe:	d102      	bne.n	8005706 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005700:	4b26      	ldr	r3, [pc, #152]	@ (800579c <HAL_RCC_GetSysClockFreq+0xc0>)
 8005702:	613b      	str	r3, [r7, #16]
 8005704:	e03e      	b.n	8005784 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005706:	4b23      	ldr	r3, [pc, #140]	@ (8005794 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005708:	689b      	ldr	r3, [r3, #8]
 800570a:	f003 030c 	and.w	r3, r3, #12
 800570e:	2b0c      	cmp	r3, #12
 8005710:	d136      	bne.n	8005780 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005712:	4b20      	ldr	r3, [pc, #128]	@ (8005794 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005714:	68db      	ldr	r3, [r3, #12]
 8005716:	f003 0303 	and.w	r3, r3, #3
 800571a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800571c:	4b1d      	ldr	r3, [pc, #116]	@ (8005794 <HAL_RCC_GetSysClockFreq+0xb8>)
 800571e:	68db      	ldr	r3, [r3, #12]
 8005720:	091b      	lsrs	r3, r3, #4
 8005722:	f003 030f 	and.w	r3, r3, #15
 8005726:	3301      	adds	r3, #1
 8005728:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	2b03      	cmp	r3, #3
 800572e:	d10c      	bne.n	800574a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005730:	4a1a      	ldr	r2, [pc, #104]	@ (800579c <HAL_RCC_GetSysClockFreq+0xc0>)
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	fbb2 f3f3 	udiv	r3, r2, r3
 8005738:	4a16      	ldr	r2, [pc, #88]	@ (8005794 <HAL_RCC_GetSysClockFreq+0xb8>)
 800573a:	68d2      	ldr	r2, [r2, #12]
 800573c:	0a12      	lsrs	r2, r2, #8
 800573e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005742:	fb02 f303 	mul.w	r3, r2, r3
 8005746:	617b      	str	r3, [r7, #20]
      break;
 8005748:	e00c      	b.n	8005764 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800574a:	4a13      	ldr	r2, [pc, #76]	@ (8005798 <HAL_RCC_GetSysClockFreq+0xbc>)
 800574c:	68bb      	ldr	r3, [r7, #8]
 800574e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005752:	4a10      	ldr	r2, [pc, #64]	@ (8005794 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005754:	68d2      	ldr	r2, [r2, #12]
 8005756:	0a12      	lsrs	r2, r2, #8
 8005758:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800575c:	fb02 f303 	mul.w	r3, r2, r3
 8005760:	617b      	str	r3, [r7, #20]
      break;
 8005762:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005764:	4b0b      	ldr	r3, [pc, #44]	@ (8005794 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005766:	68db      	ldr	r3, [r3, #12]
 8005768:	0e5b      	lsrs	r3, r3, #25
 800576a:	f003 0303 	and.w	r3, r3, #3
 800576e:	3301      	adds	r3, #1
 8005770:	005b      	lsls	r3, r3, #1
 8005772:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005774:	697a      	ldr	r2, [r7, #20]
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	fbb2 f3f3 	udiv	r3, r2, r3
 800577c:	613b      	str	r3, [r7, #16]
 800577e:	e001      	b.n	8005784 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005780:	2300      	movs	r3, #0
 8005782:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005784:	693b      	ldr	r3, [r7, #16]
}
 8005786:	4618      	mov	r0, r3
 8005788:	371c      	adds	r7, #28
 800578a:	46bd      	mov	sp, r7
 800578c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005790:	4770      	bx	lr
 8005792:	bf00      	nop
 8005794:	40021000 	.word	0x40021000
 8005798:	00f42400 	.word	0x00f42400
 800579c:	016e3600 	.word	0x016e3600

080057a0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80057a0:	b480      	push	{r7}
 80057a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80057a4:	4b03      	ldr	r3, [pc, #12]	@ (80057b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80057a6:	681b      	ldr	r3, [r3, #0]
}
 80057a8:	4618      	mov	r0, r3
 80057aa:	46bd      	mov	sp, r7
 80057ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b0:	4770      	bx	lr
 80057b2:	bf00      	nop
 80057b4:	200001e8 	.word	0x200001e8

080057b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80057bc:	f7ff fff0 	bl	80057a0 <HAL_RCC_GetHCLKFreq>
 80057c0:	4602      	mov	r2, r0
 80057c2:	4b06      	ldr	r3, [pc, #24]	@ (80057dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80057c4:	689b      	ldr	r3, [r3, #8]
 80057c6:	0a1b      	lsrs	r3, r3, #8
 80057c8:	f003 0307 	and.w	r3, r3, #7
 80057cc:	4904      	ldr	r1, [pc, #16]	@ (80057e0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80057ce:	5ccb      	ldrb	r3, [r1, r3]
 80057d0:	f003 031f 	and.w	r3, r3, #31
 80057d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80057d8:	4618      	mov	r0, r3
 80057da:	bd80      	pop	{r7, pc}
 80057dc:	40021000 	.word	0x40021000
 80057e0:	0800d578 	.word	0x0800d578

080057e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80057e8:	f7ff ffda 	bl	80057a0 <HAL_RCC_GetHCLKFreq>
 80057ec:	4602      	mov	r2, r0
 80057ee:	4b06      	ldr	r3, [pc, #24]	@ (8005808 <HAL_RCC_GetPCLK2Freq+0x24>)
 80057f0:	689b      	ldr	r3, [r3, #8]
 80057f2:	0adb      	lsrs	r3, r3, #11
 80057f4:	f003 0307 	and.w	r3, r3, #7
 80057f8:	4904      	ldr	r1, [pc, #16]	@ (800580c <HAL_RCC_GetPCLK2Freq+0x28>)
 80057fa:	5ccb      	ldrb	r3, [r1, r3]
 80057fc:	f003 031f 	and.w	r3, r3, #31
 8005800:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005804:	4618      	mov	r0, r3
 8005806:	bd80      	pop	{r7, pc}
 8005808:	40021000 	.word	0x40021000
 800580c:	0800d578 	.word	0x0800d578

08005810 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005810:	b480      	push	{r7}
 8005812:	b087      	sub	sp, #28
 8005814:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005816:	4b1e      	ldr	r3, [pc, #120]	@ (8005890 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005818:	68db      	ldr	r3, [r3, #12]
 800581a:	f003 0303 	and.w	r3, r3, #3
 800581e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005820:	4b1b      	ldr	r3, [pc, #108]	@ (8005890 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005822:	68db      	ldr	r3, [r3, #12]
 8005824:	091b      	lsrs	r3, r3, #4
 8005826:	f003 030f 	and.w	r3, r3, #15
 800582a:	3301      	adds	r3, #1
 800582c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800582e:	693b      	ldr	r3, [r7, #16]
 8005830:	2b03      	cmp	r3, #3
 8005832:	d10c      	bne.n	800584e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005834:	4a17      	ldr	r2, [pc, #92]	@ (8005894 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	fbb2 f3f3 	udiv	r3, r2, r3
 800583c:	4a14      	ldr	r2, [pc, #80]	@ (8005890 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800583e:	68d2      	ldr	r2, [r2, #12]
 8005840:	0a12      	lsrs	r2, r2, #8
 8005842:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005846:	fb02 f303 	mul.w	r3, r2, r3
 800584a:	617b      	str	r3, [r7, #20]
    break;
 800584c:	e00c      	b.n	8005868 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800584e:	4a12      	ldr	r2, [pc, #72]	@ (8005898 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	fbb2 f3f3 	udiv	r3, r2, r3
 8005856:	4a0e      	ldr	r2, [pc, #56]	@ (8005890 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005858:	68d2      	ldr	r2, [r2, #12]
 800585a:	0a12      	lsrs	r2, r2, #8
 800585c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005860:	fb02 f303 	mul.w	r3, r2, r3
 8005864:	617b      	str	r3, [r7, #20]
    break;
 8005866:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005868:	4b09      	ldr	r3, [pc, #36]	@ (8005890 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800586a:	68db      	ldr	r3, [r3, #12]
 800586c:	0e5b      	lsrs	r3, r3, #25
 800586e:	f003 0303 	and.w	r3, r3, #3
 8005872:	3301      	adds	r3, #1
 8005874:	005b      	lsls	r3, r3, #1
 8005876:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005878:	697a      	ldr	r2, [r7, #20]
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005880:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005882:	687b      	ldr	r3, [r7, #4]
}
 8005884:	4618      	mov	r0, r3
 8005886:	371c      	adds	r7, #28
 8005888:	46bd      	mov	sp, r7
 800588a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588e:	4770      	bx	lr
 8005890:	40021000 	.word	0x40021000
 8005894:	016e3600 	.word	0x016e3600
 8005898:	00f42400 	.word	0x00f42400

0800589c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b086      	sub	sp, #24
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80058a4:	2300      	movs	r3, #0
 80058a6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80058a8:	2300      	movs	r3, #0
 80058aa:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	f000 8098 	beq.w	80059ea <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80058ba:	2300      	movs	r3, #0
 80058bc:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80058be:	4b43      	ldr	r3, [pc, #268]	@ (80059cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80058c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d10d      	bne.n	80058e6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80058ca:	4b40      	ldr	r3, [pc, #256]	@ (80059cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80058cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058ce:	4a3f      	ldr	r2, [pc, #252]	@ (80059cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80058d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80058d4:	6593      	str	r3, [r2, #88]	@ 0x58
 80058d6:	4b3d      	ldr	r3, [pc, #244]	@ (80059cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80058d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80058de:	60bb      	str	r3, [r7, #8]
 80058e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80058e2:	2301      	movs	r3, #1
 80058e4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80058e6:	4b3a      	ldr	r3, [pc, #232]	@ (80059d0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	4a39      	ldr	r2, [pc, #228]	@ (80059d0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80058ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80058f0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80058f2:	f7fc fea9 	bl	8002648 <HAL_GetTick>
 80058f6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80058f8:	e009      	b.n	800590e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80058fa:	f7fc fea5 	bl	8002648 <HAL_GetTick>
 80058fe:	4602      	mov	r2, r0
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	1ad3      	subs	r3, r2, r3
 8005904:	2b02      	cmp	r3, #2
 8005906:	d902      	bls.n	800590e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005908:	2303      	movs	r3, #3
 800590a:	74fb      	strb	r3, [r7, #19]
        break;
 800590c:	e005      	b.n	800591a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800590e:	4b30      	ldr	r3, [pc, #192]	@ (80059d0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005916:	2b00      	cmp	r3, #0
 8005918:	d0ef      	beq.n	80058fa <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800591a:	7cfb      	ldrb	r3, [r7, #19]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d159      	bne.n	80059d4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005920:	4b2a      	ldr	r3, [pc, #168]	@ (80059cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005922:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005926:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800592a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800592c:	697b      	ldr	r3, [r7, #20]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d01e      	beq.n	8005970 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005936:	697a      	ldr	r2, [r7, #20]
 8005938:	429a      	cmp	r2, r3
 800593a:	d019      	beq.n	8005970 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800593c:	4b23      	ldr	r3, [pc, #140]	@ (80059cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800593e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005942:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005946:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005948:	4b20      	ldr	r3, [pc, #128]	@ (80059cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800594a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800594e:	4a1f      	ldr	r2, [pc, #124]	@ (80059cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005950:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005954:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005958:	4b1c      	ldr	r3, [pc, #112]	@ (80059cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800595a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800595e:	4a1b      	ldr	r2, [pc, #108]	@ (80059cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005960:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005964:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005968:	4a18      	ldr	r2, [pc, #96]	@ (80059cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800596a:	697b      	ldr	r3, [r7, #20]
 800596c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005970:	697b      	ldr	r3, [r7, #20]
 8005972:	f003 0301 	and.w	r3, r3, #1
 8005976:	2b00      	cmp	r3, #0
 8005978:	d016      	beq.n	80059a8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800597a:	f7fc fe65 	bl	8002648 <HAL_GetTick>
 800597e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005980:	e00b      	b.n	800599a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005982:	f7fc fe61 	bl	8002648 <HAL_GetTick>
 8005986:	4602      	mov	r2, r0
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	1ad3      	subs	r3, r2, r3
 800598c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005990:	4293      	cmp	r3, r2
 8005992:	d902      	bls.n	800599a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005994:	2303      	movs	r3, #3
 8005996:	74fb      	strb	r3, [r7, #19]
            break;
 8005998:	e006      	b.n	80059a8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800599a:	4b0c      	ldr	r3, [pc, #48]	@ (80059cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800599c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059a0:	f003 0302 	and.w	r3, r3, #2
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d0ec      	beq.n	8005982 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80059a8:	7cfb      	ldrb	r3, [r7, #19]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d10b      	bne.n	80059c6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80059ae:	4b07      	ldr	r3, [pc, #28]	@ (80059cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80059b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059b4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059bc:	4903      	ldr	r1, [pc, #12]	@ (80059cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80059be:	4313      	orrs	r3, r2
 80059c0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80059c4:	e008      	b.n	80059d8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80059c6:	7cfb      	ldrb	r3, [r7, #19]
 80059c8:	74bb      	strb	r3, [r7, #18]
 80059ca:	e005      	b.n	80059d8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80059cc:	40021000 	.word	0x40021000
 80059d0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059d4:	7cfb      	ldrb	r3, [r7, #19]
 80059d6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80059d8:	7c7b      	ldrb	r3, [r7, #17]
 80059da:	2b01      	cmp	r3, #1
 80059dc:	d105      	bne.n	80059ea <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80059de:	4ba6      	ldr	r3, [pc, #664]	@ (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059e2:	4aa5      	ldr	r2, [pc, #660]	@ (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059e4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80059e8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f003 0301 	and.w	r3, r3, #1
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d00a      	beq.n	8005a0c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80059f6:	4ba0      	ldr	r3, [pc, #640]	@ (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059fc:	f023 0203 	bic.w	r2, r3, #3
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	685b      	ldr	r3, [r3, #4]
 8005a04:	499c      	ldr	r1, [pc, #624]	@ (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a06:	4313      	orrs	r3, r2
 8005a08:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f003 0302 	and.w	r3, r3, #2
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d00a      	beq.n	8005a2e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005a18:	4b97      	ldr	r3, [pc, #604]	@ (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a1e:	f023 020c 	bic.w	r2, r3, #12
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	689b      	ldr	r3, [r3, #8]
 8005a26:	4994      	ldr	r1, [pc, #592]	@ (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a28:	4313      	orrs	r3, r2
 8005a2a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f003 0304 	and.w	r3, r3, #4
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d00a      	beq.n	8005a50 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005a3a:	4b8f      	ldr	r3, [pc, #572]	@ (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a40:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	68db      	ldr	r3, [r3, #12]
 8005a48:	498b      	ldr	r1, [pc, #556]	@ (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a4a:	4313      	orrs	r3, r2
 8005a4c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f003 0308 	and.w	r3, r3, #8
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d00a      	beq.n	8005a72 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005a5c:	4b86      	ldr	r3, [pc, #536]	@ (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a62:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	691b      	ldr	r3, [r3, #16]
 8005a6a:	4983      	ldr	r1, [pc, #524]	@ (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a6c:	4313      	orrs	r3, r2
 8005a6e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f003 0320 	and.w	r3, r3, #32
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d00a      	beq.n	8005a94 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005a7e:	4b7e      	ldr	r3, [pc, #504]	@ (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a84:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	695b      	ldr	r3, [r3, #20]
 8005a8c:	497a      	ldr	r1, [pc, #488]	@ (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a8e:	4313      	orrs	r3, r2
 8005a90:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d00a      	beq.n	8005ab6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005aa0:	4b75      	ldr	r3, [pc, #468]	@ (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005aa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005aa6:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	699b      	ldr	r3, [r3, #24]
 8005aae:	4972      	ldr	r1, [pc, #456]	@ (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ab0:	4313      	orrs	r3, r2
 8005ab2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d00a      	beq.n	8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005ac2:	4b6d      	ldr	r3, [pc, #436]	@ (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ac4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ac8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	69db      	ldr	r3, [r3, #28]
 8005ad0:	4969      	ldr	r1, [pc, #420]	@ (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ad2:	4313      	orrs	r3, r2
 8005ad4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d00a      	beq.n	8005afa <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005ae4:	4b64      	ldr	r3, [pc, #400]	@ (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ae6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005aea:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6a1b      	ldr	r3, [r3, #32]
 8005af2:	4961      	ldr	r1, [pc, #388]	@ (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005af4:	4313      	orrs	r3, r2
 8005af6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d00a      	beq.n	8005b1c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005b06:	4b5c      	ldr	r3, [pc, #368]	@ (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b0c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b14:	4958      	ldr	r1, [pc, #352]	@ (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b16:	4313      	orrs	r3, r2
 8005b18:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d015      	beq.n	8005b54 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005b28:	4b53      	ldr	r3, [pc, #332]	@ (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b2e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b36:	4950      	ldr	r1, [pc, #320]	@ (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b38:	4313      	orrs	r3, r2
 8005b3a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b42:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005b46:	d105      	bne.n	8005b54 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b48:	4b4b      	ldr	r3, [pc, #300]	@ (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b4a:	68db      	ldr	r3, [r3, #12]
 8005b4c:	4a4a      	ldr	r2, [pc, #296]	@ (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b4e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005b52:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d015      	beq.n	8005b8c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005b60:	4b45      	ldr	r3, [pc, #276]	@ (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b66:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b6e:	4942      	ldr	r1, [pc, #264]	@ (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b70:	4313      	orrs	r3, r2
 8005b72:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b7a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005b7e:	d105      	bne.n	8005b8c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b80:	4b3d      	ldr	r3, [pc, #244]	@ (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b82:	68db      	ldr	r3, [r3, #12]
 8005b84:	4a3c      	ldr	r2, [pc, #240]	@ (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b86:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005b8a:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d015      	beq.n	8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005b98:	4b37      	ldr	r3, [pc, #220]	@ (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b9e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ba6:	4934      	ldr	r1, [pc, #208]	@ (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ba8:	4313      	orrs	r3, r2
 8005baa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bb2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005bb6:	d105      	bne.n	8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005bb8:	4b2f      	ldr	r3, [pc, #188]	@ (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005bba:	68db      	ldr	r3, [r3, #12]
 8005bbc:	4a2e      	ldr	r2, [pc, #184]	@ (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005bbe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005bc2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d015      	beq.n	8005bfc <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005bd0:	4b29      	ldr	r3, [pc, #164]	@ (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005bd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005bd6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005bde:	4926      	ldr	r1, [pc, #152]	@ (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005be0:	4313      	orrs	r3, r2
 8005be2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005bea:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005bee:	d105      	bne.n	8005bfc <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005bf0:	4b21      	ldr	r3, [pc, #132]	@ (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005bf2:	68db      	ldr	r3, [r3, #12]
 8005bf4:	4a20      	ldr	r2, [pc, #128]	@ (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005bf6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005bfa:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d015      	beq.n	8005c34 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005c08:	4b1b      	ldr	r3, [pc, #108]	@ (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c0e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c16:	4918      	ldr	r1, [pc, #96]	@ (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c18:	4313      	orrs	r3, r2
 8005c1a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c22:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005c26:	d105      	bne.n	8005c34 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005c28:	4b13      	ldr	r3, [pc, #76]	@ (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c2a:	68db      	ldr	r3, [r3, #12]
 8005c2c:	4a12      	ldr	r2, [pc, #72]	@ (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c2e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005c32:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d015      	beq.n	8005c6c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005c40:	4b0d      	ldr	r3, [pc, #52]	@ (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c46:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c4e:	490a      	ldr	r1, [pc, #40]	@ (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c50:	4313      	orrs	r3, r2
 8005c52:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c5a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005c5e:	d105      	bne.n	8005c6c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005c60:	4b05      	ldr	r3, [pc, #20]	@ (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c62:	68db      	ldr	r3, [r3, #12]
 8005c64:	4a04      	ldr	r2, [pc, #16]	@ (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c66:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005c6a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005c6c:	7cbb      	ldrb	r3, [r7, #18]
}
 8005c6e:	4618      	mov	r0, r3
 8005c70:	3718      	adds	r7, #24
 8005c72:	46bd      	mov	sp, r7
 8005c74:	bd80      	pop	{r7, pc}
 8005c76:	bf00      	nop
 8005c78:	40021000 	.word	0x40021000

08005c7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b082      	sub	sp, #8
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d101      	bne.n	8005c8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	e049      	b.n	8005d22 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005c94:	b2db      	uxtb	r3, r3
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d106      	bne.n	8005ca8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005ca2:	6878      	ldr	r0, [r7, #4]
 8005ca4:	f7fc fa82 	bl	80021ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2202      	movs	r2, #2
 8005cac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681a      	ldr	r2, [r3, #0]
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	3304      	adds	r3, #4
 8005cb8:	4619      	mov	r1, r3
 8005cba:	4610      	mov	r0, r2
 8005cbc:	f000 fb12 	bl	80062e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2201      	movs	r2, #1
 8005cc4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2201      	movs	r2, #1
 8005ccc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2201      	movs	r2, #1
 8005cd4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2201      	movs	r2, #1
 8005cdc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2201      	movs	r2, #1
 8005ce4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2201      	movs	r2, #1
 8005cec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2201      	movs	r2, #1
 8005cf4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2201      	movs	r2, #1
 8005cfc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2201      	movs	r2, #1
 8005d04:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2201      	movs	r2, #1
 8005d0c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2201      	movs	r2, #1
 8005d14:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2201      	movs	r2, #1
 8005d1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005d20:	2300      	movs	r3, #0
}
 8005d22:	4618      	mov	r0, r3
 8005d24:	3708      	adds	r7, #8
 8005d26:	46bd      	mov	sp, r7
 8005d28:	bd80      	pop	{r7, pc}
	...

08005d2c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005d2c:	b480      	push	{r7}
 8005d2e:	b085      	sub	sp, #20
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d3a:	b2db      	uxtb	r3, r3
 8005d3c:	2b01      	cmp	r3, #1
 8005d3e:	d001      	beq.n	8005d44 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005d40:	2301      	movs	r3, #1
 8005d42:	e04a      	b.n	8005dda <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2202      	movs	r2, #2
 8005d48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	68da      	ldr	r2, [r3, #12]
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f042 0201 	orr.w	r2, r2, #1
 8005d5a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	4a21      	ldr	r2, [pc, #132]	@ (8005de8 <HAL_TIM_Base_Start_IT+0xbc>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d018      	beq.n	8005d98 <HAL_TIM_Base_Start_IT+0x6c>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d6e:	d013      	beq.n	8005d98 <HAL_TIM_Base_Start_IT+0x6c>
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4a1d      	ldr	r2, [pc, #116]	@ (8005dec <HAL_TIM_Base_Start_IT+0xc0>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d00e      	beq.n	8005d98 <HAL_TIM_Base_Start_IT+0x6c>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	4a1c      	ldr	r2, [pc, #112]	@ (8005df0 <HAL_TIM_Base_Start_IT+0xc4>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d009      	beq.n	8005d98 <HAL_TIM_Base_Start_IT+0x6c>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	4a1a      	ldr	r2, [pc, #104]	@ (8005df4 <HAL_TIM_Base_Start_IT+0xc8>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d004      	beq.n	8005d98 <HAL_TIM_Base_Start_IT+0x6c>
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	4a19      	ldr	r2, [pc, #100]	@ (8005df8 <HAL_TIM_Base_Start_IT+0xcc>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d115      	bne.n	8005dc4 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	689a      	ldr	r2, [r3, #8]
 8005d9e:	4b17      	ldr	r3, [pc, #92]	@ (8005dfc <HAL_TIM_Base_Start_IT+0xd0>)
 8005da0:	4013      	ands	r3, r2
 8005da2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	2b06      	cmp	r3, #6
 8005da8:	d015      	beq.n	8005dd6 <HAL_TIM_Base_Start_IT+0xaa>
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005db0:	d011      	beq.n	8005dd6 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	681a      	ldr	r2, [r3, #0]
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f042 0201 	orr.w	r2, r2, #1
 8005dc0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005dc2:	e008      	b.n	8005dd6 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	681a      	ldr	r2, [r3, #0]
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f042 0201 	orr.w	r2, r2, #1
 8005dd2:	601a      	str	r2, [r3, #0]
 8005dd4:	e000      	b.n	8005dd8 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005dd6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005dd8:	2300      	movs	r3, #0
}
 8005dda:	4618      	mov	r0, r3
 8005ddc:	3714      	adds	r7, #20
 8005dde:	46bd      	mov	sp, r7
 8005de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de4:	4770      	bx	lr
 8005de6:	bf00      	nop
 8005de8:	40012c00 	.word	0x40012c00
 8005dec:	40000400 	.word	0x40000400
 8005df0:	40000800 	.word	0x40000800
 8005df4:	40013400 	.word	0x40013400
 8005df8:	40014000 	.word	0x40014000
 8005dfc:	00010007 	.word	0x00010007

08005e00 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b084      	sub	sp, #16
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	68db      	ldr	r3, [r3, #12]
 8005e0e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	691b      	ldr	r3, [r3, #16]
 8005e16:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	f003 0302 	and.w	r3, r3, #2
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d020      	beq.n	8005e64 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	f003 0302 	and.w	r3, r3, #2
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d01b      	beq.n	8005e64 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f06f 0202 	mvn.w	r2, #2
 8005e34:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	2201      	movs	r2, #1
 8005e3a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	699b      	ldr	r3, [r3, #24]
 8005e42:	f003 0303 	and.w	r3, r3, #3
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d003      	beq.n	8005e52 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005e4a:	6878      	ldr	r0, [r7, #4]
 8005e4c:	f000 fa2c 	bl	80062a8 <HAL_TIM_IC_CaptureCallback>
 8005e50:	e005      	b.n	8005e5e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e52:	6878      	ldr	r0, [r7, #4]
 8005e54:	f000 fa1e 	bl	8006294 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e58:	6878      	ldr	r0, [r7, #4]
 8005e5a:	f000 fa2f 	bl	80062bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2200      	movs	r2, #0
 8005e62:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005e64:	68bb      	ldr	r3, [r7, #8]
 8005e66:	f003 0304 	and.w	r3, r3, #4
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d020      	beq.n	8005eb0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	f003 0304 	and.w	r3, r3, #4
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d01b      	beq.n	8005eb0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f06f 0204 	mvn.w	r2, #4
 8005e80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2202      	movs	r2, #2
 8005e86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	699b      	ldr	r3, [r3, #24]
 8005e8e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d003      	beq.n	8005e9e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e96:	6878      	ldr	r0, [r7, #4]
 8005e98:	f000 fa06 	bl	80062a8 <HAL_TIM_IC_CaptureCallback>
 8005e9c:	e005      	b.n	8005eaa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e9e:	6878      	ldr	r0, [r7, #4]
 8005ea0:	f000 f9f8 	bl	8006294 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ea4:	6878      	ldr	r0, [r7, #4]
 8005ea6:	f000 fa09 	bl	80062bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2200      	movs	r2, #0
 8005eae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005eb0:	68bb      	ldr	r3, [r7, #8]
 8005eb2:	f003 0308 	and.w	r3, r3, #8
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d020      	beq.n	8005efc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	f003 0308 	and.w	r3, r3, #8
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d01b      	beq.n	8005efc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f06f 0208 	mvn.w	r2, #8
 8005ecc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2204      	movs	r2, #4
 8005ed2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	69db      	ldr	r3, [r3, #28]
 8005eda:	f003 0303 	and.w	r3, r3, #3
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d003      	beq.n	8005eea <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ee2:	6878      	ldr	r0, [r7, #4]
 8005ee4:	f000 f9e0 	bl	80062a8 <HAL_TIM_IC_CaptureCallback>
 8005ee8:	e005      	b.n	8005ef6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005eea:	6878      	ldr	r0, [r7, #4]
 8005eec:	f000 f9d2 	bl	8006294 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ef0:	6878      	ldr	r0, [r7, #4]
 8005ef2:	f000 f9e3 	bl	80062bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2200      	movs	r2, #0
 8005efa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	f003 0310 	and.w	r3, r3, #16
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d020      	beq.n	8005f48 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	f003 0310 	and.w	r3, r3, #16
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d01b      	beq.n	8005f48 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f06f 0210 	mvn.w	r2, #16
 8005f18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2208      	movs	r2, #8
 8005f1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	69db      	ldr	r3, [r3, #28]
 8005f26:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d003      	beq.n	8005f36 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f2e:	6878      	ldr	r0, [r7, #4]
 8005f30:	f000 f9ba 	bl	80062a8 <HAL_TIM_IC_CaptureCallback>
 8005f34:	e005      	b.n	8005f42 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f36:	6878      	ldr	r0, [r7, #4]
 8005f38:	f000 f9ac 	bl	8006294 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f3c:	6878      	ldr	r0, [r7, #4]
 8005f3e:	f000 f9bd 	bl	80062bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2200      	movs	r2, #0
 8005f46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	f003 0301 	and.w	r3, r3, #1
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d00c      	beq.n	8005f6c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	f003 0301 	and.w	r3, r3, #1
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d007      	beq.n	8005f6c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f06f 0201 	mvn.w	r2, #1
 8005f64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005f66:	6878      	ldr	r0, [r7, #4]
 8005f68:	f7fb ff64 	bl	8001e34 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005f6c:	68bb      	ldr	r3, [r7, #8]
 8005f6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d104      	bne.n	8005f80 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005f76:	68bb      	ldr	r3, [r7, #8]
 8005f78:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d00c      	beq.n	8005f9a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d007      	beq.n	8005f9a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005f92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005f94:	6878      	ldr	r0, [r7, #4]
 8005f96:	f000 fb69 	bl	800666c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005f9a:	68bb      	ldr	r3, [r7, #8]
 8005f9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d00c      	beq.n	8005fbe <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d007      	beq.n	8005fbe <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005fb6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005fb8:	6878      	ldr	r0, [r7, #4]
 8005fba:	f000 fb61 	bl	8006680 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005fbe:	68bb      	ldr	r3, [r7, #8]
 8005fc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d00c      	beq.n	8005fe2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d007      	beq.n	8005fe2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005fda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005fdc:	6878      	ldr	r0, [r7, #4]
 8005fde:	f000 f977 	bl	80062d0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005fe2:	68bb      	ldr	r3, [r7, #8]
 8005fe4:	f003 0320 	and.w	r3, r3, #32
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d00c      	beq.n	8006006 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	f003 0320 	and.w	r3, r3, #32
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d007      	beq.n	8006006 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f06f 0220 	mvn.w	r2, #32
 8005ffe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006000:	6878      	ldr	r0, [r7, #4]
 8006002:	f000 fb29 	bl	8006658 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8006006:	68bb      	ldr	r3, [r7, #8]
 8006008:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800600c:	2b00      	cmp	r3, #0
 800600e:	d00c      	beq.n	800602a <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006016:	2b00      	cmp	r3, #0
 8006018:	d007      	beq.n	800602a <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8006022:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8006024:	6878      	ldr	r0, [r7, #4]
 8006026:	f000 fb35 	bl	8006694 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006030:	2b00      	cmp	r3, #0
 8006032:	d00c      	beq.n	800604e <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800603a:	2b00      	cmp	r3, #0
 800603c:	d007      	beq.n	800604e <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8006046:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8006048:	6878      	ldr	r0, [r7, #4]
 800604a:	f000 fb2d 	bl	80066a8 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800604e:	68bb      	ldr	r3, [r7, #8]
 8006050:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006054:	2b00      	cmp	r3, #0
 8006056:	d00c      	beq.n	8006072 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800605e:	2b00      	cmp	r3, #0
 8006060:	d007      	beq.n	8006072 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800606a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800606c:	6878      	ldr	r0, [r7, #4]
 800606e:	f000 fb25 	bl	80066bc <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006078:	2b00      	cmp	r3, #0
 800607a:	d00c      	beq.n	8006096 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006082:	2b00      	cmp	r3, #0
 8006084:	d007      	beq.n	8006096 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800608e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8006090:	6878      	ldr	r0, [r7, #4]
 8006092:	f000 fb1d 	bl	80066d0 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006096:	bf00      	nop
 8006098:	3710      	adds	r7, #16
 800609a:	46bd      	mov	sp, r7
 800609c:	bd80      	pop	{r7, pc}
	...

080060a0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b084      	sub	sp, #16
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
 80060a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80060aa:	2300      	movs	r3, #0
 80060ac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80060b4:	2b01      	cmp	r3, #1
 80060b6:	d101      	bne.n	80060bc <HAL_TIM_ConfigClockSource+0x1c>
 80060b8:	2302      	movs	r3, #2
 80060ba:	e0de      	b.n	800627a <HAL_TIM_ConfigClockSource+0x1da>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2201      	movs	r2, #1
 80060c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2202      	movs	r2, #2
 80060c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	689b      	ldr	r3, [r3, #8]
 80060d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80060d4:	68bb      	ldr	r3, [r7, #8]
 80060d6:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 80060da:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80060de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80060e0:	68bb      	ldr	r3, [r7, #8]
 80060e2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80060e6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	68ba      	ldr	r2, [r7, #8]
 80060ee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4a63      	ldr	r2, [pc, #396]	@ (8006284 <HAL_TIM_ConfigClockSource+0x1e4>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	f000 80a9 	beq.w	800624e <HAL_TIM_ConfigClockSource+0x1ae>
 80060fc:	4a61      	ldr	r2, [pc, #388]	@ (8006284 <HAL_TIM_ConfigClockSource+0x1e4>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	f200 80ae 	bhi.w	8006260 <HAL_TIM_ConfigClockSource+0x1c0>
 8006104:	4a60      	ldr	r2, [pc, #384]	@ (8006288 <HAL_TIM_ConfigClockSource+0x1e8>)
 8006106:	4293      	cmp	r3, r2
 8006108:	f000 80a1 	beq.w	800624e <HAL_TIM_ConfigClockSource+0x1ae>
 800610c:	4a5e      	ldr	r2, [pc, #376]	@ (8006288 <HAL_TIM_ConfigClockSource+0x1e8>)
 800610e:	4293      	cmp	r3, r2
 8006110:	f200 80a6 	bhi.w	8006260 <HAL_TIM_ConfigClockSource+0x1c0>
 8006114:	4a5d      	ldr	r2, [pc, #372]	@ (800628c <HAL_TIM_ConfigClockSource+0x1ec>)
 8006116:	4293      	cmp	r3, r2
 8006118:	f000 8099 	beq.w	800624e <HAL_TIM_ConfigClockSource+0x1ae>
 800611c:	4a5b      	ldr	r2, [pc, #364]	@ (800628c <HAL_TIM_ConfigClockSource+0x1ec>)
 800611e:	4293      	cmp	r3, r2
 8006120:	f200 809e 	bhi.w	8006260 <HAL_TIM_ConfigClockSource+0x1c0>
 8006124:	4a5a      	ldr	r2, [pc, #360]	@ (8006290 <HAL_TIM_ConfigClockSource+0x1f0>)
 8006126:	4293      	cmp	r3, r2
 8006128:	f000 8091 	beq.w	800624e <HAL_TIM_ConfigClockSource+0x1ae>
 800612c:	4a58      	ldr	r2, [pc, #352]	@ (8006290 <HAL_TIM_ConfigClockSource+0x1f0>)
 800612e:	4293      	cmp	r3, r2
 8006130:	f200 8096 	bhi.w	8006260 <HAL_TIM_ConfigClockSource+0x1c0>
 8006134:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006138:	f000 8089 	beq.w	800624e <HAL_TIM_ConfigClockSource+0x1ae>
 800613c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006140:	f200 808e 	bhi.w	8006260 <HAL_TIM_ConfigClockSource+0x1c0>
 8006144:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006148:	d03e      	beq.n	80061c8 <HAL_TIM_ConfigClockSource+0x128>
 800614a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800614e:	f200 8087 	bhi.w	8006260 <HAL_TIM_ConfigClockSource+0x1c0>
 8006152:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006156:	f000 8086 	beq.w	8006266 <HAL_TIM_ConfigClockSource+0x1c6>
 800615a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800615e:	d87f      	bhi.n	8006260 <HAL_TIM_ConfigClockSource+0x1c0>
 8006160:	2b70      	cmp	r3, #112	@ 0x70
 8006162:	d01a      	beq.n	800619a <HAL_TIM_ConfigClockSource+0xfa>
 8006164:	2b70      	cmp	r3, #112	@ 0x70
 8006166:	d87b      	bhi.n	8006260 <HAL_TIM_ConfigClockSource+0x1c0>
 8006168:	2b60      	cmp	r3, #96	@ 0x60
 800616a:	d050      	beq.n	800620e <HAL_TIM_ConfigClockSource+0x16e>
 800616c:	2b60      	cmp	r3, #96	@ 0x60
 800616e:	d877      	bhi.n	8006260 <HAL_TIM_ConfigClockSource+0x1c0>
 8006170:	2b50      	cmp	r3, #80	@ 0x50
 8006172:	d03c      	beq.n	80061ee <HAL_TIM_ConfigClockSource+0x14e>
 8006174:	2b50      	cmp	r3, #80	@ 0x50
 8006176:	d873      	bhi.n	8006260 <HAL_TIM_ConfigClockSource+0x1c0>
 8006178:	2b40      	cmp	r3, #64	@ 0x40
 800617a:	d058      	beq.n	800622e <HAL_TIM_ConfigClockSource+0x18e>
 800617c:	2b40      	cmp	r3, #64	@ 0x40
 800617e:	d86f      	bhi.n	8006260 <HAL_TIM_ConfigClockSource+0x1c0>
 8006180:	2b30      	cmp	r3, #48	@ 0x30
 8006182:	d064      	beq.n	800624e <HAL_TIM_ConfigClockSource+0x1ae>
 8006184:	2b30      	cmp	r3, #48	@ 0x30
 8006186:	d86b      	bhi.n	8006260 <HAL_TIM_ConfigClockSource+0x1c0>
 8006188:	2b20      	cmp	r3, #32
 800618a:	d060      	beq.n	800624e <HAL_TIM_ConfigClockSource+0x1ae>
 800618c:	2b20      	cmp	r3, #32
 800618e:	d867      	bhi.n	8006260 <HAL_TIM_ConfigClockSource+0x1c0>
 8006190:	2b00      	cmp	r3, #0
 8006192:	d05c      	beq.n	800624e <HAL_TIM_ConfigClockSource+0x1ae>
 8006194:	2b10      	cmp	r3, #16
 8006196:	d05a      	beq.n	800624e <HAL_TIM_ConfigClockSource+0x1ae>
 8006198:	e062      	b.n	8006260 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80061aa:	f000 f9b3 	bl	8006514 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	689b      	ldr	r3, [r3, #8]
 80061b4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80061b6:	68bb      	ldr	r3, [r7, #8]
 80061b8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80061bc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	68ba      	ldr	r2, [r7, #8]
 80061c4:	609a      	str	r2, [r3, #8]
      break;
 80061c6:	e04f      	b.n	8006268 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80061d8:	f000 f99c 	bl	8006514 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	689a      	ldr	r2, [r3, #8]
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80061ea:	609a      	str	r2, [r3, #8]
      break;
 80061ec:	e03c      	b.n	8006268 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80061fa:	461a      	mov	r2, r3
 80061fc:	f000 f90e 	bl	800641c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	2150      	movs	r1, #80	@ 0x50
 8006206:	4618      	mov	r0, r3
 8006208:	f000 f967 	bl	80064da <TIM_ITRx_SetConfig>
      break;
 800620c:	e02c      	b.n	8006268 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800621a:	461a      	mov	r2, r3
 800621c:	f000 f92d 	bl	800647a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	2160      	movs	r1, #96	@ 0x60
 8006226:	4618      	mov	r0, r3
 8006228:	f000 f957 	bl	80064da <TIM_ITRx_SetConfig>
      break;
 800622c:	e01c      	b.n	8006268 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800623a:	461a      	mov	r2, r3
 800623c:	f000 f8ee 	bl	800641c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	2140      	movs	r1, #64	@ 0x40
 8006246:	4618      	mov	r0, r3
 8006248:	f000 f947 	bl	80064da <TIM_ITRx_SetConfig>
      break;
 800624c:	e00c      	b.n	8006268 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681a      	ldr	r2, [r3, #0]
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	4619      	mov	r1, r3
 8006258:	4610      	mov	r0, r2
 800625a:	f000 f93e 	bl	80064da <TIM_ITRx_SetConfig>
      break;
 800625e:	e003      	b.n	8006268 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8006260:	2301      	movs	r3, #1
 8006262:	73fb      	strb	r3, [r7, #15]
      break;
 8006264:	e000      	b.n	8006268 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8006266:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2201      	movs	r2, #1
 800626c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2200      	movs	r2, #0
 8006274:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006278:	7bfb      	ldrb	r3, [r7, #15]
}
 800627a:	4618      	mov	r0, r3
 800627c:	3710      	adds	r7, #16
 800627e:	46bd      	mov	sp, r7
 8006280:	bd80      	pop	{r7, pc}
 8006282:	bf00      	nop
 8006284:	00100070 	.word	0x00100070
 8006288:	00100040 	.word	0x00100040
 800628c:	00100030 	.word	0x00100030
 8006290:	00100020 	.word	0x00100020

08006294 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006294:	b480      	push	{r7}
 8006296:	b083      	sub	sp, #12
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800629c:	bf00      	nop
 800629e:	370c      	adds	r7, #12
 80062a0:	46bd      	mov	sp, r7
 80062a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a6:	4770      	bx	lr

080062a8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80062a8:	b480      	push	{r7}
 80062aa:	b083      	sub	sp, #12
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80062b0:	bf00      	nop
 80062b2:	370c      	adds	r7, #12
 80062b4:	46bd      	mov	sp, r7
 80062b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ba:	4770      	bx	lr

080062bc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80062bc:	b480      	push	{r7}
 80062be:	b083      	sub	sp, #12
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80062c4:	bf00      	nop
 80062c6:	370c      	adds	r7, #12
 80062c8:	46bd      	mov	sp, r7
 80062ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ce:	4770      	bx	lr

080062d0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80062d0:	b480      	push	{r7}
 80062d2:	b083      	sub	sp, #12
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80062d8:	bf00      	nop
 80062da:	370c      	adds	r7, #12
 80062dc:	46bd      	mov	sp, r7
 80062de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e2:	4770      	bx	lr

080062e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80062e4:	b480      	push	{r7}
 80062e6:	b085      	sub	sp, #20
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
 80062ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	4a42      	ldr	r2, [pc, #264]	@ (8006400 <TIM_Base_SetConfig+0x11c>)
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d00f      	beq.n	800631c <TIM_Base_SetConfig+0x38>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006302:	d00b      	beq.n	800631c <TIM_Base_SetConfig+0x38>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	4a3f      	ldr	r2, [pc, #252]	@ (8006404 <TIM_Base_SetConfig+0x120>)
 8006308:	4293      	cmp	r3, r2
 800630a:	d007      	beq.n	800631c <TIM_Base_SetConfig+0x38>
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	4a3e      	ldr	r2, [pc, #248]	@ (8006408 <TIM_Base_SetConfig+0x124>)
 8006310:	4293      	cmp	r3, r2
 8006312:	d003      	beq.n	800631c <TIM_Base_SetConfig+0x38>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	4a3d      	ldr	r2, [pc, #244]	@ (800640c <TIM_Base_SetConfig+0x128>)
 8006318:	4293      	cmp	r3, r2
 800631a:	d108      	bne.n	800632e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006322:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	685b      	ldr	r3, [r3, #4]
 8006328:	68fa      	ldr	r2, [r7, #12]
 800632a:	4313      	orrs	r3, r2
 800632c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	4a33      	ldr	r2, [pc, #204]	@ (8006400 <TIM_Base_SetConfig+0x11c>)
 8006332:	4293      	cmp	r3, r2
 8006334:	d01b      	beq.n	800636e <TIM_Base_SetConfig+0x8a>
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800633c:	d017      	beq.n	800636e <TIM_Base_SetConfig+0x8a>
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	4a30      	ldr	r2, [pc, #192]	@ (8006404 <TIM_Base_SetConfig+0x120>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d013      	beq.n	800636e <TIM_Base_SetConfig+0x8a>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	4a2f      	ldr	r2, [pc, #188]	@ (8006408 <TIM_Base_SetConfig+0x124>)
 800634a:	4293      	cmp	r3, r2
 800634c:	d00f      	beq.n	800636e <TIM_Base_SetConfig+0x8a>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	4a2e      	ldr	r2, [pc, #184]	@ (800640c <TIM_Base_SetConfig+0x128>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d00b      	beq.n	800636e <TIM_Base_SetConfig+0x8a>
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	4a2d      	ldr	r2, [pc, #180]	@ (8006410 <TIM_Base_SetConfig+0x12c>)
 800635a:	4293      	cmp	r3, r2
 800635c:	d007      	beq.n	800636e <TIM_Base_SetConfig+0x8a>
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	4a2c      	ldr	r2, [pc, #176]	@ (8006414 <TIM_Base_SetConfig+0x130>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d003      	beq.n	800636e <TIM_Base_SetConfig+0x8a>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	4a2b      	ldr	r2, [pc, #172]	@ (8006418 <TIM_Base_SetConfig+0x134>)
 800636a:	4293      	cmp	r3, r2
 800636c:	d108      	bne.n	8006380 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006374:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	68db      	ldr	r3, [r3, #12]
 800637a:	68fa      	ldr	r2, [r7, #12]
 800637c:	4313      	orrs	r3, r2
 800637e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	695b      	ldr	r3, [r3, #20]
 800638a:	4313      	orrs	r3, r2
 800638c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	68fa      	ldr	r2, [r7, #12]
 8006392:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	689a      	ldr	r2, [r3, #8]
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	681a      	ldr	r2, [r3, #0]
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	4a16      	ldr	r2, [pc, #88]	@ (8006400 <TIM_Base_SetConfig+0x11c>)
 80063a8:	4293      	cmp	r3, r2
 80063aa:	d00f      	beq.n	80063cc <TIM_Base_SetConfig+0xe8>
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	4a17      	ldr	r2, [pc, #92]	@ (800640c <TIM_Base_SetConfig+0x128>)
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d00b      	beq.n	80063cc <TIM_Base_SetConfig+0xe8>
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	4a16      	ldr	r2, [pc, #88]	@ (8006410 <TIM_Base_SetConfig+0x12c>)
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d007      	beq.n	80063cc <TIM_Base_SetConfig+0xe8>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	4a15      	ldr	r2, [pc, #84]	@ (8006414 <TIM_Base_SetConfig+0x130>)
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d003      	beq.n	80063cc <TIM_Base_SetConfig+0xe8>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	4a14      	ldr	r2, [pc, #80]	@ (8006418 <TIM_Base_SetConfig+0x134>)
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d103      	bne.n	80063d4 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	691a      	ldr	r2, [r3, #16]
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2201      	movs	r2, #1
 80063d8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	691b      	ldr	r3, [r3, #16]
 80063de:	f003 0301 	and.w	r3, r3, #1
 80063e2:	2b01      	cmp	r3, #1
 80063e4:	d105      	bne.n	80063f2 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	691b      	ldr	r3, [r3, #16]
 80063ea:	f023 0201 	bic.w	r2, r3, #1
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	611a      	str	r2, [r3, #16]
  }
}
 80063f2:	bf00      	nop
 80063f4:	3714      	adds	r7, #20
 80063f6:	46bd      	mov	sp, r7
 80063f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fc:	4770      	bx	lr
 80063fe:	bf00      	nop
 8006400:	40012c00 	.word	0x40012c00
 8006404:	40000400 	.word	0x40000400
 8006408:	40000800 	.word	0x40000800
 800640c:	40013400 	.word	0x40013400
 8006410:	40014000 	.word	0x40014000
 8006414:	40014400 	.word	0x40014400
 8006418:	40014800 	.word	0x40014800

0800641c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800641c:	b480      	push	{r7}
 800641e:	b087      	sub	sp, #28
 8006420:	af00      	add	r7, sp, #0
 8006422:	60f8      	str	r0, [r7, #12]
 8006424:	60b9      	str	r1, [r7, #8]
 8006426:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	6a1b      	ldr	r3, [r3, #32]
 800642c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	6a1b      	ldr	r3, [r3, #32]
 8006432:	f023 0201 	bic.w	r2, r3, #1
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	699b      	ldr	r3, [r3, #24]
 800643e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006440:	693b      	ldr	r3, [r7, #16]
 8006442:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006446:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	011b      	lsls	r3, r3, #4
 800644c:	693a      	ldr	r2, [r7, #16]
 800644e:	4313      	orrs	r3, r2
 8006450:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006452:	697b      	ldr	r3, [r7, #20]
 8006454:	f023 030a 	bic.w	r3, r3, #10
 8006458:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800645a:	697a      	ldr	r2, [r7, #20]
 800645c:	68bb      	ldr	r3, [r7, #8]
 800645e:	4313      	orrs	r3, r2
 8006460:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	693a      	ldr	r2, [r7, #16]
 8006466:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	697a      	ldr	r2, [r7, #20]
 800646c:	621a      	str	r2, [r3, #32]
}
 800646e:	bf00      	nop
 8006470:	371c      	adds	r7, #28
 8006472:	46bd      	mov	sp, r7
 8006474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006478:	4770      	bx	lr

0800647a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800647a:	b480      	push	{r7}
 800647c:	b087      	sub	sp, #28
 800647e:	af00      	add	r7, sp, #0
 8006480:	60f8      	str	r0, [r7, #12]
 8006482:	60b9      	str	r1, [r7, #8]
 8006484:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	6a1b      	ldr	r3, [r3, #32]
 800648a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	6a1b      	ldr	r3, [r3, #32]
 8006490:	f023 0210 	bic.w	r2, r3, #16
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	699b      	ldr	r3, [r3, #24]
 800649c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800649e:	693b      	ldr	r3, [r7, #16]
 80064a0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80064a4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	031b      	lsls	r3, r3, #12
 80064aa:	693a      	ldr	r2, [r7, #16]
 80064ac:	4313      	orrs	r3, r2
 80064ae:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80064b0:	697b      	ldr	r3, [r7, #20]
 80064b2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80064b6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80064b8:	68bb      	ldr	r3, [r7, #8]
 80064ba:	011b      	lsls	r3, r3, #4
 80064bc:	697a      	ldr	r2, [r7, #20]
 80064be:	4313      	orrs	r3, r2
 80064c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	693a      	ldr	r2, [r7, #16]
 80064c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	697a      	ldr	r2, [r7, #20]
 80064cc:	621a      	str	r2, [r3, #32]
}
 80064ce:	bf00      	nop
 80064d0:	371c      	adds	r7, #28
 80064d2:	46bd      	mov	sp, r7
 80064d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d8:	4770      	bx	lr

080064da <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80064da:	b480      	push	{r7}
 80064dc:	b085      	sub	sp, #20
 80064de:	af00      	add	r7, sp, #0
 80064e0:	6078      	str	r0, [r7, #4]
 80064e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	689b      	ldr	r3, [r3, #8]
 80064e8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80064f0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064f4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80064f6:	683a      	ldr	r2, [r7, #0]
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	4313      	orrs	r3, r2
 80064fc:	f043 0307 	orr.w	r3, r3, #7
 8006500:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	68fa      	ldr	r2, [r7, #12]
 8006506:	609a      	str	r2, [r3, #8]
}
 8006508:	bf00      	nop
 800650a:	3714      	adds	r7, #20
 800650c:	46bd      	mov	sp, r7
 800650e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006512:	4770      	bx	lr

08006514 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006514:	b480      	push	{r7}
 8006516:	b087      	sub	sp, #28
 8006518:	af00      	add	r7, sp, #0
 800651a:	60f8      	str	r0, [r7, #12]
 800651c:	60b9      	str	r1, [r7, #8]
 800651e:	607a      	str	r2, [r7, #4]
 8006520:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	689b      	ldr	r3, [r3, #8]
 8006526:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006528:	697b      	ldr	r3, [r7, #20]
 800652a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800652e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	021a      	lsls	r2, r3, #8
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	431a      	orrs	r2, r3
 8006538:	68bb      	ldr	r3, [r7, #8]
 800653a:	4313      	orrs	r3, r2
 800653c:	697a      	ldr	r2, [r7, #20]
 800653e:	4313      	orrs	r3, r2
 8006540:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	697a      	ldr	r2, [r7, #20]
 8006546:	609a      	str	r2, [r3, #8]
}
 8006548:	bf00      	nop
 800654a:	371c      	adds	r7, #28
 800654c:	46bd      	mov	sp, r7
 800654e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006552:	4770      	bx	lr

08006554 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006554:	b480      	push	{r7}
 8006556:	b085      	sub	sp, #20
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
 800655c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006564:	2b01      	cmp	r3, #1
 8006566:	d101      	bne.n	800656c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006568:	2302      	movs	r3, #2
 800656a:	e065      	b.n	8006638 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2201      	movs	r2, #1
 8006570:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2202      	movs	r2, #2
 8006578:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	685b      	ldr	r3, [r3, #4]
 8006582:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	689b      	ldr	r3, [r3, #8]
 800658a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	4a2c      	ldr	r2, [pc, #176]	@ (8006644 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d004      	beq.n	80065a0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	4a2b      	ldr	r2, [pc, #172]	@ (8006648 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800659c:	4293      	cmp	r3, r2
 800659e:	d108      	bne.n	80065b2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80065a6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	685b      	ldr	r3, [r3, #4]
 80065ac:	68fa      	ldr	r2, [r7, #12]
 80065ae:	4313      	orrs	r3, r2
 80065b0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80065b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065bc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	68fa      	ldr	r2, [r7, #12]
 80065c4:	4313      	orrs	r3, r2
 80065c6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	68fa      	ldr	r2, [r7, #12]
 80065ce:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	4a1b      	ldr	r2, [pc, #108]	@ (8006644 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d018      	beq.n	800660c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80065e2:	d013      	beq.n	800660c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	4a18      	ldr	r2, [pc, #96]	@ (800664c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d00e      	beq.n	800660c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	4a17      	ldr	r2, [pc, #92]	@ (8006650 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80065f4:	4293      	cmp	r3, r2
 80065f6:	d009      	beq.n	800660c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	4a12      	ldr	r2, [pc, #72]	@ (8006648 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80065fe:	4293      	cmp	r3, r2
 8006600:	d004      	beq.n	800660c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	4a13      	ldr	r2, [pc, #76]	@ (8006654 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006608:	4293      	cmp	r3, r2
 800660a:	d10c      	bne.n	8006626 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800660c:	68bb      	ldr	r3, [r7, #8]
 800660e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006612:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	689b      	ldr	r3, [r3, #8]
 8006618:	68ba      	ldr	r2, [r7, #8]
 800661a:	4313      	orrs	r3, r2
 800661c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	68ba      	ldr	r2, [r7, #8]
 8006624:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2201      	movs	r2, #1
 800662a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2200      	movs	r2, #0
 8006632:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006636:	2300      	movs	r3, #0
}
 8006638:	4618      	mov	r0, r3
 800663a:	3714      	adds	r7, #20
 800663c:	46bd      	mov	sp, r7
 800663e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006642:	4770      	bx	lr
 8006644:	40012c00 	.word	0x40012c00
 8006648:	40013400 	.word	0x40013400
 800664c:	40000400 	.word	0x40000400
 8006650:	40000800 	.word	0x40000800
 8006654:	40014000 	.word	0x40014000

08006658 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006658:	b480      	push	{r7}
 800665a:	b083      	sub	sp, #12
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006660:	bf00      	nop
 8006662:	370c      	adds	r7, #12
 8006664:	46bd      	mov	sp, r7
 8006666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666a:	4770      	bx	lr

0800666c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800666c:	b480      	push	{r7}
 800666e:	b083      	sub	sp, #12
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006674:	bf00      	nop
 8006676:	370c      	adds	r7, #12
 8006678:	46bd      	mov	sp, r7
 800667a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667e:	4770      	bx	lr

08006680 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006680:	b480      	push	{r7}
 8006682:	b083      	sub	sp, #12
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006688:	bf00      	nop
 800668a:	370c      	adds	r7, #12
 800668c:	46bd      	mov	sp, r7
 800668e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006692:	4770      	bx	lr

08006694 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8006694:	b480      	push	{r7}
 8006696:	b083      	sub	sp, #12
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800669c:	bf00      	nop
 800669e:	370c      	adds	r7, #12
 80066a0:	46bd      	mov	sp, r7
 80066a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a6:	4770      	bx	lr

080066a8 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80066a8:	b480      	push	{r7}
 80066aa:	b083      	sub	sp, #12
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80066b0:	bf00      	nop
 80066b2:	370c      	adds	r7, #12
 80066b4:	46bd      	mov	sp, r7
 80066b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ba:	4770      	bx	lr

080066bc <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80066bc:	b480      	push	{r7}
 80066be:	b083      	sub	sp, #12
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80066c4:	bf00      	nop
 80066c6:	370c      	adds	r7, #12
 80066c8:	46bd      	mov	sp, r7
 80066ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ce:	4770      	bx	lr

080066d0 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80066d0:	b480      	push	{r7}
 80066d2:	b083      	sub	sp, #12
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80066d8:	bf00      	nop
 80066da:	370c      	adds	r7, #12
 80066dc:	46bd      	mov	sp, r7
 80066de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e2:	4770      	bx	lr

080066e4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b082      	sub	sp, #8
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d101      	bne.n	80066f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80066f2:	2301      	movs	r3, #1
 80066f4:	e042      	b.n	800677c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d106      	bne.n	800670e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2200      	movs	r2, #0
 8006704:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006708:	6878      	ldr	r0, [r7, #4]
 800670a:	f7fb fdc3 	bl	8002294 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	2224      	movs	r2, #36	@ 0x24
 8006712:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	681a      	ldr	r2, [r3, #0]
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f022 0201 	bic.w	r2, r2, #1
 8006724:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800672a:	2b00      	cmp	r3, #0
 800672c:	d002      	beq.n	8006734 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800672e:	6878      	ldr	r0, [r7, #4]
 8006730:	f000 fee8 	bl	8007504 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006734:	6878      	ldr	r0, [r7, #4]
 8006736:	f000 fc19 	bl	8006f6c <UART_SetConfig>
 800673a:	4603      	mov	r3, r0
 800673c:	2b01      	cmp	r3, #1
 800673e:	d101      	bne.n	8006744 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006740:	2301      	movs	r3, #1
 8006742:	e01b      	b.n	800677c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	685a      	ldr	r2, [r3, #4]
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006752:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	689a      	ldr	r2, [r3, #8]
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006762:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	681a      	ldr	r2, [r3, #0]
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f042 0201 	orr.w	r2, r2, #1
 8006772:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006774:	6878      	ldr	r0, [r7, #4]
 8006776:	f000 ff67 	bl	8007648 <UART_CheckIdleState>
 800677a:	4603      	mov	r3, r0
}
 800677c:	4618      	mov	r0, r3
 800677e:	3708      	adds	r7, #8
 8006780:	46bd      	mov	sp, r7
 8006782:	bd80      	pop	{r7, pc}

08006784 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006784:	b480      	push	{r7}
 8006786:	b091      	sub	sp, #68	@ 0x44
 8006788:	af00      	add	r7, sp, #0
 800678a:	60f8      	str	r0, [r7, #12]
 800678c:	60b9      	str	r1, [r7, #8]
 800678e:	4613      	mov	r3, r2
 8006790:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006798:	2b20      	cmp	r3, #32
 800679a:	d178      	bne.n	800688e <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 800679c:	68bb      	ldr	r3, [r7, #8]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d002      	beq.n	80067a8 <HAL_UART_Transmit_IT+0x24>
 80067a2:	88fb      	ldrh	r3, [r7, #6]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d101      	bne.n	80067ac <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 80067a8:	2301      	movs	r3, #1
 80067aa:	e071      	b.n	8006890 <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	68ba      	ldr	r2, [r7, #8]
 80067b0:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	88fa      	ldrh	r2, [r7, #6]
 80067b6:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	88fa      	ldrh	r2, [r7, #6]
 80067be:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    huart->TxISR       = NULL;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	2200      	movs	r2, #0
 80067c6:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	2200      	movs	r2, #0
 80067cc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	2221      	movs	r2, #33	@ 0x21
 80067d4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80067dc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80067e0:	d12a      	bne.n	8006838 <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	689b      	ldr	r3, [r3, #8]
 80067e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80067ea:	d107      	bne.n	80067fc <HAL_UART_Transmit_IT+0x78>
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	691b      	ldr	r3, [r3, #16]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d103      	bne.n	80067fc <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	4a29      	ldr	r2, [pc, #164]	@ (800689c <HAL_UART_Transmit_IT+0x118>)
 80067f8:	679a      	str	r2, [r3, #120]	@ 0x78
 80067fa:	e002      	b.n	8006802 <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	4a28      	ldr	r2, [pc, #160]	@ (80068a0 <HAL_UART_Transmit_IT+0x11c>)
 8006800:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	3308      	adds	r3, #8
 8006808:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800680a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800680c:	e853 3f00 	ldrex	r3, [r3]
 8006810:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006814:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006818:	63bb      	str	r3, [r7, #56]	@ 0x38
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	3308      	adds	r3, #8
 8006820:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006822:	637a      	str	r2, [r7, #52]	@ 0x34
 8006824:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006826:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006828:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800682a:	e841 2300 	strex	r3, r2, [r1]
 800682e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8006830:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006832:	2b00      	cmp	r3, #0
 8006834:	d1e5      	bne.n	8006802 <HAL_UART_Transmit_IT+0x7e>
 8006836:	e028      	b.n	800688a <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	689b      	ldr	r3, [r3, #8]
 800683c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006840:	d107      	bne.n	8006852 <HAL_UART_Transmit_IT+0xce>
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	691b      	ldr	r3, [r3, #16]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d103      	bne.n	8006852 <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	4a15      	ldr	r2, [pc, #84]	@ (80068a4 <HAL_UART_Transmit_IT+0x120>)
 800684e:	679a      	str	r2, [r3, #120]	@ 0x78
 8006850:	e002      	b.n	8006858 <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	4a14      	ldr	r2, [pc, #80]	@ (80068a8 <HAL_UART_Transmit_IT+0x124>)
 8006856:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800685e:	697b      	ldr	r3, [r7, #20]
 8006860:	e853 3f00 	ldrex	r3, [r3]
 8006864:	613b      	str	r3, [r7, #16]
   return(result);
 8006866:	693b      	ldr	r3, [r7, #16]
 8006868:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800686c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	461a      	mov	r2, r3
 8006874:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006876:	623b      	str	r3, [r7, #32]
 8006878:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800687a:	69f9      	ldr	r1, [r7, #28]
 800687c:	6a3a      	ldr	r2, [r7, #32]
 800687e:	e841 2300 	strex	r3, r2, [r1]
 8006882:	61bb      	str	r3, [r7, #24]
   return(result);
 8006884:	69bb      	ldr	r3, [r7, #24]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d1e6      	bne.n	8006858 <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 800688a:	2300      	movs	r3, #0
 800688c:	e000      	b.n	8006890 <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800688e:	2302      	movs	r3, #2
  }
}
 8006890:	4618      	mov	r0, r3
 8006892:	3744      	adds	r7, #68	@ 0x44
 8006894:	46bd      	mov	sp, r7
 8006896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689a:	4770      	bx	lr
 800689c:	08007f7b 	.word	0x08007f7b
 80068a0:	08007e9b 	.word	0x08007e9b
 80068a4:	08007dd9 	.word	0x08007dd9
 80068a8:	08007d21 	.word	0x08007d21

080068ac <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b0ba      	sub	sp, #232	@ 0xe8
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	69db      	ldr	r3, [r3, #28]
 80068ba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	689b      	ldr	r3, [r3, #8]
 80068ce:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80068d2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80068d6:	f640 030f 	movw	r3, #2063	@ 0x80f
 80068da:	4013      	ands	r3, r2
 80068dc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80068e0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d11b      	bne.n	8006920 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80068e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80068ec:	f003 0320 	and.w	r3, r3, #32
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d015      	beq.n	8006920 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80068f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80068f8:	f003 0320 	and.w	r3, r3, #32
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d105      	bne.n	800690c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006900:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006904:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006908:	2b00      	cmp	r3, #0
 800690a:	d009      	beq.n	8006920 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006910:	2b00      	cmp	r3, #0
 8006912:	f000 8300 	beq.w	8006f16 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800691a:	6878      	ldr	r0, [r7, #4]
 800691c:	4798      	blx	r3
      }
      return;
 800691e:	e2fa      	b.n	8006f16 <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006920:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006924:	2b00      	cmp	r3, #0
 8006926:	f000 8123 	beq.w	8006b70 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800692a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800692e:	4b8d      	ldr	r3, [pc, #564]	@ (8006b64 <HAL_UART_IRQHandler+0x2b8>)
 8006930:	4013      	ands	r3, r2
 8006932:	2b00      	cmp	r3, #0
 8006934:	d106      	bne.n	8006944 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006936:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800693a:	4b8b      	ldr	r3, [pc, #556]	@ (8006b68 <HAL_UART_IRQHandler+0x2bc>)
 800693c:	4013      	ands	r3, r2
 800693e:	2b00      	cmp	r3, #0
 8006940:	f000 8116 	beq.w	8006b70 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006944:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006948:	f003 0301 	and.w	r3, r3, #1
 800694c:	2b00      	cmp	r3, #0
 800694e:	d011      	beq.n	8006974 <HAL_UART_IRQHandler+0xc8>
 8006950:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006954:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006958:	2b00      	cmp	r3, #0
 800695a:	d00b      	beq.n	8006974 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	2201      	movs	r2, #1
 8006962:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800696a:	f043 0201 	orr.w	r2, r3, #1
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006974:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006978:	f003 0302 	and.w	r3, r3, #2
 800697c:	2b00      	cmp	r3, #0
 800697e:	d011      	beq.n	80069a4 <HAL_UART_IRQHandler+0xf8>
 8006980:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006984:	f003 0301 	and.w	r3, r3, #1
 8006988:	2b00      	cmp	r3, #0
 800698a:	d00b      	beq.n	80069a4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	2202      	movs	r2, #2
 8006992:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800699a:	f043 0204 	orr.w	r2, r3, #4
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80069a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80069a8:	f003 0304 	and.w	r3, r3, #4
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d011      	beq.n	80069d4 <HAL_UART_IRQHandler+0x128>
 80069b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80069b4:	f003 0301 	and.w	r3, r3, #1
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d00b      	beq.n	80069d4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	2204      	movs	r2, #4
 80069c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80069ca:	f043 0202 	orr.w	r2, r3, #2
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80069d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80069d8:	f003 0308 	and.w	r3, r3, #8
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d017      	beq.n	8006a10 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80069e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80069e4:	f003 0320 	and.w	r3, r3, #32
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d105      	bne.n	80069f8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80069ec:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80069f0:	4b5c      	ldr	r3, [pc, #368]	@ (8006b64 <HAL_UART_IRQHandler+0x2b8>)
 80069f2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d00b      	beq.n	8006a10 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	2208      	movs	r2, #8
 80069fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a06:	f043 0208 	orr.w	r2, r3, #8
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006a10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a14:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d012      	beq.n	8006a42 <HAL_UART_IRQHandler+0x196>
 8006a1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a20:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d00c      	beq.n	8006a42 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006a30:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a38:	f043 0220 	orr.w	r2, r3, #32
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	f000 8266 	beq.w	8006f1a <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006a4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a52:	f003 0320 	and.w	r3, r3, #32
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d013      	beq.n	8006a82 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006a5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a5e:	f003 0320 	and.w	r3, r3, #32
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d105      	bne.n	8006a72 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006a66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006a6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d007      	beq.n	8006a82 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d003      	beq.n	8006a82 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a7e:	6878      	ldr	r0, [r7, #4]
 8006a80:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a88:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	689b      	ldr	r3, [r3, #8]
 8006a92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a96:	2b40      	cmp	r3, #64	@ 0x40
 8006a98:	d005      	beq.n	8006aa6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006a9a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006a9e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d054      	beq.n	8006b50 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006aa6:	6878      	ldr	r0, [r7, #4]
 8006aa8:	f000 ffcd 	bl	8007a46 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	689b      	ldr	r3, [r3, #8]
 8006ab2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ab6:	2b40      	cmp	r3, #64	@ 0x40
 8006ab8:	d146      	bne.n	8006b48 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	3308      	adds	r3, #8
 8006ac0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ac4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006ac8:	e853 3f00 	ldrex	r3, [r3]
 8006acc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006ad0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006ad4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006ad8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	3308      	adds	r3, #8
 8006ae2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006ae6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006aea:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006af2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006af6:	e841 2300 	strex	r3, r2, [r1]
 8006afa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006afe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d1d9      	bne.n	8006aba <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d017      	beq.n	8006b40 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006b16:	4a15      	ldr	r2, [pc, #84]	@ (8006b6c <HAL_UART_IRQHandler+0x2c0>)
 8006b18:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006b20:	4618      	mov	r0, r3
 8006b22:	f7fc f84b 	bl	8002bbc <HAL_DMA_Abort_IT>
 8006b26:	4603      	mov	r3, r0
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d019      	beq.n	8006b60 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006b32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b34:	687a      	ldr	r2, [r7, #4]
 8006b36:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8006b3a:	4610      	mov	r0, r2
 8006b3c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b3e:	e00f      	b.n	8006b60 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006b40:	6878      	ldr	r0, [r7, #4]
 8006b42:	f000 fa09 	bl	8006f58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b46:	e00b      	b.n	8006b60 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006b48:	6878      	ldr	r0, [r7, #4]
 8006b4a:	f000 fa05 	bl	8006f58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b4e:	e007      	b.n	8006b60 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006b50:	6878      	ldr	r0, [r7, #4]
 8006b52:	f000 fa01 	bl	8006f58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2200      	movs	r2, #0
 8006b5a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8006b5e:	e1dc      	b.n	8006f1a <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b60:	bf00      	nop
    return;
 8006b62:	e1da      	b.n	8006f1a <HAL_UART_IRQHandler+0x66e>
 8006b64:	10000001 	.word	0x10000001
 8006b68:	04000120 	.word	0x04000120
 8006b6c:	08007cfd 	.word	0x08007cfd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006b74:	2b01      	cmp	r3, #1
 8006b76:	f040 8170 	bne.w	8006e5a <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006b7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b7e:	f003 0310 	and.w	r3, r3, #16
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	f000 8169 	beq.w	8006e5a <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006b88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b8c:	f003 0310 	and.w	r3, r3, #16
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	f000 8162 	beq.w	8006e5a <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	2210      	movs	r2, #16
 8006b9c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	689b      	ldr	r3, [r3, #8]
 8006ba4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ba8:	2b40      	cmp	r3, #64	@ 0x40
 8006baa:	f040 80d8 	bne.w	8006d5e <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	685b      	ldr	r3, [r3, #4]
 8006bb8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006bbc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	f000 80af 	beq.w	8006d24 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006bcc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006bd0:	429a      	cmp	r2, r3
 8006bd2:	f080 80a7 	bcs.w	8006d24 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006bdc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f003 0320 	and.w	r3, r3, #32
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	f040 8087 	bne.w	8006d02 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bfc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006c00:	e853 3f00 	ldrex	r3, [r3]
 8006c04:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006c08:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006c0c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006c10:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	461a      	mov	r2, r3
 8006c1a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006c1e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006c22:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c26:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006c2a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006c2e:	e841 2300 	strex	r3, r2, [r1]
 8006c32:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006c36:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d1da      	bne.n	8006bf4 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	3308      	adds	r3, #8
 8006c44:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c46:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006c48:	e853 3f00 	ldrex	r3, [r3]
 8006c4c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006c4e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006c50:	f023 0301 	bic.w	r3, r3, #1
 8006c54:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	3308      	adds	r3, #8
 8006c5e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006c62:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006c66:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c68:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006c6a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006c6e:	e841 2300 	strex	r3, r2, [r1]
 8006c72:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006c74:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d1e1      	bne.n	8006c3e <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	3308      	adds	r3, #8
 8006c80:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c82:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006c84:	e853 3f00 	ldrex	r3, [r3]
 8006c88:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006c8a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006c8c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006c90:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	3308      	adds	r3, #8
 8006c9a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006c9e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006ca0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ca2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006ca4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006ca6:	e841 2300 	strex	r3, r2, [r1]
 8006caa:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006cac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d1e3      	bne.n	8006c7a <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	2220      	movs	r2, #32
 8006cb6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cc6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006cc8:	e853 3f00 	ldrex	r3, [r3]
 8006ccc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006cce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006cd0:	f023 0310 	bic.w	r3, r3, #16
 8006cd4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	461a      	mov	r2, r3
 8006cde:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006ce2:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006ce4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ce6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006ce8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006cea:	e841 2300 	strex	r3, r2, [r1]
 8006cee:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006cf0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d1e4      	bne.n	8006cc0 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	f7fb ff04 	bl	8002b0a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	2202      	movs	r2, #2
 8006d06:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006d14:	b29b      	uxth	r3, r3
 8006d16:	1ad3      	subs	r3, r2, r3
 8006d18:	b29b      	uxth	r3, r3
 8006d1a:	4619      	mov	r1, r3
 8006d1c:	6878      	ldr	r0, [r7, #4]
 8006d1e:	f7fb f8cd 	bl	8001ebc <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8006d22:	e0fc      	b.n	8006f1e <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006d2a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006d2e:	429a      	cmp	r2, r3
 8006d30:	f040 80f5 	bne.w	8006f1e <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f003 0320 	and.w	r3, r3, #32
 8006d42:	2b20      	cmp	r3, #32
 8006d44:	f040 80eb 	bne.w	8006f1e <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2202      	movs	r2, #2
 8006d4c:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006d54:	4619      	mov	r1, r3
 8006d56:	6878      	ldr	r0, [r7, #4]
 8006d58:	f7fb f8b0 	bl	8001ebc <HAL_UARTEx_RxEventCallback>
      return;
 8006d5c:	e0df      	b.n	8006f1e <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006d6a:	b29b      	uxth	r3, r3
 8006d6c:	1ad3      	subs	r3, r2, r3
 8006d6e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006d78:	b29b      	uxth	r3, r3
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	f000 80d1 	beq.w	8006f22 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8006d80:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	f000 80cc 	beq.w	8006f22 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d92:	e853 3f00 	ldrex	r3, [r3]
 8006d96:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006d98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d9a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006d9e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	461a      	mov	r2, r3
 8006da8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006dac:	647b      	str	r3, [r7, #68]	@ 0x44
 8006dae:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006db0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006db2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006db4:	e841 2300 	strex	r3, r2, [r1]
 8006db8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006dba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d1e4      	bne.n	8006d8a <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	3308      	adds	r3, #8
 8006dc6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dca:	e853 3f00 	ldrex	r3, [r3]
 8006dce:	623b      	str	r3, [r7, #32]
   return(result);
 8006dd0:	6a3b      	ldr	r3, [r7, #32]
 8006dd2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006dd6:	f023 0301 	bic.w	r3, r3, #1
 8006dda:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	3308      	adds	r3, #8
 8006de4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006de8:	633a      	str	r2, [r7, #48]	@ 0x30
 8006dea:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dec:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006dee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006df0:	e841 2300 	strex	r3, r2, [r1]
 8006df4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006df6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d1e1      	bne.n	8006dc0 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2220      	movs	r2, #32
 8006e00:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2200      	movs	r2, #0
 8006e08:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e16:	693b      	ldr	r3, [r7, #16]
 8006e18:	e853 3f00 	ldrex	r3, [r3]
 8006e1c:	60fb      	str	r3, [r7, #12]
   return(result);
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	f023 0310 	bic.w	r3, r3, #16
 8006e24:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	461a      	mov	r2, r3
 8006e2e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006e32:	61fb      	str	r3, [r7, #28]
 8006e34:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e36:	69b9      	ldr	r1, [r7, #24]
 8006e38:	69fa      	ldr	r2, [r7, #28]
 8006e3a:	e841 2300 	strex	r3, r2, [r1]
 8006e3e:	617b      	str	r3, [r7, #20]
   return(result);
 8006e40:	697b      	ldr	r3, [r7, #20]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d1e4      	bne.n	8006e10 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2202      	movs	r2, #2
 8006e4a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006e4c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006e50:	4619      	mov	r1, r3
 8006e52:	6878      	ldr	r0, [r7, #4]
 8006e54:	f7fb f832 	bl	8001ebc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006e58:	e063      	b.n	8006f22 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006e5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e5e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d00e      	beq.n	8006e84 <HAL_UART_IRQHandler+0x5d8>
 8006e66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006e6a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d008      	beq.n	8006e84 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8006e7a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006e7c:	6878      	ldr	r0, [r7, #4]
 8006e7e:	f001 f91c 	bl	80080ba <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006e82:	e051      	b.n	8006f28 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006e84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e88:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d014      	beq.n	8006eba <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006e90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006e94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d105      	bne.n	8006ea8 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006e9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006ea0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d008      	beq.n	8006eba <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d03a      	beq.n	8006f26 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006eb4:	6878      	ldr	r0, [r7, #4]
 8006eb6:	4798      	blx	r3
    }
    return;
 8006eb8:	e035      	b.n	8006f26 <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006eba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ebe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d009      	beq.n	8006eda <HAL_UART_IRQHandler+0x62e>
 8006ec6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006eca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d003      	beq.n	8006eda <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 8006ed2:	6878      	ldr	r0, [r7, #4]
 8006ed4:	f001 f8c6 	bl	8008064 <UART_EndTransmit_IT>
    return;
 8006ed8:	e026      	b.n	8006f28 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006eda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ede:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d009      	beq.n	8006efa <HAL_UART_IRQHandler+0x64e>
 8006ee6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006eea:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d003      	beq.n	8006efa <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006ef2:	6878      	ldr	r0, [r7, #4]
 8006ef4:	f001 f8f5 	bl	80080e2 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006ef8:	e016      	b.n	8006f28 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006efa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006efe:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d010      	beq.n	8006f28 <HAL_UART_IRQHandler+0x67c>
 8006f06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	da0c      	bge.n	8006f28 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006f0e:	6878      	ldr	r0, [r7, #4]
 8006f10:	f001 f8dd 	bl	80080ce <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006f14:	e008      	b.n	8006f28 <HAL_UART_IRQHandler+0x67c>
      return;
 8006f16:	bf00      	nop
 8006f18:	e006      	b.n	8006f28 <HAL_UART_IRQHandler+0x67c>
    return;
 8006f1a:	bf00      	nop
 8006f1c:	e004      	b.n	8006f28 <HAL_UART_IRQHandler+0x67c>
      return;
 8006f1e:	bf00      	nop
 8006f20:	e002      	b.n	8006f28 <HAL_UART_IRQHandler+0x67c>
      return;
 8006f22:	bf00      	nop
 8006f24:	e000      	b.n	8006f28 <HAL_UART_IRQHandler+0x67c>
    return;
 8006f26:	bf00      	nop
  }
}
 8006f28:	37e8      	adds	r7, #232	@ 0xe8
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	bd80      	pop	{r7, pc}
 8006f2e:	bf00      	nop

08006f30 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006f30:	b480      	push	{r7}
 8006f32:	b083      	sub	sp, #12
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8006f38:	bf00      	nop
 8006f3a:	370c      	adds	r7, #12
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f42:	4770      	bx	lr

08006f44 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006f44:	b480      	push	{r7}
 8006f46:	b083      	sub	sp, #12
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8006f4c:	bf00      	nop
 8006f4e:	370c      	adds	r7, #12
 8006f50:	46bd      	mov	sp, r7
 8006f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f56:	4770      	bx	lr

08006f58 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006f58:	b480      	push	{r7}
 8006f5a:	b083      	sub	sp, #12
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006f60:	bf00      	nop
 8006f62:	370c      	adds	r7, #12
 8006f64:	46bd      	mov	sp, r7
 8006f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6a:	4770      	bx	lr

08006f6c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006f6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006f70:	b08c      	sub	sp, #48	@ 0x30
 8006f72:	af00      	add	r7, sp, #0
 8006f74:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006f76:	2300      	movs	r3, #0
 8006f78:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006f7c:	697b      	ldr	r3, [r7, #20]
 8006f7e:	689a      	ldr	r2, [r3, #8]
 8006f80:	697b      	ldr	r3, [r7, #20]
 8006f82:	691b      	ldr	r3, [r3, #16]
 8006f84:	431a      	orrs	r2, r3
 8006f86:	697b      	ldr	r3, [r7, #20]
 8006f88:	695b      	ldr	r3, [r3, #20]
 8006f8a:	431a      	orrs	r2, r3
 8006f8c:	697b      	ldr	r3, [r7, #20]
 8006f8e:	69db      	ldr	r3, [r3, #28]
 8006f90:	4313      	orrs	r3, r2
 8006f92:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006f94:	697b      	ldr	r3, [r7, #20]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	681a      	ldr	r2, [r3, #0]
 8006f9a:	4bab      	ldr	r3, [pc, #684]	@ (8007248 <UART_SetConfig+0x2dc>)
 8006f9c:	4013      	ands	r3, r2
 8006f9e:	697a      	ldr	r2, [r7, #20]
 8006fa0:	6812      	ldr	r2, [r2, #0]
 8006fa2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006fa4:	430b      	orrs	r3, r1
 8006fa6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006fa8:	697b      	ldr	r3, [r7, #20]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	685b      	ldr	r3, [r3, #4]
 8006fae:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006fb2:	697b      	ldr	r3, [r7, #20]
 8006fb4:	68da      	ldr	r2, [r3, #12]
 8006fb6:	697b      	ldr	r3, [r7, #20]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	430a      	orrs	r2, r1
 8006fbc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006fbe:	697b      	ldr	r3, [r7, #20]
 8006fc0:	699b      	ldr	r3, [r3, #24]
 8006fc2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006fc4:	697b      	ldr	r3, [r7, #20]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	4aa0      	ldr	r2, [pc, #640]	@ (800724c <UART_SetConfig+0x2e0>)
 8006fca:	4293      	cmp	r3, r2
 8006fcc:	d004      	beq.n	8006fd8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006fce:	697b      	ldr	r3, [r7, #20]
 8006fd0:	6a1b      	ldr	r3, [r3, #32]
 8006fd2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006fd4:	4313      	orrs	r3, r2
 8006fd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006fd8:	697b      	ldr	r3, [r7, #20]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	689b      	ldr	r3, [r3, #8]
 8006fde:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8006fe2:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8006fe6:	697a      	ldr	r2, [r7, #20]
 8006fe8:	6812      	ldr	r2, [r2, #0]
 8006fea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006fec:	430b      	orrs	r3, r1
 8006fee:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006ff0:	697b      	ldr	r3, [r7, #20]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ff6:	f023 010f 	bic.w	r1, r3, #15
 8006ffa:	697b      	ldr	r3, [r7, #20]
 8006ffc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006ffe:	697b      	ldr	r3, [r7, #20]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	430a      	orrs	r2, r1
 8007004:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007006:	697b      	ldr	r3, [r7, #20]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	4a91      	ldr	r2, [pc, #580]	@ (8007250 <UART_SetConfig+0x2e4>)
 800700c:	4293      	cmp	r3, r2
 800700e:	d125      	bne.n	800705c <UART_SetConfig+0xf0>
 8007010:	4b90      	ldr	r3, [pc, #576]	@ (8007254 <UART_SetConfig+0x2e8>)
 8007012:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007016:	f003 0303 	and.w	r3, r3, #3
 800701a:	2b03      	cmp	r3, #3
 800701c:	d81a      	bhi.n	8007054 <UART_SetConfig+0xe8>
 800701e:	a201      	add	r2, pc, #4	@ (adr r2, 8007024 <UART_SetConfig+0xb8>)
 8007020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007024:	08007035 	.word	0x08007035
 8007028:	08007045 	.word	0x08007045
 800702c:	0800703d 	.word	0x0800703d
 8007030:	0800704d 	.word	0x0800704d
 8007034:	2301      	movs	r3, #1
 8007036:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800703a:	e0d6      	b.n	80071ea <UART_SetConfig+0x27e>
 800703c:	2302      	movs	r3, #2
 800703e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007042:	e0d2      	b.n	80071ea <UART_SetConfig+0x27e>
 8007044:	2304      	movs	r3, #4
 8007046:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800704a:	e0ce      	b.n	80071ea <UART_SetConfig+0x27e>
 800704c:	2308      	movs	r3, #8
 800704e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007052:	e0ca      	b.n	80071ea <UART_SetConfig+0x27e>
 8007054:	2310      	movs	r3, #16
 8007056:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800705a:	e0c6      	b.n	80071ea <UART_SetConfig+0x27e>
 800705c:	697b      	ldr	r3, [r7, #20]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	4a7d      	ldr	r2, [pc, #500]	@ (8007258 <UART_SetConfig+0x2ec>)
 8007062:	4293      	cmp	r3, r2
 8007064:	d138      	bne.n	80070d8 <UART_SetConfig+0x16c>
 8007066:	4b7b      	ldr	r3, [pc, #492]	@ (8007254 <UART_SetConfig+0x2e8>)
 8007068:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800706c:	f003 030c 	and.w	r3, r3, #12
 8007070:	2b0c      	cmp	r3, #12
 8007072:	d82d      	bhi.n	80070d0 <UART_SetConfig+0x164>
 8007074:	a201      	add	r2, pc, #4	@ (adr r2, 800707c <UART_SetConfig+0x110>)
 8007076:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800707a:	bf00      	nop
 800707c:	080070b1 	.word	0x080070b1
 8007080:	080070d1 	.word	0x080070d1
 8007084:	080070d1 	.word	0x080070d1
 8007088:	080070d1 	.word	0x080070d1
 800708c:	080070c1 	.word	0x080070c1
 8007090:	080070d1 	.word	0x080070d1
 8007094:	080070d1 	.word	0x080070d1
 8007098:	080070d1 	.word	0x080070d1
 800709c:	080070b9 	.word	0x080070b9
 80070a0:	080070d1 	.word	0x080070d1
 80070a4:	080070d1 	.word	0x080070d1
 80070a8:	080070d1 	.word	0x080070d1
 80070ac:	080070c9 	.word	0x080070c9
 80070b0:	2300      	movs	r3, #0
 80070b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80070b6:	e098      	b.n	80071ea <UART_SetConfig+0x27e>
 80070b8:	2302      	movs	r3, #2
 80070ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80070be:	e094      	b.n	80071ea <UART_SetConfig+0x27e>
 80070c0:	2304      	movs	r3, #4
 80070c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80070c6:	e090      	b.n	80071ea <UART_SetConfig+0x27e>
 80070c8:	2308      	movs	r3, #8
 80070ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80070ce:	e08c      	b.n	80071ea <UART_SetConfig+0x27e>
 80070d0:	2310      	movs	r3, #16
 80070d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80070d6:	e088      	b.n	80071ea <UART_SetConfig+0x27e>
 80070d8:	697b      	ldr	r3, [r7, #20]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	4a5f      	ldr	r2, [pc, #380]	@ (800725c <UART_SetConfig+0x2f0>)
 80070de:	4293      	cmp	r3, r2
 80070e0:	d125      	bne.n	800712e <UART_SetConfig+0x1c2>
 80070e2:	4b5c      	ldr	r3, [pc, #368]	@ (8007254 <UART_SetConfig+0x2e8>)
 80070e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070e8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80070ec:	2b30      	cmp	r3, #48	@ 0x30
 80070ee:	d016      	beq.n	800711e <UART_SetConfig+0x1b2>
 80070f0:	2b30      	cmp	r3, #48	@ 0x30
 80070f2:	d818      	bhi.n	8007126 <UART_SetConfig+0x1ba>
 80070f4:	2b20      	cmp	r3, #32
 80070f6:	d00a      	beq.n	800710e <UART_SetConfig+0x1a2>
 80070f8:	2b20      	cmp	r3, #32
 80070fa:	d814      	bhi.n	8007126 <UART_SetConfig+0x1ba>
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d002      	beq.n	8007106 <UART_SetConfig+0x19a>
 8007100:	2b10      	cmp	r3, #16
 8007102:	d008      	beq.n	8007116 <UART_SetConfig+0x1aa>
 8007104:	e00f      	b.n	8007126 <UART_SetConfig+0x1ba>
 8007106:	2300      	movs	r3, #0
 8007108:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800710c:	e06d      	b.n	80071ea <UART_SetConfig+0x27e>
 800710e:	2302      	movs	r3, #2
 8007110:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007114:	e069      	b.n	80071ea <UART_SetConfig+0x27e>
 8007116:	2304      	movs	r3, #4
 8007118:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800711c:	e065      	b.n	80071ea <UART_SetConfig+0x27e>
 800711e:	2308      	movs	r3, #8
 8007120:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007124:	e061      	b.n	80071ea <UART_SetConfig+0x27e>
 8007126:	2310      	movs	r3, #16
 8007128:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800712c:	e05d      	b.n	80071ea <UART_SetConfig+0x27e>
 800712e:	697b      	ldr	r3, [r7, #20]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	4a4b      	ldr	r2, [pc, #300]	@ (8007260 <UART_SetConfig+0x2f4>)
 8007134:	4293      	cmp	r3, r2
 8007136:	d125      	bne.n	8007184 <UART_SetConfig+0x218>
 8007138:	4b46      	ldr	r3, [pc, #280]	@ (8007254 <UART_SetConfig+0x2e8>)
 800713a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800713e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007142:	2bc0      	cmp	r3, #192	@ 0xc0
 8007144:	d016      	beq.n	8007174 <UART_SetConfig+0x208>
 8007146:	2bc0      	cmp	r3, #192	@ 0xc0
 8007148:	d818      	bhi.n	800717c <UART_SetConfig+0x210>
 800714a:	2b80      	cmp	r3, #128	@ 0x80
 800714c:	d00a      	beq.n	8007164 <UART_SetConfig+0x1f8>
 800714e:	2b80      	cmp	r3, #128	@ 0x80
 8007150:	d814      	bhi.n	800717c <UART_SetConfig+0x210>
 8007152:	2b00      	cmp	r3, #0
 8007154:	d002      	beq.n	800715c <UART_SetConfig+0x1f0>
 8007156:	2b40      	cmp	r3, #64	@ 0x40
 8007158:	d008      	beq.n	800716c <UART_SetConfig+0x200>
 800715a:	e00f      	b.n	800717c <UART_SetConfig+0x210>
 800715c:	2300      	movs	r3, #0
 800715e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007162:	e042      	b.n	80071ea <UART_SetConfig+0x27e>
 8007164:	2302      	movs	r3, #2
 8007166:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800716a:	e03e      	b.n	80071ea <UART_SetConfig+0x27e>
 800716c:	2304      	movs	r3, #4
 800716e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007172:	e03a      	b.n	80071ea <UART_SetConfig+0x27e>
 8007174:	2308      	movs	r3, #8
 8007176:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800717a:	e036      	b.n	80071ea <UART_SetConfig+0x27e>
 800717c:	2310      	movs	r3, #16
 800717e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007182:	e032      	b.n	80071ea <UART_SetConfig+0x27e>
 8007184:	697b      	ldr	r3, [r7, #20]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	4a30      	ldr	r2, [pc, #192]	@ (800724c <UART_SetConfig+0x2e0>)
 800718a:	4293      	cmp	r3, r2
 800718c:	d12a      	bne.n	80071e4 <UART_SetConfig+0x278>
 800718e:	4b31      	ldr	r3, [pc, #196]	@ (8007254 <UART_SetConfig+0x2e8>)
 8007190:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007194:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007198:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800719c:	d01a      	beq.n	80071d4 <UART_SetConfig+0x268>
 800719e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80071a2:	d81b      	bhi.n	80071dc <UART_SetConfig+0x270>
 80071a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80071a8:	d00c      	beq.n	80071c4 <UART_SetConfig+0x258>
 80071aa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80071ae:	d815      	bhi.n	80071dc <UART_SetConfig+0x270>
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d003      	beq.n	80071bc <UART_SetConfig+0x250>
 80071b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80071b8:	d008      	beq.n	80071cc <UART_SetConfig+0x260>
 80071ba:	e00f      	b.n	80071dc <UART_SetConfig+0x270>
 80071bc:	2300      	movs	r3, #0
 80071be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80071c2:	e012      	b.n	80071ea <UART_SetConfig+0x27e>
 80071c4:	2302      	movs	r3, #2
 80071c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80071ca:	e00e      	b.n	80071ea <UART_SetConfig+0x27e>
 80071cc:	2304      	movs	r3, #4
 80071ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80071d2:	e00a      	b.n	80071ea <UART_SetConfig+0x27e>
 80071d4:	2308      	movs	r3, #8
 80071d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80071da:	e006      	b.n	80071ea <UART_SetConfig+0x27e>
 80071dc:	2310      	movs	r3, #16
 80071de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80071e2:	e002      	b.n	80071ea <UART_SetConfig+0x27e>
 80071e4:	2310      	movs	r3, #16
 80071e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80071ea:	697b      	ldr	r3, [r7, #20]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	4a17      	ldr	r2, [pc, #92]	@ (800724c <UART_SetConfig+0x2e0>)
 80071f0:	4293      	cmp	r3, r2
 80071f2:	f040 80a8 	bne.w	8007346 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80071f6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80071fa:	2b08      	cmp	r3, #8
 80071fc:	d834      	bhi.n	8007268 <UART_SetConfig+0x2fc>
 80071fe:	a201      	add	r2, pc, #4	@ (adr r2, 8007204 <UART_SetConfig+0x298>)
 8007200:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007204:	08007229 	.word	0x08007229
 8007208:	08007269 	.word	0x08007269
 800720c:	08007231 	.word	0x08007231
 8007210:	08007269 	.word	0x08007269
 8007214:	08007237 	.word	0x08007237
 8007218:	08007269 	.word	0x08007269
 800721c:	08007269 	.word	0x08007269
 8007220:	08007269 	.word	0x08007269
 8007224:	0800723f 	.word	0x0800723f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007228:	f7fe fac6 	bl	80057b8 <HAL_RCC_GetPCLK1Freq>
 800722c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800722e:	e021      	b.n	8007274 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007230:	4b0c      	ldr	r3, [pc, #48]	@ (8007264 <UART_SetConfig+0x2f8>)
 8007232:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007234:	e01e      	b.n	8007274 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007236:	f7fe fa51 	bl	80056dc <HAL_RCC_GetSysClockFreq>
 800723a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800723c:	e01a      	b.n	8007274 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800723e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007242:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007244:	e016      	b.n	8007274 <UART_SetConfig+0x308>
 8007246:	bf00      	nop
 8007248:	cfff69f3 	.word	0xcfff69f3
 800724c:	40008000 	.word	0x40008000
 8007250:	40013800 	.word	0x40013800
 8007254:	40021000 	.word	0x40021000
 8007258:	40004400 	.word	0x40004400
 800725c:	40004800 	.word	0x40004800
 8007260:	40004c00 	.word	0x40004c00
 8007264:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8007268:	2300      	movs	r3, #0
 800726a:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800726c:	2301      	movs	r3, #1
 800726e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007272:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007274:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007276:	2b00      	cmp	r3, #0
 8007278:	f000 812a 	beq.w	80074d0 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800727c:	697b      	ldr	r3, [r7, #20]
 800727e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007280:	4a9e      	ldr	r2, [pc, #632]	@ (80074fc <UART_SetConfig+0x590>)
 8007282:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007286:	461a      	mov	r2, r3
 8007288:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800728a:	fbb3 f3f2 	udiv	r3, r3, r2
 800728e:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007290:	697b      	ldr	r3, [r7, #20]
 8007292:	685a      	ldr	r2, [r3, #4]
 8007294:	4613      	mov	r3, r2
 8007296:	005b      	lsls	r3, r3, #1
 8007298:	4413      	add	r3, r2
 800729a:	69ba      	ldr	r2, [r7, #24]
 800729c:	429a      	cmp	r2, r3
 800729e:	d305      	bcc.n	80072ac <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80072a0:	697b      	ldr	r3, [r7, #20]
 80072a2:	685b      	ldr	r3, [r3, #4]
 80072a4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80072a6:	69ba      	ldr	r2, [r7, #24]
 80072a8:	429a      	cmp	r2, r3
 80072aa:	d903      	bls.n	80072b4 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 80072ac:	2301      	movs	r3, #1
 80072ae:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80072b2:	e10d      	b.n	80074d0 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80072b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072b6:	2200      	movs	r2, #0
 80072b8:	60bb      	str	r3, [r7, #8]
 80072ba:	60fa      	str	r2, [r7, #12]
 80072bc:	697b      	ldr	r3, [r7, #20]
 80072be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072c0:	4a8e      	ldr	r2, [pc, #568]	@ (80074fc <UART_SetConfig+0x590>)
 80072c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80072c6:	b29b      	uxth	r3, r3
 80072c8:	2200      	movs	r2, #0
 80072ca:	603b      	str	r3, [r7, #0]
 80072cc:	607a      	str	r2, [r7, #4]
 80072ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 80072d2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80072d6:	f7f8 fff3 	bl	80002c0 <__aeabi_uldivmod>
 80072da:	4602      	mov	r2, r0
 80072dc:	460b      	mov	r3, r1
 80072de:	4610      	mov	r0, r2
 80072e0:	4619      	mov	r1, r3
 80072e2:	f04f 0200 	mov.w	r2, #0
 80072e6:	f04f 0300 	mov.w	r3, #0
 80072ea:	020b      	lsls	r3, r1, #8
 80072ec:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80072f0:	0202      	lsls	r2, r0, #8
 80072f2:	6979      	ldr	r1, [r7, #20]
 80072f4:	6849      	ldr	r1, [r1, #4]
 80072f6:	0849      	lsrs	r1, r1, #1
 80072f8:	2000      	movs	r0, #0
 80072fa:	460c      	mov	r4, r1
 80072fc:	4605      	mov	r5, r0
 80072fe:	eb12 0804 	adds.w	r8, r2, r4
 8007302:	eb43 0905 	adc.w	r9, r3, r5
 8007306:	697b      	ldr	r3, [r7, #20]
 8007308:	685b      	ldr	r3, [r3, #4]
 800730a:	2200      	movs	r2, #0
 800730c:	469a      	mov	sl, r3
 800730e:	4693      	mov	fp, r2
 8007310:	4652      	mov	r2, sl
 8007312:	465b      	mov	r3, fp
 8007314:	4640      	mov	r0, r8
 8007316:	4649      	mov	r1, r9
 8007318:	f7f8 ffd2 	bl	80002c0 <__aeabi_uldivmod>
 800731c:	4602      	mov	r2, r0
 800731e:	460b      	mov	r3, r1
 8007320:	4613      	mov	r3, r2
 8007322:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007324:	6a3b      	ldr	r3, [r7, #32]
 8007326:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800732a:	d308      	bcc.n	800733e <UART_SetConfig+0x3d2>
 800732c:	6a3b      	ldr	r3, [r7, #32]
 800732e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007332:	d204      	bcs.n	800733e <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8007334:	697b      	ldr	r3, [r7, #20]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	6a3a      	ldr	r2, [r7, #32]
 800733a:	60da      	str	r2, [r3, #12]
 800733c:	e0c8      	b.n	80074d0 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800733e:	2301      	movs	r3, #1
 8007340:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007344:	e0c4      	b.n	80074d0 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007346:	697b      	ldr	r3, [r7, #20]
 8007348:	69db      	ldr	r3, [r3, #28]
 800734a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800734e:	d167      	bne.n	8007420 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8007350:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007354:	2b08      	cmp	r3, #8
 8007356:	d828      	bhi.n	80073aa <UART_SetConfig+0x43e>
 8007358:	a201      	add	r2, pc, #4	@ (adr r2, 8007360 <UART_SetConfig+0x3f4>)
 800735a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800735e:	bf00      	nop
 8007360:	08007385 	.word	0x08007385
 8007364:	0800738d 	.word	0x0800738d
 8007368:	08007395 	.word	0x08007395
 800736c:	080073ab 	.word	0x080073ab
 8007370:	0800739b 	.word	0x0800739b
 8007374:	080073ab 	.word	0x080073ab
 8007378:	080073ab 	.word	0x080073ab
 800737c:	080073ab 	.word	0x080073ab
 8007380:	080073a3 	.word	0x080073a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007384:	f7fe fa18 	bl	80057b8 <HAL_RCC_GetPCLK1Freq>
 8007388:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800738a:	e014      	b.n	80073b6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800738c:	f7fe fa2a 	bl	80057e4 <HAL_RCC_GetPCLK2Freq>
 8007390:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007392:	e010      	b.n	80073b6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007394:	4b5a      	ldr	r3, [pc, #360]	@ (8007500 <UART_SetConfig+0x594>)
 8007396:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007398:	e00d      	b.n	80073b6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800739a:	f7fe f99f 	bl	80056dc <HAL_RCC_GetSysClockFreq>
 800739e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80073a0:	e009      	b.n	80073b6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80073a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80073a6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80073a8:	e005      	b.n	80073b6 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 80073aa:	2300      	movs	r3, #0
 80073ac:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80073ae:	2301      	movs	r3, #1
 80073b0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80073b4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80073b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	f000 8089 	beq.w	80074d0 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80073be:	697b      	ldr	r3, [r7, #20]
 80073c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073c2:	4a4e      	ldr	r2, [pc, #312]	@ (80074fc <UART_SetConfig+0x590>)
 80073c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80073c8:	461a      	mov	r2, r3
 80073ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073cc:	fbb3 f3f2 	udiv	r3, r3, r2
 80073d0:	005a      	lsls	r2, r3, #1
 80073d2:	697b      	ldr	r3, [r7, #20]
 80073d4:	685b      	ldr	r3, [r3, #4]
 80073d6:	085b      	lsrs	r3, r3, #1
 80073d8:	441a      	add	r2, r3
 80073da:	697b      	ldr	r3, [r7, #20]
 80073dc:	685b      	ldr	r3, [r3, #4]
 80073de:	fbb2 f3f3 	udiv	r3, r2, r3
 80073e2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80073e4:	6a3b      	ldr	r3, [r7, #32]
 80073e6:	2b0f      	cmp	r3, #15
 80073e8:	d916      	bls.n	8007418 <UART_SetConfig+0x4ac>
 80073ea:	6a3b      	ldr	r3, [r7, #32]
 80073ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80073f0:	d212      	bcs.n	8007418 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80073f2:	6a3b      	ldr	r3, [r7, #32]
 80073f4:	b29b      	uxth	r3, r3
 80073f6:	f023 030f 	bic.w	r3, r3, #15
 80073fa:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80073fc:	6a3b      	ldr	r3, [r7, #32]
 80073fe:	085b      	lsrs	r3, r3, #1
 8007400:	b29b      	uxth	r3, r3
 8007402:	f003 0307 	and.w	r3, r3, #7
 8007406:	b29a      	uxth	r2, r3
 8007408:	8bfb      	ldrh	r3, [r7, #30]
 800740a:	4313      	orrs	r3, r2
 800740c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800740e:	697b      	ldr	r3, [r7, #20]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	8bfa      	ldrh	r2, [r7, #30]
 8007414:	60da      	str	r2, [r3, #12]
 8007416:	e05b      	b.n	80074d0 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8007418:	2301      	movs	r3, #1
 800741a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800741e:	e057      	b.n	80074d0 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007420:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007424:	2b08      	cmp	r3, #8
 8007426:	d828      	bhi.n	800747a <UART_SetConfig+0x50e>
 8007428:	a201      	add	r2, pc, #4	@ (adr r2, 8007430 <UART_SetConfig+0x4c4>)
 800742a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800742e:	bf00      	nop
 8007430:	08007455 	.word	0x08007455
 8007434:	0800745d 	.word	0x0800745d
 8007438:	08007465 	.word	0x08007465
 800743c:	0800747b 	.word	0x0800747b
 8007440:	0800746b 	.word	0x0800746b
 8007444:	0800747b 	.word	0x0800747b
 8007448:	0800747b 	.word	0x0800747b
 800744c:	0800747b 	.word	0x0800747b
 8007450:	08007473 	.word	0x08007473
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007454:	f7fe f9b0 	bl	80057b8 <HAL_RCC_GetPCLK1Freq>
 8007458:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800745a:	e014      	b.n	8007486 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800745c:	f7fe f9c2 	bl	80057e4 <HAL_RCC_GetPCLK2Freq>
 8007460:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007462:	e010      	b.n	8007486 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007464:	4b26      	ldr	r3, [pc, #152]	@ (8007500 <UART_SetConfig+0x594>)
 8007466:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007468:	e00d      	b.n	8007486 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800746a:	f7fe f937 	bl	80056dc <HAL_RCC_GetSysClockFreq>
 800746e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007470:	e009      	b.n	8007486 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007472:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007476:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007478:	e005      	b.n	8007486 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800747a:	2300      	movs	r3, #0
 800747c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800747e:	2301      	movs	r3, #1
 8007480:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007484:	bf00      	nop
    }

    if (pclk != 0U)
 8007486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007488:	2b00      	cmp	r3, #0
 800748a:	d021      	beq.n	80074d0 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800748c:	697b      	ldr	r3, [r7, #20]
 800748e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007490:	4a1a      	ldr	r2, [pc, #104]	@ (80074fc <UART_SetConfig+0x590>)
 8007492:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007496:	461a      	mov	r2, r3
 8007498:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800749a:	fbb3 f2f2 	udiv	r2, r3, r2
 800749e:	697b      	ldr	r3, [r7, #20]
 80074a0:	685b      	ldr	r3, [r3, #4]
 80074a2:	085b      	lsrs	r3, r3, #1
 80074a4:	441a      	add	r2, r3
 80074a6:	697b      	ldr	r3, [r7, #20]
 80074a8:	685b      	ldr	r3, [r3, #4]
 80074aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80074ae:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80074b0:	6a3b      	ldr	r3, [r7, #32]
 80074b2:	2b0f      	cmp	r3, #15
 80074b4:	d909      	bls.n	80074ca <UART_SetConfig+0x55e>
 80074b6:	6a3b      	ldr	r3, [r7, #32]
 80074b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80074bc:	d205      	bcs.n	80074ca <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80074be:	6a3b      	ldr	r3, [r7, #32]
 80074c0:	b29a      	uxth	r2, r3
 80074c2:	697b      	ldr	r3, [r7, #20]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	60da      	str	r2, [r3, #12]
 80074c8:	e002      	b.n	80074d0 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80074ca:	2301      	movs	r3, #1
 80074cc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80074d0:	697b      	ldr	r3, [r7, #20]
 80074d2:	2201      	movs	r2, #1
 80074d4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80074d8:	697b      	ldr	r3, [r7, #20]
 80074da:	2201      	movs	r2, #1
 80074dc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80074e0:	697b      	ldr	r3, [r7, #20]
 80074e2:	2200      	movs	r2, #0
 80074e4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80074e6:	697b      	ldr	r3, [r7, #20]
 80074e8:	2200      	movs	r2, #0
 80074ea:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80074ec:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80074f0:	4618      	mov	r0, r3
 80074f2:	3730      	adds	r7, #48	@ 0x30
 80074f4:	46bd      	mov	sp, r7
 80074f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80074fa:	bf00      	nop
 80074fc:	0800d580 	.word	0x0800d580
 8007500:	00f42400 	.word	0x00f42400

08007504 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007504:	b480      	push	{r7}
 8007506:	b083      	sub	sp, #12
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007510:	f003 0308 	and.w	r3, r3, #8
 8007514:	2b00      	cmp	r3, #0
 8007516:	d00a      	beq.n	800752e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	685b      	ldr	r3, [r3, #4]
 800751e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	430a      	orrs	r2, r1
 800752c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007532:	f003 0301 	and.w	r3, r3, #1
 8007536:	2b00      	cmp	r3, #0
 8007538:	d00a      	beq.n	8007550 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	685b      	ldr	r3, [r3, #4]
 8007540:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	430a      	orrs	r2, r1
 800754e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007554:	f003 0302 	and.w	r3, r3, #2
 8007558:	2b00      	cmp	r3, #0
 800755a:	d00a      	beq.n	8007572 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	685b      	ldr	r3, [r3, #4]
 8007562:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	430a      	orrs	r2, r1
 8007570:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007576:	f003 0304 	and.w	r3, r3, #4
 800757a:	2b00      	cmp	r3, #0
 800757c:	d00a      	beq.n	8007594 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	685b      	ldr	r3, [r3, #4]
 8007584:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	430a      	orrs	r2, r1
 8007592:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007598:	f003 0310 	and.w	r3, r3, #16
 800759c:	2b00      	cmp	r3, #0
 800759e:	d00a      	beq.n	80075b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	689b      	ldr	r3, [r3, #8]
 80075a6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	430a      	orrs	r2, r1
 80075b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075ba:	f003 0320 	and.w	r3, r3, #32
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d00a      	beq.n	80075d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	689b      	ldr	r3, [r3, #8]
 80075c8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	430a      	orrs	r2, r1
 80075d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d01a      	beq.n	800761a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	685b      	ldr	r3, [r3, #4]
 80075ea:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	430a      	orrs	r2, r1
 80075f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80075fe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007602:	d10a      	bne.n	800761a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	685b      	ldr	r3, [r3, #4]
 800760a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	430a      	orrs	r2, r1
 8007618:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800761e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007622:	2b00      	cmp	r3, #0
 8007624:	d00a      	beq.n	800763c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	685b      	ldr	r3, [r3, #4]
 800762c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	430a      	orrs	r2, r1
 800763a:	605a      	str	r2, [r3, #4]
  }
}
 800763c:	bf00      	nop
 800763e:	370c      	adds	r7, #12
 8007640:	46bd      	mov	sp, r7
 8007642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007646:	4770      	bx	lr

08007648 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007648:	b580      	push	{r7, lr}
 800764a:	b098      	sub	sp, #96	@ 0x60
 800764c:	af02      	add	r7, sp, #8
 800764e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2200      	movs	r2, #0
 8007654:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007658:	f7fa fff6 	bl	8002648 <HAL_GetTick>
 800765c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	f003 0308 	and.w	r3, r3, #8
 8007668:	2b08      	cmp	r3, #8
 800766a:	d12f      	bne.n	80076cc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800766c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007670:	9300      	str	r3, [sp, #0]
 8007672:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007674:	2200      	movs	r2, #0
 8007676:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800767a:	6878      	ldr	r0, [r7, #4]
 800767c:	f000 f88e 	bl	800779c <UART_WaitOnFlagUntilTimeout>
 8007680:	4603      	mov	r3, r0
 8007682:	2b00      	cmp	r3, #0
 8007684:	d022      	beq.n	80076cc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800768c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800768e:	e853 3f00 	ldrex	r3, [r3]
 8007692:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007694:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007696:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800769a:	653b      	str	r3, [r7, #80]	@ 0x50
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	461a      	mov	r2, r3
 80076a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80076a4:	647b      	str	r3, [r7, #68]	@ 0x44
 80076a6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076a8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80076aa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80076ac:	e841 2300 	strex	r3, r2, [r1]
 80076b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80076b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d1e6      	bne.n	8007686 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2220      	movs	r2, #32
 80076bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2200      	movs	r2, #0
 80076c4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80076c8:	2303      	movs	r3, #3
 80076ca:	e063      	b.n	8007794 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	f003 0304 	and.w	r3, r3, #4
 80076d6:	2b04      	cmp	r3, #4
 80076d8:	d149      	bne.n	800776e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80076da:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80076de:	9300      	str	r3, [sp, #0]
 80076e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80076e2:	2200      	movs	r2, #0
 80076e4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80076e8:	6878      	ldr	r0, [r7, #4]
 80076ea:	f000 f857 	bl	800779c <UART_WaitOnFlagUntilTimeout>
 80076ee:	4603      	mov	r3, r0
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d03c      	beq.n	800776e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076fc:	e853 3f00 	ldrex	r3, [r3]
 8007700:	623b      	str	r3, [r7, #32]
   return(result);
 8007702:	6a3b      	ldr	r3, [r7, #32]
 8007704:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007708:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	461a      	mov	r2, r3
 8007710:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007712:	633b      	str	r3, [r7, #48]	@ 0x30
 8007714:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007716:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007718:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800771a:	e841 2300 	strex	r3, r2, [r1]
 800771e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007720:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007722:	2b00      	cmp	r3, #0
 8007724:	d1e6      	bne.n	80076f4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	3308      	adds	r3, #8
 800772c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800772e:	693b      	ldr	r3, [r7, #16]
 8007730:	e853 3f00 	ldrex	r3, [r3]
 8007734:	60fb      	str	r3, [r7, #12]
   return(result);
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	f023 0301 	bic.w	r3, r3, #1
 800773c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	3308      	adds	r3, #8
 8007744:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007746:	61fa      	str	r2, [r7, #28]
 8007748:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800774a:	69b9      	ldr	r1, [r7, #24]
 800774c:	69fa      	ldr	r2, [r7, #28]
 800774e:	e841 2300 	strex	r3, r2, [r1]
 8007752:	617b      	str	r3, [r7, #20]
   return(result);
 8007754:	697b      	ldr	r3, [r7, #20]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d1e5      	bne.n	8007726 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	2220      	movs	r2, #32
 800775e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	2200      	movs	r2, #0
 8007766:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800776a:	2303      	movs	r3, #3
 800776c:	e012      	b.n	8007794 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	2220      	movs	r2, #32
 8007772:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	2220      	movs	r2, #32
 800777a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	2200      	movs	r2, #0
 8007782:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2200      	movs	r2, #0
 8007788:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	2200      	movs	r2, #0
 800778e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007792:	2300      	movs	r3, #0
}
 8007794:	4618      	mov	r0, r3
 8007796:	3758      	adds	r7, #88	@ 0x58
 8007798:	46bd      	mov	sp, r7
 800779a:	bd80      	pop	{r7, pc}

0800779c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800779c:	b580      	push	{r7, lr}
 800779e:	b084      	sub	sp, #16
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	60f8      	str	r0, [r7, #12]
 80077a4:	60b9      	str	r1, [r7, #8]
 80077a6:	603b      	str	r3, [r7, #0]
 80077a8:	4613      	mov	r3, r2
 80077aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80077ac:	e04f      	b.n	800784e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80077ae:	69bb      	ldr	r3, [r7, #24]
 80077b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077b4:	d04b      	beq.n	800784e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80077b6:	f7fa ff47 	bl	8002648 <HAL_GetTick>
 80077ba:	4602      	mov	r2, r0
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	1ad3      	subs	r3, r2, r3
 80077c0:	69ba      	ldr	r2, [r7, #24]
 80077c2:	429a      	cmp	r2, r3
 80077c4:	d302      	bcc.n	80077cc <UART_WaitOnFlagUntilTimeout+0x30>
 80077c6:	69bb      	ldr	r3, [r7, #24]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d101      	bne.n	80077d0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80077cc:	2303      	movs	r3, #3
 80077ce:	e04e      	b.n	800786e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	f003 0304 	and.w	r3, r3, #4
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d037      	beq.n	800784e <UART_WaitOnFlagUntilTimeout+0xb2>
 80077de:	68bb      	ldr	r3, [r7, #8]
 80077e0:	2b80      	cmp	r3, #128	@ 0x80
 80077e2:	d034      	beq.n	800784e <UART_WaitOnFlagUntilTimeout+0xb2>
 80077e4:	68bb      	ldr	r3, [r7, #8]
 80077e6:	2b40      	cmp	r3, #64	@ 0x40
 80077e8:	d031      	beq.n	800784e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	69db      	ldr	r3, [r3, #28]
 80077f0:	f003 0308 	and.w	r3, r3, #8
 80077f4:	2b08      	cmp	r3, #8
 80077f6:	d110      	bne.n	800781a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	2208      	movs	r2, #8
 80077fe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007800:	68f8      	ldr	r0, [r7, #12]
 8007802:	f000 f920 	bl	8007a46 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	2208      	movs	r2, #8
 800780a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	2200      	movs	r2, #0
 8007812:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8007816:	2301      	movs	r3, #1
 8007818:	e029      	b.n	800786e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	69db      	ldr	r3, [r3, #28]
 8007820:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007824:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007828:	d111      	bne.n	800784e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007832:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007834:	68f8      	ldr	r0, [r7, #12]
 8007836:	f000 f906 	bl	8007a46 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	2220      	movs	r2, #32
 800783e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	2200      	movs	r2, #0
 8007846:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800784a:	2303      	movs	r3, #3
 800784c:	e00f      	b.n	800786e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	69da      	ldr	r2, [r3, #28]
 8007854:	68bb      	ldr	r3, [r7, #8]
 8007856:	4013      	ands	r3, r2
 8007858:	68ba      	ldr	r2, [r7, #8]
 800785a:	429a      	cmp	r2, r3
 800785c:	bf0c      	ite	eq
 800785e:	2301      	moveq	r3, #1
 8007860:	2300      	movne	r3, #0
 8007862:	b2db      	uxtb	r3, r3
 8007864:	461a      	mov	r2, r3
 8007866:	79fb      	ldrb	r3, [r7, #7]
 8007868:	429a      	cmp	r2, r3
 800786a:	d0a0      	beq.n	80077ae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800786c:	2300      	movs	r3, #0
}
 800786e:	4618      	mov	r0, r3
 8007870:	3710      	adds	r7, #16
 8007872:	46bd      	mov	sp, r7
 8007874:	bd80      	pop	{r7, pc}
	...

08007878 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007878:	b580      	push	{r7, lr}
 800787a:	b096      	sub	sp, #88	@ 0x58
 800787c:	af00      	add	r7, sp, #0
 800787e:	60f8      	str	r0, [r7, #12]
 8007880:	60b9      	str	r1, [r7, #8]
 8007882:	4613      	mov	r3, r2
 8007884:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	68ba      	ldr	r2, [r7, #8]
 800788a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	88fa      	ldrh	r2, [r7, #6]
 8007890:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	2200      	movs	r2, #0
 8007898:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	2222      	movs	r2, #34	@ 0x22
 80078a0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d02d      	beq.n	800790a <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80078b4:	4a40      	ldr	r2, [pc, #256]	@ (80079b8 <UART_Start_Receive_DMA+0x140>)
 80078b6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80078be:	4a3f      	ldr	r2, [pc, #252]	@ (80079bc <UART_Start_Receive_DMA+0x144>)
 80078c0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80078c8:	4a3d      	ldr	r2, [pc, #244]	@ (80079c0 <UART_Start_Receive_DMA+0x148>)
 80078ca:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80078d2:	2200      	movs	r2, #0
 80078d4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	3324      	adds	r3, #36	@ 0x24
 80078e2:	4619      	mov	r1, r3
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80078e8:	461a      	mov	r2, r3
 80078ea:	88fb      	ldrh	r3, [r7, #6]
 80078ec:	f7fb f892 	bl	8002a14 <HAL_DMA_Start_IT>
 80078f0:	4603      	mov	r3, r0
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d009      	beq.n	800790a <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	2210      	movs	r2, #16
 80078fa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	2220      	movs	r2, #32
 8007902:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 8007906:	2301      	movs	r3, #1
 8007908:	e051      	b.n	80079ae <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	691b      	ldr	r3, [r3, #16]
 800790e:	2b00      	cmp	r3, #0
 8007910:	d018      	beq.n	8007944 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007918:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800791a:	e853 3f00 	ldrex	r3, [r3]
 800791e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007920:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007922:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007926:	657b      	str	r3, [r7, #84]	@ 0x54
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	461a      	mov	r2, r3
 800792e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007930:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007932:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007934:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007936:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007938:	e841 2300 	strex	r3, r2, [r1]
 800793c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800793e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007940:	2b00      	cmp	r3, #0
 8007942:	d1e6      	bne.n	8007912 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	3308      	adds	r3, #8
 800794a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800794c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800794e:	e853 3f00 	ldrex	r3, [r3]
 8007952:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007956:	f043 0301 	orr.w	r3, r3, #1
 800795a:	653b      	str	r3, [r7, #80]	@ 0x50
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	3308      	adds	r3, #8
 8007962:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007964:	637a      	str	r2, [r7, #52]	@ 0x34
 8007966:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007968:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800796a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800796c:	e841 2300 	strex	r3, r2, [r1]
 8007970:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8007972:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007974:	2b00      	cmp	r3, #0
 8007976:	d1e5      	bne.n	8007944 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	3308      	adds	r3, #8
 800797e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007980:	697b      	ldr	r3, [r7, #20]
 8007982:	e853 3f00 	ldrex	r3, [r3]
 8007986:	613b      	str	r3, [r7, #16]
   return(result);
 8007988:	693b      	ldr	r3, [r7, #16]
 800798a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800798e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	3308      	adds	r3, #8
 8007996:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007998:	623a      	str	r2, [r7, #32]
 800799a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800799c:	69f9      	ldr	r1, [r7, #28]
 800799e:	6a3a      	ldr	r2, [r7, #32]
 80079a0:	e841 2300 	strex	r3, r2, [r1]
 80079a4:	61bb      	str	r3, [r7, #24]
   return(result);
 80079a6:	69bb      	ldr	r3, [r7, #24]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d1e5      	bne.n	8007978 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 80079ac:	2300      	movs	r3, #0
}
 80079ae:	4618      	mov	r0, r3
 80079b0:	3758      	adds	r7, #88	@ 0x58
 80079b2:	46bd      	mov	sp, r7
 80079b4:	bd80      	pop	{r7, pc}
 80079b6:	bf00      	nop
 80079b8:	08007b13 	.word	0x08007b13
 80079bc:	08007c3f 	.word	0x08007c3f
 80079c0:	08007c7d 	.word	0x08007c7d

080079c4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80079c4:	b480      	push	{r7}
 80079c6:	b08f      	sub	sp, #60	@ 0x3c
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079d2:	6a3b      	ldr	r3, [r7, #32]
 80079d4:	e853 3f00 	ldrex	r3, [r3]
 80079d8:	61fb      	str	r3, [r7, #28]
   return(result);
 80079da:	69fb      	ldr	r3, [r7, #28]
 80079dc:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80079e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	461a      	mov	r2, r3
 80079e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80079ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80079ec:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079ee:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80079f0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80079f2:	e841 2300 	strex	r3, r2, [r1]
 80079f6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80079f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d1e6      	bne.n	80079cc <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	3308      	adds	r3, #8
 8007a04:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	e853 3f00 	ldrex	r3, [r3]
 8007a0c:	60bb      	str	r3, [r7, #8]
   return(result);
 8007a0e:	68bb      	ldr	r3, [r7, #8]
 8007a10:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8007a14:	633b      	str	r3, [r7, #48]	@ 0x30
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	3308      	adds	r3, #8
 8007a1c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007a1e:	61ba      	str	r2, [r7, #24]
 8007a20:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a22:	6979      	ldr	r1, [r7, #20]
 8007a24:	69ba      	ldr	r2, [r7, #24]
 8007a26:	e841 2300 	strex	r3, r2, [r1]
 8007a2a:	613b      	str	r3, [r7, #16]
   return(result);
 8007a2c:	693b      	ldr	r3, [r7, #16]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d1e5      	bne.n	80079fe <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	2220      	movs	r2, #32
 8007a36:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8007a3a:	bf00      	nop
 8007a3c:	373c      	adds	r7, #60	@ 0x3c
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a44:	4770      	bx	lr

08007a46 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007a46:	b480      	push	{r7}
 8007a48:	b095      	sub	sp, #84	@ 0x54
 8007a4a:	af00      	add	r7, sp, #0
 8007a4c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a56:	e853 3f00 	ldrex	r3, [r3]
 8007a5a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007a5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a5e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007a62:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	461a      	mov	r2, r3
 8007a6a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007a6c:	643b      	str	r3, [r7, #64]	@ 0x40
 8007a6e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a70:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007a72:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007a74:	e841 2300 	strex	r3, r2, [r1]
 8007a78:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007a7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d1e6      	bne.n	8007a4e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	3308      	adds	r3, #8
 8007a86:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a88:	6a3b      	ldr	r3, [r7, #32]
 8007a8a:	e853 3f00 	ldrex	r3, [r3]
 8007a8e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007a90:	69fb      	ldr	r3, [r7, #28]
 8007a92:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007a96:	f023 0301 	bic.w	r3, r3, #1
 8007a9a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	3308      	adds	r3, #8
 8007aa2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007aa4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007aa6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aa8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007aaa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007aac:	e841 2300 	strex	r3, r2, [r1]
 8007ab0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007ab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d1e3      	bne.n	8007a80 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007abc:	2b01      	cmp	r3, #1
 8007abe:	d118      	bne.n	8007af2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	e853 3f00 	ldrex	r3, [r3]
 8007acc:	60bb      	str	r3, [r7, #8]
   return(result);
 8007ace:	68bb      	ldr	r3, [r7, #8]
 8007ad0:	f023 0310 	bic.w	r3, r3, #16
 8007ad4:	647b      	str	r3, [r7, #68]	@ 0x44
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	461a      	mov	r2, r3
 8007adc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007ade:	61bb      	str	r3, [r7, #24]
 8007ae0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ae2:	6979      	ldr	r1, [r7, #20]
 8007ae4:	69ba      	ldr	r2, [r7, #24]
 8007ae6:	e841 2300 	strex	r3, r2, [r1]
 8007aea:	613b      	str	r3, [r7, #16]
   return(result);
 8007aec:	693b      	ldr	r3, [r7, #16]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d1e6      	bne.n	8007ac0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	2220      	movs	r2, #32
 8007af6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	2200      	movs	r2, #0
 8007afe:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	2200      	movs	r2, #0
 8007b04:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007b06:	bf00      	nop
 8007b08:	3754      	adds	r7, #84	@ 0x54
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b10:	4770      	bx	lr

08007b12 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007b12:	b580      	push	{r7, lr}
 8007b14:	b09c      	sub	sp, #112	@ 0x70
 8007b16:	af00      	add	r7, sp, #0
 8007b18:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b1e:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	f003 0320 	and.w	r3, r3, #32
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d171      	bne.n	8007c12 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8007b2e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007b30:	2200      	movs	r2, #0
 8007b32:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007b36:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b3c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007b3e:	e853 3f00 	ldrex	r3, [r3]
 8007b42:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007b44:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007b46:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007b4a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007b4c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	461a      	mov	r2, r3
 8007b52:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007b54:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007b56:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b58:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007b5a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007b5c:	e841 2300 	strex	r3, r2, [r1]
 8007b60:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007b62:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d1e6      	bne.n	8007b36 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b68:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	3308      	adds	r3, #8
 8007b6e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b72:	e853 3f00 	ldrex	r3, [r3]
 8007b76:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007b78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b7a:	f023 0301 	bic.w	r3, r3, #1
 8007b7e:	667b      	str	r3, [r7, #100]	@ 0x64
 8007b80:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	3308      	adds	r3, #8
 8007b86:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007b88:	647a      	str	r2, [r7, #68]	@ 0x44
 8007b8a:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b8c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007b8e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007b90:	e841 2300 	strex	r3, r2, [r1]
 8007b94:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007b96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d1e5      	bne.n	8007b68 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007b9c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	3308      	adds	r3, #8
 8007ba2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ba4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ba6:	e853 3f00 	ldrex	r3, [r3]
 8007baa:	623b      	str	r3, [r7, #32]
   return(result);
 8007bac:	6a3b      	ldr	r3, [r7, #32]
 8007bae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007bb2:	663b      	str	r3, [r7, #96]	@ 0x60
 8007bb4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	3308      	adds	r3, #8
 8007bba:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007bbc:	633a      	str	r2, [r7, #48]	@ 0x30
 8007bbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bc0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007bc2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007bc4:	e841 2300 	strex	r3, r2, [r1]
 8007bc8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007bca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d1e5      	bne.n	8007b9c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007bd0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007bd2:	2220      	movs	r2, #32
 8007bd4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007bd8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007bda:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007bdc:	2b01      	cmp	r3, #1
 8007bde:	d118      	bne.n	8007c12 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007be0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007be6:	693b      	ldr	r3, [r7, #16]
 8007be8:	e853 3f00 	ldrex	r3, [r3]
 8007bec:	60fb      	str	r3, [r7, #12]
   return(result);
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	f023 0310 	bic.w	r3, r3, #16
 8007bf4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007bf6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	461a      	mov	r2, r3
 8007bfc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007bfe:	61fb      	str	r3, [r7, #28]
 8007c00:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c02:	69b9      	ldr	r1, [r7, #24]
 8007c04:	69fa      	ldr	r2, [r7, #28]
 8007c06:	e841 2300 	strex	r3, r2, [r1]
 8007c0a:	617b      	str	r3, [r7, #20]
   return(result);
 8007c0c:	697b      	ldr	r3, [r7, #20]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d1e6      	bne.n	8007be0 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007c12:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007c14:	2200      	movs	r2, #0
 8007c16:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c18:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007c1a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007c1c:	2b01      	cmp	r3, #1
 8007c1e:	d107      	bne.n	8007c30 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007c20:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007c22:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007c26:	4619      	mov	r1, r3
 8007c28:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8007c2a:	f7fa f947 	bl	8001ebc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007c2e:	e002      	b.n	8007c36 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8007c30:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8007c32:	f7ff f97d 	bl	8006f30 <HAL_UART_RxCpltCallback>
}
 8007c36:	bf00      	nop
 8007c38:	3770      	adds	r7, #112	@ 0x70
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	bd80      	pop	{r7, pc}

08007c3e <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007c3e:	b580      	push	{r7, lr}
 8007c40:	b084      	sub	sp, #16
 8007c42:	af00      	add	r7, sp, #0
 8007c44:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c4a:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	2201      	movs	r2, #1
 8007c50:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007c56:	2b01      	cmp	r3, #1
 8007c58:	d109      	bne.n	8007c6e <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007c60:	085b      	lsrs	r3, r3, #1
 8007c62:	b29b      	uxth	r3, r3
 8007c64:	4619      	mov	r1, r3
 8007c66:	68f8      	ldr	r0, [r7, #12]
 8007c68:	f7fa f928 	bl	8001ebc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007c6c:	e002      	b.n	8007c74 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8007c6e:	68f8      	ldr	r0, [r7, #12]
 8007c70:	f7ff f968 	bl	8006f44 <HAL_UART_RxHalfCpltCallback>
}
 8007c74:	bf00      	nop
 8007c76:	3710      	adds	r7, #16
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	bd80      	pop	{r7, pc}

08007c7c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007c7c:	b580      	push	{r7, lr}
 8007c7e:	b086      	sub	sp, #24
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c88:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8007c8a:	697b      	ldr	r3, [r7, #20]
 8007c8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c90:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8007c92:	697b      	ldr	r3, [r7, #20]
 8007c94:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007c98:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8007c9a:	697b      	ldr	r3, [r7, #20]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	689b      	ldr	r3, [r3, #8]
 8007ca0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007ca4:	2b80      	cmp	r3, #128	@ 0x80
 8007ca6:	d109      	bne.n	8007cbc <UART_DMAError+0x40>
 8007ca8:	693b      	ldr	r3, [r7, #16]
 8007caa:	2b21      	cmp	r3, #33	@ 0x21
 8007cac:	d106      	bne.n	8007cbc <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8007cae:	697b      	ldr	r3, [r7, #20]
 8007cb0:	2200      	movs	r2, #0
 8007cb2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8007cb6:	6978      	ldr	r0, [r7, #20]
 8007cb8:	f7ff fe84 	bl	80079c4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007cbc:	697b      	ldr	r3, [r7, #20]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	689b      	ldr	r3, [r3, #8]
 8007cc2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007cc6:	2b40      	cmp	r3, #64	@ 0x40
 8007cc8:	d109      	bne.n	8007cde <UART_DMAError+0x62>
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	2b22      	cmp	r3, #34	@ 0x22
 8007cce:	d106      	bne.n	8007cde <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8007cd0:	697b      	ldr	r3, [r7, #20]
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8007cd8:	6978      	ldr	r0, [r7, #20]
 8007cda:	f7ff feb4 	bl	8007a46 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007cde:	697b      	ldr	r3, [r7, #20]
 8007ce0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ce4:	f043 0210 	orr.w	r2, r3, #16
 8007ce8:	697b      	ldr	r3, [r7, #20]
 8007cea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007cee:	6978      	ldr	r0, [r7, #20]
 8007cf0:	f7ff f932 	bl	8006f58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007cf4:	bf00      	nop
 8007cf6:	3718      	adds	r7, #24
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	bd80      	pop	{r7, pc}

08007cfc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b084      	sub	sp, #16
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d08:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007d12:	68f8      	ldr	r0, [r7, #12]
 8007d14:	f7ff f920 	bl	8006f58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007d18:	bf00      	nop
 8007d1a:	3710      	adds	r7, #16
 8007d1c:	46bd      	mov	sp, r7
 8007d1e:	bd80      	pop	{r7, pc}

08007d20 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007d20:	b480      	push	{r7}
 8007d22:	b08f      	sub	sp, #60	@ 0x3c
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d2e:	2b21      	cmp	r3, #33	@ 0x21
 8007d30:	d14c      	bne.n	8007dcc <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007d38:	b29b      	uxth	r3, r3
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d132      	bne.n	8007da4 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d44:	6a3b      	ldr	r3, [r7, #32]
 8007d46:	e853 3f00 	ldrex	r3, [r3]
 8007d4a:	61fb      	str	r3, [r7, #28]
   return(result);
 8007d4c:	69fb      	ldr	r3, [r7, #28]
 8007d4e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007d52:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	461a      	mov	r2, r3
 8007d5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007d5e:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d60:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007d62:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007d64:	e841 2300 	strex	r3, r2, [r1]
 8007d68:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007d6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d1e6      	bne.n	8007d3e <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	e853 3f00 	ldrex	r3, [r3]
 8007d7c:	60bb      	str	r3, [r7, #8]
   return(result);
 8007d7e:	68bb      	ldr	r3, [r7, #8]
 8007d80:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007d84:	633b      	str	r3, [r7, #48]	@ 0x30
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	461a      	mov	r2, r3
 8007d8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d8e:	61bb      	str	r3, [r7, #24]
 8007d90:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d92:	6979      	ldr	r1, [r7, #20]
 8007d94:	69ba      	ldr	r2, [r7, #24]
 8007d96:	e841 2300 	strex	r3, r2, [r1]
 8007d9a:	613b      	str	r3, [r7, #16]
   return(result);
 8007d9c:	693b      	ldr	r3, [r7, #16]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d1e6      	bne.n	8007d70 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8007da2:	e013      	b.n	8007dcc <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007da8:	781a      	ldrb	r2, [r3, #0]
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007db4:	1c5a      	adds	r2, r3, #1
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007dc0:	b29b      	uxth	r3, r3
 8007dc2:	3b01      	subs	r3, #1
 8007dc4:	b29a      	uxth	r2, r3
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 8007dcc:	bf00      	nop
 8007dce:	373c      	adds	r7, #60	@ 0x3c
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd6:	4770      	bx	lr

08007dd8 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007dd8:	b480      	push	{r7}
 8007dda:	b091      	sub	sp, #68	@ 0x44
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007de6:	2b21      	cmp	r3, #33	@ 0x21
 8007de8:	d151      	bne.n	8007e8e <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007df0:	b29b      	uxth	r3, r3
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d132      	bne.n	8007e5c <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dfe:	e853 3f00 	ldrex	r3, [r3]
 8007e02:	623b      	str	r3, [r7, #32]
   return(result);
 8007e04:	6a3b      	ldr	r3, [r7, #32]
 8007e06:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007e0a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	461a      	mov	r2, r3
 8007e12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e14:	633b      	str	r3, [r7, #48]	@ 0x30
 8007e16:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e18:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007e1a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007e1c:	e841 2300 	strex	r3, r2, [r1]
 8007e20:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007e22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d1e6      	bne.n	8007df6 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e2e:	693b      	ldr	r3, [r7, #16]
 8007e30:	e853 3f00 	ldrex	r3, [r3]
 8007e34:	60fb      	str	r3, [r7, #12]
   return(result);
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007e3c:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	461a      	mov	r2, r3
 8007e44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e46:	61fb      	str	r3, [r7, #28]
 8007e48:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e4a:	69b9      	ldr	r1, [r7, #24]
 8007e4c:	69fa      	ldr	r2, [r7, #28]
 8007e4e:	e841 2300 	strex	r3, r2, [r1]
 8007e52:	617b      	str	r3, [r7, #20]
   return(result);
 8007e54:	697b      	ldr	r3, [r7, #20]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d1e6      	bne.n	8007e28 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8007e5a:	e018      	b.n	8007e8e <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e60:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8007e62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007e64:	881b      	ldrh	r3, [r3, #0]
 8007e66:	461a      	mov	r2, r3
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007e70:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e76:	1c9a      	adds	r2, r3, #2
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007e82:	b29b      	uxth	r3, r3
 8007e84:	3b01      	subs	r3, #1
 8007e86:	b29a      	uxth	r2, r3
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 8007e8e:	bf00      	nop
 8007e90:	3744      	adds	r7, #68	@ 0x44
 8007e92:	46bd      	mov	sp, r7
 8007e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e98:	4770      	bx	lr

08007e9a <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007e9a:	b480      	push	{r7}
 8007e9c:	b091      	sub	sp, #68	@ 0x44
 8007e9e:	af00      	add	r7, sp, #0
 8007ea0:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ea8:	2b21      	cmp	r3, #33	@ 0x21
 8007eaa:	d160      	bne.n	8007f6e <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007eb2:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8007eb4:	e057      	b.n	8007f66 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007ebc:	b29b      	uxth	r3, r3
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d133      	bne.n	8007f2a <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	3308      	adds	r3, #8
 8007ec8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007eca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ecc:	e853 3f00 	ldrex	r3, [r3]
 8007ed0:	623b      	str	r3, [r7, #32]
   return(result);
 8007ed2:	6a3b      	ldr	r3, [r7, #32]
 8007ed4:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8007ed8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	3308      	adds	r3, #8
 8007ee0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007ee2:	633a      	str	r2, [r7, #48]	@ 0x30
 8007ee4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ee6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007ee8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007eea:	e841 2300 	strex	r3, r2, [r1]
 8007eee:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007ef0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d1e5      	bne.n	8007ec2 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007efc:	693b      	ldr	r3, [r7, #16]
 8007efe:	e853 3f00 	ldrex	r3, [r3]
 8007f02:	60fb      	str	r3, [r7, #12]
   return(result);
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007f0a:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	461a      	mov	r2, r3
 8007f12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f14:	61fb      	str	r3, [r7, #28]
 8007f16:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f18:	69b9      	ldr	r1, [r7, #24]
 8007f1a:	69fa      	ldr	r2, [r7, #28]
 8007f1c:	e841 2300 	strex	r3, r2, [r1]
 8007f20:	617b      	str	r3, [r7, #20]
   return(result);
 8007f22:	697b      	ldr	r3, [r7, #20]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d1e6      	bne.n	8007ef6 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8007f28:	e021      	b.n	8007f6e <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	69db      	ldr	r3, [r3, #28]
 8007f30:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d013      	beq.n	8007f60 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007f3c:	781a      	ldrb	r2, [r3, #0]
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007f48:	1c5a      	adds	r2, r3, #1
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007f54:	b29b      	uxth	r3, r3
 8007f56:	3b01      	subs	r3, #1
 8007f58:	b29a      	uxth	r2, r3
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8007f60:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8007f62:	3b01      	subs	r3, #1
 8007f64:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8007f66:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d1a4      	bne.n	8007eb6 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8007f6c:	e7ff      	b.n	8007f6e <UART_TxISR_8BIT_FIFOEN+0xd4>
 8007f6e:	bf00      	nop
 8007f70:	3744      	adds	r7, #68	@ 0x44
 8007f72:	46bd      	mov	sp, r7
 8007f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f78:	4770      	bx	lr

08007f7a <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007f7a:	b480      	push	{r7}
 8007f7c:	b091      	sub	sp, #68	@ 0x44
 8007f7e:	af00      	add	r7, sp, #0
 8007f80:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007f88:	2b21      	cmp	r3, #33	@ 0x21
 8007f8a:	d165      	bne.n	8008058 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007f92:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8007f94:	e05c      	b.n	8008050 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007f9c:	b29b      	uxth	r3, r3
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d133      	bne.n	800800a <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	3308      	adds	r3, #8
 8007fa8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007faa:	6a3b      	ldr	r3, [r7, #32]
 8007fac:	e853 3f00 	ldrex	r3, [r3]
 8007fb0:	61fb      	str	r3, [r7, #28]
   return(result);
 8007fb2:	69fb      	ldr	r3, [r7, #28]
 8007fb4:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8007fb8:	637b      	str	r3, [r7, #52]	@ 0x34
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	3308      	adds	r3, #8
 8007fc0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007fc2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007fc4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fc6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007fc8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007fca:	e841 2300 	strex	r3, r2, [r1]
 8007fce:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007fd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d1e5      	bne.n	8007fa2 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	e853 3f00 	ldrex	r3, [r3]
 8007fe2:	60bb      	str	r3, [r7, #8]
   return(result);
 8007fe4:	68bb      	ldr	r3, [r7, #8]
 8007fe6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007fea:	633b      	str	r3, [r7, #48]	@ 0x30
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	461a      	mov	r2, r3
 8007ff2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ff4:	61bb      	str	r3, [r7, #24]
 8007ff6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ff8:	6979      	ldr	r1, [r7, #20]
 8007ffa:	69ba      	ldr	r2, [r7, #24]
 8007ffc:	e841 2300 	strex	r3, r2, [r1]
 8008000:	613b      	str	r3, [r7, #16]
   return(result);
 8008002:	693b      	ldr	r3, [r7, #16]
 8008004:	2b00      	cmp	r3, #0
 8008006:	d1e6      	bne.n	8007fd6 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8008008:	e026      	b.n	8008058 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	69db      	ldr	r3, [r3, #28]
 8008010:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008014:	2b00      	cmp	r3, #0
 8008016:	d018      	beq.n	800804a <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800801c:	63bb      	str	r3, [r7, #56]	@ 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800801e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008020:	881b      	ldrh	r3, [r3, #0]
 8008022:	461a      	mov	r2, r3
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800802c:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008032:	1c9a      	adds	r2, r3, #2
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800803e:	b29b      	uxth	r3, r3
 8008040:	3b01      	subs	r3, #1
 8008042:	b29a      	uxth	r2, r3
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800804a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800804c:	3b01      	subs	r3, #1
 800804e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8008050:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8008052:	2b00      	cmp	r3, #0
 8008054:	d19f      	bne.n	8007f96 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8008056:	e7ff      	b.n	8008058 <UART_TxISR_16BIT_FIFOEN+0xde>
 8008058:	bf00      	nop
 800805a:	3744      	adds	r7, #68	@ 0x44
 800805c:	46bd      	mov	sp, r7
 800805e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008062:	4770      	bx	lr

08008064 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008064:	b580      	push	{r7, lr}
 8008066:	b088      	sub	sp, #32
 8008068:	af00      	add	r7, sp, #0
 800806a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	e853 3f00 	ldrex	r3, [r3]
 8008078:	60bb      	str	r3, [r7, #8]
   return(result);
 800807a:	68bb      	ldr	r3, [r7, #8]
 800807c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008080:	61fb      	str	r3, [r7, #28]
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	461a      	mov	r2, r3
 8008088:	69fb      	ldr	r3, [r7, #28]
 800808a:	61bb      	str	r3, [r7, #24]
 800808c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800808e:	6979      	ldr	r1, [r7, #20]
 8008090:	69ba      	ldr	r2, [r7, #24]
 8008092:	e841 2300 	strex	r3, r2, [r1]
 8008096:	613b      	str	r3, [r7, #16]
   return(result);
 8008098:	693b      	ldr	r3, [r7, #16]
 800809a:	2b00      	cmp	r3, #0
 800809c:	d1e6      	bne.n	800806c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	2220      	movs	r2, #32
 80080a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	2200      	movs	r2, #0
 80080aa:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80080ac:	6878      	ldr	r0, [r7, #4]
 80080ae:	f7f9 ff77 	bl	8001fa0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80080b2:	bf00      	nop
 80080b4:	3720      	adds	r7, #32
 80080b6:	46bd      	mov	sp, r7
 80080b8:	bd80      	pop	{r7, pc}

080080ba <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80080ba:	b480      	push	{r7}
 80080bc:	b083      	sub	sp, #12
 80080be:	af00      	add	r7, sp, #0
 80080c0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80080c2:	bf00      	nop
 80080c4:	370c      	adds	r7, #12
 80080c6:	46bd      	mov	sp, r7
 80080c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080cc:	4770      	bx	lr

080080ce <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80080ce:	b480      	push	{r7}
 80080d0:	b083      	sub	sp, #12
 80080d2:	af00      	add	r7, sp, #0
 80080d4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80080d6:	bf00      	nop
 80080d8:	370c      	adds	r7, #12
 80080da:	46bd      	mov	sp, r7
 80080dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e0:	4770      	bx	lr

080080e2 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80080e2:	b480      	push	{r7}
 80080e4:	b083      	sub	sp, #12
 80080e6:	af00      	add	r7, sp, #0
 80080e8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80080ea:	bf00      	nop
 80080ec:	370c      	adds	r7, #12
 80080ee:	46bd      	mov	sp, r7
 80080f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f4:	4770      	bx	lr

080080f6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80080f6:	b480      	push	{r7}
 80080f8:	b085      	sub	sp, #20
 80080fa:	af00      	add	r7, sp, #0
 80080fc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008104:	2b01      	cmp	r3, #1
 8008106:	d101      	bne.n	800810c <HAL_UARTEx_DisableFifoMode+0x16>
 8008108:	2302      	movs	r3, #2
 800810a:	e027      	b.n	800815c <HAL_UARTEx_DisableFifoMode+0x66>
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	2201      	movs	r2, #1
 8008110:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2224      	movs	r2, #36	@ 0x24
 8008118:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	681a      	ldr	r2, [r3, #0]
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	f022 0201 	bic.w	r2, r2, #1
 8008132:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800813a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	2200      	movs	r2, #0
 8008140:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	68fa      	ldr	r2, [r7, #12]
 8008148:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	2220      	movs	r2, #32
 800814e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	2200      	movs	r2, #0
 8008156:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800815a:	2300      	movs	r3, #0
}
 800815c:	4618      	mov	r0, r3
 800815e:	3714      	adds	r7, #20
 8008160:	46bd      	mov	sp, r7
 8008162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008166:	4770      	bx	lr

08008168 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008168:	b580      	push	{r7, lr}
 800816a:	b084      	sub	sp, #16
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
 8008170:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008178:	2b01      	cmp	r3, #1
 800817a:	d101      	bne.n	8008180 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800817c:	2302      	movs	r3, #2
 800817e:	e02d      	b.n	80081dc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	2201      	movs	r2, #1
 8008184:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	2224      	movs	r2, #36	@ 0x24
 800818c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	681a      	ldr	r2, [r3, #0]
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	f022 0201 	bic.w	r2, r2, #1
 80081a6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	689b      	ldr	r3, [r3, #8]
 80081ae:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	683a      	ldr	r2, [r7, #0]
 80081b8:	430a      	orrs	r2, r1
 80081ba:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80081bc:	6878      	ldr	r0, [r7, #4]
 80081be:	f000 f8a3 	bl	8008308 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	68fa      	ldr	r2, [r7, #12]
 80081c8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	2220      	movs	r2, #32
 80081ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	2200      	movs	r2, #0
 80081d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80081da:	2300      	movs	r3, #0
}
 80081dc:	4618      	mov	r0, r3
 80081de:	3710      	adds	r7, #16
 80081e0:	46bd      	mov	sp, r7
 80081e2:	bd80      	pop	{r7, pc}

080081e4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b084      	sub	sp, #16
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]
 80081ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80081f4:	2b01      	cmp	r3, #1
 80081f6:	d101      	bne.n	80081fc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80081f8:	2302      	movs	r3, #2
 80081fa:	e02d      	b.n	8008258 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	2201      	movs	r2, #1
 8008200:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	2224      	movs	r2, #36	@ 0x24
 8008208:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	681a      	ldr	r2, [r3, #0]
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	f022 0201 	bic.w	r2, r2, #1
 8008222:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	689b      	ldr	r3, [r3, #8]
 800822a:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	683a      	ldr	r2, [r7, #0]
 8008234:	430a      	orrs	r2, r1
 8008236:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008238:	6878      	ldr	r0, [r7, #4]
 800823a:	f000 f865 	bl	8008308 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	68fa      	ldr	r2, [r7, #12]
 8008244:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	2220      	movs	r2, #32
 800824a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	2200      	movs	r2, #0
 8008252:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008256:	2300      	movs	r3, #0
}
 8008258:	4618      	mov	r0, r3
 800825a:	3710      	adds	r7, #16
 800825c:	46bd      	mov	sp, r7
 800825e:	bd80      	pop	{r7, pc}

08008260 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008260:	b580      	push	{r7, lr}
 8008262:	b08c      	sub	sp, #48	@ 0x30
 8008264:	af00      	add	r7, sp, #0
 8008266:	60f8      	str	r0, [r7, #12]
 8008268:	60b9      	str	r1, [r7, #8]
 800826a:	4613      	mov	r3, r2
 800826c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008274:	2b20      	cmp	r3, #32
 8008276:	d142      	bne.n	80082fe <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8008278:	68bb      	ldr	r3, [r7, #8]
 800827a:	2b00      	cmp	r3, #0
 800827c:	d002      	beq.n	8008284 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 800827e:	88fb      	ldrh	r3, [r7, #6]
 8008280:	2b00      	cmp	r3, #0
 8008282:	d101      	bne.n	8008288 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 8008284:	2301      	movs	r3, #1
 8008286:	e03b      	b.n	8008300 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	2201      	movs	r2, #1
 800828c:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	2200      	movs	r2, #0
 8008292:	671a      	str	r2, [r3, #112]	@ 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8008294:	88fb      	ldrh	r3, [r7, #6]
 8008296:	461a      	mov	r2, r3
 8008298:	68b9      	ldr	r1, [r7, #8]
 800829a:	68f8      	ldr	r0, [r7, #12]
 800829c:	f7ff faec 	bl	8007878 <UART_Start_Receive_DMA>
 80082a0:	4603      	mov	r3, r0
 80082a2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80082a6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d124      	bne.n	80082f8 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80082b2:	2b01      	cmp	r3, #1
 80082b4:	d11d      	bne.n	80082f2 <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	2210      	movs	r2, #16
 80082bc:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082c4:	69bb      	ldr	r3, [r7, #24]
 80082c6:	e853 3f00 	ldrex	r3, [r3]
 80082ca:	617b      	str	r3, [r7, #20]
   return(result);
 80082cc:	697b      	ldr	r3, [r7, #20]
 80082ce:	f043 0310 	orr.w	r3, r3, #16
 80082d2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	461a      	mov	r2, r3
 80082da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80082de:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082e0:	6a39      	ldr	r1, [r7, #32]
 80082e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80082e4:	e841 2300 	strex	r3, r2, [r1]
 80082e8:	61fb      	str	r3, [r7, #28]
   return(result);
 80082ea:	69fb      	ldr	r3, [r7, #28]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d1e6      	bne.n	80082be <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 80082f0:	e002      	b.n	80082f8 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80082f2:	2301      	movs	r3, #1
 80082f4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 80082f8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80082fc:	e000      	b.n	8008300 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80082fe:	2302      	movs	r3, #2
  }
}
 8008300:	4618      	mov	r0, r3
 8008302:	3730      	adds	r7, #48	@ 0x30
 8008304:	46bd      	mov	sp, r7
 8008306:	bd80      	pop	{r7, pc}

08008308 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008308:	b480      	push	{r7}
 800830a:	b085      	sub	sp, #20
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008314:	2b00      	cmp	r3, #0
 8008316:	d108      	bne.n	800832a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	2201      	movs	r2, #1
 800831c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	2201      	movs	r2, #1
 8008324:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008328:	e031      	b.n	800838e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800832a:	2308      	movs	r3, #8
 800832c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800832e:	2308      	movs	r3, #8
 8008330:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	689b      	ldr	r3, [r3, #8]
 8008338:	0e5b      	lsrs	r3, r3, #25
 800833a:	b2db      	uxtb	r3, r3
 800833c:	f003 0307 	and.w	r3, r3, #7
 8008340:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	689b      	ldr	r3, [r3, #8]
 8008348:	0f5b      	lsrs	r3, r3, #29
 800834a:	b2db      	uxtb	r3, r3
 800834c:	f003 0307 	and.w	r3, r3, #7
 8008350:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008352:	7bbb      	ldrb	r3, [r7, #14]
 8008354:	7b3a      	ldrb	r2, [r7, #12]
 8008356:	4911      	ldr	r1, [pc, #68]	@ (800839c <UARTEx_SetNbDataToProcess+0x94>)
 8008358:	5c8a      	ldrb	r2, [r1, r2]
 800835a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800835e:	7b3a      	ldrb	r2, [r7, #12]
 8008360:	490f      	ldr	r1, [pc, #60]	@ (80083a0 <UARTEx_SetNbDataToProcess+0x98>)
 8008362:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008364:	fb93 f3f2 	sdiv	r3, r3, r2
 8008368:	b29a      	uxth	r2, r3
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008370:	7bfb      	ldrb	r3, [r7, #15]
 8008372:	7b7a      	ldrb	r2, [r7, #13]
 8008374:	4909      	ldr	r1, [pc, #36]	@ (800839c <UARTEx_SetNbDataToProcess+0x94>)
 8008376:	5c8a      	ldrb	r2, [r1, r2]
 8008378:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800837c:	7b7a      	ldrb	r2, [r7, #13]
 800837e:	4908      	ldr	r1, [pc, #32]	@ (80083a0 <UARTEx_SetNbDataToProcess+0x98>)
 8008380:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008382:	fb93 f3f2 	sdiv	r3, r3, r2
 8008386:	b29a      	uxth	r2, r3
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800838e:	bf00      	nop
 8008390:	3714      	adds	r7, #20
 8008392:	46bd      	mov	sp, r7
 8008394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008398:	4770      	bx	lr
 800839a:	bf00      	nop
 800839c:	0800d598 	.word	0x0800d598
 80083a0:	0800d5a0 	.word	0x0800d5a0

080083a4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80083a4:	b480      	push	{r7}
 80083a6:	b085      	sub	sp, #20
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	2200      	movs	r2, #0
 80083b0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80083b4:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 80083b8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	b29a      	uxth	r2, r3
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80083c4:	2300      	movs	r3, #0
}
 80083c6:	4618      	mov	r0, r3
 80083c8:	3714      	adds	r7, #20
 80083ca:	46bd      	mov	sp, r7
 80083cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d0:	4770      	bx	lr

080083d2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80083d2:	b480      	push	{r7}
 80083d4:	b085      	sub	sp, #20
 80083d6:	af00      	add	r7, sp, #0
 80083d8:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80083da:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 80083de:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80083e6:	b29a      	uxth	r2, r3
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	b29b      	uxth	r3, r3
 80083ec:	43db      	mvns	r3, r3
 80083ee:	b29b      	uxth	r3, r3
 80083f0:	4013      	ands	r3, r2
 80083f2:	b29a      	uxth	r2, r3
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80083fa:	2300      	movs	r3, #0
}
 80083fc:	4618      	mov	r0, r3
 80083fe:	3714      	adds	r7, #20
 8008400:	46bd      	mov	sp, r7
 8008402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008406:	4770      	bx	lr

08008408 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8008408:	b480      	push	{r7}
 800840a:	b085      	sub	sp, #20
 800840c:	af00      	add	r7, sp, #0
 800840e:	60f8      	str	r0, [r7, #12]
 8008410:	1d3b      	adds	r3, r7, #4
 8008412:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	2201      	movs	r2, #1
 800841a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	2200      	movs	r2, #0
 8008422:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	2200      	movs	r2, #0
 800842a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	2200      	movs	r2, #0
 8008432:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8008436:	2300      	movs	r3, #0
}
 8008438:	4618      	mov	r0, r3
 800843a:	3714      	adds	r7, #20
 800843c:	46bd      	mov	sp, r7
 800843e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008442:	4770      	bx	lr

08008444 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008444:	b480      	push	{r7}
 8008446:	b0a7      	sub	sp, #156	@ 0x9c
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
 800844c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800844e:	2300      	movs	r3, #0
 8008450:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8008454:	687a      	ldr	r2, [r7, #4]
 8008456:	683b      	ldr	r3, [r7, #0]
 8008458:	781b      	ldrb	r3, [r3, #0]
 800845a:	009b      	lsls	r3, r3, #2
 800845c:	4413      	add	r3, r2
 800845e:	881b      	ldrh	r3, [r3, #0]
 8008460:	b29b      	uxth	r3, r3
 8008462:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8008466:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800846a:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94

  /* initialize Endpoint */
  switch (ep->type)
 800846e:	683b      	ldr	r3, [r7, #0]
 8008470:	78db      	ldrb	r3, [r3, #3]
 8008472:	2b03      	cmp	r3, #3
 8008474:	d81f      	bhi.n	80084b6 <USB_ActivateEndpoint+0x72>
 8008476:	a201      	add	r2, pc, #4	@ (adr r2, 800847c <USB_ActivateEndpoint+0x38>)
 8008478:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800847c:	0800848d 	.word	0x0800848d
 8008480:	080084a9 	.word	0x080084a9
 8008484:	080084bf 	.word	0x080084bf
 8008488:	0800849b 	.word	0x0800849b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800848c:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8008490:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8008494:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 8008498:	e012      	b.n	80084c0 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800849a:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800849e:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 80084a2:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 80084a6:	e00b      	b.n	80084c0 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80084a8:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80084ac:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80084b0:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 80084b4:	e004      	b.n	80084c0 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80084b6:	2301      	movs	r3, #1
 80084b8:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
      break;
 80084bc:	e000      	b.n	80084c0 <USB_ActivateEndpoint+0x7c>
      break;
 80084be:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80084c0:	687a      	ldr	r2, [r7, #4]
 80084c2:	683b      	ldr	r3, [r7, #0]
 80084c4:	781b      	ldrb	r3, [r3, #0]
 80084c6:	009b      	lsls	r3, r3, #2
 80084c8:	441a      	add	r2, r3
 80084ca:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80084ce:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80084d2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80084d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80084da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80084de:	b29b      	uxth	r3, r3
 80084e0:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80084e2:	687a      	ldr	r2, [r7, #4]
 80084e4:	683b      	ldr	r3, [r7, #0]
 80084e6:	781b      	ldrb	r3, [r3, #0]
 80084e8:	009b      	lsls	r3, r3, #2
 80084ea:	4413      	add	r3, r2
 80084ec:	881b      	ldrh	r3, [r3, #0]
 80084ee:	b29b      	uxth	r3, r3
 80084f0:	b21b      	sxth	r3, r3
 80084f2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80084f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80084fa:	b21a      	sxth	r2, r3
 80084fc:	683b      	ldr	r3, [r7, #0]
 80084fe:	781b      	ldrb	r3, [r3, #0]
 8008500:	b21b      	sxth	r3, r3
 8008502:	4313      	orrs	r3, r2
 8008504:	b21b      	sxth	r3, r3
 8008506:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
 800850a:	687a      	ldr	r2, [r7, #4]
 800850c:	683b      	ldr	r3, [r7, #0]
 800850e:	781b      	ldrb	r3, [r3, #0]
 8008510:	009b      	lsls	r3, r3, #2
 8008512:	441a      	add	r2, r3
 8008514:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8008518:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800851c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008520:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008524:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008528:	b29b      	uxth	r3, r3
 800852a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800852c:	683b      	ldr	r3, [r7, #0]
 800852e:	7b1b      	ldrb	r3, [r3, #12]
 8008530:	2b00      	cmp	r3, #0
 8008532:	f040 8180 	bne.w	8008836 <USB_ActivateEndpoint+0x3f2>
  {
    if (ep->is_in != 0U)
 8008536:	683b      	ldr	r3, [r7, #0]
 8008538:	785b      	ldrb	r3, [r3, #1]
 800853a:	2b00      	cmp	r3, #0
 800853c:	f000 8084 	beq.w	8008648 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	61bb      	str	r3, [r7, #24]
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800854a:	b29b      	uxth	r3, r3
 800854c:	461a      	mov	r2, r3
 800854e:	69bb      	ldr	r3, [r7, #24]
 8008550:	4413      	add	r3, r2
 8008552:	61bb      	str	r3, [r7, #24]
 8008554:	683b      	ldr	r3, [r7, #0]
 8008556:	781b      	ldrb	r3, [r3, #0]
 8008558:	00da      	lsls	r2, r3, #3
 800855a:	69bb      	ldr	r3, [r7, #24]
 800855c:	4413      	add	r3, r2
 800855e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008562:	617b      	str	r3, [r7, #20]
 8008564:	683b      	ldr	r3, [r7, #0]
 8008566:	88db      	ldrh	r3, [r3, #6]
 8008568:	085b      	lsrs	r3, r3, #1
 800856a:	b29b      	uxth	r3, r3
 800856c:	005b      	lsls	r3, r3, #1
 800856e:	b29a      	uxth	r2, r3
 8008570:	697b      	ldr	r3, [r7, #20]
 8008572:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008574:	687a      	ldr	r2, [r7, #4]
 8008576:	683b      	ldr	r3, [r7, #0]
 8008578:	781b      	ldrb	r3, [r3, #0]
 800857a:	009b      	lsls	r3, r3, #2
 800857c:	4413      	add	r3, r2
 800857e:	881b      	ldrh	r3, [r3, #0]
 8008580:	827b      	strh	r3, [r7, #18]
 8008582:	8a7b      	ldrh	r3, [r7, #18]
 8008584:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008588:	2b00      	cmp	r3, #0
 800858a:	d01b      	beq.n	80085c4 <USB_ActivateEndpoint+0x180>
 800858c:	687a      	ldr	r2, [r7, #4]
 800858e:	683b      	ldr	r3, [r7, #0]
 8008590:	781b      	ldrb	r3, [r3, #0]
 8008592:	009b      	lsls	r3, r3, #2
 8008594:	4413      	add	r3, r2
 8008596:	881b      	ldrh	r3, [r3, #0]
 8008598:	b29b      	uxth	r3, r3
 800859a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800859e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80085a2:	823b      	strh	r3, [r7, #16]
 80085a4:	687a      	ldr	r2, [r7, #4]
 80085a6:	683b      	ldr	r3, [r7, #0]
 80085a8:	781b      	ldrb	r3, [r3, #0]
 80085aa:	009b      	lsls	r3, r3, #2
 80085ac:	441a      	add	r2, r3
 80085ae:	8a3b      	ldrh	r3, [r7, #16]
 80085b0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80085b4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80085b8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80085bc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80085c0:	b29b      	uxth	r3, r3
 80085c2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80085c4:	683b      	ldr	r3, [r7, #0]
 80085c6:	78db      	ldrb	r3, [r3, #3]
 80085c8:	2b01      	cmp	r3, #1
 80085ca:	d020      	beq.n	800860e <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80085cc:	687a      	ldr	r2, [r7, #4]
 80085ce:	683b      	ldr	r3, [r7, #0]
 80085d0:	781b      	ldrb	r3, [r3, #0]
 80085d2:	009b      	lsls	r3, r3, #2
 80085d4:	4413      	add	r3, r2
 80085d6:	881b      	ldrh	r3, [r3, #0]
 80085d8:	b29b      	uxth	r3, r3
 80085da:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80085de:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80085e2:	81bb      	strh	r3, [r7, #12]
 80085e4:	89bb      	ldrh	r3, [r7, #12]
 80085e6:	f083 0320 	eor.w	r3, r3, #32
 80085ea:	81bb      	strh	r3, [r7, #12]
 80085ec:	687a      	ldr	r2, [r7, #4]
 80085ee:	683b      	ldr	r3, [r7, #0]
 80085f0:	781b      	ldrb	r3, [r3, #0]
 80085f2:	009b      	lsls	r3, r3, #2
 80085f4:	441a      	add	r2, r3
 80085f6:	89bb      	ldrh	r3, [r7, #12]
 80085f8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80085fc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008600:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008604:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008608:	b29b      	uxth	r3, r3
 800860a:	8013      	strh	r3, [r2, #0]
 800860c:	e3f9      	b.n	8008e02 <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800860e:	687a      	ldr	r2, [r7, #4]
 8008610:	683b      	ldr	r3, [r7, #0]
 8008612:	781b      	ldrb	r3, [r3, #0]
 8008614:	009b      	lsls	r3, r3, #2
 8008616:	4413      	add	r3, r2
 8008618:	881b      	ldrh	r3, [r3, #0]
 800861a:	b29b      	uxth	r3, r3
 800861c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008620:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008624:	81fb      	strh	r3, [r7, #14]
 8008626:	687a      	ldr	r2, [r7, #4]
 8008628:	683b      	ldr	r3, [r7, #0]
 800862a:	781b      	ldrb	r3, [r3, #0]
 800862c:	009b      	lsls	r3, r3, #2
 800862e:	441a      	add	r2, r3
 8008630:	89fb      	ldrh	r3, [r7, #14]
 8008632:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008636:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800863a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800863e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008642:	b29b      	uxth	r3, r3
 8008644:	8013      	strh	r3, [r2, #0]
 8008646:	e3dc      	b.n	8008e02 <USB_ActivateEndpoint+0x9be>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	633b      	str	r3, [r7, #48]	@ 0x30
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008652:	b29b      	uxth	r3, r3
 8008654:	461a      	mov	r2, r3
 8008656:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008658:	4413      	add	r3, r2
 800865a:	633b      	str	r3, [r7, #48]	@ 0x30
 800865c:	683b      	ldr	r3, [r7, #0]
 800865e:	781b      	ldrb	r3, [r3, #0]
 8008660:	00da      	lsls	r2, r3, #3
 8008662:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008664:	4413      	add	r3, r2
 8008666:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800866a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800866c:	683b      	ldr	r3, [r7, #0]
 800866e:	88db      	ldrh	r3, [r3, #6]
 8008670:	085b      	lsrs	r3, r3, #1
 8008672:	b29b      	uxth	r3, r3
 8008674:	005b      	lsls	r3, r3, #1
 8008676:	b29a      	uxth	r2, r3
 8008678:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800867a:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008686:	b29b      	uxth	r3, r3
 8008688:	461a      	mov	r2, r3
 800868a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800868c:	4413      	add	r3, r2
 800868e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008690:	683b      	ldr	r3, [r7, #0]
 8008692:	781b      	ldrb	r3, [r3, #0]
 8008694:	00da      	lsls	r2, r3, #3
 8008696:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008698:	4413      	add	r3, r2
 800869a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800869e:	627b      	str	r3, [r7, #36]	@ 0x24
 80086a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086a2:	881b      	ldrh	r3, [r3, #0]
 80086a4:	b29b      	uxth	r3, r3
 80086a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80086aa:	b29a      	uxth	r2, r3
 80086ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086ae:	801a      	strh	r2, [r3, #0]
 80086b0:	683b      	ldr	r3, [r7, #0]
 80086b2:	691b      	ldr	r3, [r3, #16]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d10a      	bne.n	80086ce <USB_ActivateEndpoint+0x28a>
 80086b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086ba:	881b      	ldrh	r3, [r3, #0]
 80086bc:	b29b      	uxth	r3, r3
 80086be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80086c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80086c6:	b29a      	uxth	r2, r3
 80086c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086ca:	801a      	strh	r2, [r3, #0]
 80086cc:	e041      	b.n	8008752 <USB_ActivateEndpoint+0x30e>
 80086ce:	683b      	ldr	r3, [r7, #0]
 80086d0:	691b      	ldr	r3, [r3, #16]
 80086d2:	2b3e      	cmp	r3, #62	@ 0x3e
 80086d4:	d81c      	bhi.n	8008710 <USB_ActivateEndpoint+0x2cc>
 80086d6:	683b      	ldr	r3, [r7, #0]
 80086d8:	691b      	ldr	r3, [r3, #16]
 80086da:	085b      	lsrs	r3, r3, #1
 80086dc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80086e0:	683b      	ldr	r3, [r7, #0]
 80086e2:	691b      	ldr	r3, [r3, #16]
 80086e4:	f003 0301 	and.w	r3, r3, #1
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d004      	beq.n	80086f6 <USB_ActivateEndpoint+0x2b2>
 80086ec:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80086f0:	3301      	adds	r3, #1
 80086f2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80086f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086f8:	881b      	ldrh	r3, [r3, #0]
 80086fa:	b29a      	uxth	r2, r3
 80086fc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008700:	b29b      	uxth	r3, r3
 8008702:	029b      	lsls	r3, r3, #10
 8008704:	b29b      	uxth	r3, r3
 8008706:	4313      	orrs	r3, r2
 8008708:	b29a      	uxth	r2, r3
 800870a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800870c:	801a      	strh	r2, [r3, #0]
 800870e:	e020      	b.n	8008752 <USB_ActivateEndpoint+0x30e>
 8008710:	683b      	ldr	r3, [r7, #0]
 8008712:	691b      	ldr	r3, [r3, #16]
 8008714:	095b      	lsrs	r3, r3, #5
 8008716:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800871a:	683b      	ldr	r3, [r7, #0]
 800871c:	691b      	ldr	r3, [r3, #16]
 800871e:	f003 031f 	and.w	r3, r3, #31
 8008722:	2b00      	cmp	r3, #0
 8008724:	d104      	bne.n	8008730 <USB_ActivateEndpoint+0x2ec>
 8008726:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800872a:	3b01      	subs	r3, #1
 800872c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008730:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008732:	881b      	ldrh	r3, [r3, #0]
 8008734:	b29a      	uxth	r2, r3
 8008736:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800873a:	b29b      	uxth	r3, r3
 800873c:	029b      	lsls	r3, r3, #10
 800873e:	b29b      	uxth	r3, r3
 8008740:	4313      	orrs	r3, r2
 8008742:	b29b      	uxth	r3, r3
 8008744:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008748:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800874c:	b29a      	uxth	r2, r3
 800874e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008750:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008752:	687a      	ldr	r2, [r7, #4]
 8008754:	683b      	ldr	r3, [r7, #0]
 8008756:	781b      	ldrb	r3, [r3, #0]
 8008758:	009b      	lsls	r3, r3, #2
 800875a:	4413      	add	r3, r2
 800875c:	881b      	ldrh	r3, [r3, #0]
 800875e:	847b      	strh	r3, [r7, #34]	@ 0x22
 8008760:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8008762:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008766:	2b00      	cmp	r3, #0
 8008768:	d01b      	beq.n	80087a2 <USB_ActivateEndpoint+0x35e>
 800876a:	687a      	ldr	r2, [r7, #4]
 800876c:	683b      	ldr	r3, [r7, #0]
 800876e:	781b      	ldrb	r3, [r3, #0]
 8008770:	009b      	lsls	r3, r3, #2
 8008772:	4413      	add	r3, r2
 8008774:	881b      	ldrh	r3, [r3, #0]
 8008776:	b29b      	uxth	r3, r3
 8008778:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800877c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008780:	843b      	strh	r3, [r7, #32]
 8008782:	687a      	ldr	r2, [r7, #4]
 8008784:	683b      	ldr	r3, [r7, #0]
 8008786:	781b      	ldrb	r3, [r3, #0]
 8008788:	009b      	lsls	r3, r3, #2
 800878a:	441a      	add	r2, r3
 800878c:	8c3b      	ldrh	r3, [r7, #32]
 800878e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008792:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008796:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800879a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800879e:	b29b      	uxth	r3, r3
 80087a0:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 80087a2:	683b      	ldr	r3, [r7, #0]
 80087a4:	781b      	ldrb	r3, [r3, #0]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d124      	bne.n	80087f4 <USB_ActivateEndpoint+0x3b0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80087aa:	687a      	ldr	r2, [r7, #4]
 80087ac:	683b      	ldr	r3, [r7, #0]
 80087ae:	781b      	ldrb	r3, [r3, #0]
 80087b0:	009b      	lsls	r3, r3, #2
 80087b2:	4413      	add	r3, r2
 80087b4:	881b      	ldrh	r3, [r3, #0]
 80087b6:	b29b      	uxth	r3, r3
 80087b8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80087bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80087c0:	83bb      	strh	r3, [r7, #28]
 80087c2:	8bbb      	ldrh	r3, [r7, #28]
 80087c4:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80087c8:	83bb      	strh	r3, [r7, #28]
 80087ca:	8bbb      	ldrh	r3, [r7, #28]
 80087cc:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80087d0:	83bb      	strh	r3, [r7, #28]
 80087d2:	687a      	ldr	r2, [r7, #4]
 80087d4:	683b      	ldr	r3, [r7, #0]
 80087d6:	781b      	ldrb	r3, [r3, #0]
 80087d8:	009b      	lsls	r3, r3, #2
 80087da:	441a      	add	r2, r3
 80087dc:	8bbb      	ldrh	r3, [r7, #28]
 80087de:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80087e2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80087e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80087ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80087ee:	b29b      	uxth	r3, r3
 80087f0:	8013      	strh	r3, [r2, #0]
 80087f2:	e306      	b.n	8008e02 <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80087f4:	687a      	ldr	r2, [r7, #4]
 80087f6:	683b      	ldr	r3, [r7, #0]
 80087f8:	781b      	ldrb	r3, [r3, #0]
 80087fa:	009b      	lsls	r3, r3, #2
 80087fc:	4413      	add	r3, r2
 80087fe:	881b      	ldrh	r3, [r3, #0]
 8008800:	b29b      	uxth	r3, r3
 8008802:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008806:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800880a:	83fb      	strh	r3, [r7, #30]
 800880c:	8bfb      	ldrh	r3, [r7, #30]
 800880e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008812:	83fb      	strh	r3, [r7, #30]
 8008814:	687a      	ldr	r2, [r7, #4]
 8008816:	683b      	ldr	r3, [r7, #0]
 8008818:	781b      	ldrb	r3, [r3, #0]
 800881a:	009b      	lsls	r3, r3, #2
 800881c:	441a      	add	r2, r3
 800881e:	8bfb      	ldrh	r3, [r7, #30]
 8008820:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008824:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008828:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800882c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008830:	b29b      	uxth	r3, r3
 8008832:	8013      	strh	r3, [r2, #0]
 8008834:	e2e5      	b.n	8008e02 <USB_ActivateEndpoint+0x9be>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8008836:	683b      	ldr	r3, [r7, #0]
 8008838:	78db      	ldrb	r3, [r3, #3]
 800883a:	2b02      	cmp	r3, #2
 800883c:	d11e      	bne.n	800887c <USB_ActivateEndpoint+0x438>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800883e:	687a      	ldr	r2, [r7, #4]
 8008840:	683b      	ldr	r3, [r7, #0]
 8008842:	781b      	ldrb	r3, [r3, #0]
 8008844:	009b      	lsls	r3, r3, #2
 8008846:	4413      	add	r3, r2
 8008848:	881b      	ldrh	r3, [r3, #0]
 800884a:	b29b      	uxth	r3, r3
 800884c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008850:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008854:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 8008858:	687a      	ldr	r2, [r7, #4]
 800885a:	683b      	ldr	r3, [r7, #0]
 800885c:	781b      	ldrb	r3, [r3, #0]
 800885e:	009b      	lsls	r3, r3, #2
 8008860:	441a      	add	r2, r3
 8008862:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 8008866:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800886a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800886e:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8008872:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008876:	b29b      	uxth	r3, r3
 8008878:	8013      	strh	r3, [r2, #0]
 800887a:	e01d      	b.n	80088b8 <USB_ActivateEndpoint+0x474>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800887c:	687a      	ldr	r2, [r7, #4]
 800887e:	683b      	ldr	r3, [r7, #0]
 8008880:	781b      	ldrb	r3, [r3, #0]
 8008882:	009b      	lsls	r3, r3, #2
 8008884:	4413      	add	r3, r2
 8008886:	881b      	ldrh	r3, [r3, #0]
 8008888:	b29b      	uxth	r3, r3
 800888a:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800888e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008892:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
 8008896:	687a      	ldr	r2, [r7, #4]
 8008898:	683b      	ldr	r3, [r7, #0]
 800889a:	781b      	ldrb	r3, [r3, #0]
 800889c:	009b      	lsls	r3, r3, #2
 800889e:	441a      	add	r2, r3
 80088a0:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 80088a4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80088a8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80088ac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80088b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80088b4:	b29b      	uxth	r3, r3
 80088b6:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80088c2:	b29b      	uxth	r3, r3
 80088c4:	461a      	mov	r2, r3
 80088c6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80088c8:	4413      	add	r3, r2
 80088ca:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80088cc:	683b      	ldr	r3, [r7, #0]
 80088ce:	781b      	ldrb	r3, [r3, #0]
 80088d0:	00da      	lsls	r2, r3, #3
 80088d2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80088d4:	4413      	add	r3, r2
 80088d6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80088da:	67bb      	str	r3, [r7, #120]	@ 0x78
 80088dc:	683b      	ldr	r3, [r7, #0]
 80088de:	891b      	ldrh	r3, [r3, #8]
 80088e0:	085b      	lsrs	r3, r3, #1
 80088e2:	b29b      	uxth	r3, r3
 80088e4:	005b      	lsls	r3, r3, #1
 80088e6:	b29a      	uxth	r2, r3
 80088e8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80088ea:	801a      	strh	r2, [r3, #0]
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	677b      	str	r3, [r7, #116]	@ 0x74
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80088f6:	b29b      	uxth	r3, r3
 80088f8:	461a      	mov	r2, r3
 80088fa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80088fc:	4413      	add	r3, r2
 80088fe:	677b      	str	r3, [r7, #116]	@ 0x74
 8008900:	683b      	ldr	r3, [r7, #0]
 8008902:	781b      	ldrb	r3, [r3, #0]
 8008904:	00da      	lsls	r2, r3, #3
 8008906:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008908:	4413      	add	r3, r2
 800890a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800890e:	673b      	str	r3, [r7, #112]	@ 0x70
 8008910:	683b      	ldr	r3, [r7, #0]
 8008912:	895b      	ldrh	r3, [r3, #10]
 8008914:	085b      	lsrs	r3, r3, #1
 8008916:	b29b      	uxth	r3, r3
 8008918:	005b      	lsls	r3, r3, #1
 800891a:	b29a      	uxth	r2, r3
 800891c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800891e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8008920:	683b      	ldr	r3, [r7, #0]
 8008922:	785b      	ldrb	r3, [r3, #1]
 8008924:	2b00      	cmp	r3, #0
 8008926:	f040 81af 	bne.w	8008c88 <USB_ActivateEndpoint+0x844>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800892a:	687a      	ldr	r2, [r7, #4]
 800892c:	683b      	ldr	r3, [r7, #0]
 800892e:	781b      	ldrb	r3, [r3, #0]
 8008930:	009b      	lsls	r3, r3, #2
 8008932:	4413      	add	r3, r2
 8008934:	881b      	ldrh	r3, [r3, #0]
 8008936:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
 800893a:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 800893e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008942:	2b00      	cmp	r3, #0
 8008944:	d01d      	beq.n	8008982 <USB_ActivateEndpoint+0x53e>
 8008946:	687a      	ldr	r2, [r7, #4]
 8008948:	683b      	ldr	r3, [r7, #0]
 800894a:	781b      	ldrb	r3, [r3, #0]
 800894c:	009b      	lsls	r3, r3, #2
 800894e:	4413      	add	r3, r2
 8008950:	881b      	ldrh	r3, [r3, #0]
 8008952:	b29b      	uxth	r3, r3
 8008954:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008958:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800895c:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 8008960:	687a      	ldr	r2, [r7, #4]
 8008962:	683b      	ldr	r3, [r7, #0]
 8008964:	781b      	ldrb	r3, [r3, #0]
 8008966:	009b      	lsls	r3, r3, #2
 8008968:	441a      	add	r2, r3
 800896a:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 800896e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008972:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008976:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800897a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800897e:	b29b      	uxth	r3, r3
 8008980:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008982:	687a      	ldr	r2, [r7, #4]
 8008984:	683b      	ldr	r3, [r7, #0]
 8008986:	781b      	ldrb	r3, [r3, #0]
 8008988:	009b      	lsls	r3, r3, #2
 800898a:	4413      	add	r3, r2
 800898c:	881b      	ldrh	r3, [r3, #0]
 800898e:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 8008992:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 8008996:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800899a:	2b00      	cmp	r3, #0
 800899c:	d01d      	beq.n	80089da <USB_ActivateEndpoint+0x596>
 800899e:	687a      	ldr	r2, [r7, #4]
 80089a0:	683b      	ldr	r3, [r7, #0]
 80089a2:	781b      	ldrb	r3, [r3, #0]
 80089a4:	009b      	lsls	r3, r3, #2
 80089a6:	4413      	add	r3, r2
 80089a8:	881b      	ldrh	r3, [r3, #0]
 80089aa:	b29b      	uxth	r3, r3
 80089ac:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80089b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80089b4:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 80089b8:	687a      	ldr	r2, [r7, #4]
 80089ba:	683b      	ldr	r3, [r7, #0]
 80089bc:	781b      	ldrb	r3, [r3, #0]
 80089be:	009b      	lsls	r3, r3, #2
 80089c0:	441a      	add	r2, r3
 80089c2:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 80089c6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80089ca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80089ce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80089d2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80089d6:	b29b      	uxth	r3, r3
 80089d8:	8013      	strh	r3, [r2, #0]

      /* Set endpoint RX count */
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80089da:	683b      	ldr	r3, [r7, #0]
 80089dc:	785b      	ldrb	r3, [r3, #1]
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d16b      	bne.n	8008aba <USB_ActivateEndpoint+0x676>
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80089ec:	b29b      	uxth	r3, r3
 80089ee:	461a      	mov	r2, r3
 80089f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80089f2:	4413      	add	r3, r2
 80089f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80089f6:	683b      	ldr	r3, [r7, #0]
 80089f8:	781b      	ldrb	r3, [r3, #0]
 80089fa:	00da      	lsls	r2, r3, #3
 80089fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80089fe:	4413      	add	r3, r2
 8008a00:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008a04:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008a06:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008a08:	881b      	ldrh	r3, [r3, #0]
 8008a0a:	b29b      	uxth	r3, r3
 8008a0c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008a10:	b29a      	uxth	r2, r3
 8008a12:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008a14:	801a      	strh	r2, [r3, #0]
 8008a16:	683b      	ldr	r3, [r7, #0]
 8008a18:	691b      	ldr	r3, [r3, #16]
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d10a      	bne.n	8008a34 <USB_ActivateEndpoint+0x5f0>
 8008a1e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008a20:	881b      	ldrh	r3, [r3, #0]
 8008a22:	b29b      	uxth	r3, r3
 8008a24:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a28:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008a2c:	b29a      	uxth	r2, r3
 8008a2e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008a30:	801a      	strh	r2, [r3, #0]
 8008a32:	e05d      	b.n	8008af0 <USB_ActivateEndpoint+0x6ac>
 8008a34:	683b      	ldr	r3, [r7, #0]
 8008a36:	691b      	ldr	r3, [r3, #16]
 8008a38:	2b3e      	cmp	r3, #62	@ 0x3e
 8008a3a:	d81c      	bhi.n	8008a76 <USB_ActivateEndpoint+0x632>
 8008a3c:	683b      	ldr	r3, [r7, #0]
 8008a3e:	691b      	ldr	r3, [r3, #16]
 8008a40:	085b      	lsrs	r3, r3, #1
 8008a42:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008a46:	683b      	ldr	r3, [r7, #0]
 8008a48:	691b      	ldr	r3, [r3, #16]
 8008a4a:	f003 0301 	and.w	r3, r3, #1
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d004      	beq.n	8008a5c <USB_ActivateEndpoint+0x618>
 8008a52:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008a56:	3301      	adds	r3, #1
 8008a58:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008a5c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008a5e:	881b      	ldrh	r3, [r3, #0]
 8008a60:	b29a      	uxth	r2, r3
 8008a62:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008a66:	b29b      	uxth	r3, r3
 8008a68:	029b      	lsls	r3, r3, #10
 8008a6a:	b29b      	uxth	r3, r3
 8008a6c:	4313      	orrs	r3, r2
 8008a6e:	b29a      	uxth	r2, r3
 8008a70:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008a72:	801a      	strh	r2, [r3, #0]
 8008a74:	e03c      	b.n	8008af0 <USB_ActivateEndpoint+0x6ac>
 8008a76:	683b      	ldr	r3, [r7, #0]
 8008a78:	691b      	ldr	r3, [r3, #16]
 8008a7a:	095b      	lsrs	r3, r3, #5
 8008a7c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008a80:	683b      	ldr	r3, [r7, #0]
 8008a82:	691b      	ldr	r3, [r3, #16]
 8008a84:	f003 031f 	and.w	r3, r3, #31
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d104      	bne.n	8008a96 <USB_ActivateEndpoint+0x652>
 8008a8c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008a90:	3b01      	subs	r3, #1
 8008a92:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008a96:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008a98:	881b      	ldrh	r3, [r3, #0]
 8008a9a:	b29a      	uxth	r2, r3
 8008a9c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008aa0:	b29b      	uxth	r3, r3
 8008aa2:	029b      	lsls	r3, r3, #10
 8008aa4:	b29b      	uxth	r3, r3
 8008aa6:	4313      	orrs	r3, r2
 8008aa8:	b29b      	uxth	r3, r3
 8008aaa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008aae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008ab2:	b29a      	uxth	r2, r3
 8008ab4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008ab6:	801a      	strh	r2, [r3, #0]
 8008ab8:	e01a      	b.n	8008af0 <USB_ActivateEndpoint+0x6ac>
 8008aba:	683b      	ldr	r3, [r7, #0]
 8008abc:	785b      	ldrb	r3, [r3, #1]
 8008abe:	2b01      	cmp	r3, #1
 8008ac0:	d116      	bne.n	8008af0 <USB_ActivateEndpoint+0x6ac>
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	657b      	str	r3, [r7, #84]	@ 0x54
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008acc:	b29b      	uxth	r3, r3
 8008ace:	461a      	mov	r2, r3
 8008ad0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008ad2:	4413      	add	r3, r2
 8008ad4:	657b      	str	r3, [r7, #84]	@ 0x54
 8008ad6:	683b      	ldr	r3, [r7, #0]
 8008ad8:	781b      	ldrb	r3, [r3, #0]
 8008ada:	00da      	lsls	r2, r3, #3
 8008adc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008ade:	4413      	add	r3, r2
 8008ae0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008ae4:	653b      	str	r3, [r7, #80]	@ 0x50
 8008ae6:	683b      	ldr	r3, [r7, #0]
 8008ae8:	691b      	ldr	r3, [r3, #16]
 8008aea:	b29a      	uxth	r2, r3
 8008aec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008aee:	801a      	strh	r2, [r3, #0]
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	647b      	str	r3, [r7, #68]	@ 0x44
 8008af4:	683b      	ldr	r3, [r7, #0]
 8008af6:	785b      	ldrb	r3, [r3, #1]
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d16b      	bne.n	8008bd4 <USB_ActivateEndpoint+0x790>
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008b06:	b29b      	uxth	r3, r3
 8008b08:	461a      	mov	r2, r3
 8008b0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008b0c:	4413      	add	r3, r2
 8008b0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008b10:	683b      	ldr	r3, [r7, #0]
 8008b12:	781b      	ldrb	r3, [r3, #0]
 8008b14:	00da      	lsls	r2, r3, #3
 8008b16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008b18:	4413      	add	r3, r2
 8008b1a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008b1e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008b20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b22:	881b      	ldrh	r3, [r3, #0]
 8008b24:	b29b      	uxth	r3, r3
 8008b26:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008b2a:	b29a      	uxth	r2, r3
 8008b2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b2e:	801a      	strh	r2, [r3, #0]
 8008b30:	683b      	ldr	r3, [r7, #0]
 8008b32:	691b      	ldr	r3, [r3, #16]
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d10a      	bne.n	8008b4e <USB_ActivateEndpoint+0x70a>
 8008b38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b3a:	881b      	ldrh	r3, [r3, #0]
 8008b3c:	b29b      	uxth	r3, r3
 8008b3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b46:	b29a      	uxth	r2, r3
 8008b48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b4a:	801a      	strh	r2, [r3, #0]
 8008b4c:	e05b      	b.n	8008c06 <USB_ActivateEndpoint+0x7c2>
 8008b4e:	683b      	ldr	r3, [r7, #0]
 8008b50:	691b      	ldr	r3, [r3, #16]
 8008b52:	2b3e      	cmp	r3, #62	@ 0x3e
 8008b54:	d81c      	bhi.n	8008b90 <USB_ActivateEndpoint+0x74c>
 8008b56:	683b      	ldr	r3, [r7, #0]
 8008b58:	691b      	ldr	r3, [r3, #16]
 8008b5a:	085b      	lsrs	r3, r3, #1
 8008b5c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008b60:	683b      	ldr	r3, [r7, #0]
 8008b62:	691b      	ldr	r3, [r3, #16]
 8008b64:	f003 0301 	and.w	r3, r3, #1
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d004      	beq.n	8008b76 <USB_ActivateEndpoint+0x732>
 8008b6c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008b70:	3301      	adds	r3, #1
 8008b72:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008b76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b78:	881b      	ldrh	r3, [r3, #0]
 8008b7a:	b29a      	uxth	r2, r3
 8008b7c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008b80:	b29b      	uxth	r3, r3
 8008b82:	029b      	lsls	r3, r3, #10
 8008b84:	b29b      	uxth	r3, r3
 8008b86:	4313      	orrs	r3, r2
 8008b88:	b29a      	uxth	r2, r3
 8008b8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b8c:	801a      	strh	r2, [r3, #0]
 8008b8e:	e03a      	b.n	8008c06 <USB_ActivateEndpoint+0x7c2>
 8008b90:	683b      	ldr	r3, [r7, #0]
 8008b92:	691b      	ldr	r3, [r3, #16]
 8008b94:	095b      	lsrs	r3, r3, #5
 8008b96:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008b9a:	683b      	ldr	r3, [r7, #0]
 8008b9c:	691b      	ldr	r3, [r3, #16]
 8008b9e:	f003 031f 	and.w	r3, r3, #31
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d104      	bne.n	8008bb0 <USB_ActivateEndpoint+0x76c>
 8008ba6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008baa:	3b01      	subs	r3, #1
 8008bac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008bb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bb2:	881b      	ldrh	r3, [r3, #0]
 8008bb4:	b29a      	uxth	r2, r3
 8008bb6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008bba:	b29b      	uxth	r3, r3
 8008bbc:	029b      	lsls	r3, r3, #10
 8008bbe:	b29b      	uxth	r3, r3
 8008bc0:	4313      	orrs	r3, r2
 8008bc2:	b29b      	uxth	r3, r3
 8008bc4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008bc8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008bcc:	b29a      	uxth	r2, r3
 8008bce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bd0:	801a      	strh	r2, [r3, #0]
 8008bd2:	e018      	b.n	8008c06 <USB_ActivateEndpoint+0x7c2>
 8008bd4:	683b      	ldr	r3, [r7, #0]
 8008bd6:	785b      	ldrb	r3, [r3, #1]
 8008bd8:	2b01      	cmp	r3, #1
 8008bda:	d114      	bne.n	8008c06 <USB_ActivateEndpoint+0x7c2>
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008be2:	b29b      	uxth	r3, r3
 8008be4:	461a      	mov	r2, r3
 8008be6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008be8:	4413      	add	r3, r2
 8008bea:	647b      	str	r3, [r7, #68]	@ 0x44
 8008bec:	683b      	ldr	r3, [r7, #0]
 8008bee:	781b      	ldrb	r3, [r3, #0]
 8008bf0:	00da      	lsls	r2, r3, #3
 8008bf2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008bf4:	4413      	add	r3, r2
 8008bf6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008bfa:	643b      	str	r3, [r7, #64]	@ 0x40
 8008bfc:	683b      	ldr	r3, [r7, #0]
 8008bfe:	691b      	ldr	r3, [r3, #16]
 8008c00:	b29a      	uxth	r2, r3
 8008c02:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008c04:	801a      	strh	r2, [r3, #0]

      /* Set endpoint RX to valid state */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008c06:	687a      	ldr	r2, [r7, #4]
 8008c08:	683b      	ldr	r3, [r7, #0]
 8008c0a:	781b      	ldrb	r3, [r3, #0]
 8008c0c:	009b      	lsls	r3, r3, #2
 8008c0e:	4413      	add	r3, r2
 8008c10:	881b      	ldrh	r3, [r3, #0]
 8008c12:	b29b      	uxth	r3, r3
 8008c14:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008c18:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008c1c:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8008c1e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8008c20:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008c24:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8008c26:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8008c28:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008c2c:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8008c2e:	687a      	ldr	r2, [r7, #4]
 8008c30:	683b      	ldr	r3, [r7, #0]
 8008c32:	781b      	ldrb	r3, [r3, #0]
 8008c34:	009b      	lsls	r3, r3, #2
 8008c36:	441a      	add	r2, r3
 8008c38:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8008c3a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008c3e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008c42:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008c46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008c4a:	b29b      	uxth	r3, r3
 8008c4c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008c4e:	687a      	ldr	r2, [r7, #4]
 8008c50:	683b      	ldr	r3, [r7, #0]
 8008c52:	781b      	ldrb	r3, [r3, #0]
 8008c54:	009b      	lsls	r3, r3, #2
 8008c56:	4413      	add	r3, r2
 8008c58:	881b      	ldrh	r3, [r3, #0]
 8008c5a:	b29b      	uxth	r3, r3
 8008c5c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008c60:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008c64:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8008c66:	687a      	ldr	r2, [r7, #4]
 8008c68:	683b      	ldr	r3, [r7, #0]
 8008c6a:	781b      	ldrb	r3, [r3, #0]
 8008c6c:	009b      	lsls	r3, r3, #2
 8008c6e:	441a      	add	r2, r3
 8008c70:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8008c72:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008c76:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008c7a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008c7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008c82:	b29b      	uxth	r3, r3
 8008c84:	8013      	strh	r3, [r2, #0]
 8008c86:	e0bc      	b.n	8008e02 <USB_ActivateEndpoint+0x9be>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008c88:	687a      	ldr	r2, [r7, #4]
 8008c8a:	683b      	ldr	r3, [r7, #0]
 8008c8c:	781b      	ldrb	r3, [r3, #0]
 8008c8e:	009b      	lsls	r3, r3, #2
 8008c90:	4413      	add	r3, r2
 8008c92:	881b      	ldrh	r3, [r3, #0]
 8008c94:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 8008c98:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8008c9c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d01d      	beq.n	8008ce0 <USB_ActivateEndpoint+0x89c>
 8008ca4:	687a      	ldr	r2, [r7, #4]
 8008ca6:	683b      	ldr	r3, [r7, #0]
 8008ca8:	781b      	ldrb	r3, [r3, #0]
 8008caa:	009b      	lsls	r3, r3, #2
 8008cac:	4413      	add	r3, r2
 8008cae:	881b      	ldrh	r3, [r3, #0]
 8008cb0:	b29b      	uxth	r3, r3
 8008cb2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008cb6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008cba:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 8008cbe:	687a      	ldr	r2, [r7, #4]
 8008cc0:	683b      	ldr	r3, [r7, #0]
 8008cc2:	781b      	ldrb	r3, [r3, #0]
 8008cc4:	009b      	lsls	r3, r3, #2
 8008cc6:	441a      	add	r2, r3
 8008cc8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8008ccc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008cd0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008cd4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008cd8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008cdc:	b29b      	uxth	r3, r3
 8008cde:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008ce0:	687a      	ldr	r2, [r7, #4]
 8008ce2:	683b      	ldr	r3, [r7, #0]
 8008ce4:	781b      	ldrb	r3, [r3, #0]
 8008ce6:	009b      	lsls	r3, r3, #2
 8008ce8:	4413      	add	r3, r2
 8008cea:	881b      	ldrh	r3, [r3, #0]
 8008cec:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
 8008cf0:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 8008cf4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d01d      	beq.n	8008d38 <USB_ActivateEndpoint+0x8f4>
 8008cfc:	687a      	ldr	r2, [r7, #4]
 8008cfe:	683b      	ldr	r3, [r7, #0]
 8008d00:	781b      	ldrb	r3, [r3, #0]
 8008d02:	009b      	lsls	r3, r3, #2
 8008d04:	4413      	add	r3, r2
 8008d06:	881b      	ldrh	r3, [r3, #0]
 8008d08:	b29b      	uxth	r3, r3
 8008d0a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008d0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008d12:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
 8008d16:	687a      	ldr	r2, [r7, #4]
 8008d18:	683b      	ldr	r3, [r7, #0]
 8008d1a:	781b      	ldrb	r3, [r3, #0]
 8008d1c:	009b      	lsls	r3, r3, #2
 8008d1e:	441a      	add	r2, r3
 8008d20:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 8008d24:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008d28:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008d2c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008d30:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008d34:	b29b      	uxth	r3, r3
 8008d36:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008d38:	683b      	ldr	r3, [r7, #0]
 8008d3a:	78db      	ldrb	r3, [r3, #3]
 8008d3c:	2b01      	cmp	r3, #1
 8008d3e:	d024      	beq.n	8008d8a <USB_ActivateEndpoint+0x946>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008d40:	687a      	ldr	r2, [r7, #4]
 8008d42:	683b      	ldr	r3, [r7, #0]
 8008d44:	781b      	ldrb	r3, [r3, #0]
 8008d46:	009b      	lsls	r3, r3, #2
 8008d48:	4413      	add	r3, r2
 8008d4a:	881b      	ldrh	r3, [r3, #0]
 8008d4c:	b29b      	uxth	r3, r3
 8008d4e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008d52:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008d56:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8008d5a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8008d5e:	f083 0320 	eor.w	r3, r3, #32
 8008d62:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8008d66:	687a      	ldr	r2, [r7, #4]
 8008d68:	683b      	ldr	r3, [r7, #0]
 8008d6a:	781b      	ldrb	r3, [r3, #0]
 8008d6c:	009b      	lsls	r3, r3, #2
 8008d6e:	441a      	add	r2, r3
 8008d70:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8008d74:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008d78:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008d7c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008d80:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008d84:	b29b      	uxth	r3, r3
 8008d86:	8013      	strh	r3, [r2, #0]
 8008d88:	e01d      	b.n	8008dc6 <USB_ActivateEndpoint+0x982>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008d8a:	687a      	ldr	r2, [r7, #4]
 8008d8c:	683b      	ldr	r3, [r7, #0]
 8008d8e:	781b      	ldrb	r3, [r3, #0]
 8008d90:	009b      	lsls	r3, r3, #2
 8008d92:	4413      	add	r3, r2
 8008d94:	881b      	ldrh	r3, [r3, #0]
 8008d96:	b29b      	uxth	r3, r3
 8008d98:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008d9c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008da0:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8008da4:	687a      	ldr	r2, [r7, #4]
 8008da6:	683b      	ldr	r3, [r7, #0]
 8008da8:	781b      	ldrb	r3, [r3, #0]
 8008daa:	009b      	lsls	r3, r3, #2
 8008dac:	441a      	add	r2, r3
 8008dae:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8008db2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008db6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008dba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008dbe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008dc2:	b29b      	uxth	r3, r3
 8008dc4:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008dc6:	687a      	ldr	r2, [r7, #4]
 8008dc8:	683b      	ldr	r3, [r7, #0]
 8008dca:	781b      	ldrb	r3, [r3, #0]
 8008dcc:	009b      	lsls	r3, r3, #2
 8008dce:	4413      	add	r3, r2
 8008dd0:	881b      	ldrh	r3, [r3, #0]
 8008dd2:	b29b      	uxth	r3, r3
 8008dd4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008dd8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008ddc:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8008de0:	687a      	ldr	r2, [r7, #4]
 8008de2:	683b      	ldr	r3, [r7, #0]
 8008de4:	781b      	ldrb	r3, [r3, #0]
 8008de6:	009b      	lsls	r3, r3, #2
 8008de8:	441a      	add	r2, r3
 8008dea:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8008dee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008df2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008df6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008dfa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008dfe:	b29b      	uxth	r3, r3
 8008e00:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8008e02:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
}
 8008e06:	4618      	mov	r0, r3
 8008e08:	379c      	adds	r7, #156	@ 0x9c
 8008e0a:	46bd      	mov	sp, r7
 8008e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e10:	4770      	bx	lr
 8008e12:	bf00      	nop

08008e14 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008e14:	b480      	push	{r7}
 8008e16:	b08d      	sub	sp, #52	@ 0x34
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	6078      	str	r0, [r7, #4]
 8008e1c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008e1e:	683b      	ldr	r3, [r7, #0]
 8008e20:	7b1b      	ldrb	r3, [r3, #12]
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	f040 808e 	bne.w	8008f44 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8008e28:	683b      	ldr	r3, [r7, #0]
 8008e2a:	785b      	ldrb	r3, [r3, #1]
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d044      	beq.n	8008eba <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008e30:	687a      	ldr	r2, [r7, #4]
 8008e32:	683b      	ldr	r3, [r7, #0]
 8008e34:	781b      	ldrb	r3, [r3, #0]
 8008e36:	009b      	lsls	r3, r3, #2
 8008e38:	4413      	add	r3, r2
 8008e3a:	881b      	ldrh	r3, [r3, #0]
 8008e3c:	81bb      	strh	r3, [r7, #12]
 8008e3e:	89bb      	ldrh	r3, [r7, #12]
 8008e40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d01b      	beq.n	8008e80 <USB_DeactivateEndpoint+0x6c>
 8008e48:	687a      	ldr	r2, [r7, #4]
 8008e4a:	683b      	ldr	r3, [r7, #0]
 8008e4c:	781b      	ldrb	r3, [r3, #0]
 8008e4e:	009b      	lsls	r3, r3, #2
 8008e50:	4413      	add	r3, r2
 8008e52:	881b      	ldrh	r3, [r3, #0]
 8008e54:	b29b      	uxth	r3, r3
 8008e56:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008e5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008e5e:	817b      	strh	r3, [r7, #10]
 8008e60:	687a      	ldr	r2, [r7, #4]
 8008e62:	683b      	ldr	r3, [r7, #0]
 8008e64:	781b      	ldrb	r3, [r3, #0]
 8008e66:	009b      	lsls	r3, r3, #2
 8008e68:	441a      	add	r2, r3
 8008e6a:	897b      	ldrh	r3, [r7, #10]
 8008e6c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008e70:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008e74:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008e78:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008e7c:	b29b      	uxth	r3, r3
 8008e7e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008e80:	687a      	ldr	r2, [r7, #4]
 8008e82:	683b      	ldr	r3, [r7, #0]
 8008e84:	781b      	ldrb	r3, [r3, #0]
 8008e86:	009b      	lsls	r3, r3, #2
 8008e88:	4413      	add	r3, r2
 8008e8a:	881b      	ldrh	r3, [r3, #0]
 8008e8c:	b29b      	uxth	r3, r3
 8008e8e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008e92:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008e96:	813b      	strh	r3, [r7, #8]
 8008e98:	687a      	ldr	r2, [r7, #4]
 8008e9a:	683b      	ldr	r3, [r7, #0]
 8008e9c:	781b      	ldrb	r3, [r3, #0]
 8008e9e:	009b      	lsls	r3, r3, #2
 8008ea0:	441a      	add	r2, r3
 8008ea2:	893b      	ldrh	r3, [r7, #8]
 8008ea4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008ea8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008eac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008eb0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008eb4:	b29b      	uxth	r3, r3
 8008eb6:	8013      	strh	r3, [r2, #0]
 8008eb8:	e192      	b.n	80091e0 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008eba:	687a      	ldr	r2, [r7, #4]
 8008ebc:	683b      	ldr	r3, [r7, #0]
 8008ebe:	781b      	ldrb	r3, [r3, #0]
 8008ec0:	009b      	lsls	r3, r3, #2
 8008ec2:	4413      	add	r3, r2
 8008ec4:	881b      	ldrh	r3, [r3, #0]
 8008ec6:	827b      	strh	r3, [r7, #18]
 8008ec8:	8a7b      	ldrh	r3, [r7, #18]
 8008eca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d01b      	beq.n	8008f0a <USB_DeactivateEndpoint+0xf6>
 8008ed2:	687a      	ldr	r2, [r7, #4]
 8008ed4:	683b      	ldr	r3, [r7, #0]
 8008ed6:	781b      	ldrb	r3, [r3, #0]
 8008ed8:	009b      	lsls	r3, r3, #2
 8008eda:	4413      	add	r3, r2
 8008edc:	881b      	ldrh	r3, [r3, #0]
 8008ede:	b29b      	uxth	r3, r3
 8008ee0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008ee4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008ee8:	823b      	strh	r3, [r7, #16]
 8008eea:	687a      	ldr	r2, [r7, #4]
 8008eec:	683b      	ldr	r3, [r7, #0]
 8008eee:	781b      	ldrb	r3, [r3, #0]
 8008ef0:	009b      	lsls	r3, r3, #2
 8008ef2:	441a      	add	r2, r3
 8008ef4:	8a3b      	ldrh	r3, [r7, #16]
 8008ef6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008efa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008efe:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008f02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008f06:	b29b      	uxth	r3, r3
 8008f08:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008f0a:	687a      	ldr	r2, [r7, #4]
 8008f0c:	683b      	ldr	r3, [r7, #0]
 8008f0e:	781b      	ldrb	r3, [r3, #0]
 8008f10:	009b      	lsls	r3, r3, #2
 8008f12:	4413      	add	r3, r2
 8008f14:	881b      	ldrh	r3, [r3, #0]
 8008f16:	b29b      	uxth	r3, r3
 8008f18:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008f1c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008f20:	81fb      	strh	r3, [r7, #14]
 8008f22:	687a      	ldr	r2, [r7, #4]
 8008f24:	683b      	ldr	r3, [r7, #0]
 8008f26:	781b      	ldrb	r3, [r3, #0]
 8008f28:	009b      	lsls	r3, r3, #2
 8008f2a:	441a      	add	r2, r3
 8008f2c:	89fb      	ldrh	r3, [r7, #14]
 8008f2e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008f32:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008f36:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008f3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008f3e:	b29b      	uxth	r3, r3
 8008f40:	8013      	strh	r3, [r2, #0]
 8008f42:	e14d      	b.n	80091e0 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8008f44:	683b      	ldr	r3, [r7, #0]
 8008f46:	785b      	ldrb	r3, [r3, #1]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	f040 80a5 	bne.w	8009098 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008f4e:	687a      	ldr	r2, [r7, #4]
 8008f50:	683b      	ldr	r3, [r7, #0]
 8008f52:	781b      	ldrb	r3, [r3, #0]
 8008f54:	009b      	lsls	r3, r3, #2
 8008f56:	4413      	add	r3, r2
 8008f58:	881b      	ldrh	r3, [r3, #0]
 8008f5a:	843b      	strh	r3, [r7, #32]
 8008f5c:	8c3b      	ldrh	r3, [r7, #32]
 8008f5e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d01b      	beq.n	8008f9e <USB_DeactivateEndpoint+0x18a>
 8008f66:	687a      	ldr	r2, [r7, #4]
 8008f68:	683b      	ldr	r3, [r7, #0]
 8008f6a:	781b      	ldrb	r3, [r3, #0]
 8008f6c:	009b      	lsls	r3, r3, #2
 8008f6e:	4413      	add	r3, r2
 8008f70:	881b      	ldrh	r3, [r3, #0]
 8008f72:	b29b      	uxth	r3, r3
 8008f74:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008f78:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008f7c:	83fb      	strh	r3, [r7, #30]
 8008f7e:	687a      	ldr	r2, [r7, #4]
 8008f80:	683b      	ldr	r3, [r7, #0]
 8008f82:	781b      	ldrb	r3, [r3, #0]
 8008f84:	009b      	lsls	r3, r3, #2
 8008f86:	441a      	add	r2, r3
 8008f88:	8bfb      	ldrh	r3, [r7, #30]
 8008f8a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008f8e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008f92:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008f96:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008f9a:	b29b      	uxth	r3, r3
 8008f9c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008f9e:	687a      	ldr	r2, [r7, #4]
 8008fa0:	683b      	ldr	r3, [r7, #0]
 8008fa2:	781b      	ldrb	r3, [r3, #0]
 8008fa4:	009b      	lsls	r3, r3, #2
 8008fa6:	4413      	add	r3, r2
 8008fa8:	881b      	ldrh	r3, [r3, #0]
 8008faa:	83bb      	strh	r3, [r7, #28]
 8008fac:	8bbb      	ldrh	r3, [r7, #28]
 8008fae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d01b      	beq.n	8008fee <USB_DeactivateEndpoint+0x1da>
 8008fb6:	687a      	ldr	r2, [r7, #4]
 8008fb8:	683b      	ldr	r3, [r7, #0]
 8008fba:	781b      	ldrb	r3, [r3, #0]
 8008fbc:	009b      	lsls	r3, r3, #2
 8008fbe:	4413      	add	r3, r2
 8008fc0:	881b      	ldrh	r3, [r3, #0]
 8008fc2:	b29b      	uxth	r3, r3
 8008fc4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008fc8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008fcc:	837b      	strh	r3, [r7, #26]
 8008fce:	687a      	ldr	r2, [r7, #4]
 8008fd0:	683b      	ldr	r3, [r7, #0]
 8008fd2:	781b      	ldrb	r3, [r3, #0]
 8008fd4:	009b      	lsls	r3, r3, #2
 8008fd6:	441a      	add	r2, r3
 8008fd8:	8b7b      	ldrh	r3, [r7, #26]
 8008fda:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008fde:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008fe2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008fe6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008fea:	b29b      	uxth	r3, r3
 8008fec:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8008fee:	687a      	ldr	r2, [r7, #4]
 8008ff0:	683b      	ldr	r3, [r7, #0]
 8008ff2:	781b      	ldrb	r3, [r3, #0]
 8008ff4:	009b      	lsls	r3, r3, #2
 8008ff6:	4413      	add	r3, r2
 8008ff8:	881b      	ldrh	r3, [r3, #0]
 8008ffa:	b29b      	uxth	r3, r3
 8008ffc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009000:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009004:	833b      	strh	r3, [r7, #24]
 8009006:	687a      	ldr	r2, [r7, #4]
 8009008:	683b      	ldr	r3, [r7, #0]
 800900a:	781b      	ldrb	r3, [r3, #0]
 800900c:	009b      	lsls	r3, r3, #2
 800900e:	441a      	add	r2, r3
 8009010:	8b3b      	ldrh	r3, [r7, #24]
 8009012:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009016:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800901a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800901e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009022:	b29b      	uxth	r3, r3
 8009024:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009026:	687a      	ldr	r2, [r7, #4]
 8009028:	683b      	ldr	r3, [r7, #0]
 800902a:	781b      	ldrb	r3, [r3, #0]
 800902c:	009b      	lsls	r3, r3, #2
 800902e:	4413      	add	r3, r2
 8009030:	881b      	ldrh	r3, [r3, #0]
 8009032:	b29b      	uxth	r3, r3
 8009034:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009038:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800903c:	82fb      	strh	r3, [r7, #22]
 800903e:	687a      	ldr	r2, [r7, #4]
 8009040:	683b      	ldr	r3, [r7, #0]
 8009042:	781b      	ldrb	r3, [r3, #0]
 8009044:	009b      	lsls	r3, r3, #2
 8009046:	441a      	add	r2, r3
 8009048:	8afb      	ldrh	r3, [r7, #22]
 800904a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800904e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009052:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009056:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800905a:	b29b      	uxth	r3, r3
 800905c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800905e:	687a      	ldr	r2, [r7, #4]
 8009060:	683b      	ldr	r3, [r7, #0]
 8009062:	781b      	ldrb	r3, [r3, #0]
 8009064:	009b      	lsls	r3, r3, #2
 8009066:	4413      	add	r3, r2
 8009068:	881b      	ldrh	r3, [r3, #0]
 800906a:	b29b      	uxth	r3, r3
 800906c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009070:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009074:	82bb      	strh	r3, [r7, #20]
 8009076:	687a      	ldr	r2, [r7, #4]
 8009078:	683b      	ldr	r3, [r7, #0]
 800907a:	781b      	ldrb	r3, [r3, #0]
 800907c:	009b      	lsls	r3, r3, #2
 800907e:	441a      	add	r2, r3
 8009080:	8abb      	ldrh	r3, [r7, #20]
 8009082:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009086:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800908a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800908e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009092:	b29b      	uxth	r3, r3
 8009094:	8013      	strh	r3, [r2, #0]
 8009096:	e0a3      	b.n	80091e0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009098:	687a      	ldr	r2, [r7, #4]
 800909a:	683b      	ldr	r3, [r7, #0]
 800909c:	781b      	ldrb	r3, [r3, #0]
 800909e:	009b      	lsls	r3, r3, #2
 80090a0:	4413      	add	r3, r2
 80090a2:	881b      	ldrh	r3, [r3, #0]
 80090a4:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80090a6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80090a8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d01b      	beq.n	80090e8 <USB_DeactivateEndpoint+0x2d4>
 80090b0:	687a      	ldr	r2, [r7, #4]
 80090b2:	683b      	ldr	r3, [r7, #0]
 80090b4:	781b      	ldrb	r3, [r3, #0]
 80090b6:	009b      	lsls	r3, r3, #2
 80090b8:	4413      	add	r3, r2
 80090ba:	881b      	ldrh	r3, [r3, #0]
 80090bc:	b29b      	uxth	r3, r3
 80090be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80090c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80090c6:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 80090c8:	687a      	ldr	r2, [r7, #4]
 80090ca:	683b      	ldr	r3, [r7, #0]
 80090cc:	781b      	ldrb	r3, [r3, #0]
 80090ce:	009b      	lsls	r3, r3, #2
 80090d0:	441a      	add	r2, r3
 80090d2:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80090d4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80090d8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80090dc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80090e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80090e4:	b29b      	uxth	r3, r3
 80090e6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80090e8:	687a      	ldr	r2, [r7, #4]
 80090ea:	683b      	ldr	r3, [r7, #0]
 80090ec:	781b      	ldrb	r3, [r3, #0]
 80090ee:	009b      	lsls	r3, r3, #2
 80090f0:	4413      	add	r3, r2
 80090f2:	881b      	ldrh	r3, [r3, #0]
 80090f4:	857b      	strh	r3, [r7, #42]	@ 0x2a
 80090f6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80090f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d01b      	beq.n	8009138 <USB_DeactivateEndpoint+0x324>
 8009100:	687a      	ldr	r2, [r7, #4]
 8009102:	683b      	ldr	r3, [r7, #0]
 8009104:	781b      	ldrb	r3, [r3, #0]
 8009106:	009b      	lsls	r3, r3, #2
 8009108:	4413      	add	r3, r2
 800910a:	881b      	ldrh	r3, [r3, #0]
 800910c:	b29b      	uxth	r3, r3
 800910e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009112:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009116:	853b      	strh	r3, [r7, #40]	@ 0x28
 8009118:	687a      	ldr	r2, [r7, #4]
 800911a:	683b      	ldr	r3, [r7, #0]
 800911c:	781b      	ldrb	r3, [r3, #0]
 800911e:	009b      	lsls	r3, r3, #2
 8009120:	441a      	add	r2, r3
 8009122:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8009124:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009128:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800912c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009130:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009134:	b29b      	uxth	r3, r3
 8009136:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8009138:	687a      	ldr	r2, [r7, #4]
 800913a:	683b      	ldr	r3, [r7, #0]
 800913c:	781b      	ldrb	r3, [r3, #0]
 800913e:	009b      	lsls	r3, r3, #2
 8009140:	4413      	add	r3, r2
 8009142:	881b      	ldrh	r3, [r3, #0]
 8009144:	b29b      	uxth	r3, r3
 8009146:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800914a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800914e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8009150:	687a      	ldr	r2, [r7, #4]
 8009152:	683b      	ldr	r3, [r7, #0]
 8009154:	781b      	ldrb	r3, [r3, #0]
 8009156:	009b      	lsls	r3, r3, #2
 8009158:	441a      	add	r2, r3
 800915a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800915c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009160:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009164:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009168:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800916c:	b29b      	uxth	r3, r3
 800916e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009170:	687a      	ldr	r2, [r7, #4]
 8009172:	683b      	ldr	r3, [r7, #0]
 8009174:	781b      	ldrb	r3, [r3, #0]
 8009176:	009b      	lsls	r3, r3, #2
 8009178:	4413      	add	r3, r2
 800917a:	881b      	ldrh	r3, [r3, #0]
 800917c:	b29b      	uxth	r3, r3
 800917e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009182:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009186:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8009188:	687a      	ldr	r2, [r7, #4]
 800918a:	683b      	ldr	r3, [r7, #0]
 800918c:	781b      	ldrb	r3, [r3, #0]
 800918e:	009b      	lsls	r3, r3, #2
 8009190:	441a      	add	r2, r3
 8009192:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009194:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009198:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800919c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80091a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80091a4:	b29b      	uxth	r3, r3
 80091a6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80091a8:	687a      	ldr	r2, [r7, #4]
 80091aa:	683b      	ldr	r3, [r7, #0]
 80091ac:	781b      	ldrb	r3, [r3, #0]
 80091ae:	009b      	lsls	r3, r3, #2
 80091b0:	4413      	add	r3, r2
 80091b2:	881b      	ldrh	r3, [r3, #0]
 80091b4:	b29b      	uxth	r3, r3
 80091b6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80091ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80091be:	847b      	strh	r3, [r7, #34]	@ 0x22
 80091c0:	687a      	ldr	r2, [r7, #4]
 80091c2:	683b      	ldr	r3, [r7, #0]
 80091c4:	781b      	ldrb	r3, [r3, #0]
 80091c6:	009b      	lsls	r3, r3, #2
 80091c8:	441a      	add	r2, r3
 80091ca:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80091cc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80091d0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80091d4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80091d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80091dc:	b29b      	uxth	r3, r3
 80091de:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80091e0:	2300      	movs	r3, #0
}
 80091e2:	4618      	mov	r0, r3
 80091e4:	3734      	adds	r7, #52	@ 0x34
 80091e6:	46bd      	mov	sp, r7
 80091e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ec:	4770      	bx	lr

080091ee <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80091ee:	b580      	push	{r7, lr}
 80091f0:	b0ac      	sub	sp, #176	@ 0xb0
 80091f2:	af00      	add	r7, sp, #0
 80091f4:	6078      	str	r0, [r7, #4]
 80091f6:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80091f8:	683b      	ldr	r3, [r7, #0]
 80091fa:	785b      	ldrb	r3, [r3, #1]
 80091fc:	2b01      	cmp	r3, #1
 80091fe:	f040 84ca 	bne.w	8009b96 <USB_EPStartXfer+0x9a8>
  {
    /* Multi packet transfer */
    if (ep->xfer_len > ep->maxpacket)
 8009202:	683b      	ldr	r3, [r7, #0]
 8009204:	699a      	ldr	r2, [r3, #24]
 8009206:	683b      	ldr	r3, [r7, #0]
 8009208:	691b      	ldr	r3, [r3, #16]
 800920a:	429a      	cmp	r2, r3
 800920c:	d904      	bls.n	8009218 <USB_EPStartXfer+0x2a>
    {
      len = ep->maxpacket;
 800920e:	683b      	ldr	r3, [r7, #0]
 8009210:	691b      	ldr	r3, [r3, #16]
 8009212:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009216:	e003      	b.n	8009220 <USB_EPStartXfer+0x32>
    }
    else
    {
      len = ep->xfer_len;
 8009218:	683b      	ldr	r3, [r7, #0]
 800921a:	699b      	ldr	r3, [r3, #24]
 800921c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8009220:	683b      	ldr	r3, [r7, #0]
 8009222:	7b1b      	ldrb	r3, [r3, #12]
 8009224:	2b00      	cmp	r3, #0
 8009226:	d122      	bne.n	800926e <USB_EPStartXfer+0x80>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8009228:	683b      	ldr	r3, [r7, #0]
 800922a:	6959      	ldr	r1, [r3, #20]
 800922c:	683b      	ldr	r3, [r7, #0]
 800922e:	88da      	ldrh	r2, [r3, #6]
 8009230:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009234:	b29b      	uxth	r3, r3
 8009236:	6878      	ldr	r0, [r7, #4]
 8009238:	f000 febd 	bl	8009fb6 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	613b      	str	r3, [r7, #16]
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009246:	b29b      	uxth	r3, r3
 8009248:	461a      	mov	r2, r3
 800924a:	693b      	ldr	r3, [r7, #16]
 800924c:	4413      	add	r3, r2
 800924e:	613b      	str	r3, [r7, #16]
 8009250:	683b      	ldr	r3, [r7, #0]
 8009252:	781b      	ldrb	r3, [r3, #0]
 8009254:	00da      	lsls	r2, r3, #3
 8009256:	693b      	ldr	r3, [r7, #16]
 8009258:	4413      	add	r3, r2
 800925a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800925e:	60fb      	str	r3, [r7, #12]
 8009260:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009264:	b29a      	uxth	r2, r3
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	801a      	strh	r2, [r3, #0]
 800926a:	f000 bc6f 	b.w	8009b4c <USB_EPStartXfer+0x95e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800926e:	683b      	ldr	r3, [r7, #0]
 8009270:	78db      	ldrb	r3, [r3, #3]
 8009272:	2b02      	cmp	r3, #2
 8009274:	f040 831e 	bne.w	80098b4 <USB_EPStartXfer+0x6c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8009278:	683b      	ldr	r3, [r7, #0]
 800927a:	6a1a      	ldr	r2, [r3, #32]
 800927c:	683b      	ldr	r3, [r7, #0]
 800927e:	691b      	ldr	r3, [r3, #16]
 8009280:	429a      	cmp	r2, r3
 8009282:	f240 82cf 	bls.w	8009824 <USB_EPStartXfer+0x636>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8009286:	687a      	ldr	r2, [r7, #4]
 8009288:	683b      	ldr	r3, [r7, #0]
 800928a:	781b      	ldrb	r3, [r3, #0]
 800928c:	009b      	lsls	r3, r3, #2
 800928e:	4413      	add	r3, r2
 8009290:	881b      	ldrh	r3, [r3, #0]
 8009292:	b29b      	uxth	r3, r3
 8009294:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009298:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800929c:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 80092a0:	687a      	ldr	r2, [r7, #4]
 80092a2:	683b      	ldr	r3, [r7, #0]
 80092a4:	781b      	ldrb	r3, [r3, #0]
 80092a6:	009b      	lsls	r3, r3, #2
 80092a8:	441a      	add	r2, r3
 80092aa:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80092ae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80092b2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80092b6:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80092ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80092be:	b29b      	uxth	r3, r3
 80092c0:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80092c2:	683b      	ldr	r3, [r7, #0]
 80092c4:	6a1a      	ldr	r2, [r3, #32]
 80092c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80092ca:	1ad2      	subs	r2, r2, r3
 80092cc:	683b      	ldr	r3, [r7, #0]
 80092ce:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80092d0:	687a      	ldr	r2, [r7, #4]
 80092d2:	683b      	ldr	r3, [r7, #0]
 80092d4:	781b      	ldrb	r3, [r3, #0]
 80092d6:	009b      	lsls	r3, r3, #2
 80092d8:	4413      	add	r3, r2
 80092da:	881b      	ldrh	r3, [r3, #0]
 80092dc:	b29b      	uxth	r3, r3
 80092de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	f000 814f 	beq.w	8009586 <USB_EPStartXfer+0x398>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	633b      	str	r3, [r7, #48]	@ 0x30
 80092ec:	683b      	ldr	r3, [r7, #0]
 80092ee:	785b      	ldrb	r3, [r3, #1]
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d16b      	bne.n	80093cc <USB_EPStartXfer+0x1de>
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80092fe:	b29b      	uxth	r3, r3
 8009300:	461a      	mov	r2, r3
 8009302:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009304:	4413      	add	r3, r2
 8009306:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009308:	683b      	ldr	r3, [r7, #0]
 800930a:	781b      	ldrb	r3, [r3, #0]
 800930c:	00da      	lsls	r2, r3, #3
 800930e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009310:	4413      	add	r3, r2
 8009312:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009316:	627b      	str	r3, [r7, #36]	@ 0x24
 8009318:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800931a:	881b      	ldrh	r3, [r3, #0]
 800931c:	b29b      	uxth	r3, r3
 800931e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009322:	b29a      	uxth	r2, r3
 8009324:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009326:	801a      	strh	r2, [r3, #0]
 8009328:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800932c:	2b00      	cmp	r3, #0
 800932e:	d10a      	bne.n	8009346 <USB_EPStartXfer+0x158>
 8009330:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009332:	881b      	ldrh	r3, [r3, #0]
 8009334:	b29b      	uxth	r3, r3
 8009336:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800933a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800933e:	b29a      	uxth	r2, r3
 8009340:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009342:	801a      	strh	r2, [r3, #0]
 8009344:	e05b      	b.n	80093fe <USB_EPStartXfer+0x210>
 8009346:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800934a:	2b3e      	cmp	r3, #62	@ 0x3e
 800934c:	d81c      	bhi.n	8009388 <USB_EPStartXfer+0x19a>
 800934e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009352:	085b      	lsrs	r3, r3, #1
 8009354:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009358:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800935c:	f003 0301 	and.w	r3, r3, #1
 8009360:	2b00      	cmp	r3, #0
 8009362:	d004      	beq.n	800936e <USB_EPStartXfer+0x180>
 8009364:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009368:	3301      	adds	r3, #1
 800936a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800936e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009370:	881b      	ldrh	r3, [r3, #0]
 8009372:	b29a      	uxth	r2, r3
 8009374:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009378:	b29b      	uxth	r3, r3
 800937a:	029b      	lsls	r3, r3, #10
 800937c:	b29b      	uxth	r3, r3
 800937e:	4313      	orrs	r3, r2
 8009380:	b29a      	uxth	r2, r3
 8009382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009384:	801a      	strh	r2, [r3, #0]
 8009386:	e03a      	b.n	80093fe <USB_EPStartXfer+0x210>
 8009388:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800938c:	095b      	lsrs	r3, r3, #5
 800938e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009392:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009396:	f003 031f 	and.w	r3, r3, #31
 800939a:	2b00      	cmp	r3, #0
 800939c:	d104      	bne.n	80093a8 <USB_EPStartXfer+0x1ba>
 800939e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80093a2:	3b01      	subs	r3, #1
 80093a4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80093a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093aa:	881b      	ldrh	r3, [r3, #0]
 80093ac:	b29a      	uxth	r2, r3
 80093ae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80093b2:	b29b      	uxth	r3, r3
 80093b4:	029b      	lsls	r3, r3, #10
 80093b6:	b29b      	uxth	r3, r3
 80093b8:	4313      	orrs	r3, r2
 80093ba:	b29b      	uxth	r3, r3
 80093bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80093c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80093c4:	b29a      	uxth	r2, r3
 80093c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093c8:	801a      	strh	r2, [r3, #0]
 80093ca:	e018      	b.n	80093fe <USB_EPStartXfer+0x210>
 80093cc:	683b      	ldr	r3, [r7, #0]
 80093ce:	785b      	ldrb	r3, [r3, #1]
 80093d0:	2b01      	cmp	r3, #1
 80093d2:	d114      	bne.n	80093fe <USB_EPStartXfer+0x210>
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80093da:	b29b      	uxth	r3, r3
 80093dc:	461a      	mov	r2, r3
 80093de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093e0:	4413      	add	r3, r2
 80093e2:	633b      	str	r3, [r7, #48]	@ 0x30
 80093e4:	683b      	ldr	r3, [r7, #0]
 80093e6:	781b      	ldrb	r3, [r3, #0]
 80093e8:	00da      	lsls	r2, r3, #3
 80093ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093ec:	4413      	add	r3, r2
 80093ee:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80093f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80093f4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80093f8:	b29a      	uxth	r2, r3
 80093fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093fc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80093fe:	683b      	ldr	r3, [r7, #0]
 8009400:	895b      	ldrh	r3, [r3, #10]
 8009402:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009406:	683b      	ldr	r3, [r7, #0]
 8009408:	6959      	ldr	r1, [r3, #20]
 800940a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800940e:	b29b      	uxth	r3, r3
 8009410:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009414:	6878      	ldr	r0, [r7, #4]
 8009416:	f000 fdce 	bl	8009fb6 <USB_WritePMA>
            ep->xfer_buff += len;
 800941a:	683b      	ldr	r3, [r7, #0]
 800941c:	695a      	ldr	r2, [r3, #20]
 800941e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009422:	441a      	add	r2, r3
 8009424:	683b      	ldr	r3, [r7, #0]
 8009426:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8009428:	683b      	ldr	r3, [r7, #0]
 800942a:	6a1a      	ldr	r2, [r3, #32]
 800942c:	683b      	ldr	r3, [r7, #0]
 800942e:	691b      	ldr	r3, [r3, #16]
 8009430:	429a      	cmp	r2, r3
 8009432:	d907      	bls.n	8009444 <USB_EPStartXfer+0x256>
            {
              ep->xfer_len_db -= len;
 8009434:	683b      	ldr	r3, [r7, #0]
 8009436:	6a1a      	ldr	r2, [r3, #32]
 8009438:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800943c:	1ad2      	subs	r2, r2, r3
 800943e:	683b      	ldr	r3, [r7, #0]
 8009440:	621a      	str	r2, [r3, #32]
 8009442:	e006      	b.n	8009452 <USB_EPStartXfer+0x264>
            }
            else
            {
              len = ep->xfer_len_db;
 8009444:	683b      	ldr	r3, [r7, #0]
 8009446:	6a1b      	ldr	r3, [r3, #32]
 8009448:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 800944c:	683b      	ldr	r3, [r7, #0]
 800944e:	2200      	movs	r2, #0
 8009450:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009452:	683b      	ldr	r3, [r7, #0]
 8009454:	785b      	ldrb	r3, [r3, #1]
 8009456:	2b00      	cmp	r3, #0
 8009458:	d16b      	bne.n	8009532 <USB_EPStartXfer+0x344>
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	61bb      	str	r3, [r7, #24]
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009464:	b29b      	uxth	r3, r3
 8009466:	461a      	mov	r2, r3
 8009468:	69bb      	ldr	r3, [r7, #24]
 800946a:	4413      	add	r3, r2
 800946c:	61bb      	str	r3, [r7, #24]
 800946e:	683b      	ldr	r3, [r7, #0]
 8009470:	781b      	ldrb	r3, [r3, #0]
 8009472:	00da      	lsls	r2, r3, #3
 8009474:	69bb      	ldr	r3, [r7, #24]
 8009476:	4413      	add	r3, r2
 8009478:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800947c:	617b      	str	r3, [r7, #20]
 800947e:	697b      	ldr	r3, [r7, #20]
 8009480:	881b      	ldrh	r3, [r3, #0]
 8009482:	b29b      	uxth	r3, r3
 8009484:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009488:	b29a      	uxth	r2, r3
 800948a:	697b      	ldr	r3, [r7, #20]
 800948c:	801a      	strh	r2, [r3, #0]
 800948e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009492:	2b00      	cmp	r3, #0
 8009494:	d10a      	bne.n	80094ac <USB_EPStartXfer+0x2be>
 8009496:	697b      	ldr	r3, [r7, #20]
 8009498:	881b      	ldrh	r3, [r3, #0]
 800949a:	b29b      	uxth	r3, r3
 800949c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80094a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80094a4:	b29a      	uxth	r2, r3
 80094a6:	697b      	ldr	r3, [r7, #20]
 80094a8:	801a      	strh	r2, [r3, #0]
 80094aa:	e05d      	b.n	8009568 <USB_EPStartXfer+0x37a>
 80094ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80094b0:	2b3e      	cmp	r3, #62	@ 0x3e
 80094b2:	d81c      	bhi.n	80094ee <USB_EPStartXfer+0x300>
 80094b4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80094b8:	085b      	lsrs	r3, r3, #1
 80094ba:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80094be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80094c2:	f003 0301 	and.w	r3, r3, #1
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d004      	beq.n	80094d4 <USB_EPStartXfer+0x2e6>
 80094ca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80094ce:	3301      	adds	r3, #1
 80094d0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80094d4:	697b      	ldr	r3, [r7, #20]
 80094d6:	881b      	ldrh	r3, [r3, #0]
 80094d8:	b29a      	uxth	r2, r3
 80094da:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80094de:	b29b      	uxth	r3, r3
 80094e0:	029b      	lsls	r3, r3, #10
 80094e2:	b29b      	uxth	r3, r3
 80094e4:	4313      	orrs	r3, r2
 80094e6:	b29a      	uxth	r2, r3
 80094e8:	697b      	ldr	r3, [r7, #20]
 80094ea:	801a      	strh	r2, [r3, #0]
 80094ec:	e03c      	b.n	8009568 <USB_EPStartXfer+0x37a>
 80094ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80094f2:	095b      	lsrs	r3, r3, #5
 80094f4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80094f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80094fc:	f003 031f 	and.w	r3, r3, #31
 8009500:	2b00      	cmp	r3, #0
 8009502:	d104      	bne.n	800950e <USB_EPStartXfer+0x320>
 8009504:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8009508:	3b01      	subs	r3, #1
 800950a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800950e:	697b      	ldr	r3, [r7, #20]
 8009510:	881b      	ldrh	r3, [r3, #0]
 8009512:	b29a      	uxth	r2, r3
 8009514:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8009518:	b29b      	uxth	r3, r3
 800951a:	029b      	lsls	r3, r3, #10
 800951c:	b29b      	uxth	r3, r3
 800951e:	4313      	orrs	r3, r2
 8009520:	b29b      	uxth	r3, r3
 8009522:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009526:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800952a:	b29a      	uxth	r2, r3
 800952c:	697b      	ldr	r3, [r7, #20]
 800952e:	801a      	strh	r2, [r3, #0]
 8009530:	e01a      	b.n	8009568 <USB_EPStartXfer+0x37a>
 8009532:	683b      	ldr	r3, [r7, #0]
 8009534:	785b      	ldrb	r3, [r3, #1]
 8009536:	2b01      	cmp	r3, #1
 8009538:	d116      	bne.n	8009568 <USB_EPStartXfer+0x37a>
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	623b      	str	r3, [r7, #32]
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009544:	b29b      	uxth	r3, r3
 8009546:	461a      	mov	r2, r3
 8009548:	6a3b      	ldr	r3, [r7, #32]
 800954a:	4413      	add	r3, r2
 800954c:	623b      	str	r3, [r7, #32]
 800954e:	683b      	ldr	r3, [r7, #0]
 8009550:	781b      	ldrb	r3, [r3, #0]
 8009552:	00da      	lsls	r2, r3, #3
 8009554:	6a3b      	ldr	r3, [r7, #32]
 8009556:	4413      	add	r3, r2
 8009558:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800955c:	61fb      	str	r3, [r7, #28]
 800955e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009562:	b29a      	uxth	r2, r3
 8009564:	69fb      	ldr	r3, [r7, #28]
 8009566:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8009568:	683b      	ldr	r3, [r7, #0]
 800956a:	891b      	ldrh	r3, [r3, #8]
 800956c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009570:	683b      	ldr	r3, [r7, #0]
 8009572:	6959      	ldr	r1, [r3, #20]
 8009574:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009578:	b29b      	uxth	r3, r3
 800957a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800957e:	6878      	ldr	r0, [r7, #4]
 8009580:	f000 fd19 	bl	8009fb6 <USB_WritePMA>
 8009584:	e2e2      	b.n	8009b4c <USB_EPStartXfer+0x95e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009586:	683b      	ldr	r3, [r7, #0]
 8009588:	785b      	ldrb	r3, [r3, #1]
 800958a:	2b00      	cmp	r3, #0
 800958c:	d16b      	bne.n	8009666 <USB_EPStartXfer+0x478>
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009598:	b29b      	uxth	r3, r3
 800959a:	461a      	mov	r2, r3
 800959c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800959e:	4413      	add	r3, r2
 80095a0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80095a2:	683b      	ldr	r3, [r7, #0]
 80095a4:	781b      	ldrb	r3, [r3, #0]
 80095a6:	00da      	lsls	r2, r3, #3
 80095a8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80095aa:	4413      	add	r3, r2
 80095ac:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80095b0:	647b      	str	r3, [r7, #68]	@ 0x44
 80095b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80095b4:	881b      	ldrh	r3, [r3, #0]
 80095b6:	b29b      	uxth	r3, r3
 80095b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80095bc:	b29a      	uxth	r2, r3
 80095be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80095c0:	801a      	strh	r2, [r3, #0]
 80095c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d10a      	bne.n	80095e0 <USB_EPStartXfer+0x3f2>
 80095ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80095cc:	881b      	ldrh	r3, [r3, #0]
 80095ce:	b29b      	uxth	r3, r3
 80095d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80095d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80095d8:	b29a      	uxth	r2, r3
 80095da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80095dc:	801a      	strh	r2, [r3, #0]
 80095de:	e05d      	b.n	800969c <USB_EPStartXfer+0x4ae>
 80095e0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80095e4:	2b3e      	cmp	r3, #62	@ 0x3e
 80095e6:	d81c      	bhi.n	8009622 <USB_EPStartXfer+0x434>
 80095e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80095ec:	085b      	lsrs	r3, r3, #1
 80095ee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80095f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80095f6:	f003 0301 	and.w	r3, r3, #1
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d004      	beq.n	8009608 <USB_EPStartXfer+0x41a>
 80095fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009602:	3301      	adds	r3, #1
 8009604:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009608:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800960a:	881b      	ldrh	r3, [r3, #0]
 800960c:	b29a      	uxth	r2, r3
 800960e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009612:	b29b      	uxth	r3, r3
 8009614:	029b      	lsls	r3, r3, #10
 8009616:	b29b      	uxth	r3, r3
 8009618:	4313      	orrs	r3, r2
 800961a:	b29a      	uxth	r2, r3
 800961c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800961e:	801a      	strh	r2, [r3, #0]
 8009620:	e03c      	b.n	800969c <USB_EPStartXfer+0x4ae>
 8009622:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009626:	095b      	lsrs	r3, r3, #5
 8009628:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800962c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009630:	f003 031f 	and.w	r3, r3, #31
 8009634:	2b00      	cmp	r3, #0
 8009636:	d104      	bne.n	8009642 <USB_EPStartXfer+0x454>
 8009638:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800963c:	3b01      	subs	r3, #1
 800963e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009642:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009644:	881b      	ldrh	r3, [r3, #0]
 8009646:	b29a      	uxth	r2, r3
 8009648:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800964c:	b29b      	uxth	r3, r3
 800964e:	029b      	lsls	r3, r3, #10
 8009650:	b29b      	uxth	r3, r3
 8009652:	4313      	orrs	r3, r2
 8009654:	b29b      	uxth	r3, r3
 8009656:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800965a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800965e:	b29a      	uxth	r2, r3
 8009660:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009662:	801a      	strh	r2, [r3, #0]
 8009664:	e01a      	b.n	800969c <USB_EPStartXfer+0x4ae>
 8009666:	683b      	ldr	r3, [r7, #0]
 8009668:	785b      	ldrb	r3, [r3, #1]
 800966a:	2b01      	cmp	r3, #1
 800966c:	d116      	bne.n	800969c <USB_EPStartXfer+0x4ae>
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	653b      	str	r3, [r7, #80]	@ 0x50
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009678:	b29b      	uxth	r3, r3
 800967a:	461a      	mov	r2, r3
 800967c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800967e:	4413      	add	r3, r2
 8009680:	653b      	str	r3, [r7, #80]	@ 0x50
 8009682:	683b      	ldr	r3, [r7, #0]
 8009684:	781b      	ldrb	r3, [r3, #0]
 8009686:	00da      	lsls	r2, r3, #3
 8009688:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800968a:	4413      	add	r3, r2
 800968c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009690:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009692:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009696:	b29a      	uxth	r2, r3
 8009698:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800969a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800969c:	683b      	ldr	r3, [r7, #0]
 800969e:	891b      	ldrh	r3, [r3, #8]
 80096a0:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80096a4:	683b      	ldr	r3, [r7, #0]
 80096a6:	6959      	ldr	r1, [r3, #20]
 80096a8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80096ac:	b29b      	uxth	r3, r3
 80096ae:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80096b2:	6878      	ldr	r0, [r7, #4]
 80096b4:	f000 fc7f 	bl	8009fb6 <USB_WritePMA>
            ep->xfer_buff += len;
 80096b8:	683b      	ldr	r3, [r7, #0]
 80096ba:	695a      	ldr	r2, [r3, #20]
 80096bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80096c0:	441a      	add	r2, r3
 80096c2:	683b      	ldr	r3, [r7, #0]
 80096c4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80096c6:	683b      	ldr	r3, [r7, #0]
 80096c8:	6a1a      	ldr	r2, [r3, #32]
 80096ca:	683b      	ldr	r3, [r7, #0]
 80096cc:	691b      	ldr	r3, [r3, #16]
 80096ce:	429a      	cmp	r2, r3
 80096d0:	d907      	bls.n	80096e2 <USB_EPStartXfer+0x4f4>
            {
              ep->xfer_len_db -= len;
 80096d2:	683b      	ldr	r3, [r7, #0]
 80096d4:	6a1a      	ldr	r2, [r3, #32]
 80096d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80096da:	1ad2      	subs	r2, r2, r3
 80096dc:	683b      	ldr	r3, [r7, #0]
 80096de:	621a      	str	r2, [r3, #32]
 80096e0:	e006      	b.n	80096f0 <USB_EPStartXfer+0x502>
            }
            else
            {
              len = ep->xfer_len_db;
 80096e2:	683b      	ldr	r3, [r7, #0]
 80096e4:	6a1b      	ldr	r3, [r3, #32]
 80096e6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 80096ea:	683b      	ldr	r3, [r7, #0]
 80096ec:	2200      	movs	r2, #0
 80096ee:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	643b      	str	r3, [r7, #64]	@ 0x40
 80096f4:	683b      	ldr	r3, [r7, #0]
 80096f6:	785b      	ldrb	r3, [r3, #1]
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d16b      	bne.n	80097d4 <USB_EPStartXfer+0x5e6>
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009706:	b29b      	uxth	r3, r3
 8009708:	461a      	mov	r2, r3
 800970a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800970c:	4413      	add	r3, r2
 800970e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009710:	683b      	ldr	r3, [r7, #0]
 8009712:	781b      	ldrb	r3, [r3, #0]
 8009714:	00da      	lsls	r2, r3, #3
 8009716:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009718:	4413      	add	r3, r2
 800971a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800971e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009720:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009722:	881b      	ldrh	r3, [r3, #0]
 8009724:	b29b      	uxth	r3, r3
 8009726:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800972a:	b29a      	uxth	r2, r3
 800972c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800972e:	801a      	strh	r2, [r3, #0]
 8009730:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009734:	2b00      	cmp	r3, #0
 8009736:	d10a      	bne.n	800974e <USB_EPStartXfer+0x560>
 8009738:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800973a:	881b      	ldrh	r3, [r3, #0]
 800973c:	b29b      	uxth	r3, r3
 800973e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009742:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009746:	b29a      	uxth	r2, r3
 8009748:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800974a:	801a      	strh	r2, [r3, #0]
 800974c:	e05b      	b.n	8009806 <USB_EPStartXfer+0x618>
 800974e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009752:	2b3e      	cmp	r3, #62	@ 0x3e
 8009754:	d81c      	bhi.n	8009790 <USB_EPStartXfer+0x5a2>
 8009756:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800975a:	085b      	lsrs	r3, r3, #1
 800975c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009760:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009764:	f003 0301 	and.w	r3, r3, #1
 8009768:	2b00      	cmp	r3, #0
 800976a:	d004      	beq.n	8009776 <USB_EPStartXfer+0x588>
 800976c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009770:	3301      	adds	r3, #1
 8009772:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009776:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009778:	881b      	ldrh	r3, [r3, #0]
 800977a:	b29a      	uxth	r2, r3
 800977c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009780:	b29b      	uxth	r3, r3
 8009782:	029b      	lsls	r3, r3, #10
 8009784:	b29b      	uxth	r3, r3
 8009786:	4313      	orrs	r3, r2
 8009788:	b29a      	uxth	r2, r3
 800978a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800978c:	801a      	strh	r2, [r3, #0]
 800978e:	e03a      	b.n	8009806 <USB_EPStartXfer+0x618>
 8009790:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009794:	095b      	lsrs	r3, r3, #5
 8009796:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800979a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800979e:	f003 031f 	and.w	r3, r3, #31
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d104      	bne.n	80097b0 <USB_EPStartXfer+0x5c2>
 80097a6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80097aa:	3b01      	subs	r3, #1
 80097ac:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80097b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80097b2:	881b      	ldrh	r3, [r3, #0]
 80097b4:	b29a      	uxth	r2, r3
 80097b6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80097ba:	b29b      	uxth	r3, r3
 80097bc:	029b      	lsls	r3, r3, #10
 80097be:	b29b      	uxth	r3, r3
 80097c0:	4313      	orrs	r3, r2
 80097c2:	b29b      	uxth	r3, r3
 80097c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80097c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80097cc:	b29a      	uxth	r2, r3
 80097ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80097d0:	801a      	strh	r2, [r3, #0]
 80097d2:	e018      	b.n	8009806 <USB_EPStartXfer+0x618>
 80097d4:	683b      	ldr	r3, [r7, #0]
 80097d6:	785b      	ldrb	r3, [r3, #1]
 80097d8:	2b01      	cmp	r3, #1
 80097da:	d114      	bne.n	8009806 <USB_EPStartXfer+0x618>
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80097e2:	b29b      	uxth	r3, r3
 80097e4:	461a      	mov	r2, r3
 80097e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80097e8:	4413      	add	r3, r2
 80097ea:	643b      	str	r3, [r7, #64]	@ 0x40
 80097ec:	683b      	ldr	r3, [r7, #0]
 80097ee:	781b      	ldrb	r3, [r3, #0]
 80097f0:	00da      	lsls	r2, r3, #3
 80097f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80097f4:	4413      	add	r3, r2
 80097f6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80097fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80097fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009800:	b29a      	uxth	r2, r3
 8009802:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009804:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8009806:	683b      	ldr	r3, [r7, #0]
 8009808:	895b      	ldrh	r3, [r3, #10]
 800980a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800980e:	683b      	ldr	r3, [r7, #0]
 8009810:	6959      	ldr	r1, [r3, #20]
 8009812:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009816:	b29b      	uxth	r3, r3
 8009818:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800981c:	6878      	ldr	r0, [r7, #4]
 800981e:	f000 fbca 	bl	8009fb6 <USB_WritePMA>
 8009822:	e193      	b.n	8009b4c <USB_EPStartXfer+0x95e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8009824:	683b      	ldr	r3, [r7, #0]
 8009826:	6a1b      	ldr	r3, [r3, #32]
 8009828:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800982c:	687a      	ldr	r2, [r7, #4]
 800982e:	683b      	ldr	r3, [r7, #0]
 8009830:	781b      	ldrb	r3, [r3, #0]
 8009832:	009b      	lsls	r3, r3, #2
 8009834:	4413      	add	r3, r2
 8009836:	881b      	ldrh	r3, [r3, #0]
 8009838:	b29b      	uxth	r3, r3
 800983a:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800983e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009842:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8009846:	687a      	ldr	r2, [r7, #4]
 8009848:	683b      	ldr	r3, [r7, #0]
 800984a:	781b      	ldrb	r3, [r3, #0]
 800984c:	009b      	lsls	r3, r3, #2
 800984e:	441a      	add	r2, r3
 8009850:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8009854:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009858:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800985c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009860:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009864:	b29b      	uxth	r3, r3
 8009866:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009872:	b29b      	uxth	r3, r3
 8009874:	461a      	mov	r2, r3
 8009876:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009878:	4413      	add	r3, r2
 800987a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800987c:	683b      	ldr	r3, [r7, #0]
 800987e:	781b      	ldrb	r3, [r3, #0]
 8009880:	00da      	lsls	r2, r3, #3
 8009882:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009884:	4413      	add	r3, r2
 8009886:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800988a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800988c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009890:	b29a      	uxth	r2, r3
 8009892:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009894:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8009896:	683b      	ldr	r3, [r7, #0]
 8009898:	891b      	ldrh	r3, [r3, #8]
 800989a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800989e:	683b      	ldr	r3, [r7, #0]
 80098a0:	6959      	ldr	r1, [r3, #20]
 80098a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80098a6:	b29b      	uxth	r3, r3
 80098a8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80098ac:	6878      	ldr	r0, [r7, #4]
 80098ae:	f000 fb82 	bl	8009fb6 <USB_WritePMA>
 80098b2:	e14b      	b.n	8009b4c <USB_EPStartXfer+0x95e>
        }
      }
      else /* Manage isochronous double buffer IN mode */
      {
        /* Each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80098b4:	683b      	ldr	r3, [r7, #0]
 80098b6:	6a1a      	ldr	r2, [r3, #32]
 80098b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80098bc:	1ad2      	subs	r2, r2, r3
 80098be:	683b      	ldr	r3, [r7, #0]
 80098c0:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80098c2:	687a      	ldr	r2, [r7, #4]
 80098c4:	683b      	ldr	r3, [r7, #0]
 80098c6:	781b      	ldrb	r3, [r3, #0]
 80098c8:	009b      	lsls	r3, r3, #2
 80098ca:	4413      	add	r3, r2
 80098cc:	881b      	ldrh	r3, [r3, #0]
 80098ce:	b29b      	uxth	r3, r3
 80098d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	f000 809a 	beq.w	8009a0e <USB_EPStartXfer+0x820>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	673b      	str	r3, [r7, #112]	@ 0x70
 80098de:	683b      	ldr	r3, [r7, #0]
 80098e0:	785b      	ldrb	r3, [r3, #1]
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d16b      	bne.n	80099be <USB_EPStartXfer+0x7d0>
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80098f0:	b29b      	uxth	r3, r3
 80098f2:	461a      	mov	r2, r3
 80098f4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80098f6:	4413      	add	r3, r2
 80098f8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80098fa:	683b      	ldr	r3, [r7, #0]
 80098fc:	781b      	ldrb	r3, [r3, #0]
 80098fe:	00da      	lsls	r2, r3, #3
 8009900:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009902:	4413      	add	r3, r2
 8009904:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009908:	667b      	str	r3, [r7, #100]	@ 0x64
 800990a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800990c:	881b      	ldrh	r3, [r3, #0]
 800990e:	b29b      	uxth	r3, r3
 8009910:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009914:	b29a      	uxth	r2, r3
 8009916:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009918:	801a      	strh	r2, [r3, #0]
 800991a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800991e:	2b00      	cmp	r3, #0
 8009920:	d10a      	bne.n	8009938 <USB_EPStartXfer+0x74a>
 8009922:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009924:	881b      	ldrh	r3, [r3, #0]
 8009926:	b29b      	uxth	r3, r3
 8009928:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800992c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009930:	b29a      	uxth	r2, r3
 8009932:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009934:	801a      	strh	r2, [r3, #0]
 8009936:	e05b      	b.n	80099f0 <USB_EPStartXfer+0x802>
 8009938:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800993c:	2b3e      	cmp	r3, #62	@ 0x3e
 800993e:	d81c      	bhi.n	800997a <USB_EPStartXfer+0x78c>
 8009940:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009944:	085b      	lsrs	r3, r3, #1
 8009946:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800994a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800994e:	f003 0301 	and.w	r3, r3, #1
 8009952:	2b00      	cmp	r3, #0
 8009954:	d004      	beq.n	8009960 <USB_EPStartXfer+0x772>
 8009956:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800995a:	3301      	adds	r3, #1
 800995c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009960:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009962:	881b      	ldrh	r3, [r3, #0]
 8009964:	b29a      	uxth	r2, r3
 8009966:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800996a:	b29b      	uxth	r3, r3
 800996c:	029b      	lsls	r3, r3, #10
 800996e:	b29b      	uxth	r3, r3
 8009970:	4313      	orrs	r3, r2
 8009972:	b29a      	uxth	r2, r3
 8009974:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009976:	801a      	strh	r2, [r3, #0]
 8009978:	e03a      	b.n	80099f0 <USB_EPStartXfer+0x802>
 800997a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800997e:	095b      	lsrs	r3, r3, #5
 8009980:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009984:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009988:	f003 031f 	and.w	r3, r3, #31
 800998c:	2b00      	cmp	r3, #0
 800998e:	d104      	bne.n	800999a <USB_EPStartXfer+0x7ac>
 8009990:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009994:	3b01      	subs	r3, #1
 8009996:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800999a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800999c:	881b      	ldrh	r3, [r3, #0]
 800999e:	b29a      	uxth	r2, r3
 80099a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80099a4:	b29b      	uxth	r3, r3
 80099a6:	029b      	lsls	r3, r3, #10
 80099a8:	b29b      	uxth	r3, r3
 80099aa:	4313      	orrs	r3, r2
 80099ac:	b29b      	uxth	r3, r3
 80099ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80099b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80099b6:	b29a      	uxth	r2, r3
 80099b8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80099ba:	801a      	strh	r2, [r3, #0]
 80099bc:	e018      	b.n	80099f0 <USB_EPStartXfer+0x802>
 80099be:	683b      	ldr	r3, [r7, #0]
 80099c0:	785b      	ldrb	r3, [r3, #1]
 80099c2:	2b01      	cmp	r3, #1
 80099c4:	d114      	bne.n	80099f0 <USB_EPStartXfer+0x802>
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80099cc:	b29b      	uxth	r3, r3
 80099ce:	461a      	mov	r2, r3
 80099d0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80099d2:	4413      	add	r3, r2
 80099d4:	673b      	str	r3, [r7, #112]	@ 0x70
 80099d6:	683b      	ldr	r3, [r7, #0]
 80099d8:	781b      	ldrb	r3, [r3, #0]
 80099da:	00da      	lsls	r2, r3, #3
 80099dc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80099de:	4413      	add	r3, r2
 80099e0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80099e4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80099e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80099ea:	b29a      	uxth	r2, r3
 80099ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80099ee:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80099f0:	683b      	ldr	r3, [r7, #0]
 80099f2:	895b      	ldrh	r3, [r3, #10]
 80099f4:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80099f8:	683b      	ldr	r3, [r7, #0]
 80099fa:	6959      	ldr	r1, [r3, #20]
 80099fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009a00:	b29b      	uxth	r3, r3
 8009a02:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009a06:	6878      	ldr	r0, [r7, #4]
 8009a08:	f000 fad5 	bl	8009fb6 <USB_WritePMA>
 8009a0c:	e09e      	b.n	8009b4c <USB_EPStartXfer+0x95e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009a0e:	683b      	ldr	r3, [r7, #0]
 8009a10:	785b      	ldrb	r3, [r3, #1]
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d16b      	bne.n	8009aee <USB_EPStartXfer+0x900>
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009a20:	b29b      	uxth	r3, r3
 8009a22:	461a      	mov	r2, r3
 8009a24:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009a26:	4413      	add	r3, r2
 8009a28:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009a2a:	683b      	ldr	r3, [r7, #0]
 8009a2c:	781b      	ldrb	r3, [r3, #0]
 8009a2e:	00da      	lsls	r2, r3, #3
 8009a30:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009a32:	4413      	add	r3, r2
 8009a34:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009a38:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009a3a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009a3c:	881b      	ldrh	r3, [r3, #0]
 8009a3e:	b29b      	uxth	r3, r3
 8009a40:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009a44:	b29a      	uxth	r2, r3
 8009a46:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009a48:	801a      	strh	r2, [r3, #0]
 8009a4a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d10a      	bne.n	8009a68 <USB_EPStartXfer+0x87a>
 8009a52:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009a54:	881b      	ldrh	r3, [r3, #0]
 8009a56:	b29b      	uxth	r3, r3
 8009a58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009a5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009a60:	b29a      	uxth	r2, r3
 8009a62:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009a64:	801a      	strh	r2, [r3, #0]
 8009a66:	e063      	b.n	8009b30 <USB_EPStartXfer+0x942>
 8009a68:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009a6c:	2b3e      	cmp	r3, #62	@ 0x3e
 8009a6e:	d81c      	bhi.n	8009aaa <USB_EPStartXfer+0x8bc>
 8009a70:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009a74:	085b      	lsrs	r3, r3, #1
 8009a76:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009a7a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009a7e:	f003 0301 	and.w	r3, r3, #1
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d004      	beq.n	8009a90 <USB_EPStartXfer+0x8a2>
 8009a86:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8009a8a:	3301      	adds	r3, #1
 8009a8c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009a90:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009a92:	881b      	ldrh	r3, [r3, #0]
 8009a94:	b29a      	uxth	r2, r3
 8009a96:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8009a9a:	b29b      	uxth	r3, r3
 8009a9c:	029b      	lsls	r3, r3, #10
 8009a9e:	b29b      	uxth	r3, r3
 8009aa0:	4313      	orrs	r3, r2
 8009aa2:	b29a      	uxth	r2, r3
 8009aa4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009aa6:	801a      	strh	r2, [r3, #0]
 8009aa8:	e042      	b.n	8009b30 <USB_EPStartXfer+0x942>
 8009aaa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009aae:	095b      	lsrs	r3, r3, #5
 8009ab0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009ab4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009ab8:	f003 031f 	and.w	r3, r3, #31
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d104      	bne.n	8009aca <USB_EPStartXfer+0x8dc>
 8009ac0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8009ac4:	3b01      	subs	r3, #1
 8009ac6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009aca:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009acc:	881b      	ldrh	r3, [r3, #0]
 8009ace:	b29a      	uxth	r2, r3
 8009ad0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8009ad4:	b29b      	uxth	r3, r3
 8009ad6:	029b      	lsls	r3, r3, #10
 8009ad8:	b29b      	uxth	r3, r3
 8009ada:	4313      	orrs	r3, r2
 8009adc:	b29b      	uxth	r3, r3
 8009ade:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009ae2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009ae6:	b29a      	uxth	r2, r3
 8009ae8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009aea:	801a      	strh	r2, [r3, #0]
 8009aec:	e020      	b.n	8009b30 <USB_EPStartXfer+0x942>
 8009aee:	683b      	ldr	r3, [r7, #0]
 8009af0:	785b      	ldrb	r3, [r3, #1]
 8009af2:	2b01      	cmp	r3, #1
 8009af4:	d11c      	bne.n	8009b30 <USB_EPStartXfer+0x942>
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009b02:	b29b      	uxth	r3, r3
 8009b04:	461a      	mov	r2, r3
 8009b06:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009b0a:	4413      	add	r3, r2
 8009b0c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009b10:	683b      	ldr	r3, [r7, #0]
 8009b12:	781b      	ldrb	r3, [r3, #0]
 8009b14:	00da      	lsls	r2, r3, #3
 8009b16:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009b1a:	4413      	add	r3, r2
 8009b1c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009b20:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009b24:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009b28:	b29a      	uxth	r2, r3
 8009b2a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009b2e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8009b30:	683b      	ldr	r3, [r7, #0]
 8009b32:	891b      	ldrh	r3, [r3, #8]
 8009b34:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009b38:	683b      	ldr	r3, [r7, #0]
 8009b3a:	6959      	ldr	r1, [r3, #20]
 8009b3c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009b40:	b29b      	uxth	r3, r3
 8009b42:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009b46:	6878      	ldr	r0, [r7, #4]
 8009b48:	f000 fa35 	bl	8009fb6 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8009b4c:	687a      	ldr	r2, [r7, #4]
 8009b4e:	683b      	ldr	r3, [r7, #0]
 8009b50:	781b      	ldrb	r3, [r3, #0]
 8009b52:	009b      	lsls	r3, r3, #2
 8009b54:	4413      	add	r3, r2
 8009b56:	881b      	ldrh	r3, [r3, #0]
 8009b58:	b29b      	uxth	r3, r3
 8009b5a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009b5e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009b62:	817b      	strh	r3, [r7, #10]
 8009b64:	897b      	ldrh	r3, [r7, #10]
 8009b66:	f083 0310 	eor.w	r3, r3, #16
 8009b6a:	817b      	strh	r3, [r7, #10]
 8009b6c:	897b      	ldrh	r3, [r7, #10]
 8009b6e:	f083 0320 	eor.w	r3, r3, #32
 8009b72:	817b      	strh	r3, [r7, #10]
 8009b74:	687a      	ldr	r2, [r7, #4]
 8009b76:	683b      	ldr	r3, [r7, #0]
 8009b78:	781b      	ldrb	r3, [r3, #0]
 8009b7a:	009b      	lsls	r3, r3, #2
 8009b7c:	441a      	add	r2, r3
 8009b7e:	897b      	ldrh	r3, [r7, #10]
 8009b80:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009b84:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009b88:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009b8c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009b90:	b29b      	uxth	r3, r3
 8009b92:	8013      	strh	r3, [r2, #0]
 8009b94:	e0d5      	b.n	8009d42 <USB_EPStartXfer+0xb54>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8009b96:	683b      	ldr	r3, [r7, #0]
 8009b98:	7b1b      	ldrb	r3, [r3, #12]
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d156      	bne.n	8009c4c <USB_EPStartXfer+0xa5e>
    {
      if ((ep->xfer_len == 0U) && (ep->type == EP_TYPE_CTRL))
 8009b9e:	683b      	ldr	r3, [r7, #0]
 8009ba0:	699b      	ldr	r3, [r3, #24]
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d122      	bne.n	8009bec <USB_EPStartXfer+0x9fe>
 8009ba6:	683b      	ldr	r3, [r7, #0]
 8009ba8:	78db      	ldrb	r3, [r3, #3]
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d11e      	bne.n	8009bec <USB_EPStartXfer+0x9fe>
      {
        /* This is a status out stage set the OUT_STATUS */
        PCD_SET_OUT_STATUS(USBx, ep->num);
 8009bae:	687a      	ldr	r2, [r7, #4]
 8009bb0:	683b      	ldr	r3, [r7, #0]
 8009bb2:	781b      	ldrb	r3, [r3, #0]
 8009bb4:	009b      	lsls	r3, r3, #2
 8009bb6:	4413      	add	r3, r2
 8009bb8:	881b      	ldrh	r3, [r3, #0]
 8009bba:	b29b      	uxth	r3, r3
 8009bbc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009bc0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009bc4:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 8009bc8:	687a      	ldr	r2, [r7, #4]
 8009bca:	683b      	ldr	r3, [r7, #0]
 8009bcc:	781b      	ldrb	r3, [r3, #0]
 8009bce:	009b      	lsls	r3, r3, #2
 8009bd0:	441a      	add	r2, r3
 8009bd2:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8009bd6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009bda:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009bde:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8009be2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009be6:	b29b      	uxth	r3, r3
 8009be8:	8013      	strh	r3, [r2, #0]
 8009bea:	e01d      	b.n	8009c28 <USB_EPStartXfer+0xa3a>
      }
      else
      {
        PCD_CLEAR_OUT_STATUS(USBx, ep->num);
 8009bec:	687a      	ldr	r2, [r7, #4]
 8009bee:	683b      	ldr	r3, [r7, #0]
 8009bf0:	781b      	ldrb	r3, [r3, #0]
 8009bf2:	009b      	lsls	r3, r3, #2
 8009bf4:	4413      	add	r3, r2
 8009bf6:	881b      	ldrh	r3, [r3, #0]
 8009bf8:	b29b      	uxth	r3, r3
 8009bfa:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8009bfe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009c02:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
 8009c06:	687a      	ldr	r2, [r7, #4]
 8009c08:	683b      	ldr	r3, [r7, #0]
 8009c0a:	781b      	ldrb	r3, [r3, #0]
 8009c0c:	009b      	lsls	r3, r3, #2
 8009c0e:	441a      	add	r2, r3
 8009c10:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 8009c14:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009c18:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009c1c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009c20:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009c24:	b29b      	uxth	r3, r3
 8009c26:	8013      	strh	r3, [r2, #0]
      }

      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8009c28:	683b      	ldr	r3, [r7, #0]
 8009c2a:	699a      	ldr	r2, [r3, #24]
 8009c2c:	683b      	ldr	r3, [r7, #0]
 8009c2e:	691b      	ldr	r3, [r3, #16]
 8009c30:	429a      	cmp	r2, r3
 8009c32:	d907      	bls.n	8009c44 <USB_EPStartXfer+0xa56>
      {
        ep->xfer_len -= ep->maxpacket;
 8009c34:	683b      	ldr	r3, [r7, #0]
 8009c36:	699a      	ldr	r2, [r3, #24]
 8009c38:	683b      	ldr	r3, [r7, #0]
 8009c3a:	691b      	ldr	r3, [r3, #16]
 8009c3c:	1ad2      	subs	r2, r2, r3
 8009c3e:	683b      	ldr	r3, [r7, #0]
 8009c40:	619a      	str	r2, [r3, #24]
 8009c42:	e054      	b.n	8009cee <USB_EPStartXfer+0xb00>
      }
      else
      {
        ep->xfer_len = 0U;
 8009c44:	683b      	ldr	r3, [r7, #0]
 8009c46:	2200      	movs	r2, #0
 8009c48:	619a      	str	r2, [r3, #24]
 8009c4a:	e050      	b.n	8009cee <USB_EPStartXfer+0xb00>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8009c4c:	683b      	ldr	r3, [r7, #0]
 8009c4e:	78db      	ldrb	r3, [r3, #3]
 8009c50:	2b02      	cmp	r3, #2
 8009c52:	d142      	bne.n	8009cda <USB_EPStartXfer+0xaec>
      {
        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8009c54:	683b      	ldr	r3, [r7, #0]
 8009c56:	69db      	ldr	r3, [r3, #28]
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d048      	beq.n	8009cee <USB_EPStartXfer+0xb00>
        {
          /* Update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8009c5c:	687a      	ldr	r2, [r7, #4]
 8009c5e:	683b      	ldr	r3, [r7, #0]
 8009c60:	781b      	ldrb	r3, [r3, #0]
 8009c62:	009b      	lsls	r3, r3, #2
 8009c64:	4413      	add	r3, r2
 8009c66:	881b      	ldrh	r3, [r3, #0]
 8009c68:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92

          /* Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009c6c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8009c70:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d005      	beq.n	8009c84 <USB_EPStartXfer+0xa96>
 8009c78:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8009c7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d10b      	bne.n	8009c9c <USB_EPStartXfer+0xaae>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009c84:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8009c88:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d12e      	bne.n	8009cee <USB_EPStartXfer+0xb00>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009c90:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8009c94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d128      	bne.n	8009cee <USB_EPStartXfer+0xb00>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8009c9c:	687a      	ldr	r2, [r7, #4]
 8009c9e:	683b      	ldr	r3, [r7, #0]
 8009ca0:	781b      	ldrb	r3, [r3, #0]
 8009ca2:	009b      	lsls	r3, r3, #2
 8009ca4:	4413      	add	r3, r2
 8009ca6:	881b      	ldrh	r3, [r3, #0]
 8009ca8:	b29b      	uxth	r3, r3
 8009caa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009cae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009cb2:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
 8009cb6:	687a      	ldr	r2, [r7, #4]
 8009cb8:	683b      	ldr	r3, [r7, #0]
 8009cba:	781b      	ldrb	r3, [r3, #0]
 8009cbc:	009b      	lsls	r3, r3, #2
 8009cbe:	441a      	add	r2, r3
 8009cc0:	f8b7 3090 	ldrh.w	r3, [r7, #144]	@ 0x90
 8009cc4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009cc8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009ccc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009cd0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009cd4:	b29b      	uxth	r3, r3
 8009cd6:	8013      	strh	r3, [r2, #0]
 8009cd8:	e009      	b.n	8009cee <USB_EPStartXfer+0xb00>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8009cda:	683b      	ldr	r3, [r7, #0]
 8009cdc:	78db      	ldrb	r3, [r3, #3]
 8009cde:	2b01      	cmp	r3, #1
 8009ce0:	d103      	bne.n	8009cea <USB_EPStartXfer+0xafc>
      {
        /* Only single packet transfer supported in FS */
        ep->xfer_len = 0U;
 8009ce2:	683b      	ldr	r3, [r7, #0]
 8009ce4:	2200      	movs	r2, #0
 8009ce6:	619a      	str	r2, [r3, #24]
 8009ce8:	e001      	b.n	8009cee <USB_EPStartXfer+0xb00>
      }
      else
      {
        return HAL_ERROR;
 8009cea:	2301      	movs	r3, #1
 8009cec:	e02a      	b.n	8009d44 <USB_EPStartXfer+0xb56>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009cee:	687a      	ldr	r2, [r7, #4]
 8009cf0:	683b      	ldr	r3, [r7, #0]
 8009cf2:	781b      	ldrb	r3, [r3, #0]
 8009cf4:	009b      	lsls	r3, r3, #2
 8009cf6:	4413      	add	r3, r2
 8009cf8:	881b      	ldrh	r3, [r3, #0]
 8009cfa:	b29b      	uxth	r3, r3
 8009cfc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009d00:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009d04:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8009d08:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8009d0c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8009d10:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8009d14:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8009d18:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8009d1c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8009d20:	687a      	ldr	r2, [r7, #4]
 8009d22:	683b      	ldr	r3, [r7, #0]
 8009d24:	781b      	ldrb	r3, [r3, #0]
 8009d26:	009b      	lsls	r3, r3, #2
 8009d28:	441a      	add	r2, r3
 8009d2a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8009d2e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009d32:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009d36:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009d3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009d3e:	b29b      	uxth	r3, r3
 8009d40:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8009d42:	2300      	movs	r3, #0
}
 8009d44:	4618      	mov	r0, r3
 8009d46:	37b0      	adds	r7, #176	@ 0xb0
 8009d48:	46bd      	mov	sp, r7
 8009d4a:	bd80      	pop	{r7, pc}

08009d4c <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009d4c:	b480      	push	{r7}
 8009d4e:	b085      	sub	sp, #20
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	6078      	str	r0, [r7, #4]
 8009d54:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8009d56:	683b      	ldr	r3, [r7, #0]
 8009d58:	785b      	ldrb	r3, [r3, #1]
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d020      	beq.n	8009da0 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8009d5e:	687a      	ldr	r2, [r7, #4]
 8009d60:	683b      	ldr	r3, [r7, #0]
 8009d62:	781b      	ldrb	r3, [r3, #0]
 8009d64:	009b      	lsls	r3, r3, #2
 8009d66:	4413      	add	r3, r2
 8009d68:	881b      	ldrh	r3, [r3, #0]
 8009d6a:	b29b      	uxth	r3, r3
 8009d6c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009d70:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009d74:	81bb      	strh	r3, [r7, #12]
 8009d76:	89bb      	ldrh	r3, [r7, #12]
 8009d78:	f083 0310 	eor.w	r3, r3, #16
 8009d7c:	81bb      	strh	r3, [r7, #12]
 8009d7e:	687a      	ldr	r2, [r7, #4]
 8009d80:	683b      	ldr	r3, [r7, #0]
 8009d82:	781b      	ldrb	r3, [r3, #0]
 8009d84:	009b      	lsls	r3, r3, #2
 8009d86:	441a      	add	r2, r3
 8009d88:	89bb      	ldrh	r3, [r7, #12]
 8009d8a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009d8e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009d92:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009d96:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009d9a:	b29b      	uxth	r3, r3
 8009d9c:	8013      	strh	r3, [r2, #0]
 8009d9e:	e01f      	b.n	8009de0 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8009da0:	687a      	ldr	r2, [r7, #4]
 8009da2:	683b      	ldr	r3, [r7, #0]
 8009da4:	781b      	ldrb	r3, [r3, #0]
 8009da6:	009b      	lsls	r3, r3, #2
 8009da8:	4413      	add	r3, r2
 8009daa:	881b      	ldrh	r3, [r3, #0]
 8009dac:	b29b      	uxth	r3, r3
 8009dae:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009db2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009db6:	81fb      	strh	r3, [r7, #14]
 8009db8:	89fb      	ldrh	r3, [r7, #14]
 8009dba:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8009dbe:	81fb      	strh	r3, [r7, #14]
 8009dc0:	687a      	ldr	r2, [r7, #4]
 8009dc2:	683b      	ldr	r3, [r7, #0]
 8009dc4:	781b      	ldrb	r3, [r3, #0]
 8009dc6:	009b      	lsls	r3, r3, #2
 8009dc8:	441a      	add	r2, r3
 8009dca:	89fb      	ldrh	r3, [r7, #14]
 8009dcc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009dd0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009dd4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009dd8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009ddc:	b29b      	uxth	r3, r3
 8009dde:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8009de0:	2300      	movs	r3, #0
}
 8009de2:	4618      	mov	r0, r3
 8009de4:	3714      	adds	r7, #20
 8009de6:	46bd      	mov	sp, r7
 8009de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dec:	4770      	bx	lr

08009dee <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009dee:	b480      	push	{r7}
 8009df0:	b087      	sub	sp, #28
 8009df2:	af00      	add	r7, sp, #0
 8009df4:	6078      	str	r0, [r7, #4]
 8009df6:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8009df8:	683b      	ldr	r3, [r7, #0]
 8009dfa:	785b      	ldrb	r3, [r3, #1]
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d04c      	beq.n	8009e9a <USB_EPClearStall+0xac>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009e00:	687a      	ldr	r2, [r7, #4]
 8009e02:	683b      	ldr	r3, [r7, #0]
 8009e04:	781b      	ldrb	r3, [r3, #0]
 8009e06:	009b      	lsls	r3, r3, #2
 8009e08:	4413      	add	r3, r2
 8009e0a:	881b      	ldrh	r3, [r3, #0]
 8009e0c:	823b      	strh	r3, [r7, #16]
 8009e0e:	8a3b      	ldrh	r3, [r7, #16]
 8009e10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d01b      	beq.n	8009e50 <USB_EPClearStall+0x62>
 8009e18:	687a      	ldr	r2, [r7, #4]
 8009e1a:	683b      	ldr	r3, [r7, #0]
 8009e1c:	781b      	ldrb	r3, [r3, #0]
 8009e1e:	009b      	lsls	r3, r3, #2
 8009e20:	4413      	add	r3, r2
 8009e22:	881b      	ldrh	r3, [r3, #0]
 8009e24:	b29b      	uxth	r3, r3
 8009e26:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009e2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009e2e:	81fb      	strh	r3, [r7, #14]
 8009e30:	687a      	ldr	r2, [r7, #4]
 8009e32:	683b      	ldr	r3, [r7, #0]
 8009e34:	781b      	ldrb	r3, [r3, #0]
 8009e36:	009b      	lsls	r3, r3, #2
 8009e38:	441a      	add	r2, r3
 8009e3a:	89fb      	ldrh	r3, [r7, #14]
 8009e3c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009e40:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009e44:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009e48:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009e4c:	b29b      	uxth	r3, r3
 8009e4e:	8013      	strh	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8009e50:	683b      	ldr	r3, [r7, #0]
 8009e52:	78db      	ldrb	r3, [r3, #3]
 8009e54:	2b01      	cmp	r3, #1
 8009e56:	d06c      	beq.n	8009f32 <USB_EPClearStall+0x144>
    {
      /* Configure NAK status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009e58:	687a      	ldr	r2, [r7, #4]
 8009e5a:	683b      	ldr	r3, [r7, #0]
 8009e5c:	781b      	ldrb	r3, [r3, #0]
 8009e5e:	009b      	lsls	r3, r3, #2
 8009e60:	4413      	add	r3, r2
 8009e62:	881b      	ldrh	r3, [r3, #0]
 8009e64:	b29b      	uxth	r3, r3
 8009e66:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009e6a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009e6e:	81bb      	strh	r3, [r7, #12]
 8009e70:	89bb      	ldrh	r3, [r7, #12]
 8009e72:	f083 0320 	eor.w	r3, r3, #32
 8009e76:	81bb      	strh	r3, [r7, #12]
 8009e78:	687a      	ldr	r2, [r7, #4]
 8009e7a:	683b      	ldr	r3, [r7, #0]
 8009e7c:	781b      	ldrb	r3, [r3, #0]
 8009e7e:	009b      	lsls	r3, r3, #2
 8009e80:	441a      	add	r2, r3
 8009e82:	89bb      	ldrh	r3, [r7, #12]
 8009e84:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009e88:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009e8c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009e90:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009e94:	b29b      	uxth	r3, r3
 8009e96:	8013      	strh	r3, [r2, #0]
 8009e98:	e04b      	b.n	8009f32 <USB_EPClearStall+0x144>
    }
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009e9a:	687a      	ldr	r2, [r7, #4]
 8009e9c:	683b      	ldr	r3, [r7, #0]
 8009e9e:	781b      	ldrb	r3, [r3, #0]
 8009ea0:	009b      	lsls	r3, r3, #2
 8009ea2:	4413      	add	r3, r2
 8009ea4:	881b      	ldrh	r3, [r3, #0]
 8009ea6:	82fb      	strh	r3, [r7, #22]
 8009ea8:	8afb      	ldrh	r3, [r7, #22]
 8009eaa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d01b      	beq.n	8009eea <USB_EPClearStall+0xfc>
 8009eb2:	687a      	ldr	r2, [r7, #4]
 8009eb4:	683b      	ldr	r3, [r7, #0]
 8009eb6:	781b      	ldrb	r3, [r3, #0]
 8009eb8:	009b      	lsls	r3, r3, #2
 8009eba:	4413      	add	r3, r2
 8009ebc:	881b      	ldrh	r3, [r3, #0]
 8009ebe:	b29b      	uxth	r3, r3
 8009ec0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009ec4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009ec8:	82bb      	strh	r3, [r7, #20]
 8009eca:	687a      	ldr	r2, [r7, #4]
 8009ecc:	683b      	ldr	r3, [r7, #0]
 8009ece:	781b      	ldrb	r3, [r3, #0]
 8009ed0:	009b      	lsls	r3, r3, #2
 8009ed2:	441a      	add	r2, r3
 8009ed4:	8abb      	ldrh	r3, [r7, #20]
 8009ed6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009eda:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009ede:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009ee2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009ee6:	b29b      	uxth	r3, r3
 8009ee8:	8013      	strh	r3, [r2, #0]

    /* Configure VALID status for the Endpoint */
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009eea:	687a      	ldr	r2, [r7, #4]
 8009eec:	683b      	ldr	r3, [r7, #0]
 8009eee:	781b      	ldrb	r3, [r3, #0]
 8009ef0:	009b      	lsls	r3, r3, #2
 8009ef2:	4413      	add	r3, r2
 8009ef4:	881b      	ldrh	r3, [r3, #0]
 8009ef6:	b29b      	uxth	r3, r3
 8009ef8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009efc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009f00:	827b      	strh	r3, [r7, #18]
 8009f02:	8a7b      	ldrh	r3, [r7, #18]
 8009f04:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8009f08:	827b      	strh	r3, [r7, #18]
 8009f0a:	8a7b      	ldrh	r3, [r7, #18]
 8009f0c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8009f10:	827b      	strh	r3, [r7, #18]
 8009f12:	687a      	ldr	r2, [r7, #4]
 8009f14:	683b      	ldr	r3, [r7, #0]
 8009f16:	781b      	ldrb	r3, [r3, #0]
 8009f18:	009b      	lsls	r3, r3, #2
 8009f1a:	441a      	add	r2, r3
 8009f1c:	8a7b      	ldrh	r3, [r7, #18]
 8009f1e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009f22:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009f26:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009f2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009f2e:	b29b      	uxth	r3, r3
 8009f30:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8009f32:	2300      	movs	r3, #0
}
 8009f34:	4618      	mov	r0, r3
 8009f36:	371c      	adds	r7, #28
 8009f38:	46bd      	mov	sp, r7
 8009f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f3e:	4770      	bx	lr

08009f40 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8009f40:	b480      	push	{r7}
 8009f42:	b083      	sub	sp, #12
 8009f44:	af00      	add	r7, sp, #0
 8009f46:	6078      	str	r0, [r7, #4]
 8009f48:	460b      	mov	r3, r1
 8009f4a:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8009f4c:	78fb      	ldrb	r3, [r7, #3]
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d103      	bne.n	8009f5a <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	2280      	movs	r2, #128	@ 0x80
 8009f56:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8009f5a:	2300      	movs	r3, #0
}
 8009f5c:	4618      	mov	r0, r3
 8009f5e:	370c      	adds	r7, #12
 8009f60:	46bd      	mov	sp, r7
 8009f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f66:	4770      	bx	lr

08009f68 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8009f68:	b480      	push	{r7}
 8009f6a:	b083      	sub	sp, #12
 8009f6c:	af00      	add	r7, sp, #0
 8009f6e:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8009f76:	b29b      	uxth	r3, r3
 8009f78:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009f7c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009f80:	b29a      	uxth	r2, r3
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 8009f88:	2300      	movs	r3, #0
}
 8009f8a:	4618      	mov	r0, r3
 8009f8c:	370c      	adds	r7, #12
 8009f8e:	46bd      	mov	sp, r7
 8009f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f94:	4770      	bx	lr

08009f96 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8009f96:	b480      	push	{r7}
 8009f98:	b085      	sub	sp, #20
 8009f9a:	af00      	add	r7, sp, #0
 8009f9c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8009fa4:	b29b      	uxth	r3, r3
 8009fa6:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8009fa8:	68fb      	ldr	r3, [r7, #12]
}
 8009faa:	4618      	mov	r0, r3
 8009fac:	3714      	adds	r7, #20
 8009fae:	46bd      	mov	sp, r7
 8009fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb4:	4770      	bx	lr

08009fb6 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009fb6:	b480      	push	{r7}
 8009fb8:	b08b      	sub	sp, #44	@ 0x2c
 8009fba:	af00      	add	r7, sp, #0
 8009fbc:	60f8      	str	r0, [r7, #12]
 8009fbe:	60b9      	str	r1, [r7, #8]
 8009fc0:	4611      	mov	r1, r2
 8009fc2:	461a      	mov	r2, r3
 8009fc4:	460b      	mov	r3, r1
 8009fc6:	80fb      	strh	r3, [r7, #6]
 8009fc8:	4613      	mov	r3, r2
 8009fca:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8009fcc:	88bb      	ldrh	r3, [r7, #4]
 8009fce:	3301      	adds	r3, #1
 8009fd0:	085b      	lsrs	r3, r3, #1
 8009fd2:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009fd8:	68bb      	ldr	r3, [r7, #8]
 8009fda:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009fdc:	88fa      	ldrh	r2, [r7, #6]
 8009fde:	697b      	ldr	r3, [r7, #20]
 8009fe0:	4413      	add	r3, r2
 8009fe2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009fe6:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8009fe8:	69bb      	ldr	r3, [r7, #24]
 8009fea:	627b      	str	r3, [r7, #36]	@ 0x24
 8009fec:	e01b      	b.n	800a026 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 8009fee:	69fb      	ldr	r3, [r7, #28]
 8009ff0:	781b      	ldrb	r3, [r3, #0]
 8009ff2:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8009ff4:	69fb      	ldr	r3, [r7, #28]
 8009ff6:	3301      	adds	r3, #1
 8009ff8:	781b      	ldrb	r3, [r3, #0]
 8009ffa:	021b      	lsls	r3, r3, #8
 8009ffc:	b21a      	sxth	r2, r3
 8009ffe:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a002:	4313      	orrs	r3, r2
 800a004:	b21b      	sxth	r3, r3
 800a006:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800a008:	6a3b      	ldr	r3, [r7, #32]
 800a00a:	8a7a      	ldrh	r2, [r7, #18]
 800a00c:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800a00e:	6a3b      	ldr	r3, [r7, #32]
 800a010:	3302      	adds	r3, #2
 800a012:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800a014:	69fb      	ldr	r3, [r7, #28]
 800a016:	3301      	adds	r3, #1
 800a018:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800a01a:	69fb      	ldr	r3, [r7, #28]
 800a01c:	3301      	adds	r3, #1
 800a01e:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800a020:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a022:	3b01      	subs	r3, #1
 800a024:	627b      	str	r3, [r7, #36]	@ 0x24
 800a026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d1e0      	bne.n	8009fee <USB_WritePMA+0x38>
  }
}
 800a02c:	bf00      	nop
 800a02e:	bf00      	nop
 800a030:	372c      	adds	r7, #44	@ 0x2c
 800a032:	46bd      	mov	sp, r7
 800a034:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a038:	4770      	bx	lr

0800a03a <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a03a:	b480      	push	{r7}
 800a03c:	b08b      	sub	sp, #44	@ 0x2c
 800a03e:	af00      	add	r7, sp, #0
 800a040:	60f8      	str	r0, [r7, #12]
 800a042:	60b9      	str	r1, [r7, #8]
 800a044:	4611      	mov	r1, r2
 800a046:	461a      	mov	r2, r3
 800a048:	460b      	mov	r3, r1
 800a04a:	80fb      	strh	r3, [r7, #6]
 800a04c:	4613      	mov	r3, r2
 800a04e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800a050:	88bb      	ldrh	r3, [r7, #4]
 800a052:	085b      	lsrs	r3, r3, #1
 800a054:	b29b      	uxth	r3, r3
 800a056:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a05c:	68bb      	ldr	r3, [r7, #8]
 800a05e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a060:	88fa      	ldrh	r2, [r7, #6]
 800a062:	697b      	ldr	r3, [r7, #20]
 800a064:	4413      	add	r3, r2
 800a066:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a06a:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800a06c:	69bb      	ldr	r3, [r7, #24]
 800a06e:	627b      	str	r3, [r7, #36]	@ 0x24
 800a070:	e018      	b.n	800a0a4 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800a072:	6a3b      	ldr	r3, [r7, #32]
 800a074:	881b      	ldrh	r3, [r3, #0]
 800a076:	b29b      	uxth	r3, r3
 800a078:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800a07a:	6a3b      	ldr	r3, [r7, #32]
 800a07c:	3302      	adds	r3, #2
 800a07e:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800a080:	693b      	ldr	r3, [r7, #16]
 800a082:	b2da      	uxtb	r2, r3
 800a084:	69fb      	ldr	r3, [r7, #28]
 800a086:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a088:	69fb      	ldr	r3, [r7, #28]
 800a08a:	3301      	adds	r3, #1
 800a08c:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800a08e:	693b      	ldr	r3, [r7, #16]
 800a090:	0a1b      	lsrs	r3, r3, #8
 800a092:	b2da      	uxtb	r2, r3
 800a094:	69fb      	ldr	r3, [r7, #28]
 800a096:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a098:	69fb      	ldr	r3, [r7, #28]
 800a09a:	3301      	adds	r3, #1
 800a09c:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800a09e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0a0:	3b01      	subs	r3, #1
 800a0a2:	627b      	str	r3, [r7, #36]	@ 0x24
 800a0a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d1e3      	bne.n	800a072 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800a0aa:	88bb      	ldrh	r3, [r7, #4]
 800a0ac:	f003 0301 	and.w	r3, r3, #1
 800a0b0:	b29b      	uxth	r3, r3
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d007      	beq.n	800a0c6 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800a0b6:	6a3b      	ldr	r3, [r7, #32]
 800a0b8:	881b      	ldrh	r3, [r3, #0]
 800a0ba:	b29b      	uxth	r3, r3
 800a0bc:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800a0be:	693b      	ldr	r3, [r7, #16]
 800a0c0:	b2da      	uxtb	r2, r3
 800a0c2:	69fb      	ldr	r3, [r7, #28]
 800a0c4:	701a      	strb	r2, [r3, #0]
  }
}
 800a0c6:	bf00      	nop
 800a0c8:	372c      	adds	r7, #44	@ 0x2c
 800a0ca:	46bd      	mov	sp, r7
 800a0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d0:	4770      	bx	lr

0800a0d2 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a0d2:	b580      	push	{r7, lr}
 800a0d4:	b084      	sub	sp, #16
 800a0d6:	af00      	add	r7, sp, #0
 800a0d8:	6078      	str	r0, [r7, #4]
 800a0da:	460b      	mov	r3, r1
 800a0dc:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a0de:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800a0e2:	f002 f911 	bl	800c308 <USBD_static_malloc>
 800a0e6:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d105      	bne.n	800a0fa <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	2200      	movs	r2, #0
 800a0f2:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    return (uint8_t)USBD_EMEM;
 800a0f6:	2302      	movs	r3, #2
 800a0f8:	e066      	b.n	800a1c8 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	68fa      	ldr	r2, [r7, #12]
 800a0fe:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	7c1b      	ldrb	r3, [r3, #16]
 800a106:	2b00      	cmp	r3, #0
 800a108:	d119      	bne.n	800a13e <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a10a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a10e:	2202      	movs	r2, #2
 800a110:	2181      	movs	r1, #129	@ 0x81
 800a112:	6878      	ldr	r0, [r7, #4]
 800a114:	f001 ff9f 	bl	800c056 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	2201      	movs	r2, #1
 800a11c:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a11e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a122:	2202      	movs	r2, #2
 800a124:	2101      	movs	r1, #1
 800a126:	6878      	ldr	r0, [r7, #4]
 800a128:	f001 ff95 	bl	800c056 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	2201      	movs	r2, #1
 800a130:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	2210      	movs	r2, #16
 800a138:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
 800a13c:	e016      	b.n	800a16c <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a13e:	2340      	movs	r3, #64	@ 0x40
 800a140:	2202      	movs	r2, #2
 800a142:	2181      	movs	r1, #129	@ 0x81
 800a144:	6878      	ldr	r0, [r7, #4]
 800a146:	f001 ff86 	bl	800c056 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	2201      	movs	r2, #1
 800a14e:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a150:	2340      	movs	r3, #64	@ 0x40
 800a152:	2202      	movs	r2, #2
 800a154:	2101      	movs	r1, #1
 800a156:	6878      	ldr	r0, [r7, #4]
 800a158:	f001 ff7d 	bl	800c056 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	2201      	movs	r2, #1
 800a160:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	2210      	movs	r2, #16
 800a168:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a16c:	2308      	movs	r3, #8
 800a16e:	2203      	movs	r2, #3
 800a170:	2182      	movs	r1, #130	@ 0x82
 800a172:	6878      	ldr	r0, [r7, #4]
 800a174:	f001 ff6f 	bl	800c056 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	2201      	movs	r2, #1
 800a17c:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	2200      	movs	r2, #0
 800a18e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	2200      	movs	r2, #0
 800a196:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	7c1b      	ldrb	r3, [r3, #16]
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d109      	bne.n	800a1b6 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a1a8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a1ac:	2101      	movs	r1, #1
 800a1ae:	6878      	ldr	r0, [r7, #4]
 800a1b0:	f002 f840 	bl	800c234 <USBD_LL_PrepareReceive>
 800a1b4:	e007      	b.n	800a1c6 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a1bc:	2340      	movs	r3, #64	@ 0x40
 800a1be:	2101      	movs	r1, #1
 800a1c0:	6878      	ldr	r0, [r7, #4]
 800a1c2:	f002 f837 	bl	800c234 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a1c6:	2300      	movs	r3, #0
}
 800a1c8:	4618      	mov	r0, r3
 800a1ca:	3710      	adds	r7, #16
 800a1cc:	46bd      	mov	sp, r7
 800a1ce:	bd80      	pop	{r7, pc}

0800a1d0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a1d0:	b580      	push	{r7, lr}
 800a1d2:	b082      	sub	sp, #8
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	6078      	str	r0, [r7, #4]
 800a1d8:	460b      	mov	r3, r1
 800a1da:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800a1dc:	2181      	movs	r1, #129	@ 0x81
 800a1de:	6878      	ldr	r0, [r7, #4]
 800a1e0:	f001 ff5f 	bl	800c0a2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	2200      	movs	r2, #0
 800a1e8:	871a      	strh	r2, [r3, #56]	@ 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800a1ea:	2101      	movs	r1, #1
 800a1ec:	6878      	ldr	r0, [r7, #4]
 800a1ee:	f001 ff58 	bl	800c0a2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	2200      	movs	r2, #0
 800a1f6:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800a1fa:	2182      	movs	r1, #130	@ 0x82
 800a1fc:	6878      	ldr	r0, [r7, #4]
 800a1fe:	f001 ff50 	bl	800c0a2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	2200      	movs	r2, #0
 800a206:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	2200      	movs	r2, #0
 800a20e:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d00e      	beq.n	800a23a <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a222:	685b      	ldr	r3, [r3, #4]
 800a224:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a22c:	4618      	mov	r0, r3
 800a22e:	f002 f879 	bl	800c324 <USBD_static_free>
    pdev->pClassData = NULL;
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	2200      	movs	r2, #0
 800a236:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800a23a:	2300      	movs	r3, #0
}
 800a23c:	4618      	mov	r0, r3
 800a23e:	3708      	adds	r7, #8
 800a240:	46bd      	mov	sp, r7
 800a242:	bd80      	pop	{r7, pc}

0800a244 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800a244:	b580      	push	{r7, lr}
 800a246:	b086      	sub	sp, #24
 800a248:	af00      	add	r7, sp, #0
 800a24a:	6078      	str	r0, [r7, #4]
 800a24c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a254:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800a256:	2300      	movs	r3, #0
 800a258:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800a25a:	2300      	movs	r3, #0
 800a25c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800a25e:	2300      	movs	r3, #0
 800a260:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800a262:	693b      	ldr	r3, [r7, #16]
 800a264:	2b00      	cmp	r3, #0
 800a266:	d101      	bne.n	800a26c <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800a268:	2303      	movs	r3, #3
 800a26a:	e0af      	b.n	800a3cc <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a26c:	683b      	ldr	r3, [r7, #0]
 800a26e:	781b      	ldrb	r3, [r3, #0]
 800a270:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a274:	2b00      	cmp	r3, #0
 800a276:	d03f      	beq.n	800a2f8 <USBD_CDC_Setup+0xb4>
 800a278:	2b20      	cmp	r3, #32
 800a27a:	f040 809f 	bne.w	800a3bc <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800a27e:	683b      	ldr	r3, [r7, #0]
 800a280:	88db      	ldrh	r3, [r3, #6]
 800a282:	2b00      	cmp	r3, #0
 800a284:	d02e      	beq.n	800a2e4 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800a286:	683b      	ldr	r3, [r7, #0]
 800a288:	781b      	ldrb	r3, [r3, #0]
 800a28a:	b25b      	sxtb	r3, r3
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	da16      	bge.n	800a2be <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a296:	689b      	ldr	r3, [r3, #8]
 800a298:	683a      	ldr	r2, [r7, #0]
 800a29a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800a29c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a29e:	683a      	ldr	r2, [r7, #0]
 800a2a0:	88d2      	ldrh	r2, [r2, #6]
 800a2a2:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800a2a4:	683b      	ldr	r3, [r7, #0]
 800a2a6:	88db      	ldrh	r3, [r3, #6]
 800a2a8:	2b07      	cmp	r3, #7
 800a2aa:	bf28      	it	cs
 800a2ac:	2307      	movcs	r3, #7
 800a2ae:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800a2b0:	693b      	ldr	r3, [r7, #16]
 800a2b2:	89fa      	ldrh	r2, [r7, #14]
 800a2b4:	4619      	mov	r1, r3
 800a2b6:	6878      	ldr	r0, [r7, #4]
 800a2b8:	f001 facd 	bl	800b856 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800a2bc:	e085      	b.n	800a3ca <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800a2be:	683b      	ldr	r3, [r7, #0]
 800a2c0:	785a      	ldrb	r2, [r3, #1]
 800a2c2:	693b      	ldr	r3, [r7, #16]
 800a2c4:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800a2c8:	683b      	ldr	r3, [r7, #0]
 800a2ca:	88db      	ldrh	r3, [r3, #6]
 800a2cc:	b2da      	uxtb	r2, r3
 800a2ce:	693b      	ldr	r3, [r7, #16]
 800a2d0:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800a2d4:	6939      	ldr	r1, [r7, #16]
 800a2d6:	683b      	ldr	r3, [r7, #0]
 800a2d8:	88db      	ldrh	r3, [r3, #6]
 800a2da:	461a      	mov	r2, r3
 800a2dc:	6878      	ldr	r0, [r7, #4]
 800a2de:	f001 fae6 	bl	800b8ae <USBD_CtlPrepareRx>
      break;
 800a2e2:	e072      	b.n	800a3ca <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a2ea:	689b      	ldr	r3, [r3, #8]
 800a2ec:	683a      	ldr	r2, [r7, #0]
 800a2ee:	7850      	ldrb	r0, [r2, #1]
 800a2f0:	2200      	movs	r2, #0
 800a2f2:	6839      	ldr	r1, [r7, #0]
 800a2f4:	4798      	blx	r3
      break;
 800a2f6:	e068      	b.n	800a3ca <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a2f8:	683b      	ldr	r3, [r7, #0]
 800a2fa:	785b      	ldrb	r3, [r3, #1]
 800a2fc:	2b0b      	cmp	r3, #11
 800a2fe:	d852      	bhi.n	800a3a6 <USBD_CDC_Setup+0x162>
 800a300:	a201      	add	r2, pc, #4	@ (adr r2, 800a308 <USBD_CDC_Setup+0xc4>)
 800a302:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a306:	bf00      	nop
 800a308:	0800a339 	.word	0x0800a339
 800a30c:	0800a3b5 	.word	0x0800a3b5
 800a310:	0800a3a7 	.word	0x0800a3a7
 800a314:	0800a3a7 	.word	0x0800a3a7
 800a318:	0800a3a7 	.word	0x0800a3a7
 800a31c:	0800a3a7 	.word	0x0800a3a7
 800a320:	0800a3a7 	.word	0x0800a3a7
 800a324:	0800a3a7 	.word	0x0800a3a7
 800a328:	0800a3a7 	.word	0x0800a3a7
 800a32c:	0800a3a7 	.word	0x0800a3a7
 800a330:	0800a363 	.word	0x0800a363
 800a334:	0800a38d 	.word	0x0800a38d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a33e:	b2db      	uxtb	r3, r3
 800a340:	2b03      	cmp	r3, #3
 800a342:	d107      	bne.n	800a354 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800a344:	f107 030a 	add.w	r3, r7, #10
 800a348:	2202      	movs	r2, #2
 800a34a:	4619      	mov	r1, r3
 800a34c:	6878      	ldr	r0, [r7, #4]
 800a34e:	f001 fa82 	bl	800b856 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a352:	e032      	b.n	800a3ba <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800a354:	6839      	ldr	r1, [r7, #0]
 800a356:	6878      	ldr	r0, [r7, #4]
 800a358:	f001 fa0c 	bl	800b774 <USBD_CtlError>
            ret = USBD_FAIL;
 800a35c:	2303      	movs	r3, #3
 800a35e:	75fb      	strb	r3, [r7, #23]
          break;
 800a360:	e02b      	b.n	800a3ba <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a368:	b2db      	uxtb	r3, r3
 800a36a:	2b03      	cmp	r3, #3
 800a36c:	d107      	bne.n	800a37e <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800a36e:	f107 030d 	add.w	r3, r7, #13
 800a372:	2201      	movs	r2, #1
 800a374:	4619      	mov	r1, r3
 800a376:	6878      	ldr	r0, [r7, #4]
 800a378:	f001 fa6d 	bl	800b856 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a37c:	e01d      	b.n	800a3ba <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800a37e:	6839      	ldr	r1, [r7, #0]
 800a380:	6878      	ldr	r0, [r7, #4]
 800a382:	f001 f9f7 	bl	800b774 <USBD_CtlError>
            ret = USBD_FAIL;
 800a386:	2303      	movs	r3, #3
 800a388:	75fb      	strb	r3, [r7, #23]
          break;
 800a38a:	e016      	b.n	800a3ba <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a392:	b2db      	uxtb	r3, r3
 800a394:	2b03      	cmp	r3, #3
 800a396:	d00f      	beq.n	800a3b8 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800a398:	6839      	ldr	r1, [r7, #0]
 800a39a:	6878      	ldr	r0, [r7, #4]
 800a39c:	f001 f9ea 	bl	800b774 <USBD_CtlError>
            ret = USBD_FAIL;
 800a3a0:	2303      	movs	r3, #3
 800a3a2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800a3a4:	e008      	b.n	800a3b8 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800a3a6:	6839      	ldr	r1, [r7, #0]
 800a3a8:	6878      	ldr	r0, [r7, #4]
 800a3aa:	f001 f9e3 	bl	800b774 <USBD_CtlError>
          ret = USBD_FAIL;
 800a3ae:	2303      	movs	r3, #3
 800a3b0:	75fb      	strb	r3, [r7, #23]
          break;
 800a3b2:	e002      	b.n	800a3ba <USBD_CDC_Setup+0x176>
          break;
 800a3b4:	bf00      	nop
 800a3b6:	e008      	b.n	800a3ca <USBD_CDC_Setup+0x186>
          break;
 800a3b8:	bf00      	nop
      }
      break;
 800a3ba:	e006      	b.n	800a3ca <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800a3bc:	6839      	ldr	r1, [r7, #0]
 800a3be:	6878      	ldr	r0, [r7, #4]
 800a3c0:	f001 f9d8 	bl	800b774 <USBD_CtlError>
      ret = USBD_FAIL;
 800a3c4:	2303      	movs	r3, #3
 800a3c6:	75fb      	strb	r3, [r7, #23]
      break;
 800a3c8:	bf00      	nop
  }

  return (uint8_t)ret;
 800a3ca:	7dfb      	ldrb	r3, [r7, #23]
}
 800a3cc:	4618      	mov	r0, r3
 800a3ce:	3718      	adds	r7, #24
 800a3d0:	46bd      	mov	sp, r7
 800a3d2:	bd80      	pop	{r7, pc}

0800a3d4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a3d4:	b580      	push	{r7, lr}
 800a3d6:	b084      	sub	sp, #16
 800a3d8:	af00      	add	r7, sp, #0
 800a3da:	6078      	str	r0, [r7, #4]
 800a3dc:	460b      	mov	r3, r1
 800a3de:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800a3e6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d101      	bne.n	800a3f6 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a3f2:	2303      	movs	r3, #3
 800a3f4:	e04f      	b.n	800a496 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a3fc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800a3fe:	78fa      	ldrb	r2, [r7, #3]
 800a400:	6879      	ldr	r1, [r7, #4]
 800a402:	4613      	mov	r3, r2
 800a404:	009b      	lsls	r3, r3, #2
 800a406:	4413      	add	r3, r2
 800a408:	009b      	lsls	r3, r3, #2
 800a40a:	440b      	add	r3, r1
 800a40c:	3318      	adds	r3, #24
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	2b00      	cmp	r3, #0
 800a412:	d029      	beq.n	800a468 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800a414:	78fa      	ldrb	r2, [r7, #3]
 800a416:	6879      	ldr	r1, [r7, #4]
 800a418:	4613      	mov	r3, r2
 800a41a:	009b      	lsls	r3, r3, #2
 800a41c:	4413      	add	r3, r2
 800a41e:	009b      	lsls	r3, r3, #2
 800a420:	440b      	add	r3, r1
 800a422:	3318      	adds	r3, #24
 800a424:	681a      	ldr	r2, [r3, #0]
 800a426:	78f9      	ldrb	r1, [r7, #3]
 800a428:	68f8      	ldr	r0, [r7, #12]
 800a42a:	460b      	mov	r3, r1
 800a42c:	009b      	lsls	r3, r3, #2
 800a42e:	440b      	add	r3, r1
 800a430:	00db      	lsls	r3, r3, #3
 800a432:	4403      	add	r3, r0
 800a434:	3320      	adds	r3, #32
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	fbb2 f1f3 	udiv	r1, r2, r3
 800a43c:	fb01 f303 	mul.w	r3, r1, r3
 800a440:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800a442:	2b00      	cmp	r3, #0
 800a444:	d110      	bne.n	800a468 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800a446:	78fa      	ldrb	r2, [r7, #3]
 800a448:	6879      	ldr	r1, [r7, #4]
 800a44a:	4613      	mov	r3, r2
 800a44c:	009b      	lsls	r3, r3, #2
 800a44e:	4413      	add	r3, r2
 800a450:	009b      	lsls	r3, r3, #2
 800a452:	440b      	add	r3, r1
 800a454:	3318      	adds	r3, #24
 800a456:	2200      	movs	r2, #0
 800a458:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a45a:	78f9      	ldrb	r1, [r7, #3]
 800a45c:	2300      	movs	r3, #0
 800a45e:	2200      	movs	r2, #0
 800a460:	6878      	ldr	r0, [r7, #4]
 800a462:	f001 fec6 	bl	800c1f2 <USBD_LL_Transmit>
 800a466:	e015      	b.n	800a494 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800a468:	68bb      	ldr	r3, [r7, #8]
 800a46a:	2200      	movs	r2, #0
 800a46c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a476:	691b      	ldr	r3, [r3, #16]
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d00b      	beq.n	800a494 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a482:	691b      	ldr	r3, [r3, #16]
 800a484:	68ba      	ldr	r2, [r7, #8]
 800a486:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800a48a:	68ba      	ldr	r2, [r7, #8]
 800a48c:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800a490:	78fa      	ldrb	r2, [r7, #3]
 800a492:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800a494:	2300      	movs	r3, #0
}
 800a496:	4618      	mov	r0, r3
 800a498:	3710      	adds	r7, #16
 800a49a:	46bd      	mov	sp, r7
 800a49c:	bd80      	pop	{r7, pc}

0800a49e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a49e:	b580      	push	{r7, lr}
 800a4a0:	b084      	sub	sp, #16
 800a4a2:	af00      	add	r7, sp, #0
 800a4a4:	6078      	str	r0, [r7, #4]
 800a4a6:	460b      	mov	r3, r1
 800a4a8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a4b0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d101      	bne.n	800a4c0 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a4bc:	2303      	movs	r3, #3
 800a4be:	e015      	b.n	800a4ec <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a4c0:	78fb      	ldrb	r3, [r7, #3]
 800a4c2:	4619      	mov	r1, r3
 800a4c4:	6878      	ldr	r0, [r7, #4]
 800a4c6:	f001 fed6 	bl	800c276 <USBD_LL_GetRxDataSize>
 800a4ca:	4602      	mov	r2, r0
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a4d8:	68db      	ldr	r3, [r3, #12]
 800a4da:	68fa      	ldr	r2, [r7, #12]
 800a4dc:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800a4e0:	68fa      	ldr	r2, [r7, #12]
 800a4e2:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800a4e6:	4611      	mov	r1, r2
 800a4e8:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800a4ea:	2300      	movs	r3, #0
}
 800a4ec:	4618      	mov	r0, r3
 800a4ee:	3710      	adds	r7, #16
 800a4f0:	46bd      	mov	sp, r7
 800a4f2:	bd80      	pop	{r7, pc}

0800a4f4 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a4f4:	b580      	push	{r7, lr}
 800a4f6:	b084      	sub	sp, #16
 800a4f8:	af00      	add	r7, sp, #0
 800a4fa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a502:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	2b00      	cmp	r3, #0
 800a508:	d101      	bne.n	800a50e <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800a50a:	2303      	movs	r3, #3
 800a50c:	e01a      	b.n	800a544 <USBD_CDC_EP0_RxReady+0x50>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a514:	2b00      	cmp	r3, #0
 800a516:	d014      	beq.n	800a542 <USBD_CDC_EP0_RxReady+0x4e>
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800a51e:	2bff      	cmp	r3, #255	@ 0xff
 800a520:	d00f      	beq.n	800a542 <USBD_CDC_EP0_RxReady+0x4e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a528:	689b      	ldr	r3, [r3, #8]
 800a52a:	68fa      	ldr	r2, [r7, #12]
 800a52c:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)hcdc->data,
 800a530:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800a532:	68fa      	ldr	r2, [r7, #12]
 800a534:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a538:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	22ff      	movs	r2, #255	@ 0xff
 800a53e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800a542:	2300      	movs	r3, #0
}
 800a544:	4618      	mov	r0, r3
 800a546:	3710      	adds	r7, #16
 800a548:	46bd      	mov	sp, r7
 800a54a:	bd80      	pop	{r7, pc}

0800a54c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a54c:	b480      	push	{r7}
 800a54e:	b083      	sub	sp, #12
 800a550:	af00      	add	r7, sp, #0
 800a552:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	2243      	movs	r2, #67	@ 0x43
 800a558:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800a55a:	4b03      	ldr	r3, [pc, #12]	@ (800a568 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800a55c:	4618      	mov	r0, r3
 800a55e:	370c      	adds	r7, #12
 800a560:	46bd      	mov	sp, r7
 800a562:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a566:	4770      	bx	lr
 800a568:	2000027c 	.word	0x2000027c

0800a56c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a56c:	b480      	push	{r7}
 800a56e:	b083      	sub	sp, #12
 800a570:	af00      	add	r7, sp, #0
 800a572:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	2243      	movs	r2, #67	@ 0x43
 800a578:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800a57a:	4b03      	ldr	r3, [pc, #12]	@ (800a588 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800a57c:	4618      	mov	r0, r3
 800a57e:	370c      	adds	r7, #12
 800a580:	46bd      	mov	sp, r7
 800a582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a586:	4770      	bx	lr
 800a588:	20000238 	.word	0x20000238

0800a58c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a58c:	b480      	push	{r7}
 800a58e:	b083      	sub	sp, #12
 800a590:	af00      	add	r7, sp, #0
 800a592:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	2243      	movs	r2, #67	@ 0x43
 800a598:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800a59a:	4b03      	ldr	r3, [pc, #12]	@ (800a5a8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800a59c:	4618      	mov	r0, r3
 800a59e:	370c      	adds	r7, #12
 800a5a0:	46bd      	mov	sp, r7
 800a5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a6:	4770      	bx	lr
 800a5a8:	200002c0 	.word	0x200002c0

0800a5ac <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a5ac:	b480      	push	{r7}
 800a5ae:	b083      	sub	sp, #12
 800a5b0:	af00      	add	r7, sp, #0
 800a5b2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	220a      	movs	r2, #10
 800a5b8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800a5ba:	4b03      	ldr	r3, [pc, #12]	@ (800a5c8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a5bc:	4618      	mov	r0, r3
 800a5be:	370c      	adds	r7, #12
 800a5c0:	46bd      	mov	sp, r7
 800a5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c6:	4770      	bx	lr
 800a5c8:	200001f4 	.word	0x200001f4

0800a5cc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800a5cc:	b480      	push	{r7}
 800a5ce:	b083      	sub	sp, #12
 800a5d0:	af00      	add	r7, sp, #0
 800a5d2:	6078      	str	r0, [r7, #4]
 800a5d4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800a5d6:	683b      	ldr	r3, [r7, #0]
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d101      	bne.n	800a5e0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800a5dc:	2303      	movs	r3, #3
 800a5de:	e004      	b.n	800a5ea <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	683a      	ldr	r2, [r7, #0]
 800a5e4:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  return (uint8_t)USBD_OK;
 800a5e8:	2300      	movs	r3, #0
}
 800a5ea:	4618      	mov	r0, r3
 800a5ec:	370c      	adds	r7, #12
 800a5ee:	46bd      	mov	sp, r7
 800a5f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f4:	4770      	bx	lr

0800a5f6 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800a5f6:	b480      	push	{r7}
 800a5f8:	b087      	sub	sp, #28
 800a5fa:	af00      	add	r7, sp, #0
 800a5fc:	60f8      	str	r0, [r7, #12]
 800a5fe:	60b9      	str	r1, [r7, #8]
 800a600:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a608:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800a60a:	697b      	ldr	r3, [r7, #20]
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d101      	bne.n	800a614 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800a610:	2303      	movs	r3, #3
 800a612:	e008      	b.n	800a626 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800a614:	697b      	ldr	r3, [r7, #20]
 800a616:	68ba      	ldr	r2, [r7, #8]
 800a618:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800a61c:	697b      	ldr	r3, [r7, #20]
 800a61e:	687a      	ldr	r2, [r7, #4]
 800a620:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800a624:	2300      	movs	r3, #0
}
 800a626:	4618      	mov	r0, r3
 800a628:	371c      	adds	r7, #28
 800a62a:	46bd      	mov	sp, r7
 800a62c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a630:	4770      	bx	lr

0800a632 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800a632:	b480      	push	{r7}
 800a634:	b085      	sub	sp, #20
 800a636:	af00      	add	r7, sp, #0
 800a638:	6078      	str	r0, [r7, #4]
 800a63a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a642:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	2b00      	cmp	r3, #0
 800a648:	d101      	bne.n	800a64e <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800a64a:	2303      	movs	r3, #3
 800a64c:	e004      	b.n	800a658 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	683a      	ldr	r2, [r7, #0]
 800a652:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800a656:	2300      	movs	r3, #0
}
 800a658:	4618      	mov	r0, r3
 800a65a:	3714      	adds	r7, #20
 800a65c:	46bd      	mov	sp, r7
 800a65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a662:	4770      	bx	lr

0800a664 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800a664:	b580      	push	{r7, lr}
 800a666:	b084      	sub	sp, #16
 800a668:	af00      	add	r7, sp, #0
 800a66a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a672:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800a674:	2301      	movs	r3, #1
 800a676:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d101      	bne.n	800a686 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a682:	2303      	movs	r3, #3
 800a684:	e01a      	b.n	800a6bc <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800a686:	68bb      	ldr	r3, [r7, #8]
 800a688:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d114      	bne.n	800a6ba <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800a690:	68bb      	ldr	r3, [r7, #8]
 800a692:	2201      	movs	r2, #1
 800a694:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800a698:	68bb      	ldr	r3, [r7, #8]
 800a69a:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800a6a2:	68bb      	ldr	r3, [r7, #8]
 800a6a4:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800a6a8:	68bb      	ldr	r3, [r7, #8]
 800a6aa:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800a6ae:	2181      	movs	r1, #129	@ 0x81
 800a6b0:	6878      	ldr	r0, [r7, #4]
 800a6b2:	f001 fd9e 	bl	800c1f2 <USBD_LL_Transmit>

    ret = USBD_OK;
 800a6b6:	2300      	movs	r3, #0
 800a6b8:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800a6ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6bc:	4618      	mov	r0, r3
 800a6be:	3710      	adds	r7, #16
 800a6c0:	46bd      	mov	sp, r7
 800a6c2:	bd80      	pop	{r7, pc}

0800a6c4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a6c4:	b580      	push	{r7, lr}
 800a6c6:	b084      	sub	sp, #16
 800a6c8:	af00      	add	r7, sp, #0
 800a6ca:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a6d2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d101      	bne.n	800a6e2 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800a6de:	2303      	movs	r3, #3
 800a6e0:	e016      	b.n	800a710 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	7c1b      	ldrb	r3, [r3, #16]
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d109      	bne.n	800a6fe <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a6f0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a6f4:	2101      	movs	r1, #1
 800a6f6:	6878      	ldr	r0, [r7, #4]
 800a6f8:	f001 fd9c 	bl	800c234 <USBD_LL_PrepareReceive>
 800a6fc:	e007      	b.n	800a70e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a704:	2340      	movs	r3, #64	@ 0x40
 800a706:	2101      	movs	r1, #1
 800a708:	6878      	ldr	r0, [r7, #4]
 800a70a:	f001 fd93 	bl	800c234 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a70e:	2300      	movs	r3, #0
}
 800a710:	4618      	mov	r0, r3
 800a712:	3710      	adds	r7, #16
 800a714:	46bd      	mov	sp, r7
 800a716:	bd80      	pop	{r7, pc}

0800a718 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a718:	b580      	push	{r7, lr}
 800a71a:	b086      	sub	sp, #24
 800a71c:	af00      	add	r7, sp, #0
 800a71e:	60f8      	str	r0, [r7, #12]
 800a720:	60b9      	str	r1, [r7, #8]
 800a722:	4613      	mov	r3, r2
 800a724:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d101      	bne.n	800a730 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800a72c:	2303      	movs	r3, #3
 800a72e:	e01f      	b.n	800a770 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	2200      	movs	r2, #0
 800a734:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	2200      	movs	r2, #0
 800a73c:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	2200      	movs	r2, #0
 800a744:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a748:	68bb      	ldr	r3, [r7, #8]
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d003      	beq.n	800a756 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	68ba      	ldr	r2, [r7, #8]
 800a752:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	2201      	movs	r2, #1
 800a75a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	79fa      	ldrb	r2, [r7, #7]
 800a762:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a764:	68f8      	ldr	r0, [r7, #12]
 800a766:	f001 fbfb 	bl	800bf60 <USBD_LL_Init>
 800a76a:	4603      	mov	r3, r0
 800a76c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a76e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a770:	4618      	mov	r0, r3
 800a772:	3718      	adds	r7, #24
 800a774:	46bd      	mov	sp, r7
 800a776:	bd80      	pop	{r7, pc}

0800a778 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a778:	b580      	push	{r7, lr}
 800a77a:	b084      	sub	sp, #16
 800a77c:	af00      	add	r7, sp, #0
 800a77e:	6078      	str	r0, [r7, #4]
 800a780:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a782:	2300      	movs	r3, #0
 800a784:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a786:	683b      	ldr	r3, [r7, #0]
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d101      	bne.n	800a790 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800a78c:	2303      	movs	r3, #3
 800a78e:	e016      	b.n	800a7be <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	683a      	ldr	r2, [r7, #0]
 800a794:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a79e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d00b      	beq.n	800a7bc <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a7aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a7ac:	f107 020e 	add.w	r2, r7, #14
 800a7b0:	4610      	mov	r0, r2
 800a7b2:	4798      	blx	r3
 800a7b4:	4602      	mov	r2, r0
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800a7bc:	2300      	movs	r3, #0
}
 800a7be:	4618      	mov	r0, r3
 800a7c0:	3710      	adds	r7, #16
 800a7c2:	46bd      	mov	sp, r7
 800a7c4:	bd80      	pop	{r7, pc}

0800a7c6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a7c6:	b580      	push	{r7, lr}
 800a7c8:	b082      	sub	sp, #8
 800a7ca:	af00      	add	r7, sp, #0
 800a7cc:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a7ce:	6878      	ldr	r0, [r7, #4]
 800a7d0:	f001 fc26 	bl	800c020 <USBD_LL_Start>
 800a7d4:	4603      	mov	r3, r0
}
 800a7d6:	4618      	mov	r0, r3
 800a7d8:	3708      	adds	r7, #8
 800a7da:	46bd      	mov	sp, r7
 800a7dc:	bd80      	pop	{r7, pc}

0800a7de <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800a7de:	b480      	push	{r7}
 800a7e0:	b083      	sub	sp, #12
 800a7e2:	af00      	add	r7, sp, #0
 800a7e4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a7e6:	2300      	movs	r3, #0
}
 800a7e8:	4618      	mov	r0, r3
 800a7ea:	370c      	adds	r7, #12
 800a7ec:	46bd      	mov	sp, r7
 800a7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f2:	4770      	bx	lr

0800a7f4 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a7f4:	b580      	push	{r7, lr}
 800a7f6:	b084      	sub	sp, #16
 800a7f8:	af00      	add	r7, sp, #0
 800a7fa:	6078      	str	r0, [r7, #4]
 800a7fc:	460b      	mov	r3, r1
 800a7fe:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800a800:	2303      	movs	r3, #3
 800a802:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d009      	beq.n	800a822 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	78fa      	ldrb	r2, [r7, #3]
 800a818:	4611      	mov	r1, r2
 800a81a:	6878      	ldr	r0, [r7, #4]
 800a81c:	4798      	blx	r3
 800a81e:	4603      	mov	r3, r0
 800a820:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800a822:	7bfb      	ldrb	r3, [r7, #15]
}
 800a824:	4618      	mov	r0, r3
 800a826:	3710      	adds	r7, #16
 800a828:	46bd      	mov	sp, r7
 800a82a:	bd80      	pop	{r7, pc}

0800a82c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a82c:	b580      	push	{r7, lr}
 800a82e:	b082      	sub	sp, #8
 800a830:	af00      	add	r7, sp, #0
 800a832:	6078      	str	r0, [r7, #4]
 800a834:	460b      	mov	r3, r1
 800a836:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d007      	beq.n	800a852 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a848:	685b      	ldr	r3, [r3, #4]
 800a84a:	78fa      	ldrb	r2, [r7, #3]
 800a84c:	4611      	mov	r1, r2
 800a84e:	6878      	ldr	r0, [r7, #4]
 800a850:	4798      	blx	r3
  }

  return USBD_OK;
 800a852:	2300      	movs	r3, #0
}
 800a854:	4618      	mov	r0, r3
 800a856:	3708      	adds	r7, #8
 800a858:	46bd      	mov	sp, r7
 800a85a:	bd80      	pop	{r7, pc}

0800a85c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a85c:	b580      	push	{r7, lr}
 800a85e:	b084      	sub	sp, #16
 800a860:	af00      	add	r7, sp, #0
 800a862:	6078      	str	r0, [r7, #4]
 800a864:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a86c:	6839      	ldr	r1, [r7, #0]
 800a86e:	4618      	mov	r0, r3
 800a870:	f000 ff46 	bl	800b700 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	2201      	movs	r2, #1
 800a878:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800a882:	461a      	mov	r2, r3
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a890:	f003 031f 	and.w	r3, r3, #31
 800a894:	2b02      	cmp	r3, #2
 800a896:	d01a      	beq.n	800a8ce <USBD_LL_SetupStage+0x72>
 800a898:	2b02      	cmp	r3, #2
 800a89a:	d822      	bhi.n	800a8e2 <USBD_LL_SetupStage+0x86>
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d002      	beq.n	800a8a6 <USBD_LL_SetupStage+0x4a>
 800a8a0:	2b01      	cmp	r3, #1
 800a8a2:	d00a      	beq.n	800a8ba <USBD_LL_SetupStage+0x5e>
 800a8a4:	e01d      	b.n	800a8e2 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a8ac:	4619      	mov	r1, r3
 800a8ae:	6878      	ldr	r0, [r7, #4]
 800a8b0:	f000 f9ee 	bl	800ac90 <USBD_StdDevReq>
 800a8b4:	4603      	mov	r3, r0
 800a8b6:	73fb      	strb	r3, [r7, #15]
      break;
 800a8b8:	e020      	b.n	800a8fc <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a8c0:	4619      	mov	r1, r3
 800a8c2:	6878      	ldr	r0, [r7, #4]
 800a8c4:	f000 fa52 	bl	800ad6c <USBD_StdItfReq>
 800a8c8:	4603      	mov	r3, r0
 800a8ca:	73fb      	strb	r3, [r7, #15]
      break;
 800a8cc:	e016      	b.n	800a8fc <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a8d4:	4619      	mov	r1, r3
 800a8d6:	6878      	ldr	r0, [r7, #4]
 800a8d8:	f000 fa91 	bl	800adfe <USBD_StdEPReq>
 800a8dc:	4603      	mov	r3, r0
 800a8de:	73fb      	strb	r3, [r7, #15]
      break;
 800a8e0:	e00c      	b.n	800a8fc <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a8e8:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a8ec:	b2db      	uxtb	r3, r3
 800a8ee:	4619      	mov	r1, r3
 800a8f0:	6878      	ldr	r0, [r7, #4]
 800a8f2:	f001 fbf5 	bl	800c0e0 <USBD_LL_StallEP>
 800a8f6:	4603      	mov	r3, r0
 800a8f8:	73fb      	strb	r3, [r7, #15]
      break;
 800a8fa:	bf00      	nop
  }

  return ret;
 800a8fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8fe:	4618      	mov	r0, r3
 800a900:	3710      	adds	r7, #16
 800a902:	46bd      	mov	sp, r7
 800a904:	bd80      	pop	{r7, pc}

0800a906 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a906:	b580      	push	{r7, lr}
 800a908:	b086      	sub	sp, #24
 800a90a:	af00      	add	r7, sp, #0
 800a90c:	60f8      	str	r0, [r7, #12]
 800a90e:	460b      	mov	r3, r1
 800a910:	607a      	str	r2, [r7, #4]
 800a912:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800a914:	7afb      	ldrb	r3, [r7, #11]
 800a916:	2b00      	cmp	r3, #0
 800a918:	d138      	bne.n	800a98c <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800a920:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a928:	2b03      	cmp	r3, #3
 800a92a:	d14a      	bne.n	800a9c2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800a92c:	693b      	ldr	r3, [r7, #16]
 800a92e:	689a      	ldr	r2, [r3, #8]
 800a930:	693b      	ldr	r3, [r7, #16]
 800a932:	68db      	ldr	r3, [r3, #12]
 800a934:	429a      	cmp	r2, r3
 800a936:	d913      	bls.n	800a960 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a938:	693b      	ldr	r3, [r7, #16]
 800a93a:	689a      	ldr	r2, [r3, #8]
 800a93c:	693b      	ldr	r3, [r7, #16]
 800a93e:	68db      	ldr	r3, [r3, #12]
 800a940:	1ad2      	subs	r2, r2, r3
 800a942:	693b      	ldr	r3, [r7, #16]
 800a944:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a946:	693b      	ldr	r3, [r7, #16]
 800a948:	68da      	ldr	r2, [r3, #12]
 800a94a:	693b      	ldr	r3, [r7, #16]
 800a94c:	689b      	ldr	r3, [r3, #8]
 800a94e:	4293      	cmp	r3, r2
 800a950:	bf28      	it	cs
 800a952:	4613      	movcs	r3, r2
 800a954:	461a      	mov	r2, r3
 800a956:	6879      	ldr	r1, [r7, #4]
 800a958:	68f8      	ldr	r0, [r7, #12]
 800a95a:	f000 ffc5 	bl	800b8e8 <USBD_CtlContinueRx>
 800a95e:	e030      	b.n	800a9c2 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a966:	b2db      	uxtb	r3, r3
 800a968:	2b03      	cmp	r3, #3
 800a96a:	d10b      	bne.n	800a984 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a972:	691b      	ldr	r3, [r3, #16]
 800a974:	2b00      	cmp	r3, #0
 800a976:	d005      	beq.n	800a984 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a97e:	691b      	ldr	r3, [r3, #16]
 800a980:	68f8      	ldr	r0, [r7, #12]
 800a982:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a984:	68f8      	ldr	r0, [r7, #12]
 800a986:	f000 ffc0 	bl	800b90a <USBD_CtlSendStatus>
 800a98a:	e01a      	b.n	800a9c2 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a992:	b2db      	uxtb	r3, r3
 800a994:	2b03      	cmp	r3, #3
 800a996:	d114      	bne.n	800a9c2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a99e:	699b      	ldr	r3, [r3, #24]
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d00e      	beq.n	800a9c2 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a9aa:	699b      	ldr	r3, [r3, #24]
 800a9ac:	7afa      	ldrb	r2, [r7, #11]
 800a9ae:	4611      	mov	r1, r2
 800a9b0:	68f8      	ldr	r0, [r7, #12]
 800a9b2:	4798      	blx	r3
 800a9b4:	4603      	mov	r3, r0
 800a9b6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800a9b8:	7dfb      	ldrb	r3, [r7, #23]
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d001      	beq.n	800a9c2 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800a9be:	7dfb      	ldrb	r3, [r7, #23]
 800a9c0:	e000      	b.n	800a9c4 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800a9c2:	2300      	movs	r3, #0
}
 800a9c4:	4618      	mov	r0, r3
 800a9c6:	3718      	adds	r7, #24
 800a9c8:	46bd      	mov	sp, r7
 800a9ca:	bd80      	pop	{r7, pc}

0800a9cc <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a9cc:	b580      	push	{r7, lr}
 800a9ce:	b086      	sub	sp, #24
 800a9d0:	af00      	add	r7, sp, #0
 800a9d2:	60f8      	str	r0, [r7, #12]
 800a9d4:	460b      	mov	r3, r1
 800a9d6:	607a      	str	r2, [r7, #4]
 800a9d8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800a9da:	7afb      	ldrb	r3, [r7, #11]
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d16b      	bne.n	800aab8 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	3314      	adds	r3, #20
 800a9e4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a9ec:	2b02      	cmp	r3, #2
 800a9ee:	d156      	bne.n	800aa9e <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800a9f0:	693b      	ldr	r3, [r7, #16]
 800a9f2:	689a      	ldr	r2, [r3, #8]
 800a9f4:	693b      	ldr	r3, [r7, #16]
 800a9f6:	68db      	ldr	r3, [r3, #12]
 800a9f8:	429a      	cmp	r2, r3
 800a9fa:	d914      	bls.n	800aa26 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a9fc:	693b      	ldr	r3, [r7, #16]
 800a9fe:	689a      	ldr	r2, [r3, #8]
 800aa00:	693b      	ldr	r3, [r7, #16]
 800aa02:	68db      	ldr	r3, [r3, #12]
 800aa04:	1ad2      	subs	r2, r2, r3
 800aa06:	693b      	ldr	r3, [r7, #16]
 800aa08:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800aa0a:	693b      	ldr	r3, [r7, #16]
 800aa0c:	689b      	ldr	r3, [r3, #8]
 800aa0e:	461a      	mov	r2, r3
 800aa10:	6879      	ldr	r1, [r7, #4]
 800aa12:	68f8      	ldr	r0, [r7, #12]
 800aa14:	f000 ff3a 	bl	800b88c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800aa18:	2300      	movs	r3, #0
 800aa1a:	2200      	movs	r2, #0
 800aa1c:	2100      	movs	r1, #0
 800aa1e:	68f8      	ldr	r0, [r7, #12]
 800aa20:	f001 fc08 	bl	800c234 <USBD_LL_PrepareReceive>
 800aa24:	e03b      	b.n	800aa9e <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800aa26:	693b      	ldr	r3, [r7, #16]
 800aa28:	68da      	ldr	r2, [r3, #12]
 800aa2a:	693b      	ldr	r3, [r7, #16]
 800aa2c:	689b      	ldr	r3, [r3, #8]
 800aa2e:	429a      	cmp	r2, r3
 800aa30:	d11c      	bne.n	800aa6c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800aa32:	693b      	ldr	r3, [r7, #16]
 800aa34:	685a      	ldr	r2, [r3, #4]
 800aa36:	693b      	ldr	r3, [r7, #16]
 800aa38:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800aa3a:	429a      	cmp	r2, r3
 800aa3c:	d316      	bcc.n	800aa6c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800aa3e:	693b      	ldr	r3, [r7, #16]
 800aa40:	685a      	ldr	r2, [r3, #4]
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800aa48:	429a      	cmp	r2, r3
 800aa4a:	d20f      	bcs.n	800aa6c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800aa4c:	2200      	movs	r2, #0
 800aa4e:	2100      	movs	r1, #0
 800aa50:	68f8      	ldr	r0, [r7, #12]
 800aa52:	f000 ff1b 	bl	800b88c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	2200      	movs	r2, #0
 800aa5a:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800aa5e:	2300      	movs	r3, #0
 800aa60:	2200      	movs	r2, #0
 800aa62:	2100      	movs	r1, #0
 800aa64:	68f8      	ldr	r0, [r7, #12]
 800aa66:	f001 fbe5 	bl	800c234 <USBD_LL_PrepareReceive>
 800aa6a:	e018      	b.n	800aa9e <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aa72:	b2db      	uxtb	r3, r3
 800aa74:	2b03      	cmp	r3, #3
 800aa76:	d10b      	bne.n	800aa90 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aa7e:	68db      	ldr	r3, [r3, #12]
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d005      	beq.n	800aa90 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aa8a:	68db      	ldr	r3, [r3, #12]
 800aa8c:	68f8      	ldr	r0, [r7, #12]
 800aa8e:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800aa90:	2180      	movs	r1, #128	@ 0x80
 800aa92:	68f8      	ldr	r0, [r7, #12]
 800aa94:	f001 fb24 	bl	800c0e0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800aa98:	68f8      	ldr	r0, [r7, #12]
 800aa9a:	f000 ff49 	bl	800b930 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800aaa4:	2b01      	cmp	r3, #1
 800aaa6:	d122      	bne.n	800aaee <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800aaa8:	68f8      	ldr	r0, [r7, #12]
 800aaaa:	f7ff fe98 	bl	800a7de <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	2200      	movs	r2, #0
 800aab2:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800aab6:	e01a      	b.n	800aaee <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aabe:	b2db      	uxtb	r3, r3
 800aac0:	2b03      	cmp	r3, #3
 800aac2:	d114      	bne.n	800aaee <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aaca:	695b      	ldr	r3, [r3, #20]
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d00e      	beq.n	800aaee <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aad6:	695b      	ldr	r3, [r3, #20]
 800aad8:	7afa      	ldrb	r2, [r7, #11]
 800aada:	4611      	mov	r1, r2
 800aadc:	68f8      	ldr	r0, [r7, #12]
 800aade:	4798      	blx	r3
 800aae0:	4603      	mov	r3, r0
 800aae2:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800aae4:	7dfb      	ldrb	r3, [r7, #23]
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d001      	beq.n	800aaee <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800aaea:	7dfb      	ldrb	r3, [r7, #23]
 800aaec:	e000      	b.n	800aaf0 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800aaee:	2300      	movs	r3, #0
}
 800aaf0:	4618      	mov	r0, r3
 800aaf2:	3718      	adds	r7, #24
 800aaf4:	46bd      	mov	sp, r7
 800aaf6:	bd80      	pop	{r7, pc}

0800aaf8 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800aaf8:	b580      	push	{r7, lr}
 800aafa:	b082      	sub	sp, #8
 800aafc:	af00      	add	r7, sp, #0
 800aafe:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	2201      	movs	r2, #1
 800ab04:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	2200      	movs	r2, #0
 800ab0c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	2200      	movs	r2, #0
 800ab14:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	2200      	movs	r2, #0
 800ab1a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d101      	bne.n	800ab2c <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800ab28:	2303      	movs	r3, #3
 800ab2a:	e02f      	b.n	800ab8c <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d00f      	beq.n	800ab56 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ab3c:	685b      	ldr	r3, [r3, #4]
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d009      	beq.n	800ab56 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ab48:	685b      	ldr	r3, [r3, #4]
 800ab4a:	687a      	ldr	r2, [r7, #4]
 800ab4c:	6852      	ldr	r2, [r2, #4]
 800ab4e:	b2d2      	uxtb	r2, r2
 800ab50:	4611      	mov	r1, r2
 800ab52:	6878      	ldr	r0, [r7, #4]
 800ab54:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ab56:	2340      	movs	r3, #64	@ 0x40
 800ab58:	2200      	movs	r2, #0
 800ab5a:	2100      	movs	r1, #0
 800ab5c:	6878      	ldr	r0, [r7, #4]
 800ab5e:	f001 fa7a 	bl	800c056 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	2201      	movs	r2, #1
 800ab66:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	2240      	movs	r2, #64	@ 0x40
 800ab6e:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ab72:	2340      	movs	r3, #64	@ 0x40
 800ab74:	2200      	movs	r2, #0
 800ab76:	2180      	movs	r1, #128	@ 0x80
 800ab78:	6878      	ldr	r0, [r7, #4]
 800ab7a:	f001 fa6c 	bl	800c056 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	2201      	movs	r2, #1
 800ab82:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	2240      	movs	r2, #64	@ 0x40
 800ab88:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800ab8a:	2300      	movs	r3, #0
}
 800ab8c:	4618      	mov	r0, r3
 800ab8e:	3708      	adds	r7, #8
 800ab90:	46bd      	mov	sp, r7
 800ab92:	bd80      	pop	{r7, pc}

0800ab94 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800ab94:	b480      	push	{r7}
 800ab96:	b083      	sub	sp, #12
 800ab98:	af00      	add	r7, sp, #0
 800ab9a:	6078      	str	r0, [r7, #4]
 800ab9c:	460b      	mov	r3, r1
 800ab9e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	78fa      	ldrb	r2, [r7, #3]
 800aba4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800aba6:	2300      	movs	r3, #0
}
 800aba8:	4618      	mov	r0, r3
 800abaa:	370c      	adds	r7, #12
 800abac:	46bd      	mov	sp, r7
 800abae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb2:	4770      	bx	lr

0800abb4 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800abb4:	b480      	push	{r7}
 800abb6:	b083      	sub	sp, #12
 800abb8:	af00      	add	r7, sp, #0
 800abba:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800abc2:	b2da      	uxtb	r2, r3
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	2204      	movs	r2, #4
 800abce:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800abd2:	2300      	movs	r3, #0
}
 800abd4:	4618      	mov	r0, r3
 800abd6:	370c      	adds	r7, #12
 800abd8:	46bd      	mov	sp, r7
 800abda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abde:	4770      	bx	lr

0800abe0 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800abe0:	b480      	push	{r7}
 800abe2:	b083      	sub	sp, #12
 800abe4:	af00      	add	r7, sp, #0
 800abe6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800abee:	b2db      	uxtb	r3, r3
 800abf0:	2b04      	cmp	r3, #4
 800abf2:	d106      	bne.n	800ac02 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800abfa:	b2da      	uxtb	r2, r3
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800ac02:	2300      	movs	r3, #0
}
 800ac04:	4618      	mov	r0, r3
 800ac06:	370c      	adds	r7, #12
 800ac08:	46bd      	mov	sp, r7
 800ac0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac0e:	4770      	bx	lr

0800ac10 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800ac10:	b580      	push	{r7, lr}
 800ac12:	b082      	sub	sp, #8
 800ac14:	af00      	add	r7, sp, #0
 800ac16:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d101      	bne.n	800ac26 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800ac22:	2303      	movs	r3, #3
 800ac24:	e012      	b.n	800ac4c <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ac2c:	b2db      	uxtb	r3, r3
 800ac2e:	2b03      	cmp	r3, #3
 800ac30:	d10b      	bne.n	800ac4a <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ac38:	69db      	ldr	r3, [r3, #28]
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d005      	beq.n	800ac4a <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ac44:	69db      	ldr	r3, [r3, #28]
 800ac46:	6878      	ldr	r0, [r7, #4]
 800ac48:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ac4a:	2300      	movs	r3, #0
}
 800ac4c:	4618      	mov	r0, r3
 800ac4e:	3708      	adds	r7, #8
 800ac50:	46bd      	mov	sp, r7
 800ac52:	bd80      	pop	{r7, pc}

0800ac54 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800ac54:	b480      	push	{r7}
 800ac56:	b087      	sub	sp, #28
 800ac58:	af00      	add	r7, sp, #0
 800ac5a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800ac60:	697b      	ldr	r3, [r7, #20]
 800ac62:	781b      	ldrb	r3, [r3, #0]
 800ac64:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800ac66:	697b      	ldr	r3, [r7, #20]
 800ac68:	3301      	adds	r3, #1
 800ac6a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800ac6c:	697b      	ldr	r3, [r7, #20]
 800ac6e:	781b      	ldrb	r3, [r3, #0]
 800ac70:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800ac72:	8a3b      	ldrh	r3, [r7, #16]
 800ac74:	021b      	lsls	r3, r3, #8
 800ac76:	b21a      	sxth	r2, r3
 800ac78:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ac7c:	4313      	orrs	r3, r2
 800ac7e:	b21b      	sxth	r3, r3
 800ac80:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800ac82:	89fb      	ldrh	r3, [r7, #14]
}
 800ac84:	4618      	mov	r0, r3
 800ac86:	371c      	adds	r7, #28
 800ac88:	46bd      	mov	sp, r7
 800ac8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac8e:	4770      	bx	lr

0800ac90 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ac90:	b580      	push	{r7, lr}
 800ac92:	b084      	sub	sp, #16
 800ac94:	af00      	add	r7, sp, #0
 800ac96:	6078      	str	r0, [r7, #4]
 800ac98:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ac9a:	2300      	movs	r3, #0
 800ac9c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ac9e:	683b      	ldr	r3, [r7, #0]
 800aca0:	781b      	ldrb	r3, [r3, #0]
 800aca2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800aca6:	2b40      	cmp	r3, #64	@ 0x40
 800aca8:	d005      	beq.n	800acb6 <USBD_StdDevReq+0x26>
 800acaa:	2b40      	cmp	r3, #64	@ 0x40
 800acac:	d853      	bhi.n	800ad56 <USBD_StdDevReq+0xc6>
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d00b      	beq.n	800acca <USBD_StdDevReq+0x3a>
 800acb2:	2b20      	cmp	r3, #32
 800acb4:	d14f      	bne.n	800ad56 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800acbc:	689b      	ldr	r3, [r3, #8]
 800acbe:	6839      	ldr	r1, [r7, #0]
 800acc0:	6878      	ldr	r0, [r7, #4]
 800acc2:	4798      	blx	r3
 800acc4:	4603      	mov	r3, r0
 800acc6:	73fb      	strb	r3, [r7, #15]
      break;
 800acc8:	e04a      	b.n	800ad60 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800acca:	683b      	ldr	r3, [r7, #0]
 800accc:	785b      	ldrb	r3, [r3, #1]
 800acce:	2b09      	cmp	r3, #9
 800acd0:	d83b      	bhi.n	800ad4a <USBD_StdDevReq+0xba>
 800acd2:	a201      	add	r2, pc, #4	@ (adr r2, 800acd8 <USBD_StdDevReq+0x48>)
 800acd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acd8:	0800ad2d 	.word	0x0800ad2d
 800acdc:	0800ad41 	.word	0x0800ad41
 800ace0:	0800ad4b 	.word	0x0800ad4b
 800ace4:	0800ad37 	.word	0x0800ad37
 800ace8:	0800ad4b 	.word	0x0800ad4b
 800acec:	0800ad0b 	.word	0x0800ad0b
 800acf0:	0800ad01 	.word	0x0800ad01
 800acf4:	0800ad4b 	.word	0x0800ad4b
 800acf8:	0800ad23 	.word	0x0800ad23
 800acfc:	0800ad15 	.word	0x0800ad15
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800ad00:	6839      	ldr	r1, [r7, #0]
 800ad02:	6878      	ldr	r0, [r7, #4]
 800ad04:	f000 f9de 	bl	800b0c4 <USBD_GetDescriptor>
          break;
 800ad08:	e024      	b.n	800ad54 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800ad0a:	6839      	ldr	r1, [r7, #0]
 800ad0c:	6878      	ldr	r0, [r7, #4]
 800ad0e:	f000 fb6d 	bl	800b3ec <USBD_SetAddress>
          break;
 800ad12:	e01f      	b.n	800ad54 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800ad14:	6839      	ldr	r1, [r7, #0]
 800ad16:	6878      	ldr	r0, [r7, #4]
 800ad18:	f000 fbac 	bl	800b474 <USBD_SetConfig>
 800ad1c:	4603      	mov	r3, r0
 800ad1e:	73fb      	strb	r3, [r7, #15]
          break;
 800ad20:	e018      	b.n	800ad54 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800ad22:	6839      	ldr	r1, [r7, #0]
 800ad24:	6878      	ldr	r0, [r7, #4]
 800ad26:	f000 fc4b 	bl	800b5c0 <USBD_GetConfig>
          break;
 800ad2a:	e013      	b.n	800ad54 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800ad2c:	6839      	ldr	r1, [r7, #0]
 800ad2e:	6878      	ldr	r0, [r7, #4]
 800ad30:	f000 fc7c 	bl	800b62c <USBD_GetStatus>
          break;
 800ad34:	e00e      	b.n	800ad54 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800ad36:	6839      	ldr	r1, [r7, #0]
 800ad38:	6878      	ldr	r0, [r7, #4]
 800ad3a:	f000 fcab 	bl	800b694 <USBD_SetFeature>
          break;
 800ad3e:	e009      	b.n	800ad54 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800ad40:	6839      	ldr	r1, [r7, #0]
 800ad42:	6878      	ldr	r0, [r7, #4]
 800ad44:	f000 fcba 	bl	800b6bc <USBD_ClrFeature>
          break;
 800ad48:	e004      	b.n	800ad54 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800ad4a:	6839      	ldr	r1, [r7, #0]
 800ad4c:	6878      	ldr	r0, [r7, #4]
 800ad4e:	f000 fd11 	bl	800b774 <USBD_CtlError>
          break;
 800ad52:	bf00      	nop
      }
      break;
 800ad54:	e004      	b.n	800ad60 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800ad56:	6839      	ldr	r1, [r7, #0]
 800ad58:	6878      	ldr	r0, [r7, #4]
 800ad5a:	f000 fd0b 	bl	800b774 <USBD_CtlError>
      break;
 800ad5e:	bf00      	nop
  }

  return ret;
 800ad60:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad62:	4618      	mov	r0, r3
 800ad64:	3710      	adds	r7, #16
 800ad66:	46bd      	mov	sp, r7
 800ad68:	bd80      	pop	{r7, pc}
 800ad6a:	bf00      	nop

0800ad6c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ad6c:	b580      	push	{r7, lr}
 800ad6e:	b084      	sub	sp, #16
 800ad70:	af00      	add	r7, sp, #0
 800ad72:	6078      	str	r0, [r7, #4]
 800ad74:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ad76:	2300      	movs	r3, #0
 800ad78:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ad7a:	683b      	ldr	r3, [r7, #0]
 800ad7c:	781b      	ldrb	r3, [r3, #0]
 800ad7e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ad82:	2b40      	cmp	r3, #64	@ 0x40
 800ad84:	d005      	beq.n	800ad92 <USBD_StdItfReq+0x26>
 800ad86:	2b40      	cmp	r3, #64	@ 0x40
 800ad88:	d82f      	bhi.n	800adea <USBD_StdItfReq+0x7e>
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d001      	beq.n	800ad92 <USBD_StdItfReq+0x26>
 800ad8e:	2b20      	cmp	r3, #32
 800ad90:	d12b      	bne.n	800adea <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ad98:	b2db      	uxtb	r3, r3
 800ad9a:	3b01      	subs	r3, #1
 800ad9c:	2b02      	cmp	r3, #2
 800ad9e:	d81d      	bhi.n	800addc <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800ada0:	683b      	ldr	r3, [r7, #0]
 800ada2:	889b      	ldrh	r3, [r3, #4]
 800ada4:	b2db      	uxtb	r3, r3
 800ada6:	2b01      	cmp	r3, #1
 800ada8:	d813      	bhi.n	800add2 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800adb0:	689b      	ldr	r3, [r3, #8]
 800adb2:	6839      	ldr	r1, [r7, #0]
 800adb4:	6878      	ldr	r0, [r7, #4]
 800adb6:	4798      	blx	r3
 800adb8:	4603      	mov	r3, r0
 800adba:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800adbc:	683b      	ldr	r3, [r7, #0]
 800adbe:	88db      	ldrh	r3, [r3, #6]
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d110      	bne.n	800ade6 <USBD_StdItfReq+0x7a>
 800adc4:	7bfb      	ldrb	r3, [r7, #15]
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d10d      	bne.n	800ade6 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800adca:	6878      	ldr	r0, [r7, #4]
 800adcc:	f000 fd9d 	bl	800b90a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800add0:	e009      	b.n	800ade6 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800add2:	6839      	ldr	r1, [r7, #0]
 800add4:	6878      	ldr	r0, [r7, #4]
 800add6:	f000 fccd 	bl	800b774 <USBD_CtlError>
          break;
 800adda:	e004      	b.n	800ade6 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800addc:	6839      	ldr	r1, [r7, #0]
 800adde:	6878      	ldr	r0, [r7, #4]
 800ade0:	f000 fcc8 	bl	800b774 <USBD_CtlError>
          break;
 800ade4:	e000      	b.n	800ade8 <USBD_StdItfReq+0x7c>
          break;
 800ade6:	bf00      	nop
      }
      break;
 800ade8:	e004      	b.n	800adf4 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800adea:	6839      	ldr	r1, [r7, #0]
 800adec:	6878      	ldr	r0, [r7, #4]
 800adee:	f000 fcc1 	bl	800b774 <USBD_CtlError>
      break;
 800adf2:	bf00      	nop
  }

  return ret;
 800adf4:	7bfb      	ldrb	r3, [r7, #15]
}
 800adf6:	4618      	mov	r0, r3
 800adf8:	3710      	adds	r7, #16
 800adfa:	46bd      	mov	sp, r7
 800adfc:	bd80      	pop	{r7, pc}

0800adfe <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800adfe:	b580      	push	{r7, lr}
 800ae00:	b084      	sub	sp, #16
 800ae02:	af00      	add	r7, sp, #0
 800ae04:	6078      	str	r0, [r7, #4]
 800ae06:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800ae08:	2300      	movs	r3, #0
 800ae0a:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800ae0c:	683b      	ldr	r3, [r7, #0]
 800ae0e:	889b      	ldrh	r3, [r3, #4]
 800ae10:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ae12:	683b      	ldr	r3, [r7, #0]
 800ae14:	781b      	ldrb	r3, [r3, #0]
 800ae16:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ae1a:	2b40      	cmp	r3, #64	@ 0x40
 800ae1c:	d007      	beq.n	800ae2e <USBD_StdEPReq+0x30>
 800ae1e:	2b40      	cmp	r3, #64	@ 0x40
 800ae20:	f200 8145 	bhi.w	800b0ae <USBD_StdEPReq+0x2b0>
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d00c      	beq.n	800ae42 <USBD_StdEPReq+0x44>
 800ae28:	2b20      	cmp	r3, #32
 800ae2a:	f040 8140 	bne.w	800b0ae <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ae34:	689b      	ldr	r3, [r3, #8]
 800ae36:	6839      	ldr	r1, [r7, #0]
 800ae38:	6878      	ldr	r0, [r7, #4]
 800ae3a:	4798      	blx	r3
 800ae3c:	4603      	mov	r3, r0
 800ae3e:	73fb      	strb	r3, [r7, #15]
      break;
 800ae40:	e13a      	b.n	800b0b8 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ae42:	683b      	ldr	r3, [r7, #0]
 800ae44:	785b      	ldrb	r3, [r3, #1]
 800ae46:	2b03      	cmp	r3, #3
 800ae48:	d007      	beq.n	800ae5a <USBD_StdEPReq+0x5c>
 800ae4a:	2b03      	cmp	r3, #3
 800ae4c:	f300 8129 	bgt.w	800b0a2 <USBD_StdEPReq+0x2a4>
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d07f      	beq.n	800af54 <USBD_StdEPReq+0x156>
 800ae54:	2b01      	cmp	r3, #1
 800ae56:	d03c      	beq.n	800aed2 <USBD_StdEPReq+0xd4>
 800ae58:	e123      	b.n	800b0a2 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ae60:	b2db      	uxtb	r3, r3
 800ae62:	2b02      	cmp	r3, #2
 800ae64:	d002      	beq.n	800ae6c <USBD_StdEPReq+0x6e>
 800ae66:	2b03      	cmp	r3, #3
 800ae68:	d016      	beq.n	800ae98 <USBD_StdEPReq+0x9a>
 800ae6a:	e02c      	b.n	800aec6 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ae6c:	7bbb      	ldrb	r3, [r7, #14]
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d00d      	beq.n	800ae8e <USBD_StdEPReq+0x90>
 800ae72:	7bbb      	ldrb	r3, [r7, #14]
 800ae74:	2b80      	cmp	r3, #128	@ 0x80
 800ae76:	d00a      	beq.n	800ae8e <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ae78:	7bbb      	ldrb	r3, [r7, #14]
 800ae7a:	4619      	mov	r1, r3
 800ae7c:	6878      	ldr	r0, [r7, #4]
 800ae7e:	f001 f92f 	bl	800c0e0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ae82:	2180      	movs	r1, #128	@ 0x80
 800ae84:	6878      	ldr	r0, [r7, #4]
 800ae86:	f001 f92b 	bl	800c0e0 <USBD_LL_StallEP>
 800ae8a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ae8c:	e020      	b.n	800aed0 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800ae8e:	6839      	ldr	r1, [r7, #0]
 800ae90:	6878      	ldr	r0, [r7, #4]
 800ae92:	f000 fc6f 	bl	800b774 <USBD_CtlError>
              break;
 800ae96:	e01b      	b.n	800aed0 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ae98:	683b      	ldr	r3, [r7, #0]
 800ae9a:	885b      	ldrh	r3, [r3, #2]
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d10e      	bne.n	800aebe <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800aea0:	7bbb      	ldrb	r3, [r7, #14]
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d00b      	beq.n	800aebe <USBD_StdEPReq+0xc0>
 800aea6:	7bbb      	ldrb	r3, [r7, #14]
 800aea8:	2b80      	cmp	r3, #128	@ 0x80
 800aeaa:	d008      	beq.n	800aebe <USBD_StdEPReq+0xc0>
 800aeac:	683b      	ldr	r3, [r7, #0]
 800aeae:	88db      	ldrh	r3, [r3, #6]
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d104      	bne.n	800aebe <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800aeb4:	7bbb      	ldrb	r3, [r7, #14]
 800aeb6:	4619      	mov	r1, r3
 800aeb8:	6878      	ldr	r0, [r7, #4]
 800aeba:	f001 f911 	bl	800c0e0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800aebe:	6878      	ldr	r0, [r7, #4]
 800aec0:	f000 fd23 	bl	800b90a <USBD_CtlSendStatus>

              break;
 800aec4:	e004      	b.n	800aed0 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800aec6:	6839      	ldr	r1, [r7, #0]
 800aec8:	6878      	ldr	r0, [r7, #4]
 800aeca:	f000 fc53 	bl	800b774 <USBD_CtlError>
              break;
 800aece:	bf00      	nop
          }
          break;
 800aed0:	e0ec      	b.n	800b0ac <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aed8:	b2db      	uxtb	r3, r3
 800aeda:	2b02      	cmp	r3, #2
 800aedc:	d002      	beq.n	800aee4 <USBD_StdEPReq+0xe6>
 800aede:	2b03      	cmp	r3, #3
 800aee0:	d016      	beq.n	800af10 <USBD_StdEPReq+0x112>
 800aee2:	e030      	b.n	800af46 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800aee4:	7bbb      	ldrb	r3, [r7, #14]
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d00d      	beq.n	800af06 <USBD_StdEPReq+0x108>
 800aeea:	7bbb      	ldrb	r3, [r7, #14]
 800aeec:	2b80      	cmp	r3, #128	@ 0x80
 800aeee:	d00a      	beq.n	800af06 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800aef0:	7bbb      	ldrb	r3, [r7, #14]
 800aef2:	4619      	mov	r1, r3
 800aef4:	6878      	ldr	r0, [r7, #4]
 800aef6:	f001 f8f3 	bl	800c0e0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800aefa:	2180      	movs	r1, #128	@ 0x80
 800aefc:	6878      	ldr	r0, [r7, #4]
 800aefe:	f001 f8ef 	bl	800c0e0 <USBD_LL_StallEP>
 800af02:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800af04:	e025      	b.n	800af52 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800af06:	6839      	ldr	r1, [r7, #0]
 800af08:	6878      	ldr	r0, [r7, #4]
 800af0a:	f000 fc33 	bl	800b774 <USBD_CtlError>
              break;
 800af0e:	e020      	b.n	800af52 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800af10:	683b      	ldr	r3, [r7, #0]
 800af12:	885b      	ldrh	r3, [r3, #2]
 800af14:	2b00      	cmp	r3, #0
 800af16:	d11b      	bne.n	800af50 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800af18:	7bbb      	ldrb	r3, [r7, #14]
 800af1a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d004      	beq.n	800af2c <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800af22:	7bbb      	ldrb	r3, [r7, #14]
 800af24:	4619      	mov	r1, r3
 800af26:	6878      	ldr	r0, [r7, #4]
 800af28:	f001 f8f9 	bl	800c11e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800af2c:	6878      	ldr	r0, [r7, #4]
 800af2e:	f000 fcec 	bl	800b90a <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800af38:	689b      	ldr	r3, [r3, #8]
 800af3a:	6839      	ldr	r1, [r7, #0]
 800af3c:	6878      	ldr	r0, [r7, #4]
 800af3e:	4798      	blx	r3
 800af40:	4603      	mov	r3, r0
 800af42:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800af44:	e004      	b.n	800af50 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800af46:	6839      	ldr	r1, [r7, #0]
 800af48:	6878      	ldr	r0, [r7, #4]
 800af4a:	f000 fc13 	bl	800b774 <USBD_CtlError>
              break;
 800af4e:	e000      	b.n	800af52 <USBD_StdEPReq+0x154>
              break;
 800af50:	bf00      	nop
          }
          break;
 800af52:	e0ab      	b.n	800b0ac <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800af5a:	b2db      	uxtb	r3, r3
 800af5c:	2b02      	cmp	r3, #2
 800af5e:	d002      	beq.n	800af66 <USBD_StdEPReq+0x168>
 800af60:	2b03      	cmp	r3, #3
 800af62:	d032      	beq.n	800afca <USBD_StdEPReq+0x1cc>
 800af64:	e097      	b.n	800b096 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800af66:	7bbb      	ldrb	r3, [r7, #14]
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d007      	beq.n	800af7c <USBD_StdEPReq+0x17e>
 800af6c:	7bbb      	ldrb	r3, [r7, #14]
 800af6e:	2b80      	cmp	r3, #128	@ 0x80
 800af70:	d004      	beq.n	800af7c <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800af72:	6839      	ldr	r1, [r7, #0]
 800af74:	6878      	ldr	r0, [r7, #4]
 800af76:	f000 fbfd 	bl	800b774 <USBD_CtlError>
                break;
 800af7a:	e091      	b.n	800b0a0 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800af7c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800af80:	2b00      	cmp	r3, #0
 800af82:	da0b      	bge.n	800af9c <USBD_StdEPReq+0x19e>
 800af84:	7bbb      	ldrb	r3, [r7, #14]
 800af86:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800af8a:	4613      	mov	r3, r2
 800af8c:	009b      	lsls	r3, r3, #2
 800af8e:	4413      	add	r3, r2
 800af90:	009b      	lsls	r3, r3, #2
 800af92:	3310      	adds	r3, #16
 800af94:	687a      	ldr	r2, [r7, #4]
 800af96:	4413      	add	r3, r2
 800af98:	3304      	adds	r3, #4
 800af9a:	e00b      	b.n	800afb4 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800af9c:	7bbb      	ldrb	r3, [r7, #14]
 800af9e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800afa2:	4613      	mov	r3, r2
 800afa4:	009b      	lsls	r3, r3, #2
 800afa6:	4413      	add	r3, r2
 800afa8:	009b      	lsls	r3, r3, #2
 800afaa:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800afae:	687a      	ldr	r2, [r7, #4]
 800afb0:	4413      	add	r3, r2
 800afb2:	3304      	adds	r3, #4
 800afb4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800afb6:	68bb      	ldr	r3, [r7, #8]
 800afb8:	2200      	movs	r2, #0
 800afba:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800afbc:	68bb      	ldr	r3, [r7, #8]
 800afbe:	2202      	movs	r2, #2
 800afc0:	4619      	mov	r1, r3
 800afc2:	6878      	ldr	r0, [r7, #4]
 800afc4:	f000 fc47 	bl	800b856 <USBD_CtlSendData>
              break;
 800afc8:	e06a      	b.n	800b0a0 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800afca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800afce:	2b00      	cmp	r3, #0
 800afd0:	da11      	bge.n	800aff6 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800afd2:	7bbb      	ldrb	r3, [r7, #14]
 800afd4:	f003 020f 	and.w	r2, r3, #15
 800afd8:	6879      	ldr	r1, [r7, #4]
 800afda:	4613      	mov	r3, r2
 800afdc:	009b      	lsls	r3, r3, #2
 800afde:	4413      	add	r3, r2
 800afe0:	009b      	lsls	r3, r3, #2
 800afe2:	440b      	add	r3, r1
 800afe4:	3324      	adds	r3, #36	@ 0x24
 800afe6:	881b      	ldrh	r3, [r3, #0]
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d117      	bne.n	800b01c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800afec:	6839      	ldr	r1, [r7, #0]
 800afee:	6878      	ldr	r0, [r7, #4]
 800aff0:	f000 fbc0 	bl	800b774 <USBD_CtlError>
                  break;
 800aff4:	e054      	b.n	800b0a0 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800aff6:	7bbb      	ldrb	r3, [r7, #14]
 800aff8:	f003 020f 	and.w	r2, r3, #15
 800affc:	6879      	ldr	r1, [r7, #4]
 800affe:	4613      	mov	r3, r2
 800b000:	009b      	lsls	r3, r3, #2
 800b002:	4413      	add	r3, r2
 800b004:	009b      	lsls	r3, r3, #2
 800b006:	440b      	add	r3, r1
 800b008:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b00c:	881b      	ldrh	r3, [r3, #0]
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d104      	bne.n	800b01c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800b012:	6839      	ldr	r1, [r7, #0]
 800b014:	6878      	ldr	r0, [r7, #4]
 800b016:	f000 fbad 	bl	800b774 <USBD_CtlError>
                  break;
 800b01a:	e041      	b.n	800b0a0 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b01c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b020:	2b00      	cmp	r3, #0
 800b022:	da0b      	bge.n	800b03c <USBD_StdEPReq+0x23e>
 800b024:	7bbb      	ldrb	r3, [r7, #14]
 800b026:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b02a:	4613      	mov	r3, r2
 800b02c:	009b      	lsls	r3, r3, #2
 800b02e:	4413      	add	r3, r2
 800b030:	009b      	lsls	r3, r3, #2
 800b032:	3310      	adds	r3, #16
 800b034:	687a      	ldr	r2, [r7, #4]
 800b036:	4413      	add	r3, r2
 800b038:	3304      	adds	r3, #4
 800b03a:	e00b      	b.n	800b054 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b03c:	7bbb      	ldrb	r3, [r7, #14]
 800b03e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b042:	4613      	mov	r3, r2
 800b044:	009b      	lsls	r3, r3, #2
 800b046:	4413      	add	r3, r2
 800b048:	009b      	lsls	r3, r3, #2
 800b04a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800b04e:	687a      	ldr	r2, [r7, #4]
 800b050:	4413      	add	r3, r2
 800b052:	3304      	adds	r3, #4
 800b054:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b056:	7bbb      	ldrb	r3, [r7, #14]
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d002      	beq.n	800b062 <USBD_StdEPReq+0x264>
 800b05c:	7bbb      	ldrb	r3, [r7, #14]
 800b05e:	2b80      	cmp	r3, #128	@ 0x80
 800b060:	d103      	bne.n	800b06a <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800b062:	68bb      	ldr	r3, [r7, #8]
 800b064:	2200      	movs	r2, #0
 800b066:	601a      	str	r2, [r3, #0]
 800b068:	e00e      	b.n	800b088 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b06a:	7bbb      	ldrb	r3, [r7, #14]
 800b06c:	4619      	mov	r1, r3
 800b06e:	6878      	ldr	r0, [r7, #4]
 800b070:	f001 f874 	bl	800c15c <USBD_LL_IsStallEP>
 800b074:	4603      	mov	r3, r0
 800b076:	2b00      	cmp	r3, #0
 800b078:	d003      	beq.n	800b082 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800b07a:	68bb      	ldr	r3, [r7, #8]
 800b07c:	2201      	movs	r2, #1
 800b07e:	601a      	str	r2, [r3, #0]
 800b080:	e002      	b.n	800b088 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800b082:	68bb      	ldr	r3, [r7, #8]
 800b084:	2200      	movs	r2, #0
 800b086:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b088:	68bb      	ldr	r3, [r7, #8]
 800b08a:	2202      	movs	r2, #2
 800b08c:	4619      	mov	r1, r3
 800b08e:	6878      	ldr	r0, [r7, #4]
 800b090:	f000 fbe1 	bl	800b856 <USBD_CtlSendData>
              break;
 800b094:	e004      	b.n	800b0a0 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800b096:	6839      	ldr	r1, [r7, #0]
 800b098:	6878      	ldr	r0, [r7, #4]
 800b09a:	f000 fb6b 	bl	800b774 <USBD_CtlError>
              break;
 800b09e:	bf00      	nop
          }
          break;
 800b0a0:	e004      	b.n	800b0ac <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800b0a2:	6839      	ldr	r1, [r7, #0]
 800b0a4:	6878      	ldr	r0, [r7, #4]
 800b0a6:	f000 fb65 	bl	800b774 <USBD_CtlError>
          break;
 800b0aa:	bf00      	nop
      }
      break;
 800b0ac:	e004      	b.n	800b0b8 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800b0ae:	6839      	ldr	r1, [r7, #0]
 800b0b0:	6878      	ldr	r0, [r7, #4]
 800b0b2:	f000 fb5f 	bl	800b774 <USBD_CtlError>
      break;
 800b0b6:	bf00      	nop
  }

  return ret;
 800b0b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0ba:	4618      	mov	r0, r3
 800b0bc:	3710      	adds	r7, #16
 800b0be:	46bd      	mov	sp, r7
 800b0c0:	bd80      	pop	{r7, pc}
	...

0800b0c4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b0c4:	b580      	push	{r7, lr}
 800b0c6:	b084      	sub	sp, #16
 800b0c8:	af00      	add	r7, sp, #0
 800b0ca:	6078      	str	r0, [r7, #4]
 800b0cc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b0ce:	2300      	movs	r3, #0
 800b0d0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b0d2:	2300      	movs	r3, #0
 800b0d4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b0d6:	2300      	movs	r3, #0
 800b0d8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b0da:	683b      	ldr	r3, [r7, #0]
 800b0dc:	885b      	ldrh	r3, [r3, #2]
 800b0de:	0a1b      	lsrs	r3, r3, #8
 800b0e0:	b29b      	uxth	r3, r3
 800b0e2:	3b01      	subs	r3, #1
 800b0e4:	2b0e      	cmp	r3, #14
 800b0e6:	f200 8152 	bhi.w	800b38e <USBD_GetDescriptor+0x2ca>
 800b0ea:	a201      	add	r2, pc, #4	@ (adr r2, 800b0f0 <USBD_GetDescriptor+0x2c>)
 800b0ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0f0:	0800b161 	.word	0x0800b161
 800b0f4:	0800b179 	.word	0x0800b179
 800b0f8:	0800b1b9 	.word	0x0800b1b9
 800b0fc:	0800b38f 	.word	0x0800b38f
 800b100:	0800b38f 	.word	0x0800b38f
 800b104:	0800b32f 	.word	0x0800b32f
 800b108:	0800b35b 	.word	0x0800b35b
 800b10c:	0800b38f 	.word	0x0800b38f
 800b110:	0800b38f 	.word	0x0800b38f
 800b114:	0800b38f 	.word	0x0800b38f
 800b118:	0800b38f 	.word	0x0800b38f
 800b11c:	0800b38f 	.word	0x0800b38f
 800b120:	0800b38f 	.word	0x0800b38f
 800b124:	0800b38f 	.word	0x0800b38f
 800b128:	0800b12d 	.word	0x0800b12d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b132:	69db      	ldr	r3, [r3, #28]
 800b134:	2b00      	cmp	r3, #0
 800b136:	d00b      	beq.n	800b150 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b13e:	69db      	ldr	r3, [r3, #28]
 800b140:	687a      	ldr	r2, [r7, #4]
 800b142:	7c12      	ldrb	r2, [r2, #16]
 800b144:	f107 0108 	add.w	r1, r7, #8
 800b148:	4610      	mov	r0, r2
 800b14a:	4798      	blx	r3
 800b14c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b14e:	e126      	b.n	800b39e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b150:	6839      	ldr	r1, [r7, #0]
 800b152:	6878      	ldr	r0, [r7, #4]
 800b154:	f000 fb0e 	bl	800b774 <USBD_CtlError>
        err++;
 800b158:	7afb      	ldrb	r3, [r7, #11]
 800b15a:	3301      	adds	r3, #1
 800b15c:	72fb      	strb	r3, [r7, #11]
      break;
 800b15e:	e11e      	b.n	800b39e <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	687a      	ldr	r2, [r7, #4]
 800b16a:	7c12      	ldrb	r2, [r2, #16]
 800b16c:	f107 0108 	add.w	r1, r7, #8
 800b170:	4610      	mov	r0, r2
 800b172:	4798      	blx	r3
 800b174:	60f8      	str	r0, [r7, #12]
      break;
 800b176:	e112      	b.n	800b39e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	7c1b      	ldrb	r3, [r3, #16]
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d10d      	bne.n	800b19c <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b186:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b188:	f107 0208 	add.w	r2, r7, #8
 800b18c:	4610      	mov	r0, r2
 800b18e:	4798      	blx	r3
 800b190:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	3301      	adds	r3, #1
 800b196:	2202      	movs	r2, #2
 800b198:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b19a:	e100      	b.n	800b39e <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b1a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b1a4:	f107 0208 	add.w	r2, r7, #8
 800b1a8:	4610      	mov	r0, r2
 800b1aa:	4798      	blx	r3
 800b1ac:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	3301      	adds	r3, #1
 800b1b2:	2202      	movs	r2, #2
 800b1b4:	701a      	strb	r2, [r3, #0]
      break;
 800b1b6:	e0f2      	b.n	800b39e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b1b8:	683b      	ldr	r3, [r7, #0]
 800b1ba:	885b      	ldrh	r3, [r3, #2]
 800b1bc:	b2db      	uxtb	r3, r3
 800b1be:	2b05      	cmp	r3, #5
 800b1c0:	f200 80ac 	bhi.w	800b31c <USBD_GetDescriptor+0x258>
 800b1c4:	a201      	add	r2, pc, #4	@ (adr r2, 800b1cc <USBD_GetDescriptor+0x108>)
 800b1c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1ca:	bf00      	nop
 800b1cc:	0800b1e5 	.word	0x0800b1e5
 800b1d0:	0800b219 	.word	0x0800b219
 800b1d4:	0800b24d 	.word	0x0800b24d
 800b1d8:	0800b281 	.word	0x0800b281
 800b1dc:	0800b2b5 	.word	0x0800b2b5
 800b1e0:	0800b2e9 	.word	0x0800b2e9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b1ea:	685b      	ldr	r3, [r3, #4]
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d00b      	beq.n	800b208 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b1f6:	685b      	ldr	r3, [r3, #4]
 800b1f8:	687a      	ldr	r2, [r7, #4]
 800b1fa:	7c12      	ldrb	r2, [r2, #16]
 800b1fc:	f107 0108 	add.w	r1, r7, #8
 800b200:	4610      	mov	r0, r2
 800b202:	4798      	blx	r3
 800b204:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b206:	e091      	b.n	800b32c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b208:	6839      	ldr	r1, [r7, #0]
 800b20a:	6878      	ldr	r0, [r7, #4]
 800b20c:	f000 fab2 	bl	800b774 <USBD_CtlError>
            err++;
 800b210:	7afb      	ldrb	r3, [r7, #11]
 800b212:	3301      	adds	r3, #1
 800b214:	72fb      	strb	r3, [r7, #11]
          break;
 800b216:	e089      	b.n	800b32c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b21e:	689b      	ldr	r3, [r3, #8]
 800b220:	2b00      	cmp	r3, #0
 800b222:	d00b      	beq.n	800b23c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b22a:	689b      	ldr	r3, [r3, #8]
 800b22c:	687a      	ldr	r2, [r7, #4]
 800b22e:	7c12      	ldrb	r2, [r2, #16]
 800b230:	f107 0108 	add.w	r1, r7, #8
 800b234:	4610      	mov	r0, r2
 800b236:	4798      	blx	r3
 800b238:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b23a:	e077      	b.n	800b32c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b23c:	6839      	ldr	r1, [r7, #0]
 800b23e:	6878      	ldr	r0, [r7, #4]
 800b240:	f000 fa98 	bl	800b774 <USBD_CtlError>
            err++;
 800b244:	7afb      	ldrb	r3, [r7, #11]
 800b246:	3301      	adds	r3, #1
 800b248:	72fb      	strb	r3, [r7, #11]
          break;
 800b24a:	e06f      	b.n	800b32c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b252:	68db      	ldr	r3, [r3, #12]
 800b254:	2b00      	cmp	r3, #0
 800b256:	d00b      	beq.n	800b270 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b25e:	68db      	ldr	r3, [r3, #12]
 800b260:	687a      	ldr	r2, [r7, #4]
 800b262:	7c12      	ldrb	r2, [r2, #16]
 800b264:	f107 0108 	add.w	r1, r7, #8
 800b268:	4610      	mov	r0, r2
 800b26a:	4798      	blx	r3
 800b26c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b26e:	e05d      	b.n	800b32c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b270:	6839      	ldr	r1, [r7, #0]
 800b272:	6878      	ldr	r0, [r7, #4]
 800b274:	f000 fa7e 	bl	800b774 <USBD_CtlError>
            err++;
 800b278:	7afb      	ldrb	r3, [r7, #11]
 800b27a:	3301      	adds	r3, #1
 800b27c:	72fb      	strb	r3, [r7, #11]
          break;
 800b27e:	e055      	b.n	800b32c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b286:	691b      	ldr	r3, [r3, #16]
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d00b      	beq.n	800b2a4 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b292:	691b      	ldr	r3, [r3, #16]
 800b294:	687a      	ldr	r2, [r7, #4]
 800b296:	7c12      	ldrb	r2, [r2, #16]
 800b298:	f107 0108 	add.w	r1, r7, #8
 800b29c:	4610      	mov	r0, r2
 800b29e:	4798      	blx	r3
 800b2a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b2a2:	e043      	b.n	800b32c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b2a4:	6839      	ldr	r1, [r7, #0]
 800b2a6:	6878      	ldr	r0, [r7, #4]
 800b2a8:	f000 fa64 	bl	800b774 <USBD_CtlError>
            err++;
 800b2ac:	7afb      	ldrb	r3, [r7, #11]
 800b2ae:	3301      	adds	r3, #1
 800b2b0:	72fb      	strb	r3, [r7, #11]
          break;
 800b2b2:	e03b      	b.n	800b32c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b2ba:	695b      	ldr	r3, [r3, #20]
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d00b      	beq.n	800b2d8 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b2c6:	695b      	ldr	r3, [r3, #20]
 800b2c8:	687a      	ldr	r2, [r7, #4]
 800b2ca:	7c12      	ldrb	r2, [r2, #16]
 800b2cc:	f107 0108 	add.w	r1, r7, #8
 800b2d0:	4610      	mov	r0, r2
 800b2d2:	4798      	blx	r3
 800b2d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b2d6:	e029      	b.n	800b32c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b2d8:	6839      	ldr	r1, [r7, #0]
 800b2da:	6878      	ldr	r0, [r7, #4]
 800b2dc:	f000 fa4a 	bl	800b774 <USBD_CtlError>
            err++;
 800b2e0:	7afb      	ldrb	r3, [r7, #11]
 800b2e2:	3301      	adds	r3, #1
 800b2e4:	72fb      	strb	r3, [r7, #11]
          break;
 800b2e6:	e021      	b.n	800b32c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b2ee:	699b      	ldr	r3, [r3, #24]
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d00b      	beq.n	800b30c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b2fa:	699b      	ldr	r3, [r3, #24]
 800b2fc:	687a      	ldr	r2, [r7, #4]
 800b2fe:	7c12      	ldrb	r2, [r2, #16]
 800b300:	f107 0108 	add.w	r1, r7, #8
 800b304:	4610      	mov	r0, r2
 800b306:	4798      	blx	r3
 800b308:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b30a:	e00f      	b.n	800b32c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b30c:	6839      	ldr	r1, [r7, #0]
 800b30e:	6878      	ldr	r0, [r7, #4]
 800b310:	f000 fa30 	bl	800b774 <USBD_CtlError>
            err++;
 800b314:	7afb      	ldrb	r3, [r7, #11]
 800b316:	3301      	adds	r3, #1
 800b318:	72fb      	strb	r3, [r7, #11]
          break;
 800b31a:	e007      	b.n	800b32c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800b31c:	6839      	ldr	r1, [r7, #0]
 800b31e:	6878      	ldr	r0, [r7, #4]
 800b320:	f000 fa28 	bl	800b774 <USBD_CtlError>
          err++;
 800b324:	7afb      	ldrb	r3, [r7, #11]
 800b326:	3301      	adds	r3, #1
 800b328:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800b32a:	bf00      	nop
      }
      break;
 800b32c:	e037      	b.n	800b39e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	7c1b      	ldrb	r3, [r3, #16]
 800b332:	2b00      	cmp	r3, #0
 800b334:	d109      	bne.n	800b34a <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b33c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b33e:	f107 0208 	add.w	r2, r7, #8
 800b342:	4610      	mov	r0, r2
 800b344:	4798      	blx	r3
 800b346:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b348:	e029      	b.n	800b39e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b34a:	6839      	ldr	r1, [r7, #0]
 800b34c:	6878      	ldr	r0, [r7, #4]
 800b34e:	f000 fa11 	bl	800b774 <USBD_CtlError>
        err++;
 800b352:	7afb      	ldrb	r3, [r7, #11]
 800b354:	3301      	adds	r3, #1
 800b356:	72fb      	strb	r3, [r7, #11]
      break;
 800b358:	e021      	b.n	800b39e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	7c1b      	ldrb	r3, [r3, #16]
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d10d      	bne.n	800b37e <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b368:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b36a:	f107 0208 	add.w	r2, r7, #8
 800b36e:	4610      	mov	r0, r2
 800b370:	4798      	blx	r3
 800b372:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	3301      	adds	r3, #1
 800b378:	2207      	movs	r2, #7
 800b37a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b37c:	e00f      	b.n	800b39e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b37e:	6839      	ldr	r1, [r7, #0]
 800b380:	6878      	ldr	r0, [r7, #4]
 800b382:	f000 f9f7 	bl	800b774 <USBD_CtlError>
        err++;
 800b386:	7afb      	ldrb	r3, [r7, #11]
 800b388:	3301      	adds	r3, #1
 800b38a:	72fb      	strb	r3, [r7, #11]
      break;
 800b38c:	e007      	b.n	800b39e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800b38e:	6839      	ldr	r1, [r7, #0]
 800b390:	6878      	ldr	r0, [r7, #4]
 800b392:	f000 f9ef 	bl	800b774 <USBD_CtlError>
      err++;
 800b396:	7afb      	ldrb	r3, [r7, #11]
 800b398:	3301      	adds	r3, #1
 800b39a:	72fb      	strb	r3, [r7, #11]
      break;
 800b39c:	bf00      	nop
  }

  if (err != 0U)
 800b39e:	7afb      	ldrb	r3, [r7, #11]
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d11e      	bne.n	800b3e2 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800b3a4:	683b      	ldr	r3, [r7, #0]
 800b3a6:	88db      	ldrh	r3, [r3, #6]
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d016      	beq.n	800b3da <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800b3ac:	893b      	ldrh	r3, [r7, #8]
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d00e      	beq.n	800b3d0 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800b3b2:	683b      	ldr	r3, [r7, #0]
 800b3b4:	88da      	ldrh	r2, [r3, #6]
 800b3b6:	893b      	ldrh	r3, [r7, #8]
 800b3b8:	4293      	cmp	r3, r2
 800b3ba:	bf28      	it	cs
 800b3bc:	4613      	movcs	r3, r2
 800b3be:	b29b      	uxth	r3, r3
 800b3c0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b3c2:	893b      	ldrh	r3, [r7, #8]
 800b3c4:	461a      	mov	r2, r3
 800b3c6:	68f9      	ldr	r1, [r7, #12]
 800b3c8:	6878      	ldr	r0, [r7, #4]
 800b3ca:	f000 fa44 	bl	800b856 <USBD_CtlSendData>
 800b3ce:	e009      	b.n	800b3e4 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800b3d0:	6839      	ldr	r1, [r7, #0]
 800b3d2:	6878      	ldr	r0, [r7, #4]
 800b3d4:	f000 f9ce 	bl	800b774 <USBD_CtlError>
 800b3d8:	e004      	b.n	800b3e4 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800b3da:	6878      	ldr	r0, [r7, #4]
 800b3dc:	f000 fa95 	bl	800b90a <USBD_CtlSendStatus>
 800b3e0:	e000      	b.n	800b3e4 <USBD_GetDescriptor+0x320>
    return;
 800b3e2:	bf00      	nop
  }
}
 800b3e4:	3710      	adds	r7, #16
 800b3e6:	46bd      	mov	sp, r7
 800b3e8:	bd80      	pop	{r7, pc}
 800b3ea:	bf00      	nop

0800b3ec <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b3ec:	b580      	push	{r7, lr}
 800b3ee:	b084      	sub	sp, #16
 800b3f0:	af00      	add	r7, sp, #0
 800b3f2:	6078      	str	r0, [r7, #4]
 800b3f4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b3f6:	683b      	ldr	r3, [r7, #0]
 800b3f8:	889b      	ldrh	r3, [r3, #4]
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d131      	bne.n	800b462 <USBD_SetAddress+0x76>
 800b3fe:	683b      	ldr	r3, [r7, #0]
 800b400:	88db      	ldrh	r3, [r3, #6]
 800b402:	2b00      	cmp	r3, #0
 800b404:	d12d      	bne.n	800b462 <USBD_SetAddress+0x76>
 800b406:	683b      	ldr	r3, [r7, #0]
 800b408:	885b      	ldrh	r3, [r3, #2]
 800b40a:	2b7f      	cmp	r3, #127	@ 0x7f
 800b40c:	d829      	bhi.n	800b462 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b40e:	683b      	ldr	r3, [r7, #0]
 800b410:	885b      	ldrh	r3, [r3, #2]
 800b412:	b2db      	uxtb	r3, r3
 800b414:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b418:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b420:	b2db      	uxtb	r3, r3
 800b422:	2b03      	cmp	r3, #3
 800b424:	d104      	bne.n	800b430 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b426:	6839      	ldr	r1, [r7, #0]
 800b428:	6878      	ldr	r0, [r7, #4]
 800b42a:	f000 f9a3 	bl	800b774 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b42e:	e01d      	b.n	800b46c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	7bfa      	ldrb	r2, [r7, #15]
 800b434:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b438:	7bfb      	ldrb	r3, [r7, #15]
 800b43a:	4619      	mov	r1, r3
 800b43c:	6878      	ldr	r0, [r7, #4]
 800b43e:	f000 feb9 	bl	800c1b4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b442:	6878      	ldr	r0, [r7, #4]
 800b444:	f000 fa61 	bl	800b90a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b448:	7bfb      	ldrb	r3, [r7, #15]
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d004      	beq.n	800b458 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	2202      	movs	r2, #2
 800b452:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b456:	e009      	b.n	800b46c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	2201      	movs	r2, #1
 800b45c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b460:	e004      	b.n	800b46c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b462:	6839      	ldr	r1, [r7, #0]
 800b464:	6878      	ldr	r0, [r7, #4]
 800b466:	f000 f985 	bl	800b774 <USBD_CtlError>
  }
}
 800b46a:	bf00      	nop
 800b46c:	bf00      	nop
 800b46e:	3710      	adds	r7, #16
 800b470:	46bd      	mov	sp, r7
 800b472:	bd80      	pop	{r7, pc}

0800b474 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b474:	b580      	push	{r7, lr}
 800b476:	b084      	sub	sp, #16
 800b478:	af00      	add	r7, sp, #0
 800b47a:	6078      	str	r0, [r7, #4]
 800b47c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b47e:	2300      	movs	r3, #0
 800b480:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b482:	683b      	ldr	r3, [r7, #0]
 800b484:	885b      	ldrh	r3, [r3, #2]
 800b486:	b2da      	uxtb	r2, r3
 800b488:	4b4c      	ldr	r3, [pc, #304]	@ (800b5bc <USBD_SetConfig+0x148>)
 800b48a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b48c:	4b4b      	ldr	r3, [pc, #300]	@ (800b5bc <USBD_SetConfig+0x148>)
 800b48e:	781b      	ldrb	r3, [r3, #0]
 800b490:	2b01      	cmp	r3, #1
 800b492:	d905      	bls.n	800b4a0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b494:	6839      	ldr	r1, [r7, #0]
 800b496:	6878      	ldr	r0, [r7, #4]
 800b498:	f000 f96c 	bl	800b774 <USBD_CtlError>
    return USBD_FAIL;
 800b49c:	2303      	movs	r3, #3
 800b49e:	e088      	b.n	800b5b2 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b4a6:	b2db      	uxtb	r3, r3
 800b4a8:	2b02      	cmp	r3, #2
 800b4aa:	d002      	beq.n	800b4b2 <USBD_SetConfig+0x3e>
 800b4ac:	2b03      	cmp	r3, #3
 800b4ae:	d025      	beq.n	800b4fc <USBD_SetConfig+0x88>
 800b4b0:	e071      	b.n	800b596 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b4b2:	4b42      	ldr	r3, [pc, #264]	@ (800b5bc <USBD_SetConfig+0x148>)
 800b4b4:	781b      	ldrb	r3, [r3, #0]
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d01c      	beq.n	800b4f4 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800b4ba:	4b40      	ldr	r3, [pc, #256]	@ (800b5bc <USBD_SetConfig+0x148>)
 800b4bc:	781b      	ldrb	r3, [r3, #0]
 800b4be:	461a      	mov	r2, r3
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b4c4:	4b3d      	ldr	r3, [pc, #244]	@ (800b5bc <USBD_SetConfig+0x148>)
 800b4c6:	781b      	ldrb	r3, [r3, #0]
 800b4c8:	4619      	mov	r1, r3
 800b4ca:	6878      	ldr	r0, [r7, #4]
 800b4cc:	f7ff f992 	bl	800a7f4 <USBD_SetClassConfig>
 800b4d0:	4603      	mov	r3, r0
 800b4d2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b4d4:	7bfb      	ldrb	r3, [r7, #15]
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d004      	beq.n	800b4e4 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800b4da:	6839      	ldr	r1, [r7, #0]
 800b4dc:	6878      	ldr	r0, [r7, #4]
 800b4de:	f000 f949 	bl	800b774 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b4e2:	e065      	b.n	800b5b0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800b4e4:	6878      	ldr	r0, [r7, #4]
 800b4e6:	f000 fa10 	bl	800b90a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	2203      	movs	r2, #3
 800b4ee:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800b4f2:	e05d      	b.n	800b5b0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800b4f4:	6878      	ldr	r0, [r7, #4]
 800b4f6:	f000 fa08 	bl	800b90a <USBD_CtlSendStatus>
      break;
 800b4fa:	e059      	b.n	800b5b0 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b4fc:	4b2f      	ldr	r3, [pc, #188]	@ (800b5bc <USBD_SetConfig+0x148>)
 800b4fe:	781b      	ldrb	r3, [r3, #0]
 800b500:	2b00      	cmp	r3, #0
 800b502:	d112      	bne.n	800b52a <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	2202      	movs	r2, #2
 800b508:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800b50c:	4b2b      	ldr	r3, [pc, #172]	@ (800b5bc <USBD_SetConfig+0x148>)
 800b50e:	781b      	ldrb	r3, [r3, #0]
 800b510:	461a      	mov	r2, r3
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b516:	4b29      	ldr	r3, [pc, #164]	@ (800b5bc <USBD_SetConfig+0x148>)
 800b518:	781b      	ldrb	r3, [r3, #0]
 800b51a:	4619      	mov	r1, r3
 800b51c:	6878      	ldr	r0, [r7, #4]
 800b51e:	f7ff f985 	bl	800a82c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b522:	6878      	ldr	r0, [r7, #4]
 800b524:	f000 f9f1 	bl	800b90a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b528:	e042      	b.n	800b5b0 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800b52a:	4b24      	ldr	r3, [pc, #144]	@ (800b5bc <USBD_SetConfig+0x148>)
 800b52c:	781b      	ldrb	r3, [r3, #0]
 800b52e:	461a      	mov	r2, r3
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	685b      	ldr	r3, [r3, #4]
 800b534:	429a      	cmp	r2, r3
 800b536:	d02a      	beq.n	800b58e <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	685b      	ldr	r3, [r3, #4]
 800b53c:	b2db      	uxtb	r3, r3
 800b53e:	4619      	mov	r1, r3
 800b540:	6878      	ldr	r0, [r7, #4]
 800b542:	f7ff f973 	bl	800a82c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b546:	4b1d      	ldr	r3, [pc, #116]	@ (800b5bc <USBD_SetConfig+0x148>)
 800b548:	781b      	ldrb	r3, [r3, #0]
 800b54a:	461a      	mov	r2, r3
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b550:	4b1a      	ldr	r3, [pc, #104]	@ (800b5bc <USBD_SetConfig+0x148>)
 800b552:	781b      	ldrb	r3, [r3, #0]
 800b554:	4619      	mov	r1, r3
 800b556:	6878      	ldr	r0, [r7, #4]
 800b558:	f7ff f94c 	bl	800a7f4 <USBD_SetClassConfig>
 800b55c:	4603      	mov	r3, r0
 800b55e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b560:	7bfb      	ldrb	r3, [r7, #15]
 800b562:	2b00      	cmp	r3, #0
 800b564:	d00f      	beq.n	800b586 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800b566:	6839      	ldr	r1, [r7, #0]
 800b568:	6878      	ldr	r0, [r7, #4]
 800b56a:	f000 f903 	bl	800b774 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	685b      	ldr	r3, [r3, #4]
 800b572:	b2db      	uxtb	r3, r3
 800b574:	4619      	mov	r1, r3
 800b576:	6878      	ldr	r0, [r7, #4]
 800b578:	f7ff f958 	bl	800a82c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	2202      	movs	r2, #2
 800b580:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800b584:	e014      	b.n	800b5b0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800b586:	6878      	ldr	r0, [r7, #4]
 800b588:	f000 f9bf 	bl	800b90a <USBD_CtlSendStatus>
      break;
 800b58c:	e010      	b.n	800b5b0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800b58e:	6878      	ldr	r0, [r7, #4]
 800b590:	f000 f9bb 	bl	800b90a <USBD_CtlSendStatus>
      break;
 800b594:	e00c      	b.n	800b5b0 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800b596:	6839      	ldr	r1, [r7, #0]
 800b598:	6878      	ldr	r0, [r7, #4]
 800b59a:	f000 f8eb 	bl	800b774 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b59e:	4b07      	ldr	r3, [pc, #28]	@ (800b5bc <USBD_SetConfig+0x148>)
 800b5a0:	781b      	ldrb	r3, [r3, #0]
 800b5a2:	4619      	mov	r1, r3
 800b5a4:	6878      	ldr	r0, [r7, #4]
 800b5a6:	f7ff f941 	bl	800a82c <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b5aa:	2303      	movs	r3, #3
 800b5ac:	73fb      	strb	r3, [r7, #15]
      break;
 800b5ae:	bf00      	nop
  }

  return ret;
 800b5b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5b2:	4618      	mov	r0, r3
 800b5b4:	3710      	adds	r7, #16
 800b5b6:	46bd      	mov	sp, r7
 800b5b8:	bd80      	pop	{r7, pc}
 800b5ba:	bf00      	nop
 800b5bc:	20000c65 	.word	0x20000c65

0800b5c0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b5c0:	b580      	push	{r7, lr}
 800b5c2:	b082      	sub	sp, #8
 800b5c4:	af00      	add	r7, sp, #0
 800b5c6:	6078      	str	r0, [r7, #4]
 800b5c8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b5ca:	683b      	ldr	r3, [r7, #0]
 800b5cc:	88db      	ldrh	r3, [r3, #6]
 800b5ce:	2b01      	cmp	r3, #1
 800b5d0:	d004      	beq.n	800b5dc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b5d2:	6839      	ldr	r1, [r7, #0]
 800b5d4:	6878      	ldr	r0, [r7, #4]
 800b5d6:	f000 f8cd 	bl	800b774 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b5da:	e023      	b.n	800b624 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b5e2:	b2db      	uxtb	r3, r3
 800b5e4:	2b02      	cmp	r3, #2
 800b5e6:	dc02      	bgt.n	800b5ee <USBD_GetConfig+0x2e>
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	dc03      	bgt.n	800b5f4 <USBD_GetConfig+0x34>
 800b5ec:	e015      	b.n	800b61a <USBD_GetConfig+0x5a>
 800b5ee:	2b03      	cmp	r3, #3
 800b5f0:	d00b      	beq.n	800b60a <USBD_GetConfig+0x4a>
 800b5f2:	e012      	b.n	800b61a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	2200      	movs	r2, #0
 800b5f8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	3308      	adds	r3, #8
 800b5fe:	2201      	movs	r2, #1
 800b600:	4619      	mov	r1, r3
 800b602:	6878      	ldr	r0, [r7, #4]
 800b604:	f000 f927 	bl	800b856 <USBD_CtlSendData>
        break;
 800b608:	e00c      	b.n	800b624 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	3304      	adds	r3, #4
 800b60e:	2201      	movs	r2, #1
 800b610:	4619      	mov	r1, r3
 800b612:	6878      	ldr	r0, [r7, #4]
 800b614:	f000 f91f 	bl	800b856 <USBD_CtlSendData>
        break;
 800b618:	e004      	b.n	800b624 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b61a:	6839      	ldr	r1, [r7, #0]
 800b61c:	6878      	ldr	r0, [r7, #4]
 800b61e:	f000 f8a9 	bl	800b774 <USBD_CtlError>
        break;
 800b622:	bf00      	nop
}
 800b624:	bf00      	nop
 800b626:	3708      	adds	r7, #8
 800b628:	46bd      	mov	sp, r7
 800b62a:	bd80      	pop	{r7, pc}

0800b62c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b62c:	b580      	push	{r7, lr}
 800b62e:	b082      	sub	sp, #8
 800b630:	af00      	add	r7, sp, #0
 800b632:	6078      	str	r0, [r7, #4]
 800b634:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b63c:	b2db      	uxtb	r3, r3
 800b63e:	3b01      	subs	r3, #1
 800b640:	2b02      	cmp	r3, #2
 800b642:	d81e      	bhi.n	800b682 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b644:	683b      	ldr	r3, [r7, #0]
 800b646:	88db      	ldrh	r3, [r3, #6]
 800b648:	2b02      	cmp	r3, #2
 800b64a:	d004      	beq.n	800b656 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b64c:	6839      	ldr	r1, [r7, #0]
 800b64e:	6878      	ldr	r0, [r7, #4]
 800b650:	f000 f890 	bl	800b774 <USBD_CtlError>
        break;
 800b654:	e01a      	b.n	800b68c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	2201      	movs	r2, #1
 800b65a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800b662:	2b00      	cmp	r3, #0
 800b664:	d005      	beq.n	800b672 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	68db      	ldr	r3, [r3, #12]
 800b66a:	f043 0202 	orr.w	r2, r3, #2
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	330c      	adds	r3, #12
 800b676:	2202      	movs	r2, #2
 800b678:	4619      	mov	r1, r3
 800b67a:	6878      	ldr	r0, [r7, #4]
 800b67c:	f000 f8eb 	bl	800b856 <USBD_CtlSendData>
      break;
 800b680:	e004      	b.n	800b68c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b682:	6839      	ldr	r1, [r7, #0]
 800b684:	6878      	ldr	r0, [r7, #4]
 800b686:	f000 f875 	bl	800b774 <USBD_CtlError>
      break;
 800b68a:	bf00      	nop
  }
}
 800b68c:	bf00      	nop
 800b68e:	3708      	adds	r7, #8
 800b690:	46bd      	mov	sp, r7
 800b692:	bd80      	pop	{r7, pc}

0800b694 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b694:	b580      	push	{r7, lr}
 800b696:	b082      	sub	sp, #8
 800b698:	af00      	add	r7, sp, #0
 800b69a:	6078      	str	r0, [r7, #4]
 800b69c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b69e:	683b      	ldr	r3, [r7, #0]
 800b6a0:	885b      	ldrh	r3, [r3, #2]
 800b6a2:	2b01      	cmp	r3, #1
 800b6a4:	d106      	bne.n	800b6b4 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	2201      	movs	r2, #1
 800b6aa:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b6ae:	6878      	ldr	r0, [r7, #4]
 800b6b0:	f000 f92b 	bl	800b90a <USBD_CtlSendStatus>
  }
}
 800b6b4:	bf00      	nop
 800b6b6:	3708      	adds	r7, #8
 800b6b8:	46bd      	mov	sp, r7
 800b6ba:	bd80      	pop	{r7, pc}

0800b6bc <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b6bc:	b580      	push	{r7, lr}
 800b6be:	b082      	sub	sp, #8
 800b6c0:	af00      	add	r7, sp, #0
 800b6c2:	6078      	str	r0, [r7, #4]
 800b6c4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b6cc:	b2db      	uxtb	r3, r3
 800b6ce:	3b01      	subs	r3, #1
 800b6d0:	2b02      	cmp	r3, #2
 800b6d2:	d80b      	bhi.n	800b6ec <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b6d4:	683b      	ldr	r3, [r7, #0]
 800b6d6:	885b      	ldrh	r3, [r3, #2]
 800b6d8:	2b01      	cmp	r3, #1
 800b6da:	d10c      	bne.n	800b6f6 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	2200      	movs	r2, #0
 800b6e0:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b6e4:	6878      	ldr	r0, [r7, #4]
 800b6e6:	f000 f910 	bl	800b90a <USBD_CtlSendStatus>
      }
      break;
 800b6ea:	e004      	b.n	800b6f6 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b6ec:	6839      	ldr	r1, [r7, #0]
 800b6ee:	6878      	ldr	r0, [r7, #4]
 800b6f0:	f000 f840 	bl	800b774 <USBD_CtlError>
      break;
 800b6f4:	e000      	b.n	800b6f8 <USBD_ClrFeature+0x3c>
      break;
 800b6f6:	bf00      	nop
  }
}
 800b6f8:	bf00      	nop
 800b6fa:	3708      	adds	r7, #8
 800b6fc:	46bd      	mov	sp, r7
 800b6fe:	bd80      	pop	{r7, pc}

0800b700 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b700:	b580      	push	{r7, lr}
 800b702:	b084      	sub	sp, #16
 800b704:	af00      	add	r7, sp, #0
 800b706:	6078      	str	r0, [r7, #4]
 800b708:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b70a:	683b      	ldr	r3, [r7, #0]
 800b70c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	781a      	ldrb	r2, [r3, #0]
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	3301      	adds	r3, #1
 800b71a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	781a      	ldrb	r2, [r3, #0]
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	3301      	adds	r3, #1
 800b728:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b72a:	68f8      	ldr	r0, [r7, #12]
 800b72c:	f7ff fa92 	bl	800ac54 <SWAPBYTE>
 800b730:	4603      	mov	r3, r0
 800b732:	461a      	mov	r2, r3
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	3301      	adds	r3, #1
 800b73c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	3301      	adds	r3, #1
 800b742:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b744:	68f8      	ldr	r0, [r7, #12]
 800b746:	f7ff fa85 	bl	800ac54 <SWAPBYTE>
 800b74a:	4603      	mov	r3, r0
 800b74c:	461a      	mov	r2, r3
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	3301      	adds	r3, #1
 800b756:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	3301      	adds	r3, #1
 800b75c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b75e:	68f8      	ldr	r0, [r7, #12]
 800b760:	f7ff fa78 	bl	800ac54 <SWAPBYTE>
 800b764:	4603      	mov	r3, r0
 800b766:	461a      	mov	r2, r3
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	80da      	strh	r2, [r3, #6]
}
 800b76c:	bf00      	nop
 800b76e:	3710      	adds	r7, #16
 800b770:	46bd      	mov	sp, r7
 800b772:	bd80      	pop	{r7, pc}

0800b774 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b774:	b580      	push	{r7, lr}
 800b776:	b082      	sub	sp, #8
 800b778:	af00      	add	r7, sp, #0
 800b77a:	6078      	str	r0, [r7, #4]
 800b77c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b77e:	2180      	movs	r1, #128	@ 0x80
 800b780:	6878      	ldr	r0, [r7, #4]
 800b782:	f000 fcad 	bl	800c0e0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b786:	2100      	movs	r1, #0
 800b788:	6878      	ldr	r0, [r7, #4]
 800b78a:	f000 fca9 	bl	800c0e0 <USBD_LL_StallEP>
}
 800b78e:	bf00      	nop
 800b790:	3708      	adds	r7, #8
 800b792:	46bd      	mov	sp, r7
 800b794:	bd80      	pop	{r7, pc}

0800b796 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b796:	b580      	push	{r7, lr}
 800b798:	b086      	sub	sp, #24
 800b79a:	af00      	add	r7, sp, #0
 800b79c:	60f8      	str	r0, [r7, #12]
 800b79e:	60b9      	str	r1, [r7, #8]
 800b7a0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b7a2:	2300      	movs	r3, #0
 800b7a4:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d036      	beq.n	800b81a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800b7b0:	6938      	ldr	r0, [r7, #16]
 800b7b2:	f000 f836 	bl	800b822 <USBD_GetLen>
 800b7b6:	4603      	mov	r3, r0
 800b7b8:	3301      	adds	r3, #1
 800b7ba:	b29b      	uxth	r3, r3
 800b7bc:	005b      	lsls	r3, r3, #1
 800b7be:	b29a      	uxth	r2, r3
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b7c4:	7dfb      	ldrb	r3, [r7, #23]
 800b7c6:	68ba      	ldr	r2, [r7, #8]
 800b7c8:	4413      	add	r3, r2
 800b7ca:	687a      	ldr	r2, [r7, #4]
 800b7cc:	7812      	ldrb	r2, [r2, #0]
 800b7ce:	701a      	strb	r2, [r3, #0]
  idx++;
 800b7d0:	7dfb      	ldrb	r3, [r7, #23]
 800b7d2:	3301      	adds	r3, #1
 800b7d4:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b7d6:	7dfb      	ldrb	r3, [r7, #23]
 800b7d8:	68ba      	ldr	r2, [r7, #8]
 800b7da:	4413      	add	r3, r2
 800b7dc:	2203      	movs	r2, #3
 800b7de:	701a      	strb	r2, [r3, #0]
  idx++;
 800b7e0:	7dfb      	ldrb	r3, [r7, #23]
 800b7e2:	3301      	adds	r3, #1
 800b7e4:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b7e6:	e013      	b.n	800b810 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800b7e8:	7dfb      	ldrb	r3, [r7, #23]
 800b7ea:	68ba      	ldr	r2, [r7, #8]
 800b7ec:	4413      	add	r3, r2
 800b7ee:	693a      	ldr	r2, [r7, #16]
 800b7f0:	7812      	ldrb	r2, [r2, #0]
 800b7f2:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b7f4:	693b      	ldr	r3, [r7, #16]
 800b7f6:	3301      	adds	r3, #1
 800b7f8:	613b      	str	r3, [r7, #16]
    idx++;
 800b7fa:	7dfb      	ldrb	r3, [r7, #23]
 800b7fc:	3301      	adds	r3, #1
 800b7fe:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b800:	7dfb      	ldrb	r3, [r7, #23]
 800b802:	68ba      	ldr	r2, [r7, #8]
 800b804:	4413      	add	r3, r2
 800b806:	2200      	movs	r2, #0
 800b808:	701a      	strb	r2, [r3, #0]
    idx++;
 800b80a:	7dfb      	ldrb	r3, [r7, #23]
 800b80c:	3301      	adds	r3, #1
 800b80e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b810:	693b      	ldr	r3, [r7, #16]
 800b812:	781b      	ldrb	r3, [r3, #0]
 800b814:	2b00      	cmp	r3, #0
 800b816:	d1e7      	bne.n	800b7e8 <USBD_GetString+0x52>
 800b818:	e000      	b.n	800b81c <USBD_GetString+0x86>
    return;
 800b81a:	bf00      	nop
  }
}
 800b81c:	3718      	adds	r7, #24
 800b81e:	46bd      	mov	sp, r7
 800b820:	bd80      	pop	{r7, pc}

0800b822 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b822:	b480      	push	{r7}
 800b824:	b085      	sub	sp, #20
 800b826:	af00      	add	r7, sp, #0
 800b828:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b82a:	2300      	movs	r3, #0
 800b82c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b832:	e005      	b.n	800b840 <USBD_GetLen+0x1e>
  {
    len++;
 800b834:	7bfb      	ldrb	r3, [r7, #15]
 800b836:	3301      	adds	r3, #1
 800b838:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b83a:	68bb      	ldr	r3, [r7, #8]
 800b83c:	3301      	adds	r3, #1
 800b83e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b840:	68bb      	ldr	r3, [r7, #8]
 800b842:	781b      	ldrb	r3, [r3, #0]
 800b844:	2b00      	cmp	r3, #0
 800b846:	d1f5      	bne.n	800b834 <USBD_GetLen+0x12>
  }

  return len;
 800b848:	7bfb      	ldrb	r3, [r7, #15]
}
 800b84a:	4618      	mov	r0, r3
 800b84c:	3714      	adds	r7, #20
 800b84e:	46bd      	mov	sp, r7
 800b850:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b854:	4770      	bx	lr

0800b856 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b856:	b580      	push	{r7, lr}
 800b858:	b084      	sub	sp, #16
 800b85a:	af00      	add	r7, sp, #0
 800b85c:	60f8      	str	r0, [r7, #12]
 800b85e:	60b9      	str	r1, [r7, #8]
 800b860:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	2202      	movs	r2, #2
 800b866:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	687a      	ldr	r2, [r7, #4]
 800b86e:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	687a      	ldr	r2, [r7, #4]
 800b874:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	68ba      	ldr	r2, [r7, #8]
 800b87a:	2100      	movs	r1, #0
 800b87c:	68f8      	ldr	r0, [r7, #12]
 800b87e:	f000 fcb8 	bl	800c1f2 <USBD_LL_Transmit>

  return USBD_OK;
 800b882:	2300      	movs	r3, #0
}
 800b884:	4618      	mov	r0, r3
 800b886:	3710      	adds	r7, #16
 800b888:	46bd      	mov	sp, r7
 800b88a:	bd80      	pop	{r7, pc}

0800b88c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b88c:	b580      	push	{r7, lr}
 800b88e:	b084      	sub	sp, #16
 800b890:	af00      	add	r7, sp, #0
 800b892:	60f8      	str	r0, [r7, #12]
 800b894:	60b9      	str	r1, [r7, #8]
 800b896:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	68ba      	ldr	r2, [r7, #8]
 800b89c:	2100      	movs	r1, #0
 800b89e:	68f8      	ldr	r0, [r7, #12]
 800b8a0:	f000 fca7 	bl	800c1f2 <USBD_LL_Transmit>

  return USBD_OK;
 800b8a4:	2300      	movs	r3, #0
}
 800b8a6:	4618      	mov	r0, r3
 800b8a8:	3710      	adds	r7, #16
 800b8aa:	46bd      	mov	sp, r7
 800b8ac:	bd80      	pop	{r7, pc}

0800b8ae <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b8ae:	b580      	push	{r7, lr}
 800b8b0:	b084      	sub	sp, #16
 800b8b2:	af00      	add	r7, sp, #0
 800b8b4:	60f8      	str	r0, [r7, #12]
 800b8b6:	60b9      	str	r1, [r7, #8]
 800b8b8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	2203      	movs	r2, #3
 800b8be:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	687a      	ldr	r2, [r7, #4]
 800b8c6:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	687a      	ldr	r2, [r7, #4]
 800b8ce:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	68ba      	ldr	r2, [r7, #8]
 800b8d6:	2100      	movs	r1, #0
 800b8d8:	68f8      	ldr	r0, [r7, #12]
 800b8da:	f000 fcab 	bl	800c234 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b8de:	2300      	movs	r3, #0
}
 800b8e0:	4618      	mov	r0, r3
 800b8e2:	3710      	adds	r7, #16
 800b8e4:	46bd      	mov	sp, r7
 800b8e6:	bd80      	pop	{r7, pc}

0800b8e8 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b8e8:	b580      	push	{r7, lr}
 800b8ea:	b084      	sub	sp, #16
 800b8ec:	af00      	add	r7, sp, #0
 800b8ee:	60f8      	str	r0, [r7, #12]
 800b8f0:	60b9      	str	r1, [r7, #8]
 800b8f2:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	68ba      	ldr	r2, [r7, #8]
 800b8f8:	2100      	movs	r1, #0
 800b8fa:	68f8      	ldr	r0, [r7, #12]
 800b8fc:	f000 fc9a 	bl	800c234 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b900:	2300      	movs	r3, #0
}
 800b902:	4618      	mov	r0, r3
 800b904:	3710      	adds	r7, #16
 800b906:	46bd      	mov	sp, r7
 800b908:	bd80      	pop	{r7, pc}

0800b90a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b90a:	b580      	push	{r7, lr}
 800b90c:	b082      	sub	sp, #8
 800b90e:	af00      	add	r7, sp, #0
 800b910:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	2204      	movs	r2, #4
 800b916:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b91a:	2300      	movs	r3, #0
 800b91c:	2200      	movs	r2, #0
 800b91e:	2100      	movs	r1, #0
 800b920:	6878      	ldr	r0, [r7, #4]
 800b922:	f000 fc66 	bl	800c1f2 <USBD_LL_Transmit>

  return USBD_OK;
 800b926:	2300      	movs	r3, #0
}
 800b928:	4618      	mov	r0, r3
 800b92a:	3708      	adds	r7, #8
 800b92c:	46bd      	mov	sp, r7
 800b92e:	bd80      	pop	{r7, pc}

0800b930 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b930:	b580      	push	{r7, lr}
 800b932:	b082      	sub	sp, #8
 800b934:	af00      	add	r7, sp, #0
 800b936:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	2205      	movs	r2, #5
 800b93c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b940:	2300      	movs	r3, #0
 800b942:	2200      	movs	r2, #0
 800b944:	2100      	movs	r1, #0
 800b946:	6878      	ldr	r0, [r7, #4]
 800b948:	f000 fc74 	bl	800c234 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b94c:	2300      	movs	r3, #0
}
 800b94e:	4618      	mov	r0, r3
 800b950:	3708      	adds	r7, #8
 800b952:	46bd      	mov	sp, r7
 800b954:	bd80      	pop	{r7, pc}
	...

0800b958 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800b958:	b580      	push	{r7, lr}
 800b95a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800b95c:	2200      	movs	r2, #0
 800b95e:	4912      	ldr	r1, [pc, #72]	@ (800b9a8 <MX_USB_Device_Init+0x50>)
 800b960:	4812      	ldr	r0, [pc, #72]	@ (800b9ac <MX_USB_Device_Init+0x54>)
 800b962:	f7fe fed9 	bl	800a718 <USBD_Init>
 800b966:	4603      	mov	r3, r0
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d001      	beq.n	800b970 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800b96c:	f7f6 f899 	bl	8001aa2 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800b970:	490f      	ldr	r1, [pc, #60]	@ (800b9b0 <MX_USB_Device_Init+0x58>)
 800b972:	480e      	ldr	r0, [pc, #56]	@ (800b9ac <MX_USB_Device_Init+0x54>)
 800b974:	f7fe ff00 	bl	800a778 <USBD_RegisterClass>
 800b978:	4603      	mov	r3, r0
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d001      	beq.n	800b982 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800b97e:	f7f6 f890 	bl	8001aa2 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800b982:	490c      	ldr	r1, [pc, #48]	@ (800b9b4 <MX_USB_Device_Init+0x5c>)
 800b984:	4809      	ldr	r0, [pc, #36]	@ (800b9ac <MX_USB_Device_Init+0x54>)
 800b986:	f7fe fe21 	bl	800a5cc <USBD_CDC_RegisterInterface>
 800b98a:	4603      	mov	r3, r0
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d001      	beq.n	800b994 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800b990:	f7f6 f887 	bl	8001aa2 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800b994:	4805      	ldr	r0, [pc, #20]	@ (800b9ac <MX_USB_Device_Init+0x54>)
 800b996:	f7fe ff16 	bl	800a7c6 <USBD_Start>
 800b99a:	4603      	mov	r3, r0
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d001      	beq.n	800b9a4 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800b9a0:	f7f6 f87f 	bl	8001aa2 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800b9a4:	bf00      	nop
 800b9a6:	bd80      	pop	{r7, pc}
 800b9a8:	20000318 	.word	0x20000318
 800b9ac:	20001af8 	.word	0x20001af8
 800b9b0:	20000200 	.word	0x20000200
 800b9b4:	20000304 	.word	0x20000304

0800b9b8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b9b8:	b580      	push	{r7, lr}
 800b9ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b9bc:	2200      	movs	r2, #0
 800b9be:	4905      	ldr	r1, [pc, #20]	@ (800b9d4 <CDC_Init_FS+0x1c>)
 800b9c0:	4805      	ldr	r0, [pc, #20]	@ (800b9d8 <CDC_Init_FS+0x20>)
 800b9c2:	f7fe fe18 	bl	800a5f6 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b9c6:	4905      	ldr	r1, [pc, #20]	@ (800b9dc <CDC_Init_FS+0x24>)
 800b9c8:	4803      	ldr	r0, [pc, #12]	@ (800b9d8 <CDC_Init_FS+0x20>)
 800b9ca:	f7fe fe32 	bl	800a632 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b9ce:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b9d0:	4618      	mov	r0, r3
 800b9d2:	bd80      	pop	{r7, pc}
 800b9d4:	200021c8 	.word	0x200021c8
 800b9d8:	20001af8 	.word	0x20001af8
 800b9dc:	20001dc8 	.word	0x20001dc8

0800b9e0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b9e0:	b480      	push	{r7}
 800b9e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b9e4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b9e6:	4618      	mov	r0, r3
 800b9e8:	46bd      	mov	sp, r7
 800b9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ee:	4770      	bx	lr

0800b9f0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b9f0:	b480      	push	{r7}
 800b9f2:	b083      	sub	sp, #12
 800b9f4:	af00      	add	r7, sp, #0
 800b9f6:	4603      	mov	r3, r0
 800b9f8:	6039      	str	r1, [r7, #0]
 800b9fa:	71fb      	strb	r3, [r7, #7]
 800b9fc:	4613      	mov	r3, r2
 800b9fe:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800ba00:	79fb      	ldrb	r3, [r7, #7]
 800ba02:	2b23      	cmp	r3, #35	@ 0x23
 800ba04:	d84a      	bhi.n	800ba9c <CDC_Control_FS+0xac>
 800ba06:	a201      	add	r2, pc, #4	@ (adr r2, 800ba0c <CDC_Control_FS+0x1c>)
 800ba08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba0c:	0800ba9d 	.word	0x0800ba9d
 800ba10:	0800ba9d 	.word	0x0800ba9d
 800ba14:	0800ba9d 	.word	0x0800ba9d
 800ba18:	0800ba9d 	.word	0x0800ba9d
 800ba1c:	0800ba9d 	.word	0x0800ba9d
 800ba20:	0800ba9d 	.word	0x0800ba9d
 800ba24:	0800ba9d 	.word	0x0800ba9d
 800ba28:	0800ba9d 	.word	0x0800ba9d
 800ba2c:	0800ba9d 	.word	0x0800ba9d
 800ba30:	0800ba9d 	.word	0x0800ba9d
 800ba34:	0800ba9d 	.word	0x0800ba9d
 800ba38:	0800ba9d 	.word	0x0800ba9d
 800ba3c:	0800ba9d 	.word	0x0800ba9d
 800ba40:	0800ba9d 	.word	0x0800ba9d
 800ba44:	0800ba9d 	.word	0x0800ba9d
 800ba48:	0800ba9d 	.word	0x0800ba9d
 800ba4c:	0800ba9d 	.word	0x0800ba9d
 800ba50:	0800ba9d 	.word	0x0800ba9d
 800ba54:	0800ba9d 	.word	0x0800ba9d
 800ba58:	0800ba9d 	.word	0x0800ba9d
 800ba5c:	0800ba9d 	.word	0x0800ba9d
 800ba60:	0800ba9d 	.word	0x0800ba9d
 800ba64:	0800ba9d 	.word	0x0800ba9d
 800ba68:	0800ba9d 	.word	0x0800ba9d
 800ba6c:	0800ba9d 	.word	0x0800ba9d
 800ba70:	0800ba9d 	.word	0x0800ba9d
 800ba74:	0800ba9d 	.word	0x0800ba9d
 800ba78:	0800ba9d 	.word	0x0800ba9d
 800ba7c:	0800ba9d 	.word	0x0800ba9d
 800ba80:	0800ba9d 	.word	0x0800ba9d
 800ba84:	0800ba9d 	.word	0x0800ba9d
 800ba88:	0800ba9d 	.word	0x0800ba9d
 800ba8c:	0800ba9d 	.word	0x0800ba9d
 800ba90:	0800ba9d 	.word	0x0800ba9d
 800ba94:	0800ba9d 	.word	0x0800ba9d
 800ba98:	0800ba9d 	.word	0x0800ba9d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800ba9c:	bf00      	nop
  }

  return (USBD_OK);
 800ba9e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800baa0:	4618      	mov	r0, r3
 800baa2:	370c      	adds	r7, #12
 800baa4:	46bd      	mov	sp, r7
 800baa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baaa:	4770      	bx	lr

0800baac <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800baac:	b580      	push	{r7, lr}
 800baae:	b082      	sub	sp, #8
 800bab0:	af00      	add	r7, sp, #0
 800bab2:	6078      	str	r0, [r7, #4]
 800bab4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800bab6:	6879      	ldr	r1, [r7, #4]
 800bab8:	4805      	ldr	r0, [pc, #20]	@ (800bad0 <CDC_Receive_FS+0x24>)
 800baba:	f7fe fdba 	bl	800a632 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800babe:	4804      	ldr	r0, [pc, #16]	@ (800bad0 <CDC_Receive_FS+0x24>)
 800bac0:	f7fe fe00 	bl	800a6c4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800bac4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800bac6:	4618      	mov	r0, r3
 800bac8:	3708      	adds	r7, #8
 800baca:	46bd      	mov	sp, r7
 800bacc:	bd80      	pop	{r7, pc}
 800bace:	bf00      	nop
 800bad0:	20001af8 	.word	0x20001af8

0800bad4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800bad4:	b580      	push	{r7, lr}
 800bad6:	b084      	sub	sp, #16
 800bad8:	af00      	add	r7, sp, #0
 800bada:	6078      	str	r0, [r7, #4]
 800badc:	460b      	mov	r3, r1
 800bade:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800bae0:	2300      	movs	r3, #0
 800bae2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800bae4:	4b0d      	ldr	r3, [pc, #52]	@ (800bb1c <CDC_Transmit_FS+0x48>)
 800bae6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800baea:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800baec:	68bb      	ldr	r3, [r7, #8]
 800baee:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d001      	beq.n	800bafa <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800baf6:	2301      	movs	r3, #1
 800baf8:	e00b      	b.n	800bb12 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800bafa:	887b      	ldrh	r3, [r7, #2]
 800bafc:	461a      	mov	r2, r3
 800bafe:	6879      	ldr	r1, [r7, #4]
 800bb00:	4806      	ldr	r0, [pc, #24]	@ (800bb1c <CDC_Transmit_FS+0x48>)
 800bb02:	f7fe fd78 	bl	800a5f6 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800bb06:	4805      	ldr	r0, [pc, #20]	@ (800bb1c <CDC_Transmit_FS+0x48>)
 800bb08:	f7fe fdac 	bl	800a664 <USBD_CDC_TransmitPacket>
 800bb0c:	4603      	mov	r3, r0
 800bb0e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800bb10:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb12:	4618      	mov	r0, r3
 800bb14:	3710      	adds	r7, #16
 800bb16:	46bd      	mov	sp, r7
 800bb18:	bd80      	pop	{r7, pc}
 800bb1a:	bf00      	nop
 800bb1c:	20001af8 	.word	0x20001af8

0800bb20 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800bb20:	b480      	push	{r7}
 800bb22:	b087      	sub	sp, #28
 800bb24:	af00      	add	r7, sp, #0
 800bb26:	60f8      	str	r0, [r7, #12]
 800bb28:	60b9      	str	r1, [r7, #8]
 800bb2a:	4613      	mov	r3, r2
 800bb2c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800bb2e:	2300      	movs	r3, #0
 800bb30:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800bb32:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bb36:	4618      	mov	r0, r3
 800bb38:	371c      	adds	r7, #28
 800bb3a:	46bd      	mov	sp, r7
 800bb3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb40:	4770      	bx	lr
	...

0800bb44 <CDC_Transmit_Is_Busy>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
uint8_t CDC_Transmit_Is_Busy(void)
{
 800bb44:	b480      	push	{r7}
 800bb46:	b083      	sub	sp, #12
 800bb48:	af00      	add	r7, sp, #0
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800bb4a:	4b09      	ldr	r3, [pc, #36]	@ (800bb70 <CDC_Transmit_Is_Busy+0x2c>)
 800bb4c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800bb50:	607b      	str	r3, [r7, #4]
  if (hcdc->TxState != 0)
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d001      	beq.n	800bb60 <CDC_Transmit_Is_Busy+0x1c>
  {
    return USBD_BUSY;
 800bb5c:	2301      	movs	r3, #1
 800bb5e:	e000      	b.n	800bb62 <CDC_Transmit_Is_Busy+0x1e>
  }  
  else
  {
    return USBD_OK;
 800bb60:	2300      	movs	r3, #0
  }
}
 800bb62:	4618      	mov	r0, r3
 800bb64:	370c      	adds	r7, #12
 800bb66:	46bd      	mov	sp, r7
 800bb68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb6c:	4770      	bx	lr
 800bb6e:	bf00      	nop
 800bb70:	20001af8 	.word	0x20001af8

0800bb74 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bb74:	b480      	push	{r7}
 800bb76:	b083      	sub	sp, #12
 800bb78:	af00      	add	r7, sp, #0
 800bb7a:	4603      	mov	r3, r0
 800bb7c:	6039      	str	r1, [r7, #0]
 800bb7e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800bb80:	683b      	ldr	r3, [r7, #0]
 800bb82:	2212      	movs	r2, #18
 800bb84:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800bb86:	4b03      	ldr	r3, [pc, #12]	@ (800bb94 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800bb88:	4618      	mov	r0, r3
 800bb8a:	370c      	adds	r7, #12
 800bb8c:	46bd      	mov	sp, r7
 800bb8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb92:	4770      	bx	lr
 800bb94:	20000338 	.word	0x20000338

0800bb98 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bb98:	b480      	push	{r7}
 800bb9a:	b083      	sub	sp, #12
 800bb9c:	af00      	add	r7, sp, #0
 800bb9e:	4603      	mov	r3, r0
 800bba0:	6039      	str	r1, [r7, #0]
 800bba2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800bba4:	683b      	ldr	r3, [r7, #0]
 800bba6:	2204      	movs	r2, #4
 800bba8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800bbaa:	4b03      	ldr	r3, [pc, #12]	@ (800bbb8 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800bbac:	4618      	mov	r0, r3
 800bbae:	370c      	adds	r7, #12
 800bbb0:	46bd      	mov	sp, r7
 800bbb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbb6:	4770      	bx	lr
 800bbb8:	2000034c 	.word	0x2000034c

0800bbbc <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bbbc:	b580      	push	{r7, lr}
 800bbbe:	b082      	sub	sp, #8
 800bbc0:	af00      	add	r7, sp, #0
 800bbc2:	4603      	mov	r3, r0
 800bbc4:	6039      	str	r1, [r7, #0]
 800bbc6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bbc8:	79fb      	ldrb	r3, [r7, #7]
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d105      	bne.n	800bbda <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800bbce:	683a      	ldr	r2, [r7, #0]
 800bbd0:	4907      	ldr	r1, [pc, #28]	@ (800bbf0 <USBD_CDC_ProductStrDescriptor+0x34>)
 800bbd2:	4808      	ldr	r0, [pc, #32]	@ (800bbf4 <USBD_CDC_ProductStrDescriptor+0x38>)
 800bbd4:	f7ff fddf 	bl	800b796 <USBD_GetString>
 800bbd8:	e004      	b.n	800bbe4 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800bbda:	683a      	ldr	r2, [r7, #0]
 800bbdc:	4904      	ldr	r1, [pc, #16]	@ (800bbf0 <USBD_CDC_ProductStrDescriptor+0x34>)
 800bbde:	4805      	ldr	r0, [pc, #20]	@ (800bbf4 <USBD_CDC_ProductStrDescriptor+0x38>)
 800bbe0:	f7ff fdd9 	bl	800b796 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bbe4:	4b02      	ldr	r3, [pc, #8]	@ (800bbf0 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800bbe6:	4618      	mov	r0, r3
 800bbe8:	3708      	adds	r7, #8
 800bbea:	46bd      	mov	sp, r7
 800bbec:	bd80      	pop	{r7, pc}
 800bbee:	bf00      	nop
 800bbf0:	200025c8 	.word	0x200025c8
 800bbf4:	0800d520 	.word	0x0800d520

0800bbf8 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bbf8:	b580      	push	{r7, lr}
 800bbfa:	b082      	sub	sp, #8
 800bbfc:	af00      	add	r7, sp, #0
 800bbfe:	4603      	mov	r3, r0
 800bc00:	6039      	str	r1, [r7, #0]
 800bc02:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800bc04:	683a      	ldr	r2, [r7, #0]
 800bc06:	4904      	ldr	r1, [pc, #16]	@ (800bc18 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800bc08:	4804      	ldr	r0, [pc, #16]	@ (800bc1c <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800bc0a:	f7ff fdc4 	bl	800b796 <USBD_GetString>
  return USBD_StrDesc;
 800bc0e:	4b02      	ldr	r3, [pc, #8]	@ (800bc18 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800bc10:	4618      	mov	r0, r3
 800bc12:	3708      	adds	r7, #8
 800bc14:	46bd      	mov	sp, r7
 800bc16:	bd80      	pop	{r7, pc}
 800bc18:	200025c8 	.word	0x200025c8
 800bc1c:	0800d538 	.word	0x0800d538

0800bc20 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bc20:	b580      	push	{r7, lr}
 800bc22:	b082      	sub	sp, #8
 800bc24:	af00      	add	r7, sp, #0
 800bc26:	4603      	mov	r3, r0
 800bc28:	6039      	str	r1, [r7, #0]
 800bc2a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800bc2c:	683b      	ldr	r3, [r7, #0]
 800bc2e:	221a      	movs	r2, #26
 800bc30:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800bc32:	f000 f843 	bl	800bcbc <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800bc36:	4b02      	ldr	r3, [pc, #8]	@ (800bc40 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800bc38:	4618      	mov	r0, r3
 800bc3a:	3708      	adds	r7, #8
 800bc3c:	46bd      	mov	sp, r7
 800bc3e:	bd80      	pop	{r7, pc}
 800bc40:	20000350 	.word	0x20000350

0800bc44 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bc44:	b580      	push	{r7, lr}
 800bc46:	b082      	sub	sp, #8
 800bc48:	af00      	add	r7, sp, #0
 800bc4a:	4603      	mov	r3, r0
 800bc4c:	6039      	str	r1, [r7, #0]
 800bc4e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800bc50:	79fb      	ldrb	r3, [r7, #7]
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d105      	bne.n	800bc62 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800bc56:	683a      	ldr	r2, [r7, #0]
 800bc58:	4907      	ldr	r1, [pc, #28]	@ (800bc78 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800bc5a:	4808      	ldr	r0, [pc, #32]	@ (800bc7c <USBD_CDC_ConfigStrDescriptor+0x38>)
 800bc5c:	f7ff fd9b 	bl	800b796 <USBD_GetString>
 800bc60:	e004      	b.n	800bc6c <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800bc62:	683a      	ldr	r2, [r7, #0]
 800bc64:	4904      	ldr	r1, [pc, #16]	@ (800bc78 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800bc66:	4805      	ldr	r0, [pc, #20]	@ (800bc7c <USBD_CDC_ConfigStrDescriptor+0x38>)
 800bc68:	f7ff fd95 	bl	800b796 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bc6c:	4b02      	ldr	r3, [pc, #8]	@ (800bc78 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800bc6e:	4618      	mov	r0, r3
 800bc70:	3708      	adds	r7, #8
 800bc72:	46bd      	mov	sp, r7
 800bc74:	bd80      	pop	{r7, pc}
 800bc76:	bf00      	nop
 800bc78:	200025c8 	.word	0x200025c8
 800bc7c:	0800d54c 	.word	0x0800d54c

0800bc80 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bc80:	b580      	push	{r7, lr}
 800bc82:	b082      	sub	sp, #8
 800bc84:	af00      	add	r7, sp, #0
 800bc86:	4603      	mov	r3, r0
 800bc88:	6039      	str	r1, [r7, #0]
 800bc8a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bc8c:	79fb      	ldrb	r3, [r7, #7]
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d105      	bne.n	800bc9e <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800bc92:	683a      	ldr	r2, [r7, #0]
 800bc94:	4907      	ldr	r1, [pc, #28]	@ (800bcb4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800bc96:	4808      	ldr	r0, [pc, #32]	@ (800bcb8 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800bc98:	f7ff fd7d 	bl	800b796 <USBD_GetString>
 800bc9c:	e004      	b.n	800bca8 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800bc9e:	683a      	ldr	r2, [r7, #0]
 800bca0:	4904      	ldr	r1, [pc, #16]	@ (800bcb4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800bca2:	4805      	ldr	r0, [pc, #20]	@ (800bcb8 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800bca4:	f7ff fd77 	bl	800b796 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bca8:	4b02      	ldr	r3, [pc, #8]	@ (800bcb4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800bcaa:	4618      	mov	r0, r3
 800bcac:	3708      	adds	r7, #8
 800bcae:	46bd      	mov	sp, r7
 800bcb0:	bd80      	pop	{r7, pc}
 800bcb2:	bf00      	nop
 800bcb4:	200025c8 	.word	0x200025c8
 800bcb8:	0800d558 	.word	0x0800d558

0800bcbc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800bcbc:	b580      	push	{r7, lr}
 800bcbe:	b084      	sub	sp, #16
 800bcc0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800bcc2:	4b0f      	ldr	r3, [pc, #60]	@ (800bd00 <Get_SerialNum+0x44>)
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800bcc8:	4b0e      	ldr	r3, [pc, #56]	@ (800bd04 <Get_SerialNum+0x48>)
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800bcce:	4b0e      	ldr	r3, [pc, #56]	@ (800bd08 <Get_SerialNum+0x4c>)
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800bcd4:	68fa      	ldr	r2, [r7, #12]
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	4413      	add	r3, r2
 800bcda:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d009      	beq.n	800bcf6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800bce2:	2208      	movs	r2, #8
 800bce4:	4909      	ldr	r1, [pc, #36]	@ (800bd0c <Get_SerialNum+0x50>)
 800bce6:	68f8      	ldr	r0, [r7, #12]
 800bce8:	f000 f814 	bl	800bd14 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800bcec:	2204      	movs	r2, #4
 800bcee:	4908      	ldr	r1, [pc, #32]	@ (800bd10 <Get_SerialNum+0x54>)
 800bcf0:	68b8      	ldr	r0, [r7, #8]
 800bcf2:	f000 f80f 	bl	800bd14 <IntToUnicode>
  }
}
 800bcf6:	bf00      	nop
 800bcf8:	3710      	adds	r7, #16
 800bcfa:	46bd      	mov	sp, r7
 800bcfc:	bd80      	pop	{r7, pc}
 800bcfe:	bf00      	nop
 800bd00:	1fff7590 	.word	0x1fff7590
 800bd04:	1fff7594 	.word	0x1fff7594
 800bd08:	1fff7598 	.word	0x1fff7598
 800bd0c:	20000352 	.word	0x20000352
 800bd10:	20000362 	.word	0x20000362

0800bd14 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800bd14:	b480      	push	{r7}
 800bd16:	b087      	sub	sp, #28
 800bd18:	af00      	add	r7, sp, #0
 800bd1a:	60f8      	str	r0, [r7, #12]
 800bd1c:	60b9      	str	r1, [r7, #8]
 800bd1e:	4613      	mov	r3, r2
 800bd20:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800bd22:	2300      	movs	r3, #0
 800bd24:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800bd26:	2300      	movs	r3, #0
 800bd28:	75fb      	strb	r3, [r7, #23]
 800bd2a:	e027      	b.n	800bd7c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	0f1b      	lsrs	r3, r3, #28
 800bd30:	2b09      	cmp	r3, #9
 800bd32:	d80b      	bhi.n	800bd4c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	0f1b      	lsrs	r3, r3, #28
 800bd38:	b2da      	uxtb	r2, r3
 800bd3a:	7dfb      	ldrb	r3, [r7, #23]
 800bd3c:	005b      	lsls	r3, r3, #1
 800bd3e:	4619      	mov	r1, r3
 800bd40:	68bb      	ldr	r3, [r7, #8]
 800bd42:	440b      	add	r3, r1
 800bd44:	3230      	adds	r2, #48	@ 0x30
 800bd46:	b2d2      	uxtb	r2, r2
 800bd48:	701a      	strb	r2, [r3, #0]
 800bd4a:	e00a      	b.n	800bd62 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	0f1b      	lsrs	r3, r3, #28
 800bd50:	b2da      	uxtb	r2, r3
 800bd52:	7dfb      	ldrb	r3, [r7, #23]
 800bd54:	005b      	lsls	r3, r3, #1
 800bd56:	4619      	mov	r1, r3
 800bd58:	68bb      	ldr	r3, [r7, #8]
 800bd5a:	440b      	add	r3, r1
 800bd5c:	3237      	adds	r2, #55	@ 0x37
 800bd5e:	b2d2      	uxtb	r2, r2
 800bd60:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	011b      	lsls	r3, r3, #4
 800bd66:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800bd68:	7dfb      	ldrb	r3, [r7, #23]
 800bd6a:	005b      	lsls	r3, r3, #1
 800bd6c:	3301      	adds	r3, #1
 800bd6e:	68ba      	ldr	r2, [r7, #8]
 800bd70:	4413      	add	r3, r2
 800bd72:	2200      	movs	r2, #0
 800bd74:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800bd76:	7dfb      	ldrb	r3, [r7, #23]
 800bd78:	3301      	adds	r3, #1
 800bd7a:	75fb      	strb	r3, [r7, #23]
 800bd7c:	7dfa      	ldrb	r2, [r7, #23]
 800bd7e:	79fb      	ldrb	r3, [r7, #7]
 800bd80:	429a      	cmp	r2, r3
 800bd82:	d3d3      	bcc.n	800bd2c <IntToUnicode+0x18>
  }
}
 800bd84:	bf00      	nop
 800bd86:	bf00      	nop
 800bd88:	371c      	adds	r7, #28
 800bd8a:	46bd      	mov	sp, r7
 800bd8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd90:	4770      	bx	lr
	...

0800bd94 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bd94:	b580      	push	{r7, lr}
 800bd96:	b094      	sub	sp, #80	@ 0x50
 800bd98:	af00      	add	r7, sp, #0
 800bd9a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800bd9c:	f107 030c 	add.w	r3, r7, #12
 800bda0:	2244      	movs	r2, #68	@ 0x44
 800bda2:	2100      	movs	r1, #0
 800bda4:	4618      	mov	r0, r3
 800bda6:	f000 fd03 	bl	800c7b0 <memset>
  if(pcdHandle->Instance==USB)
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	4a15      	ldr	r2, [pc, #84]	@ (800be04 <HAL_PCD_MspInit+0x70>)
 800bdb0:	4293      	cmp	r3, r2
 800bdb2:	d122      	bne.n	800bdfa <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800bdb4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800bdb8:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800bdba:	2300      	movs	r3, #0
 800bdbc:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800bdbe:	f107 030c 	add.w	r3, r7, #12
 800bdc2:	4618      	mov	r0, r3
 800bdc4:	f7f9 fd6a 	bl	800589c <HAL_RCCEx_PeriphCLKConfig>
 800bdc8:	4603      	mov	r3, r0
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d001      	beq.n	800bdd2 <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 800bdce:	f7f5 fe68 	bl	8001aa2 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800bdd2:	4b0d      	ldr	r3, [pc, #52]	@ (800be08 <HAL_PCD_MspInit+0x74>)
 800bdd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bdd6:	4a0c      	ldr	r2, [pc, #48]	@ (800be08 <HAL_PCD_MspInit+0x74>)
 800bdd8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800bddc:	6593      	str	r3, [r2, #88]	@ 0x58
 800bdde:	4b0a      	ldr	r3, [pc, #40]	@ (800be08 <HAL_PCD_MspInit+0x74>)
 800bde0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bde2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bde6:	60bb      	str	r3, [r7, #8]
 800bde8:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800bdea:	2200      	movs	r2, #0
 800bdec:	2100      	movs	r1, #0
 800bdee:	2014      	movs	r0, #20
 800bdf0:	f7f6 fd33 	bl	800285a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800bdf4:	2014      	movs	r0, #20
 800bdf6:	f7f6 fd4a 	bl	800288e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800bdfa:	bf00      	nop
 800bdfc:	3750      	adds	r7, #80	@ 0x50
 800bdfe:	46bd      	mov	sp, r7
 800be00:	bd80      	pop	{r7, pc}
 800be02:	bf00      	nop
 800be04:	40005c00 	.word	0x40005c00
 800be08:	40021000 	.word	0x40021000

0800be0c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800be0c:	b580      	push	{r7, lr}
 800be0e:	b082      	sub	sp, #8
 800be10:	af00      	add	r7, sp, #0
 800be12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800be20:	4619      	mov	r1, r3
 800be22:	4610      	mov	r0, r2
 800be24:	f7fe fd1a 	bl	800a85c <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800be28:	bf00      	nop
 800be2a:	3708      	adds	r7, #8
 800be2c:	46bd      	mov	sp, r7
 800be2e:	bd80      	pop	{r7, pc}

0800be30 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800be30:	b580      	push	{r7, lr}
 800be32:	b082      	sub	sp, #8
 800be34:	af00      	add	r7, sp, #0
 800be36:	6078      	str	r0, [r7, #4]
 800be38:	460b      	mov	r3, r1
 800be3a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800be42:	78fa      	ldrb	r2, [r7, #3]
 800be44:	6879      	ldr	r1, [r7, #4]
 800be46:	4613      	mov	r3, r2
 800be48:	009b      	lsls	r3, r3, #2
 800be4a:	4413      	add	r3, r2
 800be4c:	00db      	lsls	r3, r3, #3
 800be4e:	440b      	add	r3, r1
 800be50:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800be54:	681a      	ldr	r2, [r3, #0]
 800be56:	78fb      	ldrb	r3, [r7, #3]
 800be58:	4619      	mov	r1, r3
 800be5a:	f7fe fd54 	bl	800a906 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800be5e:	bf00      	nop
 800be60:	3708      	adds	r7, #8
 800be62:	46bd      	mov	sp, r7
 800be64:	bd80      	pop	{r7, pc}

0800be66 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800be66:	b580      	push	{r7, lr}
 800be68:	b082      	sub	sp, #8
 800be6a:	af00      	add	r7, sp, #0
 800be6c:	6078      	str	r0, [r7, #4]
 800be6e:	460b      	mov	r3, r1
 800be70:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800be78:	78fa      	ldrb	r2, [r7, #3]
 800be7a:	6879      	ldr	r1, [r7, #4]
 800be7c:	4613      	mov	r3, r2
 800be7e:	009b      	lsls	r3, r3, #2
 800be80:	4413      	add	r3, r2
 800be82:	00db      	lsls	r3, r3, #3
 800be84:	440b      	add	r3, r1
 800be86:	3324      	adds	r3, #36	@ 0x24
 800be88:	681a      	ldr	r2, [r3, #0]
 800be8a:	78fb      	ldrb	r3, [r7, #3]
 800be8c:	4619      	mov	r1, r3
 800be8e:	f7fe fd9d 	bl	800a9cc <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800be92:	bf00      	nop
 800be94:	3708      	adds	r7, #8
 800be96:	46bd      	mov	sp, r7
 800be98:	bd80      	pop	{r7, pc}

0800be9a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800be9a:	b580      	push	{r7, lr}
 800be9c:	b082      	sub	sp, #8
 800be9e:	af00      	add	r7, sp, #0
 800bea0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800bea8:	4618      	mov	r0, r3
 800beaa:	f7fe feb1 	bl	800ac10 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800beae:	bf00      	nop
 800beb0:	3708      	adds	r7, #8
 800beb2:	46bd      	mov	sp, r7
 800beb4:	bd80      	pop	{r7, pc}

0800beb6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800beb6:	b580      	push	{r7, lr}
 800beb8:	b084      	sub	sp, #16
 800beba:	af00      	add	r7, sp, #0
 800bebc:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800bebe:	2301      	movs	r3, #1
 800bec0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	795b      	ldrb	r3, [r3, #5]
 800bec6:	2b02      	cmp	r3, #2
 800bec8:	d001      	beq.n	800bece <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800beca:	f7f5 fdea 	bl	8001aa2 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800bed4:	7bfa      	ldrb	r2, [r7, #15]
 800bed6:	4611      	mov	r1, r2
 800bed8:	4618      	mov	r0, r3
 800beda:	f7fe fe5b 	bl	800ab94 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800bee4:	4618      	mov	r0, r3
 800bee6:	f7fe fe07 	bl	800aaf8 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800beea:	bf00      	nop
 800beec:	3710      	adds	r7, #16
 800beee:	46bd      	mov	sp, r7
 800bef0:	bd80      	pop	{r7, pc}
	...

0800bef4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bef4:	b580      	push	{r7, lr}
 800bef6:	b082      	sub	sp, #8
 800bef8:	af00      	add	r7, sp, #0
 800befa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800bf02:	4618      	mov	r0, r3
 800bf04:	f7fe fe56 	bl	800abb4 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	7a5b      	ldrb	r3, [r3, #9]
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d005      	beq.n	800bf1c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bf10:	4b04      	ldr	r3, [pc, #16]	@ (800bf24 <HAL_PCD_SuspendCallback+0x30>)
 800bf12:	691b      	ldr	r3, [r3, #16]
 800bf14:	4a03      	ldr	r2, [pc, #12]	@ (800bf24 <HAL_PCD_SuspendCallback+0x30>)
 800bf16:	f043 0306 	orr.w	r3, r3, #6
 800bf1a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800bf1c:	bf00      	nop
 800bf1e:	3708      	adds	r7, #8
 800bf20:	46bd      	mov	sp, r7
 800bf22:	bd80      	pop	{r7, pc}
 800bf24:	e000ed00 	.word	0xe000ed00

0800bf28 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bf28:	b580      	push	{r7, lr}
 800bf2a:	b082      	sub	sp, #8
 800bf2c:	af00      	add	r7, sp, #0
 800bf2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	7a5b      	ldrb	r3, [r3, #9]
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d007      	beq.n	800bf48 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bf38:	4b08      	ldr	r3, [pc, #32]	@ (800bf5c <HAL_PCD_ResumeCallback+0x34>)
 800bf3a:	691b      	ldr	r3, [r3, #16]
 800bf3c:	4a07      	ldr	r2, [pc, #28]	@ (800bf5c <HAL_PCD_ResumeCallback+0x34>)
 800bf3e:	f023 0306 	bic.w	r3, r3, #6
 800bf42:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800bf44:	f000 f9f8 	bl	800c338 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800bf4e:	4618      	mov	r0, r3
 800bf50:	f7fe fe46 	bl	800abe0 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800bf54:	bf00      	nop
 800bf56:	3708      	adds	r7, #8
 800bf58:	46bd      	mov	sp, r7
 800bf5a:	bd80      	pop	{r7, pc}
 800bf5c:	e000ed00 	.word	0xe000ed00

0800bf60 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800bf60:	b580      	push	{r7, lr}
 800bf62:	b082      	sub	sp, #8
 800bf64:	af00      	add	r7, sp, #0
 800bf66:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800bf68:	4a2b      	ldr	r2, [pc, #172]	@ (800c018 <USBD_LL_Init+0xb8>)
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	4a29      	ldr	r2, [pc, #164]	@ (800c018 <USBD_LL_Init+0xb8>)
 800bf74:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4

  hpcd_USB_FS.Instance = USB;
 800bf78:	4b27      	ldr	r3, [pc, #156]	@ (800c018 <USBD_LL_Init+0xb8>)
 800bf7a:	4a28      	ldr	r2, [pc, #160]	@ (800c01c <USBD_LL_Init+0xbc>)
 800bf7c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800bf7e:	4b26      	ldr	r3, [pc, #152]	@ (800c018 <USBD_LL_Init+0xb8>)
 800bf80:	2208      	movs	r2, #8
 800bf82:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800bf84:	4b24      	ldr	r3, [pc, #144]	@ (800c018 <USBD_LL_Init+0xb8>)
 800bf86:	2202      	movs	r2, #2
 800bf88:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800bf8a:	4b23      	ldr	r3, [pc, #140]	@ (800c018 <USBD_LL_Init+0xb8>)
 800bf8c:	2202      	movs	r2, #2
 800bf8e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800bf90:	4b21      	ldr	r3, [pc, #132]	@ (800c018 <USBD_LL_Init+0xb8>)
 800bf92:	2200      	movs	r2, #0
 800bf94:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800bf96:	4b20      	ldr	r3, [pc, #128]	@ (800c018 <USBD_LL_Init+0xb8>)
 800bf98:	2200      	movs	r2, #0
 800bf9a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800bf9c:	4b1e      	ldr	r3, [pc, #120]	@ (800c018 <USBD_LL_Init+0xb8>)
 800bf9e:	2200      	movs	r2, #0
 800bfa0:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800bfa2:	4b1d      	ldr	r3, [pc, #116]	@ (800c018 <USBD_LL_Init+0xb8>)
 800bfa4:	2200      	movs	r2, #0
 800bfa6:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800bfa8:	481b      	ldr	r0, [pc, #108]	@ (800c018 <USBD_LL_Init+0xb8>)
 800bfaa:	f7f7 f994 	bl	80032d6 <HAL_PCD_Init>
 800bfae:	4603      	mov	r3, r0
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d001      	beq.n	800bfb8 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800bfb4:	f7f5 fd75 	bl	8001aa2 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800bfbe:	2318      	movs	r3, #24
 800bfc0:	2200      	movs	r2, #0
 800bfc2:	2100      	movs	r1, #0
 800bfc4:	f7f8 fe1b 	bl	8004bfe <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800bfce:	2358      	movs	r3, #88	@ 0x58
 800bfd0:	2200      	movs	r2, #0
 800bfd2:	2180      	movs	r1, #128	@ 0x80
 800bfd4:	f7f8 fe13 	bl	8004bfe <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800bfde:	23c0      	movs	r3, #192	@ 0xc0
 800bfe0:	2200      	movs	r2, #0
 800bfe2:	2181      	movs	r1, #129	@ 0x81
 800bfe4:	f7f8 fe0b 	bl	8004bfe <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800bfee:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800bff2:	2200      	movs	r2, #0
 800bff4:	2101      	movs	r1, #1
 800bff6:	f7f8 fe02 	bl	8004bfe <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800c000:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c004:	2200      	movs	r2, #0
 800c006:	2182      	movs	r1, #130	@ 0x82
 800c008:	f7f8 fdf9 	bl	8004bfe <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800c00c:	2300      	movs	r3, #0
}
 800c00e:	4618      	mov	r0, r3
 800c010:	3708      	adds	r7, #8
 800c012:	46bd      	mov	sp, r7
 800c014:	bd80      	pop	{r7, pc}
 800c016:	bf00      	nop
 800c018:	200027c8 	.word	0x200027c8
 800c01c:	40005c00 	.word	0x40005c00

0800c020 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c020:	b580      	push	{r7, lr}
 800c022:	b084      	sub	sp, #16
 800c024:	af00      	add	r7, sp, #0
 800c026:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c028:	2300      	movs	r3, #0
 800c02a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c02c:	2300      	movs	r3, #0
 800c02e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800c036:	4618      	mov	r0, r3
 800c038:	f7f7 fa1b 	bl	8003472 <HAL_PCD_Start>
 800c03c:	4603      	mov	r3, r0
 800c03e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c040:	7bfb      	ldrb	r3, [r7, #15]
 800c042:	4618      	mov	r0, r3
 800c044:	f000 f97e 	bl	800c344 <USBD_Get_USB_Status>
 800c048:	4603      	mov	r3, r0
 800c04a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c04c:	7bbb      	ldrb	r3, [r7, #14]
}
 800c04e:	4618      	mov	r0, r3
 800c050:	3710      	adds	r7, #16
 800c052:	46bd      	mov	sp, r7
 800c054:	bd80      	pop	{r7, pc}

0800c056 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c056:	b580      	push	{r7, lr}
 800c058:	b084      	sub	sp, #16
 800c05a:	af00      	add	r7, sp, #0
 800c05c:	6078      	str	r0, [r7, #4]
 800c05e:	4608      	mov	r0, r1
 800c060:	4611      	mov	r1, r2
 800c062:	461a      	mov	r2, r3
 800c064:	4603      	mov	r3, r0
 800c066:	70fb      	strb	r3, [r7, #3]
 800c068:	460b      	mov	r3, r1
 800c06a:	70bb      	strb	r3, [r7, #2]
 800c06c:	4613      	mov	r3, r2
 800c06e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c070:	2300      	movs	r3, #0
 800c072:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c074:	2300      	movs	r3, #0
 800c076:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800c07e:	78bb      	ldrb	r3, [r7, #2]
 800c080:	883a      	ldrh	r2, [r7, #0]
 800c082:	78f9      	ldrb	r1, [r7, #3]
 800c084:	f7f7 fb62 	bl	800374c <HAL_PCD_EP_Open>
 800c088:	4603      	mov	r3, r0
 800c08a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c08c:	7bfb      	ldrb	r3, [r7, #15]
 800c08e:	4618      	mov	r0, r3
 800c090:	f000 f958 	bl	800c344 <USBD_Get_USB_Status>
 800c094:	4603      	mov	r3, r0
 800c096:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c098:	7bbb      	ldrb	r3, [r7, #14]
}
 800c09a:	4618      	mov	r0, r3
 800c09c:	3710      	adds	r7, #16
 800c09e:	46bd      	mov	sp, r7
 800c0a0:	bd80      	pop	{r7, pc}

0800c0a2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c0a2:	b580      	push	{r7, lr}
 800c0a4:	b084      	sub	sp, #16
 800c0a6:	af00      	add	r7, sp, #0
 800c0a8:	6078      	str	r0, [r7, #4]
 800c0aa:	460b      	mov	r3, r1
 800c0ac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c0ae:	2300      	movs	r3, #0
 800c0b0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c0b2:	2300      	movs	r3, #0
 800c0b4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800c0bc:	78fa      	ldrb	r2, [r7, #3]
 800c0be:	4611      	mov	r1, r2
 800c0c0:	4618      	mov	r0, r3
 800c0c2:	f7f7 fba2 	bl	800380a <HAL_PCD_EP_Close>
 800c0c6:	4603      	mov	r3, r0
 800c0c8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c0ca:	7bfb      	ldrb	r3, [r7, #15]
 800c0cc:	4618      	mov	r0, r3
 800c0ce:	f000 f939 	bl	800c344 <USBD_Get_USB_Status>
 800c0d2:	4603      	mov	r3, r0
 800c0d4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c0d6:	7bbb      	ldrb	r3, [r7, #14]
}
 800c0d8:	4618      	mov	r0, r3
 800c0da:	3710      	adds	r7, #16
 800c0dc:	46bd      	mov	sp, r7
 800c0de:	bd80      	pop	{r7, pc}

0800c0e0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c0e0:	b580      	push	{r7, lr}
 800c0e2:	b084      	sub	sp, #16
 800c0e4:	af00      	add	r7, sp, #0
 800c0e6:	6078      	str	r0, [r7, #4]
 800c0e8:	460b      	mov	r3, r1
 800c0ea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c0ec:	2300      	movs	r3, #0
 800c0ee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c0f0:	2300      	movs	r3, #0
 800c0f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800c0fa:	78fa      	ldrb	r2, [r7, #3]
 800c0fc:	4611      	mov	r1, r2
 800c0fe:	4618      	mov	r0, r3
 800c100:	f7f7 fc4b 	bl	800399a <HAL_PCD_EP_SetStall>
 800c104:	4603      	mov	r3, r0
 800c106:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c108:	7bfb      	ldrb	r3, [r7, #15]
 800c10a:	4618      	mov	r0, r3
 800c10c:	f000 f91a 	bl	800c344 <USBD_Get_USB_Status>
 800c110:	4603      	mov	r3, r0
 800c112:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c114:	7bbb      	ldrb	r3, [r7, #14]
}
 800c116:	4618      	mov	r0, r3
 800c118:	3710      	adds	r7, #16
 800c11a:	46bd      	mov	sp, r7
 800c11c:	bd80      	pop	{r7, pc}

0800c11e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c11e:	b580      	push	{r7, lr}
 800c120:	b084      	sub	sp, #16
 800c122:	af00      	add	r7, sp, #0
 800c124:	6078      	str	r0, [r7, #4]
 800c126:	460b      	mov	r3, r1
 800c128:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c12a:	2300      	movs	r3, #0
 800c12c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c12e:	2300      	movs	r3, #0
 800c130:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800c138:	78fa      	ldrb	r2, [r7, #3]
 800c13a:	4611      	mov	r1, r2
 800c13c:	4618      	mov	r0, r3
 800c13e:	f7f7 fc7e 	bl	8003a3e <HAL_PCD_EP_ClrStall>
 800c142:	4603      	mov	r3, r0
 800c144:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c146:	7bfb      	ldrb	r3, [r7, #15]
 800c148:	4618      	mov	r0, r3
 800c14a:	f000 f8fb 	bl	800c344 <USBD_Get_USB_Status>
 800c14e:	4603      	mov	r3, r0
 800c150:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c152:	7bbb      	ldrb	r3, [r7, #14]
}
 800c154:	4618      	mov	r0, r3
 800c156:	3710      	adds	r7, #16
 800c158:	46bd      	mov	sp, r7
 800c15a:	bd80      	pop	{r7, pc}

0800c15c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c15c:	b480      	push	{r7}
 800c15e:	b085      	sub	sp, #20
 800c160:	af00      	add	r7, sp, #0
 800c162:	6078      	str	r0, [r7, #4]
 800c164:	460b      	mov	r3, r1
 800c166:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800c16e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c170:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c174:	2b00      	cmp	r3, #0
 800c176:	da0b      	bge.n	800c190 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c178:	78fb      	ldrb	r3, [r7, #3]
 800c17a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c17e:	68f9      	ldr	r1, [r7, #12]
 800c180:	4613      	mov	r3, r2
 800c182:	009b      	lsls	r3, r3, #2
 800c184:	4413      	add	r3, r2
 800c186:	00db      	lsls	r3, r3, #3
 800c188:	440b      	add	r3, r1
 800c18a:	3312      	adds	r3, #18
 800c18c:	781b      	ldrb	r3, [r3, #0]
 800c18e:	e00b      	b.n	800c1a8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c190:	78fb      	ldrb	r3, [r7, #3]
 800c192:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c196:	68f9      	ldr	r1, [r7, #12]
 800c198:	4613      	mov	r3, r2
 800c19a:	009b      	lsls	r3, r3, #2
 800c19c:	4413      	add	r3, r2
 800c19e:	00db      	lsls	r3, r3, #3
 800c1a0:	440b      	add	r3, r1
 800c1a2:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800c1a6:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c1a8:	4618      	mov	r0, r3
 800c1aa:	3714      	adds	r7, #20
 800c1ac:	46bd      	mov	sp, r7
 800c1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1b2:	4770      	bx	lr

0800c1b4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c1b4:	b580      	push	{r7, lr}
 800c1b6:	b084      	sub	sp, #16
 800c1b8:	af00      	add	r7, sp, #0
 800c1ba:	6078      	str	r0, [r7, #4]
 800c1bc:	460b      	mov	r3, r1
 800c1be:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c1c0:	2300      	movs	r3, #0
 800c1c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c1c4:	2300      	movs	r3, #0
 800c1c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800c1ce:	78fa      	ldrb	r2, [r7, #3]
 800c1d0:	4611      	mov	r1, r2
 800c1d2:	4618      	mov	r0, r3
 800c1d4:	f7f7 fa96 	bl	8003704 <HAL_PCD_SetAddress>
 800c1d8:	4603      	mov	r3, r0
 800c1da:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c1dc:	7bfb      	ldrb	r3, [r7, #15]
 800c1de:	4618      	mov	r0, r3
 800c1e0:	f000 f8b0 	bl	800c344 <USBD_Get_USB_Status>
 800c1e4:	4603      	mov	r3, r0
 800c1e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c1e8:	7bbb      	ldrb	r3, [r7, #14]
}
 800c1ea:	4618      	mov	r0, r3
 800c1ec:	3710      	adds	r7, #16
 800c1ee:	46bd      	mov	sp, r7
 800c1f0:	bd80      	pop	{r7, pc}

0800c1f2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c1f2:	b580      	push	{r7, lr}
 800c1f4:	b086      	sub	sp, #24
 800c1f6:	af00      	add	r7, sp, #0
 800c1f8:	60f8      	str	r0, [r7, #12]
 800c1fa:	607a      	str	r2, [r7, #4]
 800c1fc:	603b      	str	r3, [r7, #0]
 800c1fe:	460b      	mov	r3, r1
 800c200:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c202:	2300      	movs	r3, #0
 800c204:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c206:	2300      	movs	r3, #0
 800c208:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800c210:	7af9      	ldrb	r1, [r7, #11]
 800c212:	683b      	ldr	r3, [r7, #0]
 800c214:	687a      	ldr	r2, [r7, #4]
 800c216:	f7f7 fb89 	bl	800392c <HAL_PCD_EP_Transmit>
 800c21a:	4603      	mov	r3, r0
 800c21c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c21e:	7dfb      	ldrb	r3, [r7, #23]
 800c220:	4618      	mov	r0, r3
 800c222:	f000 f88f 	bl	800c344 <USBD_Get_USB_Status>
 800c226:	4603      	mov	r3, r0
 800c228:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c22a:	7dbb      	ldrb	r3, [r7, #22]
}
 800c22c:	4618      	mov	r0, r3
 800c22e:	3718      	adds	r7, #24
 800c230:	46bd      	mov	sp, r7
 800c232:	bd80      	pop	{r7, pc}

0800c234 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c234:	b580      	push	{r7, lr}
 800c236:	b086      	sub	sp, #24
 800c238:	af00      	add	r7, sp, #0
 800c23a:	60f8      	str	r0, [r7, #12]
 800c23c:	607a      	str	r2, [r7, #4]
 800c23e:	603b      	str	r3, [r7, #0]
 800c240:	460b      	mov	r3, r1
 800c242:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c244:	2300      	movs	r3, #0
 800c246:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c248:	2300      	movs	r3, #0
 800c24a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800c252:	7af9      	ldrb	r1, [r7, #11]
 800c254:	683b      	ldr	r3, [r7, #0]
 800c256:	687a      	ldr	r2, [r7, #4]
 800c258:	f7f7 fb1f 	bl	800389a <HAL_PCD_EP_Receive>
 800c25c:	4603      	mov	r3, r0
 800c25e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c260:	7dfb      	ldrb	r3, [r7, #23]
 800c262:	4618      	mov	r0, r3
 800c264:	f000 f86e 	bl	800c344 <USBD_Get_USB_Status>
 800c268:	4603      	mov	r3, r0
 800c26a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c26c:	7dbb      	ldrb	r3, [r7, #22]
}
 800c26e:	4618      	mov	r0, r3
 800c270:	3718      	adds	r7, #24
 800c272:	46bd      	mov	sp, r7
 800c274:	bd80      	pop	{r7, pc}

0800c276 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c276:	b580      	push	{r7, lr}
 800c278:	b082      	sub	sp, #8
 800c27a:	af00      	add	r7, sp, #0
 800c27c:	6078      	str	r0, [r7, #4]
 800c27e:	460b      	mov	r3, r1
 800c280:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800c288:	78fa      	ldrb	r2, [r7, #3]
 800c28a:	4611      	mov	r1, r2
 800c28c:	4618      	mov	r0, r3
 800c28e:	f7f7 fb35 	bl	80038fc <HAL_PCD_EP_GetRxCount>
 800c292:	4603      	mov	r3, r0
}
 800c294:	4618      	mov	r0, r3
 800c296:	3708      	adds	r7, #8
 800c298:	46bd      	mov	sp, r7
 800c29a:	bd80      	pop	{r7, pc}

0800c29c <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c29c:	b580      	push	{r7, lr}
 800c29e:	b082      	sub	sp, #8
 800c2a0:	af00      	add	r7, sp, #0
 800c2a2:	6078      	str	r0, [r7, #4]
 800c2a4:	460b      	mov	r3, r1
 800c2a6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800c2a8:	78fb      	ldrb	r3, [r7, #3]
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d002      	beq.n	800c2b4 <HAL_PCDEx_LPM_Callback+0x18>
 800c2ae:	2b01      	cmp	r3, #1
 800c2b0:	d013      	beq.n	800c2da <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800c2b2:	e023      	b.n	800c2fc <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	7a5b      	ldrb	r3, [r3, #9]
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d007      	beq.n	800c2cc <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800c2bc:	f000 f83c 	bl	800c338 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c2c0:	4b10      	ldr	r3, [pc, #64]	@ (800c304 <HAL_PCDEx_LPM_Callback+0x68>)
 800c2c2:	691b      	ldr	r3, [r3, #16]
 800c2c4:	4a0f      	ldr	r2, [pc, #60]	@ (800c304 <HAL_PCDEx_LPM_Callback+0x68>)
 800c2c6:	f023 0306 	bic.w	r3, r3, #6
 800c2ca:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800c2d2:	4618      	mov	r0, r3
 800c2d4:	f7fe fc84 	bl	800abe0 <USBD_LL_Resume>
    break;
 800c2d8:	e010      	b.n	800c2fc <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800c2e0:	4618      	mov	r0, r3
 800c2e2:	f7fe fc67 	bl	800abb4 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	7a5b      	ldrb	r3, [r3, #9]
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d005      	beq.n	800c2fa <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c2ee:	4b05      	ldr	r3, [pc, #20]	@ (800c304 <HAL_PCDEx_LPM_Callback+0x68>)
 800c2f0:	691b      	ldr	r3, [r3, #16]
 800c2f2:	4a04      	ldr	r2, [pc, #16]	@ (800c304 <HAL_PCDEx_LPM_Callback+0x68>)
 800c2f4:	f043 0306 	orr.w	r3, r3, #6
 800c2f8:	6113      	str	r3, [r2, #16]
    break;
 800c2fa:	bf00      	nop
}
 800c2fc:	bf00      	nop
 800c2fe:	3708      	adds	r7, #8
 800c300:	46bd      	mov	sp, r7
 800c302:	bd80      	pop	{r7, pc}
 800c304:	e000ed00 	.word	0xe000ed00

0800c308 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c308:	b480      	push	{r7}
 800c30a:	b083      	sub	sp, #12
 800c30c:	af00      	add	r7, sp, #0
 800c30e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c310:	4b03      	ldr	r3, [pc, #12]	@ (800c320 <USBD_static_malloc+0x18>)
}
 800c312:	4618      	mov	r0, r3
 800c314:	370c      	adds	r7, #12
 800c316:	46bd      	mov	sp, r7
 800c318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c31c:	4770      	bx	lr
 800c31e:	bf00      	nop
 800c320:	20000c68 	.word	0x20000c68

0800c324 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c324:	b480      	push	{r7}
 800c326:	b083      	sub	sp, #12
 800c328:	af00      	add	r7, sp, #0
 800c32a:	6078      	str	r0, [r7, #4]

}
 800c32c:	bf00      	nop
 800c32e:	370c      	adds	r7, #12
 800c330:	46bd      	mov	sp, r7
 800c332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c336:	4770      	bx	lr

0800c338 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800c338:	b580      	push	{r7, lr}
 800c33a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800c33c:	f7f5 fb66 	bl	8001a0c <SystemClock_Config>
}
 800c340:	bf00      	nop
 800c342:	bd80      	pop	{r7, pc}

0800c344 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c344:	b480      	push	{r7}
 800c346:	b085      	sub	sp, #20
 800c348:	af00      	add	r7, sp, #0
 800c34a:	4603      	mov	r3, r0
 800c34c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c34e:	2300      	movs	r3, #0
 800c350:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c352:	79fb      	ldrb	r3, [r7, #7]
 800c354:	2b03      	cmp	r3, #3
 800c356:	d817      	bhi.n	800c388 <USBD_Get_USB_Status+0x44>
 800c358:	a201      	add	r2, pc, #4	@ (adr r2, 800c360 <USBD_Get_USB_Status+0x1c>)
 800c35a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c35e:	bf00      	nop
 800c360:	0800c371 	.word	0x0800c371
 800c364:	0800c377 	.word	0x0800c377
 800c368:	0800c37d 	.word	0x0800c37d
 800c36c:	0800c383 	.word	0x0800c383
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c370:	2300      	movs	r3, #0
 800c372:	73fb      	strb	r3, [r7, #15]
    break;
 800c374:	e00b      	b.n	800c38e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c376:	2303      	movs	r3, #3
 800c378:	73fb      	strb	r3, [r7, #15]
    break;
 800c37a:	e008      	b.n	800c38e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c37c:	2301      	movs	r3, #1
 800c37e:	73fb      	strb	r3, [r7, #15]
    break;
 800c380:	e005      	b.n	800c38e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c382:	2303      	movs	r3, #3
 800c384:	73fb      	strb	r3, [r7, #15]
    break;
 800c386:	e002      	b.n	800c38e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c388:	2303      	movs	r3, #3
 800c38a:	73fb      	strb	r3, [r7, #15]
    break;
 800c38c:	bf00      	nop
  }
  return usb_status;
 800c38e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c390:	4618      	mov	r0, r3
 800c392:	3714      	adds	r7, #20
 800c394:	46bd      	mov	sp, r7
 800c396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c39a:	4770      	bx	lr

0800c39c <std>:
 800c39c:	2300      	movs	r3, #0
 800c39e:	b510      	push	{r4, lr}
 800c3a0:	4604      	mov	r4, r0
 800c3a2:	e9c0 3300 	strd	r3, r3, [r0]
 800c3a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c3aa:	6083      	str	r3, [r0, #8]
 800c3ac:	8181      	strh	r1, [r0, #12]
 800c3ae:	6643      	str	r3, [r0, #100]	@ 0x64
 800c3b0:	81c2      	strh	r2, [r0, #14]
 800c3b2:	6183      	str	r3, [r0, #24]
 800c3b4:	4619      	mov	r1, r3
 800c3b6:	2208      	movs	r2, #8
 800c3b8:	305c      	adds	r0, #92	@ 0x5c
 800c3ba:	f000 f9f9 	bl	800c7b0 <memset>
 800c3be:	4b0d      	ldr	r3, [pc, #52]	@ (800c3f4 <std+0x58>)
 800c3c0:	6263      	str	r3, [r4, #36]	@ 0x24
 800c3c2:	4b0d      	ldr	r3, [pc, #52]	@ (800c3f8 <std+0x5c>)
 800c3c4:	62a3      	str	r3, [r4, #40]	@ 0x28
 800c3c6:	4b0d      	ldr	r3, [pc, #52]	@ (800c3fc <std+0x60>)
 800c3c8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800c3ca:	4b0d      	ldr	r3, [pc, #52]	@ (800c400 <std+0x64>)
 800c3cc:	6323      	str	r3, [r4, #48]	@ 0x30
 800c3ce:	4b0d      	ldr	r3, [pc, #52]	@ (800c404 <std+0x68>)
 800c3d0:	6224      	str	r4, [r4, #32]
 800c3d2:	429c      	cmp	r4, r3
 800c3d4:	d006      	beq.n	800c3e4 <std+0x48>
 800c3d6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800c3da:	4294      	cmp	r4, r2
 800c3dc:	d002      	beq.n	800c3e4 <std+0x48>
 800c3de:	33d0      	adds	r3, #208	@ 0xd0
 800c3e0:	429c      	cmp	r4, r3
 800c3e2:	d105      	bne.n	800c3f0 <std+0x54>
 800c3e4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800c3e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c3ec:	f000 ba58 	b.w	800c8a0 <__retarget_lock_init_recursive>
 800c3f0:	bd10      	pop	{r4, pc}
 800c3f2:	bf00      	nop
 800c3f4:	0800c601 	.word	0x0800c601
 800c3f8:	0800c623 	.word	0x0800c623
 800c3fc:	0800c65b 	.word	0x0800c65b
 800c400:	0800c67f 	.word	0x0800c67f
 800c404:	20000e88 	.word	0x20000e88

0800c408 <stdio_exit_handler>:
 800c408:	4a02      	ldr	r2, [pc, #8]	@ (800c414 <stdio_exit_handler+0xc>)
 800c40a:	4903      	ldr	r1, [pc, #12]	@ (800c418 <stdio_exit_handler+0x10>)
 800c40c:	4803      	ldr	r0, [pc, #12]	@ (800c41c <stdio_exit_handler+0x14>)
 800c40e:	f000 b869 	b.w	800c4e4 <_fwalk_sglue>
 800c412:	bf00      	nop
 800c414:	2000036c 	.word	0x2000036c
 800c418:	0800d15d 	.word	0x0800d15d
 800c41c:	2000037c 	.word	0x2000037c

0800c420 <cleanup_stdio>:
 800c420:	6841      	ldr	r1, [r0, #4]
 800c422:	4b0c      	ldr	r3, [pc, #48]	@ (800c454 <cleanup_stdio+0x34>)
 800c424:	4299      	cmp	r1, r3
 800c426:	b510      	push	{r4, lr}
 800c428:	4604      	mov	r4, r0
 800c42a:	d001      	beq.n	800c430 <cleanup_stdio+0x10>
 800c42c:	f000 fe96 	bl	800d15c <_fflush_r>
 800c430:	68a1      	ldr	r1, [r4, #8]
 800c432:	4b09      	ldr	r3, [pc, #36]	@ (800c458 <cleanup_stdio+0x38>)
 800c434:	4299      	cmp	r1, r3
 800c436:	d002      	beq.n	800c43e <cleanup_stdio+0x1e>
 800c438:	4620      	mov	r0, r4
 800c43a:	f000 fe8f 	bl	800d15c <_fflush_r>
 800c43e:	68e1      	ldr	r1, [r4, #12]
 800c440:	4b06      	ldr	r3, [pc, #24]	@ (800c45c <cleanup_stdio+0x3c>)
 800c442:	4299      	cmp	r1, r3
 800c444:	d004      	beq.n	800c450 <cleanup_stdio+0x30>
 800c446:	4620      	mov	r0, r4
 800c448:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c44c:	f000 be86 	b.w	800d15c <_fflush_r>
 800c450:	bd10      	pop	{r4, pc}
 800c452:	bf00      	nop
 800c454:	20000e88 	.word	0x20000e88
 800c458:	20000ef0 	.word	0x20000ef0
 800c45c:	20000f58 	.word	0x20000f58

0800c460 <global_stdio_init.part.0>:
 800c460:	b510      	push	{r4, lr}
 800c462:	4b0b      	ldr	r3, [pc, #44]	@ (800c490 <global_stdio_init.part.0+0x30>)
 800c464:	4c0b      	ldr	r4, [pc, #44]	@ (800c494 <global_stdio_init.part.0+0x34>)
 800c466:	4a0c      	ldr	r2, [pc, #48]	@ (800c498 <global_stdio_init.part.0+0x38>)
 800c468:	601a      	str	r2, [r3, #0]
 800c46a:	4620      	mov	r0, r4
 800c46c:	2200      	movs	r2, #0
 800c46e:	2104      	movs	r1, #4
 800c470:	f7ff ff94 	bl	800c39c <std>
 800c474:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800c478:	2201      	movs	r2, #1
 800c47a:	2109      	movs	r1, #9
 800c47c:	f7ff ff8e 	bl	800c39c <std>
 800c480:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800c484:	2202      	movs	r2, #2
 800c486:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c48a:	2112      	movs	r1, #18
 800c48c:	f7ff bf86 	b.w	800c39c <std>
 800c490:	20000fc0 	.word	0x20000fc0
 800c494:	20000e88 	.word	0x20000e88
 800c498:	0800c409 	.word	0x0800c409

0800c49c <__sfp_lock_acquire>:
 800c49c:	4801      	ldr	r0, [pc, #4]	@ (800c4a4 <__sfp_lock_acquire+0x8>)
 800c49e:	f000 ba00 	b.w	800c8a2 <__retarget_lock_acquire_recursive>
 800c4a2:	bf00      	nop
 800c4a4:	20000fc9 	.word	0x20000fc9

0800c4a8 <__sfp_lock_release>:
 800c4a8:	4801      	ldr	r0, [pc, #4]	@ (800c4b0 <__sfp_lock_release+0x8>)
 800c4aa:	f000 b9fb 	b.w	800c8a4 <__retarget_lock_release_recursive>
 800c4ae:	bf00      	nop
 800c4b0:	20000fc9 	.word	0x20000fc9

0800c4b4 <__sinit>:
 800c4b4:	b510      	push	{r4, lr}
 800c4b6:	4604      	mov	r4, r0
 800c4b8:	f7ff fff0 	bl	800c49c <__sfp_lock_acquire>
 800c4bc:	6a23      	ldr	r3, [r4, #32]
 800c4be:	b11b      	cbz	r3, 800c4c8 <__sinit+0x14>
 800c4c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c4c4:	f7ff bff0 	b.w	800c4a8 <__sfp_lock_release>
 800c4c8:	4b04      	ldr	r3, [pc, #16]	@ (800c4dc <__sinit+0x28>)
 800c4ca:	6223      	str	r3, [r4, #32]
 800c4cc:	4b04      	ldr	r3, [pc, #16]	@ (800c4e0 <__sinit+0x2c>)
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d1f5      	bne.n	800c4c0 <__sinit+0xc>
 800c4d4:	f7ff ffc4 	bl	800c460 <global_stdio_init.part.0>
 800c4d8:	e7f2      	b.n	800c4c0 <__sinit+0xc>
 800c4da:	bf00      	nop
 800c4dc:	0800c421 	.word	0x0800c421
 800c4e0:	20000fc0 	.word	0x20000fc0

0800c4e4 <_fwalk_sglue>:
 800c4e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c4e8:	4607      	mov	r7, r0
 800c4ea:	4688      	mov	r8, r1
 800c4ec:	4614      	mov	r4, r2
 800c4ee:	2600      	movs	r6, #0
 800c4f0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c4f4:	f1b9 0901 	subs.w	r9, r9, #1
 800c4f8:	d505      	bpl.n	800c506 <_fwalk_sglue+0x22>
 800c4fa:	6824      	ldr	r4, [r4, #0]
 800c4fc:	2c00      	cmp	r4, #0
 800c4fe:	d1f7      	bne.n	800c4f0 <_fwalk_sglue+0xc>
 800c500:	4630      	mov	r0, r6
 800c502:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c506:	89ab      	ldrh	r3, [r5, #12]
 800c508:	2b01      	cmp	r3, #1
 800c50a:	d907      	bls.n	800c51c <_fwalk_sglue+0x38>
 800c50c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c510:	3301      	adds	r3, #1
 800c512:	d003      	beq.n	800c51c <_fwalk_sglue+0x38>
 800c514:	4629      	mov	r1, r5
 800c516:	4638      	mov	r0, r7
 800c518:	47c0      	blx	r8
 800c51a:	4306      	orrs	r6, r0
 800c51c:	3568      	adds	r5, #104	@ 0x68
 800c51e:	e7e9      	b.n	800c4f4 <_fwalk_sglue+0x10>

0800c520 <iprintf>:
 800c520:	b40f      	push	{r0, r1, r2, r3}
 800c522:	b507      	push	{r0, r1, r2, lr}
 800c524:	4906      	ldr	r1, [pc, #24]	@ (800c540 <iprintf+0x20>)
 800c526:	ab04      	add	r3, sp, #16
 800c528:	6808      	ldr	r0, [r1, #0]
 800c52a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c52e:	6881      	ldr	r1, [r0, #8]
 800c530:	9301      	str	r3, [sp, #4]
 800c532:	f000 fae9 	bl	800cb08 <_vfiprintf_r>
 800c536:	b003      	add	sp, #12
 800c538:	f85d eb04 	ldr.w	lr, [sp], #4
 800c53c:	b004      	add	sp, #16
 800c53e:	4770      	bx	lr
 800c540:	20000378 	.word	0x20000378

0800c544 <_puts_r>:
 800c544:	6a03      	ldr	r3, [r0, #32]
 800c546:	b570      	push	{r4, r5, r6, lr}
 800c548:	6884      	ldr	r4, [r0, #8]
 800c54a:	4605      	mov	r5, r0
 800c54c:	460e      	mov	r6, r1
 800c54e:	b90b      	cbnz	r3, 800c554 <_puts_r+0x10>
 800c550:	f7ff ffb0 	bl	800c4b4 <__sinit>
 800c554:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c556:	07db      	lsls	r3, r3, #31
 800c558:	d405      	bmi.n	800c566 <_puts_r+0x22>
 800c55a:	89a3      	ldrh	r3, [r4, #12]
 800c55c:	0598      	lsls	r0, r3, #22
 800c55e:	d402      	bmi.n	800c566 <_puts_r+0x22>
 800c560:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c562:	f000 f99e 	bl	800c8a2 <__retarget_lock_acquire_recursive>
 800c566:	89a3      	ldrh	r3, [r4, #12]
 800c568:	0719      	lsls	r1, r3, #28
 800c56a:	d502      	bpl.n	800c572 <_puts_r+0x2e>
 800c56c:	6923      	ldr	r3, [r4, #16]
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d135      	bne.n	800c5de <_puts_r+0x9a>
 800c572:	4621      	mov	r1, r4
 800c574:	4628      	mov	r0, r5
 800c576:	f000 f8c5 	bl	800c704 <__swsetup_r>
 800c57a:	b380      	cbz	r0, 800c5de <_puts_r+0x9a>
 800c57c:	f04f 35ff 	mov.w	r5, #4294967295
 800c580:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c582:	07da      	lsls	r2, r3, #31
 800c584:	d405      	bmi.n	800c592 <_puts_r+0x4e>
 800c586:	89a3      	ldrh	r3, [r4, #12]
 800c588:	059b      	lsls	r3, r3, #22
 800c58a:	d402      	bmi.n	800c592 <_puts_r+0x4e>
 800c58c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c58e:	f000 f989 	bl	800c8a4 <__retarget_lock_release_recursive>
 800c592:	4628      	mov	r0, r5
 800c594:	bd70      	pop	{r4, r5, r6, pc}
 800c596:	2b00      	cmp	r3, #0
 800c598:	da04      	bge.n	800c5a4 <_puts_r+0x60>
 800c59a:	69a2      	ldr	r2, [r4, #24]
 800c59c:	429a      	cmp	r2, r3
 800c59e:	dc17      	bgt.n	800c5d0 <_puts_r+0x8c>
 800c5a0:	290a      	cmp	r1, #10
 800c5a2:	d015      	beq.n	800c5d0 <_puts_r+0x8c>
 800c5a4:	6823      	ldr	r3, [r4, #0]
 800c5a6:	1c5a      	adds	r2, r3, #1
 800c5a8:	6022      	str	r2, [r4, #0]
 800c5aa:	7019      	strb	r1, [r3, #0]
 800c5ac:	68a3      	ldr	r3, [r4, #8]
 800c5ae:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800c5b2:	3b01      	subs	r3, #1
 800c5b4:	60a3      	str	r3, [r4, #8]
 800c5b6:	2900      	cmp	r1, #0
 800c5b8:	d1ed      	bne.n	800c596 <_puts_r+0x52>
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	da11      	bge.n	800c5e2 <_puts_r+0x9e>
 800c5be:	4622      	mov	r2, r4
 800c5c0:	210a      	movs	r1, #10
 800c5c2:	4628      	mov	r0, r5
 800c5c4:	f000 f85f 	bl	800c686 <__swbuf_r>
 800c5c8:	3001      	adds	r0, #1
 800c5ca:	d0d7      	beq.n	800c57c <_puts_r+0x38>
 800c5cc:	250a      	movs	r5, #10
 800c5ce:	e7d7      	b.n	800c580 <_puts_r+0x3c>
 800c5d0:	4622      	mov	r2, r4
 800c5d2:	4628      	mov	r0, r5
 800c5d4:	f000 f857 	bl	800c686 <__swbuf_r>
 800c5d8:	3001      	adds	r0, #1
 800c5da:	d1e7      	bne.n	800c5ac <_puts_r+0x68>
 800c5dc:	e7ce      	b.n	800c57c <_puts_r+0x38>
 800c5de:	3e01      	subs	r6, #1
 800c5e0:	e7e4      	b.n	800c5ac <_puts_r+0x68>
 800c5e2:	6823      	ldr	r3, [r4, #0]
 800c5e4:	1c5a      	adds	r2, r3, #1
 800c5e6:	6022      	str	r2, [r4, #0]
 800c5e8:	220a      	movs	r2, #10
 800c5ea:	701a      	strb	r2, [r3, #0]
 800c5ec:	e7ee      	b.n	800c5cc <_puts_r+0x88>
	...

0800c5f0 <puts>:
 800c5f0:	4b02      	ldr	r3, [pc, #8]	@ (800c5fc <puts+0xc>)
 800c5f2:	4601      	mov	r1, r0
 800c5f4:	6818      	ldr	r0, [r3, #0]
 800c5f6:	f7ff bfa5 	b.w	800c544 <_puts_r>
 800c5fa:	bf00      	nop
 800c5fc:	20000378 	.word	0x20000378

0800c600 <__sread>:
 800c600:	b510      	push	{r4, lr}
 800c602:	460c      	mov	r4, r1
 800c604:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c608:	f000 f8fc 	bl	800c804 <_read_r>
 800c60c:	2800      	cmp	r0, #0
 800c60e:	bfab      	itete	ge
 800c610:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c612:	89a3      	ldrhlt	r3, [r4, #12]
 800c614:	181b      	addge	r3, r3, r0
 800c616:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c61a:	bfac      	ite	ge
 800c61c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c61e:	81a3      	strhlt	r3, [r4, #12]
 800c620:	bd10      	pop	{r4, pc}

0800c622 <__swrite>:
 800c622:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c626:	461f      	mov	r7, r3
 800c628:	898b      	ldrh	r3, [r1, #12]
 800c62a:	05db      	lsls	r3, r3, #23
 800c62c:	4605      	mov	r5, r0
 800c62e:	460c      	mov	r4, r1
 800c630:	4616      	mov	r6, r2
 800c632:	d505      	bpl.n	800c640 <__swrite+0x1e>
 800c634:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c638:	2302      	movs	r3, #2
 800c63a:	2200      	movs	r2, #0
 800c63c:	f000 f8d0 	bl	800c7e0 <_lseek_r>
 800c640:	89a3      	ldrh	r3, [r4, #12]
 800c642:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c646:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c64a:	81a3      	strh	r3, [r4, #12]
 800c64c:	4632      	mov	r2, r6
 800c64e:	463b      	mov	r3, r7
 800c650:	4628      	mov	r0, r5
 800c652:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c656:	f000 b8e7 	b.w	800c828 <_write_r>

0800c65a <__sseek>:
 800c65a:	b510      	push	{r4, lr}
 800c65c:	460c      	mov	r4, r1
 800c65e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c662:	f000 f8bd 	bl	800c7e0 <_lseek_r>
 800c666:	1c43      	adds	r3, r0, #1
 800c668:	89a3      	ldrh	r3, [r4, #12]
 800c66a:	bf15      	itete	ne
 800c66c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c66e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c672:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c676:	81a3      	strheq	r3, [r4, #12]
 800c678:	bf18      	it	ne
 800c67a:	81a3      	strhne	r3, [r4, #12]
 800c67c:	bd10      	pop	{r4, pc}

0800c67e <__sclose>:
 800c67e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c682:	f000 b89d 	b.w	800c7c0 <_close_r>

0800c686 <__swbuf_r>:
 800c686:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c688:	460e      	mov	r6, r1
 800c68a:	4614      	mov	r4, r2
 800c68c:	4605      	mov	r5, r0
 800c68e:	b118      	cbz	r0, 800c698 <__swbuf_r+0x12>
 800c690:	6a03      	ldr	r3, [r0, #32]
 800c692:	b90b      	cbnz	r3, 800c698 <__swbuf_r+0x12>
 800c694:	f7ff ff0e 	bl	800c4b4 <__sinit>
 800c698:	69a3      	ldr	r3, [r4, #24]
 800c69a:	60a3      	str	r3, [r4, #8]
 800c69c:	89a3      	ldrh	r3, [r4, #12]
 800c69e:	071a      	lsls	r2, r3, #28
 800c6a0:	d501      	bpl.n	800c6a6 <__swbuf_r+0x20>
 800c6a2:	6923      	ldr	r3, [r4, #16]
 800c6a4:	b943      	cbnz	r3, 800c6b8 <__swbuf_r+0x32>
 800c6a6:	4621      	mov	r1, r4
 800c6a8:	4628      	mov	r0, r5
 800c6aa:	f000 f82b 	bl	800c704 <__swsetup_r>
 800c6ae:	b118      	cbz	r0, 800c6b8 <__swbuf_r+0x32>
 800c6b0:	f04f 37ff 	mov.w	r7, #4294967295
 800c6b4:	4638      	mov	r0, r7
 800c6b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c6b8:	6823      	ldr	r3, [r4, #0]
 800c6ba:	6922      	ldr	r2, [r4, #16]
 800c6bc:	1a98      	subs	r0, r3, r2
 800c6be:	6963      	ldr	r3, [r4, #20]
 800c6c0:	b2f6      	uxtb	r6, r6
 800c6c2:	4283      	cmp	r3, r0
 800c6c4:	4637      	mov	r7, r6
 800c6c6:	dc05      	bgt.n	800c6d4 <__swbuf_r+0x4e>
 800c6c8:	4621      	mov	r1, r4
 800c6ca:	4628      	mov	r0, r5
 800c6cc:	f000 fd46 	bl	800d15c <_fflush_r>
 800c6d0:	2800      	cmp	r0, #0
 800c6d2:	d1ed      	bne.n	800c6b0 <__swbuf_r+0x2a>
 800c6d4:	68a3      	ldr	r3, [r4, #8]
 800c6d6:	3b01      	subs	r3, #1
 800c6d8:	60a3      	str	r3, [r4, #8]
 800c6da:	6823      	ldr	r3, [r4, #0]
 800c6dc:	1c5a      	adds	r2, r3, #1
 800c6de:	6022      	str	r2, [r4, #0]
 800c6e0:	701e      	strb	r6, [r3, #0]
 800c6e2:	6962      	ldr	r2, [r4, #20]
 800c6e4:	1c43      	adds	r3, r0, #1
 800c6e6:	429a      	cmp	r2, r3
 800c6e8:	d004      	beq.n	800c6f4 <__swbuf_r+0x6e>
 800c6ea:	89a3      	ldrh	r3, [r4, #12]
 800c6ec:	07db      	lsls	r3, r3, #31
 800c6ee:	d5e1      	bpl.n	800c6b4 <__swbuf_r+0x2e>
 800c6f0:	2e0a      	cmp	r6, #10
 800c6f2:	d1df      	bne.n	800c6b4 <__swbuf_r+0x2e>
 800c6f4:	4621      	mov	r1, r4
 800c6f6:	4628      	mov	r0, r5
 800c6f8:	f000 fd30 	bl	800d15c <_fflush_r>
 800c6fc:	2800      	cmp	r0, #0
 800c6fe:	d0d9      	beq.n	800c6b4 <__swbuf_r+0x2e>
 800c700:	e7d6      	b.n	800c6b0 <__swbuf_r+0x2a>
	...

0800c704 <__swsetup_r>:
 800c704:	b538      	push	{r3, r4, r5, lr}
 800c706:	4b29      	ldr	r3, [pc, #164]	@ (800c7ac <__swsetup_r+0xa8>)
 800c708:	4605      	mov	r5, r0
 800c70a:	6818      	ldr	r0, [r3, #0]
 800c70c:	460c      	mov	r4, r1
 800c70e:	b118      	cbz	r0, 800c718 <__swsetup_r+0x14>
 800c710:	6a03      	ldr	r3, [r0, #32]
 800c712:	b90b      	cbnz	r3, 800c718 <__swsetup_r+0x14>
 800c714:	f7ff fece 	bl	800c4b4 <__sinit>
 800c718:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c71c:	0719      	lsls	r1, r3, #28
 800c71e:	d422      	bmi.n	800c766 <__swsetup_r+0x62>
 800c720:	06da      	lsls	r2, r3, #27
 800c722:	d407      	bmi.n	800c734 <__swsetup_r+0x30>
 800c724:	2209      	movs	r2, #9
 800c726:	602a      	str	r2, [r5, #0]
 800c728:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c72c:	81a3      	strh	r3, [r4, #12]
 800c72e:	f04f 30ff 	mov.w	r0, #4294967295
 800c732:	e033      	b.n	800c79c <__swsetup_r+0x98>
 800c734:	0758      	lsls	r0, r3, #29
 800c736:	d512      	bpl.n	800c75e <__swsetup_r+0x5a>
 800c738:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c73a:	b141      	cbz	r1, 800c74e <__swsetup_r+0x4a>
 800c73c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c740:	4299      	cmp	r1, r3
 800c742:	d002      	beq.n	800c74a <__swsetup_r+0x46>
 800c744:	4628      	mov	r0, r5
 800c746:	f000 f8bd 	bl	800c8c4 <_free_r>
 800c74a:	2300      	movs	r3, #0
 800c74c:	6363      	str	r3, [r4, #52]	@ 0x34
 800c74e:	89a3      	ldrh	r3, [r4, #12]
 800c750:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c754:	81a3      	strh	r3, [r4, #12]
 800c756:	2300      	movs	r3, #0
 800c758:	6063      	str	r3, [r4, #4]
 800c75a:	6923      	ldr	r3, [r4, #16]
 800c75c:	6023      	str	r3, [r4, #0]
 800c75e:	89a3      	ldrh	r3, [r4, #12]
 800c760:	f043 0308 	orr.w	r3, r3, #8
 800c764:	81a3      	strh	r3, [r4, #12]
 800c766:	6923      	ldr	r3, [r4, #16]
 800c768:	b94b      	cbnz	r3, 800c77e <__swsetup_r+0x7a>
 800c76a:	89a3      	ldrh	r3, [r4, #12]
 800c76c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c770:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c774:	d003      	beq.n	800c77e <__swsetup_r+0x7a>
 800c776:	4621      	mov	r1, r4
 800c778:	4628      	mov	r0, r5
 800c77a:	f000 fd3d 	bl	800d1f8 <__smakebuf_r>
 800c77e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c782:	f013 0201 	ands.w	r2, r3, #1
 800c786:	d00a      	beq.n	800c79e <__swsetup_r+0x9a>
 800c788:	2200      	movs	r2, #0
 800c78a:	60a2      	str	r2, [r4, #8]
 800c78c:	6962      	ldr	r2, [r4, #20]
 800c78e:	4252      	negs	r2, r2
 800c790:	61a2      	str	r2, [r4, #24]
 800c792:	6922      	ldr	r2, [r4, #16]
 800c794:	b942      	cbnz	r2, 800c7a8 <__swsetup_r+0xa4>
 800c796:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c79a:	d1c5      	bne.n	800c728 <__swsetup_r+0x24>
 800c79c:	bd38      	pop	{r3, r4, r5, pc}
 800c79e:	0799      	lsls	r1, r3, #30
 800c7a0:	bf58      	it	pl
 800c7a2:	6962      	ldrpl	r2, [r4, #20]
 800c7a4:	60a2      	str	r2, [r4, #8]
 800c7a6:	e7f4      	b.n	800c792 <__swsetup_r+0x8e>
 800c7a8:	2000      	movs	r0, #0
 800c7aa:	e7f7      	b.n	800c79c <__swsetup_r+0x98>
 800c7ac:	20000378 	.word	0x20000378

0800c7b0 <memset>:
 800c7b0:	4402      	add	r2, r0
 800c7b2:	4603      	mov	r3, r0
 800c7b4:	4293      	cmp	r3, r2
 800c7b6:	d100      	bne.n	800c7ba <memset+0xa>
 800c7b8:	4770      	bx	lr
 800c7ba:	f803 1b01 	strb.w	r1, [r3], #1
 800c7be:	e7f9      	b.n	800c7b4 <memset+0x4>

0800c7c0 <_close_r>:
 800c7c0:	b538      	push	{r3, r4, r5, lr}
 800c7c2:	4d06      	ldr	r5, [pc, #24]	@ (800c7dc <_close_r+0x1c>)
 800c7c4:	2300      	movs	r3, #0
 800c7c6:	4604      	mov	r4, r0
 800c7c8:	4608      	mov	r0, r1
 800c7ca:	602b      	str	r3, [r5, #0]
 800c7cc:	f7f5 fc1d 	bl	800200a <_close>
 800c7d0:	1c43      	adds	r3, r0, #1
 800c7d2:	d102      	bne.n	800c7da <_close_r+0x1a>
 800c7d4:	682b      	ldr	r3, [r5, #0]
 800c7d6:	b103      	cbz	r3, 800c7da <_close_r+0x1a>
 800c7d8:	6023      	str	r3, [r4, #0]
 800c7da:	bd38      	pop	{r3, r4, r5, pc}
 800c7dc:	20000fc4 	.word	0x20000fc4

0800c7e0 <_lseek_r>:
 800c7e0:	b538      	push	{r3, r4, r5, lr}
 800c7e2:	4d07      	ldr	r5, [pc, #28]	@ (800c800 <_lseek_r+0x20>)
 800c7e4:	4604      	mov	r4, r0
 800c7e6:	4608      	mov	r0, r1
 800c7e8:	4611      	mov	r1, r2
 800c7ea:	2200      	movs	r2, #0
 800c7ec:	602a      	str	r2, [r5, #0]
 800c7ee:	461a      	mov	r2, r3
 800c7f0:	f7f5 fc32 	bl	8002058 <_lseek>
 800c7f4:	1c43      	adds	r3, r0, #1
 800c7f6:	d102      	bne.n	800c7fe <_lseek_r+0x1e>
 800c7f8:	682b      	ldr	r3, [r5, #0]
 800c7fa:	b103      	cbz	r3, 800c7fe <_lseek_r+0x1e>
 800c7fc:	6023      	str	r3, [r4, #0]
 800c7fe:	bd38      	pop	{r3, r4, r5, pc}
 800c800:	20000fc4 	.word	0x20000fc4

0800c804 <_read_r>:
 800c804:	b538      	push	{r3, r4, r5, lr}
 800c806:	4d07      	ldr	r5, [pc, #28]	@ (800c824 <_read_r+0x20>)
 800c808:	4604      	mov	r4, r0
 800c80a:	4608      	mov	r0, r1
 800c80c:	4611      	mov	r1, r2
 800c80e:	2200      	movs	r2, #0
 800c810:	602a      	str	r2, [r5, #0]
 800c812:	461a      	mov	r2, r3
 800c814:	f7f5 fbdc 	bl	8001fd0 <_read>
 800c818:	1c43      	adds	r3, r0, #1
 800c81a:	d102      	bne.n	800c822 <_read_r+0x1e>
 800c81c:	682b      	ldr	r3, [r5, #0]
 800c81e:	b103      	cbz	r3, 800c822 <_read_r+0x1e>
 800c820:	6023      	str	r3, [r4, #0]
 800c822:	bd38      	pop	{r3, r4, r5, pc}
 800c824:	20000fc4 	.word	0x20000fc4

0800c828 <_write_r>:
 800c828:	b538      	push	{r3, r4, r5, lr}
 800c82a:	4d07      	ldr	r5, [pc, #28]	@ (800c848 <_write_r+0x20>)
 800c82c:	4604      	mov	r4, r0
 800c82e:	4608      	mov	r0, r1
 800c830:	4611      	mov	r1, r2
 800c832:	2200      	movs	r2, #0
 800c834:	602a      	str	r2, [r5, #0]
 800c836:	461a      	mov	r2, r3
 800c838:	f7f5 fdba 	bl	80023b0 <_write>
 800c83c:	1c43      	adds	r3, r0, #1
 800c83e:	d102      	bne.n	800c846 <_write_r+0x1e>
 800c840:	682b      	ldr	r3, [r5, #0]
 800c842:	b103      	cbz	r3, 800c846 <_write_r+0x1e>
 800c844:	6023      	str	r3, [r4, #0]
 800c846:	bd38      	pop	{r3, r4, r5, pc}
 800c848:	20000fc4 	.word	0x20000fc4

0800c84c <__errno>:
 800c84c:	4b01      	ldr	r3, [pc, #4]	@ (800c854 <__errno+0x8>)
 800c84e:	6818      	ldr	r0, [r3, #0]
 800c850:	4770      	bx	lr
 800c852:	bf00      	nop
 800c854:	20000378 	.word	0x20000378

0800c858 <__libc_init_array>:
 800c858:	b570      	push	{r4, r5, r6, lr}
 800c85a:	4d0d      	ldr	r5, [pc, #52]	@ (800c890 <__libc_init_array+0x38>)
 800c85c:	4c0d      	ldr	r4, [pc, #52]	@ (800c894 <__libc_init_array+0x3c>)
 800c85e:	1b64      	subs	r4, r4, r5
 800c860:	10a4      	asrs	r4, r4, #2
 800c862:	2600      	movs	r6, #0
 800c864:	42a6      	cmp	r6, r4
 800c866:	d109      	bne.n	800c87c <__libc_init_array+0x24>
 800c868:	4d0b      	ldr	r5, [pc, #44]	@ (800c898 <__libc_init_array+0x40>)
 800c86a:	4c0c      	ldr	r4, [pc, #48]	@ (800c89c <__libc_init_array+0x44>)
 800c86c:	f000 fd32 	bl	800d2d4 <_init>
 800c870:	1b64      	subs	r4, r4, r5
 800c872:	10a4      	asrs	r4, r4, #2
 800c874:	2600      	movs	r6, #0
 800c876:	42a6      	cmp	r6, r4
 800c878:	d105      	bne.n	800c886 <__libc_init_array+0x2e>
 800c87a:	bd70      	pop	{r4, r5, r6, pc}
 800c87c:	f855 3b04 	ldr.w	r3, [r5], #4
 800c880:	4798      	blx	r3
 800c882:	3601      	adds	r6, #1
 800c884:	e7ee      	b.n	800c864 <__libc_init_array+0xc>
 800c886:	f855 3b04 	ldr.w	r3, [r5], #4
 800c88a:	4798      	blx	r3
 800c88c:	3601      	adds	r6, #1
 800c88e:	e7f2      	b.n	800c876 <__libc_init_array+0x1e>
 800c890:	0800d5e4 	.word	0x0800d5e4
 800c894:	0800d5e4 	.word	0x0800d5e4
 800c898:	0800d5e4 	.word	0x0800d5e4
 800c89c:	0800d5e8 	.word	0x0800d5e8

0800c8a0 <__retarget_lock_init_recursive>:
 800c8a0:	4770      	bx	lr

0800c8a2 <__retarget_lock_acquire_recursive>:
 800c8a2:	4770      	bx	lr

0800c8a4 <__retarget_lock_release_recursive>:
 800c8a4:	4770      	bx	lr

0800c8a6 <memcpy>:
 800c8a6:	440a      	add	r2, r1
 800c8a8:	4291      	cmp	r1, r2
 800c8aa:	f100 33ff 	add.w	r3, r0, #4294967295
 800c8ae:	d100      	bne.n	800c8b2 <memcpy+0xc>
 800c8b0:	4770      	bx	lr
 800c8b2:	b510      	push	{r4, lr}
 800c8b4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c8b8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c8bc:	4291      	cmp	r1, r2
 800c8be:	d1f9      	bne.n	800c8b4 <memcpy+0xe>
 800c8c0:	bd10      	pop	{r4, pc}
	...

0800c8c4 <_free_r>:
 800c8c4:	b538      	push	{r3, r4, r5, lr}
 800c8c6:	4605      	mov	r5, r0
 800c8c8:	2900      	cmp	r1, #0
 800c8ca:	d041      	beq.n	800c950 <_free_r+0x8c>
 800c8cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c8d0:	1f0c      	subs	r4, r1, #4
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	bfb8      	it	lt
 800c8d6:	18e4      	addlt	r4, r4, r3
 800c8d8:	f000 f8e0 	bl	800ca9c <__malloc_lock>
 800c8dc:	4a1d      	ldr	r2, [pc, #116]	@ (800c954 <_free_r+0x90>)
 800c8de:	6813      	ldr	r3, [r2, #0]
 800c8e0:	b933      	cbnz	r3, 800c8f0 <_free_r+0x2c>
 800c8e2:	6063      	str	r3, [r4, #4]
 800c8e4:	6014      	str	r4, [r2, #0]
 800c8e6:	4628      	mov	r0, r5
 800c8e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c8ec:	f000 b8dc 	b.w	800caa8 <__malloc_unlock>
 800c8f0:	42a3      	cmp	r3, r4
 800c8f2:	d908      	bls.n	800c906 <_free_r+0x42>
 800c8f4:	6820      	ldr	r0, [r4, #0]
 800c8f6:	1821      	adds	r1, r4, r0
 800c8f8:	428b      	cmp	r3, r1
 800c8fa:	bf01      	itttt	eq
 800c8fc:	6819      	ldreq	r1, [r3, #0]
 800c8fe:	685b      	ldreq	r3, [r3, #4]
 800c900:	1809      	addeq	r1, r1, r0
 800c902:	6021      	streq	r1, [r4, #0]
 800c904:	e7ed      	b.n	800c8e2 <_free_r+0x1e>
 800c906:	461a      	mov	r2, r3
 800c908:	685b      	ldr	r3, [r3, #4]
 800c90a:	b10b      	cbz	r3, 800c910 <_free_r+0x4c>
 800c90c:	42a3      	cmp	r3, r4
 800c90e:	d9fa      	bls.n	800c906 <_free_r+0x42>
 800c910:	6811      	ldr	r1, [r2, #0]
 800c912:	1850      	adds	r0, r2, r1
 800c914:	42a0      	cmp	r0, r4
 800c916:	d10b      	bne.n	800c930 <_free_r+0x6c>
 800c918:	6820      	ldr	r0, [r4, #0]
 800c91a:	4401      	add	r1, r0
 800c91c:	1850      	adds	r0, r2, r1
 800c91e:	4283      	cmp	r3, r0
 800c920:	6011      	str	r1, [r2, #0]
 800c922:	d1e0      	bne.n	800c8e6 <_free_r+0x22>
 800c924:	6818      	ldr	r0, [r3, #0]
 800c926:	685b      	ldr	r3, [r3, #4]
 800c928:	6053      	str	r3, [r2, #4]
 800c92a:	4408      	add	r0, r1
 800c92c:	6010      	str	r0, [r2, #0]
 800c92e:	e7da      	b.n	800c8e6 <_free_r+0x22>
 800c930:	d902      	bls.n	800c938 <_free_r+0x74>
 800c932:	230c      	movs	r3, #12
 800c934:	602b      	str	r3, [r5, #0]
 800c936:	e7d6      	b.n	800c8e6 <_free_r+0x22>
 800c938:	6820      	ldr	r0, [r4, #0]
 800c93a:	1821      	adds	r1, r4, r0
 800c93c:	428b      	cmp	r3, r1
 800c93e:	bf04      	itt	eq
 800c940:	6819      	ldreq	r1, [r3, #0]
 800c942:	685b      	ldreq	r3, [r3, #4]
 800c944:	6063      	str	r3, [r4, #4]
 800c946:	bf04      	itt	eq
 800c948:	1809      	addeq	r1, r1, r0
 800c94a:	6021      	streq	r1, [r4, #0]
 800c94c:	6054      	str	r4, [r2, #4]
 800c94e:	e7ca      	b.n	800c8e6 <_free_r+0x22>
 800c950:	bd38      	pop	{r3, r4, r5, pc}
 800c952:	bf00      	nop
 800c954:	20000fd0 	.word	0x20000fd0

0800c958 <sbrk_aligned>:
 800c958:	b570      	push	{r4, r5, r6, lr}
 800c95a:	4e0f      	ldr	r6, [pc, #60]	@ (800c998 <sbrk_aligned+0x40>)
 800c95c:	460c      	mov	r4, r1
 800c95e:	6831      	ldr	r1, [r6, #0]
 800c960:	4605      	mov	r5, r0
 800c962:	b911      	cbnz	r1, 800c96a <sbrk_aligned+0x12>
 800c964:	f000 fca6 	bl	800d2b4 <_sbrk_r>
 800c968:	6030      	str	r0, [r6, #0]
 800c96a:	4621      	mov	r1, r4
 800c96c:	4628      	mov	r0, r5
 800c96e:	f000 fca1 	bl	800d2b4 <_sbrk_r>
 800c972:	1c43      	adds	r3, r0, #1
 800c974:	d103      	bne.n	800c97e <sbrk_aligned+0x26>
 800c976:	f04f 34ff 	mov.w	r4, #4294967295
 800c97a:	4620      	mov	r0, r4
 800c97c:	bd70      	pop	{r4, r5, r6, pc}
 800c97e:	1cc4      	adds	r4, r0, #3
 800c980:	f024 0403 	bic.w	r4, r4, #3
 800c984:	42a0      	cmp	r0, r4
 800c986:	d0f8      	beq.n	800c97a <sbrk_aligned+0x22>
 800c988:	1a21      	subs	r1, r4, r0
 800c98a:	4628      	mov	r0, r5
 800c98c:	f000 fc92 	bl	800d2b4 <_sbrk_r>
 800c990:	3001      	adds	r0, #1
 800c992:	d1f2      	bne.n	800c97a <sbrk_aligned+0x22>
 800c994:	e7ef      	b.n	800c976 <sbrk_aligned+0x1e>
 800c996:	bf00      	nop
 800c998:	20000fcc 	.word	0x20000fcc

0800c99c <_malloc_r>:
 800c99c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c9a0:	1ccd      	adds	r5, r1, #3
 800c9a2:	f025 0503 	bic.w	r5, r5, #3
 800c9a6:	3508      	adds	r5, #8
 800c9a8:	2d0c      	cmp	r5, #12
 800c9aa:	bf38      	it	cc
 800c9ac:	250c      	movcc	r5, #12
 800c9ae:	2d00      	cmp	r5, #0
 800c9b0:	4606      	mov	r6, r0
 800c9b2:	db01      	blt.n	800c9b8 <_malloc_r+0x1c>
 800c9b4:	42a9      	cmp	r1, r5
 800c9b6:	d904      	bls.n	800c9c2 <_malloc_r+0x26>
 800c9b8:	230c      	movs	r3, #12
 800c9ba:	6033      	str	r3, [r6, #0]
 800c9bc:	2000      	movs	r0, #0
 800c9be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c9c2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ca98 <_malloc_r+0xfc>
 800c9c6:	f000 f869 	bl	800ca9c <__malloc_lock>
 800c9ca:	f8d8 3000 	ldr.w	r3, [r8]
 800c9ce:	461c      	mov	r4, r3
 800c9d0:	bb44      	cbnz	r4, 800ca24 <_malloc_r+0x88>
 800c9d2:	4629      	mov	r1, r5
 800c9d4:	4630      	mov	r0, r6
 800c9d6:	f7ff ffbf 	bl	800c958 <sbrk_aligned>
 800c9da:	1c43      	adds	r3, r0, #1
 800c9dc:	4604      	mov	r4, r0
 800c9de:	d158      	bne.n	800ca92 <_malloc_r+0xf6>
 800c9e0:	f8d8 4000 	ldr.w	r4, [r8]
 800c9e4:	4627      	mov	r7, r4
 800c9e6:	2f00      	cmp	r7, #0
 800c9e8:	d143      	bne.n	800ca72 <_malloc_r+0xd6>
 800c9ea:	2c00      	cmp	r4, #0
 800c9ec:	d04b      	beq.n	800ca86 <_malloc_r+0xea>
 800c9ee:	6823      	ldr	r3, [r4, #0]
 800c9f0:	4639      	mov	r1, r7
 800c9f2:	4630      	mov	r0, r6
 800c9f4:	eb04 0903 	add.w	r9, r4, r3
 800c9f8:	f000 fc5c 	bl	800d2b4 <_sbrk_r>
 800c9fc:	4581      	cmp	r9, r0
 800c9fe:	d142      	bne.n	800ca86 <_malloc_r+0xea>
 800ca00:	6821      	ldr	r1, [r4, #0]
 800ca02:	1a6d      	subs	r5, r5, r1
 800ca04:	4629      	mov	r1, r5
 800ca06:	4630      	mov	r0, r6
 800ca08:	f7ff ffa6 	bl	800c958 <sbrk_aligned>
 800ca0c:	3001      	adds	r0, #1
 800ca0e:	d03a      	beq.n	800ca86 <_malloc_r+0xea>
 800ca10:	6823      	ldr	r3, [r4, #0]
 800ca12:	442b      	add	r3, r5
 800ca14:	6023      	str	r3, [r4, #0]
 800ca16:	f8d8 3000 	ldr.w	r3, [r8]
 800ca1a:	685a      	ldr	r2, [r3, #4]
 800ca1c:	bb62      	cbnz	r2, 800ca78 <_malloc_r+0xdc>
 800ca1e:	f8c8 7000 	str.w	r7, [r8]
 800ca22:	e00f      	b.n	800ca44 <_malloc_r+0xa8>
 800ca24:	6822      	ldr	r2, [r4, #0]
 800ca26:	1b52      	subs	r2, r2, r5
 800ca28:	d420      	bmi.n	800ca6c <_malloc_r+0xd0>
 800ca2a:	2a0b      	cmp	r2, #11
 800ca2c:	d917      	bls.n	800ca5e <_malloc_r+0xc2>
 800ca2e:	1961      	adds	r1, r4, r5
 800ca30:	42a3      	cmp	r3, r4
 800ca32:	6025      	str	r5, [r4, #0]
 800ca34:	bf18      	it	ne
 800ca36:	6059      	strne	r1, [r3, #4]
 800ca38:	6863      	ldr	r3, [r4, #4]
 800ca3a:	bf08      	it	eq
 800ca3c:	f8c8 1000 	streq.w	r1, [r8]
 800ca40:	5162      	str	r2, [r4, r5]
 800ca42:	604b      	str	r3, [r1, #4]
 800ca44:	4630      	mov	r0, r6
 800ca46:	f000 f82f 	bl	800caa8 <__malloc_unlock>
 800ca4a:	f104 000b 	add.w	r0, r4, #11
 800ca4e:	1d23      	adds	r3, r4, #4
 800ca50:	f020 0007 	bic.w	r0, r0, #7
 800ca54:	1ac2      	subs	r2, r0, r3
 800ca56:	bf1c      	itt	ne
 800ca58:	1a1b      	subne	r3, r3, r0
 800ca5a:	50a3      	strne	r3, [r4, r2]
 800ca5c:	e7af      	b.n	800c9be <_malloc_r+0x22>
 800ca5e:	6862      	ldr	r2, [r4, #4]
 800ca60:	42a3      	cmp	r3, r4
 800ca62:	bf0c      	ite	eq
 800ca64:	f8c8 2000 	streq.w	r2, [r8]
 800ca68:	605a      	strne	r2, [r3, #4]
 800ca6a:	e7eb      	b.n	800ca44 <_malloc_r+0xa8>
 800ca6c:	4623      	mov	r3, r4
 800ca6e:	6864      	ldr	r4, [r4, #4]
 800ca70:	e7ae      	b.n	800c9d0 <_malloc_r+0x34>
 800ca72:	463c      	mov	r4, r7
 800ca74:	687f      	ldr	r7, [r7, #4]
 800ca76:	e7b6      	b.n	800c9e6 <_malloc_r+0x4a>
 800ca78:	461a      	mov	r2, r3
 800ca7a:	685b      	ldr	r3, [r3, #4]
 800ca7c:	42a3      	cmp	r3, r4
 800ca7e:	d1fb      	bne.n	800ca78 <_malloc_r+0xdc>
 800ca80:	2300      	movs	r3, #0
 800ca82:	6053      	str	r3, [r2, #4]
 800ca84:	e7de      	b.n	800ca44 <_malloc_r+0xa8>
 800ca86:	230c      	movs	r3, #12
 800ca88:	6033      	str	r3, [r6, #0]
 800ca8a:	4630      	mov	r0, r6
 800ca8c:	f000 f80c 	bl	800caa8 <__malloc_unlock>
 800ca90:	e794      	b.n	800c9bc <_malloc_r+0x20>
 800ca92:	6005      	str	r5, [r0, #0]
 800ca94:	e7d6      	b.n	800ca44 <_malloc_r+0xa8>
 800ca96:	bf00      	nop
 800ca98:	20000fd0 	.word	0x20000fd0

0800ca9c <__malloc_lock>:
 800ca9c:	4801      	ldr	r0, [pc, #4]	@ (800caa4 <__malloc_lock+0x8>)
 800ca9e:	f7ff bf00 	b.w	800c8a2 <__retarget_lock_acquire_recursive>
 800caa2:	bf00      	nop
 800caa4:	20000fc8 	.word	0x20000fc8

0800caa8 <__malloc_unlock>:
 800caa8:	4801      	ldr	r0, [pc, #4]	@ (800cab0 <__malloc_unlock+0x8>)
 800caaa:	f7ff befb 	b.w	800c8a4 <__retarget_lock_release_recursive>
 800caae:	bf00      	nop
 800cab0:	20000fc8 	.word	0x20000fc8

0800cab4 <__sfputc_r>:
 800cab4:	6893      	ldr	r3, [r2, #8]
 800cab6:	3b01      	subs	r3, #1
 800cab8:	2b00      	cmp	r3, #0
 800caba:	b410      	push	{r4}
 800cabc:	6093      	str	r3, [r2, #8]
 800cabe:	da08      	bge.n	800cad2 <__sfputc_r+0x1e>
 800cac0:	6994      	ldr	r4, [r2, #24]
 800cac2:	42a3      	cmp	r3, r4
 800cac4:	db01      	blt.n	800caca <__sfputc_r+0x16>
 800cac6:	290a      	cmp	r1, #10
 800cac8:	d103      	bne.n	800cad2 <__sfputc_r+0x1e>
 800caca:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cace:	f7ff bdda 	b.w	800c686 <__swbuf_r>
 800cad2:	6813      	ldr	r3, [r2, #0]
 800cad4:	1c58      	adds	r0, r3, #1
 800cad6:	6010      	str	r0, [r2, #0]
 800cad8:	7019      	strb	r1, [r3, #0]
 800cada:	4608      	mov	r0, r1
 800cadc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cae0:	4770      	bx	lr

0800cae2 <__sfputs_r>:
 800cae2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cae4:	4606      	mov	r6, r0
 800cae6:	460f      	mov	r7, r1
 800cae8:	4614      	mov	r4, r2
 800caea:	18d5      	adds	r5, r2, r3
 800caec:	42ac      	cmp	r4, r5
 800caee:	d101      	bne.n	800caf4 <__sfputs_r+0x12>
 800caf0:	2000      	movs	r0, #0
 800caf2:	e007      	b.n	800cb04 <__sfputs_r+0x22>
 800caf4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800caf8:	463a      	mov	r2, r7
 800cafa:	4630      	mov	r0, r6
 800cafc:	f7ff ffda 	bl	800cab4 <__sfputc_r>
 800cb00:	1c43      	adds	r3, r0, #1
 800cb02:	d1f3      	bne.n	800caec <__sfputs_r+0xa>
 800cb04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800cb08 <_vfiprintf_r>:
 800cb08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb0c:	460d      	mov	r5, r1
 800cb0e:	b09d      	sub	sp, #116	@ 0x74
 800cb10:	4614      	mov	r4, r2
 800cb12:	4698      	mov	r8, r3
 800cb14:	4606      	mov	r6, r0
 800cb16:	b118      	cbz	r0, 800cb20 <_vfiprintf_r+0x18>
 800cb18:	6a03      	ldr	r3, [r0, #32]
 800cb1a:	b90b      	cbnz	r3, 800cb20 <_vfiprintf_r+0x18>
 800cb1c:	f7ff fcca 	bl	800c4b4 <__sinit>
 800cb20:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cb22:	07d9      	lsls	r1, r3, #31
 800cb24:	d405      	bmi.n	800cb32 <_vfiprintf_r+0x2a>
 800cb26:	89ab      	ldrh	r3, [r5, #12]
 800cb28:	059a      	lsls	r2, r3, #22
 800cb2a:	d402      	bmi.n	800cb32 <_vfiprintf_r+0x2a>
 800cb2c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cb2e:	f7ff feb8 	bl	800c8a2 <__retarget_lock_acquire_recursive>
 800cb32:	89ab      	ldrh	r3, [r5, #12]
 800cb34:	071b      	lsls	r3, r3, #28
 800cb36:	d501      	bpl.n	800cb3c <_vfiprintf_r+0x34>
 800cb38:	692b      	ldr	r3, [r5, #16]
 800cb3a:	b99b      	cbnz	r3, 800cb64 <_vfiprintf_r+0x5c>
 800cb3c:	4629      	mov	r1, r5
 800cb3e:	4630      	mov	r0, r6
 800cb40:	f7ff fde0 	bl	800c704 <__swsetup_r>
 800cb44:	b170      	cbz	r0, 800cb64 <_vfiprintf_r+0x5c>
 800cb46:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cb48:	07dc      	lsls	r4, r3, #31
 800cb4a:	d504      	bpl.n	800cb56 <_vfiprintf_r+0x4e>
 800cb4c:	f04f 30ff 	mov.w	r0, #4294967295
 800cb50:	b01d      	add	sp, #116	@ 0x74
 800cb52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb56:	89ab      	ldrh	r3, [r5, #12]
 800cb58:	0598      	lsls	r0, r3, #22
 800cb5a:	d4f7      	bmi.n	800cb4c <_vfiprintf_r+0x44>
 800cb5c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cb5e:	f7ff fea1 	bl	800c8a4 <__retarget_lock_release_recursive>
 800cb62:	e7f3      	b.n	800cb4c <_vfiprintf_r+0x44>
 800cb64:	2300      	movs	r3, #0
 800cb66:	9309      	str	r3, [sp, #36]	@ 0x24
 800cb68:	2320      	movs	r3, #32
 800cb6a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800cb6e:	f8cd 800c 	str.w	r8, [sp, #12]
 800cb72:	2330      	movs	r3, #48	@ 0x30
 800cb74:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800cd24 <_vfiprintf_r+0x21c>
 800cb78:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800cb7c:	f04f 0901 	mov.w	r9, #1
 800cb80:	4623      	mov	r3, r4
 800cb82:	469a      	mov	sl, r3
 800cb84:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cb88:	b10a      	cbz	r2, 800cb8e <_vfiprintf_r+0x86>
 800cb8a:	2a25      	cmp	r2, #37	@ 0x25
 800cb8c:	d1f9      	bne.n	800cb82 <_vfiprintf_r+0x7a>
 800cb8e:	ebba 0b04 	subs.w	fp, sl, r4
 800cb92:	d00b      	beq.n	800cbac <_vfiprintf_r+0xa4>
 800cb94:	465b      	mov	r3, fp
 800cb96:	4622      	mov	r2, r4
 800cb98:	4629      	mov	r1, r5
 800cb9a:	4630      	mov	r0, r6
 800cb9c:	f7ff ffa1 	bl	800cae2 <__sfputs_r>
 800cba0:	3001      	adds	r0, #1
 800cba2:	f000 80a7 	beq.w	800ccf4 <_vfiprintf_r+0x1ec>
 800cba6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cba8:	445a      	add	r2, fp
 800cbaa:	9209      	str	r2, [sp, #36]	@ 0x24
 800cbac:	f89a 3000 	ldrb.w	r3, [sl]
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	f000 809f 	beq.w	800ccf4 <_vfiprintf_r+0x1ec>
 800cbb6:	2300      	movs	r3, #0
 800cbb8:	f04f 32ff 	mov.w	r2, #4294967295
 800cbbc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cbc0:	f10a 0a01 	add.w	sl, sl, #1
 800cbc4:	9304      	str	r3, [sp, #16]
 800cbc6:	9307      	str	r3, [sp, #28]
 800cbc8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800cbcc:	931a      	str	r3, [sp, #104]	@ 0x68
 800cbce:	4654      	mov	r4, sl
 800cbd0:	2205      	movs	r2, #5
 800cbd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cbd6:	4853      	ldr	r0, [pc, #332]	@ (800cd24 <_vfiprintf_r+0x21c>)
 800cbd8:	f7f3 fb22 	bl	8000220 <memchr>
 800cbdc:	9a04      	ldr	r2, [sp, #16]
 800cbde:	b9d8      	cbnz	r0, 800cc18 <_vfiprintf_r+0x110>
 800cbe0:	06d1      	lsls	r1, r2, #27
 800cbe2:	bf44      	itt	mi
 800cbe4:	2320      	movmi	r3, #32
 800cbe6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cbea:	0713      	lsls	r3, r2, #28
 800cbec:	bf44      	itt	mi
 800cbee:	232b      	movmi	r3, #43	@ 0x2b
 800cbf0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cbf4:	f89a 3000 	ldrb.w	r3, [sl]
 800cbf8:	2b2a      	cmp	r3, #42	@ 0x2a
 800cbfa:	d015      	beq.n	800cc28 <_vfiprintf_r+0x120>
 800cbfc:	9a07      	ldr	r2, [sp, #28]
 800cbfe:	4654      	mov	r4, sl
 800cc00:	2000      	movs	r0, #0
 800cc02:	f04f 0c0a 	mov.w	ip, #10
 800cc06:	4621      	mov	r1, r4
 800cc08:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cc0c:	3b30      	subs	r3, #48	@ 0x30
 800cc0e:	2b09      	cmp	r3, #9
 800cc10:	d94b      	bls.n	800ccaa <_vfiprintf_r+0x1a2>
 800cc12:	b1b0      	cbz	r0, 800cc42 <_vfiprintf_r+0x13a>
 800cc14:	9207      	str	r2, [sp, #28]
 800cc16:	e014      	b.n	800cc42 <_vfiprintf_r+0x13a>
 800cc18:	eba0 0308 	sub.w	r3, r0, r8
 800cc1c:	fa09 f303 	lsl.w	r3, r9, r3
 800cc20:	4313      	orrs	r3, r2
 800cc22:	9304      	str	r3, [sp, #16]
 800cc24:	46a2      	mov	sl, r4
 800cc26:	e7d2      	b.n	800cbce <_vfiprintf_r+0xc6>
 800cc28:	9b03      	ldr	r3, [sp, #12]
 800cc2a:	1d19      	adds	r1, r3, #4
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	9103      	str	r1, [sp, #12]
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	bfbb      	ittet	lt
 800cc34:	425b      	neglt	r3, r3
 800cc36:	f042 0202 	orrlt.w	r2, r2, #2
 800cc3a:	9307      	strge	r3, [sp, #28]
 800cc3c:	9307      	strlt	r3, [sp, #28]
 800cc3e:	bfb8      	it	lt
 800cc40:	9204      	strlt	r2, [sp, #16]
 800cc42:	7823      	ldrb	r3, [r4, #0]
 800cc44:	2b2e      	cmp	r3, #46	@ 0x2e
 800cc46:	d10a      	bne.n	800cc5e <_vfiprintf_r+0x156>
 800cc48:	7863      	ldrb	r3, [r4, #1]
 800cc4a:	2b2a      	cmp	r3, #42	@ 0x2a
 800cc4c:	d132      	bne.n	800ccb4 <_vfiprintf_r+0x1ac>
 800cc4e:	9b03      	ldr	r3, [sp, #12]
 800cc50:	1d1a      	adds	r2, r3, #4
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	9203      	str	r2, [sp, #12]
 800cc56:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800cc5a:	3402      	adds	r4, #2
 800cc5c:	9305      	str	r3, [sp, #20]
 800cc5e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800cd34 <_vfiprintf_r+0x22c>
 800cc62:	7821      	ldrb	r1, [r4, #0]
 800cc64:	2203      	movs	r2, #3
 800cc66:	4650      	mov	r0, sl
 800cc68:	f7f3 fada 	bl	8000220 <memchr>
 800cc6c:	b138      	cbz	r0, 800cc7e <_vfiprintf_r+0x176>
 800cc6e:	9b04      	ldr	r3, [sp, #16]
 800cc70:	eba0 000a 	sub.w	r0, r0, sl
 800cc74:	2240      	movs	r2, #64	@ 0x40
 800cc76:	4082      	lsls	r2, r0
 800cc78:	4313      	orrs	r3, r2
 800cc7a:	3401      	adds	r4, #1
 800cc7c:	9304      	str	r3, [sp, #16]
 800cc7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cc82:	4829      	ldr	r0, [pc, #164]	@ (800cd28 <_vfiprintf_r+0x220>)
 800cc84:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800cc88:	2206      	movs	r2, #6
 800cc8a:	f7f3 fac9 	bl	8000220 <memchr>
 800cc8e:	2800      	cmp	r0, #0
 800cc90:	d03f      	beq.n	800cd12 <_vfiprintf_r+0x20a>
 800cc92:	4b26      	ldr	r3, [pc, #152]	@ (800cd2c <_vfiprintf_r+0x224>)
 800cc94:	bb1b      	cbnz	r3, 800ccde <_vfiprintf_r+0x1d6>
 800cc96:	9b03      	ldr	r3, [sp, #12]
 800cc98:	3307      	adds	r3, #7
 800cc9a:	f023 0307 	bic.w	r3, r3, #7
 800cc9e:	3308      	adds	r3, #8
 800cca0:	9303      	str	r3, [sp, #12]
 800cca2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cca4:	443b      	add	r3, r7
 800cca6:	9309      	str	r3, [sp, #36]	@ 0x24
 800cca8:	e76a      	b.n	800cb80 <_vfiprintf_r+0x78>
 800ccaa:	fb0c 3202 	mla	r2, ip, r2, r3
 800ccae:	460c      	mov	r4, r1
 800ccb0:	2001      	movs	r0, #1
 800ccb2:	e7a8      	b.n	800cc06 <_vfiprintf_r+0xfe>
 800ccb4:	2300      	movs	r3, #0
 800ccb6:	3401      	adds	r4, #1
 800ccb8:	9305      	str	r3, [sp, #20]
 800ccba:	4619      	mov	r1, r3
 800ccbc:	f04f 0c0a 	mov.w	ip, #10
 800ccc0:	4620      	mov	r0, r4
 800ccc2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ccc6:	3a30      	subs	r2, #48	@ 0x30
 800ccc8:	2a09      	cmp	r2, #9
 800ccca:	d903      	bls.n	800ccd4 <_vfiprintf_r+0x1cc>
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d0c6      	beq.n	800cc5e <_vfiprintf_r+0x156>
 800ccd0:	9105      	str	r1, [sp, #20]
 800ccd2:	e7c4      	b.n	800cc5e <_vfiprintf_r+0x156>
 800ccd4:	fb0c 2101 	mla	r1, ip, r1, r2
 800ccd8:	4604      	mov	r4, r0
 800ccda:	2301      	movs	r3, #1
 800ccdc:	e7f0      	b.n	800ccc0 <_vfiprintf_r+0x1b8>
 800ccde:	ab03      	add	r3, sp, #12
 800cce0:	9300      	str	r3, [sp, #0]
 800cce2:	462a      	mov	r2, r5
 800cce4:	4b12      	ldr	r3, [pc, #72]	@ (800cd30 <_vfiprintf_r+0x228>)
 800cce6:	a904      	add	r1, sp, #16
 800cce8:	4630      	mov	r0, r6
 800ccea:	f3af 8000 	nop.w
 800ccee:	4607      	mov	r7, r0
 800ccf0:	1c78      	adds	r0, r7, #1
 800ccf2:	d1d6      	bne.n	800cca2 <_vfiprintf_r+0x19a>
 800ccf4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ccf6:	07d9      	lsls	r1, r3, #31
 800ccf8:	d405      	bmi.n	800cd06 <_vfiprintf_r+0x1fe>
 800ccfa:	89ab      	ldrh	r3, [r5, #12]
 800ccfc:	059a      	lsls	r2, r3, #22
 800ccfe:	d402      	bmi.n	800cd06 <_vfiprintf_r+0x1fe>
 800cd00:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cd02:	f7ff fdcf 	bl	800c8a4 <__retarget_lock_release_recursive>
 800cd06:	89ab      	ldrh	r3, [r5, #12]
 800cd08:	065b      	lsls	r3, r3, #25
 800cd0a:	f53f af1f 	bmi.w	800cb4c <_vfiprintf_r+0x44>
 800cd0e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cd10:	e71e      	b.n	800cb50 <_vfiprintf_r+0x48>
 800cd12:	ab03      	add	r3, sp, #12
 800cd14:	9300      	str	r3, [sp, #0]
 800cd16:	462a      	mov	r2, r5
 800cd18:	4b05      	ldr	r3, [pc, #20]	@ (800cd30 <_vfiprintf_r+0x228>)
 800cd1a:	a904      	add	r1, sp, #16
 800cd1c:	4630      	mov	r0, r6
 800cd1e:	f000 f879 	bl	800ce14 <_printf_i>
 800cd22:	e7e4      	b.n	800ccee <_vfiprintf_r+0x1e6>
 800cd24:	0800d5a8 	.word	0x0800d5a8
 800cd28:	0800d5b2 	.word	0x0800d5b2
 800cd2c:	00000000 	.word	0x00000000
 800cd30:	0800cae3 	.word	0x0800cae3
 800cd34:	0800d5ae 	.word	0x0800d5ae

0800cd38 <_printf_common>:
 800cd38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cd3c:	4616      	mov	r6, r2
 800cd3e:	4698      	mov	r8, r3
 800cd40:	688a      	ldr	r2, [r1, #8]
 800cd42:	690b      	ldr	r3, [r1, #16]
 800cd44:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800cd48:	4293      	cmp	r3, r2
 800cd4a:	bfb8      	it	lt
 800cd4c:	4613      	movlt	r3, r2
 800cd4e:	6033      	str	r3, [r6, #0]
 800cd50:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800cd54:	4607      	mov	r7, r0
 800cd56:	460c      	mov	r4, r1
 800cd58:	b10a      	cbz	r2, 800cd5e <_printf_common+0x26>
 800cd5a:	3301      	adds	r3, #1
 800cd5c:	6033      	str	r3, [r6, #0]
 800cd5e:	6823      	ldr	r3, [r4, #0]
 800cd60:	0699      	lsls	r1, r3, #26
 800cd62:	bf42      	ittt	mi
 800cd64:	6833      	ldrmi	r3, [r6, #0]
 800cd66:	3302      	addmi	r3, #2
 800cd68:	6033      	strmi	r3, [r6, #0]
 800cd6a:	6825      	ldr	r5, [r4, #0]
 800cd6c:	f015 0506 	ands.w	r5, r5, #6
 800cd70:	d106      	bne.n	800cd80 <_printf_common+0x48>
 800cd72:	f104 0a19 	add.w	sl, r4, #25
 800cd76:	68e3      	ldr	r3, [r4, #12]
 800cd78:	6832      	ldr	r2, [r6, #0]
 800cd7a:	1a9b      	subs	r3, r3, r2
 800cd7c:	42ab      	cmp	r3, r5
 800cd7e:	dc26      	bgt.n	800cdce <_printf_common+0x96>
 800cd80:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800cd84:	6822      	ldr	r2, [r4, #0]
 800cd86:	3b00      	subs	r3, #0
 800cd88:	bf18      	it	ne
 800cd8a:	2301      	movne	r3, #1
 800cd8c:	0692      	lsls	r2, r2, #26
 800cd8e:	d42b      	bmi.n	800cde8 <_printf_common+0xb0>
 800cd90:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800cd94:	4641      	mov	r1, r8
 800cd96:	4638      	mov	r0, r7
 800cd98:	47c8      	blx	r9
 800cd9a:	3001      	adds	r0, #1
 800cd9c:	d01e      	beq.n	800cddc <_printf_common+0xa4>
 800cd9e:	6823      	ldr	r3, [r4, #0]
 800cda0:	6922      	ldr	r2, [r4, #16]
 800cda2:	f003 0306 	and.w	r3, r3, #6
 800cda6:	2b04      	cmp	r3, #4
 800cda8:	bf02      	ittt	eq
 800cdaa:	68e5      	ldreq	r5, [r4, #12]
 800cdac:	6833      	ldreq	r3, [r6, #0]
 800cdae:	1aed      	subeq	r5, r5, r3
 800cdb0:	68a3      	ldr	r3, [r4, #8]
 800cdb2:	bf0c      	ite	eq
 800cdb4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cdb8:	2500      	movne	r5, #0
 800cdba:	4293      	cmp	r3, r2
 800cdbc:	bfc4      	itt	gt
 800cdbe:	1a9b      	subgt	r3, r3, r2
 800cdc0:	18ed      	addgt	r5, r5, r3
 800cdc2:	2600      	movs	r6, #0
 800cdc4:	341a      	adds	r4, #26
 800cdc6:	42b5      	cmp	r5, r6
 800cdc8:	d11a      	bne.n	800ce00 <_printf_common+0xc8>
 800cdca:	2000      	movs	r0, #0
 800cdcc:	e008      	b.n	800cde0 <_printf_common+0xa8>
 800cdce:	2301      	movs	r3, #1
 800cdd0:	4652      	mov	r2, sl
 800cdd2:	4641      	mov	r1, r8
 800cdd4:	4638      	mov	r0, r7
 800cdd6:	47c8      	blx	r9
 800cdd8:	3001      	adds	r0, #1
 800cdda:	d103      	bne.n	800cde4 <_printf_common+0xac>
 800cddc:	f04f 30ff 	mov.w	r0, #4294967295
 800cde0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cde4:	3501      	adds	r5, #1
 800cde6:	e7c6      	b.n	800cd76 <_printf_common+0x3e>
 800cde8:	18e1      	adds	r1, r4, r3
 800cdea:	1c5a      	adds	r2, r3, #1
 800cdec:	2030      	movs	r0, #48	@ 0x30
 800cdee:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800cdf2:	4422      	add	r2, r4
 800cdf4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800cdf8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800cdfc:	3302      	adds	r3, #2
 800cdfe:	e7c7      	b.n	800cd90 <_printf_common+0x58>
 800ce00:	2301      	movs	r3, #1
 800ce02:	4622      	mov	r2, r4
 800ce04:	4641      	mov	r1, r8
 800ce06:	4638      	mov	r0, r7
 800ce08:	47c8      	blx	r9
 800ce0a:	3001      	adds	r0, #1
 800ce0c:	d0e6      	beq.n	800cddc <_printf_common+0xa4>
 800ce0e:	3601      	adds	r6, #1
 800ce10:	e7d9      	b.n	800cdc6 <_printf_common+0x8e>
	...

0800ce14 <_printf_i>:
 800ce14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ce18:	7e0f      	ldrb	r7, [r1, #24]
 800ce1a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ce1c:	2f78      	cmp	r7, #120	@ 0x78
 800ce1e:	4691      	mov	r9, r2
 800ce20:	4680      	mov	r8, r0
 800ce22:	460c      	mov	r4, r1
 800ce24:	469a      	mov	sl, r3
 800ce26:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ce2a:	d807      	bhi.n	800ce3c <_printf_i+0x28>
 800ce2c:	2f62      	cmp	r7, #98	@ 0x62
 800ce2e:	d80a      	bhi.n	800ce46 <_printf_i+0x32>
 800ce30:	2f00      	cmp	r7, #0
 800ce32:	f000 80d2 	beq.w	800cfda <_printf_i+0x1c6>
 800ce36:	2f58      	cmp	r7, #88	@ 0x58
 800ce38:	f000 80b9 	beq.w	800cfae <_printf_i+0x19a>
 800ce3c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ce40:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ce44:	e03a      	b.n	800cebc <_printf_i+0xa8>
 800ce46:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ce4a:	2b15      	cmp	r3, #21
 800ce4c:	d8f6      	bhi.n	800ce3c <_printf_i+0x28>
 800ce4e:	a101      	add	r1, pc, #4	@ (adr r1, 800ce54 <_printf_i+0x40>)
 800ce50:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ce54:	0800cead 	.word	0x0800cead
 800ce58:	0800cec1 	.word	0x0800cec1
 800ce5c:	0800ce3d 	.word	0x0800ce3d
 800ce60:	0800ce3d 	.word	0x0800ce3d
 800ce64:	0800ce3d 	.word	0x0800ce3d
 800ce68:	0800ce3d 	.word	0x0800ce3d
 800ce6c:	0800cec1 	.word	0x0800cec1
 800ce70:	0800ce3d 	.word	0x0800ce3d
 800ce74:	0800ce3d 	.word	0x0800ce3d
 800ce78:	0800ce3d 	.word	0x0800ce3d
 800ce7c:	0800ce3d 	.word	0x0800ce3d
 800ce80:	0800cfc1 	.word	0x0800cfc1
 800ce84:	0800ceeb 	.word	0x0800ceeb
 800ce88:	0800cf7b 	.word	0x0800cf7b
 800ce8c:	0800ce3d 	.word	0x0800ce3d
 800ce90:	0800ce3d 	.word	0x0800ce3d
 800ce94:	0800cfe3 	.word	0x0800cfe3
 800ce98:	0800ce3d 	.word	0x0800ce3d
 800ce9c:	0800ceeb 	.word	0x0800ceeb
 800cea0:	0800ce3d 	.word	0x0800ce3d
 800cea4:	0800ce3d 	.word	0x0800ce3d
 800cea8:	0800cf83 	.word	0x0800cf83
 800ceac:	6833      	ldr	r3, [r6, #0]
 800ceae:	1d1a      	adds	r2, r3, #4
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	6032      	str	r2, [r6, #0]
 800ceb4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ceb8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800cebc:	2301      	movs	r3, #1
 800cebe:	e09d      	b.n	800cffc <_printf_i+0x1e8>
 800cec0:	6833      	ldr	r3, [r6, #0]
 800cec2:	6820      	ldr	r0, [r4, #0]
 800cec4:	1d19      	adds	r1, r3, #4
 800cec6:	6031      	str	r1, [r6, #0]
 800cec8:	0606      	lsls	r6, r0, #24
 800ceca:	d501      	bpl.n	800ced0 <_printf_i+0xbc>
 800cecc:	681d      	ldr	r5, [r3, #0]
 800cece:	e003      	b.n	800ced8 <_printf_i+0xc4>
 800ced0:	0645      	lsls	r5, r0, #25
 800ced2:	d5fb      	bpl.n	800cecc <_printf_i+0xb8>
 800ced4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ced8:	2d00      	cmp	r5, #0
 800ceda:	da03      	bge.n	800cee4 <_printf_i+0xd0>
 800cedc:	232d      	movs	r3, #45	@ 0x2d
 800cede:	426d      	negs	r5, r5
 800cee0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cee4:	4859      	ldr	r0, [pc, #356]	@ (800d04c <_printf_i+0x238>)
 800cee6:	230a      	movs	r3, #10
 800cee8:	e011      	b.n	800cf0e <_printf_i+0xfa>
 800ceea:	6821      	ldr	r1, [r4, #0]
 800ceec:	6833      	ldr	r3, [r6, #0]
 800ceee:	0608      	lsls	r0, r1, #24
 800cef0:	f853 5b04 	ldr.w	r5, [r3], #4
 800cef4:	d402      	bmi.n	800cefc <_printf_i+0xe8>
 800cef6:	0649      	lsls	r1, r1, #25
 800cef8:	bf48      	it	mi
 800cefa:	b2ad      	uxthmi	r5, r5
 800cefc:	2f6f      	cmp	r7, #111	@ 0x6f
 800cefe:	4853      	ldr	r0, [pc, #332]	@ (800d04c <_printf_i+0x238>)
 800cf00:	6033      	str	r3, [r6, #0]
 800cf02:	bf14      	ite	ne
 800cf04:	230a      	movne	r3, #10
 800cf06:	2308      	moveq	r3, #8
 800cf08:	2100      	movs	r1, #0
 800cf0a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800cf0e:	6866      	ldr	r6, [r4, #4]
 800cf10:	60a6      	str	r6, [r4, #8]
 800cf12:	2e00      	cmp	r6, #0
 800cf14:	bfa2      	ittt	ge
 800cf16:	6821      	ldrge	r1, [r4, #0]
 800cf18:	f021 0104 	bicge.w	r1, r1, #4
 800cf1c:	6021      	strge	r1, [r4, #0]
 800cf1e:	b90d      	cbnz	r5, 800cf24 <_printf_i+0x110>
 800cf20:	2e00      	cmp	r6, #0
 800cf22:	d04b      	beq.n	800cfbc <_printf_i+0x1a8>
 800cf24:	4616      	mov	r6, r2
 800cf26:	fbb5 f1f3 	udiv	r1, r5, r3
 800cf2a:	fb03 5711 	mls	r7, r3, r1, r5
 800cf2e:	5dc7      	ldrb	r7, [r0, r7]
 800cf30:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800cf34:	462f      	mov	r7, r5
 800cf36:	42bb      	cmp	r3, r7
 800cf38:	460d      	mov	r5, r1
 800cf3a:	d9f4      	bls.n	800cf26 <_printf_i+0x112>
 800cf3c:	2b08      	cmp	r3, #8
 800cf3e:	d10b      	bne.n	800cf58 <_printf_i+0x144>
 800cf40:	6823      	ldr	r3, [r4, #0]
 800cf42:	07df      	lsls	r7, r3, #31
 800cf44:	d508      	bpl.n	800cf58 <_printf_i+0x144>
 800cf46:	6923      	ldr	r3, [r4, #16]
 800cf48:	6861      	ldr	r1, [r4, #4]
 800cf4a:	4299      	cmp	r1, r3
 800cf4c:	bfde      	ittt	le
 800cf4e:	2330      	movle	r3, #48	@ 0x30
 800cf50:	f806 3c01 	strble.w	r3, [r6, #-1]
 800cf54:	f106 36ff 	addle.w	r6, r6, #4294967295
 800cf58:	1b92      	subs	r2, r2, r6
 800cf5a:	6122      	str	r2, [r4, #16]
 800cf5c:	f8cd a000 	str.w	sl, [sp]
 800cf60:	464b      	mov	r3, r9
 800cf62:	aa03      	add	r2, sp, #12
 800cf64:	4621      	mov	r1, r4
 800cf66:	4640      	mov	r0, r8
 800cf68:	f7ff fee6 	bl	800cd38 <_printf_common>
 800cf6c:	3001      	adds	r0, #1
 800cf6e:	d14a      	bne.n	800d006 <_printf_i+0x1f2>
 800cf70:	f04f 30ff 	mov.w	r0, #4294967295
 800cf74:	b004      	add	sp, #16
 800cf76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf7a:	6823      	ldr	r3, [r4, #0]
 800cf7c:	f043 0320 	orr.w	r3, r3, #32
 800cf80:	6023      	str	r3, [r4, #0]
 800cf82:	4833      	ldr	r0, [pc, #204]	@ (800d050 <_printf_i+0x23c>)
 800cf84:	2778      	movs	r7, #120	@ 0x78
 800cf86:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800cf8a:	6823      	ldr	r3, [r4, #0]
 800cf8c:	6831      	ldr	r1, [r6, #0]
 800cf8e:	061f      	lsls	r7, r3, #24
 800cf90:	f851 5b04 	ldr.w	r5, [r1], #4
 800cf94:	d402      	bmi.n	800cf9c <_printf_i+0x188>
 800cf96:	065f      	lsls	r7, r3, #25
 800cf98:	bf48      	it	mi
 800cf9a:	b2ad      	uxthmi	r5, r5
 800cf9c:	6031      	str	r1, [r6, #0]
 800cf9e:	07d9      	lsls	r1, r3, #31
 800cfa0:	bf44      	itt	mi
 800cfa2:	f043 0320 	orrmi.w	r3, r3, #32
 800cfa6:	6023      	strmi	r3, [r4, #0]
 800cfa8:	b11d      	cbz	r5, 800cfb2 <_printf_i+0x19e>
 800cfaa:	2310      	movs	r3, #16
 800cfac:	e7ac      	b.n	800cf08 <_printf_i+0xf4>
 800cfae:	4827      	ldr	r0, [pc, #156]	@ (800d04c <_printf_i+0x238>)
 800cfb0:	e7e9      	b.n	800cf86 <_printf_i+0x172>
 800cfb2:	6823      	ldr	r3, [r4, #0]
 800cfb4:	f023 0320 	bic.w	r3, r3, #32
 800cfb8:	6023      	str	r3, [r4, #0]
 800cfba:	e7f6      	b.n	800cfaa <_printf_i+0x196>
 800cfbc:	4616      	mov	r6, r2
 800cfbe:	e7bd      	b.n	800cf3c <_printf_i+0x128>
 800cfc0:	6833      	ldr	r3, [r6, #0]
 800cfc2:	6825      	ldr	r5, [r4, #0]
 800cfc4:	6961      	ldr	r1, [r4, #20]
 800cfc6:	1d18      	adds	r0, r3, #4
 800cfc8:	6030      	str	r0, [r6, #0]
 800cfca:	062e      	lsls	r6, r5, #24
 800cfcc:	681b      	ldr	r3, [r3, #0]
 800cfce:	d501      	bpl.n	800cfd4 <_printf_i+0x1c0>
 800cfd0:	6019      	str	r1, [r3, #0]
 800cfd2:	e002      	b.n	800cfda <_printf_i+0x1c6>
 800cfd4:	0668      	lsls	r0, r5, #25
 800cfd6:	d5fb      	bpl.n	800cfd0 <_printf_i+0x1bc>
 800cfd8:	8019      	strh	r1, [r3, #0]
 800cfda:	2300      	movs	r3, #0
 800cfdc:	6123      	str	r3, [r4, #16]
 800cfde:	4616      	mov	r6, r2
 800cfe0:	e7bc      	b.n	800cf5c <_printf_i+0x148>
 800cfe2:	6833      	ldr	r3, [r6, #0]
 800cfe4:	1d1a      	adds	r2, r3, #4
 800cfe6:	6032      	str	r2, [r6, #0]
 800cfe8:	681e      	ldr	r6, [r3, #0]
 800cfea:	6862      	ldr	r2, [r4, #4]
 800cfec:	2100      	movs	r1, #0
 800cfee:	4630      	mov	r0, r6
 800cff0:	f7f3 f916 	bl	8000220 <memchr>
 800cff4:	b108      	cbz	r0, 800cffa <_printf_i+0x1e6>
 800cff6:	1b80      	subs	r0, r0, r6
 800cff8:	6060      	str	r0, [r4, #4]
 800cffa:	6863      	ldr	r3, [r4, #4]
 800cffc:	6123      	str	r3, [r4, #16]
 800cffe:	2300      	movs	r3, #0
 800d000:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d004:	e7aa      	b.n	800cf5c <_printf_i+0x148>
 800d006:	6923      	ldr	r3, [r4, #16]
 800d008:	4632      	mov	r2, r6
 800d00a:	4649      	mov	r1, r9
 800d00c:	4640      	mov	r0, r8
 800d00e:	47d0      	blx	sl
 800d010:	3001      	adds	r0, #1
 800d012:	d0ad      	beq.n	800cf70 <_printf_i+0x15c>
 800d014:	6823      	ldr	r3, [r4, #0]
 800d016:	079b      	lsls	r3, r3, #30
 800d018:	d413      	bmi.n	800d042 <_printf_i+0x22e>
 800d01a:	68e0      	ldr	r0, [r4, #12]
 800d01c:	9b03      	ldr	r3, [sp, #12]
 800d01e:	4298      	cmp	r0, r3
 800d020:	bfb8      	it	lt
 800d022:	4618      	movlt	r0, r3
 800d024:	e7a6      	b.n	800cf74 <_printf_i+0x160>
 800d026:	2301      	movs	r3, #1
 800d028:	4632      	mov	r2, r6
 800d02a:	4649      	mov	r1, r9
 800d02c:	4640      	mov	r0, r8
 800d02e:	47d0      	blx	sl
 800d030:	3001      	adds	r0, #1
 800d032:	d09d      	beq.n	800cf70 <_printf_i+0x15c>
 800d034:	3501      	adds	r5, #1
 800d036:	68e3      	ldr	r3, [r4, #12]
 800d038:	9903      	ldr	r1, [sp, #12]
 800d03a:	1a5b      	subs	r3, r3, r1
 800d03c:	42ab      	cmp	r3, r5
 800d03e:	dcf2      	bgt.n	800d026 <_printf_i+0x212>
 800d040:	e7eb      	b.n	800d01a <_printf_i+0x206>
 800d042:	2500      	movs	r5, #0
 800d044:	f104 0619 	add.w	r6, r4, #25
 800d048:	e7f5      	b.n	800d036 <_printf_i+0x222>
 800d04a:	bf00      	nop
 800d04c:	0800d5b9 	.word	0x0800d5b9
 800d050:	0800d5ca 	.word	0x0800d5ca

0800d054 <__sflush_r>:
 800d054:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d058:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d05c:	0716      	lsls	r6, r2, #28
 800d05e:	4605      	mov	r5, r0
 800d060:	460c      	mov	r4, r1
 800d062:	d454      	bmi.n	800d10e <__sflush_r+0xba>
 800d064:	684b      	ldr	r3, [r1, #4]
 800d066:	2b00      	cmp	r3, #0
 800d068:	dc02      	bgt.n	800d070 <__sflush_r+0x1c>
 800d06a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	dd48      	ble.n	800d102 <__sflush_r+0xae>
 800d070:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d072:	2e00      	cmp	r6, #0
 800d074:	d045      	beq.n	800d102 <__sflush_r+0xae>
 800d076:	2300      	movs	r3, #0
 800d078:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d07c:	682f      	ldr	r7, [r5, #0]
 800d07e:	6a21      	ldr	r1, [r4, #32]
 800d080:	602b      	str	r3, [r5, #0]
 800d082:	d030      	beq.n	800d0e6 <__sflush_r+0x92>
 800d084:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d086:	89a3      	ldrh	r3, [r4, #12]
 800d088:	0759      	lsls	r1, r3, #29
 800d08a:	d505      	bpl.n	800d098 <__sflush_r+0x44>
 800d08c:	6863      	ldr	r3, [r4, #4]
 800d08e:	1ad2      	subs	r2, r2, r3
 800d090:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d092:	b10b      	cbz	r3, 800d098 <__sflush_r+0x44>
 800d094:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d096:	1ad2      	subs	r2, r2, r3
 800d098:	2300      	movs	r3, #0
 800d09a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d09c:	6a21      	ldr	r1, [r4, #32]
 800d09e:	4628      	mov	r0, r5
 800d0a0:	47b0      	blx	r6
 800d0a2:	1c43      	adds	r3, r0, #1
 800d0a4:	89a3      	ldrh	r3, [r4, #12]
 800d0a6:	d106      	bne.n	800d0b6 <__sflush_r+0x62>
 800d0a8:	6829      	ldr	r1, [r5, #0]
 800d0aa:	291d      	cmp	r1, #29
 800d0ac:	d82b      	bhi.n	800d106 <__sflush_r+0xb2>
 800d0ae:	4a2a      	ldr	r2, [pc, #168]	@ (800d158 <__sflush_r+0x104>)
 800d0b0:	410a      	asrs	r2, r1
 800d0b2:	07d6      	lsls	r6, r2, #31
 800d0b4:	d427      	bmi.n	800d106 <__sflush_r+0xb2>
 800d0b6:	2200      	movs	r2, #0
 800d0b8:	6062      	str	r2, [r4, #4]
 800d0ba:	04d9      	lsls	r1, r3, #19
 800d0bc:	6922      	ldr	r2, [r4, #16]
 800d0be:	6022      	str	r2, [r4, #0]
 800d0c0:	d504      	bpl.n	800d0cc <__sflush_r+0x78>
 800d0c2:	1c42      	adds	r2, r0, #1
 800d0c4:	d101      	bne.n	800d0ca <__sflush_r+0x76>
 800d0c6:	682b      	ldr	r3, [r5, #0]
 800d0c8:	b903      	cbnz	r3, 800d0cc <__sflush_r+0x78>
 800d0ca:	6560      	str	r0, [r4, #84]	@ 0x54
 800d0cc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d0ce:	602f      	str	r7, [r5, #0]
 800d0d0:	b1b9      	cbz	r1, 800d102 <__sflush_r+0xae>
 800d0d2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d0d6:	4299      	cmp	r1, r3
 800d0d8:	d002      	beq.n	800d0e0 <__sflush_r+0x8c>
 800d0da:	4628      	mov	r0, r5
 800d0dc:	f7ff fbf2 	bl	800c8c4 <_free_r>
 800d0e0:	2300      	movs	r3, #0
 800d0e2:	6363      	str	r3, [r4, #52]	@ 0x34
 800d0e4:	e00d      	b.n	800d102 <__sflush_r+0xae>
 800d0e6:	2301      	movs	r3, #1
 800d0e8:	4628      	mov	r0, r5
 800d0ea:	47b0      	blx	r6
 800d0ec:	4602      	mov	r2, r0
 800d0ee:	1c50      	adds	r0, r2, #1
 800d0f0:	d1c9      	bne.n	800d086 <__sflush_r+0x32>
 800d0f2:	682b      	ldr	r3, [r5, #0]
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	d0c6      	beq.n	800d086 <__sflush_r+0x32>
 800d0f8:	2b1d      	cmp	r3, #29
 800d0fa:	d001      	beq.n	800d100 <__sflush_r+0xac>
 800d0fc:	2b16      	cmp	r3, #22
 800d0fe:	d11e      	bne.n	800d13e <__sflush_r+0xea>
 800d100:	602f      	str	r7, [r5, #0]
 800d102:	2000      	movs	r0, #0
 800d104:	e022      	b.n	800d14c <__sflush_r+0xf8>
 800d106:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d10a:	b21b      	sxth	r3, r3
 800d10c:	e01b      	b.n	800d146 <__sflush_r+0xf2>
 800d10e:	690f      	ldr	r7, [r1, #16]
 800d110:	2f00      	cmp	r7, #0
 800d112:	d0f6      	beq.n	800d102 <__sflush_r+0xae>
 800d114:	0793      	lsls	r3, r2, #30
 800d116:	680e      	ldr	r6, [r1, #0]
 800d118:	bf08      	it	eq
 800d11a:	694b      	ldreq	r3, [r1, #20]
 800d11c:	600f      	str	r7, [r1, #0]
 800d11e:	bf18      	it	ne
 800d120:	2300      	movne	r3, #0
 800d122:	eba6 0807 	sub.w	r8, r6, r7
 800d126:	608b      	str	r3, [r1, #8]
 800d128:	f1b8 0f00 	cmp.w	r8, #0
 800d12c:	dde9      	ble.n	800d102 <__sflush_r+0xae>
 800d12e:	6a21      	ldr	r1, [r4, #32]
 800d130:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d132:	4643      	mov	r3, r8
 800d134:	463a      	mov	r2, r7
 800d136:	4628      	mov	r0, r5
 800d138:	47b0      	blx	r6
 800d13a:	2800      	cmp	r0, #0
 800d13c:	dc08      	bgt.n	800d150 <__sflush_r+0xfc>
 800d13e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d142:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d146:	81a3      	strh	r3, [r4, #12]
 800d148:	f04f 30ff 	mov.w	r0, #4294967295
 800d14c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d150:	4407      	add	r7, r0
 800d152:	eba8 0800 	sub.w	r8, r8, r0
 800d156:	e7e7      	b.n	800d128 <__sflush_r+0xd4>
 800d158:	dfbffffe 	.word	0xdfbffffe

0800d15c <_fflush_r>:
 800d15c:	b538      	push	{r3, r4, r5, lr}
 800d15e:	690b      	ldr	r3, [r1, #16]
 800d160:	4605      	mov	r5, r0
 800d162:	460c      	mov	r4, r1
 800d164:	b913      	cbnz	r3, 800d16c <_fflush_r+0x10>
 800d166:	2500      	movs	r5, #0
 800d168:	4628      	mov	r0, r5
 800d16a:	bd38      	pop	{r3, r4, r5, pc}
 800d16c:	b118      	cbz	r0, 800d176 <_fflush_r+0x1a>
 800d16e:	6a03      	ldr	r3, [r0, #32]
 800d170:	b90b      	cbnz	r3, 800d176 <_fflush_r+0x1a>
 800d172:	f7ff f99f 	bl	800c4b4 <__sinit>
 800d176:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d17a:	2b00      	cmp	r3, #0
 800d17c:	d0f3      	beq.n	800d166 <_fflush_r+0xa>
 800d17e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d180:	07d0      	lsls	r0, r2, #31
 800d182:	d404      	bmi.n	800d18e <_fflush_r+0x32>
 800d184:	0599      	lsls	r1, r3, #22
 800d186:	d402      	bmi.n	800d18e <_fflush_r+0x32>
 800d188:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d18a:	f7ff fb8a 	bl	800c8a2 <__retarget_lock_acquire_recursive>
 800d18e:	4628      	mov	r0, r5
 800d190:	4621      	mov	r1, r4
 800d192:	f7ff ff5f 	bl	800d054 <__sflush_r>
 800d196:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d198:	07da      	lsls	r2, r3, #31
 800d19a:	4605      	mov	r5, r0
 800d19c:	d4e4      	bmi.n	800d168 <_fflush_r+0xc>
 800d19e:	89a3      	ldrh	r3, [r4, #12]
 800d1a0:	059b      	lsls	r3, r3, #22
 800d1a2:	d4e1      	bmi.n	800d168 <_fflush_r+0xc>
 800d1a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d1a6:	f7ff fb7d 	bl	800c8a4 <__retarget_lock_release_recursive>
 800d1aa:	e7dd      	b.n	800d168 <_fflush_r+0xc>

0800d1ac <__swhatbuf_r>:
 800d1ac:	b570      	push	{r4, r5, r6, lr}
 800d1ae:	460c      	mov	r4, r1
 800d1b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d1b4:	2900      	cmp	r1, #0
 800d1b6:	b096      	sub	sp, #88	@ 0x58
 800d1b8:	4615      	mov	r5, r2
 800d1ba:	461e      	mov	r6, r3
 800d1bc:	da0d      	bge.n	800d1da <__swhatbuf_r+0x2e>
 800d1be:	89a3      	ldrh	r3, [r4, #12]
 800d1c0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d1c4:	f04f 0100 	mov.w	r1, #0
 800d1c8:	bf14      	ite	ne
 800d1ca:	2340      	movne	r3, #64	@ 0x40
 800d1cc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d1d0:	2000      	movs	r0, #0
 800d1d2:	6031      	str	r1, [r6, #0]
 800d1d4:	602b      	str	r3, [r5, #0]
 800d1d6:	b016      	add	sp, #88	@ 0x58
 800d1d8:	bd70      	pop	{r4, r5, r6, pc}
 800d1da:	466a      	mov	r2, sp
 800d1dc:	f000 f848 	bl	800d270 <_fstat_r>
 800d1e0:	2800      	cmp	r0, #0
 800d1e2:	dbec      	blt.n	800d1be <__swhatbuf_r+0x12>
 800d1e4:	9901      	ldr	r1, [sp, #4]
 800d1e6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d1ea:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d1ee:	4259      	negs	r1, r3
 800d1f0:	4159      	adcs	r1, r3
 800d1f2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d1f6:	e7eb      	b.n	800d1d0 <__swhatbuf_r+0x24>

0800d1f8 <__smakebuf_r>:
 800d1f8:	898b      	ldrh	r3, [r1, #12]
 800d1fa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d1fc:	079d      	lsls	r5, r3, #30
 800d1fe:	4606      	mov	r6, r0
 800d200:	460c      	mov	r4, r1
 800d202:	d507      	bpl.n	800d214 <__smakebuf_r+0x1c>
 800d204:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d208:	6023      	str	r3, [r4, #0]
 800d20a:	6123      	str	r3, [r4, #16]
 800d20c:	2301      	movs	r3, #1
 800d20e:	6163      	str	r3, [r4, #20]
 800d210:	b003      	add	sp, #12
 800d212:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d214:	ab01      	add	r3, sp, #4
 800d216:	466a      	mov	r2, sp
 800d218:	f7ff ffc8 	bl	800d1ac <__swhatbuf_r>
 800d21c:	9f00      	ldr	r7, [sp, #0]
 800d21e:	4605      	mov	r5, r0
 800d220:	4639      	mov	r1, r7
 800d222:	4630      	mov	r0, r6
 800d224:	f7ff fbba 	bl	800c99c <_malloc_r>
 800d228:	b948      	cbnz	r0, 800d23e <__smakebuf_r+0x46>
 800d22a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d22e:	059a      	lsls	r2, r3, #22
 800d230:	d4ee      	bmi.n	800d210 <__smakebuf_r+0x18>
 800d232:	f023 0303 	bic.w	r3, r3, #3
 800d236:	f043 0302 	orr.w	r3, r3, #2
 800d23a:	81a3      	strh	r3, [r4, #12]
 800d23c:	e7e2      	b.n	800d204 <__smakebuf_r+0xc>
 800d23e:	89a3      	ldrh	r3, [r4, #12]
 800d240:	6020      	str	r0, [r4, #0]
 800d242:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d246:	81a3      	strh	r3, [r4, #12]
 800d248:	9b01      	ldr	r3, [sp, #4]
 800d24a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d24e:	b15b      	cbz	r3, 800d268 <__smakebuf_r+0x70>
 800d250:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d254:	4630      	mov	r0, r6
 800d256:	f000 f81d 	bl	800d294 <_isatty_r>
 800d25a:	b128      	cbz	r0, 800d268 <__smakebuf_r+0x70>
 800d25c:	89a3      	ldrh	r3, [r4, #12]
 800d25e:	f023 0303 	bic.w	r3, r3, #3
 800d262:	f043 0301 	orr.w	r3, r3, #1
 800d266:	81a3      	strh	r3, [r4, #12]
 800d268:	89a3      	ldrh	r3, [r4, #12]
 800d26a:	431d      	orrs	r5, r3
 800d26c:	81a5      	strh	r5, [r4, #12]
 800d26e:	e7cf      	b.n	800d210 <__smakebuf_r+0x18>

0800d270 <_fstat_r>:
 800d270:	b538      	push	{r3, r4, r5, lr}
 800d272:	4d07      	ldr	r5, [pc, #28]	@ (800d290 <_fstat_r+0x20>)
 800d274:	2300      	movs	r3, #0
 800d276:	4604      	mov	r4, r0
 800d278:	4608      	mov	r0, r1
 800d27a:	4611      	mov	r1, r2
 800d27c:	602b      	str	r3, [r5, #0]
 800d27e:	f7f4 fed0 	bl	8002022 <_fstat>
 800d282:	1c43      	adds	r3, r0, #1
 800d284:	d102      	bne.n	800d28c <_fstat_r+0x1c>
 800d286:	682b      	ldr	r3, [r5, #0]
 800d288:	b103      	cbz	r3, 800d28c <_fstat_r+0x1c>
 800d28a:	6023      	str	r3, [r4, #0]
 800d28c:	bd38      	pop	{r3, r4, r5, pc}
 800d28e:	bf00      	nop
 800d290:	20000fc4 	.word	0x20000fc4

0800d294 <_isatty_r>:
 800d294:	b538      	push	{r3, r4, r5, lr}
 800d296:	4d06      	ldr	r5, [pc, #24]	@ (800d2b0 <_isatty_r+0x1c>)
 800d298:	2300      	movs	r3, #0
 800d29a:	4604      	mov	r4, r0
 800d29c:	4608      	mov	r0, r1
 800d29e:	602b      	str	r3, [r5, #0]
 800d2a0:	f7f4 fecf 	bl	8002042 <_isatty>
 800d2a4:	1c43      	adds	r3, r0, #1
 800d2a6:	d102      	bne.n	800d2ae <_isatty_r+0x1a>
 800d2a8:	682b      	ldr	r3, [r5, #0]
 800d2aa:	b103      	cbz	r3, 800d2ae <_isatty_r+0x1a>
 800d2ac:	6023      	str	r3, [r4, #0]
 800d2ae:	bd38      	pop	{r3, r4, r5, pc}
 800d2b0:	20000fc4 	.word	0x20000fc4

0800d2b4 <_sbrk_r>:
 800d2b4:	b538      	push	{r3, r4, r5, lr}
 800d2b6:	4d06      	ldr	r5, [pc, #24]	@ (800d2d0 <_sbrk_r+0x1c>)
 800d2b8:	2300      	movs	r3, #0
 800d2ba:	4604      	mov	r4, r0
 800d2bc:	4608      	mov	r0, r1
 800d2be:	602b      	str	r3, [r5, #0]
 800d2c0:	f7f4 fed8 	bl	8002074 <_sbrk>
 800d2c4:	1c43      	adds	r3, r0, #1
 800d2c6:	d102      	bne.n	800d2ce <_sbrk_r+0x1a>
 800d2c8:	682b      	ldr	r3, [r5, #0]
 800d2ca:	b103      	cbz	r3, 800d2ce <_sbrk_r+0x1a>
 800d2cc:	6023      	str	r3, [r4, #0]
 800d2ce:	bd38      	pop	{r3, r4, r5, pc}
 800d2d0:	20000fc4 	.word	0x20000fc4

0800d2d4 <_init>:
 800d2d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d2d6:	bf00      	nop
 800d2d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d2da:	bc08      	pop	{r3}
 800d2dc:	469e      	mov	lr, r3
 800d2de:	4770      	bx	lr

0800d2e0 <_fini>:
 800d2e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d2e2:	bf00      	nop
 800d2e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d2e6:	bc08      	pop	{r3}
 800d2e8:	469e      	mov	lr, r3
 800d2ea:	4770      	bx	lr
