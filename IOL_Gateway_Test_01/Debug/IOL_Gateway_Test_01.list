
IOL_Gateway_Test_01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c268  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000027c  0800c448  0800c448  0000d448  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c6c4  0800c6c4  0000e1f0  2**0
                  CONTENTS
  4 .ARM          00000008  0800c6c4  0800c6c4  0000d6c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c6cc  0800c6cc  0000e1f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c6cc  0800c6cc  0000d6cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c6d0  0800c6d0  0000d6d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f0  20000000  0800c6d4  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001cd8  200001f0  0800c8c4  0000e1f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001ec8  0800c8c4  0000eec8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e1f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001fc2d  00000000  00000000  0000e220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004d80  00000000  00000000  0002de4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001988  00000000  00000000  00032bd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000137e  00000000  00000000  00034558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00006fd1  00000000  00000000  000358d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000224c0  00000000  00000000  0003c8a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cd967  00000000  00000000  0005ed67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012c6ce  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000070f0  00000000  00000000  0012c714  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  00133804  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001f0 	.word	0x200001f0
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800c430 	.word	0x0800c430

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001f4 	.word	0x200001f4
 800021c:	0800c430 	.word	0x0800c430

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80005b6:	4b12      	ldr	r3, [pc, #72]	@ (8000600 <MX_DMA_Init+0x50>)
 80005b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80005ba:	4a11      	ldr	r2, [pc, #68]	@ (8000600 <MX_DMA_Init+0x50>)
 80005bc:	f043 0304 	orr.w	r3, r3, #4
 80005c0:	6493      	str	r3, [r2, #72]	@ 0x48
 80005c2:	4b0f      	ldr	r3, [pc, #60]	@ (8000600 <MX_DMA_Init+0x50>)
 80005c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80005c6:	f003 0304 	and.w	r3, r3, #4
 80005ca:	607b      	str	r3, [r7, #4]
 80005cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005ce:	4b0c      	ldr	r3, [pc, #48]	@ (8000600 <MX_DMA_Init+0x50>)
 80005d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80005d2:	4a0b      	ldr	r2, [pc, #44]	@ (8000600 <MX_DMA_Init+0x50>)
 80005d4:	f043 0301 	orr.w	r3, r3, #1
 80005d8:	6493      	str	r3, [r2, #72]	@ 0x48
 80005da:	4b09      	ldr	r3, [pc, #36]	@ (8000600 <MX_DMA_Init+0x50>)
 80005dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80005de:	f003 0301 	and.w	r3, r3, #1
 80005e2:	603b      	str	r3, [r7, #0]
 80005e4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80005e6:	2200      	movs	r2, #0
 80005e8:	2100      	movs	r1, #0
 80005ea:	200b      	movs	r0, #11
 80005ec:	f001 f8af 	bl	800174e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80005f0:	200b      	movs	r0, #11
 80005f2:	f001 f8c6 	bl	8001782 <HAL_NVIC_EnableIRQ>

}
 80005f6:	bf00      	nop
 80005f8:	3708      	adds	r7, #8
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	40021000 	.word	0x40021000

08000604 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b088      	sub	sp, #32
 8000608:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800060a:	f107 030c 	add.w	r3, r7, #12
 800060e:	2200      	movs	r2, #0
 8000610:	601a      	str	r2, [r3, #0]
 8000612:	605a      	str	r2, [r3, #4]
 8000614:	609a      	str	r2, [r3, #8]
 8000616:	60da      	str	r2, [r3, #12]
 8000618:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800061a:	4b34      	ldr	r3, [pc, #208]	@ (80006ec <MX_GPIO_Init+0xe8>)
 800061c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800061e:	4a33      	ldr	r2, [pc, #204]	@ (80006ec <MX_GPIO_Init+0xe8>)
 8000620:	f043 0304 	orr.w	r3, r3, #4
 8000624:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000626:	4b31      	ldr	r3, [pc, #196]	@ (80006ec <MX_GPIO_Init+0xe8>)
 8000628:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800062a:	f003 0304 	and.w	r3, r3, #4
 800062e:	60bb      	str	r3, [r7, #8]
 8000630:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000632:	4b2e      	ldr	r3, [pc, #184]	@ (80006ec <MX_GPIO_Init+0xe8>)
 8000634:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000636:	4a2d      	ldr	r2, [pc, #180]	@ (80006ec <MX_GPIO_Init+0xe8>)
 8000638:	f043 0320 	orr.w	r3, r3, #32
 800063c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800063e:	4b2b      	ldr	r3, [pc, #172]	@ (80006ec <MX_GPIO_Init+0xe8>)
 8000640:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000642:	f003 0320 	and.w	r3, r3, #32
 8000646:	607b      	str	r3, [r7, #4]
 8000648:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800064a:	4b28      	ldr	r3, [pc, #160]	@ (80006ec <MX_GPIO_Init+0xe8>)
 800064c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800064e:	4a27      	ldr	r2, [pc, #156]	@ (80006ec <MX_GPIO_Init+0xe8>)
 8000650:	f043 0301 	orr.w	r3, r3, #1
 8000654:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000656:	4b25      	ldr	r3, [pc, #148]	@ (80006ec <MX_GPIO_Init+0xe8>)
 8000658:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800065a:	f003 0301 	and.w	r3, r3, #1
 800065e:	603b      	str	r3, [r7, #0]
 8000660:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000662:	2200      	movs	r2, #0
 8000664:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 8000668:	4821      	ldr	r0, [pc, #132]	@ (80006f0 <MX_GPIO_Init+0xec>)
 800066a:	f001 fd73 	bl	8002154 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 800066e:	2200      	movs	r2, #0
 8000670:	2140      	movs	r1, #64	@ 0x40
 8000672:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000676:	f001 fd6d 	bl	8002154 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800067a:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 800067e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000680:	2301      	movs	r3, #1
 8000682:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000684:	2300      	movs	r3, #0
 8000686:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000688:	2300      	movs	r3, #0
 800068a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800068c:	f107 030c 	add.w	r3, r7, #12
 8000690:	4619      	mov	r1, r3
 8000692:	4817      	ldr	r0, [pc, #92]	@ (80006f0 <MX_GPIO_Init+0xec>)
 8000694:	f001 fbdc 	bl	8001e50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000698:	23a0      	movs	r3, #160	@ 0xa0
 800069a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800069c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80006a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a2:	2300      	movs	r3, #0
 80006a4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006a6:	f107 030c 	add.w	r3, r7, #12
 80006aa:	4619      	mov	r1, r3
 80006ac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006b0:	f001 fbce 	bl	8001e50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80006b4:	2340      	movs	r3, #64	@ 0x40
 80006b6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006b8:	2301      	movs	r3, #1
 80006ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006bc:	2300      	movs	r3, #0
 80006be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006c0:	2300      	movs	r3, #0
 80006c2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006c4:	f107 030c 	add.w	r3, r7, #12
 80006c8:	4619      	mov	r1, r3
 80006ca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006ce:	f001 fbbf 	bl	8001e50 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80006d2:	2200      	movs	r2, #0
 80006d4:	2100      	movs	r1, #0
 80006d6:	2017      	movs	r0, #23
 80006d8:	f001 f839 	bl	800174e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80006dc:	2017      	movs	r0, #23
 80006de:	f001 f850 	bl	8001782 <HAL_NVIC_EnableIRQ>

}
 80006e2:	bf00      	nop
 80006e4:	3720      	adds	r7, #32
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	40021000 	.word	0x40021000
 80006f0:	48000800 	.word	0x48000800

080006f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006f8:	f000 fe97 	bl	800142a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006fc:	f000 f838 	bl	8000770 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000700:	f7ff ff80 	bl	8000604 <MX_GPIO_Init>
  MX_DMA_Init();
 8000704:	f7ff ff54 	bl	80005b0 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000708:	f000 fc22 	bl	8000f50 <MX_USART1_UART_Init>
  MX_USB_Device_Init();
 800070c:	f00a f9d2 	bl	800aab4 <MX_USB_Device_Init>
  MX_TIM1_Init();
 8000710:	f000 fba4 	bl	8000e5c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  Q_Init(&USB_TX_Q, (uint8_t *) USB_TX_Data, quedata_arraylength);
 8000714:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000718:	490f      	ldr	r1, [pc, #60]	@ (8000758 <main+0x64>)
 800071a:	4810      	ldr	r0, [pc, #64]	@ (800075c <main+0x68>)
 800071c:	f000 f879 	bl	8000812 <Q_Init>

  HAL_Delay(3000);
 8000720:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000724:	f000 fef2 	bl	800150c <HAL_Delay>
  HAL_TIM_Base_Start_IT(&htim1);
 8000728:	480d      	ldr	r0, [pc, #52]	@ (8000760 <main+0x6c>)
 800072a:	f004 fa93 	bl	8004c54 <HAL_TIM_Base_Start_IT>
  GetClockSourcePrint();
 800072e:	f000 fd45 	bl	80011bc <GetClockSourcePrint>
  BootMessagePrint();
 8000732:	f000 fd13 	bl	800115c <BootMessagePrint>

  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, (uint8_t *)uart1_rx_IDLE_buf, UART_RX_IDLE_BUFSIZE);
 8000736:	2264      	movs	r2, #100	@ 0x64
 8000738:	490a      	ldr	r1, [pc, #40]	@ (8000764 <main+0x70>)
 800073a:	480b      	ldr	r0, [pc, #44]	@ (8000768 <main+0x74>)
 800073c:	f006 fe3e 	bl	80073bc <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8000740:	4b0a      	ldr	r3, [pc, #40]	@ (800076c <main+0x78>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	681a      	ldr	r2, [r3, #0]
 8000746:	4b09      	ldr	r3, [pc, #36]	@ (800076c <main+0x78>)
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	f022 0204 	bic.w	r2, r2, #4
 800074e:	601a      	str	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    User_Toggle_Led();
 8000750:	f000 fcee 	bl	8001130 <User_Toggle_Led>
 8000754:	e7fc      	b.n	8000750 <main+0x5c>
 8000756:	bf00      	nop
 8000758:	20000754 	.word	0x20000754
 800075c:	2000035c 	.word	0x2000035c
 8000760:	20000210 	.word	0x20000210
 8000764:	20000b40 	.word	0x20000b40
 8000768:	2000025c 	.word	0x2000025c
 800076c:	200002f0 	.word	0x200002f0

08000770 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b094      	sub	sp, #80	@ 0x50
 8000774:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000776:	f107 0318 	add.w	r3, r7, #24
 800077a:	2238      	movs	r2, #56	@ 0x38
 800077c:	2100      	movs	r1, #0
 800077e:	4618      	mov	r0, r3
 8000780:	f00b f8c4 	bl	800b90c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000784:	1d3b      	adds	r3, r7, #4
 8000786:	2200      	movs	r2, #0
 8000788:	601a      	str	r2, [r3, #0]
 800078a:	605a      	str	r2, [r3, #4]
 800078c:	609a      	str	r2, [r3, #8]
 800078e:	60da      	str	r2, [r3, #12]
 8000790:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000792:	2000      	movs	r0, #0
 8000794:	f003 fa34 	bl	8003c00 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000798:	2321      	movs	r3, #33	@ 0x21
 800079a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800079c:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80007a0:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80007a2:	2301      	movs	r3, #1
 80007a4:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007a6:	2302      	movs	r3, #2
 80007a8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007aa:	2303      	movs	r3, #3
 80007ac:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 80007ae:	2306      	movs	r3, #6
 80007b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80007b2:	2355      	movs	r3, #85	@ 0x55
 80007b4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007b6:	2302      	movs	r3, #2
 80007b8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 80007ba:	2304      	movs	r3, #4
 80007bc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80007be:	2302      	movs	r3, #2
 80007c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007c2:	f107 0318 	add.w	r3, r7, #24
 80007c6:	4618      	mov	r0, r3
 80007c8:	f003 face 	bl	8003d68 <HAL_RCC_OscConfig>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80007d2:	f000 f818 	bl	8000806 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007d6:	230f      	movs	r3, #15
 80007d8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007da:	2303      	movs	r3, #3
 80007dc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007de:	2300      	movs	r3, #0
 80007e0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007e2:	2300      	movs	r3, #0
 80007e4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007e6:	2300      	movs	r3, #0
 80007e8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80007ea:	1d3b      	adds	r3, r7, #4
 80007ec:	2104      	movs	r1, #4
 80007ee:	4618      	mov	r0, r3
 80007f0:	f003 fdcc 	bl	800438c <HAL_RCC_ClockConfig>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80007fa:	f000 f804 	bl	8000806 <Error_Handler>
  }
}
 80007fe:	bf00      	nop
 8000800:	3750      	adds	r7, #80	@ 0x50
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}

08000806 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000806:	b480      	push	{r7}
 8000808:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800080a:	b672      	cpsid	i
}
 800080c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800080e:	bf00      	nop
 8000810:	e7fd      	b.n	800080e <Error_Handler+0x8>

08000812 <Q_Init>:
#include "queue.h"

void Q_Init(Q_queue_t *queue, uint8_t *data, uint16_t len){
 8000812:	b480      	push	{r7}
 8000814:	b085      	sub	sp, #20
 8000816:	af00      	add	r7, sp, #0
 8000818:	60f8      	str	r0, [r7, #12]
 800081a:	60b9      	str	r1, [r7, #8]
 800081c:	4613      	mov	r3, r2
 800081e:	80fb      	strh	r3, [r7, #6]
    queue->idx_read = 0;
 8000820:	68fb      	ldr	r3, [r7, #12]
 8000822:	2200      	movs	r2, #0
 8000824:	809a      	strh	r2, [r3, #4]
    queue->idx_write = 0;
 8000826:	68fb      	ldr	r3, [r7, #12]
 8000828:	2200      	movs	r2, #0
 800082a:	805a      	strh	r2, [r3, #2]
    queue->count_full = 0;
 800082c:	68fb      	ldr	r3, [r7, #12]
 800082e:	2200      	movs	r2, #0
 8000830:	80da      	strh	r2, [r3, #6]
    queue->count_empty = 0;
 8000832:	68fb      	ldr	r3, [r7, #12]
 8000834:	2200      	movs	r2, #0
 8000836:	811a      	strh	r2, [r3, #8]
    queue->size = len;
 8000838:	68fb      	ldr	r3, [r7, #12]
 800083a:	88fa      	ldrh	r2, [r7, #6]
 800083c:	801a      	strh	r2, [r3, #0]
    queue->data = data;
 800083e:	68fb      	ldr	r3, [r7, #12]
 8000840:	68ba      	ldr	r2, [r7, #8]
 8000842:	60da      	str	r2, [r3, #12]
}
 8000844:	bf00      	nop
 8000846:	3714      	adds	r7, #20
 8000848:	46bd      	mov	sp, r7
 800084a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084e:	4770      	bx	lr

08000850 <Q_Write>:

void Q_Clear(Q_queue_t *queue){
    queue->idx_write = queue->idx_read;
}

bool Q_Write(Q_queue_t *queue, uint8_t *data, uint16_t len){
 8000850:	b580      	push	{r7, lr}
 8000852:	b088      	sub	sp, #32
 8000854:	af00      	add	r7, sp, #0
 8000856:	60f8      	str	r0, [r7, #12]
 8000858:	60b9      	str	r1, [r7, #8]
 800085a:	4613      	mov	r3, r2
 800085c:	80fb      	strh	r3, [r7, #6]
    int empty_bytes;
    uint16_t next_idx;
    uint16_t num_first;
    bool ret = false;
 800085e:	2300      	movs	r3, #0
 8000860:	77fb      	strb	r3, [r7, #31]
    
    empty_bytes = Q_NumEmptyBytes(queue);  
 8000862:	68f8      	ldr	r0, [r7, #12]
 8000864:	f000 f8ea 	bl	8000a3c <Q_NumEmptyBytes>
 8000868:	4603      	mov	r3, r0
 800086a:	61bb      	str	r3, [r7, #24]
    if(empty_bytes >= len){
 800086c:	88fb      	ldrh	r3, [r7, #6]
 800086e:	69ba      	ldr	r2, [r7, #24]
 8000870:	429a      	cmp	r2, r3
 8000872:	db44      	blt.n	80008fe <Q_Write+0xae>
        next_idx = queue->idx_write + len;
 8000874:	68fb      	ldr	r3, [r7, #12]
 8000876:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800087a:	b29a      	uxth	r2, r3
 800087c:	88fb      	ldrh	r3, [r7, #6]
 800087e:	4413      	add	r3, r2
 8000880:	82fb      	strh	r3, [r7, #22]
        if(next_idx < queue->size){
 8000882:	68fb      	ldr	r3, [r7, #12]
 8000884:	881b      	ldrh	r3, [r3, #0]
 8000886:	8afa      	ldrh	r2, [r7, #22]
 8000888:	429a      	cmp	r2, r3
 800088a:	d20b      	bcs.n	80008a4 <Q_Write+0x54>
            memcpy(&(queue->data[queue->idx_write]),data,len);  //memcpy(dest,source,num)
 800088c:	68fb      	ldr	r3, [r7, #12]
 800088e:	68db      	ldr	r3, [r3, #12]
 8000890:	68fa      	ldr	r2, [r7, #12]
 8000892:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8000896:	4413      	add	r3, r2
 8000898:	88fa      	ldrh	r2, [r7, #6]
 800089a:	68b9      	ldr	r1, [r7, #8]
 800089c:	4618      	mov	r0, r3
 800089e:	f00b f8b0 	bl	800ba02 <memcpy>
 80008a2:	e01d      	b.n	80008e0 <Q_Write+0x90>
        }
        else{
            num_first = queue->size-queue->idx_write;
 80008a4:	68fb      	ldr	r3, [r7, #12]
 80008a6:	881a      	ldrh	r2, [r3, #0]
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80008ae:	b29b      	uxth	r3, r3
 80008b0:	1ad3      	subs	r3, r2, r3
 80008b2:	82bb      	strh	r3, [r7, #20]
            memcpy(&(queue->data[queue->idx_write]),data,num_first);
 80008b4:	68fb      	ldr	r3, [r7, #12]
 80008b6:	68db      	ldr	r3, [r3, #12]
 80008b8:	68fa      	ldr	r2, [r7, #12]
 80008ba:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 80008be:	4413      	add	r3, r2
 80008c0:	8aba      	ldrh	r2, [r7, #20]
 80008c2:	68b9      	ldr	r1, [r7, #8]
 80008c4:	4618      	mov	r0, r3
 80008c6:	f00b f89c 	bl	800ba02 <memcpy>
            memcpy(&(queue->data[0]),&(data[num_first]),len-num_first);
 80008ca:	68fb      	ldr	r3, [r7, #12]
 80008cc:	68d8      	ldr	r0, [r3, #12]
 80008ce:	8abb      	ldrh	r3, [r7, #20]
 80008d0:	68ba      	ldr	r2, [r7, #8]
 80008d2:	18d1      	adds	r1, r2, r3
 80008d4:	88fa      	ldrh	r2, [r7, #6]
 80008d6:	8abb      	ldrh	r3, [r7, #20]
 80008d8:	1ad3      	subs	r3, r2, r3
 80008da:	461a      	mov	r2, r3
 80008dc:	f00b f891 	bl	800ba02 <memcpy>
        }        
        queue->idx_write = next_idx % queue->size;
 80008e0:	68fb      	ldr	r3, [r7, #12]
 80008e2:	881a      	ldrh	r2, [r3, #0]
 80008e4:	8afb      	ldrh	r3, [r7, #22]
 80008e6:	fbb3 f1f2 	udiv	r1, r3, r2
 80008ea:	fb01 f202 	mul.w	r2, r1, r2
 80008ee:	1a9b      	subs	r3, r3, r2
 80008f0:	b29b      	uxth	r3, r3
 80008f2:	b21a      	sxth	r2, r3
 80008f4:	68fb      	ldr	r3, [r7, #12]
 80008f6:	805a      	strh	r2, [r3, #2]
        ret = true;        
 80008f8:	2301      	movs	r3, #1
 80008fa:	77fb      	strb	r3, [r7, #31]
 80008fc:	e00e      	b.n	800091c <Q_Write+0xcc>
    }
    else    queue->count_full = _upperlimit(queue->count_full+1,0xFFFF);      
 80008fe:	68fb      	ldr	r3, [r7, #12]
 8000900:	88db      	ldrh	r3, [r3, #6]
 8000902:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000906:	4293      	cmp	r3, r2
 8000908:	d004      	beq.n	8000914 <Q_Write+0xc4>
 800090a:	68fb      	ldr	r3, [r7, #12]
 800090c:	88db      	ldrh	r3, [r3, #6]
 800090e:	3301      	adds	r3, #1
 8000910:	b29a      	uxth	r2, r3
 8000912:	e001      	b.n	8000918 <Q_Write+0xc8>
 8000914:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000918:	68fb      	ldr	r3, [r7, #12]
 800091a:	80da      	strh	r2, [r3, #6]
    return ret;    
 800091c:	7ffb      	ldrb	r3, [r7, #31]
}
 800091e:	4618      	mov	r0, r3
 8000920:	3720      	adds	r7, #32
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}

08000926 <Q_Read>:
    }
    else    queue->count_full = _upperlimit(queue->count_full+1,0xFFFF);
    return ret;    
}

bool Q_Read(Q_queue_t *queue, uint8_t *data, uint16_t len){
 8000926:	b580      	push	{r7, lr}
 8000928:	b086      	sub	sp, #24
 800092a:	af00      	add	r7, sp, #0
 800092c:	60f8      	str	r0, [r7, #12]
 800092e:	60b9      	str	r1, [r7, #8]
 8000930:	4613      	mov	r3, r2
 8000932:	80fb      	strh	r3, [r7, #6]
    bool ret;
    uint16_t next_idx;
    uint16_t num_first;

    if(Q_NumContents(queue) >= len){
 8000934:	68f8      	ldr	r0, [r7, #12]
 8000936:	f000 f864 	bl	8000a02 <Q_NumContents>
 800093a:	4603      	mov	r3, r0
 800093c:	461a      	mov	r2, r3
 800093e:	88fb      	ldrh	r3, [r7, #6]
 8000940:	4293      	cmp	r3, r2
 8000942:	d848      	bhi.n	80009d6 <Q_Read+0xb0>
        next_idx = queue->idx_read + len;
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800094a:	b29a      	uxth	r2, r3
 800094c:	88fb      	ldrh	r3, [r7, #6]
 800094e:	4413      	add	r3, r2
 8000950:	82bb      	strh	r3, [r7, #20]
        if(next_idx < queue->size){
 8000952:	68fb      	ldr	r3, [r7, #12]
 8000954:	881b      	ldrh	r3, [r3, #0]
 8000956:	8aba      	ldrh	r2, [r7, #20]
 8000958:	429a      	cmp	r2, r3
 800095a:	d20b      	bcs.n	8000974 <Q_Read+0x4e>
            memcpy(data,&(queue->data[queue->idx_read]),len);  //memcpy(dest,source,num)
 800095c:	68fb      	ldr	r3, [r7, #12]
 800095e:	68db      	ldr	r3, [r3, #12]
 8000960:	68fa      	ldr	r2, [r7, #12]
 8000962:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8000966:	4413      	add	r3, r2
 8000968:	88fa      	ldrh	r2, [r7, #6]
 800096a:	4619      	mov	r1, r3
 800096c:	68b8      	ldr	r0, [r7, #8]
 800096e:	f00b f848 	bl	800ba02 <memcpy>
 8000972:	e01d      	b.n	80009b0 <Q_Read+0x8a>
        }
        else{
            num_first = queue->size-queue->idx_read;
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	881a      	ldrh	r2, [r3, #0]
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800097e:	b29b      	uxth	r3, r3
 8000980:	1ad3      	subs	r3, r2, r3
 8000982:	827b      	strh	r3, [r7, #18]
            memcpy(data,&(queue->data[queue->idx_read]),num_first);  //memcpy(dest,source,num)
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	68db      	ldr	r3, [r3, #12]
 8000988:	68fa      	ldr	r2, [r7, #12]
 800098a:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800098e:	4413      	add	r3, r2
 8000990:	8a7a      	ldrh	r2, [r7, #18]
 8000992:	4619      	mov	r1, r3
 8000994:	68b8      	ldr	r0, [r7, #8]
 8000996:	f00b f834 	bl	800ba02 <memcpy>
            memcpy(&(data[num_first]),&(queue->data[0]),len-num_first);
 800099a:	8a7b      	ldrh	r3, [r7, #18]
 800099c:	68ba      	ldr	r2, [r7, #8]
 800099e:	18d0      	adds	r0, r2, r3
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	68d9      	ldr	r1, [r3, #12]
 80009a4:	88fa      	ldrh	r2, [r7, #6]
 80009a6:	8a7b      	ldrh	r3, [r7, #18]
 80009a8:	1ad3      	subs	r3, r2, r3
 80009aa:	461a      	mov	r2, r3
 80009ac:	f00b f829 	bl	800ba02 <memcpy>
        }        
        queue->idx_read = (queue->idx_read+len)%queue->size;
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80009b6:	461a      	mov	r2, r3
 80009b8:	88fb      	ldrh	r3, [r7, #6]
 80009ba:	4413      	add	r3, r2
 80009bc:	68fa      	ldr	r2, [r7, #12]
 80009be:	8812      	ldrh	r2, [r2, #0]
 80009c0:	fb93 f1f2 	sdiv	r1, r3, r2
 80009c4:	fb01 f202 	mul.w	r2, r1, r2
 80009c8:	1a9b      	subs	r3, r3, r2
 80009ca:	b21a      	sxth	r2, r3
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	809a      	strh	r2, [r3, #4]
        ret = true;
 80009d0:	2301      	movs	r3, #1
 80009d2:	75fb      	strb	r3, [r7, #23]
 80009d4:	e010      	b.n	80009f8 <Q_Read+0xd2>
    }
    else{
        queue->count_empty = _upperlimit(queue->count_empty+1,0xFFFF);
 80009d6:	68fb      	ldr	r3, [r7, #12]
 80009d8:	891b      	ldrh	r3, [r3, #8]
 80009da:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80009de:	4293      	cmp	r3, r2
 80009e0:	d004      	beq.n	80009ec <Q_Read+0xc6>
 80009e2:	68fb      	ldr	r3, [r7, #12]
 80009e4:	891b      	ldrh	r3, [r3, #8]
 80009e6:	3301      	adds	r3, #1
 80009e8:	b29a      	uxth	r2, r3
 80009ea:	e001      	b.n	80009f0 <Q_Read+0xca>
 80009ec:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80009f0:	68fb      	ldr	r3, [r7, #12]
 80009f2:	811a      	strh	r2, [r3, #8]
        ret = false;
 80009f4:	2300      	movs	r3, #0
 80009f6:	75fb      	strb	r3, [r7, #23]
    }
    return ret;
 80009f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80009fa:	4618      	mov	r0, r3
 80009fc:	3718      	adds	r7, #24
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}

08000a02 <Q_NumContents>:
    else    queue->count_empty = _upperlimit(queue->count_empty+1,0xFFFF);
    return ret;
}


uint16_t Q_NumContents(Q_queue_t *queue){
 8000a02:	b480      	push	{r7}
 8000a04:	b083      	sub	sp, #12
 8000a06:	af00      	add	r7, sp, #0
 8000a08:	6078      	str	r0, [r7, #4]
    return (uint16_t)((queue->size + queue->idx_write - queue->idx_read)%(queue->size));    
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	881b      	ldrh	r3, [r3, #0]
 8000a0e:	461a      	mov	r2, r3
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000a16:	4413      	add	r3, r2
 8000a18:	687a      	ldr	r2, [r7, #4]
 8000a1a:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8000a1e:	1a9b      	subs	r3, r3, r2
 8000a20:	687a      	ldr	r2, [r7, #4]
 8000a22:	8812      	ldrh	r2, [r2, #0]
 8000a24:	fb93 f1f2 	sdiv	r1, r3, r2
 8000a28:	fb01 f202 	mul.w	r2, r1, r2
 8000a2c:	1a9b      	subs	r3, r3, r2
 8000a2e:	b29b      	uxth	r3, r3
}
 8000a30:	4618      	mov	r0, r3
 8000a32:	370c      	adds	r7, #12
 8000a34:	46bd      	mov	sp, r7
 8000a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3a:	4770      	bx	lr

08000a3c <Q_NumEmptyBytes>:

uint16_t Q_NumEmptyBytes(Q_queue_t *queue){
 8000a3c:	b590      	push	{r4, r7, lr}
 8000a3e:	b083      	sub	sp, #12
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
    return queue->size - (int)Q_NumContents(queue) - 1;
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	881c      	ldrh	r4, [r3, #0]
 8000a48:	6878      	ldr	r0, [r7, #4]
 8000a4a:	f7ff ffda 	bl	8000a02 <Q_NumContents>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	1ae3      	subs	r3, r4, r3
 8000a52:	b29b      	uxth	r3, r3
 8000a54:	3b01      	subs	r3, #1
 8000a56:	b29b      	uxth	r3, r3
}
 8000a58:	4618      	mov	r0, r3
 8000a5a:	370c      	adds	r7, #12
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd90      	pop	{r4, r7, pc}

08000a60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b082      	sub	sp, #8
 8000a64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a66:	4b0f      	ldr	r3, [pc, #60]	@ (8000aa4 <HAL_MspInit+0x44>)
 8000a68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a6a:	4a0e      	ldr	r2, [pc, #56]	@ (8000aa4 <HAL_MspInit+0x44>)
 8000a6c:	f043 0301 	orr.w	r3, r3, #1
 8000a70:	6613      	str	r3, [r2, #96]	@ 0x60
 8000a72:	4b0c      	ldr	r3, [pc, #48]	@ (8000aa4 <HAL_MspInit+0x44>)
 8000a74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a76:	f003 0301 	and.w	r3, r3, #1
 8000a7a:	607b      	str	r3, [r7, #4]
 8000a7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a7e:	4b09      	ldr	r3, [pc, #36]	@ (8000aa4 <HAL_MspInit+0x44>)
 8000a80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a82:	4a08      	ldr	r2, [pc, #32]	@ (8000aa4 <HAL_MspInit+0x44>)
 8000a84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a88:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a8a:	4b06      	ldr	r3, [pc, #24]	@ (8000aa4 <HAL_MspInit+0x44>)
 8000a8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a92:	603b      	str	r3, [r7, #0]
 8000a94:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000a96:	f003 f957 	bl	8003d48 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a9a:	bf00      	nop
 8000a9c:	3708      	adds	r7, #8
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	40021000 	.word	0x40021000

08000aa8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000aac:	bf00      	nop
 8000aae:	e7fd      	b.n	8000aac <NMI_Handler+0x4>

08000ab0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ab4:	bf00      	nop
 8000ab6:	e7fd      	b.n	8000ab4 <HardFault_Handler+0x4>

08000ab8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000abc:	bf00      	nop
 8000abe:	e7fd      	b.n	8000abc <MemManage_Handler+0x4>

08000ac0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ac4:	bf00      	nop
 8000ac6:	e7fd      	b.n	8000ac4 <BusFault_Handler+0x4>

08000ac8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000acc:	bf00      	nop
 8000ace:	e7fd      	b.n	8000acc <UsageFault_Handler+0x4>

08000ad0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ad4:	bf00      	nop
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr

08000ade <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ade:	b480      	push	{r7}
 8000ae0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ae2:	bf00      	nop
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aea:	4770      	bx	lr

08000aec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000af0:	bf00      	nop
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr

08000afa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000afa:	b580      	push	{r7, lr}
 8000afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000afe:	f000 fce7 	bl	80014d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b02:	bf00      	nop
 8000b04:	bd80      	pop	{r7, pc}
	...

08000b08 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000b0c:	4802      	ldr	r0, [pc, #8]	@ (8000b18 <DMA1_Channel1_IRQHandler+0x10>)
 8000b0e:	f001 f844 	bl	8001b9a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000b12:	bf00      	nop
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	200002f0 	.word	0x200002f0

08000b1c <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000b20:	4802      	ldr	r0, [pc, #8]	@ (8000b2c <USB_LP_IRQHandler+0x10>)
 8000b22:	f001 fc5c 	bl	80023de <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8000b26:	bf00      	nop
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	20001880 	.word	0x20001880

08000b30 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8000b34:	2020      	movs	r0, #32
 8000b36:	f001 fb3f 	bl	80021b8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8000b3a:	2080      	movs	r0, #128	@ 0x80
 8000b3c:	f001 fb3c 	bl	80021b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000b40:	bf00      	nop
 8000b42:	bd80      	pop	{r7, pc}

08000b44 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000b48:	4802      	ldr	r0, [pc, #8]	@ (8000b54 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000b4a:	f004 f8ed 	bl	8004d28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000b4e:	bf00      	nop
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	20000210 	.word	0x20000210

08000b58 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
  if ((__HAL_UART_GET_FLAG(&huart1, UART_FLAG_FE)) || (__HAL_UART_GET_FLAG(&huart1, UART_FLAG_ORE)))
 8000b5c:	4b0d      	ldr	r3, [pc, #52]	@ (8000b94 <USART1_IRQHandler+0x3c>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	69db      	ldr	r3, [r3, #28]
 8000b62:	f003 0302 	and.w	r3, r3, #2
 8000b66:	2b02      	cmp	r3, #2
 8000b68:	d006      	beq.n	8000b78 <USART1_IRQHandler+0x20>
 8000b6a:	4b0a      	ldr	r3, [pc, #40]	@ (8000b94 <USART1_IRQHandler+0x3c>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	69db      	ldr	r3, [r3, #28]
 8000b70:	f003 0308 	and.w	r3, r3, #8
 8000b74:	2b08      	cmp	r3, #8
 8000b76:	d107      	bne.n	8000b88 <USART1_IRQHandler+0x30>
  {
    __HAL_UART_CLEAR_OREFLAG(&huart1);
 8000b78:	4b06      	ldr	r3, [pc, #24]	@ (8000b94 <USART1_IRQHandler+0x3c>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	2208      	movs	r2, #8
 8000b7e:	621a      	str	r2, [r3, #32]
    __HAL_UART_CLEAR_FEFLAG(&huart1);
 8000b80:	4b04      	ldr	r3, [pc, #16]	@ (8000b94 <USART1_IRQHandler+0x3c>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	2202      	movs	r2, #2
 8000b86:	621a      	str	r2, [r3, #32]
  }
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000b88:	4802      	ldr	r0, [pc, #8]	@ (8000b94 <USART1_IRQHandler+0x3c>)
 8000b8a:	f004 ff3d 	bl	8005a08 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000b8e:	bf00      	nop
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	2000025c 	.word	0x2000025c

08000b98 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 1 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b084      	sub	sp, #16
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  uint16_t num = 0;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	81fb      	strh	r3, [r7, #14]

  if ( (num = Q_NumContents(&USB_TX_Q)) > 0 )
 8000ba4:	4818      	ldr	r0, [pc, #96]	@ (8000c08 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000ba6:	f7ff ff2c 	bl	8000a02 <Q_NumContents>
 8000baa:	4603      	mov	r3, r0
 8000bac:	81fb      	strh	r3, [r7, #14]
 8000bae:	89fb      	ldrh	r3, [r7, #14]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d016      	beq.n	8000be2 <HAL_TIM_PeriodElapsedCallback+0x4a>
  {
    if (CDC_Transmit_Is_Busy() != USBD_BUSY)
 8000bb4:	f00a f874 	bl	800aca0 <CDC_Transmit_Is_Busy>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b01      	cmp	r3, #1
 8000bbc:	d011      	beq.n	8000be2 <HAL_TIM_PeriodElapsedCallback+0x4a>
    {
      queDataNum += num;
 8000bbe:	4b13      	ldr	r3, [pc, #76]	@ (8000c0c <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000bc0:	881a      	ldrh	r2, [r3, #0]
 8000bc2:	89fb      	ldrh	r3, [r7, #14]
 8000bc4:	4413      	add	r3, r2
 8000bc6:	b29a      	uxth	r2, r3
 8000bc8:	4b10      	ldr	r3, [pc, #64]	@ (8000c0c <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000bca:	801a      	strh	r2, [r3, #0]

      Q_Read(&USB_TX_Q, (uint8_t *)queData, num);
 8000bcc:	89fb      	ldrh	r3, [r7, #14]
 8000bce:	461a      	mov	r2, r3
 8000bd0:	490f      	ldr	r1, [pc, #60]	@ (8000c10 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000bd2:	480d      	ldr	r0, [pc, #52]	@ (8000c08 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000bd4:	f7ff fea7 	bl	8000926 <Q_Read>

      CDC_Transmit_FS(queData, num);
 8000bd8:	89fb      	ldrh	r3, [r7, #14]
 8000bda:	4619      	mov	r1, r3
 8000bdc:	480c      	ldr	r0, [pc, #48]	@ (8000c10 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000bde:	f00a f827 	bl	800ac30 <CDC_Transmit_FS>
    }
  }

  if (htim->Instance == TIM1)
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	4a0b      	ldr	r2, [pc, #44]	@ (8000c14 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000be8:	4293      	cmp	r3, r2
 8000bea:	d109      	bne.n	8000c00 <HAL_TIM_PeriodElapsedCallback+0x68>
  {
    TIM1_CNT_1++;
 8000bec:	4b0a      	ldr	r3, [pc, #40]	@ (8000c18 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	3301      	adds	r3, #1
 8000bf2:	4a09      	ldr	r2, [pc, #36]	@ (8000c18 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000bf4:	6013      	str	r3, [r2, #0]
    TIM1_CNT_2++;
 8000bf6:	4b09      	ldr	r3, [pc, #36]	@ (8000c1c <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	3301      	adds	r3, #1
 8000bfc:	4a07      	ldr	r2, [pc, #28]	@ (8000c1c <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000bfe:	6013      	str	r3, [r2, #0]
  }
}
 8000c00:	bf00      	nop
 8000c02:	3710      	adds	r7, #16
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	2000035c 	.word	0x2000035c
 8000c0c:	20000358 	.word	0x20000358
 8000c10:	2000036c 	.word	0x2000036c
 8000c14:	40012c00 	.word	0x40012c00
 8000c18:	20000350 	.word	0x20000350
 8000c1c:	20000354 	.word	0x20000354

08000c20 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b088      	sub	sp, #32
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
 8000c28:	460b      	mov	r3, r1
 8000c2a:	807b      	strh	r3, [r7, #2]
  uart_rx_IDLE_TotalCnt += Size;
 8000c2c:	887a      	ldrh	r2, [r7, #2]
 8000c2e:	4b22      	ldr	r3, [pc, #136]	@ (8000cb8 <HAL_UARTEx_RxEventCallback+0x98>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	4413      	add	r3, r2
 8000c34:	4a20      	ldr	r2, [pc, #128]	@ (8000cb8 <HAL_UARTEx_RxEventCallback+0x98>)
 8000c36:	6013      	str	r3, [r2, #0]

  if (huart->Instance == USART1)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4a1f      	ldr	r2, [pc, #124]	@ (8000cbc <HAL_UARTEx_RxEventCallback+0x9c>)
 8000c3e:	4293      	cmp	r3, r2
 8000c40:	d136      	bne.n	8000cb0 <HAL_UARTEx_RxEventCallback+0x90>
  {
    HAL_UART_DMAStop(&huart1);
 8000c42:	481f      	ldr	r0, [pc, #124]	@ (8000cc0 <HAL_UARTEx_RxEventCallback+0xa0>)
 8000c44:	f004 fe4a 	bl	80058dc <HAL_UART_DMAStop>
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8000c48:	2025      	movs	r0, #37	@ 0x25
 8000c4a:	f000 fda8 	bl	800179e <HAL_NVIC_DisableIRQ>

    
    if( uart_rx_IDLE_TotalCnt >= 3)
 8000c4e:	4b1a      	ldr	r3, [pc, #104]	@ (8000cb8 <HAL_UARTEx_RxEventCallback+0x98>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	2b02      	cmp	r3, #2
 8000c54:	d903      	bls.n	8000c5e <HAL_UARTEx_RxEventCallback+0x3e>
    {
      IOL_PageTest(Size);
 8000c56:	887b      	ldrh	r3, [r7, #2]
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f000 fb83 	bl	8001364 <IOL_PageTest>

    // __HAL_DMA_DISABLE(&hdma_usart1_rx);
    // hdma_usart1_rx.Instance->CNDTR = UART_RX_IDLE_BUFSIZE;
    // __HAL_DMA_ENABLE(&hdma_usart1_rx);

    __HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE);
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	69db      	ldr	r3, [r3, #28]
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	e853 3f00 	ldrex	r3, [r3]
 8000c70:	60bb      	str	r3, [r7, #8]
   return(result);
 8000c72:	68bb      	ldr	r3, [r7, #8]
 8000c74:	f043 0310 	orr.w	r3, r3, #16
 8000c78:	61fb      	str	r3, [r7, #28]
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	461a      	mov	r2, r3
 8000c80:	69fb      	ldr	r3, [r7, #28]
 8000c82:	61bb      	str	r3, [r7, #24]
 8000c84:	617a      	str	r2, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000c86:	6979      	ldr	r1, [r7, #20]
 8000c88:	69ba      	ldr	r2, [r7, #24]
 8000c8a:	e841 2300 	strex	r3, r2, [r1]
 8000c8e:	613b      	str	r3, [r7, #16]
   return(result);
 8000c90:	693b      	ldr	r3, [r7, #16]
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d1e6      	bne.n	8000c64 <HAL_UARTEx_RxEventCallback+0x44>
    HAL_UARTEx_ReceiveToIdle_DMA(&huart1, (uint8_t *) uart1_rx_IDLE_buf, UART_RX_IDLE_BUFSIZE);
 8000c96:	2264      	movs	r2, #100	@ 0x64
 8000c98:	490a      	ldr	r1, [pc, #40]	@ (8000cc4 <HAL_UARTEx_RxEventCallback+0xa4>)
 8000c9a:	4809      	ldr	r0, [pc, #36]	@ (8000cc0 <HAL_UARTEx_RxEventCallback+0xa0>)
 8000c9c:	f006 fb8e 	bl	80073bc <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8000ca0:	4b09      	ldr	r3, [pc, #36]	@ (8000cc8 <HAL_UARTEx_RxEventCallback+0xa8>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	681a      	ldr	r2, [r3, #0]
 8000ca6:	4b08      	ldr	r3, [pc, #32]	@ (8000cc8 <HAL_UARTEx_RxEventCallback+0xa8>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	f022 0204 	bic.w	r2, r2, #4
 8000cae:	601a      	str	r2, [r3, #0]
  }
  else if (huart->Instance == USART2)
  {

  }
}
 8000cb0:	bf00      	nop
 8000cb2:	3720      	adds	r7, #32
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	20000b3c 	.word	0x20000b3c
 8000cbc:	40013800 	.word	0x40013800
 8000cc0:	2000025c 	.word	0x2000025c
 8000cc4:	20000b40 	.word	0x20000b40
 8000cc8:	200002f0 	.word	0x200002f0

08000ccc <HAL_UART_TxCpltCallback>:


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART1)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a10      	ldr	r2, [pc, #64]	@ (8000d1c <HAL_UART_TxCpltCallback+0x50>)
 8000cda:	4293      	cmp	r3, r2
 8000cdc:	d119      	bne.n	8000d12 <HAL_UART_TxCpltCallback+0x46>
  {
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000cde:	2025      	movs	r0, #37	@ 0x25
 8000ce0:	f000 fd4f 	bl	8001782 <HAL_NVIC_EnableIRQ>
    HAL_UART_DMAResume(&huart1);
 8000ce4:	480e      	ldr	r0, [pc, #56]	@ (8000d20 <HAL_UART_TxCpltCallback+0x54>)
 8000ce6:	f004 fd75 	bl	80057d4 <HAL_UART_DMAResume>

    __HAL_DMA_DISABLE(&hdma_usart1_rx);
 8000cea:	4b0e      	ldr	r3, [pc, #56]	@ (8000d24 <HAL_UART_TxCpltCallback+0x58>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	681a      	ldr	r2, [r3, #0]
 8000cf0:	4b0c      	ldr	r3, [pc, #48]	@ (8000d24 <HAL_UART_TxCpltCallback+0x58>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	f022 0201 	bic.w	r2, r2, #1
 8000cf8:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Instance->CNDTR = UART_RX_IDLE_BUFSIZE;
 8000cfa:	4b0a      	ldr	r3, [pc, #40]	@ (8000d24 <HAL_UART_TxCpltCallback+0x58>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	2264      	movs	r2, #100	@ 0x64
 8000d00:	605a      	str	r2, [r3, #4]
    __HAL_DMA_ENABLE(&hdma_usart1_rx);
 8000d02:	4b08      	ldr	r3, [pc, #32]	@ (8000d24 <HAL_UART_TxCpltCallback+0x58>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	681a      	ldr	r2, [r3, #0]
 8000d08:	4b06      	ldr	r3, [pc, #24]	@ (8000d24 <HAL_UART_TxCpltCallback+0x58>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	f042 0201 	orr.w	r2, r2, #1
 8000d10:	601a      	str	r2, [r3, #0]
  }
}
 8000d12:	bf00      	nop
 8000d14:	3708      	adds	r7, #8
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	40013800 	.word	0x40013800
 8000d20:	2000025c 	.word	0x2000025c
 8000d24:	200002f0 	.word	0x200002f0

08000d28 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b086      	sub	sp, #24
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	60f8      	str	r0, [r7, #12]
 8000d30:	60b9      	str	r1, [r7, #8]
 8000d32:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d34:	2300      	movs	r3, #0
 8000d36:	617b      	str	r3, [r7, #20]
 8000d38:	e00a      	b.n	8000d50 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000d3a:	f3af 8000 	nop.w
 8000d3e:	4601      	mov	r1, r0
 8000d40:	68bb      	ldr	r3, [r7, #8]
 8000d42:	1c5a      	adds	r2, r3, #1
 8000d44:	60ba      	str	r2, [r7, #8]
 8000d46:	b2ca      	uxtb	r2, r1
 8000d48:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d4a:	697b      	ldr	r3, [r7, #20]
 8000d4c:	3301      	adds	r3, #1
 8000d4e:	617b      	str	r3, [r7, #20]
 8000d50:	697a      	ldr	r2, [r7, #20]
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	429a      	cmp	r2, r3
 8000d56:	dbf0      	blt.n	8000d3a <_read+0x12>
  }

  return len;
 8000d58:	687b      	ldr	r3, [r7, #4]
}
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	3718      	adds	r7, #24
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}

08000d62 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000d62:	b480      	push	{r7}
 8000d64:	b083      	sub	sp, #12
 8000d66:	af00      	add	r7, sp, #0
 8000d68:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000d6a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	370c      	adds	r7, #12
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr

08000d7a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d7a:	b480      	push	{r7}
 8000d7c:	b083      	sub	sp, #12
 8000d7e:	af00      	add	r7, sp, #0
 8000d80:	6078      	str	r0, [r7, #4]
 8000d82:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000d8a:	605a      	str	r2, [r3, #4]
  return 0;
 8000d8c:	2300      	movs	r3, #0
}
 8000d8e:	4618      	mov	r0, r3
 8000d90:	370c      	adds	r7, #12
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr

08000d9a <_isatty>:

int _isatty(int file)
{
 8000d9a:	b480      	push	{r7}
 8000d9c:	b083      	sub	sp, #12
 8000d9e:	af00      	add	r7, sp, #0
 8000da0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000da2:	2301      	movs	r3, #1
}
 8000da4:	4618      	mov	r0, r3
 8000da6:	370c      	adds	r7, #12
 8000da8:	46bd      	mov	sp, r7
 8000daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dae:	4770      	bx	lr

08000db0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b085      	sub	sp, #20
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	60f8      	str	r0, [r7, #12]
 8000db8:	60b9      	str	r1, [r7, #8]
 8000dba:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000dbc:	2300      	movs	r3, #0
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	3714      	adds	r7, #20
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr
	...

08000dcc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b086      	sub	sp, #24
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000dd4:	4a14      	ldr	r2, [pc, #80]	@ (8000e28 <_sbrk+0x5c>)
 8000dd6:	4b15      	ldr	r3, [pc, #84]	@ (8000e2c <_sbrk+0x60>)
 8000dd8:	1ad3      	subs	r3, r2, r3
 8000dda:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000de0:	4b13      	ldr	r3, [pc, #76]	@ (8000e30 <_sbrk+0x64>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d102      	bne.n	8000dee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000de8:	4b11      	ldr	r3, [pc, #68]	@ (8000e30 <_sbrk+0x64>)
 8000dea:	4a12      	ldr	r2, [pc, #72]	@ (8000e34 <_sbrk+0x68>)
 8000dec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dee:	4b10      	ldr	r3, [pc, #64]	@ (8000e30 <_sbrk+0x64>)
 8000df0:	681a      	ldr	r2, [r3, #0]
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	4413      	add	r3, r2
 8000df6:	693a      	ldr	r2, [r7, #16]
 8000df8:	429a      	cmp	r2, r3
 8000dfa:	d207      	bcs.n	8000e0c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000dfc:	f00a fdd4 	bl	800b9a8 <__errno>
 8000e00:	4603      	mov	r3, r0
 8000e02:	220c      	movs	r2, #12
 8000e04:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e06:	f04f 33ff 	mov.w	r3, #4294967295
 8000e0a:	e009      	b.n	8000e20 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e0c:	4b08      	ldr	r3, [pc, #32]	@ (8000e30 <_sbrk+0x64>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e12:	4b07      	ldr	r3, [pc, #28]	@ (8000e30 <_sbrk+0x64>)
 8000e14:	681a      	ldr	r2, [r3, #0]
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	4413      	add	r3, r2
 8000e1a:	4a05      	ldr	r2, [pc, #20]	@ (8000e30 <_sbrk+0x64>)
 8000e1c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e1e:	68fb      	ldr	r3, [r7, #12]
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	3718      	adds	r7, #24
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	20008000 	.word	0x20008000
 8000e2c:	00000400 	.word	0x00000400
 8000e30:	2000020c 	.word	0x2000020c
 8000e34:	20001ec8 	.word	0x20001ec8

08000e38 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000e3c:	4b06      	ldr	r3, [pc, #24]	@ (8000e58 <SystemInit+0x20>)
 8000e3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e42:	4a05      	ldr	r2, [pc, #20]	@ (8000e58 <SystemInit+0x20>)
 8000e44:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e48:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e4c:	bf00      	nop
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop
 8000e58:	e000ed00 	.word	0xe000ed00

08000e5c <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b088      	sub	sp, #32
 8000e60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e62:	f107 0310 	add.w	r3, r7, #16
 8000e66:	2200      	movs	r2, #0
 8000e68:	601a      	str	r2, [r3, #0]
 8000e6a:	605a      	str	r2, [r3, #4]
 8000e6c:	609a      	str	r2, [r3, #8]
 8000e6e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e70:	1d3b      	adds	r3, r7, #4
 8000e72:	2200      	movs	r2, #0
 8000e74:	601a      	str	r2, [r3, #0]
 8000e76:	605a      	str	r2, [r3, #4]
 8000e78:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000e7a:	4b20      	ldr	r3, [pc, #128]	@ (8000efc <MX_TIM1_Init+0xa0>)
 8000e7c:	4a20      	ldr	r2, [pc, #128]	@ (8000f00 <MX_TIM1_Init+0xa4>)
 8000e7e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1000-1;
 8000e80:	4b1e      	ldr	r3, [pc, #120]	@ (8000efc <MX_TIM1_Init+0xa0>)
 8000e82:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000e86:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e88:	4b1c      	ldr	r3, [pc, #112]	@ (8000efc <MX_TIM1_Init+0xa0>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 169;
 8000e8e:	4b1b      	ldr	r3, [pc, #108]	@ (8000efc <MX_TIM1_Init+0xa0>)
 8000e90:	22a9      	movs	r2, #169	@ 0xa9
 8000e92:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e94:	4b19      	ldr	r3, [pc, #100]	@ (8000efc <MX_TIM1_Init+0xa0>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000e9a:	4b18      	ldr	r3, [pc, #96]	@ (8000efc <MX_TIM1_Init+0xa0>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ea0:	4b16      	ldr	r3, [pc, #88]	@ (8000efc <MX_TIM1_Init+0xa0>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000ea6:	4815      	ldr	r0, [pc, #84]	@ (8000efc <MX_TIM1_Init+0xa0>)
 8000ea8:	f003 fe7c 	bl	8004ba4 <HAL_TIM_Base_Init>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d001      	beq.n	8000eb6 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000eb2:	f7ff fca8 	bl	8000806 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000eb6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000eba:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000ebc:	f107 0310 	add.w	r3, r7, #16
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	480e      	ldr	r0, [pc, #56]	@ (8000efc <MX_TIM1_Init+0xa0>)
 8000ec4:	f004 f880 	bl	8004fc8 <HAL_TIM_ConfigClockSource>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d001      	beq.n	8000ed2 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000ece:	f7ff fc9a 	bl	8000806 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000eda:	2300      	movs	r3, #0
 8000edc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ede:	1d3b      	adds	r3, r7, #4
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	4806      	ldr	r0, [pc, #24]	@ (8000efc <MX_TIM1_Init+0xa0>)
 8000ee4:	f004 faca 	bl	800547c <HAL_TIMEx_MasterConfigSynchronization>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000eee:	f7ff fc8a 	bl	8000806 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000ef2:	bf00      	nop
 8000ef4:	3720      	adds	r7, #32
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	20000210 	.word	0x20000210
 8000f00:	40012c00 	.word	0x40012c00

08000f04 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b084      	sub	sp, #16
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4a0d      	ldr	r2, [pc, #52]	@ (8000f48 <HAL_TIM_Base_MspInit+0x44>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d113      	bne.n	8000f3e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000f16:	4b0d      	ldr	r3, [pc, #52]	@ (8000f4c <HAL_TIM_Base_MspInit+0x48>)
 8000f18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f1a:	4a0c      	ldr	r2, [pc, #48]	@ (8000f4c <HAL_TIM_Base_MspInit+0x48>)
 8000f1c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000f20:	6613      	str	r3, [r2, #96]	@ 0x60
 8000f22:	4b0a      	ldr	r3, [pc, #40]	@ (8000f4c <HAL_TIM_Base_MspInit+0x48>)
 8000f24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f26:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000f2a:	60fb      	str	r3, [r7, #12]
 8000f2c:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000f2e:	2200      	movs	r2, #0
 8000f30:	2100      	movs	r1, #0
 8000f32:	2019      	movs	r0, #25
 8000f34:	f000 fc0b 	bl	800174e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000f38:	2019      	movs	r0, #25
 8000f3a:	f000 fc22 	bl	8001782 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000f3e:	bf00      	nop
 8000f40:	3710      	adds	r7, #16
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	40012c00 	.word	0x40012c00
 8000f4c:	40021000 	.word	0x40021000

08000f50 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000f54:	4b23      	ldr	r3, [pc, #140]	@ (8000fe4 <MX_USART1_UART_Init+0x94>)
 8000f56:	4a24      	ldr	r2, [pc, #144]	@ (8000fe8 <MX_USART1_UART_Init+0x98>)
 8000f58:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 230400;
 8000f5a:	4b22      	ldr	r3, [pc, #136]	@ (8000fe4 <MX_USART1_UART_Init+0x94>)
 8000f5c:	f44f 3261 	mov.w	r2, #230400	@ 0x38400
 8000f60:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 8000f62:	4b20      	ldr	r3, [pc, #128]	@ (8000fe4 <MX_USART1_UART_Init+0x94>)
 8000f64:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000f68:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f6a:	4b1e      	ldr	r3, [pc, #120]	@ (8000fe4 <MX_USART1_UART_Init+0x94>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_EVEN;
 8000f70:	4b1c      	ldr	r3, [pc, #112]	@ (8000fe4 <MX_USART1_UART_Init+0x94>)
 8000f72:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000f76:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f78:	4b1a      	ldr	r3, [pc, #104]	@ (8000fe4 <MX_USART1_UART_Init+0x94>)
 8000f7a:	220c      	movs	r2, #12
 8000f7c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f7e:	4b19      	ldr	r3, [pc, #100]	@ (8000fe4 <MX_USART1_UART_Init+0x94>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f84:	4b17      	ldr	r3, [pc, #92]	@ (8000fe4 <MX_USART1_UART_Init+0x94>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f8a:	4b16      	ldr	r3, [pc, #88]	@ (8000fe4 <MX_USART1_UART_Init+0x94>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f90:	4b14      	ldr	r3, [pc, #80]	@ (8000fe4 <MX_USART1_UART_Init+0x94>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f96:	4b13      	ldr	r3, [pc, #76]	@ (8000fe4 <MX_USART1_UART_Init+0x94>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000f9c:	4811      	ldr	r0, [pc, #68]	@ (8000fe4 <MX_USART1_UART_Init+0x94>)
 8000f9e:	f004 fb35 	bl	800560c <HAL_UART_Init>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d001      	beq.n	8000fac <MX_USART1_UART_Init+0x5c>
  {
    Error_Handler();
 8000fa8:	f7ff fc2d 	bl	8000806 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000fac:	2100      	movs	r1, #0
 8000fae:	480d      	ldr	r0, [pc, #52]	@ (8000fe4 <MX_USART1_UART_Init+0x94>)
 8000fb0:	f006 f988 	bl	80072c4 <HAL_UARTEx_SetTxFifoThreshold>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <MX_USART1_UART_Init+0x6e>
  {
    Error_Handler();
 8000fba:	f7ff fc24 	bl	8000806 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000fbe:	2100      	movs	r1, #0
 8000fc0:	4808      	ldr	r0, [pc, #32]	@ (8000fe4 <MX_USART1_UART_Init+0x94>)
 8000fc2:	f006 f9bd 	bl	8007340 <HAL_UARTEx_SetRxFifoThreshold>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d001      	beq.n	8000fd0 <MX_USART1_UART_Init+0x80>
  {
    Error_Handler();
 8000fcc:	f7ff fc1b 	bl	8000806 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000fd0:	4804      	ldr	r0, [pc, #16]	@ (8000fe4 <MX_USART1_UART_Init+0x94>)
 8000fd2:	f006 f93e 	bl	8007252 <HAL_UARTEx_DisableFifoMode>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d001      	beq.n	8000fe0 <MX_USART1_UART_Init+0x90>
  {
    Error_Handler();
 8000fdc:	f7ff fc13 	bl	8000806 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000fe0:	bf00      	nop
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	2000025c 	.word	0x2000025c
 8000fe8:	40013800 	.word	0x40013800

08000fec <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b09a      	sub	sp, #104	@ 0x68
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	601a      	str	r2, [r3, #0]
 8000ffc:	605a      	str	r2, [r3, #4]
 8000ffe:	609a      	str	r2, [r3, #8]
 8001000:	60da      	str	r2, [r3, #12]
 8001002:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001004:	f107 0310 	add.w	r3, r7, #16
 8001008:	2244      	movs	r2, #68	@ 0x44
 800100a:	2100      	movs	r1, #0
 800100c:	4618      	mov	r0, r3
 800100e:	f00a fc7d 	bl	800b90c <memset>
  if(uartHandle->Instance==USART1)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4a38      	ldr	r2, [pc, #224]	@ (80010f8 <HAL_UART_MspInit+0x10c>)
 8001018:	4293      	cmp	r3, r2
 800101a:	d169      	bne.n	80010f0 <HAL_UART_MspInit+0x104>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800101c:	2301      	movs	r3, #1
 800101e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001020:	2300      	movs	r3, #0
 8001022:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001024:	f107 0310 	add.w	r3, r7, #16
 8001028:	4618      	mov	r0, r3
 800102a:	f003 fbcb 	bl	80047c4 <HAL_RCCEx_PeriphCLKConfig>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d001      	beq.n	8001038 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001034:	f7ff fbe7 	bl	8000806 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001038:	4b30      	ldr	r3, [pc, #192]	@ (80010fc <HAL_UART_MspInit+0x110>)
 800103a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800103c:	4a2f      	ldr	r2, [pc, #188]	@ (80010fc <HAL_UART_MspInit+0x110>)
 800103e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001042:	6613      	str	r3, [r2, #96]	@ 0x60
 8001044:	4b2d      	ldr	r3, [pc, #180]	@ (80010fc <HAL_UART_MspInit+0x110>)
 8001046:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001048:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800104c:	60fb      	str	r3, [r7, #12]
 800104e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001050:	4b2a      	ldr	r3, [pc, #168]	@ (80010fc <HAL_UART_MspInit+0x110>)
 8001052:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001054:	4a29      	ldr	r2, [pc, #164]	@ (80010fc <HAL_UART_MspInit+0x110>)
 8001056:	f043 0301 	orr.w	r3, r3, #1
 800105a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800105c:	4b27      	ldr	r3, [pc, #156]	@ (80010fc <HAL_UART_MspInit+0x110>)
 800105e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001060:	f003 0301 	and.w	r3, r3, #1
 8001064:	60bb      	str	r3, [r7, #8]
 8001066:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001068:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800106c:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800106e:	2302      	movs	r3, #2
 8001070:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001072:	2300      	movs	r3, #0
 8001074:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001076:	2300      	movs	r3, #0
 8001078:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800107a:	2307      	movs	r3, #7
 800107c:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800107e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001082:	4619      	mov	r1, r3
 8001084:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001088:	f000 fee2 	bl	8001e50 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 800108c:	4b1c      	ldr	r3, [pc, #112]	@ (8001100 <HAL_UART_MspInit+0x114>)
 800108e:	4a1d      	ldr	r2, [pc, #116]	@ (8001104 <HAL_UART_MspInit+0x118>)
 8001090:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8001092:	4b1b      	ldr	r3, [pc, #108]	@ (8001100 <HAL_UART_MspInit+0x114>)
 8001094:	2218      	movs	r2, #24
 8001096:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001098:	4b19      	ldr	r3, [pc, #100]	@ (8001100 <HAL_UART_MspInit+0x114>)
 800109a:	2200      	movs	r2, #0
 800109c:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800109e:	4b18      	ldr	r3, [pc, #96]	@ (8001100 <HAL_UART_MspInit+0x114>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80010a4:	4b16      	ldr	r3, [pc, #88]	@ (8001100 <HAL_UART_MspInit+0x114>)
 80010a6:	2280      	movs	r2, #128	@ 0x80
 80010a8:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80010aa:	4b15      	ldr	r3, [pc, #84]	@ (8001100 <HAL_UART_MspInit+0x114>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80010b0:	4b13      	ldr	r3, [pc, #76]	@ (8001100 <HAL_UART_MspInit+0x114>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80010b6:	4b12      	ldr	r3, [pc, #72]	@ (8001100 <HAL_UART_MspInit+0x114>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80010bc:	4b10      	ldr	r3, [pc, #64]	@ (8001100 <HAL_UART_MspInit+0x114>)
 80010be:	2200      	movs	r2, #0
 80010c0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80010c2:	480f      	ldr	r0, [pc, #60]	@ (8001100 <HAL_UART_MspInit+0x114>)
 80010c4:	f000 fb86 	bl	80017d4 <HAL_DMA_Init>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 80010ce:	f7ff fb9a 	bl	8000806 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	4a0a      	ldr	r2, [pc, #40]	@ (8001100 <HAL_UART_MspInit+0x114>)
 80010d6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80010da:	4a09      	ldr	r2, [pc, #36]	@ (8001100 <HAL_UART_MspInit+0x114>)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80010e0:	2200      	movs	r2, #0
 80010e2:	2100      	movs	r1, #0
 80010e4:	2025      	movs	r0, #37	@ 0x25
 80010e6:	f000 fb32 	bl	800174e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80010ea:	2025      	movs	r0, #37	@ 0x25
 80010ec:	f000 fb49 	bl	8001782 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80010f0:	bf00      	nop
 80010f2:	3768      	adds	r7, #104	@ 0x68
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	40013800 	.word	0x40013800
 80010fc:	40021000 	.word	0x40021000
 8001100:	200002f0 	.word	0x200002f0
 8001104:	40020008 	.word	0x40020008

08001108 <_write>:
uint8_t TestValue[10] = {0x70, 0x5D, 0x93, 0x15, 0x86, 0x00, 0x00, 0x00, 0x00, 0x00};             //checksum Test.

uint8_t UserButton_Flag = 0;

int _write(int file, char *ptr, int len)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b084      	sub	sp, #16
 800110c:	af00      	add	r7, sp, #0
 800110e:	60f8      	str	r0, [r7, #12]
 8001110:	60b9      	str	r1, [r7, #8]
 8001112:	607a      	str	r2, [r7, #4]
    // CDC_Transmit_FS(ptr, len);
    Q_Write(&USB_TX_Q, ptr, len);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	b29b      	uxth	r3, r3
 8001118:	461a      	mov	r2, r3
 800111a:	68b9      	ldr	r1, [r7, #8]
 800111c:	4803      	ldr	r0, [pc, #12]	@ (800112c <_write+0x24>)
 800111e:	f7ff fb97 	bl	8000850 <Q_Write>
    // User_CDC_Transmit_FS(ptr, len);
    return (len);
 8001122:	687b      	ldr	r3, [r7, #4]
}
 8001124:	4618      	mov	r0, r3
 8001126:	3710      	adds	r7, #16
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	2000035c 	.word	0x2000035c

08001130 <User_Toggle_Led>:

void User_Toggle_Led (void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
    if (TIM1_CNT_1 >= 1000)
 8001134:	4b07      	ldr	r3, [pc, #28]	@ (8001154 <User_Toggle_Led+0x24>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800113c:	d307      	bcc.n	800114e <User_Toggle_Led+0x1e>
    {
        TIM1_CNT_1 = 0;
 800113e:	4b05      	ldr	r3, [pc, #20]	@ (8001154 <User_Toggle_Led+0x24>)
 8001140:	2200      	movs	r2, #0
 8001142:	601a      	str	r2, [r3, #0]

        // HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_14);
        LED_ALL_TOGGLE;
 8001144:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 8001148:	4803      	ldr	r0, [pc, #12]	@ (8001158 <User_Toggle_Led+0x28>)
 800114a:	f001 f81b 	bl	8002184 <HAL_GPIO_TogglePin>
    }
}
 800114e:	bf00      	nop
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	20000350 	.word	0x20000350
 8001158:	48000800 	.word	0x48000800

0800115c <BootMessagePrint>:
    User_CDC_Transmit_FS((uint8_t *) USB_CdcTxBuffer_FS, strlen(USB_CdcTxBuffer_FS));
}
#else
/* Display Boot Message */
void BootMessagePrint (void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
    printf("-------------------------------------------------------------------\r\n");
 8001160:	480c      	ldr	r0, [pc, #48]	@ (8001194 <BootMessagePrint+0x38>)
 8001162:	f00a faf3 	bl	800b74c <puts>
    
    printf(" Project Name        : %s\r\n", PROJECT_NAME );
 8001166:	490c      	ldr	r1, [pc, #48]	@ (8001198 <BootMessagePrint+0x3c>)
 8001168:	480c      	ldr	r0, [pc, #48]	@ (800119c <BootMessagePrint+0x40>)
 800116a:	f00a fa87 	bl	800b67c <iprintf>
    
    printf(" - HW VERSION        : %s\r\n", STR_HW_VER );
 800116e:	490c      	ldr	r1, [pc, #48]	@ (80011a0 <BootMessagePrint+0x44>)
 8001170:	480c      	ldr	r0, [pc, #48]	@ (80011a4 <BootMessagePrint+0x48>)
 8001172:	f00a fa83 	bl	800b67c <iprintf>
    
    printf(" - FW VERSION        : %s\r\n", STR_FW_VER );
 8001176:	490c      	ldr	r1, [pc, #48]	@ (80011a8 <BootMessagePrint+0x4c>)
 8001178:	480c      	ldr	r0, [pc, #48]	@ (80011ac <BootMessagePrint+0x50>)
 800117a:	f00a fa7f 	bl	800b67c <iprintf>
    
    printf(" - BUILD TIME        : %s, %s\r\n", __DATE__, __TIME__ );
 800117e:	4a0c      	ldr	r2, [pc, #48]	@ (80011b0 <BootMessagePrint+0x54>)
 8001180:	490c      	ldr	r1, [pc, #48]	@ (80011b4 <BootMessagePrint+0x58>)
 8001182:	480d      	ldr	r0, [pc, #52]	@ (80011b8 <BootMessagePrint+0x5c>)
 8001184:	f00a fa7a 	bl	800b67c <iprintf>
    
    printf("-------------------------------------------------------------------\r\n" );
 8001188:	4802      	ldr	r0, [pc, #8]	@ (8001194 <BootMessagePrint+0x38>)
 800118a:	f00a fadf 	bl	800b74c <puts>
}
 800118e:	bf00      	nop
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	0800c448 	.word	0x0800c448
 8001198:	0800c490 	.word	0x0800c490
 800119c:	0800c4a0 	.word	0x0800c4a0
 80011a0:	0800c4bc 	.word	0x0800c4bc
 80011a4:	0800c4c4 	.word	0x0800c4c4
 80011a8:	0800c4e0 	.word	0x0800c4e0
 80011ac:	0800c4f4 	.word	0x0800c4f4
 80011b0:	0800c510 	.word	0x0800c510
 80011b4:	0800c51c 	.word	0x0800c51c
 80011b8:	0800c528 	.word	0x0800c528

080011bc <GetClockSourcePrint>:

/* Display Clcok Source Message */
void GetClockSourcePrint (void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0
    printf("-------------------------------------------------------------------\r\n");
 80011c0:	4819      	ldr	r0, [pc, #100]	@ (8001228 <GetClockSourcePrint+0x6c>)
 80011c2:	f00a fac3 	bl	800b74c <puts>
    
    printf(" - SYSTEM Clock Frequency        : %lu MHz\r\n", (HAL_RCC_GetSysClockFreq() /1000000));
 80011c6:	f003 fa1d 	bl	8004604 <HAL_RCC_GetSysClockFreq>
 80011ca:	4603      	mov	r3, r0
 80011cc:	4a17      	ldr	r2, [pc, #92]	@ (800122c <GetClockSourcePrint+0x70>)
 80011ce:	fba2 2303 	umull	r2, r3, r2, r3
 80011d2:	0c9b      	lsrs	r3, r3, #18
 80011d4:	4619      	mov	r1, r3
 80011d6:	4816      	ldr	r0, [pc, #88]	@ (8001230 <GetClockSourcePrint+0x74>)
 80011d8:	f00a fa50 	bl	800b67c <iprintf>
    
    printf(" - HCLK Clock   Frequency        : %lu MHz\r\n", (HAL_RCC_GetHCLKFreq() / 1000000));
 80011dc:	f003 fa74 	bl	80046c8 <HAL_RCC_GetHCLKFreq>
 80011e0:	4603      	mov	r3, r0
 80011e2:	4a12      	ldr	r2, [pc, #72]	@ (800122c <GetClockSourcePrint+0x70>)
 80011e4:	fba2 2303 	umull	r2, r3, r2, r3
 80011e8:	0c9b      	lsrs	r3, r3, #18
 80011ea:	4619      	mov	r1, r3
 80011ec:	4811      	ldr	r0, [pc, #68]	@ (8001234 <GetClockSourcePrint+0x78>)
 80011ee:	f00a fa45 	bl	800b67c <iprintf>
    
    printf(" - PCLK1 Clock  Frequency        : %lu MHz\r\n", (HAL_RCC_GetPCLK1Freq() / 1000000));
 80011f2:	f003 fa75 	bl	80046e0 <HAL_RCC_GetPCLK1Freq>
 80011f6:	4603      	mov	r3, r0
 80011f8:	4a0c      	ldr	r2, [pc, #48]	@ (800122c <GetClockSourcePrint+0x70>)
 80011fa:	fba2 2303 	umull	r2, r3, r2, r3
 80011fe:	0c9b      	lsrs	r3, r3, #18
 8001200:	4619      	mov	r1, r3
 8001202:	480d      	ldr	r0, [pc, #52]	@ (8001238 <GetClockSourcePrint+0x7c>)
 8001204:	f00a fa3a 	bl	800b67c <iprintf>
    
    printf(" - PCLK2 Clock  Frequency        : %lu MHz\r\n", (HAL_RCC_GetPCLK2Freq() / 1000000));
 8001208:	f003 fa80 	bl	800470c <HAL_RCC_GetPCLK2Freq>
 800120c:	4603      	mov	r3, r0
 800120e:	4a07      	ldr	r2, [pc, #28]	@ (800122c <GetClockSourcePrint+0x70>)
 8001210:	fba2 2303 	umull	r2, r3, r2, r3
 8001214:	0c9b      	lsrs	r3, r3, #18
 8001216:	4619      	mov	r1, r3
 8001218:	4808      	ldr	r0, [pc, #32]	@ (800123c <GetClockSourcePrint+0x80>)
 800121a:	f00a fa2f 	bl	800b67c <iprintf>
    
    printf("-------------------------------------------------------------------\r\n" );
 800121e:	4802      	ldr	r0, [pc, #8]	@ (8001228 <GetClockSourcePrint+0x6c>)
 8001220:	f00a fa94 	bl	800b74c <puts>
}
 8001224:	bf00      	nop
 8001226:	bd80      	pop	{r7, pc}
 8001228:	0800c448 	.word	0x0800c448
 800122c:	431bde83 	.word	0x431bde83
 8001230:	0800c548 	.word	0x0800c548
 8001234:	0800c578 	.word	0x0800c578
 8001238:	0800c5a8 	.word	0x0800c5a8
 800123c:	0800c5d8 	.word	0x0800c5d8

08001240 <Decode_CKS_GetChecksum>:
    //     return 0;
    // }
}

static uint8_t Decode_CKS_GetChecksum (const uint8_t * pData, uint8_t length)
{
 8001240:	b480      	push	{r7}
 8001242:	b087      	sub	sp, #28
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
 8001248:	460b      	mov	r3, r1
 800124a:	70fb      	strb	r3, [r7, #3]
    uint8_t ck8 = 0x52;
 800124c:	2352      	movs	r3, #82	@ 0x52
 800124e:	75fb      	strb	r3, [r7, #23]
    uint8_t checksumsize = 0;
 8001250:	2300      	movs	r3, #0
 8001252:	757b      	strb	r3, [r7, #21]

    checksumsize = length;
 8001254:	78fb      	ldrb	r3, [r7, #3]
 8001256:	757b      	strb	r3, [r7, #21]

    // ck8 ^= *pData++; // MC Check 

    // ck8 ^= *pData++ & 0xC0; // CKT 6b clear. CKT Check
    // for (uint8_t i = 0; i < checksumsize; i++)
    for (uint8_t i = 0; i < checksumsize; i++)
 8001258:	2300      	movs	r3, #0
 800125a:	75bb      	strb	r3, [r7, #22]
 800125c:	e009      	b.n	8001272 <Decode_CKS_GetChecksum+0x32>
    {
        ck8 ^= *pData++;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	1c5a      	adds	r2, r3, #1
 8001262:	607a      	str	r2, [r7, #4]
 8001264:	781a      	ldrb	r2, [r3, #0]
 8001266:	7dfb      	ldrb	r3, [r7, #23]
 8001268:	4053      	eors	r3, r2
 800126a:	75fb      	strb	r3, [r7, #23]
    for (uint8_t i = 0; i < checksumsize; i++)
 800126c:	7dbb      	ldrb	r3, [r7, #22]
 800126e:	3301      	adds	r3, #1
 8001270:	75bb      	strb	r3, [r7, #22]
 8001272:	7dba      	ldrb	r2, [r7, #22]
 8001274:	7d7b      	ldrb	r3, [r7, #21]
 8001276:	429a      	cmp	r2, r3
 8001278:	d3f1      	bcc.n	800125e <Decode_CKS_GetChecksum+0x1e>
    // {
    //         ck8 ^= *pData++;
    // }

    //Section A.1.6
    uint8_t bit5 = ((ck8 >> 7) & 1U) ^ ((ck8 >> 5) & 1U) ^ ((ck8 >> 3) & 1U) ^ ((ck8 >> 1) & 1U);
 800127a:	7dfb      	ldrb	r3, [r7, #23]
 800127c:	09db      	lsrs	r3, r3, #7
 800127e:	b2da      	uxtb	r2, r3
 8001280:	7dfb      	ldrb	r3, [r7, #23]
 8001282:	095b      	lsrs	r3, r3, #5
 8001284:	b2db      	uxtb	r3, r3
 8001286:	4053      	eors	r3, r2
 8001288:	b2da      	uxtb	r2, r3
 800128a:	7dfb      	ldrb	r3, [r7, #23]
 800128c:	08db      	lsrs	r3, r3, #3
 800128e:	b2db      	uxtb	r3, r3
 8001290:	4053      	eors	r3, r2
 8001292:	b2da      	uxtb	r2, r3
 8001294:	7dfb      	ldrb	r3, [r7, #23]
 8001296:	085b      	lsrs	r3, r3, #1
 8001298:	b2db      	uxtb	r3, r3
 800129a:	4053      	eors	r3, r2
 800129c:	b2db      	uxtb	r3, r3
 800129e:	f003 0301 	and.w	r3, r3, #1
 80012a2:	753b      	strb	r3, [r7, #20]
    uint8_t bit4 = ((ck8 >> 6) & 1U) ^ ((ck8 >> 4) & 1U) ^ ((ck8 >> 2) & 1U) ^ (ck8 & 1U);
 80012a4:	7dfb      	ldrb	r3, [r7, #23]
 80012a6:	099b      	lsrs	r3, r3, #6
 80012a8:	b2da      	uxtb	r2, r3
 80012aa:	7dfb      	ldrb	r3, [r7, #23]
 80012ac:	091b      	lsrs	r3, r3, #4
 80012ae:	b2db      	uxtb	r3, r3
 80012b0:	4053      	eors	r3, r2
 80012b2:	b2da      	uxtb	r2, r3
 80012b4:	7dfb      	ldrb	r3, [r7, #23]
 80012b6:	089b      	lsrs	r3, r3, #2
 80012b8:	b2db      	uxtb	r3, r3
 80012ba:	4053      	eors	r3, r2
 80012bc:	b2da      	uxtb	r2, r3
 80012be:	7dfb      	ldrb	r3, [r7, #23]
 80012c0:	4053      	eors	r3, r2
 80012c2:	b2db      	uxtb	r3, r3
 80012c4:	f003 0301 	and.w	r3, r3, #1
 80012c8:	74fb      	strb	r3, [r7, #19]
    uint8_t bit3 = ((ck8 >> 7) & 1U) ^ ((ck8 >> 6) & 1U);
 80012ca:	7dfb      	ldrb	r3, [r7, #23]
 80012cc:	09db      	lsrs	r3, r3, #7
 80012ce:	b2da      	uxtb	r2, r3
 80012d0:	7dfb      	ldrb	r3, [r7, #23]
 80012d2:	099b      	lsrs	r3, r3, #6
 80012d4:	b2db      	uxtb	r3, r3
 80012d6:	4053      	eors	r3, r2
 80012d8:	b2db      	uxtb	r3, r3
 80012da:	f003 0301 	and.w	r3, r3, #1
 80012de:	74bb      	strb	r3, [r7, #18]
    uint8_t bit2 = ((ck8 >> 5) & 1U) ^ ((ck8 >> 4) & 1U);
 80012e0:	7dfb      	ldrb	r3, [r7, #23]
 80012e2:	095b      	lsrs	r3, r3, #5
 80012e4:	b2da      	uxtb	r2, r3
 80012e6:	7dfb      	ldrb	r3, [r7, #23]
 80012e8:	091b      	lsrs	r3, r3, #4
 80012ea:	b2db      	uxtb	r3, r3
 80012ec:	4053      	eors	r3, r2
 80012ee:	b2db      	uxtb	r3, r3
 80012f0:	f003 0301 	and.w	r3, r3, #1
 80012f4:	747b      	strb	r3, [r7, #17]
    uint8_t bit1 = ((ck8 >> 3) & 1U) ^ ((ck8 >> 2) & 1U);
 80012f6:	7dfb      	ldrb	r3, [r7, #23]
 80012f8:	08db      	lsrs	r3, r3, #3
 80012fa:	b2da      	uxtb	r2, r3
 80012fc:	7dfb      	ldrb	r3, [r7, #23]
 80012fe:	089b      	lsrs	r3, r3, #2
 8001300:	b2db      	uxtb	r3, r3
 8001302:	4053      	eors	r3, r2
 8001304:	b2db      	uxtb	r3, r3
 8001306:	f003 0301 	and.w	r3, r3, #1
 800130a:	743b      	strb	r3, [r7, #16]
    uint8_t bit0 = ((ck8 >> 1) & 1U) ^ ((ck8 & 1U));
 800130c:	7dfb      	ldrb	r3, [r7, #23]
 800130e:	085b      	lsrs	r3, r3, #1
 8001310:	b2da      	uxtb	r2, r3
 8001312:	7dfb      	ldrb	r3, [r7, #23]
 8001314:	4053      	eors	r3, r2
 8001316:	b2db      	uxtb	r3, r3
 8001318:	f003 0301 	and.w	r3, r3, #1
 800131c:	73fb      	strb	r3, [r7, #15]
    uint8_t ck6 =   bit5 << 5 |
 800131e:	7d3b      	ldrb	r3, [r7, #20]
 8001320:	015b      	lsls	r3, r3, #5
 8001322:	b25a      	sxtb	r2, r3
                    bit4 << 4 |
 8001324:	7cfb      	ldrb	r3, [r7, #19]
 8001326:	011b      	lsls	r3, r3, #4
    uint8_t ck6 =   bit5 << 5 |
 8001328:	b25b      	sxtb	r3, r3
 800132a:	4313      	orrs	r3, r2
 800132c:	b25a      	sxtb	r2, r3
                    bit3 << 3 |
 800132e:	7cbb      	ldrb	r3, [r7, #18]
 8001330:	00db      	lsls	r3, r3, #3
                    bit4 << 4 |
 8001332:	b25b      	sxtb	r3, r3
 8001334:	4313      	orrs	r3, r2
 8001336:	b25a      	sxtb	r2, r3
                    bit2 << 2 |
 8001338:	7c7b      	ldrb	r3, [r7, #17]
 800133a:	009b      	lsls	r3, r3, #2
                    bit3 << 3 |
 800133c:	b25b      	sxtb	r3, r3
 800133e:	4313      	orrs	r3, r2
 8001340:	b25a      	sxtb	r2, r3
                    bit1 << 1 |
 8001342:	7c3b      	ldrb	r3, [r7, #16]
 8001344:	005b      	lsls	r3, r3, #1
                    bit2 << 2 |
 8001346:	b25b      	sxtb	r3, r3
 8001348:	4313      	orrs	r3, r2
 800134a:	b25a      	sxtb	r2, r3
                    bit1 << 1 |
 800134c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001350:	4313      	orrs	r3, r2
 8001352:	b25b      	sxtb	r3, r3
    uint8_t ck6 =   bit5 << 5 |
 8001354:	73bb      	strb	r3, [r7, #14]
                    bit0;
    return ck6;
 8001356:	7bbb      	ldrb	r3, [r7, #14]
}
 8001358:	4618      	mov	r0, r3
 800135a:	371c      	adds	r7, #28
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr

08001364 <IOL_PageTest>:
    // mseq[mseq_cnt].Master_checksum = Decode_CKT_GetChecksum((uint8_t *) uart2_rx_IDLE_buf, (rxdataSize - mseq[mseq_cnt + cks_offset].Device_octet_cnt));
}

#if 1
void IOL_PageTest (uint16_t size)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b084      	sub	sp, #16
 8001368:	af00      	add	r7, sp, #0
 800136a:	4603      	mov	r3, r0
 800136c:	80fb      	strh	r3, [r7, #6]
    uint8_t rxdataSize = 0;
 800136e:	2300      	movs	r3, #0
 8001370:	73fb      	strb	r3, [r7, #15]

    uint8_t i = 0;
 8001372:	2300      	movs	r3, #0
 8001374:	73bb      	strb	r3, [r7, #14]

    rxdataSize = (uint8_t)size;
 8001376:	88fb      	ldrh	r3, [r7, #6]
 8001378:	73fb      	strb	r3, [r7, #15]

    IOL_ENABLE;
 800137a:	2201      	movs	r2, #1
 800137c:	2140      	movs	r1, #64	@ 0x40
 800137e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001382:	f000 fee7 	bl	8002154 <HAL_GPIO_WritePin>
    // IOL_Page1_Packet[0] = 0x49;
    IOL_Page1_Packet[0] = IOL_Page1_SeqValue[Page1_seq++];;
 8001386:	4b10      	ldr	r3, [pc, #64]	@ (80013c8 <IOL_PageTest+0x64>)
 8001388:	781b      	ldrb	r3, [r3, #0]
 800138a:	1c5a      	adds	r2, r3, #1
 800138c:	b2d1      	uxtb	r1, r2
 800138e:	4a0e      	ldr	r2, [pc, #56]	@ (80013c8 <IOL_PageTest+0x64>)
 8001390:	7011      	strb	r1, [r2, #0]
 8001392:	461a      	mov	r2, r3
 8001394:	4b0d      	ldr	r3, [pc, #52]	@ (80013cc <IOL_PageTest+0x68>)
 8001396:	5c9a      	ldrb	r2, [r3, r2]
 8001398:	4b0d      	ldr	r3, [pc, #52]	@ (80013d0 <IOL_PageTest+0x6c>)
 800139a:	701a      	strb	r2, [r3, #0]
    
    IOL_Page1_Packet[1] = Decode_CKS_GetChecksum(&IOL_Page1_Packet[0], 1);
 800139c:	2101      	movs	r1, #1
 800139e:	480c      	ldr	r0, [pc, #48]	@ (80013d0 <IOL_PageTest+0x6c>)
 80013a0:	f7ff ff4e 	bl	8001240 <Decode_CKS_GetChecksum>
 80013a4:	4603      	mov	r3, r0
 80013a6:	461a      	mov	r2, r3
 80013a8:	4b09      	ldr	r3, [pc, #36]	@ (80013d0 <IOL_PageTest+0x6c>)
 80013aa:	705a      	strb	r2, [r3, #1]

    if (HAL_UART_Transmit_IT(&huart1, (uint8_t *) IOL_Page1_Packet, 2) != HAL_OK)
 80013ac:	2202      	movs	r2, #2
 80013ae:	4908      	ldr	r1, [pc, #32]	@ (80013d0 <IOL_PageTest+0x6c>)
 80013b0:	4808      	ldr	r0, [pc, #32]	@ (80013d4 <IOL_PageTest+0x70>)
 80013b2:	f004 f97b 	bl	80056ac <HAL_UART_Transmit_IT>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d001      	beq.n	80013c0 <IOL_PageTest+0x5c>
    {
        Error_Handler();
 80013bc:	f7ff fa23 	bl	8000806 <Error_Handler>
    }
    // HAL_UART_Transmit(&huart1,(uint8_t *) IOL_Page1_Packet, 2, 10);
    // IOL_DISABLE;
}
 80013c0:	bf00      	nop
 80013c2:	3710      	adds	r7, #16
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	20000ba6 	.word	0x20000ba6
 80013cc:	20000004 	.word	0x20000004
 80013d0:	20000ba4 	.word	0x20000ba4
 80013d4:	2000025c 	.word	0x2000025c

080013d8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80013d8:	480d      	ldr	r0, [pc, #52]	@ (8001410 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80013da:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80013dc:	f7ff fd2c 	bl	8000e38 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013e0:	480c      	ldr	r0, [pc, #48]	@ (8001414 <LoopForever+0x6>)
  ldr r1, =_edata
 80013e2:	490d      	ldr	r1, [pc, #52]	@ (8001418 <LoopForever+0xa>)
  ldr r2, =_sidata
 80013e4:	4a0d      	ldr	r2, [pc, #52]	@ (800141c <LoopForever+0xe>)
  movs r3, #0
 80013e6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80013e8:	e002      	b.n	80013f0 <LoopCopyDataInit>

080013ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013ee:	3304      	adds	r3, #4

080013f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013f4:	d3f9      	bcc.n	80013ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013f6:	4a0a      	ldr	r2, [pc, #40]	@ (8001420 <LoopForever+0x12>)
  ldr r4, =_ebss
 80013f8:	4c0a      	ldr	r4, [pc, #40]	@ (8001424 <LoopForever+0x16>)
  movs r3, #0
 80013fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013fc:	e001      	b.n	8001402 <LoopFillZerobss>

080013fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001400:	3204      	adds	r2, #4

08001402 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001402:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001404:	d3fb      	bcc.n	80013fe <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8001406:	f00a fad5 	bl	800b9b4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800140a:	f7ff f973 	bl	80006f4 <main>

0800140e <LoopForever>:

LoopForever:
    b LoopForever
 800140e:	e7fe      	b.n	800140e <LoopForever>
  ldr   r0, =_estack
 8001410:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001414:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001418:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 800141c:	0800c6d4 	.word	0x0800c6d4
  ldr r2, =_sbss
 8001420:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8001424:	20001ec8 	.word	0x20001ec8

08001428 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001428:	e7fe      	b.n	8001428 <ADC1_2_IRQHandler>

0800142a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800142a:	b580      	push	{r7, lr}
 800142c:	b082      	sub	sp, #8
 800142e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001430:	2300      	movs	r3, #0
 8001432:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001434:	2003      	movs	r0, #3
 8001436:	f000 f97f 	bl	8001738 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800143a:	200f      	movs	r0, #15
 800143c:	f000 f80e 	bl	800145c <HAL_InitTick>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d002      	beq.n	800144c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001446:	2301      	movs	r3, #1
 8001448:	71fb      	strb	r3, [r7, #7]
 800144a:	e001      	b.n	8001450 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800144c:	f7ff fb08 	bl	8000a60 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001450:	79fb      	ldrb	r3, [r7, #7]

}
 8001452:	4618      	mov	r0, r3
 8001454:	3708      	adds	r7, #8
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
	...

0800145c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b084      	sub	sp, #16
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001464:	2300      	movs	r3, #0
 8001466:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001468:	4b16      	ldr	r3, [pc, #88]	@ (80014c4 <HAL_InitTick+0x68>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d022      	beq.n	80014b6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001470:	4b15      	ldr	r3, [pc, #84]	@ (80014c8 <HAL_InitTick+0x6c>)
 8001472:	681a      	ldr	r2, [r3, #0]
 8001474:	4b13      	ldr	r3, [pc, #76]	@ (80014c4 <HAL_InitTick+0x68>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800147c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001480:	fbb2 f3f3 	udiv	r3, r2, r3
 8001484:	4618      	mov	r0, r3
 8001486:	f000 f998 	bl	80017ba <HAL_SYSTICK_Config>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d10f      	bne.n	80014b0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2b0f      	cmp	r3, #15
 8001494:	d809      	bhi.n	80014aa <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001496:	2200      	movs	r2, #0
 8001498:	6879      	ldr	r1, [r7, #4]
 800149a:	f04f 30ff 	mov.w	r0, #4294967295
 800149e:	f000 f956 	bl	800174e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80014a2:	4a0a      	ldr	r2, [pc, #40]	@ (80014cc <HAL_InitTick+0x70>)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6013      	str	r3, [r2, #0]
 80014a8:	e007      	b.n	80014ba <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80014aa:	2301      	movs	r3, #1
 80014ac:	73fb      	strb	r3, [r7, #15]
 80014ae:	e004      	b.n	80014ba <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80014b0:	2301      	movs	r3, #1
 80014b2:	73fb      	strb	r3, [r7, #15]
 80014b4:	e001      	b.n	80014ba <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80014b6:	2301      	movs	r3, #1
 80014b8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80014ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80014bc:	4618      	mov	r0, r3
 80014be:	3710      	adds	r7, #16
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	20000018 	.word	0x20000018
 80014c8:	20000000 	.word	0x20000000
 80014cc:	20000014 	.word	0x20000014

080014d0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014d4:	4b05      	ldr	r3, [pc, #20]	@ (80014ec <HAL_IncTick+0x1c>)
 80014d6:	681a      	ldr	r2, [r3, #0]
 80014d8:	4b05      	ldr	r3, [pc, #20]	@ (80014f0 <HAL_IncTick+0x20>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4413      	add	r3, r2
 80014de:	4a03      	ldr	r2, [pc, #12]	@ (80014ec <HAL_IncTick+0x1c>)
 80014e0:	6013      	str	r3, [r2, #0]
}
 80014e2:	bf00      	nop
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr
 80014ec:	20000ba8 	.word	0x20000ba8
 80014f0:	20000018 	.word	0x20000018

080014f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  return uwTick;
 80014f8:	4b03      	ldr	r3, [pc, #12]	@ (8001508 <HAL_GetTick+0x14>)
 80014fa:	681b      	ldr	r3, [r3, #0]
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr
 8001506:	bf00      	nop
 8001508:	20000ba8 	.word	0x20000ba8

0800150c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b084      	sub	sp, #16
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001514:	f7ff ffee 	bl	80014f4 <HAL_GetTick>
 8001518:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001524:	d004      	beq.n	8001530 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001526:	4b09      	ldr	r3, [pc, #36]	@ (800154c <HAL_Delay+0x40>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	68fa      	ldr	r2, [r7, #12]
 800152c:	4413      	add	r3, r2
 800152e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001530:	bf00      	nop
 8001532:	f7ff ffdf 	bl	80014f4 <HAL_GetTick>
 8001536:	4602      	mov	r2, r0
 8001538:	68bb      	ldr	r3, [r7, #8]
 800153a:	1ad3      	subs	r3, r2, r3
 800153c:	68fa      	ldr	r2, [r7, #12]
 800153e:	429a      	cmp	r2, r3
 8001540:	d8f7      	bhi.n	8001532 <HAL_Delay+0x26>
  {
  }
}
 8001542:	bf00      	nop
 8001544:	bf00      	nop
 8001546:	3710      	adds	r7, #16
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	20000018 	.word	0x20000018

08001550 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001550:	b480      	push	{r7}
 8001552:	b085      	sub	sp, #20
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	f003 0307 	and.w	r3, r3, #7
 800155e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001560:	4b0c      	ldr	r3, [pc, #48]	@ (8001594 <__NVIC_SetPriorityGrouping+0x44>)
 8001562:	68db      	ldr	r3, [r3, #12]
 8001564:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001566:	68ba      	ldr	r2, [r7, #8]
 8001568:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800156c:	4013      	ands	r3, r2
 800156e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001574:	68bb      	ldr	r3, [r7, #8]
 8001576:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001578:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800157c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001580:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001582:	4a04      	ldr	r2, [pc, #16]	@ (8001594 <__NVIC_SetPriorityGrouping+0x44>)
 8001584:	68bb      	ldr	r3, [r7, #8]
 8001586:	60d3      	str	r3, [r2, #12]
}
 8001588:	bf00      	nop
 800158a:	3714      	adds	r7, #20
 800158c:	46bd      	mov	sp, r7
 800158e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001592:	4770      	bx	lr
 8001594:	e000ed00 	.word	0xe000ed00

08001598 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800159c:	4b04      	ldr	r3, [pc, #16]	@ (80015b0 <__NVIC_GetPriorityGrouping+0x18>)
 800159e:	68db      	ldr	r3, [r3, #12]
 80015a0:	0a1b      	lsrs	r3, r3, #8
 80015a2:	f003 0307 	and.w	r3, r3, #7
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr
 80015b0:	e000ed00 	.word	0xe000ed00

080015b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b083      	sub	sp, #12
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	4603      	mov	r3, r0
 80015bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	db0b      	blt.n	80015de <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015c6:	79fb      	ldrb	r3, [r7, #7]
 80015c8:	f003 021f 	and.w	r2, r3, #31
 80015cc:	4907      	ldr	r1, [pc, #28]	@ (80015ec <__NVIC_EnableIRQ+0x38>)
 80015ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015d2:	095b      	lsrs	r3, r3, #5
 80015d4:	2001      	movs	r0, #1
 80015d6:	fa00 f202 	lsl.w	r2, r0, r2
 80015da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80015de:	bf00      	nop
 80015e0:	370c      	adds	r7, #12
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr
 80015ea:	bf00      	nop
 80015ec:	e000e100 	.word	0xe000e100

080015f0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b083      	sub	sp, #12
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	4603      	mov	r3, r0
 80015f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	db12      	blt.n	8001628 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001602:	79fb      	ldrb	r3, [r7, #7]
 8001604:	f003 021f 	and.w	r2, r3, #31
 8001608:	490a      	ldr	r1, [pc, #40]	@ (8001634 <__NVIC_DisableIRQ+0x44>)
 800160a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800160e:	095b      	lsrs	r3, r3, #5
 8001610:	2001      	movs	r0, #1
 8001612:	fa00 f202 	lsl.w	r2, r0, r2
 8001616:	3320      	adds	r3, #32
 8001618:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800161c:	f3bf 8f4f 	dsb	sy
}
 8001620:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001622:	f3bf 8f6f 	isb	sy
}
 8001626:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001628:	bf00      	nop
 800162a:	370c      	adds	r7, #12
 800162c:	46bd      	mov	sp, r7
 800162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001632:	4770      	bx	lr
 8001634:	e000e100 	.word	0xe000e100

08001638 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001638:	b480      	push	{r7}
 800163a:	b083      	sub	sp, #12
 800163c:	af00      	add	r7, sp, #0
 800163e:	4603      	mov	r3, r0
 8001640:	6039      	str	r1, [r7, #0]
 8001642:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001644:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001648:	2b00      	cmp	r3, #0
 800164a:	db0a      	blt.n	8001662 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	b2da      	uxtb	r2, r3
 8001650:	490c      	ldr	r1, [pc, #48]	@ (8001684 <__NVIC_SetPriority+0x4c>)
 8001652:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001656:	0112      	lsls	r2, r2, #4
 8001658:	b2d2      	uxtb	r2, r2
 800165a:	440b      	add	r3, r1
 800165c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001660:	e00a      	b.n	8001678 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	b2da      	uxtb	r2, r3
 8001666:	4908      	ldr	r1, [pc, #32]	@ (8001688 <__NVIC_SetPriority+0x50>)
 8001668:	79fb      	ldrb	r3, [r7, #7]
 800166a:	f003 030f 	and.w	r3, r3, #15
 800166e:	3b04      	subs	r3, #4
 8001670:	0112      	lsls	r2, r2, #4
 8001672:	b2d2      	uxtb	r2, r2
 8001674:	440b      	add	r3, r1
 8001676:	761a      	strb	r2, [r3, #24]
}
 8001678:	bf00      	nop
 800167a:	370c      	adds	r7, #12
 800167c:	46bd      	mov	sp, r7
 800167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001682:	4770      	bx	lr
 8001684:	e000e100 	.word	0xe000e100
 8001688:	e000ed00 	.word	0xe000ed00

0800168c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800168c:	b480      	push	{r7}
 800168e:	b089      	sub	sp, #36	@ 0x24
 8001690:	af00      	add	r7, sp, #0
 8001692:	60f8      	str	r0, [r7, #12]
 8001694:	60b9      	str	r1, [r7, #8]
 8001696:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	f003 0307 	and.w	r3, r3, #7
 800169e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016a0:	69fb      	ldr	r3, [r7, #28]
 80016a2:	f1c3 0307 	rsb	r3, r3, #7
 80016a6:	2b04      	cmp	r3, #4
 80016a8:	bf28      	it	cs
 80016aa:	2304      	movcs	r3, #4
 80016ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016ae:	69fb      	ldr	r3, [r7, #28]
 80016b0:	3304      	adds	r3, #4
 80016b2:	2b06      	cmp	r3, #6
 80016b4:	d902      	bls.n	80016bc <NVIC_EncodePriority+0x30>
 80016b6:	69fb      	ldr	r3, [r7, #28]
 80016b8:	3b03      	subs	r3, #3
 80016ba:	e000      	b.n	80016be <NVIC_EncodePriority+0x32>
 80016bc:	2300      	movs	r3, #0
 80016be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016c0:	f04f 32ff 	mov.w	r2, #4294967295
 80016c4:	69bb      	ldr	r3, [r7, #24]
 80016c6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ca:	43da      	mvns	r2, r3
 80016cc:	68bb      	ldr	r3, [r7, #8]
 80016ce:	401a      	ands	r2, r3
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016d4:	f04f 31ff 	mov.w	r1, #4294967295
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	fa01 f303 	lsl.w	r3, r1, r3
 80016de:	43d9      	mvns	r1, r3
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016e4:	4313      	orrs	r3, r2
         );
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	3724      	adds	r7, #36	@ 0x24
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr
	...

080016f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	3b01      	subs	r3, #1
 8001700:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001704:	d301      	bcc.n	800170a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001706:	2301      	movs	r3, #1
 8001708:	e00f      	b.n	800172a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800170a:	4a0a      	ldr	r2, [pc, #40]	@ (8001734 <SysTick_Config+0x40>)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	3b01      	subs	r3, #1
 8001710:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001712:	210f      	movs	r1, #15
 8001714:	f04f 30ff 	mov.w	r0, #4294967295
 8001718:	f7ff ff8e 	bl	8001638 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800171c:	4b05      	ldr	r3, [pc, #20]	@ (8001734 <SysTick_Config+0x40>)
 800171e:	2200      	movs	r2, #0
 8001720:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001722:	4b04      	ldr	r3, [pc, #16]	@ (8001734 <SysTick_Config+0x40>)
 8001724:	2207      	movs	r2, #7
 8001726:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001728:	2300      	movs	r3, #0
}
 800172a:	4618      	mov	r0, r3
 800172c:	3708      	adds	r7, #8
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	e000e010 	.word	0xe000e010

08001738 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b082      	sub	sp, #8
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001740:	6878      	ldr	r0, [r7, #4]
 8001742:	f7ff ff05 	bl	8001550 <__NVIC_SetPriorityGrouping>
}
 8001746:	bf00      	nop
 8001748:	3708      	adds	r7, #8
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}

0800174e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800174e:	b580      	push	{r7, lr}
 8001750:	b086      	sub	sp, #24
 8001752:	af00      	add	r7, sp, #0
 8001754:	4603      	mov	r3, r0
 8001756:	60b9      	str	r1, [r7, #8]
 8001758:	607a      	str	r2, [r7, #4]
 800175a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800175c:	f7ff ff1c 	bl	8001598 <__NVIC_GetPriorityGrouping>
 8001760:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001762:	687a      	ldr	r2, [r7, #4]
 8001764:	68b9      	ldr	r1, [r7, #8]
 8001766:	6978      	ldr	r0, [r7, #20]
 8001768:	f7ff ff90 	bl	800168c <NVIC_EncodePriority>
 800176c:	4602      	mov	r2, r0
 800176e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001772:	4611      	mov	r1, r2
 8001774:	4618      	mov	r0, r3
 8001776:	f7ff ff5f 	bl	8001638 <__NVIC_SetPriority>
}
 800177a:	bf00      	nop
 800177c:	3718      	adds	r7, #24
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}

08001782 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001782:	b580      	push	{r7, lr}
 8001784:	b082      	sub	sp, #8
 8001786:	af00      	add	r7, sp, #0
 8001788:	4603      	mov	r3, r0
 800178a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800178c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001790:	4618      	mov	r0, r3
 8001792:	f7ff ff0f 	bl	80015b4 <__NVIC_EnableIRQ>
}
 8001796:	bf00      	nop
 8001798:	3708      	adds	r7, #8
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}

0800179e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800179e:	b580      	push	{r7, lr}
 80017a0:	b082      	sub	sp, #8
 80017a2:	af00      	add	r7, sp, #0
 80017a4:	4603      	mov	r3, r0
 80017a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80017a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ac:	4618      	mov	r0, r3
 80017ae:	f7ff ff1f 	bl	80015f0 <__NVIC_DisableIRQ>
}
 80017b2:	bf00      	nop
 80017b4:	3708      	adds	r7, #8
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}

080017ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017ba:	b580      	push	{r7, lr}
 80017bc:	b082      	sub	sp, #8
 80017be:	af00      	add	r7, sp, #0
 80017c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017c2:	6878      	ldr	r0, [r7, #4]
 80017c4:	f7ff ff96 	bl	80016f4 <SysTick_Config>
 80017c8:	4603      	mov	r3, r0
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	3708      	adds	r7, #8
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
	...

080017d4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b084      	sub	sp, #16
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d101      	bne.n	80017e6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80017e2:	2301      	movs	r3, #1
 80017e4:	e08d      	b.n	8001902 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	461a      	mov	r2, r3
 80017ec:	4b47      	ldr	r3, [pc, #284]	@ (800190c <HAL_DMA_Init+0x138>)
 80017ee:	429a      	cmp	r2, r3
 80017f0:	d80f      	bhi.n	8001812 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	461a      	mov	r2, r3
 80017f8:	4b45      	ldr	r3, [pc, #276]	@ (8001910 <HAL_DMA_Init+0x13c>)
 80017fa:	4413      	add	r3, r2
 80017fc:	4a45      	ldr	r2, [pc, #276]	@ (8001914 <HAL_DMA_Init+0x140>)
 80017fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001802:	091b      	lsrs	r3, r3, #4
 8001804:	009a      	lsls	r2, r3, #2
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	4a42      	ldr	r2, [pc, #264]	@ (8001918 <HAL_DMA_Init+0x144>)
 800180e:	641a      	str	r2, [r3, #64]	@ 0x40
 8001810:	e00e      	b.n	8001830 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	461a      	mov	r2, r3
 8001818:	4b40      	ldr	r3, [pc, #256]	@ (800191c <HAL_DMA_Init+0x148>)
 800181a:	4413      	add	r3, r2
 800181c:	4a3d      	ldr	r2, [pc, #244]	@ (8001914 <HAL_DMA_Init+0x140>)
 800181e:	fba2 2303 	umull	r2, r3, r2, r3
 8001822:	091b      	lsrs	r3, r3, #4
 8001824:	009a      	lsls	r2, r3, #2
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	4a3c      	ldr	r2, [pc, #240]	@ (8001920 <HAL_DMA_Init+0x14c>)
 800182e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2202      	movs	r2, #2
 8001834:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8001846:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800184a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001854:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	691b      	ldr	r3, [r3, #16]
 800185a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001860:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	699b      	ldr	r3, [r3, #24]
 8001866:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800186c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6a1b      	ldr	r3, [r3, #32]
 8001872:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001874:	68fa      	ldr	r2, [r7, #12]
 8001876:	4313      	orrs	r3, r2
 8001878:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	68fa      	ldr	r2, [r7, #12]
 8001880:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001882:	6878      	ldr	r0, [r7, #4]
 8001884:	f000 fa82 	bl	8001d8c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	689b      	ldr	r3, [r3, #8]
 800188c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001890:	d102      	bne.n	8001898 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2200      	movs	r2, #0
 8001896:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	685a      	ldr	r2, [r3, #4]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80018a0:	b2d2      	uxtb	r2, r2
 80018a2:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018a8:	687a      	ldr	r2, [r7, #4]
 80018aa:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80018ac:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d010      	beq.n	80018d8 <HAL_DMA_Init+0x104>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	2b04      	cmp	r3, #4
 80018bc:	d80c      	bhi.n	80018d8 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80018be:	6878      	ldr	r0, [r7, #4]
 80018c0:	f000 faa2 	bl	8001e08 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018c8:	2200      	movs	r2, #0
 80018ca:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018d0:	687a      	ldr	r2, [r7, #4]
 80018d2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80018d4:	605a      	str	r2, [r3, #4]
 80018d6:	e008      	b.n	80018ea <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2200      	movs	r2, #0
 80018dc:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2200      	movs	r2, #0
 80018e2:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2200      	movs	r2, #0
 80018e8:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2200      	movs	r2, #0
 80018ee:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2201      	movs	r2, #1
 80018f4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2200      	movs	r2, #0
 80018fc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8001900:	2300      	movs	r3, #0
}
 8001902:	4618      	mov	r0, r3
 8001904:	3710      	adds	r7, #16
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	40020407 	.word	0x40020407
 8001910:	bffdfff8 	.word	0xbffdfff8
 8001914:	cccccccd 	.word	0xcccccccd
 8001918:	40020000 	.word	0x40020000
 800191c:	bffdfbf8 	.word	0xbffdfbf8
 8001920:	40020400 	.word	0x40020400

08001924 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b086      	sub	sp, #24
 8001928:	af00      	add	r7, sp, #0
 800192a:	60f8      	str	r0, [r7, #12]
 800192c:	60b9      	str	r1, [r7, #8]
 800192e:	607a      	str	r2, [r7, #4]
 8001930:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001932:	2300      	movs	r3, #0
 8001934:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800193c:	2b01      	cmp	r3, #1
 800193e:	d101      	bne.n	8001944 <HAL_DMA_Start_IT+0x20>
 8001940:	2302      	movs	r3, #2
 8001942:	e066      	b.n	8001a12 <HAL_DMA_Start_IT+0xee>
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	2201      	movs	r2, #1
 8001948:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001952:	b2db      	uxtb	r3, r3
 8001954:	2b01      	cmp	r3, #1
 8001956:	d155      	bne.n	8001a04 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	2202      	movs	r2, #2
 800195c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	2200      	movs	r2, #0
 8001964:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	681a      	ldr	r2, [r3, #0]
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f022 0201 	bic.w	r2, r2, #1
 8001974:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	687a      	ldr	r2, [r7, #4]
 800197a:	68b9      	ldr	r1, [r7, #8]
 800197c:	68f8      	ldr	r0, [r7, #12]
 800197e:	f000 f9c7 	bl	8001d10 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001986:	2b00      	cmp	r3, #0
 8001988:	d008      	beq.n	800199c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	681a      	ldr	r2, [r3, #0]
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f042 020e 	orr.w	r2, r2, #14
 8001998:	601a      	str	r2, [r3, #0]
 800199a:	e00f      	b.n	80019bc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	681a      	ldr	r2, [r3, #0]
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f022 0204 	bic.w	r2, r2, #4
 80019aa:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	681a      	ldr	r2, [r3, #0]
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f042 020a 	orr.w	r2, r2, #10
 80019ba:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d007      	beq.n	80019da <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80019ce:	681a      	ldr	r2, [r3, #0]
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80019d4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80019d8:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d007      	beq.n	80019f2 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019e6:	681a      	ldr	r2, [r3, #0]
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019ec:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80019f0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	681a      	ldr	r2, [r3, #0]
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f042 0201 	orr.w	r2, r2, #1
 8001a00:	601a      	str	r2, [r3, #0]
 8001a02:	e005      	b.n	8001a10 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	2200      	movs	r2, #0
 8001a08:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001a0c:	2302      	movs	r3, #2
 8001a0e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001a10:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	3718      	adds	r7, #24
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}

08001a1a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001a1a:	b480      	push	{r7}
 8001a1c:	b085      	sub	sp, #20
 8001a1e:	af00      	add	r7, sp, #0
 8001a20:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a22:	2300      	movs	r3, #0
 8001a24:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	2b02      	cmp	r3, #2
 8001a30:	d005      	beq.n	8001a3e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2204      	movs	r2, #4
 8001a36:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	73fb      	strb	r3, [r7, #15]
 8001a3c:	e037      	b.n	8001aae <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f022 020e 	bic.w	r2, r2, #14
 8001a4c:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a52:	681a      	ldr	r2, [r3, #0]
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a58:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001a5c:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	681a      	ldr	r2, [r3, #0]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f022 0201 	bic.w	r2, r2, #1
 8001a6c:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a72:	f003 021f 	and.w	r2, r3, #31
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a7a:	2101      	movs	r1, #1
 8001a7c:	fa01 f202 	lsl.w	r2, r1, r2
 8001a80:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a86:	687a      	ldr	r2, [r7, #4]
 8001a88:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001a8a:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d00c      	beq.n	8001aae <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a98:	681a      	ldr	r2, [r3, #0]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a9e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001aa2:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001aa8:	687a      	ldr	r2, [r7, #4]
 8001aaa:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001aac:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2200      	movs	r2, #0
 8001aba:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8001abe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	3714      	adds	r7, #20
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr

08001acc <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b084      	sub	sp, #16
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001ade:	b2db      	uxtb	r3, r3
 8001ae0:	2b02      	cmp	r3, #2
 8001ae2:	d00d      	beq.n	8001b00 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2204      	movs	r2, #4
 8001ae8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2201      	movs	r2, #1
 8001aee:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2200      	movs	r2, #0
 8001af6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8001afa:	2301      	movs	r3, #1
 8001afc:	73fb      	strb	r3, [r7, #15]
 8001afe:	e047      	b.n	8001b90 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f022 020e 	bic.w	r2, r2, #14
 8001b0e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	681a      	ldr	r2, [r3, #0]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f022 0201 	bic.w	r2, r2, #1
 8001b1e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b24:	681a      	ldr	r2, [r3, #0]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b2a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001b2e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b34:	f003 021f 	and.w	r2, r3, #31
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b3c:	2101      	movs	r1, #1
 8001b3e:	fa01 f202 	lsl.w	r2, r1, r2
 8001b42:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b48:	687a      	ldr	r2, [r7, #4]
 8001b4a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001b4c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d00c      	beq.n	8001b70 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b60:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001b64:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b6a:	687a      	ldr	r2, [r7, #4]
 8001b6c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001b6e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2201      	movs	r2, #1
 8001b74:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d003      	beq.n	8001b90 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b8c:	6878      	ldr	r0, [r7, #4]
 8001b8e:	4798      	blx	r3
    }
  }
  return status;
 8001b90:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	3710      	adds	r7, #16
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}

08001b9a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001b9a:	b580      	push	{r7, lr}
 8001b9c:	b084      	sub	sp, #16
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bb6:	f003 031f 	and.w	r3, r3, #31
 8001bba:	2204      	movs	r2, #4
 8001bbc:	409a      	lsls	r2, r3
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d026      	beq.n	8001c14 <HAL_DMA_IRQHandler+0x7a>
 8001bc6:	68bb      	ldr	r3, [r7, #8]
 8001bc8:	f003 0304 	and.w	r3, r3, #4
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d021      	beq.n	8001c14 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f003 0320 	and.w	r3, r3, #32
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d107      	bne.n	8001bee <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	681a      	ldr	r2, [r3, #0]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f022 0204 	bic.w	r2, r2, #4
 8001bec:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bf2:	f003 021f 	and.w	r2, r3, #31
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bfa:	2104      	movs	r1, #4
 8001bfc:	fa01 f202 	lsl.w	r2, r1, r2
 8001c00:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d071      	beq.n	8001cee <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c0e:	6878      	ldr	r0, [r7, #4]
 8001c10:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001c12:	e06c      	b.n	8001cee <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c18:	f003 031f 	and.w	r3, r3, #31
 8001c1c:	2202      	movs	r2, #2
 8001c1e:	409a      	lsls	r2, r3
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	4013      	ands	r3, r2
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d02e      	beq.n	8001c86 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8001c28:	68bb      	ldr	r3, [r7, #8]
 8001c2a:	f003 0302 	and.w	r3, r3, #2
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d029      	beq.n	8001c86 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f003 0320 	and.w	r3, r3, #32
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d10b      	bne.n	8001c58 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	681a      	ldr	r2, [r3, #0]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f022 020a 	bic.w	r2, r2, #10
 8001c4e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2201      	movs	r2, #1
 8001c54:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c5c:	f003 021f 	and.w	r2, r3, #31
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c64:	2102      	movs	r1, #2
 8001c66:	fa01 f202 	lsl.w	r2, r1, r2
 8001c6a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2200      	movs	r2, #0
 8001c70:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d038      	beq.n	8001cee <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c80:	6878      	ldr	r0, [r7, #4]
 8001c82:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001c84:	e033      	b.n	8001cee <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c8a:	f003 031f 	and.w	r3, r3, #31
 8001c8e:	2208      	movs	r2, #8
 8001c90:	409a      	lsls	r2, r3
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	4013      	ands	r3, r2
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d02a      	beq.n	8001cf0 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8001c9a:	68bb      	ldr	r3, [r7, #8]
 8001c9c:	f003 0308 	and.w	r3, r3, #8
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d025      	beq.n	8001cf0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	681a      	ldr	r2, [r3, #0]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f022 020e 	bic.w	r2, r2, #14
 8001cb2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cb8:	f003 021f 	and.w	r2, r3, #31
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cc0:	2101      	movs	r1, #1
 8001cc2:	fa01 f202 	lsl.w	r2, r1, r2
 8001cc6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2201      	movs	r2, #1
 8001ccc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2200      	movs	r2, #0
 8001cda:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d004      	beq.n	8001cf0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001cea:	6878      	ldr	r0, [r7, #4]
 8001cec:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001cee:	bf00      	nop
 8001cf0:	bf00      	nop
}
 8001cf2:	3710      	adds	r7, #16
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}

08001cf8 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b083      	sub	sp, #12
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	370c      	adds	r7, #12
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0e:	4770      	bx	lr

08001d10 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b085      	sub	sp, #20
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	60f8      	str	r0, [r7, #12]
 8001d18:	60b9      	str	r1, [r7, #8]
 8001d1a:	607a      	str	r2, [r7, #4]
 8001d1c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d22:	68fa      	ldr	r2, [r7, #12]
 8001d24:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001d26:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d004      	beq.n	8001d3a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d34:	68fa      	ldr	r2, [r7, #12]
 8001d36:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001d38:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d3e:	f003 021f 	and.w	r2, r3, #31
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d46:	2101      	movs	r1, #1
 8001d48:	fa01 f202 	lsl.w	r2, r1, r2
 8001d4c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	683a      	ldr	r2, [r7, #0]
 8001d54:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	2b10      	cmp	r3, #16
 8001d5c:	d108      	bne.n	8001d70 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	687a      	ldr	r2, [r7, #4]
 8001d64:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	68ba      	ldr	r2, [r7, #8]
 8001d6c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001d6e:	e007      	b.n	8001d80 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	68ba      	ldr	r2, [r7, #8]
 8001d76:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	687a      	ldr	r2, [r7, #4]
 8001d7e:	60da      	str	r2, [r3, #12]
}
 8001d80:	bf00      	nop
 8001d82:	3714      	adds	r7, #20
 8001d84:	46bd      	mov	sp, r7
 8001d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8a:	4770      	bx	lr

08001d8c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b087      	sub	sp, #28
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	461a      	mov	r2, r3
 8001d9a:	4b16      	ldr	r3, [pc, #88]	@ (8001df4 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	d802      	bhi.n	8001da6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8001da0:	4b15      	ldr	r3, [pc, #84]	@ (8001df8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8001da2:	617b      	str	r3, [r7, #20]
 8001da4:	e001      	b.n	8001daa <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G411xB) || defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8001da6:	4b15      	ldr	r3, [pc, #84]	@ (8001dfc <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001da8:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	b2db      	uxtb	r3, r3
 8001db4:	3b08      	subs	r3, #8
 8001db6:	4a12      	ldr	r2, [pc, #72]	@ (8001e00 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001db8:	fba2 2303 	umull	r2, r3, r2, r3
 8001dbc:	091b      	lsrs	r3, r3, #4
 8001dbe:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dc4:	089b      	lsrs	r3, r3, #2
 8001dc6:	009a      	lsls	r2, r3, #2
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	4413      	add	r3, r2
 8001dcc:	461a      	mov	r2, r3
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	4a0b      	ldr	r2, [pc, #44]	@ (8001e04 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8001dd6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	f003 031f 	and.w	r3, r3, #31
 8001dde:	2201      	movs	r2, #1
 8001de0:	409a      	lsls	r2, r3
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8001de6:	bf00      	nop
 8001de8:	371c      	adds	r7, #28
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr
 8001df2:	bf00      	nop
 8001df4:	40020407 	.word	0x40020407
 8001df8:	40020800 	.word	0x40020800
 8001dfc:	40020820 	.word	0x40020820
 8001e00:	cccccccd 	.word	0xcccccccd
 8001e04:	40020880 	.word	0x40020880

08001e08 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b085      	sub	sp, #20
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001e18:	68fa      	ldr	r2, [r7, #12]
 8001e1a:	4b0b      	ldr	r3, [pc, #44]	@ (8001e48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001e1c:	4413      	add	r3, r2
 8001e1e:	009b      	lsls	r3, r3, #2
 8001e20:	461a      	mov	r2, r3
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	4a08      	ldr	r2, [pc, #32]	@ (8001e4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001e2a:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	3b01      	subs	r3, #1
 8001e30:	f003 031f 	and.w	r3, r3, #31
 8001e34:	2201      	movs	r2, #1
 8001e36:	409a      	lsls	r2, r3
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8001e3c:	bf00      	nop
 8001e3e:	3714      	adds	r7, #20
 8001e40:	46bd      	mov	sp, r7
 8001e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e46:	4770      	bx	lr
 8001e48:	1000823f 	.word	0x1000823f
 8001e4c:	40020940 	.word	0x40020940

08001e50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b087      	sub	sp, #28
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
 8001e58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001e5e:	e15a      	b.n	8002116 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	681a      	ldr	r2, [r3, #0]
 8001e64:	2101      	movs	r1, #1
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	fa01 f303 	lsl.w	r3, r1, r3
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	f000 814c 	beq.w	8002110 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	f003 0303 	and.w	r3, r3, #3
 8001e80:	2b01      	cmp	r3, #1
 8001e82:	d005      	beq.n	8001e90 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001e8c:	2b02      	cmp	r3, #2
 8001e8e:	d130      	bne.n	8001ef2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	005b      	lsls	r3, r3, #1
 8001e9a:	2203      	movs	r2, #3
 8001e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea0:	43db      	mvns	r3, r3
 8001ea2:	693a      	ldr	r2, [r7, #16]
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	68da      	ldr	r2, [r3, #12]
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	005b      	lsls	r3, r3, #1
 8001eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb4:	693a      	ldr	r2, [r7, #16]
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	693a      	ldr	r2, [r7, #16]
 8001ebe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	fa02 f303 	lsl.w	r3, r2, r3
 8001ece:	43db      	mvns	r3, r3
 8001ed0:	693a      	ldr	r2, [r7, #16]
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	091b      	lsrs	r3, r3, #4
 8001edc:	f003 0201 	and.w	r2, r3, #1
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee6:	693a      	ldr	r2, [r7, #16]
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	693a      	ldr	r2, [r7, #16]
 8001ef0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	f003 0303 	and.w	r3, r3, #3
 8001efa:	2b03      	cmp	r3, #3
 8001efc:	d017      	beq.n	8001f2e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	68db      	ldr	r3, [r3, #12]
 8001f02:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	005b      	lsls	r3, r3, #1
 8001f08:	2203      	movs	r2, #3
 8001f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0e:	43db      	mvns	r3, r3
 8001f10:	693a      	ldr	r2, [r7, #16]
 8001f12:	4013      	ands	r3, r2
 8001f14:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	689a      	ldr	r2, [r3, #8]
 8001f1a:	697b      	ldr	r3, [r7, #20]
 8001f1c:	005b      	lsls	r3, r3, #1
 8001f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f22:	693a      	ldr	r2, [r7, #16]
 8001f24:	4313      	orrs	r3, r2
 8001f26:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	693a      	ldr	r2, [r7, #16]
 8001f2c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	f003 0303 	and.w	r3, r3, #3
 8001f36:	2b02      	cmp	r3, #2
 8001f38:	d123      	bne.n	8001f82 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	08da      	lsrs	r2, r3, #3
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	3208      	adds	r2, #8
 8001f42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f46:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	f003 0307 	and.w	r3, r3, #7
 8001f4e:	009b      	lsls	r3, r3, #2
 8001f50:	220f      	movs	r2, #15
 8001f52:	fa02 f303 	lsl.w	r3, r2, r3
 8001f56:	43db      	mvns	r3, r3
 8001f58:	693a      	ldr	r2, [r7, #16]
 8001f5a:	4013      	ands	r3, r2
 8001f5c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	691a      	ldr	r2, [r3, #16]
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	f003 0307 	and.w	r3, r3, #7
 8001f68:	009b      	lsls	r3, r3, #2
 8001f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6e:	693a      	ldr	r2, [r7, #16]
 8001f70:	4313      	orrs	r3, r2
 8001f72:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	08da      	lsrs	r2, r3, #3
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	3208      	adds	r2, #8
 8001f7c:	6939      	ldr	r1, [r7, #16]
 8001f7e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	005b      	lsls	r3, r3, #1
 8001f8c:	2203      	movs	r2, #3
 8001f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f92:	43db      	mvns	r3, r3
 8001f94:	693a      	ldr	r2, [r7, #16]
 8001f96:	4013      	ands	r3, r2
 8001f98:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	f003 0203 	and.w	r2, r3, #3
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	005b      	lsls	r3, r3, #1
 8001fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8001faa:	693a      	ldr	r2, [r7, #16]
 8001fac:	4313      	orrs	r3, r2
 8001fae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	693a      	ldr	r2, [r7, #16]
 8001fb4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	f000 80a6 	beq.w	8002110 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fc4:	4b5b      	ldr	r3, [pc, #364]	@ (8002134 <HAL_GPIO_Init+0x2e4>)
 8001fc6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001fc8:	4a5a      	ldr	r2, [pc, #360]	@ (8002134 <HAL_GPIO_Init+0x2e4>)
 8001fca:	f043 0301 	orr.w	r3, r3, #1
 8001fce:	6613      	str	r3, [r2, #96]	@ 0x60
 8001fd0:	4b58      	ldr	r3, [pc, #352]	@ (8002134 <HAL_GPIO_Init+0x2e4>)
 8001fd2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001fd4:	f003 0301 	and.w	r3, r3, #1
 8001fd8:	60bb      	str	r3, [r7, #8]
 8001fda:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001fdc:	4a56      	ldr	r2, [pc, #344]	@ (8002138 <HAL_GPIO_Init+0x2e8>)
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	089b      	lsrs	r3, r3, #2
 8001fe2:	3302      	adds	r3, #2
 8001fe4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fe8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	f003 0303 	and.w	r3, r3, #3
 8001ff0:	009b      	lsls	r3, r3, #2
 8001ff2:	220f      	movs	r2, #15
 8001ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff8:	43db      	mvns	r3, r3
 8001ffa:	693a      	ldr	r2, [r7, #16]
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002006:	d01f      	beq.n	8002048 <HAL_GPIO_Init+0x1f8>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	4a4c      	ldr	r2, [pc, #304]	@ (800213c <HAL_GPIO_Init+0x2ec>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d019      	beq.n	8002044 <HAL_GPIO_Init+0x1f4>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	4a4b      	ldr	r2, [pc, #300]	@ (8002140 <HAL_GPIO_Init+0x2f0>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d013      	beq.n	8002040 <HAL_GPIO_Init+0x1f0>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	4a4a      	ldr	r2, [pc, #296]	@ (8002144 <HAL_GPIO_Init+0x2f4>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d00d      	beq.n	800203c <HAL_GPIO_Init+0x1ec>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	4a49      	ldr	r2, [pc, #292]	@ (8002148 <HAL_GPIO_Init+0x2f8>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d007      	beq.n	8002038 <HAL_GPIO_Init+0x1e8>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	4a48      	ldr	r2, [pc, #288]	@ (800214c <HAL_GPIO_Init+0x2fc>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d101      	bne.n	8002034 <HAL_GPIO_Init+0x1e4>
 8002030:	2305      	movs	r3, #5
 8002032:	e00a      	b.n	800204a <HAL_GPIO_Init+0x1fa>
 8002034:	2306      	movs	r3, #6
 8002036:	e008      	b.n	800204a <HAL_GPIO_Init+0x1fa>
 8002038:	2304      	movs	r3, #4
 800203a:	e006      	b.n	800204a <HAL_GPIO_Init+0x1fa>
 800203c:	2303      	movs	r3, #3
 800203e:	e004      	b.n	800204a <HAL_GPIO_Init+0x1fa>
 8002040:	2302      	movs	r3, #2
 8002042:	e002      	b.n	800204a <HAL_GPIO_Init+0x1fa>
 8002044:	2301      	movs	r3, #1
 8002046:	e000      	b.n	800204a <HAL_GPIO_Init+0x1fa>
 8002048:	2300      	movs	r3, #0
 800204a:	697a      	ldr	r2, [r7, #20]
 800204c:	f002 0203 	and.w	r2, r2, #3
 8002050:	0092      	lsls	r2, r2, #2
 8002052:	4093      	lsls	r3, r2
 8002054:	693a      	ldr	r2, [r7, #16]
 8002056:	4313      	orrs	r3, r2
 8002058:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800205a:	4937      	ldr	r1, [pc, #220]	@ (8002138 <HAL_GPIO_Init+0x2e8>)
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	089b      	lsrs	r3, r3, #2
 8002060:	3302      	adds	r3, #2
 8002062:	693a      	ldr	r2, [r7, #16]
 8002064:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002068:	4b39      	ldr	r3, [pc, #228]	@ (8002150 <HAL_GPIO_Init+0x300>)
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	43db      	mvns	r3, r3
 8002072:	693a      	ldr	r2, [r7, #16]
 8002074:	4013      	ands	r3, r2
 8002076:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002080:	2b00      	cmp	r3, #0
 8002082:	d003      	beq.n	800208c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002084:	693a      	ldr	r2, [r7, #16]
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	4313      	orrs	r3, r2
 800208a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800208c:	4a30      	ldr	r2, [pc, #192]	@ (8002150 <HAL_GPIO_Init+0x300>)
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002092:	4b2f      	ldr	r3, [pc, #188]	@ (8002150 <HAL_GPIO_Init+0x300>)
 8002094:	68db      	ldr	r3, [r3, #12]
 8002096:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	43db      	mvns	r3, r3
 800209c:	693a      	ldr	r2, [r7, #16]
 800209e:	4013      	ands	r3, r2
 80020a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d003      	beq.n	80020b6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80020ae:	693a      	ldr	r2, [r7, #16]
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	4313      	orrs	r3, r2
 80020b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80020b6:	4a26      	ldr	r2, [pc, #152]	@ (8002150 <HAL_GPIO_Init+0x300>)
 80020b8:	693b      	ldr	r3, [r7, #16]
 80020ba:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80020bc:	4b24      	ldr	r3, [pc, #144]	@ (8002150 <HAL_GPIO_Init+0x300>)
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	43db      	mvns	r3, r3
 80020c6:	693a      	ldr	r2, [r7, #16]
 80020c8:	4013      	ands	r3, r2
 80020ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d003      	beq.n	80020e0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80020d8:	693a      	ldr	r2, [r7, #16]
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	4313      	orrs	r3, r2
 80020de:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80020e0:	4a1b      	ldr	r2, [pc, #108]	@ (8002150 <HAL_GPIO_Init+0x300>)
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80020e6:	4b1a      	ldr	r3, [pc, #104]	@ (8002150 <HAL_GPIO_Init+0x300>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	43db      	mvns	r3, r3
 80020f0:	693a      	ldr	r2, [r7, #16]
 80020f2:	4013      	ands	r3, r2
 80020f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d003      	beq.n	800210a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002102:	693a      	ldr	r2, [r7, #16]
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	4313      	orrs	r3, r2
 8002108:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800210a:	4a11      	ldr	r2, [pc, #68]	@ (8002150 <HAL_GPIO_Init+0x300>)
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	3301      	adds	r3, #1
 8002114:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	fa22 f303 	lsr.w	r3, r2, r3
 8002120:	2b00      	cmp	r3, #0
 8002122:	f47f ae9d 	bne.w	8001e60 <HAL_GPIO_Init+0x10>
  }
}
 8002126:	bf00      	nop
 8002128:	bf00      	nop
 800212a:	371c      	adds	r7, #28
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr
 8002134:	40021000 	.word	0x40021000
 8002138:	40010000 	.word	0x40010000
 800213c:	48000400 	.word	0x48000400
 8002140:	48000800 	.word	0x48000800
 8002144:	48000c00 	.word	0x48000c00
 8002148:	48001000 	.word	0x48001000
 800214c:	48001400 	.word	0x48001400
 8002150:	40010400 	.word	0x40010400

08002154 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002154:	b480      	push	{r7}
 8002156:	b083      	sub	sp, #12
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
 800215c:	460b      	mov	r3, r1
 800215e:	807b      	strh	r3, [r7, #2]
 8002160:	4613      	mov	r3, r2
 8002162:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002164:	787b      	ldrb	r3, [r7, #1]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d003      	beq.n	8002172 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800216a:	887a      	ldrh	r2, [r7, #2]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002170:	e002      	b.n	8002178 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002172:	887a      	ldrh	r2, [r7, #2]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002178:	bf00      	nop
 800217a:	370c      	adds	r7, #12
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr

08002184 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002184:	b480      	push	{r7}
 8002186:	b085      	sub	sp, #20
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
 800218c:	460b      	mov	r3, r1
 800218e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	695b      	ldr	r3, [r3, #20]
 8002194:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002196:	887a      	ldrh	r2, [r7, #2]
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	4013      	ands	r3, r2
 800219c:	041a      	lsls	r2, r3, #16
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	43d9      	mvns	r1, r3
 80021a2:	887b      	ldrh	r3, [r7, #2]
 80021a4:	400b      	ands	r3, r1
 80021a6:	431a      	orrs	r2, r3
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	619a      	str	r2, [r3, #24]
}
 80021ac:	bf00      	nop
 80021ae:	3714      	adds	r7, #20
 80021b0:	46bd      	mov	sp, r7
 80021b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b6:	4770      	bx	lr

080021b8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b082      	sub	sp, #8
 80021bc:	af00      	add	r7, sp, #0
 80021be:	4603      	mov	r3, r0
 80021c0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80021c2:	4b08      	ldr	r3, [pc, #32]	@ (80021e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80021c4:	695a      	ldr	r2, [r3, #20]
 80021c6:	88fb      	ldrh	r3, [r7, #6]
 80021c8:	4013      	ands	r3, r2
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d006      	beq.n	80021dc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80021ce:	4a05      	ldr	r2, [pc, #20]	@ (80021e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80021d0:	88fb      	ldrh	r3, [r7, #6]
 80021d2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80021d4:	88fb      	ldrh	r3, [r7, #6]
 80021d6:	4618      	mov	r0, r3
 80021d8:	f000 f806 	bl	80021e8 <HAL_GPIO_EXTI_Callback>
  }
}
 80021dc:	bf00      	nop
 80021de:	3708      	adds	r7, #8
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}
 80021e4:	40010400 	.word	0x40010400

080021e8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b083      	sub	sp, #12
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	4603      	mov	r3, r0
 80021f0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80021f2:	bf00      	nop
 80021f4:	370c      	adds	r7, #12
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr

080021fe <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80021fe:	b580      	push	{r7, lr}
 8002200:	b084      	sub	sp, #16
 8002202:	af00      	add	r7, sp, #0
 8002204:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d101      	bne.n	8002210 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800220c:	2301      	movs	r3, #1
 800220e:	e0c0      	b.n	8002392 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8002216:	b2db      	uxtb	r3, r3
 8002218:	2b00      	cmp	r3, #0
 800221a:	d106      	bne.n	800222a <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2200      	movs	r2, #0
 8002220:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002224:	6878      	ldr	r0, [r7, #4]
 8002226:	f008 fe63 	bl	800aef0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2203      	movs	r2, #3
 800222e:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4618      	mov	r0, r3
 8002238:	f005 f979 	bl	800752e <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800223c:	2300      	movs	r3, #0
 800223e:	73fb      	strb	r3, [r7, #15]
 8002240:	e03e      	b.n	80022c0 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002242:	7bfa      	ldrb	r2, [r7, #15]
 8002244:	6879      	ldr	r1, [r7, #4]
 8002246:	4613      	mov	r3, r2
 8002248:	009b      	lsls	r3, r3, #2
 800224a:	4413      	add	r3, r2
 800224c:	00db      	lsls	r3, r3, #3
 800224e:	440b      	add	r3, r1
 8002250:	3311      	adds	r3, #17
 8002252:	2201      	movs	r2, #1
 8002254:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002256:	7bfa      	ldrb	r2, [r7, #15]
 8002258:	6879      	ldr	r1, [r7, #4]
 800225a:	4613      	mov	r3, r2
 800225c:	009b      	lsls	r3, r3, #2
 800225e:	4413      	add	r3, r2
 8002260:	00db      	lsls	r3, r3, #3
 8002262:	440b      	add	r3, r1
 8002264:	3310      	adds	r3, #16
 8002266:	7bfa      	ldrb	r2, [r7, #15]
 8002268:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800226a:	7bfa      	ldrb	r2, [r7, #15]
 800226c:	6879      	ldr	r1, [r7, #4]
 800226e:	4613      	mov	r3, r2
 8002270:	009b      	lsls	r3, r3, #2
 8002272:	4413      	add	r3, r2
 8002274:	00db      	lsls	r3, r3, #3
 8002276:	440b      	add	r3, r1
 8002278:	3313      	adds	r3, #19
 800227a:	2200      	movs	r2, #0
 800227c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800227e:	7bfa      	ldrb	r2, [r7, #15]
 8002280:	6879      	ldr	r1, [r7, #4]
 8002282:	4613      	mov	r3, r2
 8002284:	009b      	lsls	r3, r3, #2
 8002286:	4413      	add	r3, r2
 8002288:	00db      	lsls	r3, r3, #3
 800228a:	440b      	add	r3, r1
 800228c:	3320      	adds	r3, #32
 800228e:	2200      	movs	r2, #0
 8002290:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002292:	7bfa      	ldrb	r2, [r7, #15]
 8002294:	6879      	ldr	r1, [r7, #4]
 8002296:	4613      	mov	r3, r2
 8002298:	009b      	lsls	r3, r3, #2
 800229a:	4413      	add	r3, r2
 800229c:	00db      	lsls	r3, r3, #3
 800229e:	440b      	add	r3, r1
 80022a0:	3324      	adds	r3, #36	@ 0x24
 80022a2:	2200      	movs	r2, #0
 80022a4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80022a6:	7bfb      	ldrb	r3, [r7, #15]
 80022a8:	6879      	ldr	r1, [r7, #4]
 80022aa:	1c5a      	adds	r2, r3, #1
 80022ac:	4613      	mov	r3, r2
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	4413      	add	r3, r2
 80022b2:	00db      	lsls	r3, r3, #3
 80022b4:	440b      	add	r3, r1
 80022b6:	2200      	movs	r2, #0
 80022b8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022ba:	7bfb      	ldrb	r3, [r7, #15]
 80022bc:	3301      	adds	r3, #1
 80022be:	73fb      	strb	r3, [r7, #15]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	791b      	ldrb	r3, [r3, #4]
 80022c4:	7bfa      	ldrb	r2, [r7, #15]
 80022c6:	429a      	cmp	r2, r3
 80022c8:	d3bb      	bcc.n	8002242 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022ca:	2300      	movs	r3, #0
 80022cc:	73fb      	strb	r3, [r7, #15]
 80022ce:	e044      	b.n	800235a <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80022d0:	7bfa      	ldrb	r2, [r7, #15]
 80022d2:	6879      	ldr	r1, [r7, #4]
 80022d4:	4613      	mov	r3, r2
 80022d6:	009b      	lsls	r3, r3, #2
 80022d8:	4413      	add	r3, r2
 80022da:	00db      	lsls	r3, r3, #3
 80022dc:	440b      	add	r3, r1
 80022de:	f203 1351 	addw	r3, r3, #337	@ 0x151
 80022e2:	2200      	movs	r2, #0
 80022e4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80022e6:	7bfa      	ldrb	r2, [r7, #15]
 80022e8:	6879      	ldr	r1, [r7, #4]
 80022ea:	4613      	mov	r3, r2
 80022ec:	009b      	lsls	r3, r3, #2
 80022ee:	4413      	add	r3, r2
 80022f0:	00db      	lsls	r3, r3, #3
 80022f2:	440b      	add	r3, r1
 80022f4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80022f8:	7bfa      	ldrb	r2, [r7, #15]
 80022fa:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80022fc:	7bfa      	ldrb	r2, [r7, #15]
 80022fe:	6879      	ldr	r1, [r7, #4]
 8002300:	4613      	mov	r3, r2
 8002302:	009b      	lsls	r3, r3, #2
 8002304:	4413      	add	r3, r2
 8002306:	00db      	lsls	r3, r3, #3
 8002308:	440b      	add	r3, r1
 800230a:	f203 1353 	addw	r3, r3, #339	@ 0x153
 800230e:	2200      	movs	r2, #0
 8002310:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002312:	7bfa      	ldrb	r2, [r7, #15]
 8002314:	6879      	ldr	r1, [r7, #4]
 8002316:	4613      	mov	r3, r2
 8002318:	009b      	lsls	r3, r3, #2
 800231a:	4413      	add	r3, r2
 800231c:	00db      	lsls	r3, r3, #3
 800231e:	440b      	add	r3, r1
 8002320:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8002324:	2200      	movs	r2, #0
 8002326:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002328:	7bfa      	ldrb	r2, [r7, #15]
 800232a:	6879      	ldr	r1, [r7, #4]
 800232c:	4613      	mov	r3, r2
 800232e:	009b      	lsls	r3, r3, #2
 8002330:	4413      	add	r3, r2
 8002332:	00db      	lsls	r3, r3, #3
 8002334:	440b      	add	r3, r1
 8002336:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800233a:	2200      	movs	r2, #0
 800233c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800233e:	7bfa      	ldrb	r2, [r7, #15]
 8002340:	6879      	ldr	r1, [r7, #4]
 8002342:	4613      	mov	r3, r2
 8002344:	009b      	lsls	r3, r3, #2
 8002346:	4413      	add	r3, r2
 8002348:	00db      	lsls	r3, r3, #3
 800234a:	440b      	add	r3, r1
 800234c:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002350:	2200      	movs	r2, #0
 8002352:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002354:	7bfb      	ldrb	r3, [r7, #15]
 8002356:	3301      	adds	r3, #1
 8002358:	73fb      	strb	r3, [r7, #15]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	791b      	ldrb	r3, [r3, #4]
 800235e:	7bfa      	ldrb	r2, [r7, #15]
 8002360:	429a      	cmp	r2, r3
 8002362:	d3b5      	bcc.n	80022d0 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6818      	ldr	r0, [r3, #0]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	3304      	adds	r3, #4
 800236c:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002370:	f005 f8f8 	bl	8007564 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2200      	movs	r2, #0
 8002378:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2201      	movs	r2, #1
 800237e:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	7a9b      	ldrb	r3, [r3, #10]
 8002386:	2b01      	cmp	r3, #1
 8002388:	d102      	bne.n	8002390 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800238a:	6878      	ldr	r0, [r7, #4]
 800238c:	f001 fc0e 	bl	8003bac <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8002390:	2300      	movs	r3, #0
}
 8002392:	4618      	mov	r0, r3
 8002394:	3710      	adds	r7, #16
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}

0800239a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800239a:	b580      	push	{r7, lr}
 800239c:	b082      	sub	sp, #8
 800239e:	af00      	add	r7, sp, #0
 80023a0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80023a8:	2b01      	cmp	r3, #1
 80023aa:	d101      	bne.n	80023b0 <HAL_PCD_Start+0x16>
 80023ac:	2302      	movs	r3, #2
 80023ae:	e012      	b.n	80023d6 <HAL_PCD_Start+0x3c>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2201      	movs	r2, #1
 80023b4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4618      	mov	r0, r3
 80023be:	f005 f89f 	bl	8007500 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4618      	mov	r0, r3
 80023c8:	f006 fe7c 	bl	80090c4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2200      	movs	r2, #0
 80023d0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80023d4:	2300      	movs	r3, #0
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	3708      	adds	r7, #8
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}

080023de <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80023de:	b580      	push	{r7, lr}
 80023e0:	b084      	sub	sp, #16
 80023e2:	af00      	add	r7, sp, #0
 80023e4:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4618      	mov	r0, r3
 80023ec:	f006 fe81 	bl	80090f2 <USB_ReadInterrupts>
 80023f0:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d003      	beq.n	8002404 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80023fc:	6878      	ldr	r0, [r7, #4]
 80023fe:	f000 fb06 	bl	8002a0e <PCD_EP_ISR_Handler>

    return;
 8002402:	e110      	b.n	8002626 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800240a:	2b00      	cmp	r3, #0
 800240c:	d013      	beq.n	8002436 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002416:	b29a      	uxth	r2, r3
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002420:	b292      	uxth	r2, r2
 8002422:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002426:	6878      	ldr	r0, [r7, #4]
 8002428:	f008 fdf3 	bl	800b012 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800242c:	2100      	movs	r1, #0
 800242e:	6878      	ldr	r0, [r7, #4]
 8002430:	f000 f8fc 	bl	800262c <HAL_PCD_SetAddress>

    return;
 8002434:	e0f7      	b.n	8002626 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800243c:	2b00      	cmp	r3, #0
 800243e:	d00c      	beq.n	800245a <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002448:	b29a      	uxth	r2, r3
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002452:	b292      	uxth	r2, r2
 8002454:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002458:	e0e5      	b.n	8002626 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002460:	2b00      	cmp	r3, #0
 8002462:	d00c      	beq.n	800247e <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800246c:	b29a      	uxth	r2, r3
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002476:	b292      	uxth	r2, r2
 8002478:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800247c:	e0d3      	b.n	8002626 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002484:	2b00      	cmp	r3, #0
 8002486:	d034      	beq.n	80024f2 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002490:	b29a      	uxth	r2, r3
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f022 0204 	bic.w	r2, r2, #4
 800249a:	b292      	uxth	r2, r2
 800249c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80024a8:	b29a      	uxth	r2, r3
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f022 0208 	bic.w	r2, r2, #8
 80024b2:	b292      	uxth	r2, r2
 80024b4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 80024be:	2b01      	cmp	r3, #1
 80024c0:	d107      	bne.n	80024d2 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2200      	movs	r2, #0
 80024c6:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80024ca:	2100      	movs	r1, #0
 80024cc:	6878      	ldr	r0, [r7, #4]
 80024ce:	f008 ff93 	bl	800b3f8 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f008 fdd6 	bl	800b084 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80024e0:	b29a      	uxth	r2, r3
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80024ea:	b292      	uxth	r2, r2
 80024ec:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80024f0:	e099      	b.n	8002626 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d027      	beq.n	800254c <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002504:	b29a      	uxth	r2, r3
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f042 0208 	orr.w	r2, r2, #8
 800250e:	b292      	uxth	r2, r2
 8002510:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800251c:	b29a      	uxth	r2, r3
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002526:	b292      	uxth	r2, r2
 8002528:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002534:	b29a      	uxth	r2, r3
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f042 0204 	orr.w	r2, r2, #4
 800253e:	b292      	uxth	r2, r2
 8002540:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002544:	6878      	ldr	r0, [r7, #4]
 8002546:	f008 fd83 	bl	800b050 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800254a:	e06c      	b.n	8002626 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002552:	2b00      	cmp	r3, #0
 8002554:	d040      	beq.n	80025d8 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800255e:	b29a      	uxth	r2, r3
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002568:	b292      	uxth	r2, r2
 800256a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8002574:	2b00      	cmp	r3, #0
 8002576:	d12b      	bne.n	80025d0 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002580:	b29a      	uxth	r2, r3
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f042 0204 	orr.w	r2, r2, #4
 800258a:	b292      	uxth	r2, r2
 800258c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002598:	b29a      	uxth	r2, r3
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f042 0208 	orr.w	r2, r2, #8
 80025a2:	b292      	uxth	r2, r2
 80025a4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2201      	movs	r2, #1
 80025ac:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80025b8:	b29b      	uxth	r3, r3
 80025ba:	089b      	lsrs	r3, r3, #2
 80025bc:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80025c6:	2101      	movs	r1, #1
 80025c8:	6878      	ldr	r0, [r7, #4]
 80025ca:	f008 ff15 	bl	800b3f8 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 80025ce:	e02a      	b.n	8002626 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 80025d0:	6878      	ldr	r0, [r7, #4]
 80025d2:	f008 fd3d 	bl	800b050 <HAL_PCD_SuspendCallback>
    return;
 80025d6:	e026      	b.n	8002626 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d00f      	beq.n	8002602 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80025ea:	b29a      	uxth	r2, r3
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80025f4:	b292      	uxth	r2, r2
 80025f6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	f008 fcfb 	bl	800aff6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002600:	e011      	b.n	8002626 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002608:	2b00      	cmp	r3, #0
 800260a:	d00c      	beq.n	8002626 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002614:	b29a      	uxth	r2, r3
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800261e:	b292      	uxth	r2, r2
 8002620:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002624:	bf00      	nop
  }
}
 8002626:	3710      	adds	r7, #16
 8002628:	46bd      	mov	sp, r7
 800262a:	bd80      	pop	{r7, pc}

0800262c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b082      	sub	sp, #8
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
 8002634:	460b      	mov	r3, r1
 8002636:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800263e:	2b01      	cmp	r3, #1
 8002640:	d101      	bne.n	8002646 <HAL_PCD_SetAddress+0x1a>
 8002642:	2302      	movs	r3, #2
 8002644:	e012      	b.n	800266c <HAL_PCD_SetAddress+0x40>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2201      	movs	r2, #1
 800264a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	78fa      	ldrb	r2, [r7, #3]
 8002652:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	78fa      	ldrb	r2, [r7, #3]
 800265a:	4611      	mov	r1, r2
 800265c:	4618      	mov	r0, r3
 800265e:	f006 fd1d 	bl	800909c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2200      	movs	r2, #0
 8002666:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800266a:	2300      	movs	r3, #0
}
 800266c:	4618      	mov	r0, r3
 800266e:	3708      	adds	r7, #8
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}

08002674 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b084      	sub	sp, #16
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
 800267c:	4608      	mov	r0, r1
 800267e:	4611      	mov	r1, r2
 8002680:	461a      	mov	r2, r3
 8002682:	4603      	mov	r3, r0
 8002684:	70fb      	strb	r3, [r7, #3]
 8002686:	460b      	mov	r3, r1
 8002688:	803b      	strh	r3, [r7, #0]
 800268a:	4613      	mov	r3, r2
 800268c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800268e:	2300      	movs	r3, #0
 8002690:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002692:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002696:	2b00      	cmp	r3, #0
 8002698:	da0e      	bge.n	80026b8 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800269a:	78fb      	ldrb	r3, [r7, #3]
 800269c:	f003 0207 	and.w	r2, r3, #7
 80026a0:	4613      	mov	r3, r2
 80026a2:	009b      	lsls	r3, r3, #2
 80026a4:	4413      	add	r3, r2
 80026a6:	00db      	lsls	r3, r3, #3
 80026a8:	3310      	adds	r3, #16
 80026aa:	687a      	ldr	r2, [r7, #4]
 80026ac:	4413      	add	r3, r2
 80026ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	2201      	movs	r2, #1
 80026b4:	705a      	strb	r2, [r3, #1]
 80026b6:	e00e      	b.n	80026d6 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80026b8:	78fb      	ldrb	r3, [r7, #3]
 80026ba:	f003 0207 	and.w	r2, r3, #7
 80026be:	4613      	mov	r3, r2
 80026c0:	009b      	lsls	r3, r3, #2
 80026c2:	4413      	add	r3, r2
 80026c4:	00db      	lsls	r3, r3, #3
 80026c6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80026ca:	687a      	ldr	r2, [r7, #4]
 80026cc:	4413      	add	r3, r2
 80026ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	2200      	movs	r2, #0
 80026d4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80026d6:	78fb      	ldrb	r3, [r7, #3]
 80026d8:	f003 0307 	and.w	r3, r3, #7
 80026dc:	b2da      	uxtb	r2, r3
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80026e2:	883b      	ldrh	r3, [r7, #0]
 80026e4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	78ba      	ldrb	r2, [r7, #2]
 80026f0:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80026f2:	78bb      	ldrb	r3, [r7, #2]
 80026f4:	2b02      	cmp	r3, #2
 80026f6:	d102      	bne.n	80026fe <HAL_PCD_EP_Open+0x8a>
  {
    ep->data_pid_start = 0U;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	2200      	movs	r2, #0
 80026fc:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002704:	2b01      	cmp	r3, #1
 8002706:	d101      	bne.n	800270c <HAL_PCD_EP_Open+0x98>
 8002708:	2302      	movs	r3, #2
 800270a:	e00e      	b.n	800272a <HAL_PCD_EP_Open+0xb6>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2201      	movs	r2, #1
 8002710:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	68f9      	ldr	r1, [r7, #12]
 800271a:	4618      	mov	r0, r3
 800271c:	f004 ff40 	bl	80075a0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2200      	movs	r2, #0
 8002724:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8002728:	7afb      	ldrb	r3, [r7, #11]
}
 800272a:	4618      	mov	r0, r3
 800272c:	3710      	adds	r7, #16
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}

08002732 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002732:	b580      	push	{r7, lr}
 8002734:	b084      	sub	sp, #16
 8002736:	af00      	add	r7, sp, #0
 8002738:	6078      	str	r0, [r7, #4]
 800273a:	460b      	mov	r3, r1
 800273c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800273e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002742:	2b00      	cmp	r3, #0
 8002744:	da0e      	bge.n	8002764 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002746:	78fb      	ldrb	r3, [r7, #3]
 8002748:	f003 0207 	and.w	r2, r3, #7
 800274c:	4613      	mov	r3, r2
 800274e:	009b      	lsls	r3, r3, #2
 8002750:	4413      	add	r3, r2
 8002752:	00db      	lsls	r3, r3, #3
 8002754:	3310      	adds	r3, #16
 8002756:	687a      	ldr	r2, [r7, #4]
 8002758:	4413      	add	r3, r2
 800275a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	2201      	movs	r2, #1
 8002760:	705a      	strb	r2, [r3, #1]
 8002762:	e00e      	b.n	8002782 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002764:	78fb      	ldrb	r3, [r7, #3]
 8002766:	f003 0207 	and.w	r2, r3, #7
 800276a:	4613      	mov	r3, r2
 800276c:	009b      	lsls	r3, r3, #2
 800276e:	4413      	add	r3, r2
 8002770:	00db      	lsls	r3, r3, #3
 8002772:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002776:	687a      	ldr	r2, [r7, #4]
 8002778:	4413      	add	r3, r2
 800277a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	2200      	movs	r2, #0
 8002780:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002782:	78fb      	ldrb	r3, [r7, #3]
 8002784:	f003 0307 	and.w	r3, r3, #7
 8002788:	b2da      	uxtb	r2, r3
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002794:	2b01      	cmp	r3, #1
 8002796:	d101      	bne.n	800279c <HAL_PCD_EP_Close+0x6a>
 8002798:	2302      	movs	r3, #2
 800279a:	e00e      	b.n	80027ba <HAL_PCD_EP_Close+0x88>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2201      	movs	r2, #1
 80027a0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	68f9      	ldr	r1, [r7, #12]
 80027aa:	4618      	mov	r0, r3
 80027ac:	f005 fbe0 	bl	8007f70 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2200      	movs	r2, #0
 80027b4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 80027b8:	2300      	movs	r3, #0
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	3710      	adds	r7, #16
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}

080027c2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80027c2:	b580      	push	{r7, lr}
 80027c4:	b086      	sub	sp, #24
 80027c6:	af00      	add	r7, sp, #0
 80027c8:	60f8      	str	r0, [r7, #12]
 80027ca:	607a      	str	r2, [r7, #4]
 80027cc:	603b      	str	r3, [r7, #0]
 80027ce:	460b      	mov	r3, r1
 80027d0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80027d2:	7afb      	ldrb	r3, [r7, #11]
 80027d4:	f003 0207 	and.w	r2, r3, #7
 80027d8:	4613      	mov	r3, r2
 80027da:	009b      	lsls	r3, r3, #2
 80027dc:	4413      	add	r3, r2
 80027de:	00db      	lsls	r3, r3, #3
 80027e0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80027e4:	68fa      	ldr	r2, [r7, #12]
 80027e6:	4413      	add	r3, r2
 80027e8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	687a      	ldr	r2, [r7, #4]
 80027ee:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	683a      	ldr	r2, [r7, #0]
 80027f4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	2200      	movs	r2, #0
 80027fa:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	2200      	movs	r2, #0
 8002800:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002802:	7afb      	ldrb	r3, [r7, #11]
 8002804:	f003 0307 	and.w	r3, r3, #7
 8002808:	b2da      	uxtb	r2, r3
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	6979      	ldr	r1, [r7, #20]
 8002814:	4618      	mov	r0, r3
 8002816:	f005 fd98 	bl	800834a <USB_EPStartXfer>

  return HAL_OK;
 800281a:	2300      	movs	r3, #0
}
 800281c:	4618      	mov	r0, r3
 800281e:	3718      	adds	r7, #24
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}

08002824 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002824:	b480      	push	{r7}
 8002826:	b083      	sub	sp, #12
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
 800282c:	460b      	mov	r3, r1
 800282e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002830:	78fb      	ldrb	r3, [r7, #3]
 8002832:	f003 0207 	and.w	r2, r3, #7
 8002836:	6879      	ldr	r1, [r7, #4]
 8002838:	4613      	mov	r3, r2
 800283a:	009b      	lsls	r3, r3, #2
 800283c:	4413      	add	r3, r2
 800283e:	00db      	lsls	r3, r3, #3
 8002840:	440b      	add	r3, r1
 8002842:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8002846:	681b      	ldr	r3, [r3, #0]
}
 8002848:	4618      	mov	r0, r3
 800284a:	370c      	adds	r7, #12
 800284c:	46bd      	mov	sp, r7
 800284e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002852:	4770      	bx	lr

08002854 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b086      	sub	sp, #24
 8002858:	af00      	add	r7, sp, #0
 800285a:	60f8      	str	r0, [r7, #12]
 800285c:	607a      	str	r2, [r7, #4]
 800285e:	603b      	str	r3, [r7, #0]
 8002860:	460b      	mov	r3, r1
 8002862:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002864:	7afb      	ldrb	r3, [r7, #11]
 8002866:	f003 0207 	and.w	r2, r3, #7
 800286a:	4613      	mov	r3, r2
 800286c:	009b      	lsls	r3, r3, #2
 800286e:	4413      	add	r3, r2
 8002870:	00db      	lsls	r3, r3, #3
 8002872:	3310      	adds	r3, #16
 8002874:	68fa      	ldr	r2, [r7, #12]
 8002876:	4413      	add	r3, r2
 8002878:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	687a      	ldr	r2, [r7, #4]
 800287e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	683a      	ldr	r2, [r7, #0]
 8002884:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	2201      	movs	r2, #1
 800288a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	683a      	ldr	r2, [r7, #0]
 8002892:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	2200      	movs	r2, #0
 8002898:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	2201      	movs	r2, #1
 800289e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80028a0:	7afb      	ldrb	r3, [r7, #11]
 80028a2:	f003 0307 	and.w	r3, r3, #7
 80028a6:	b2da      	uxtb	r2, r3
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	6979      	ldr	r1, [r7, #20]
 80028b2:	4618      	mov	r0, r3
 80028b4:	f005 fd49 	bl	800834a <USB_EPStartXfer>

  return HAL_OK;
 80028b8:	2300      	movs	r3, #0
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	3718      	adds	r7, #24
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}

080028c2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80028c2:	b580      	push	{r7, lr}
 80028c4:	b084      	sub	sp, #16
 80028c6:	af00      	add	r7, sp, #0
 80028c8:	6078      	str	r0, [r7, #4]
 80028ca:	460b      	mov	r3, r1
 80028cc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80028ce:	78fb      	ldrb	r3, [r7, #3]
 80028d0:	f003 0307 	and.w	r3, r3, #7
 80028d4:	687a      	ldr	r2, [r7, #4]
 80028d6:	7912      	ldrb	r2, [r2, #4]
 80028d8:	4293      	cmp	r3, r2
 80028da:	d901      	bls.n	80028e0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80028dc:	2301      	movs	r3, #1
 80028de:	e03e      	b.n	800295e <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80028e0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	da0e      	bge.n	8002906 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80028e8:	78fb      	ldrb	r3, [r7, #3]
 80028ea:	f003 0207 	and.w	r2, r3, #7
 80028ee:	4613      	mov	r3, r2
 80028f0:	009b      	lsls	r3, r3, #2
 80028f2:	4413      	add	r3, r2
 80028f4:	00db      	lsls	r3, r3, #3
 80028f6:	3310      	adds	r3, #16
 80028f8:	687a      	ldr	r2, [r7, #4]
 80028fa:	4413      	add	r3, r2
 80028fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	2201      	movs	r2, #1
 8002902:	705a      	strb	r2, [r3, #1]
 8002904:	e00c      	b.n	8002920 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002906:	78fa      	ldrb	r2, [r7, #3]
 8002908:	4613      	mov	r3, r2
 800290a:	009b      	lsls	r3, r3, #2
 800290c:	4413      	add	r3, r2
 800290e:	00db      	lsls	r3, r3, #3
 8002910:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002914:	687a      	ldr	r2, [r7, #4]
 8002916:	4413      	add	r3, r2
 8002918:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	2200      	movs	r2, #0
 800291e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	2201      	movs	r2, #1
 8002924:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002926:	78fb      	ldrb	r3, [r7, #3]
 8002928:	f003 0307 	and.w	r3, r3, #7
 800292c:	b2da      	uxtb	r2, r3
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002938:	2b01      	cmp	r3, #1
 800293a:	d101      	bne.n	8002940 <HAL_PCD_EP_SetStall+0x7e>
 800293c:	2302      	movs	r3, #2
 800293e:	e00e      	b.n	800295e <HAL_PCD_EP_SetStall+0x9c>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2201      	movs	r2, #1
 8002944:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	68f9      	ldr	r1, [r7, #12]
 800294e:	4618      	mov	r0, r3
 8002950:	f006 faaa 	bl	8008ea8 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2200      	movs	r2, #0
 8002958:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800295c:	2300      	movs	r3, #0
}
 800295e:	4618      	mov	r0, r3
 8002960:	3710      	adds	r7, #16
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}

08002966 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002966:	b580      	push	{r7, lr}
 8002968:	b084      	sub	sp, #16
 800296a:	af00      	add	r7, sp, #0
 800296c:	6078      	str	r0, [r7, #4]
 800296e:	460b      	mov	r3, r1
 8002970:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002972:	78fb      	ldrb	r3, [r7, #3]
 8002974:	f003 030f 	and.w	r3, r3, #15
 8002978:	687a      	ldr	r2, [r7, #4]
 800297a:	7912      	ldrb	r2, [r2, #4]
 800297c:	4293      	cmp	r3, r2
 800297e:	d901      	bls.n	8002984 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002980:	2301      	movs	r3, #1
 8002982:	e040      	b.n	8002a06 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002984:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002988:	2b00      	cmp	r3, #0
 800298a:	da0e      	bge.n	80029aa <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800298c:	78fb      	ldrb	r3, [r7, #3]
 800298e:	f003 0207 	and.w	r2, r3, #7
 8002992:	4613      	mov	r3, r2
 8002994:	009b      	lsls	r3, r3, #2
 8002996:	4413      	add	r3, r2
 8002998:	00db      	lsls	r3, r3, #3
 800299a:	3310      	adds	r3, #16
 800299c:	687a      	ldr	r2, [r7, #4]
 800299e:	4413      	add	r3, r2
 80029a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	2201      	movs	r2, #1
 80029a6:	705a      	strb	r2, [r3, #1]
 80029a8:	e00e      	b.n	80029c8 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80029aa:	78fb      	ldrb	r3, [r7, #3]
 80029ac:	f003 0207 	and.w	r2, r3, #7
 80029b0:	4613      	mov	r3, r2
 80029b2:	009b      	lsls	r3, r3, #2
 80029b4:	4413      	add	r3, r2
 80029b6:	00db      	lsls	r3, r3, #3
 80029b8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80029bc:	687a      	ldr	r2, [r7, #4]
 80029be:	4413      	add	r3, r2
 80029c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	2200      	movs	r2, #0
 80029c6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	2200      	movs	r2, #0
 80029cc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80029ce:	78fb      	ldrb	r3, [r7, #3]
 80029d0:	f003 0307 	and.w	r3, r3, #7
 80029d4:	b2da      	uxtb	r2, r3
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80029e0:	2b01      	cmp	r3, #1
 80029e2:	d101      	bne.n	80029e8 <HAL_PCD_EP_ClrStall+0x82>
 80029e4:	2302      	movs	r3, #2
 80029e6:	e00e      	b.n	8002a06 <HAL_PCD_EP_ClrStall+0xa0>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2201      	movs	r2, #1
 80029ec:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	68f9      	ldr	r1, [r7, #12]
 80029f6:	4618      	mov	r0, r3
 80029f8:	f006 faa7 	bl	8008f4a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2200      	movs	r2, #0
 8002a00:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002a04:	2300      	movs	r3, #0
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	3710      	adds	r7, #16
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}

08002a0e <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002a0e:	b580      	push	{r7, lr}
 8002a10:	b092      	sub	sp, #72	@ 0x48
 8002a12:	af00      	add	r7, sp, #0
 8002a14:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002a16:	e333      	b.n	8003080 <PCD_EP_ISR_Handler+0x672>
  {
    wIstr = hpcd->Instance->ISTR;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002a20:	877b      	strh	r3, [r7, #58]	@ 0x3a

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002a22:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	f003 030f 	and.w	r3, r3, #15
 8002a2a:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39

    if (epindex == 0U)
 8002a2e:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	f040 8108 	bne.w	8002c48 <PCD_EP_ISR_Handler+0x23a>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002a38:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8002a3a:	f003 0310 	and.w	r3, r3, #16
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d14c      	bne.n	8002adc <PCD_EP_ISR_Handler+0xce>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	881b      	ldrh	r3, [r3, #0]
 8002a48:	b29b      	uxth	r3, r3
 8002a4a:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8002a4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a52:	813b      	strh	r3, [r7, #8]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681a      	ldr	r2, [r3, #0]
 8002a58:	893b      	ldrh	r3, [r7, #8]
 8002a5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a62:	b29b      	uxth	r3, r3
 8002a64:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	3310      	adds	r3, #16
 8002a6a:	643b      	str	r3, [r7, #64]	@ 0x40

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002a74:	b29b      	uxth	r3, r3
 8002a76:	461a      	mov	r2, r3
 8002a78:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002a7a:	781b      	ldrb	r3, [r3, #0]
 8002a7c:	00db      	lsls	r3, r3, #3
 8002a7e:	4413      	add	r3, r2
 8002a80:	687a      	ldr	r2, [r7, #4]
 8002a82:	6812      	ldr	r2, [r2, #0]
 8002a84:	4413      	add	r3, r2
 8002a86:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002a8a:	881b      	ldrh	r3, [r3, #0]
 8002a8c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002a90:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002a92:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002a94:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002a96:	695a      	ldr	r2, [r3, #20]
 8002a98:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002a9a:	69db      	ldr	r3, [r3, #28]
 8002a9c:	441a      	add	r2, r3
 8002a9e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002aa0:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002aa2:	2100      	movs	r1, #0
 8002aa4:	6878      	ldr	r0, [r7, #4]
 8002aa6:	f008 fa8c 	bl	800afc2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	7b1b      	ldrb	r3, [r3, #12]
 8002aae:	b2db      	uxtb	r3, r3
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	f000 82e5 	beq.w	8003080 <PCD_EP_ISR_Handler+0x672>
 8002ab6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002ab8:	699b      	ldr	r3, [r3, #24]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	f040 82e0 	bne.w	8003080 <PCD_EP_ISR_Handler+0x672>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	7b1b      	ldrb	r3, [r3, #12]
 8002ac4:	b2db      	uxtb	r3, r3
 8002ac6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002aca:	b2da      	uxtb	r2, r3
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	731a      	strb	r2, [r3, #12]
 8002ada:	e2d1      	b.n	8003080 <PCD_EP_ISR_Handler+0x672>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002ae2:	643b      	str	r3, [r7, #64]	@ 0x40
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	881b      	ldrh	r3, [r3, #0]
 8002aea:	86fb      	strh	r3, [r7, #54]	@ 0x36

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002aec:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8002aee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d032      	beq.n	8002b5c <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002afe:	b29b      	uxth	r3, r3
 8002b00:	461a      	mov	r2, r3
 8002b02:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b04:	781b      	ldrb	r3, [r3, #0]
 8002b06:	00db      	lsls	r3, r3, #3
 8002b08:	4413      	add	r3, r2
 8002b0a:	687a      	ldr	r2, [r7, #4]
 8002b0c:	6812      	ldr	r2, [r2, #0]
 8002b0e:	4413      	add	r3, r2
 8002b10:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002b14:	881b      	ldrh	r3, [r3, #0]
 8002b16:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002b1a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b1c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6818      	ldr	r0, [r3, #0]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8002b28:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b2a:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002b2c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b2e:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002b30:	b29b      	uxth	r3, r3
 8002b32:	f006 fb30 	bl	8009196 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	881b      	ldrh	r3, [r3, #0]
 8002b3c:	b29a      	uxth	r2, r3
 8002b3e:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002b42:	4013      	ands	r3, r2
 8002b44:	817b      	strh	r3, [r7, #10]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	897a      	ldrh	r2, [r7, #10]
 8002b4c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002b50:	b292      	uxth	r2, r2
 8002b52:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002b54:	6878      	ldr	r0, [r7, #4]
 8002b56:	f008 fa07 	bl	800af68 <HAL_PCD_SetupStageCallback>
 8002b5a:	e291      	b.n	8003080 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002b5c:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	f280 828d 	bge.w	8003080 <PCD_EP_ISR_Handler+0x672>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	881b      	ldrh	r3, [r3, #0]
 8002b6c:	b29a      	uxth	r2, r3
 8002b6e:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002b72:	4013      	ands	r3, r2
 8002b74:	81fb      	strh	r3, [r7, #14]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	89fa      	ldrh	r2, [r7, #14]
 8002b7c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002b80:	b292      	uxth	r2, r2
 8002b82:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002b8c:	b29b      	uxth	r3, r3
 8002b8e:	461a      	mov	r2, r3
 8002b90:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b92:	781b      	ldrb	r3, [r3, #0]
 8002b94:	00db      	lsls	r3, r3, #3
 8002b96:	4413      	add	r3, r2
 8002b98:	687a      	ldr	r2, [r7, #4]
 8002b9a:	6812      	ldr	r2, [r2, #0]
 8002b9c:	4413      	add	r3, r2
 8002b9e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002ba2:	881b      	ldrh	r3, [r3, #0]
 8002ba4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002ba8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002baa:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002bac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002bae:	69db      	ldr	r3, [r3, #28]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d019      	beq.n	8002be8 <PCD_EP_ISR_Handler+0x1da>
 8002bb4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002bb6:	695b      	ldr	r3, [r3, #20]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d015      	beq.n	8002be8 <PCD_EP_ISR_Handler+0x1da>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6818      	ldr	r0, [r3, #0]
 8002bc0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002bc2:	6959      	ldr	r1, [r3, #20]
 8002bc4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002bc6:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002bc8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002bca:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002bcc:	b29b      	uxth	r3, r3
 8002bce:	f006 fae2 	bl	8009196 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002bd2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002bd4:	695a      	ldr	r2, [r3, #20]
 8002bd6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002bd8:	69db      	ldr	r3, [r3, #28]
 8002bda:	441a      	add	r2, r3
 8002bdc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002bde:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002be0:	2100      	movs	r1, #0
 8002be2:	6878      	ldr	r0, [r7, #4]
 8002be4:	f008 f9d2 	bl	800af8c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	881b      	ldrh	r3, [r3, #0]
 8002bee:	86fb      	strh	r3, [r7, #54]	@ 0x36

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8002bf0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8002bf2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	f040 8242 	bne.w	8003080 <PCD_EP_ISR_Handler+0x672>
 8002bfc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8002bfe:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8002c02:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002c06:	f000 823b 	beq.w	8003080 <PCD_EP_ISR_Handler+0x672>
          {
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	881b      	ldrh	r3, [r3, #0]
 8002c10:	b29b      	uxth	r3, r3
 8002c12:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002c16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002c1a:	81bb      	strh	r3, [r7, #12]
 8002c1c:	89bb      	ldrh	r3, [r7, #12]
 8002c1e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8002c22:	81bb      	strh	r3, [r7, #12]
 8002c24:	89bb      	ldrh	r3, [r7, #12]
 8002c26:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002c2a:	81bb      	strh	r3, [r7, #12]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681a      	ldr	r2, [r3, #0]
 8002c30:	89bb      	ldrh	r3, [r7, #12]
 8002c32:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002c36:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002c3a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002c3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002c42:	b29b      	uxth	r3, r3
 8002c44:	8013      	strh	r3, [r2, #0]
 8002c46:	e21b      	b.n	8003080 <PCD_EP_ISR_Handler+0x672>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	461a      	mov	r2, r3
 8002c4e:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8002c52:	009b      	lsls	r3, r3, #2
 8002c54:	4413      	add	r3, r2
 8002c56:	881b      	ldrh	r3, [r3, #0]
 8002c58:	86fb      	strh	r3, [r7, #54]	@ 0x36

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002c5a:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	f280 80f1 	bge.w	8002e46 <PCD_EP_ISR_Handler+0x438>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	461a      	mov	r2, r3
 8002c6a:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8002c6e:	009b      	lsls	r3, r3, #2
 8002c70:	4413      	add	r3, r2
 8002c72:	881b      	ldrh	r3, [r3, #0]
 8002c74:	b29a      	uxth	r2, r3
 8002c76:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	461a      	mov	r2, r3
 8002c84:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8002c88:	009b      	lsls	r3, r3, #2
 8002c8a:	4413      	add	r3, r2
 8002c8c:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002c8e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002c92:	b292      	uxth	r2, r2
 8002c94:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002c96:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8002c9a:	4613      	mov	r3, r2
 8002c9c:	009b      	lsls	r3, r3, #2
 8002c9e:	4413      	add	r3, r2
 8002ca0:	00db      	lsls	r3, r3, #3
 8002ca2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002ca6:	687a      	ldr	r2, [r7, #4]
 8002ca8:	4413      	add	r3, r2
 8002caa:	643b      	str	r3, [r7, #64]	@ 0x40

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002cac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002cae:	7b1b      	ldrb	r3, [r3, #12]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d123      	bne.n	8002cfc <PCD_EP_ISR_Handler+0x2ee>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002cbc:	b29b      	uxth	r3, r3
 8002cbe:	461a      	mov	r2, r3
 8002cc0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002cc2:	781b      	ldrb	r3, [r3, #0]
 8002cc4:	00db      	lsls	r3, r3, #3
 8002cc6:	4413      	add	r3, r2
 8002cc8:	687a      	ldr	r2, [r7, #4]
 8002cca:	6812      	ldr	r2, [r2, #0]
 8002ccc:	4413      	add	r3, r2
 8002cce:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002cd2:	881b      	ldrh	r3, [r3, #0]
 8002cd4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002cd8:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

          if (count != 0U)
 8002cdc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	f000 808b 	beq.w	8002dfc <PCD_EP_ISR_Handler+0x3ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6818      	ldr	r0, [r3, #0]
 8002cea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002cec:	6959      	ldr	r1, [r3, #20]
 8002cee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002cf0:	88da      	ldrh	r2, [r3, #6]
 8002cf2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002cf6:	f006 fa4e 	bl	8009196 <USB_ReadPMA>
 8002cfa:	e07f      	b.n	8002dfc <PCD_EP_ISR_Handler+0x3ee>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002cfc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002cfe:	78db      	ldrb	r3, [r3, #3]
 8002d00:	2b02      	cmp	r3, #2
 8002d02:	d109      	bne.n	8002d18 <PCD_EP_ISR_Handler+0x30a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002d04:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8002d06:	461a      	mov	r2, r3
 8002d08:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	f000 f9c6 	bl	800309c <HAL_PCD_EP_DB_Receive>
 8002d10:	4603      	mov	r3, r0
 8002d12:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8002d16:	e071      	b.n	8002dfc <PCD_EP_ISR_Handler+0x3ee>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	461a      	mov	r2, r3
 8002d1e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d20:	781b      	ldrb	r3, [r3, #0]
 8002d22:	009b      	lsls	r3, r3, #2
 8002d24:	4413      	add	r3, r2
 8002d26:	881b      	ldrh	r3, [r3, #0]
 8002d28:	b29b      	uxth	r3, r3
 8002d2a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002d2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d32:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	461a      	mov	r2, r3
 8002d3a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d3c:	781b      	ldrb	r3, [r3, #0]
 8002d3e:	009b      	lsls	r3, r3, #2
 8002d40:	441a      	add	r2, r3
 8002d42:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8002d44:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002d48:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002d4c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002d50:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002d54:	b29b      	uxth	r3, r3
 8002d56:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	461a      	mov	r2, r3
 8002d5e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d60:	781b      	ldrb	r3, [r3, #0]
 8002d62:	009b      	lsls	r3, r3, #2
 8002d64:	4413      	add	r3, r2
 8002d66:	881b      	ldrh	r3, [r3, #0]
 8002d68:	b29b      	uxth	r3, r3
 8002d6a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d022      	beq.n	8002db8 <PCD_EP_ISR_Handler+0x3aa>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002d7a:	b29b      	uxth	r3, r3
 8002d7c:	461a      	mov	r2, r3
 8002d7e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d80:	781b      	ldrb	r3, [r3, #0]
 8002d82:	00db      	lsls	r3, r3, #3
 8002d84:	4413      	add	r3, r2
 8002d86:	687a      	ldr	r2, [r7, #4]
 8002d88:	6812      	ldr	r2, [r2, #0]
 8002d8a:	4413      	add	r3, r2
 8002d8c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002d90:	881b      	ldrh	r3, [r3, #0]
 8002d92:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d96:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 8002d9a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d02c      	beq.n	8002dfc <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6818      	ldr	r0, [r3, #0]
 8002da6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002da8:	6959      	ldr	r1, [r3, #20]
 8002daa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002dac:	891a      	ldrh	r2, [r3, #8]
 8002dae:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002db2:	f006 f9f0 	bl	8009196 <USB_ReadPMA>
 8002db6:	e021      	b.n	8002dfc <PCD_EP_ISR_Handler+0x3ee>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002dc0:	b29b      	uxth	r3, r3
 8002dc2:	461a      	mov	r2, r3
 8002dc4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002dc6:	781b      	ldrb	r3, [r3, #0]
 8002dc8:	00db      	lsls	r3, r3, #3
 8002dca:	4413      	add	r3, r2
 8002dcc:	687a      	ldr	r2, [r7, #4]
 8002dce:	6812      	ldr	r2, [r2, #0]
 8002dd0:	4413      	add	r3, r2
 8002dd2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002dd6:	881b      	ldrh	r3, [r3, #0]
 8002dd8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ddc:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 8002de0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d009      	beq.n	8002dfc <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6818      	ldr	r0, [r3, #0]
 8002dec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002dee:	6959      	ldr	r1, [r3, #20]
 8002df0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002df2:	895a      	ldrh	r2, [r3, #10]
 8002df4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002df8:	f006 f9cd 	bl	8009196 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002dfc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002dfe:	69da      	ldr	r2, [r3, #28]
 8002e00:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002e04:	441a      	add	r2, r3
 8002e06:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002e08:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002e0a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002e0c:	695a      	ldr	r2, [r3, #20]
 8002e0e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002e12:	441a      	add	r2, r3
 8002e14:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002e16:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002e18:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002e1a:	699b      	ldr	r3, [r3, #24]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d005      	beq.n	8002e2c <PCD_EP_ISR_Handler+0x41e>
 8002e20:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8002e24:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002e26:	691b      	ldr	r3, [r3, #16]
 8002e28:	429a      	cmp	r2, r3
 8002e2a:	d206      	bcs.n	8002e3a <PCD_EP_ISR_Handler+0x42c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002e2c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002e2e:	781b      	ldrb	r3, [r3, #0]
 8002e30:	4619      	mov	r1, r3
 8002e32:	6878      	ldr	r0, [r7, #4]
 8002e34:	f008 f8aa 	bl	800af8c <HAL_PCD_DataOutStageCallback>
 8002e38:	e005      	b.n	8002e46 <PCD_EP_ISR_Handler+0x438>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002e40:	4618      	mov	r0, r3
 8002e42:	f005 fa82 	bl	800834a <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002e46:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8002e48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	f000 8117 	beq.w	8003080 <PCD_EP_ISR_Handler+0x672>
      {
        ep = &hpcd->IN_ep[epindex];
 8002e52:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8002e56:	4613      	mov	r3, r2
 8002e58:	009b      	lsls	r3, r3, #2
 8002e5a:	4413      	add	r3, r2
 8002e5c:	00db      	lsls	r3, r3, #3
 8002e5e:	3310      	adds	r3, #16
 8002e60:	687a      	ldr	r2, [r7, #4]
 8002e62:	4413      	add	r3, r2
 8002e64:	643b      	str	r3, [r7, #64]	@ 0x40

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	461a      	mov	r2, r3
 8002e6c:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8002e70:	009b      	lsls	r3, r3, #2
 8002e72:	4413      	add	r3, r2
 8002e74:	881b      	ldrh	r3, [r3, #0]
 8002e76:	b29b      	uxth	r3, r3
 8002e78:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8002e7c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e80:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	461a      	mov	r2, r3
 8002e88:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8002e8c:	009b      	lsls	r3, r3, #2
 8002e8e:	441a      	add	r2, r3
 8002e90:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8002e92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e9a:	b29b      	uxth	r3, r3
 8002e9c:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8002e9e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002ea0:	78db      	ldrb	r3, [r3, #3]
 8002ea2:	2b01      	cmp	r3, #1
 8002ea4:	f040 80a1 	bne.w	8002fea <PCD_EP_ISR_Handler+0x5dc>
        {
          ep->xfer_len = 0U;
 8002ea8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002eaa:	2200      	movs	r2, #0
 8002eac:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8002eae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002eb0:	7b1b      	ldrb	r3, [r3, #12]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	f000 8092 	beq.w	8002fdc <PCD_EP_ISR_Handler+0x5ce>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002eb8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8002eba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d046      	beq.n	8002f50 <PCD_EP_ISR_Handler+0x542>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002ec2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002ec4:	785b      	ldrb	r3, [r3, #1]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d126      	bne.n	8002f18 <PCD_EP_ISR_Handler+0x50a>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	617b      	str	r3, [r7, #20]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002ed8:	b29b      	uxth	r3, r3
 8002eda:	461a      	mov	r2, r3
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	4413      	add	r3, r2
 8002ee0:	617b      	str	r3, [r7, #20]
 8002ee2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002ee4:	781b      	ldrb	r3, [r3, #0]
 8002ee6:	00da      	lsls	r2, r3, #3
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	4413      	add	r3, r2
 8002eec:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002ef0:	613b      	str	r3, [r7, #16]
 8002ef2:	693b      	ldr	r3, [r7, #16]
 8002ef4:	881b      	ldrh	r3, [r3, #0]
 8002ef6:	b29b      	uxth	r3, r3
 8002ef8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002efc:	b29a      	uxth	r2, r3
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	801a      	strh	r2, [r3, #0]
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	881b      	ldrh	r3, [r3, #0]
 8002f06:	b29b      	uxth	r3, r3
 8002f08:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f0c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f10:	b29a      	uxth	r2, r3
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	801a      	strh	r2, [r3, #0]
 8002f16:	e061      	b.n	8002fdc <PCD_EP_ISR_Handler+0x5ce>
 8002f18:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002f1a:	785b      	ldrb	r3, [r3, #1]
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	d15d      	bne.n	8002fdc <PCD_EP_ISR_Handler+0x5ce>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	61fb      	str	r3, [r7, #28]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002f2e:	b29b      	uxth	r3, r3
 8002f30:	461a      	mov	r2, r3
 8002f32:	69fb      	ldr	r3, [r7, #28]
 8002f34:	4413      	add	r3, r2
 8002f36:	61fb      	str	r3, [r7, #28]
 8002f38:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002f3a:	781b      	ldrb	r3, [r3, #0]
 8002f3c:	00da      	lsls	r2, r3, #3
 8002f3e:	69fb      	ldr	r3, [r7, #28]
 8002f40:	4413      	add	r3, r2
 8002f42:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002f46:	61bb      	str	r3, [r7, #24]
 8002f48:	69bb      	ldr	r3, [r7, #24]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	801a      	strh	r2, [r3, #0]
 8002f4e:	e045      	b.n	8002fdc <PCD_EP_ISR_Handler+0x5ce>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002f56:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002f58:	785b      	ldrb	r3, [r3, #1]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d126      	bne.n	8002fac <PCD_EP_ISR_Handler+0x59e>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002f6c:	b29b      	uxth	r3, r3
 8002f6e:	461a      	mov	r2, r3
 8002f70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f72:	4413      	add	r3, r2
 8002f74:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f76:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002f78:	781b      	ldrb	r3, [r3, #0]
 8002f7a:	00da      	lsls	r2, r3, #3
 8002f7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f7e:	4413      	add	r3, r2
 8002f80:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002f84:	623b      	str	r3, [r7, #32]
 8002f86:	6a3b      	ldr	r3, [r7, #32]
 8002f88:	881b      	ldrh	r3, [r3, #0]
 8002f8a:	b29b      	uxth	r3, r3
 8002f8c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f90:	b29a      	uxth	r2, r3
 8002f92:	6a3b      	ldr	r3, [r7, #32]
 8002f94:	801a      	strh	r2, [r3, #0]
 8002f96:	6a3b      	ldr	r3, [r7, #32]
 8002f98:	881b      	ldrh	r3, [r3, #0]
 8002f9a:	b29b      	uxth	r3, r3
 8002f9c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002fa0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002fa4:	b29a      	uxth	r2, r3
 8002fa6:	6a3b      	ldr	r3, [r7, #32]
 8002fa8:	801a      	strh	r2, [r3, #0]
 8002faa:	e017      	b.n	8002fdc <PCD_EP_ISR_Handler+0x5ce>
 8002fac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002fae:	785b      	ldrb	r3, [r3, #1]
 8002fb0:	2b01      	cmp	r3, #1
 8002fb2:	d113      	bne.n	8002fdc <PCD_EP_ISR_Handler+0x5ce>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002fbc:	b29b      	uxth	r3, r3
 8002fbe:	461a      	mov	r2, r3
 8002fc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fc2:	4413      	add	r3, r2
 8002fc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002fc6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002fc8:	781b      	ldrb	r3, [r3, #0]
 8002fca:	00da      	lsls	r2, r3, #3
 8002fcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fce:	4413      	add	r3, r2
 8002fd0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002fd4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002fd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fd8:	2200      	movs	r2, #0
 8002fda:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002fdc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002fde:	781b      	ldrb	r3, [r3, #0]
 8002fe0:	4619      	mov	r1, r3
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	f007 ffed 	bl	800afc2 <HAL_PCD_DataInStageCallback>
 8002fe8:	e04a      	b.n	8003080 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8002fea:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8002fec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d13f      	bne.n	8003074 <PCD_EP_ISR_Handler+0x666>
          {
            /* Multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002ffc:	b29b      	uxth	r3, r3
 8002ffe:	461a      	mov	r2, r3
 8003000:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003002:	781b      	ldrb	r3, [r3, #0]
 8003004:	00db      	lsls	r3, r3, #3
 8003006:	4413      	add	r3, r2
 8003008:	687a      	ldr	r2, [r7, #4]
 800300a:	6812      	ldr	r2, [r2, #0]
 800300c:	4413      	add	r3, r2
 800300e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003012:	881b      	ldrh	r3, [r3, #0]
 8003014:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003018:	867b      	strh	r3, [r7, #50]	@ 0x32

            if (ep->xfer_len > TxPctSize)
 800301a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800301c:	699a      	ldr	r2, [r3, #24]
 800301e:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8003020:	429a      	cmp	r2, r3
 8003022:	d906      	bls.n	8003032 <PCD_EP_ISR_Handler+0x624>
            {
              ep->xfer_len -= TxPctSize;
 8003024:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003026:	699a      	ldr	r2, [r3, #24]
 8003028:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800302a:	1ad2      	subs	r2, r2, r3
 800302c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800302e:	619a      	str	r2, [r3, #24]
 8003030:	e002      	b.n	8003038 <PCD_EP_ISR_Handler+0x62a>
            }
            else
            {
              ep->xfer_len = 0U;
 8003032:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003034:	2200      	movs	r2, #0
 8003036:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8003038:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800303a:	699b      	ldr	r3, [r3, #24]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d106      	bne.n	800304e <PCD_EP_ISR_Handler+0x640>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003040:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003042:	781b      	ldrb	r3, [r3, #0]
 8003044:	4619      	mov	r1, r3
 8003046:	6878      	ldr	r0, [r7, #4]
 8003048:	f007 ffbb 	bl	800afc2 <HAL_PCD_DataInStageCallback>
 800304c:	e018      	b.n	8003080 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800304e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003050:	695a      	ldr	r2, [r3, #20]
 8003052:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8003054:	441a      	add	r2, r3
 8003056:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003058:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800305a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800305c:	69da      	ldr	r2, [r3, #28]
 800305e:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8003060:	441a      	add	r2, r3
 8003062:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003064:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800306c:	4618      	mov	r0, r3
 800306e:	f005 f96c 	bl	800834a <USB_EPStartXfer>
 8003072:	e005      	b.n	8003080 <PCD_EP_ISR_Handler+0x672>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003074:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003076:	461a      	mov	r2, r3
 8003078:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800307a:	6878      	ldr	r0, [r7, #4]
 800307c:	f000 f917 	bl	80032ae <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003088:	b29b      	uxth	r3, r3
 800308a:	b21b      	sxth	r3, r3
 800308c:	2b00      	cmp	r3, #0
 800308e:	f6ff acc3 	blt.w	8002a18 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003092:	2300      	movs	r3, #0
}
 8003094:	4618      	mov	r0, r3
 8003096:	3748      	adds	r7, #72	@ 0x48
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}

0800309c <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b088      	sub	sp, #32
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	60f8      	str	r0, [r7, #12]
 80030a4:	60b9      	str	r1, [r7, #8]
 80030a6:	4613      	mov	r3, r2
 80030a8:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80030aa:	88fb      	ldrh	r3, [r7, #6]
 80030ac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d07c      	beq.n	80031ae <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80030bc:	b29b      	uxth	r3, r3
 80030be:	461a      	mov	r2, r3
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	781b      	ldrb	r3, [r3, #0]
 80030c4:	00db      	lsls	r3, r3, #3
 80030c6:	4413      	add	r3, r2
 80030c8:	68fa      	ldr	r2, [r7, #12]
 80030ca:	6812      	ldr	r2, [r2, #0]
 80030cc:	4413      	add	r3, r2
 80030ce:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80030d2:	881b      	ldrh	r3, [r3, #0]
 80030d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80030d8:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	699a      	ldr	r2, [r3, #24]
 80030de:	8b7b      	ldrh	r3, [r7, #26]
 80030e0:	429a      	cmp	r2, r3
 80030e2:	d306      	bcc.n	80030f2 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 80030e4:	68bb      	ldr	r3, [r7, #8]
 80030e6:	699a      	ldr	r2, [r3, #24]
 80030e8:	8b7b      	ldrh	r3, [r7, #26]
 80030ea:	1ad2      	subs	r2, r2, r3
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	619a      	str	r2, [r3, #24]
 80030f0:	e002      	b.n	80030f8 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 80030f2:	68bb      	ldr	r3, [r7, #8]
 80030f4:	2200      	movs	r2, #0
 80030f6:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	699b      	ldr	r3, [r3, #24]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d123      	bne.n	8003148 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* Set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	461a      	mov	r2, r3
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	781b      	ldrb	r3, [r3, #0]
 800310a:	009b      	lsls	r3, r3, #2
 800310c:	4413      	add	r3, r2
 800310e:	881b      	ldrh	r3, [r3, #0]
 8003110:	b29b      	uxth	r3, r3
 8003112:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003116:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800311a:	833b      	strh	r3, [r7, #24]
 800311c:	8b3b      	ldrh	r3, [r7, #24]
 800311e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003122:	833b      	strh	r3, [r7, #24]
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	461a      	mov	r2, r3
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	781b      	ldrb	r3, [r3, #0]
 800312e:	009b      	lsls	r3, r3, #2
 8003130:	441a      	add	r2, r3
 8003132:	8b3b      	ldrh	r3, [r7, #24]
 8003134:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003138:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800313c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003140:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003144:	b29b      	uxth	r3, r3
 8003146:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003148:	88fb      	ldrh	r3, [r7, #6]
 800314a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800314e:	2b00      	cmp	r3, #0
 8003150:	d01f      	beq.n	8003192 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	461a      	mov	r2, r3
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	781b      	ldrb	r3, [r3, #0]
 800315c:	009b      	lsls	r3, r3, #2
 800315e:	4413      	add	r3, r2
 8003160:	881b      	ldrh	r3, [r3, #0]
 8003162:	b29b      	uxth	r3, r3
 8003164:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003168:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800316c:	82fb      	strh	r3, [r7, #22]
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	461a      	mov	r2, r3
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	781b      	ldrb	r3, [r3, #0]
 8003178:	009b      	lsls	r3, r3, #2
 800317a:	441a      	add	r2, r3
 800317c:	8afb      	ldrh	r3, [r7, #22]
 800317e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003182:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003186:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800318a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800318e:	b29b      	uxth	r3, r3
 8003190:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003192:	8b7b      	ldrh	r3, [r7, #26]
 8003194:	2b00      	cmp	r3, #0
 8003196:	f000 8085 	beq.w	80032a4 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	6818      	ldr	r0, [r3, #0]
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	6959      	ldr	r1, [r3, #20]
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	891a      	ldrh	r2, [r3, #8]
 80031a6:	8b7b      	ldrh	r3, [r7, #26]
 80031a8:	f005 fff5 	bl	8009196 <USB_ReadPMA>
 80031ac:	e07a      	b.n	80032a4 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80031b6:	b29b      	uxth	r3, r3
 80031b8:	461a      	mov	r2, r3
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	781b      	ldrb	r3, [r3, #0]
 80031be:	00db      	lsls	r3, r3, #3
 80031c0:	4413      	add	r3, r2
 80031c2:	68fa      	ldr	r2, [r7, #12]
 80031c4:	6812      	ldr	r2, [r2, #0]
 80031c6:	4413      	add	r3, r2
 80031c8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80031cc:	881b      	ldrh	r3, [r3, #0]
 80031ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80031d2:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	699a      	ldr	r2, [r3, #24]
 80031d8:	8b7b      	ldrh	r3, [r7, #26]
 80031da:	429a      	cmp	r2, r3
 80031dc:	d306      	bcc.n	80031ec <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 80031de:	68bb      	ldr	r3, [r7, #8]
 80031e0:	699a      	ldr	r2, [r3, #24]
 80031e2:	8b7b      	ldrh	r3, [r7, #26]
 80031e4:	1ad2      	subs	r2, r2, r3
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	619a      	str	r2, [r3, #24]
 80031ea:	e002      	b.n	80031f2 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	2200      	movs	r2, #0
 80031f0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	699b      	ldr	r3, [r3, #24]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d123      	bne.n	8003242 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* Set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	461a      	mov	r2, r3
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	781b      	ldrb	r3, [r3, #0]
 8003204:	009b      	lsls	r3, r3, #2
 8003206:	4413      	add	r3, r2
 8003208:	881b      	ldrh	r3, [r3, #0]
 800320a:	b29b      	uxth	r3, r3
 800320c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003210:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003214:	83fb      	strh	r3, [r7, #30]
 8003216:	8bfb      	ldrh	r3, [r7, #30]
 8003218:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800321c:	83fb      	strh	r3, [r7, #30]
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	461a      	mov	r2, r3
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	781b      	ldrb	r3, [r3, #0]
 8003228:	009b      	lsls	r3, r3, #2
 800322a:	441a      	add	r2, r3
 800322c:	8bfb      	ldrh	r3, [r7, #30]
 800322e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003232:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003236:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800323a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800323e:	b29b      	uxth	r3, r3
 8003240:	8013      	strh	r3, [r2, #0]
    }

    /* Need to FreeUser Buffer */
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003242:	88fb      	ldrh	r3, [r7, #6]
 8003244:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003248:	2b00      	cmp	r3, #0
 800324a:	d11f      	bne.n	800328c <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	461a      	mov	r2, r3
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	781b      	ldrb	r3, [r3, #0]
 8003256:	009b      	lsls	r3, r3, #2
 8003258:	4413      	add	r3, r2
 800325a:	881b      	ldrh	r3, [r3, #0]
 800325c:	b29b      	uxth	r3, r3
 800325e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003262:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003266:	83bb      	strh	r3, [r7, #28]
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	461a      	mov	r2, r3
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	781b      	ldrb	r3, [r3, #0]
 8003272:	009b      	lsls	r3, r3, #2
 8003274:	441a      	add	r2, r3
 8003276:	8bbb      	ldrh	r3, [r7, #28]
 8003278:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800327c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003280:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003284:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003288:	b29b      	uxth	r3, r3
 800328a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800328c:	8b7b      	ldrh	r3, [r7, #26]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d008      	beq.n	80032a4 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	6818      	ldr	r0, [r3, #0]
 8003296:	68bb      	ldr	r3, [r7, #8]
 8003298:	6959      	ldr	r1, [r3, #20]
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	895a      	ldrh	r2, [r3, #10]
 800329e:	8b7b      	ldrh	r3, [r7, #26]
 80032a0:	f005 ff79 	bl	8009196 <USB_ReadPMA>
    }
  }

  return count;
 80032a4:	8b7b      	ldrh	r3, [r7, #26]
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	3720      	adds	r7, #32
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}

080032ae <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80032ae:	b580      	push	{r7, lr}
 80032b0:	b0a6      	sub	sp, #152	@ 0x98
 80032b2:	af00      	add	r7, sp, #0
 80032b4:	60f8      	str	r0, [r7, #12]
 80032b6:	60b9      	str	r1, [r7, #8]
 80032b8:	4613      	mov	r3, r2
 80032ba:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80032bc:	88fb      	ldrh	r3, [r7, #6]
 80032be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	f000 81f7 	beq.w	80036b6 <HAL_PCD_EP_DB_Transmit+0x408>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80032d0:	b29b      	uxth	r3, r3
 80032d2:	461a      	mov	r2, r3
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	781b      	ldrb	r3, [r3, #0]
 80032d8:	00db      	lsls	r3, r3, #3
 80032da:	4413      	add	r3, r2
 80032dc:	68fa      	ldr	r2, [r7, #12]
 80032de:	6812      	ldr	r2, [r2, #0]
 80032e0:	4413      	add	r3, r2
 80032e2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80032e6:	881b      	ldrh	r3, [r3, #0]
 80032e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80032ec:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len > TxPctSize)
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	699a      	ldr	r2, [r3, #24]
 80032f4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80032f8:	429a      	cmp	r2, r3
 80032fa:	d907      	bls.n	800330c <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	699a      	ldr	r2, [r3, #24]
 8003300:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8003304:	1ad2      	subs	r2, r2, r3
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	619a      	str	r2, [r3, #24]
 800330a:	e002      	b.n	8003312 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	2200      	movs	r2, #0
 8003310:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	699b      	ldr	r3, [r3, #24]
 8003316:	2b00      	cmp	r3, #0
 8003318:	f040 80e1 	bne.w	80034de <HAL_PCD_EP_DB_Transmit+0x230>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	785b      	ldrb	r3, [r3, #1]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d126      	bne.n	8003372 <HAL_PCD_EP_DB_Transmit+0xc4>
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	633b      	str	r3, [r7, #48]	@ 0x30
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003332:	b29b      	uxth	r3, r3
 8003334:	461a      	mov	r2, r3
 8003336:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003338:	4413      	add	r3, r2
 800333a:	633b      	str	r3, [r7, #48]	@ 0x30
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	781b      	ldrb	r3, [r3, #0]
 8003340:	00da      	lsls	r2, r3, #3
 8003342:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003344:	4413      	add	r3, r2
 8003346:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800334a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800334c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800334e:	881b      	ldrh	r3, [r3, #0]
 8003350:	b29b      	uxth	r3, r3
 8003352:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003356:	b29a      	uxth	r2, r3
 8003358:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800335a:	801a      	strh	r2, [r3, #0]
 800335c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800335e:	881b      	ldrh	r3, [r3, #0]
 8003360:	b29b      	uxth	r3, r3
 8003362:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003366:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800336a:	b29a      	uxth	r2, r3
 800336c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800336e:	801a      	strh	r2, [r3, #0]
 8003370:	e01a      	b.n	80033a8 <HAL_PCD_EP_DB_Transmit+0xfa>
 8003372:	68bb      	ldr	r3, [r7, #8]
 8003374:	785b      	ldrb	r3, [r3, #1]
 8003376:	2b01      	cmp	r3, #1
 8003378:	d116      	bne.n	80033a8 <HAL_PCD_EP_DB_Transmit+0xfa>
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003388:	b29b      	uxth	r3, r3
 800338a:	461a      	mov	r2, r3
 800338c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800338e:	4413      	add	r3, r2
 8003390:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	781b      	ldrb	r3, [r3, #0]
 8003396:	00da      	lsls	r2, r3, #3
 8003398:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800339a:	4413      	add	r3, r2
 800339c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80033a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80033a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033a4:	2200      	movs	r2, #0
 80033a6:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	62bb      	str	r3, [r7, #40]	@ 0x28
 80033ae:	68bb      	ldr	r3, [r7, #8]
 80033b0:	785b      	ldrb	r3, [r3, #1]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d126      	bne.n	8003404 <HAL_PCD_EP_DB_Transmit+0x156>
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	623b      	str	r3, [r7, #32]
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80033c4:	b29b      	uxth	r3, r3
 80033c6:	461a      	mov	r2, r3
 80033c8:	6a3b      	ldr	r3, [r7, #32]
 80033ca:	4413      	add	r3, r2
 80033cc:	623b      	str	r3, [r7, #32]
 80033ce:	68bb      	ldr	r3, [r7, #8]
 80033d0:	781b      	ldrb	r3, [r3, #0]
 80033d2:	00da      	lsls	r2, r3, #3
 80033d4:	6a3b      	ldr	r3, [r7, #32]
 80033d6:	4413      	add	r3, r2
 80033d8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80033dc:	61fb      	str	r3, [r7, #28]
 80033de:	69fb      	ldr	r3, [r7, #28]
 80033e0:	881b      	ldrh	r3, [r3, #0]
 80033e2:	b29b      	uxth	r3, r3
 80033e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80033e8:	b29a      	uxth	r2, r3
 80033ea:	69fb      	ldr	r3, [r7, #28]
 80033ec:	801a      	strh	r2, [r3, #0]
 80033ee:	69fb      	ldr	r3, [r7, #28]
 80033f0:	881b      	ldrh	r3, [r3, #0]
 80033f2:	b29b      	uxth	r3, r3
 80033f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80033f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80033fc:	b29a      	uxth	r2, r3
 80033fe:	69fb      	ldr	r3, [r7, #28]
 8003400:	801a      	strh	r2, [r3, #0]
 8003402:	e017      	b.n	8003434 <HAL_PCD_EP_DB_Transmit+0x186>
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	785b      	ldrb	r3, [r3, #1]
 8003408:	2b01      	cmp	r3, #1
 800340a:	d113      	bne.n	8003434 <HAL_PCD_EP_DB_Transmit+0x186>
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003414:	b29b      	uxth	r3, r3
 8003416:	461a      	mov	r2, r3
 8003418:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800341a:	4413      	add	r3, r2
 800341c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	781b      	ldrb	r3, [r3, #0]
 8003422:	00da      	lsls	r2, r3, #3
 8003424:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003426:	4413      	add	r3, r2
 8003428:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800342c:	627b      	str	r3, [r7, #36]	@ 0x24
 800342e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003430:	2200      	movs	r2, #0
 8003432:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	78db      	ldrb	r3, [r3, #3]
 8003438:	2b02      	cmp	r3, #2
 800343a:	d123      	bne.n	8003484 <HAL_PCD_EP_DB_Transmit+0x1d6>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	461a      	mov	r2, r3
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	781b      	ldrb	r3, [r3, #0]
 8003446:	009b      	lsls	r3, r3, #2
 8003448:	4413      	add	r3, r2
 800344a:	881b      	ldrh	r3, [r3, #0]
 800344c:	b29b      	uxth	r3, r3
 800344e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003452:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003456:	837b      	strh	r3, [r7, #26]
 8003458:	8b7b      	ldrh	r3, [r7, #26]
 800345a:	f083 0320 	eor.w	r3, r3, #32
 800345e:	837b      	strh	r3, [r7, #26]
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	461a      	mov	r2, r3
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	781b      	ldrb	r3, [r3, #0]
 800346a:	009b      	lsls	r3, r3, #2
 800346c:	441a      	add	r2, r3
 800346e:	8b7b      	ldrh	r3, [r7, #26]
 8003470:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003474:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003478:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800347c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003480:	b29b      	uxth	r3, r3
 8003482:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	781b      	ldrb	r3, [r3, #0]
 8003488:	4619      	mov	r1, r3
 800348a:	68f8      	ldr	r0, [r7, #12]
 800348c:	f007 fd99 	bl	800afc2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003490:	88fb      	ldrh	r3, [r7, #6]
 8003492:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003496:	2b00      	cmp	r3, #0
 8003498:	d01f      	beq.n	80034da <HAL_PCD_EP_DB_Transmit+0x22c>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	461a      	mov	r2, r3
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	781b      	ldrb	r3, [r3, #0]
 80034a4:	009b      	lsls	r3, r3, #2
 80034a6:	4413      	add	r3, r2
 80034a8:	881b      	ldrh	r3, [r3, #0]
 80034aa:	b29b      	uxth	r3, r3
 80034ac:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80034b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80034b4:	833b      	strh	r3, [r7, #24]
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	461a      	mov	r2, r3
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	781b      	ldrb	r3, [r3, #0]
 80034c0:	009b      	lsls	r3, r3, #2
 80034c2:	441a      	add	r2, r3
 80034c4:	8b3b      	ldrh	r3, [r7, #24]
 80034c6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80034ca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80034ce:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80034d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80034d6:	b29b      	uxth	r3, r3
 80034d8:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 80034da:	2300      	movs	r3, #0
 80034dc:	e31f      	b.n	8003b1e <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80034de:	88fb      	ldrh	r3, [r7, #6]
 80034e0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d021      	beq.n	800352c <HAL_PCD_EP_DB_Transmit+0x27e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	461a      	mov	r2, r3
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	781b      	ldrb	r3, [r3, #0]
 80034f2:	009b      	lsls	r3, r3, #2
 80034f4:	4413      	add	r3, r2
 80034f6:	881b      	ldrh	r3, [r3, #0]
 80034f8:	b29b      	uxth	r3, r3
 80034fa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80034fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003502:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	461a      	mov	r2, r3
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	781b      	ldrb	r3, [r3, #0]
 8003510:	009b      	lsls	r3, r3, #2
 8003512:	441a      	add	r2, r3
 8003514:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003518:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800351c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003520:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003524:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003528:	b29b      	uxth	r3, r3
 800352a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003532:	2b01      	cmp	r3, #1
 8003534:	f040 82ca 	bne.w	8003acc <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	695a      	ldr	r2, [r3, #20]
 800353c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8003540:	441a      	add	r2, r3
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	69da      	ldr	r2, [r3, #28]
 800354a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800354e:	441a      	add	r2, r3
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	6a1a      	ldr	r2, [r3, #32]
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	691b      	ldr	r3, [r3, #16]
 800355c:	429a      	cmp	r2, r3
 800355e:	d309      	bcc.n	8003574 <HAL_PCD_EP_DB_Transmit+0x2c6>
        {
          len = ep->maxpacket;
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	691b      	ldr	r3, [r3, #16]
 8003564:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	6a1a      	ldr	r2, [r3, #32]
 800356a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800356c:	1ad2      	subs	r2, r2, r3
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	621a      	str	r2, [r3, #32]
 8003572:	e015      	b.n	80035a0 <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else if (ep->xfer_len_db == 0U)
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	6a1b      	ldr	r3, [r3, #32]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d107      	bne.n	800358c <HAL_PCD_EP_DB_Transmit+0x2de>
        {
          len = TxPctSize;
 800357c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8003580:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	2200      	movs	r2, #0
 8003586:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800358a:	e009      	b.n	80035a0 <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	2200      	movs	r2, #0
 8003590:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	6a1b      	ldr	r3, [r3, #32]
 8003598:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	2200      	movs	r2, #0
 800359e:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer0 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	785b      	ldrb	r3, [r3, #1]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d15f      	bne.n	8003668 <HAL_PCD_EP_DB_Transmit+0x3ba>
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	643b      	str	r3, [r7, #64]	@ 0x40
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80035b6:	b29b      	uxth	r3, r3
 80035b8:	461a      	mov	r2, r3
 80035ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80035bc:	4413      	add	r3, r2
 80035be:	643b      	str	r3, [r7, #64]	@ 0x40
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	781b      	ldrb	r3, [r3, #0]
 80035c4:	00da      	lsls	r2, r3, #3
 80035c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80035c8:	4413      	add	r3, r2
 80035ca:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80035ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80035d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80035d2:	881b      	ldrh	r3, [r3, #0]
 80035d4:	b29b      	uxth	r3, r3
 80035d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80035da:	b29a      	uxth	r2, r3
 80035dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80035de:	801a      	strh	r2, [r3, #0]
 80035e0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d10a      	bne.n	80035fc <HAL_PCD_EP_DB_Transmit+0x34e>
 80035e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80035e8:	881b      	ldrh	r3, [r3, #0]
 80035ea:	b29b      	uxth	r3, r3
 80035ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80035f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80035f4:	b29a      	uxth	r2, r3
 80035f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80035f8:	801a      	strh	r2, [r3, #0]
 80035fa:	e051      	b.n	80036a0 <HAL_PCD_EP_DB_Transmit+0x3f2>
 80035fc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80035fe:	2b3e      	cmp	r3, #62	@ 0x3e
 8003600:	d816      	bhi.n	8003630 <HAL_PCD_EP_DB_Transmit+0x382>
 8003602:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003604:	085b      	lsrs	r3, r3, #1
 8003606:	653b      	str	r3, [r7, #80]	@ 0x50
 8003608:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800360a:	f003 0301 	and.w	r3, r3, #1
 800360e:	2b00      	cmp	r3, #0
 8003610:	d002      	beq.n	8003618 <HAL_PCD_EP_DB_Transmit+0x36a>
 8003612:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003614:	3301      	adds	r3, #1
 8003616:	653b      	str	r3, [r7, #80]	@ 0x50
 8003618:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800361a:	881b      	ldrh	r3, [r3, #0]
 800361c:	b29a      	uxth	r2, r3
 800361e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003620:	b29b      	uxth	r3, r3
 8003622:	029b      	lsls	r3, r3, #10
 8003624:	b29b      	uxth	r3, r3
 8003626:	4313      	orrs	r3, r2
 8003628:	b29a      	uxth	r2, r3
 800362a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800362c:	801a      	strh	r2, [r3, #0]
 800362e:	e037      	b.n	80036a0 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8003630:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003632:	095b      	lsrs	r3, r3, #5
 8003634:	653b      	str	r3, [r7, #80]	@ 0x50
 8003636:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003638:	f003 031f 	and.w	r3, r3, #31
 800363c:	2b00      	cmp	r3, #0
 800363e:	d102      	bne.n	8003646 <HAL_PCD_EP_DB_Transmit+0x398>
 8003640:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003642:	3b01      	subs	r3, #1
 8003644:	653b      	str	r3, [r7, #80]	@ 0x50
 8003646:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003648:	881b      	ldrh	r3, [r3, #0]
 800364a:	b29a      	uxth	r2, r3
 800364c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800364e:	b29b      	uxth	r3, r3
 8003650:	029b      	lsls	r3, r3, #10
 8003652:	b29b      	uxth	r3, r3
 8003654:	4313      	orrs	r3, r2
 8003656:	b29b      	uxth	r3, r3
 8003658:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800365c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003660:	b29a      	uxth	r2, r3
 8003662:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003664:	801a      	strh	r2, [r3, #0]
 8003666:	e01b      	b.n	80036a0 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	785b      	ldrb	r3, [r3, #1]
 800366c:	2b01      	cmp	r3, #1
 800366e:	d117      	bne.n	80036a0 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800367e:	b29b      	uxth	r3, r3
 8003680:	461a      	mov	r2, r3
 8003682:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003684:	4413      	add	r3, r2
 8003686:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	781b      	ldrb	r3, [r3, #0]
 800368c:	00da      	lsls	r2, r3, #3
 800368e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003690:	4413      	add	r3, r2
 8003692:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003696:	647b      	str	r3, [r7, #68]	@ 0x44
 8003698:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800369a:	b29a      	uxth	r2, r3
 800369c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800369e:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	6818      	ldr	r0, [r3, #0]
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	6959      	ldr	r1, [r3, #20]
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	891a      	ldrh	r2, [r3, #8]
 80036ac:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80036ae:	b29b      	uxth	r3, r3
 80036b0:	f005 fd2f 	bl	8009112 <USB_WritePMA>
 80036b4:	e20a      	b.n	8003acc <HAL_PCD_EP_DB_Transmit+0x81e>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80036be:	b29b      	uxth	r3, r3
 80036c0:	461a      	mov	r2, r3
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	781b      	ldrb	r3, [r3, #0]
 80036c6:	00db      	lsls	r3, r3, #3
 80036c8:	4413      	add	r3, r2
 80036ca:	68fa      	ldr	r2, [r7, #12]
 80036cc:	6812      	ldr	r2, [r2, #0]
 80036ce:	4413      	add	r3, r2
 80036d0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80036d4:	881b      	ldrh	r3, [r3, #0]
 80036d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80036da:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len >= TxPctSize)
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	699a      	ldr	r2, [r3, #24]
 80036e2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80036e6:	429a      	cmp	r2, r3
 80036e8:	d307      	bcc.n	80036fa <HAL_PCD_EP_DB_Transmit+0x44c>
    {
      ep->xfer_len -= TxPctSize;
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	699a      	ldr	r2, [r3, #24]
 80036ee:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80036f2:	1ad2      	subs	r2, r2, r3
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	619a      	str	r2, [r3, #24]
 80036f8:	e002      	b.n	8003700 <HAL_PCD_EP_DB_Transmit+0x452>
    }
    else
    {
      ep->xfer_len = 0U;
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	2200      	movs	r2, #0
 80036fe:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	699b      	ldr	r3, [r3, #24]
 8003704:	2b00      	cmp	r3, #0
 8003706:	f040 80f6 	bne.w	80038f6 <HAL_PCD_EP_DB_Transmit+0x648>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800370a:	68bb      	ldr	r3, [r7, #8]
 800370c:	785b      	ldrb	r3, [r3, #1]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d126      	bne.n	8003760 <HAL_PCD_EP_DB_Transmit+0x4b2>
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	677b      	str	r3, [r7, #116]	@ 0x74
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003720:	b29b      	uxth	r3, r3
 8003722:	461a      	mov	r2, r3
 8003724:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003726:	4413      	add	r3, r2
 8003728:	677b      	str	r3, [r7, #116]	@ 0x74
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	781b      	ldrb	r3, [r3, #0]
 800372e:	00da      	lsls	r2, r3, #3
 8003730:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003732:	4413      	add	r3, r2
 8003734:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003738:	673b      	str	r3, [r7, #112]	@ 0x70
 800373a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800373c:	881b      	ldrh	r3, [r3, #0]
 800373e:	b29b      	uxth	r3, r3
 8003740:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003744:	b29a      	uxth	r2, r3
 8003746:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003748:	801a      	strh	r2, [r3, #0]
 800374a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800374c:	881b      	ldrh	r3, [r3, #0]
 800374e:	b29b      	uxth	r3, r3
 8003750:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003754:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003758:	b29a      	uxth	r2, r3
 800375a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800375c:	801a      	strh	r2, [r3, #0]
 800375e:	e01a      	b.n	8003796 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	785b      	ldrb	r3, [r3, #1]
 8003764:	2b01      	cmp	r3, #1
 8003766:	d116      	bne.n	8003796 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003776:	b29b      	uxth	r3, r3
 8003778:	461a      	mov	r2, r3
 800377a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800377c:	4413      	add	r3, r2
 800377e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	781b      	ldrb	r3, [r3, #0]
 8003784:	00da      	lsls	r2, r3, #3
 8003786:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003788:	4413      	add	r3, r2
 800378a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800378e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003790:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003792:	2200      	movs	r2, #0
 8003794:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	785b      	ldrb	r3, [r3, #1]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d12f      	bne.n	8003806 <HAL_PCD_EP_DB_Transmit+0x558>
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80037b6:	b29b      	uxth	r3, r3
 80037b8:	461a      	mov	r2, r3
 80037ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80037be:	4413      	add	r3, r2
 80037c0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	781b      	ldrb	r3, [r3, #0]
 80037c8:	00da      	lsls	r2, r3, #3
 80037ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80037ce:	4413      	add	r3, r2
 80037d0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80037d4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80037d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80037dc:	881b      	ldrh	r3, [r3, #0]
 80037de:	b29b      	uxth	r3, r3
 80037e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80037e4:	b29a      	uxth	r2, r3
 80037e6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80037ea:	801a      	strh	r2, [r3, #0]
 80037ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80037f0:	881b      	ldrh	r3, [r3, #0]
 80037f2:	b29b      	uxth	r3, r3
 80037f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80037f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80037fc:	b29a      	uxth	r2, r3
 80037fe:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003802:	801a      	strh	r2, [r3, #0]
 8003804:	e01c      	b.n	8003840 <HAL_PCD_EP_DB_Transmit+0x592>
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	785b      	ldrb	r3, [r3, #1]
 800380a:	2b01      	cmp	r3, #1
 800380c:	d118      	bne.n	8003840 <HAL_PCD_EP_DB_Transmit+0x592>
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003816:	b29b      	uxth	r3, r3
 8003818:	461a      	mov	r2, r3
 800381a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800381e:	4413      	add	r3, r2
 8003820:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	781b      	ldrb	r3, [r3, #0]
 8003828:	00da      	lsls	r2, r3, #3
 800382a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800382e:	4413      	add	r3, r2
 8003830:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003834:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003838:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800383c:	2200      	movs	r2, #0
 800383e:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	78db      	ldrb	r3, [r3, #3]
 8003844:	2b02      	cmp	r3, #2
 8003846:	d127      	bne.n	8003898 <HAL_PCD_EP_DB_Transmit+0x5ea>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	461a      	mov	r2, r3
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	781b      	ldrb	r3, [r3, #0]
 8003852:	009b      	lsls	r3, r3, #2
 8003854:	4413      	add	r3, r2
 8003856:	881b      	ldrh	r3, [r3, #0]
 8003858:	b29b      	uxth	r3, r3
 800385a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800385e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003862:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8003866:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800386a:	f083 0320 	eor.w	r3, r3, #32
 800386e:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	461a      	mov	r2, r3
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	781b      	ldrb	r3, [r3, #0]
 800387c:	009b      	lsls	r3, r3, #2
 800387e:	441a      	add	r2, r3
 8003880:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8003884:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003888:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800388c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003890:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003894:	b29b      	uxth	r3, r3
 8003896:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003898:	68bb      	ldr	r3, [r7, #8]
 800389a:	781b      	ldrb	r3, [r3, #0]
 800389c:	4619      	mov	r1, r3
 800389e:	68f8      	ldr	r0, [r7, #12]
 80038a0:	f007 fb8f 	bl	800afc2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80038a4:	88fb      	ldrh	r3, [r7, #6]
 80038a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d121      	bne.n	80038f2 <HAL_PCD_EP_DB_Transmit+0x644>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	461a      	mov	r2, r3
 80038b4:	68bb      	ldr	r3, [r7, #8]
 80038b6:	781b      	ldrb	r3, [r3, #0]
 80038b8:	009b      	lsls	r3, r3, #2
 80038ba:	4413      	add	r3, r2
 80038bc:	881b      	ldrh	r3, [r3, #0]
 80038be:	b29b      	uxth	r3, r3
 80038c0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80038c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80038c8:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	461a      	mov	r2, r3
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	781b      	ldrb	r3, [r3, #0]
 80038d6:	009b      	lsls	r3, r3, #2
 80038d8:	441a      	add	r2, r3
 80038da:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 80038de:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80038e2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80038e6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80038ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80038ee:	b29b      	uxth	r3, r3
 80038f0:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 80038f2:	2300      	movs	r3, #0
 80038f4:	e113      	b.n	8003b1e <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80038f6:	88fb      	ldrh	r3, [r7, #6]
 80038f8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d121      	bne.n	8003944 <HAL_PCD_EP_DB_Transmit+0x696>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	461a      	mov	r2, r3
 8003906:	68bb      	ldr	r3, [r7, #8]
 8003908:	781b      	ldrb	r3, [r3, #0]
 800390a:	009b      	lsls	r3, r3, #2
 800390c:	4413      	add	r3, r2
 800390e:	881b      	ldrh	r3, [r3, #0]
 8003910:	b29b      	uxth	r3, r3
 8003912:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003916:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800391a:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	461a      	mov	r2, r3
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	781b      	ldrb	r3, [r3, #0]
 8003928:	009b      	lsls	r3, r3, #2
 800392a:	441a      	add	r2, r3
 800392c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8003930:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003934:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003938:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800393c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003940:	b29b      	uxth	r3, r3
 8003942:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800394a:	2b01      	cmp	r3, #1
 800394c:	f040 80be 	bne.w	8003acc <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	695a      	ldr	r2, [r3, #20]
 8003954:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8003958:	441a      	add	r2, r3
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800395e:	68bb      	ldr	r3, [r7, #8]
 8003960:	69da      	ldr	r2, [r3, #28]
 8003962:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8003966:	441a      	add	r2, r3
 8003968:	68bb      	ldr	r3, [r7, #8]
 800396a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	6a1a      	ldr	r2, [r3, #32]
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	691b      	ldr	r3, [r3, #16]
 8003974:	429a      	cmp	r2, r3
 8003976:	d309      	bcc.n	800398c <HAL_PCD_EP_DB_Transmit+0x6de>
        {
          len = ep->maxpacket;
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	691b      	ldr	r3, [r3, #16]
 800397c:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	6a1a      	ldr	r2, [r3, #32]
 8003982:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003984:	1ad2      	subs	r2, r2, r3
 8003986:	68bb      	ldr	r3, [r7, #8]
 8003988:	621a      	str	r2, [r3, #32]
 800398a:	e015      	b.n	80039b8 <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else if (ep->xfer_len_db == 0U)
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	6a1b      	ldr	r3, [r3, #32]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d107      	bne.n	80039a4 <HAL_PCD_EP_DB_Transmit+0x6f6>
        {
          len = TxPctSize;
 8003994:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8003998:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	2200      	movs	r2, #0
 800399e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80039a2:	e009      	b.n	80039b8 <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else
        {
          len = ep->xfer_len_db;
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	6a1b      	ldr	r3, [r3, #32]
 80039a8:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 80039aa:	68bb      	ldr	r3, [r7, #8]
 80039ac:	2200      	movs	r2, #0
 80039ae:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	2200      	movs	r2, #0
 80039b4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80039be:	68bb      	ldr	r3, [r7, #8]
 80039c0:	785b      	ldrb	r3, [r3, #1]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d15f      	bne.n	8003a86 <HAL_PCD_EP_DB_Transmit+0x7d8>
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	66bb      	str	r3, [r7, #104]	@ 0x68
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80039d4:	b29b      	uxth	r3, r3
 80039d6:	461a      	mov	r2, r3
 80039d8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80039da:	4413      	add	r3, r2
 80039dc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	781b      	ldrb	r3, [r3, #0]
 80039e2:	00da      	lsls	r2, r3, #3
 80039e4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80039e6:	4413      	add	r3, r2
 80039e8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80039ec:	667b      	str	r3, [r7, #100]	@ 0x64
 80039ee:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80039f0:	881b      	ldrh	r3, [r3, #0]
 80039f2:	b29b      	uxth	r3, r3
 80039f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80039f8:	b29a      	uxth	r2, r3
 80039fa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80039fc:	801a      	strh	r2, [r3, #0]
 80039fe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d10a      	bne.n	8003a1a <HAL_PCD_EP_DB_Transmit+0x76c>
 8003a04:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003a06:	881b      	ldrh	r3, [r3, #0]
 8003a08:	b29b      	uxth	r3, r3
 8003a0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a12:	b29a      	uxth	r2, r3
 8003a14:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003a16:	801a      	strh	r2, [r3, #0]
 8003a18:	e04e      	b.n	8003ab8 <HAL_PCD_EP_DB_Transmit+0x80a>
 8003a1a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003a1c:	2b3e      	cmp	r3, #62	@ 0x3e
 8003a1e:	d816      	bhi.n	8003a4e <HAL_PCD_EP_DB_Transmit+0x7a0>
 8003a20:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003a22:	085b      	lsrs	r3, r3, #1
 8003a24:	663b      	str	r3, [r7, #96]	@ 0x60
 8003a26:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003a28:	f003 0301 	and.w	r3, r3, #1
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d002      	beq.n	8003a36 <HAL_PCD_EP_DB_Transmit+0x788>
 8003a30:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003a32:	3301      	adds	r3, #1
 8003a34:	663b      	str	r3, [r7, #96]	@ 0x60
 8003a36:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003a38:	881b      	ldrh	r3, [r3, #0]
 8003a3a:	b29a      	uxth	r2, r3
 8003a3c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003a3e:	b29b      	uxth	r3, r3
 8003a40:	029b      	lsls	r3, r3, #10
 8003a42:	b29b      	uxth	r3, r3
 8003a44:	4313      	orrs	r3, r2
 8003a46:	b29a      	uxth	r2, r3
 8003a48:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003a4a:	801a      	strh	r2, [r3, #0]
 8003a4c:	e034      	b.n	8003ab8 <HAL_PCD_EP_DB_Transmit+0x80a>
 8003a4e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003a50:	095b      	lsrs	r3, r3, #5
 8003a52:	663b      	str	r3, [r7, #96]	@ 0x60
 8003a54:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003a56:	f003 031f 	and.w	r3, r3, #31
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d102      	bne.n	8003a64 <HAL_PCD_EP_DB_Transmit+0x7b6>
 8003a5e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003a60:	3b01      	subs	r3, #1
 8003a62:	663b      	str	r3, [r7, #96]	@ 0x60
 8003a64:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003a66:	881b      	ldrh	r3, [r3, #0]
 8003a68:	b29a      	uxth	r2, r3
 8003a6a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003a6c:	b29b      	uxth	r3, r3
 8003a6e:	029b      	lsls	r3, r3, #10
 8003a70:	b29b      	uxth	r3, r3
 8003a72:	4313      	orrs	r3, r2
 8003a74:	b29b      	uxth	r3, r3
 8003a76:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a7a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a7e:	b29a      	uxth	r2, r3
 8003a80:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003a82:	801a      	strh	r2, [r3, #0]
 8003a84:	e018      	b.n	8003ab8 <HAL_PCD_EP_DB_Transmit+0x80a>
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	785b      	ldrb	r3, [r3, #1]
 8003a8a:	2b01      	cmp	r3, #1
 8003a8c:	d114      	bne.n	8003ab8 <HAL_PCD_EP_DB_Transmit+0x80a>
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003a96:	b29b      	uxth	r3, r3
 8003a98:	461a      	mov	r2, r3
 8003a9a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003a9c:	4413      	add	r3, r2
 8003a9e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	781b      	ldrb	r3, [r3, #0]
 8003aa4:	00da      	lsls	r2, r3, #3
 8003aa6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003aa8:	4413      	add	r3, r2
 8003aaa:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003aae:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003ab0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003ab2:	b29a      	uxth	r2, r3
 8003ab4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003ab6:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	6818      	ldr	r0, [r3, #0]
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	6959      	ldr	r1, [r3, #20]
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	895a      	ldrh	r2, [r3, #10]
 8003ac4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003ac6:	b29b      	uxth	r3, r3
 8003ac8:	f005 fb23 	bl	8009112 <USB_WritePMA>
      }
    }
  }

  /* Enable endpoint IN */
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	461a      	mov	r2, r3
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	781b      	ldrb	r3, [r3, #0]
 8003ad6:	009b      	lsls	r3, r3, #2
 8003ad8:	4413      	add	r3, r2
 8003ada:	881b      	ldrh	r3, [r3, #0]
 8003adc:	b29b      	uxth	r3, r3
 8003ade:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003ae2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003ae6:	82fb      	strh	r3, [r7, #22]
 8003ae8:	8afb      	ldrh	r3, [r7, #22]
 8003aea:	f083 0310 	eor.w	r3, r3, #16
 8003aee:	82fb      	strh	r3, [r7, #22]
 8003af0:	8afb      	ldrh	r3, [r7, #22]
 8003af2:	f083 0320 	eor.w	r3, r3, #32
 8003af6:	82fb      	strh	r3, [r7, #22]
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	461a      	mov	r2, r3
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	781b      	ldrb	r3, [r3, #0]
 8003b02:	009b      	lsls	r3, r3, #2
 8003b04:	441a      	add	r2, r3
 8003b06:	8afb      	ldrh	r3, [r7, #22]
 8003b08:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003b0c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003b10:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003b14:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003b18:	b29b      	uxth	r3, r3
 8003b1a:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003b1c:	2300      	movs	r3, #0
}
 8003b1e:	4618      	mov	r0, r3
 8003b20:	3798      	adds	r7, #152	@ 0x98
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd80      	pop	{r7, pc}

08003b26 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003b26:	b480      	push	{r7}
 8003b28:	b087      	sub	sp, #28
 8003b2a:	af00      	add	r7, sp, #0
 8003b2c:	60f8      	str	r0, [r7, #12]
 8003b2e:	607b      	str	r3, [r7, #4]
 8003b30:	460b      	mov	r3, r1
 8003b32:	817b      	strh	r3, [r7, #10]
 8003b34:	4613      	mov	r3, r2
 8003b36:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003b38:	897b      	ldrh	r3, [r7, #10]
 8003b3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b3e:	b29b      	uxth	r3, r3
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d00b      	beq.n	8003b5c <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b44:	897b      	ldrh	r3, [r7, #10]
 8003b46:	f003 0207 	and.w	r2, r3, #7
 8003b4a:	4613      	mov	r3, r2
 8003b4c:	009b      	lsls	r3, r3, #2
 8003b4e:	4413      	add	r3, r2
 8003b50:	00db      	lsls	r3, r3, #3
 8003b52:	3310      	adds	r3, #16
 8003b54:	68fa      	ldr	r2, [r7, #12]
 8003b56:	4413      	add	r3, r2
 8003b58:	617b      	str	r3, [r7, #20]
 8003b5a:	e009      	b.n	8003b70 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003b5c:	897a      	ldrh	r2, [r7, #10]
 8003b5e:	4613      	mov	r3, r2
 8003b60:	009b      	lsls	r3, r3, #2
 8003b62:	4413      	add	r3, r2
 8003b64:	00db      	lsls	r3, r3, #3
 8003b66:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003b6a:	68fa      	ldr	r2, [r7, #12]
 8003b6c:	4413      	add	r3, r2
 8003b6e:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003b70:	893b      	ldrh	r3, [r7, #8]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d107      	bne.n	8003b86 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	b29a      	uxth	r2, r3
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	80da      	strh	r2, [r3, #6]
 8003b84:	e00b      	b.n	8003b9e <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	2201      	movs	r2, #1
 8003b8a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	b29a      	uxth	r2, r3
 8003b90:	697b      	ldr	r3, [r7, #20]
 8003b92:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	0c1b      	lsrs	r3, r3, #16
 8003b98:	b29a      	uxth	r2, r3
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8003b9e:	2300      	movs	r3, #0
}
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	371c      	adds	r7, #28
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003baa:	4770      	bx	lr

08003bac <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003bac:	b480      	push	{r7}
 8003bae:	b085      	sub	sp, #20
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2201      	movs	r2, #1
 8003bbe:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8003bd0:	b29b      	uxth	r3, r3
 8003bd2:	f043 0301 	orr.w	r3, r3, #1
 8003bd6:	b29a      	uxth	r2, r3
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8003be4:	b29b      	uxth	r3, r3
 8003be6:	f043 0302 	orr.w	r3, r3, #2
 8003bea:	b29a      	uxth	r2, r3
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8003bf2:	2300      	movs	r3, #0
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	3714      	adds	r7, #20
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfe:	4770      	bx	lr

08003c00 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b085      	sub	sp, #20
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d141      	bne.n	8003c92 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003c0e:	4b4b      	ldr	r3, [pc, #300]	@ (8003d3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003c16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c1a:	d131      	bne.n	8003c80 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003c1c:	4b47      	ldr	r3, [pc, #284]	@ (8003d3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003c22:	4a46      	ldr	r2, [pc, #280]	@ (8003d3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c24:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003c28:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003c2c:	4b43      	ldr	r3, [pc, #268]	@ (8003d3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003c34:	4a41      	ldr	r2, [pc, #260]	@ (8003d3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c36:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003c3a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003c3c:	4b40      	ldr	r3, [pc, #256]	@ (8003d40 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	2232      	movs	r2, #50	@ 0x32
 8003c42:	fb02 f303 	mul.w	r3, r2, r3
 8003c46:	4a3f      	ldr	r2, [pc, #252]	@ (8003d44 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003c48:	fba2 2303 	umull	r2, r3, r2, r3
 8003c4c:	0c9b      	lsrs	r3, r3, #18
 8003c4e:	3301      	adds	r3, #1
 8003c50:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003c52:	e002      	b.n	8003c5a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	3b01      	subs	r3, #1
 8003c58:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003c5a:	4b38      	ldr	r3, [pc, #224]	@ (8003d3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c5c:	695b      	ldr	r3, [r3, #20]
 8003c5e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c62:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c66:	d102      	bne.n	8003c6e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d1f2      	bne.n	8003c54 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003c6e:	4b33      	ldr	r3, [pc, #204]	@ (8003d3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c70:	695b      	ldr	r3, [r3, #20]
 8003c72:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c76:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c7a:	d158      	bne.n	8003d2e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003c7c:	2303      	movs	r3, #3
 8003c7e:	e057      	b.n	8003d30 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003c80:	4b2e      	ldr	r3, [pc, #184]	@ (8003d3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c82:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003c86:	4a2d      	ldr	r2, [pc, #180]	@ (8003d3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c88:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003c8c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003c90:	e04d      	b.n	8003d2e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003c98:	d141      	bne.n	8003d1e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003c9a:	4b28      	ldr	r3, [pc, #160]	@ (8003d3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003ca2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ca6:	d131      	bne.n	8003d0c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003ca8:	4b24      	ldr	r3, [pc, #144]	@ (8003d3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003caa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003cae:	4a23      	ldr	r2, [pc, #140]	@ (8003d3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cb0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003cb4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003cb8:	4b20      	ldr	r3, [pc, #128]	@ (8003d3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003cc0:	4a1e      	ldr	r2, [pc, #120]	@ (8003d3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cc2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003cc6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003cc8:	4b1d      	ldr	r3, [pc, #116]	@ (8003d40 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	2232      	movs	r2, #50	@ 0x32
 8003cce:	fb02 f303 	mul.w	r3, r2, r3
 8003cd2:	4a1c      	ldr	r2, [pc, #112]	@ (8003d44 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003cd4:	fba2 2303 	umull	r2, r3, r2, r3
 8003cd8:	0c9b      	lsrs	r3, r3, #18
 8003cda:	3301      	adds	r3, #1
 8003cdc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003cde:	e002      	b.n	8003ce6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	3b01      	subs	r3, #1
 8003ce4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003ce6:	4b15      	ldr	r3, [pc, #84]	@ (8003d3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ce8:	695b      	ldr	r3, [r3, #20]
 8003cea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003cee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003cf2:	d102      	bne.n	8003cfa <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d1f2      	bne.n	8003ce0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003cfa:	4b10      	ldr	r3, [pc, #64]	@ (8003d3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cfc:	695b      	ldr	r3, [r3, #20]
 8003cfe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d02:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d06:	d112      	bne.n	8003d2e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003d08:	2303      	movs	r3, #3
 8003d0a:	e011      	b.n	8003d30 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003d0c:	4b0b      	ldr	r3, [pc, #44]	@ (8003d3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003d12:	4a0a      	ldr	r2, [pc, #40]	@ (8003d3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d14:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d18:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003d1c:	e007      	b.n	8003d2e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003d1e:	4b07      	ldr	r3, [pc, #28]	@ (8003d3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003d26:	4a05      	ldr	r2, [pc, #20]	@ (8003d3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d28:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003d2c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003d2e:	2300      	movs	r3, #0
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	3714      	adds	r7, #20
 8003d34:	46bd      	mov	sp, r7
 8003d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3a:	4770      	bx	lr
 8003d3c:	40007000 	.word	0x40007000
 8003d40:	20000000 	.word	0x20000000
 8003d44:	431bde83 	.word	0x431bde83

08003d48 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003d4c:	4b05      	ldr	r3, [pc, #20]	@ (8003d64 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	4a04      	ldr	r2, [pc, #16]	@ (8003d64 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003d52:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003d56:	6093      	str	r3, [r2, #8]
}
 8003d58:	bf00      	nop
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d60:	4770      	bx	lr
 8003d62:	bf00      	nop
 8003d64:	40007000 	.word	0x40007000

08003d68 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b088      	sub	sp, #32
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d101      	bne.n	8003d7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	e2fe      	b.n	8004378 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f003 0301 	and.w	r3, r3, #1
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d075      	beq.n	8003e72 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d86:	4b97      	ldr	r3, [pc, #604]	@ (8003fe4 <HAL_RCC_OscConfig+0x27c>)
 8003d88:	689b      	ldr	r3, [r3, #8]
 8003d8a:	f003 030c 	and.w	r3, r3, #12
 8003d8e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d90:	4b94      	ldr	r3, [pc, #592]	@ (8003fe4 <HAL_RCC_OscConfig+0x27c>)
 8003d92:	68db      	ldr	r3, [r3, #12]
 8003d94:	f003 0303 	and.w	r3, r3, #3
 8003d98:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003d9a:	69bb      	ldr	r3, [r7, #24]
 8003d9c:	2b0c      	cmp	r3, #12
 8003d9e:	d102      	bne.n	8003da6 <HAL_RCC_OscConfig+0x3e>
 8003da0:	697b      	ldr	r3, [r7, #20]
 8003da2:	2b03      	cmp	r3, #3
 8003da4:	d002      	beq.n	8003dac <HAL_RCC_OscConfig+0x44>
 8003da6:	69bb      	ldr	r3, [r7, #24]
 8003da8:	2b08      	cmp	r3, #8
 8003daa:	d10b      	bne.n	8003dc4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003dac:	4b8d      	ldr	r3, [pc, #564]	@ (8003fe4 <HAL_RCC_OscConfig+0x27c>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d05b      	beq.n	8003e70 <HAL_RCC_OscConfig+0x108>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d157      	bne.n	8003e70 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	e2d9      	b.n	8004378 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003dcc:	d106      	bne.n	8003ddc <HAL_RCC_OscConfig+0x74>
 8003dce:	4b85      	ldr	r3, [pc, #532]	@ (8003fe4 <HAL_RCC_OscConfig+0x27c>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a84      	ldr	r2, [pc, #528]	@ (8003fe4 <HAL_RCC_OscConfig+0x27c>)
 8003dd4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003dd8:	6013      	str	r3, [r2, #0]
 8003dda:	e01d      	b.n	8003e18 <HAL_RCC_OscConfig+0xb0>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003de4:	d10c      	bne.n	8003e00 <HAL_RCC_OscConfig+0x98>
 8003de6:	4b7f      	ldr	r3, [pc, #508]	@ (8003fe4 <HAL_RCC_OscConfig+0x27c>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a7e      	ldr	r2, [pc, #504]	@ (8003fe4 <HAL_RCC_OscConfig+0x27c>)
 8003dec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003df0:	6013      	str	r3, [r2, #0]
 8003df2:	4b7c      	ldr	r3, [pc, #496]	@ (8003fe4 <HAL_RCC_OscConfig+0x27c>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a7b      	ldr	r2, [pc, #492]	@ (8003fe4 <HAL_RCC_OscConfig+0x27c>)
 8003df8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003dfc:	6013      	str	r3, [r2, #0]
 8003dfe:	e00b      	b.n	8003e18 <HAL_RCC_OscConfig+0xb0>
 8003e00:	4b78      	ldr	r3, [pc, #480]	@ (8003fe4 <HAL_RCC_OscConfig+0x27c>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a77      	ldr	r2, [pc, #476]	@ (8003fe4 <HAL_RCC_OscConfig+0x27c>)
 8003e06:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e0a:	6013      	str	r3, [r2, #0]
 8003e0c:	4b75      	ldr	r3, [pc, #468]	@ (8003fe4 <HAL_RCC_OscConfig+0x27c>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a74      	ldr	r2, [pc, #464]	@ (8003fe4 <HAL_RCC_OscConfig+0x27c>)
 8003e12:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003e16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d013      	beq.n	8003e48 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e20:	f7fd fb68 	bl	80014f4 <HAL_GetTick>
 8003e24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e26:	e008      	b.n	8003e3a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e28:	f7fd fb64 	bl	80014f4 <HAL_GetTick>
 8003e2c:	4602      	mov	r2, r0
 8003e2e:	693b      	ldr	r3, [r7, #16]
 8003e30:	1ad3      	subs	r3, r2, r3
 8003e32:	2b64      	cmp	r3, #100	@ 0x64
 8003e34:	d901      	bls.n	8003e3a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003e36:	2303      	movs	r3, #3
 8003e38:	e29e      	b.n	8004378 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e3a:	4b6a      	ldr	r3, [pc, #424]	@ (8003fe4 <HAL_RCC_OscConfig+0x27c>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d0f0      	beq.n	8003e28 <HAL_RCC_OscConfig+0xc0>
 8003e46:	e014      	b.n	8003e72 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e48:	f7fd fb54 	bl	80014f4 <HAL_GetTick>
 8003e4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003e4e:	e008      	b.n	8003e62 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e50:	f7fd fb50 	bl	80014f4 <HAL_GetTick>
 8003e54:	4602      	mov	r2, r0
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	1ad3      	subs	r3, r2, r3
 8003e5a:	2b64      	cmp	r3, #100	@ 0x64
 8003e5c:	d901      	bls.n	8003e62 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003e5e:	2303      	movs	r3, #3
 8003e60:	e28a      	b.n	8004378 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003e62:	4b60      	ldr	r3, [pc, #384]	@ (8003fe4 <HAL_RCC_OscConfig+0x27c>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d1f0      	bne.n	8003e50 <HAL_RCC_OscConfig+0xe8>
 8003e6e:	e000      	b.n	8003e72 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f003 0302 	and.w	r3, r3, #2
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d075      	beq.n	8003f6a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e7e:	4b59      	ldr	r3, [pc, #356]	@ (8003fe4 <HAL_RCC_OscConfig+0x27c>)
 8003e80:	689b      	ldr	r3, [r3, #8]
 8003e82:	f003 030c 	and.w	r3, r3, #12
 8003e86:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e88:	4b56      	ldr	r3, [pc, #344]	@ (8003fe4 <HAL_RCC_OscConfig+0x27c>)
 8003e8a:	68db      	ldr	r3, [r3, #12]
 8003e8c:	f003 0303 	and.w	r3, r3, #3
 8003e90:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003e92:	69bb      	ldr	r3, [r7, #24]
 8003e94:	2b0c      	cmp	r3, #12
 8003e96:	d102      	bne.n	8003e9e <HAL_RCC_OscConfig+0x136>
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	2b02      	cmp	r3, #2
 8003e9c:	d002      	beq.n	8003ea4 <HAL_RCC_OscConfig+0x13c>
 8003e9e:	69bb      	ldr	r3, [r7, #24]
 8003ea0:	2b04      	cmp	r3, #4
 8003ea2:	d11f      	bne.n	8003ee4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ea4:	4b4f      	ldr	r3, [pc, #316]	@ (8003fe4 <HAL_RCC_OscConfig+0x27c>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d005      	beq.n	8003ebc <HAL_RCC_OscConfig+0x154>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	68db      	ldr	r3, [r3, #12]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d101      	bne.n	8003ebc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	e25d      	b.n	8004378 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ebc:	4b49      	ldr	r3, [pc, #292]	@ (8003fe4 <HAL_RCC_OscConfig+0x27c>)
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	691b      	ldr	r3, [r3, #16]
 8003ec8:	061b      	lsls	r3, r3, #24
 8003eca:	4946      	ldr	r1, [pc, #280]	@ (8003fe4 <HAL_RCC_OscConfig+0x27c>)
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003ed0:	4b45      	ldr	r3, [pc, #276]	@ (8003fe8 <HAL_RCC_OscConfig+0x280>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f7fd fac1 	bl	800145c <HAL_InitTick>
 8003eda:	4603      	mov	r3, r0
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d043      	beq.n	8003f68 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	e249      	b.n	8004378 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	68db      	ldr	r3, [r3, #12]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d023      	beq.n	8003f34 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003eec:	4b3d      	ldr	r3, [pc, #244]	@ (8003fe4 <HAL_RCC_OscConfig+0x27c>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a3c      	ldr	r2, [pc, #240]	@ (8003fe4 <HAL_RCC_OscConfig+0x27c>)
 8003ef2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ef6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ef8:	f7fd fafc 	bl	80014f4 <HAL_GetTick>
 8003efc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003efe:	e008      	b.n	8003f12 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f00:	f7fd faf8 	bl	80014f4 <HAL_GetTick>
 8003f04:	4602      	mov	r2, r0
 8003f06:	693b      	ldr	r3, [r7, #16]
 8003f08:	1ad3      	subs	r3, r2, r3
 8003f0a:	2b02      	cmp	r3, #2
 8003f0c:	d901      	bls.n	8003f12 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003f0e:	2303      	movs	r3, #3
 8003f10:	e232      	b.n	8004378 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f12:	4b34      	ldr	r3, [pc, #208]	@ (8003fe4 <HAL_RCC_OscConfig+0x27c>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d0f0      	beq.n	8003f00 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f1e:	4b31      	ldr	r3, [pc, #196]	@ (8003fe4 <HAL_RCC_OscConfig+0x27c>)
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	691b      	ldr	r3, [r3, #16]
 8003f2a:	061b      	lsls	r3, r3, #24
 8003f2c:	492d      	ldr	r1, [pc, #180]	@ (8003fe4 <HAL_RCC_OscConfig+0x27c>)
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	604b      	str	r3, [r1, #4]
 8003f32:	e01a      	b.n	8003f6a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f34:	4b2b      	ldr	r3, [pc, #172]	@ (8003fe4 <HAL_RCC_OscConfig+0x27c>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a2a      	ldr	r2, [pc, #168]	@ (8003fe4 <HAL_RCC_OscConfig+0x27c>)
 8003f3a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003f3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f40:	f7fd fad8 	bl	80014f4 <HAL_GetTick>
 8003f44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003f46:	e008      	b.n	8003f5a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f48:	f7fd fad4 	bl	80014f4 <HAL_GetTick>
 8003f4c:	4602      	mov	r2, r0
 8003f4e:	693b      	ldr	r3, [r7, #16]
 8003f50:	1ad3      	subs	r3, r2, r3
 8003f52:	2b02      	cmp	r3, #2
 8003f54:	d901      	bls.n	8003f5a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003f56:	2303      	movs	r3, #3
 8003f58:	e20e      	b.n	8004378 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003f5a:	4b22      	ldr	r3, [pc, #136]	@ (8003fe4 <HAL_RCC_OscConfig+0x27c>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d1f0      	bne.n	8003f48 <HAL_RCC_OscConfig+0x1e0>
 8003f66:	e000      	b.n	8003f6a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f68:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f003 0308 	and.w	r3, r3, #8
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d041      	beq.n	8003ffa <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	695b      	ldr	r3, [r3, #20]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d01c      	beq.n	8003fb8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f7e:	4b19      	ldr	r3, [pc, #100]	@ (8003fe4 <HAL_RCC_OscConfig+0x27c>)
 8003f80:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f84:	4a17      	ldr	r2, [pc, #92]	@ (8003fe4 <HAL_RCC_OscConfig+0x27c>)
 8003f86:	f043 0301 	orr.w	r3, r3, #1
 8003f8a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f8e:	f7fd fab1 	bl	80014f4 <HAL_GetTick>
 8003f92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003f94:	e008      	b.n	8003fa8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f96:	f7fd faad 	bl	80014f4 <HAL_GetTick>
 8003f9a:	4602      	mov	r2, r0
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	1ad3      	subs	r3, r2, r3
 8003fa0:	2b02      	cmp	r3, #2
 8003fa2:	d901      	bls.n	8003fa8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003fa4:	2303      	movs	r3, #3
 8003fa6:	e1e7      	b.n	8004378 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003fa8:	4b0e      	ldr	r3, [pc, #56]	@ (8003fe4 <HAL_RCC_OscConfig+0x27c>)
 8003faa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003fae:	f003 0302 	and.w	r3, r3, #2
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d0ef      	beq.n	8003f96 <HAL_RCC_OscConfig+0x22e>
 8003fb6:	e020      	b.n	8003ffa <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003fb8:	4b0a      	ldr	r3, [pc, #40]	@ (8003fe4 <HAL_RCC_OscConfig+0x27c>)
 8003fba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003fbe:	4a09      	ldr	r2, [pc, #36]	@ (8003fe4 <HAL_RCC_OscConfig+0x27c>)
 8003fc0:	f023 0301 	bic.w	r3, r3, #1
 8003fc4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fc8:	f7fd fa94 	bl	80014f4 <HAL_GetTick>
 8003fcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003fce:	e00d      	b.n	8003fec <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003fd0:	f7fd fa90 	bl	80014f4 <HAL_GetTick>
 8003fd4:	4602      	mov	r2, r0
 8003fd6:	693b      	ldr	r3, [r7, #16]
 8003fd8:	1ad3      	subs	r3, r2, r3
 8003fda:	2b02      	cmp	r3, #2
 8003fdc:	d906      	bls.n	8003fec <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003fde:	2303      	movs	r3, #3
 8003fe0:	e1ca      	b.n	8004378 <HAL_RCC_OscConfig+0x610>
 8003fe2:	bf00      	nop
 8003fe4:	40021000 	.word	0x40021000
 8003fe8:	20000014 	.word	0x20000014
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003fec:	4b8c      	ldr	r3, [pc, #560]	@ (8004220 <HAL_RCC_OscConfig+0x4b8>)
 8003fee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003ff2:	f003 0302 	and.w	r3, r3, #2
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d1ea      	bne.n	8003fd0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f003 0304 	and.w	r3, r3, #4
 8004002:	2b00      	cmp	r3, #0
 8004004:	f000 80a6 	beq.w	8004154 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004008:	2300      	movs	r3, #0
 800400a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800400c:	4b84      	ldr	r3, [pc, #528]	@ (8004220 <HAL_RCC_OscConfig+0x4b8>)
 800400e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004010:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004014:	2b00      	cmp	r3, #0
 8004016:	d101      	bne.n	800401c <HAL_RCC_OscConfig+0x2b4>
 8004018:	2301      	movs	r3, #1
 800401a:	e000      	b.n	800401e <HAL_RCC_OscConfig+0x2b6>
 800401c:	2300      	movs	r3, #0
 800401e:	2b00      	cmp	r3, #0
 8004020:	d00d      	beq.n	800403e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004022:	4b7f      	ldr	r3, [pc, #508]	@ (8004220 <HAL_RCC_OscConfig+0x4b8>)
 8004024:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004026:	4a7e      	ldr	r2, [pc, #504]	@ (8004220 <HAL_RCC_OscConfig+0x4b8>)
 8004028:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800402c:	6593      	str	r3, [r2, #88]	@ 0x58
 800402e:	4b7c      	ldr	r3, [pc, #496]	@ (8004220 <HAL_RCC_OscConfig+0x4b8>)
 8004030:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004032:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004036:	60fb      	str	r3, [r7, #12]
 8004038:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800403a:	2301      	movs	r3, #1
 800403c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800403e:	4b79      	ldr	r3, [pc, #484]	@ (8004224 <HAL_RCC_OscConfig+0x4bc>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004046:	2b00      	cmp	r3, #0
 8004048:	d118      	bne.n	800407c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800404a:	4b76      	ldr	r3, [pc, #472]	@ (8004224 <HAL_RCC_OscConfig+0x4bc>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a75      	ldr	r2, [pc, #468]	@ (8004224 <HAL_RCC_OscConfig+0x4bc>)
 8004050:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004054:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004056:	f7fd fa4d 	bl	80014f4 <HAL_GetTick>
 800405a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800405c:	e008      	b.n	8004070 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800405e:	f7fd fa49 	bl	80014f4 <HAL_GetTick>
 8004062:	4602      	mov	r2, r0
 8004064:	693b      	ldr	r3, [r7, #16]
 8004066:	1ad3      	subs	r3, r2, r3
 8004068:	2b02      	cmp	r3, #2
 800406a:	d901      	bls.n	8004070 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800406c:	2303      	movs	r3, #3
 800406e:	e183      	b.n	8004378 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004070:	4b6c      	ldr	r3, [pc, #432]	@ (8004224 <HAL_RCC_OscConfig+0x4bc>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004078:	2b00      	cmp	r3, #0
 800407a:	d0f0      	beq.n	800405e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	689b      	ldr	r3, [r3, #8]
 8004080:	2b01      	cmp	r3, #1
 8004082:	d108      	bne.n	8004096 <HAL_RCC_OscConfig+0x32e>
 8004084:	4b66      	ldr	r3, [pc, #408]	@ (8004220 <HAL_RCC_OscConfig+0x4b8>)
 8004086:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800408a:	4a65      	ldr	r2, [pc, #404]	@ (8004220 <HAL_RCC_OscConfig+0x4b8>)
 800408c:	f043 0301 	orr.w	r3, r3, #1
 8004090:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004094:	e024      	b.n	80040e0 <HAL_RCC_OscConfig+0x378>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	689b      	ldr	r3, [r3, #8]
 800409a:	2b05      	cmp	r3, #5
 800409c:	d110      	bne.n	80040c0 <HAL_RCC_OscConfig+0x358>
 800409e:	4b60      	ldr	r3, [pc, #384]	@ (8004220 <HAL_RCC_OscConfig+0x4b8>)
 80040a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040a4:	4a5e      	ldr	r2, [pc, #376]	@ (8004220 <HAL_RCC_OscConfig+0x4b8>)
 80040a6:	f043 0304 	orr.w	r3, r3, #4
 80040aa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80040ae:	4b5c      	ldr	r3, [pc, #368]	@ (8004220 <HAL_RCC_OscConfig+0x4b8>)
 80040b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040b4:	4a5a      	ldr	r2, [pc, #360]	@ (8004220 <HAL_RCC_OscConfig+0x4b8>)
 80040b6:	f043 0301 	orr.w	r3, r3, #1
 80040ba:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80040be:	e00f      	b.n	80040e0 <HAL_RCC_OscConfig+0x378>
 80040c0:	4b57      	ldr	r3, [pc, #348]	@ (8004220 <HAL_RCC_OscConfig+0x4b8>)
 80040c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040c6:	4a56      	ldr	r2, [pc, #344]	@ (8004220 <HAL_RCC_OscConfig+0x4b8>)
 80040c8:	f023 0301 	bic.w	r3, r3, #1
 80040cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80040d0:	4b53      	ldr	r3, [pc, #332]	@ (8004220 <HAL_RCC_OscConfig+0x4b8>)
 80040d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040d6:	4a52      	ldr	r2, [pc, #328]	@ (8004220 <HAL_RCC_OscConfig+0x4b8>)
 80040d8:	f023 0304 	bic.w	r3, r3, #4
 80040dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d016      	beq.n	8004116 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040e8:	f7fd fa04 	bl	80014f4 <HAL_GetTick>
 80040ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040ee:	e00a      	b.n	8004106 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040f0:	f7fd fa00 	bl	80014f4 <HAL_GetTick>
 80040f4:	4602      	mov	r2, r0
 80040f6:	693b      	ldr	r3, [r7, #16]
 80040f8:	1ad3      	subs	r3, r2, r3
 80040fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040fe:	4293      	cmp	r3, r2
 8004100:	d901      	bls.n	8004106 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004102:	2303      	movs	r3, #3
 8004104:	e138      	b.n	8004378 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004106:	4b46      	ldr	r3, [pc, #280]	@ (8004220 <HAL_RCC_OscConfig+0x4b8>)
 8004108:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800410c:	f003 0302 	and.w	r3, r3, #2
 8004110:	2b00      	cmp	r3, #0
 8004112:	d0ed      	beq.n	80040f0 <HAL_RCC_OscConfig+0x388>
 8004114:	e015      	b.n	8004142 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004116:	f7fd f9ed 	bl	80014f4 <HAL_GetTick>
 800411a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800411c:	e00a      	b.n	8004134 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800411e:	f7fd f9e9 	bl	80014f4 <HAL_GetTick>
 8004122:	4602      	mov	r2, r0
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	1ad3      	subs	r3, r2, r3
 8004128:	f241 3288 	movw	r2, #5000	@ 0x1388
 800412c:	4293      	cmp	r3, r2
 800412e:	d901      	bls.n	8004134 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004130:	2303      	movs	r3, #3
 8004132:	e121      	b.n	8004378 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004134:	4b3a      	ldr	r3, [pc, #232]	@ (8004220 <HAL_RCC_OscConfig+0x4b8>)
 8004136:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800413a:	f003 0302 	and.w	r3, r3, #2
 800413e:	2b00      	cmp	r3, #0
 8004140:	d1ed      	bne.n	800411e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004142:	7ffb      	ldrb	r3, [r7, #31]
 8004144:	2b01      	cmp	r3, #1
 8004146:	d105      	bne.n	8004154 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004148:	4b35      	ldr	r3, [pc, #212]	@ (8004220 <HAL_RCC_OscConfig+0x4b8>)
 800414a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800414c:	4a34      	ldr	r2, [pc, #208]	@ (8004220 <HAL_RCC_OscConfig+0x4b8>)
 800414e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004152:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f003 0320 	and.w	r3, r3, #32
 800415c:	2b00      	cmp	r3, #0
 800415e:	d03c      	beq.n	80041da <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	699b      	ldr	r3, [r3, #24]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d01c      	beq.n	80041a2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004168:	4b2d      	ldr	r3, [pc, #180]	@ (8004220 <HAL_RCC_OscConfig+0x4b8>)
 800416a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800416e:	4a2c      	ldr	r2, [pc, #176]	@ (8004220 <HAL_RCC_OscConfig+0x4b8>)
 8004170:	f043 0301 	orr.w	r3, r3, #1
 8004174:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004178:	f7fd f9bc 	bl	80014f4 <HAL_GetTick>
 800417c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800417e:	e008      	b.n	8004192 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004180:	f7fd f9b8 	bl	80014f4 <HAL_GetTick>
 8004184:	4602      	mov	r2, r0
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	1ad3      	subs	r3, r2, r3
 800418a:	2b02      	cmp	r3, #2
 800418c:	d901      	bls.n	8004192 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800418e:	2303      	movs	r3, #3
 8004190:	e0f2      	b.n	8004378 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004192:	4b23      	ldr	r3, [pc, #140]	@ (8004220 <HAL_RCC_OscConfig+0x4b8>)
 8004194:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004198:	f003 0302 	and.w	r3, r3, #2
 800419c:	2b00      	cmp	r3, #0
 800419e:	d0ef      	beq.n	8004180 <HAL_RCC_OscConfig+0x418>
 80041a0:	e01b      	b.n	80041da <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80041a2:	4b1f      	ldr	r3, [pc, #124]	@ (8004220 <HAL_RCC_OscConfig+0x4b8>)
 80041a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80041a8:	4a1d      	ldr	r2, [pc, #116]	@ (8004220 <HAL_RCC_OscConfig+0x4b8>)
 80041aa:	f023 0301 	bic.w	r3, r3, #1
 80041ae:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041b2:	f7fd f99f 	bl	80014f4 <HAL_GetTick>
 80041b6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80041b8:	e008      	b.n	80041cc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80041ba:	f7fd f99b 	bl	80014f4 <HAL_GetTick>
 80041be:	4602      	mov	r2, r0
 80041c0:	693b      	ldr	r3, [r7, #16]
 80041c2:	1ad3      	subs	r3, r2, r3
 80041c4:	2b02      	cmp	r3, #2
 80041c6:	d901      	bls.n	80041cc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80041c8:	2303      	movs	r3, #3
 80041ca:	e0d5      	b.n	8004378 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80041cc:	4b14      	ldr	r3, [pc, #80]	@ (8004220 <HAL_RCC_OscConfig+0x4b8>)
 80041ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80041d2:	f003 0302 	and.w	r3, r3, #2
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d1ef      	bne.n	80041ba <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	69db      	ldr	r3, [r3, #28]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	f000 80c9 	beq.w	8004376 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80041e4:	4b0e      	ldr	r3, [pc, #56]	@ (8004220 <HAL_RCC_OscConfig+0x4b8>)
 80041e6:	689b      	ldr	r3, [r3, #8]
 80041e8:	f003 030c 	and.w	r3, r3, #12
 80041ec:	2b0c      	cmp	r3, #12
 80041ee:	f000 8083 	beq.w	80042f8 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	69db      	ldr	r3, [r3, #28]
 80041f6:	2b02      	cmp	r3, #2
 80041f8:	d15e      	bne.n	80042b8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041fa:	4b09      	ldr	r3, [pc, #36]	@ (8004220 <HAL_RCC_OscConfig+0x4b8>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a08      	ldr	r2, [pc, #32]	@ (8004220 <HAL_RCC_OscConfig+0x4b8>)
 8004200:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004204:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004206:	f7fd f975 	bl	80014f4 <HAL_GetTick>
 800420a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800420c:	e00c      	b.n	8004228 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800420e:	f7fd f971 	bl	80014f4 <HAL_GetTick>
 8004212:	4602      	mov	r2, r0
 8004214:	693b      	ldr	r3, [r7, #16]
 8004216:	1ad3      	subs	r3, r2, r3
 8004218:	2b02      	cmp	r3, #2
 800421a:	d905      	bls.n	8004228 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800421c:	2303      	movs	r3, #3
 800421e:	e0ab      	b.n	8004378 <HAL_RCC_OscConfig+0x610>
 8004220:	40021000 	.word	0x40021000
 8004224:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004228:	4b55      	ldr	r3, [pc, #340]	@ (8004380 <HAL_RCC_OscConfig+0x618>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004230:	2b00      	cmp	r3, #0
 8004232:	d1ec      	bne.n	800420e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004234:	4b52      	ldr	r3, [pc, #328]	@ (8004380 <HAL_RCC_OscConfig+0x618>)
 8004236:	68da      	ldr	r2, [r3, #12]
 8004238:	4b52      	ldr	r3, [pc, #328]	@ (8004384 <HAL_RCC_OscConfig+0x61c>)
 800423a:	4013      	ands	r3, r2
 800423c:	687a      	ldr	r2, [r7, #4]
 800423e:	6a11      	ldr	r1, [r2, #32]
 8004240:	687a      	ldr	r2, [r7, #4]
 8004242:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004244:	3a01      	subs	r2, #1
 8004246:	0112      	lsls	r2, r2, #4
 8004248:	4311      	orrs	r1, r2
 800424a:	687a      	ldr	r2, [r7, #4]
 800424c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800424e:	0212      	lsls	r2, r2, #8
 8004250:	4311      	orrs	r1, r2
 8004252:	687a      	ldr	r2, [r7, #4]
 8004254:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004256:	0852      	lsrs	r2, r2, #1
 8004258:	3a01      	subs	r2, #1
 800425a:	0552      	lsls	r2, r2, #21
 800425c:	4311      	orrs	r1, r2
 800425e:	687a      	ldr	r2, [r7, #4]
 8004260:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004262:	0852      	lsrs	r2, r2, #1
 8004264:	3a01      	subs	r2, #1
 8004266:	0652      	lsls	r2, r2, #25
 8004268:	4311      	orrs	r1, r2
 800426a:	687a      	ldr	r2, [r7, #4]
 800426c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800426e:	06d2      	lsls	r2, r2, #27
 8004270:	430a      	orrs	r2, r1
 8004272:	4943      	ldr	r1, [pc, #268]	@ (8004380 <HAL_RCC_OscConfig+0x618>)
 8004274:	4313      	orrs	r3, r2
 8004276:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004278:	4b41      	ldr	r3, [pc, #260]	@ (8004380 <HAL_RCC_OscConfig+0x618>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a40      	ldr	r2, [pc, #256]	@ (8004380 <HAL_RCC_OscConfig+0x618>)
 800427e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004282:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004284:	4b3e      	ldr	r3, [pc, #248]	@ (8004380 <HAL_RCC_OscConfig+0x618>)
 8004286:	68db      	ldr	r3, [r3, #12]
 8004288:	4a3d      	ldr	r2, [pc, #244]	@ (8004380 <HAL_RCC_OscConfig+0x618>)
 800428a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800428e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004290:	f7fd f930 	bl	80014f4 <HAL_GetTick>
 8004294:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004296:	e008      	b.n	80042aa <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004298:	f7fd f92c 	bl	80014f4 <HAL_GetTick>
 800429c:	4602      	mov	r2, r0
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	1ad3      	subs	r3, r2, r3
 80042a2:	2b02      	cmp	r3, #2
 80042a4:	d901      	bls.n	80042aa <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80042a6:	2303      	movs	r3, #3
 80042a8:	e066      	b.n	8004378 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80042aa:	4b35      	ldr	r3, [pc, #212]	@ (8004380 <HAL_RCC_OscConfig+0x618>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d0f0      	beq.n	8004298 <HAL_RCC_OscConfig+0x530>
 80042b6:	e05e      	b.n	8004376 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042b8:	4b31      	ldr	r3, [pc, #196]	@ (8004380 <HAL_RCC_OscConfig+0x618>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a30      	ldr	r2, [pc, #192]	@ (8004380 <HAL_RCC_OscConfig+0x618>)
 80042be:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80042c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042c4:	f7fd f916 	bl	80014f4 <HAL_GetTick>
 80042c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80042ca:	e008      	b.n	80042de <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042cc:	f7fd f912 	bl	80014f4 <HAL_GetTick>
 80042d0:	4602      	mov	r2, r0
 80042d2:	693b      	ldr	r3, [r7, #16]
 80042d4:	1ad3      	subs	r3, r2, r3
 80042d6:	2b02      	cmp	r3, #2
 80042d8:	d901      	bls.n	80042de <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80042da:	2303      	movs	r3, #3
 80042dc:	e04c      	b.n	8004378 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80042de:	4b28      	ldr	r3, [pc, #160]	@ (8004380 <HAL_RCC_OscConfig+0x618>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d1f0      	bne.n	80042cc <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80042ea:	4b25      	ldr	r3, [pc, #148]	@ (8004380 <HAL_RCC_OscConfig+0x618>)
 80042ec:	68da      	ldr	r2, [r3, #12]
 80042ee:	4924      	ldr	r1, [pc, #144]	@ (8004380 <HAL_RCC_OscConfig+0x618>)
 80042f0:	4b25      	ldr	r3, [pc, #148]	@ (8004388 <HAL_RCC_OscConfig+0x620>)
 80042f2:	4013      	ands	r3, r2
 80042f4:	60cb      	str	r3, [r1, #12]
 80042f6:	e03e      	b.n	8004376 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	69db      	ldr	r3, [r3, #28]
 80042fc:	2b01      	cmp	r3, #1
 80042fe:	d101      	bne.n	8004304 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004300:	2301      	movs	r3, #1
 8004302:	e039      	b.n	8004378 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004304:	4b1e      	ldr	r3, [pc, #120]	@ (8004380 <HAL_RCC_OscConfig+0x618>)
 8004306:	68db      	ldr	r3, [r3, #12]
 8004308:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	f003 0203 	and.w	r2, r3, #3
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6a1b      	ldr	r3, [r3, #32]
 8004314:	429a      	cmp	r2, r3
 8004316:	d12c      	bne.n	8004372 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004318:	697b      	ldr	r3, [r7, #20]
 800431a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004322:	3b01      	subs	r3, #1
 8004324:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004326:	429a      	cmp	r2, r3
 8004328:	d123      	bne.n	8004372 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800432a:	697b      	ldr	r3, [r7, #20]
 800432c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004334:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004336:	429a      	cmp	r2, r3
 8004338:	d11b      	bne.n	8004372 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004344:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004346:	429a      	cmp	r2, r3
 8004348:	d113      	bne.n	8004372 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004354:	085b      	lsrs	r3, r3, #1
 8004356:	3b01      	subs	r3, #1
 8004358:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800435a:	429a      	cmp	r2, r3
 800435c:	d109      	bne.n	8004372 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800435e:	697b      	ldr	r3, [r7, #20]
 8004360:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004368:	085b      	lsrs	r3, r3, #1
 800436a:	3b01      	subs	r3, #1
 800436c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800436e:	429a      	cmp	r2, r3
 8004370:	d001      	beq.n	8004376 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8004372:	2301      	movs	r3, #1
 8004374:	e000      	b.n	8004378 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8004376:	2300      	movs	r3, #0
}
 8004378:	4618      	mov	r0, r3
 800437a:	3720      	adds	r7, #32
 800437c:	46bd      	mov	sp, r7
 800437e:	bd80      	pop	{r7, pc}
 8004380:	40021000 	.word	0x40021000
 8004384:	019f800c 	.word	0x019f800c
 8004388:	feeefffc 	.word	0xfeeefffc

0800438c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b086      	sub	sp, #24
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
 8004394:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004396:	2300      	movs	r3, #0
 8004398:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d101      	bne.n	80043a4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80043a0:	2301      	movs	r3, #1
 80043a2:	e11e      	b.n	80045e2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80043a4:	4b91      	ldr	r3, [pc, #580]	@ (80045ec <HAL_RCC_ClockConfig+0x260>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f003 030f 	and.w	r3, r3, #15
 80043ac:	683a      	ldr	r2, [r7, #0]
 80043ae:	429a      	cmp	r2, r3
 80043b0:	d910      	bls.n	80043d4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043b2:	4b8e      	ldr	r3, [pc, #568]	@ (80045ec <HAL_RCC_ClockConfig+0x260>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f023 020f 	bic.w	r2, r3, #15
 80043ba:	498c      	ldr	r1, [pc, #560]	@ (80045ec <HAL_RCC_ClockConfig+0x260>)
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	4313      	orrs	r3, r2
 80043c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80043c2:	4b8a      	ldr	r3, [pc, #552]	@ (80045ec <HAL_RCC_ClockConfig+0x260>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f003 030f 	and.w	r3, r3, #15
 80043ca:	683a      	ldr	r2, [r7, #0]
 80043cc:	429a      	cmp	r2, r3
 80043ce:	d001      	beq.n	80043d4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80043d0:	2301      	movs	r3, #1
 80043d2:	e106      	b.n	80045e2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f003 0301 	and.w	r3, r3, #1
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d073      	beq.n	80044c8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	2b03      	cmp	r3, #3
 80043e6:	d129      	bne.n	800443c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80043e8:	4b81      	ldr	r3, [pc, #516]	@ (80045f0 <HAL_RCC_ClockConfig+0x264>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d101      	bne.n	80043f8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80043f4:	2301      	movs	r3, #1
 80043f6:	e0f4      	b.n	80045e2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80043f8:	f000 f99e 	bl	8004738 <RCC_GetSysClockFreqFromPLLSource>
 80043fc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80043fe:	693b      	ldr	r3, [r7, #16]
 8004400:	4a7c      	ldr	r2, [pc, #496]	@ (80045f4 <HAL_RCC_ClockConfig+0x268>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d93f      	bls.n	8004486 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004406:	4b7a      	ldr	r3, [pc, #488]	@ (80045f0 <HAL_RCC_ClockConfig+0x264>)
 8004408:	689b      	ldr	r3, [r3, #8]
 800440a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800440e:	2b00      	cmp	r3, #0
 8004410:	d009      	beq.n	8004426 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800441a:	2b00      	cmp	r3, #0
 800441c:	d033      	beq.n	8004486 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004422:	2b00      	cmp	r3, #0
 8004424:	d12f      	bne.n	8004486 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004426:	4b72      	ldr	r3, [pc, #456]	@ (80045f0 <HAL_RCC_ClockConfig+0x264>)
 8004428:	689b      	ldr	r3, [r3, #8]
 800442a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800442e:	4a70      	ldr	r2, [pc, #448]	@ (80045f0 <HAL_RCC_ClockConfig+0x264>)
 8004430:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004434:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004436:	2380      	movs	r3, #128	@ 0x80
 8004438:	617b      	str	r3, [r7, #20]
 800443a:	e024      	b.n	8004486 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	2b02      	cmp	r3, #2
 8004442:	d107      	bne.n	8004454 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004444:	4b6a      	ldr	r3, [pc, #424]	@ (80045f0 <HAL_RCC_ClockConfig+0x264>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800444c:	2b00      	cmp	r3, #0
 800444e:	d109      	bne.n	8004464 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004450:	2301      	movs	r3, #1
 8004452:	e0c6      	b.n	80045e2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004454:	4b66      	ldr	r3, [pc, #408]	@ (80045f0 <HAL_RCC_ClockConfig+0x264>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800445c:	2b00      	cmp	r3, #0
 800445e:	d101      	bne.n	8004464 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004460:	2301      	movs	r3, #1
 8004462:	e0be      	b.n	80045e2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004464:	f000 f8ce 	bl	8004604 <HAL_RCC_GetSysClockFreq>
 8004468:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800446a:	693b      	ldr	r3, [r7, #16]
 800446c:	4a61      	ldr	r2, [pc, #388]	@ (80045f4 <HAL_RCC_ClockConfig+0x268>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d909      	bls.n	8004486 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004472:	4b5f      	ldr	r3, [pc, #380]	@ (80045f0 <HAL_RCC_ClockConfig+0x264>)
 8004474:	689b      	ldr	r3, [r3, #8]
 8004476:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800447a:	4a5d      	ldr	r2, [pc, #372]	@ (80045f0 <HAL_RCC_ClockConfig+0x264>)
 800447c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004480:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004482:	2380      	movs	r3, #128	@ 0x80
 8004484:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004486:	4b5a      	ldr	r3, [pc, #360]	@ (80045f0 <HAL_RCC_ClockConfig+0x264>)
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	f023 0203 	bic.w	r2, r3, #3
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	4957      	ldr	r1, [pc, #348]	@ (80045f0 <HAL_RCC_ClockConfig+0x264>)
 8004494:	4313      	orrs	r3, r2
 8004496:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004498:	f7fd f82c 	bl	80014f4 <HAL_GetTick>
 800449c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800449e:	e00a      	b.n	80044b6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044a0:	f7fd f828 	bl	80014f4 <HAL_GetTick>
 80044a4:	4602      	mov	r2, r0
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	1ad3      	subs	r3, r2, r3
 80044aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d901      	bls.n	80044b6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80044b2:	2303      	movs	r3, #3
 80044b4:	e095      	b.n	80045e2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044b6:	4b4e      	ldr	r3, [pc, #312]	@ (80045f0 <HAL_RCC_ClockConfig+0x264>)
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	f003 020c 	and.w	r2, r3, #12
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	009b      	lsls	r3, r3, #2
 80044c4:	429a      	cmp	r2, r3
 80044c6:	d1eb      	bne.n	80044a0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f003 0302 	and.w	r3, r3, #2
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d023      	beq.n	800451c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f003 0304 	and.w	r3, r3, #4
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d005      	beq.n	80044ec <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80044e0:	4b43      	ldr	r3, [pc, #268]	@ (80045f0 <HAL_RCC_ClockConfig+0x264>)
 80044e2:	689b      	ldr	r3, [r3, #8]
 80044e4:	4a42      	ldr	r2, [pc, #264]	@ (80045f0 <HAL_RCC_ClockConfig+0x264>)
 80044e6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80044ea:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f003 0308 	and.w	r3, r3, #8
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d007      	beq.n	8004508 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80044f8:	4b3d      	ldr	r3, [pc, #244]	@ (80045f0 <HAL_RCC_ClockConfig+0x264>)
 80044fa:	689b      	ldr	r3, [r3, #8]
 80044fc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004500:	4a3b      	ldr	r2, [pc, #236]	@ (80045f0 <HAL_RCC_ClockConfig+0x264>)
 8004502:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004506:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004508:	4b39      	ldr	r3, [pc, #228]	@ (80045f0 <HAL_RCC_ClockConfig+0x264>)
 800450a:	689b      	ldr	r3, [r3, #8]
 800450c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	689b      	ldr	r3, [r3, #8]
 8004514:	4936      	ldr	r1, [pc, #216]	@ (80045f0 <HAL_RCC_ClockConfig+0x264>)
 8004516:	4313      	orrs	r3, r2
 8004518:	608b      	str	r3, [r1, #8]
 800451a:	e008      	b.n	800452e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800451c:	697b      	ldr	r3, [r7, #20]
 800451e:	2b80      	cmp	r3, #128	@ 0x80
 8004520:	d105      	bne.n	800452e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004522:	4b33      	ldr	r3, [pc, #204]	@ (80045f0 <HAL_RCC_ClockConfig+0x264>)
 8004524:	689b      	ldr	r3, [r3, #8]
 8004526:	4a32      	ldr	r2, [pc, #200]	@ (80045f0 <HAL_RCC_ClockConfig+0x264>)
 8004528:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800452c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800452e:	4b2f      	ldr	r3, [pc, #188]	@ (80045ec <HAL_RCC_ClockConfig+0x260>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f003 030f 	and.w	r3, r3, #15
 8004536:	683a      	ldr	r2, [r7, #0]
 8004538:	429a      	cmp	r2, r3
 800453a:	d21d      	bcs.n	8004578 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800453c:	4b2b      	ldr	r3, [pc, #172]	@ (80045ec <HAL_RCC_ClockConfig+0x260>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f023 020f 	bic.w	r2, r3, #15
 8004544:	4929      	ldr	r1, [pc, #164]	@ (80045ec <HAL_RCC_ClockConfig+0x260>)
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	4313      	orrs	r3, r2
 800454a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800454c:	f7fc ffd2 	bl	80014f4 <HAL_GetTick>
 8004550:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004552:	e00a      	b.n	800456a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004554:	f7fc ffce 	bl	80014f4 <HAL_GetTick>
 8004558:	4602      	mov	r2, r0
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	1ad3      	subs	r3, r2, r3
 800455e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004562:	4293      	cmp	r3, r2
 8004564:	d901      	bls.n	800456a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004566:	2303      	movs	r3, #3
 8004568:	e03b      	b.n	80045e2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800456a:	4b20      	ldr	r3, [pc, #128]	@ (80045ec <HAL_RCC_ClockConfig+0x260>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f003 030f 	and.w	r3, r3, #15
 8004572:	683a      	ldr	r2, [r7, #0]
 8004574:	429a      	cmp	r2, r3
 8004576:	d1ed      	bne.n	8004554 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f003 0304 	and.w	r3, r3, #4
 8004580:	2b00      	cmp	r3, #0
 8004582:	d008      	beq.n	8004596 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004584:	4b1a      	ldr	r3, [pc, #104]	@ (80045f0 <HAL_RCC_ClockConfig+0x264>)
 8004586:	689b      	ldr	r3, [r3, #8]
 8004588:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	68db      	ldr	r3, [r3, #12]
 8004590:	4917      	ldr	r1, [pc, #92]	@ (80045f0 <HAL_RCC_ClockConfig+0x264>)
 8004592:	4313      	orrs	r3, r2
 8004594:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f003 0308 	and.w	r3, r3, #8
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d009      	beq.n	80045b6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80045a2:	4b13      	ldr	r3, [pc, #76]	@ (80045f0 <HAL_RCC_ClockConfig+0x264>)
 80045a4:	689b      	ldr	r3, [r3, #8]
 80045a6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	691b      	ldr	r3, [r3, #16]
 80045ae:	00db      	lsls	r3, r3, #3
 80045b0:	490f      	ldr	r1, [pc, #60]	@ (80045f0 <HAL_RCC_ClockConfig+0x264>)
 80045b2:	4313      	orrs	r3, r2
 80045b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80045b6:	f000 f825 	bl	8004604 <HAL_RCC_GetSysClockFreq>
 80045ba:	4602      	mov	r2, r0
 80045bc:	4b0c      	ldr	r3, [pc, #48]	@ (80045f0 <HAL_RCC_ClockConfig+0x264>)
 80045be:	689b      	ldr	r3, [r3, #8]
 80045c0:	091b      	lsrs	r3, r3, #4
 80045c2:	f003 030f 	and.w	r3, r3, #15
 80045c6:	490c      	ldr	r1, [pc, #48]	@ (80045f8 <HAL_RCC_ClockConfig+0x26c>)
 80045c8:	5ccb      	ldrb	r3, [r1, r3]
 80045ca:	f003 031f 	and.w	r3, r3, #31
 80045ce:	fa22 f303 	lsr.w	r3, r2, r3
 80045d2:	4a0a      	ldr	r2, [pc, #40]	@ (80045fc <HAL_RCC_ClockConfig+0x270>)
 80045d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80045d6:	4b0a      	ldr	r3, [pc, #40]	@ (8004600 <HAL_RCC_ClockConfig+0x274>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4618      	mov	r0, r3
 80045dc:	f7fc ff3e 	bl	800145c <HAL_InitTick>
 80045e0:	4603      	mov	r3, r0
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	3718      	adds	r7, #24
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}
 80045ea:	bf00      	nop
 80045ec:	40022000 	.word	0x40022000
 80045f0:	40021000 	.word	0x40021000
 80045f4:	04c4b400 	.word	0x04c4b400
 80045f8:	0800c650 	.word	0x0800c650
 80045fc:	20000000 	.word	0x20000000
 8004600:	20000014 	.word	0x20000014

08004604 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004604:	b480      	push	{r7}
 8004606:	b087      	sub	sp, #28
 8004608:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800460a:	4b2c      	ldr	r3, [pc, #176]	@ (80046bc <HAL_RCC_GetSysClockFreq+0xb8>)
 800460c:	689b      	ldr	r3, [r3, #8]
 800460e:	f003 030c 	and.w	r3, r3, #12
 8004612:	2b04      	cmp	r3, #4
 8004614:	d102      	bne.n	800461c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004616:	4b2a      	ldr	r3, [pc, #168]	@ (80046c0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004618:	613b      	str	r3, [r7, #16]
 800461a:	e047      	b.n	80046ac <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800461c:	4b27      	ldr	r3, [pc, #156]	@ (80046bc <HAL_RCC_GetSysClockFreq+0xb8>)
 800461e:	689b      	ldr	r3, [r3, #8]
 8004620:	f003 030c 	and.w	r3, r3, #12
 8004624:	2b08      	cmp	r3, #8
 8004626:	d102      	bne.n	800462e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004628:	4b26      	ldr	r3, [pc, #152]	@ (80046c4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800462a:	613b      	str	r3, [r7, #16]
 800462c:	e03e      	b.n	80046ac <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800462e:	4b23      	ldr	r3, [pc, #140]	@ (80046bc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004630:	689b      	ldr	r3, [r3, #8]
 8004632:	f003 030c 	and.w	r3, r3, #12
 8004636:	2b0c      	cmp	r3, #12
 8004638:	d136      	bne.n	80046a8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800463a:	4b20      	ldr	r3, [pc, #128]	@ (80046bc <HAL_RCC_GetSysClockFreq+0xb8>)
 800463c:	68db      	ldr	r3, [r3, #12]
 800463e:	f003 0303 	and.w	r3, r3, #3
 8004642:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004644:	4b1d      	ldr	r3, [pc, #116]	@ (80046bc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004646:	68db      	ldr	r3, [r3, #12]
 8004648:	091b      	lsrs	r3, r3, #4
 800464a:	f003 030f 	and.w	r3, r3, #15
 800464e:	3301      	adds	r3, #1
 8004650:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	2b03      	cmp	r3, #3
 8004656:	d10c      	bne.n	8004672 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004658:	4a1a      	ldr	r2, [pc, #104]	@ (80046c4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800465a:	68bb      	ldr	r3, [r7, #8]
 800465c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004660:	4a16      	ldr	r2, [pc, #88]	@ (80046bc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004662:	68d2      	ldr	r2, [r2, #12]
 8004664:	0a12      	lsrs	r2, r2, #8
 8004666:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800466a:	fb02 f303 	mul.w	r3, r2, r3
 800466e:	617b      	str	r3, [r7, #20]
      break;
 8004670:	e00c      	b.n	800468c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004672:	4a13      	ldr	r2, [pc, #76]	@ (80046c0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	fbb2 f3f3 	udiv	r3, r2, r3
 800467a:	4a10      	ldr	r2, [pc, #64]	@ (80046bc <HAL_RCC_GetSysClockFreq+0xb8>)
 800467c:	68d2      	ldr	r2, [r2, #12]
 800467e:	0a12      	lsrs	r2, r2, #8
 8004680:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004684:	fb02 f303 	mul.w	r3, r2, r3
 8004688:	617b      	str	r3, [r7, #20]
      break;
 800468a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800468c:	4b0b      	ldr	r3, [pc, #44]	@ (80046bc <HAL_RCC_GetSysClockFreq+0xb8>)
 800468e:	68db      	ldr	r3, [r3, #12]
 8004690:	0e5b      	lsrs	r3, r3, #25
 8004692:	f003 0303 	and.w	r3, r3, #3
 8004696:	3301      	adds	r3, #1
 8004698:	005b      	lsls	r3, r3, #1
 800469a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800469c:	697a      	ldr	r2, [r7, #20]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80046a4:	613b      	str	r3, [r7, #16]
 80046a6:	e001      	b.n	80046ac <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80046a8:	2300      	movs	r3, #0
 80046aa:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80046ac:	693b      	ldr	r3, [r7, #16]
}
 80046ae:	4618      	mov	r0, r3
 80046b0:	371c      	adds	r7, #28
 80046b2:	46bd      	mov	sp, r7
 80046b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b8:	4770      	bx	lr
 80046ba:	bf00      	nop
 80046bc:	40021000 	.word	0x40021000
 80046c0:	00f42400 	.word	0x00f42400
 80046c4:	016e3600 	.word	0x016e3600

080046c8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80046c8:	b480      	push	{r7}
 80046ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80046cc:	4b03      	ldr	r3, [pc, #12]	@ (80046dc <HAL_RCC_GetHCLKFreq+0x14>)
 80046ce:	681b      	ldr	r3, [r3, #0]
}
 80046d0:	4618      	mov	r0, r3
 80046d2:	46bd      	mov	sp, r7
 80046d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d8:	4770      	bx	lr
 80046da:	bf00      	nop
 80046dc:	20000000 	.word	0x20000000

080046e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80046e4:	f7ff fff0 	bl	80046c8 <HAL_RCC_GetHCLKFreq>
 80046e8:	4602      	mov	r2, r0
 80046ea:	4b06      	ldr	r3, [pc, #24]	@ (8004704 <HAL_RCC_GetPCLK1Freq+0x24>)
 80046ec:	689b      	ldr	r3, [r3, #8]
 80046ee:	0a1b      	lsrs	r3, r3, #8
 80046f0:	f003 0307 	and.w	r3, r3, #7
 80046f4:	4904      	ldr	r1, [pc, #16]	@ (8004708 <HAL_RCC_GetPCLK1Freq+0x28>)
 80046f6:	5ccb      	ldrb	r3, [r1, r3]
 80046f8:	f003 031f 	and.w	r3, r3, #31
 80046fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004700:	4618      	mov	r0, r3
 8004702:	bd80      	pop	{r7, pc}
 8004704:	40021000 	.word	0x40021000
 8004708:	0800c660 	.word	0x0800c660

0800470c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004710:	f7ff ffda 	bl	80046c8 <HAL_RCC_GetHCLKFreq>
 8004714:	4602      	mov	r2, r0
 8004716:	4b06      	ldr	r3, [pc, #24]	@ (8004730 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004718:	689b      	ldr	r3, [r3, #8]
 800471a:	0adb      	lsrs	r3, r3, #11
 800471c:	f003 0307 	and.w	r3, r3, #7
 8004720:	4904      	ldr	r1, [pc, #16]	@ (8004734 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004722:	5ccb      	ldrb	r3, [r1, r3]
 8004724:	f003 031f 	and.w	r3, r3, #31
 8004728:	fa22 f303 	lsr.w	r3, r2, r3
}
 800472c:	4618      	mov	r0, r3
 800472e:	bd80      	pop	{r7, pc}
 8004730:	40021000 	.word	0x40021000
 8004734:	0800c660 	.word	0x0800c660

08004738 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004738:	b480      	push	{r7}
 800473a:	b087      	sub	sp, #28
 800473c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800473e:	4b1e      	ldr	r3, [pc, #120]	@ (80047b8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004740:	68db      	ldr	r3, [r3, #12]
 8004742:	f003 0303 	and.w	r3, r3, #3
 8004746:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004748:	4b1b      	ldr	r3, [pc, #108]	@ (80047b8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800474a:	68db      	ldr	r3, [r3, #12]
 800474c:	091b      	lsrs	r3, r3, #4
 800474e:	f003 030f 	and.w	r3, r3, #15
 8004752:	3301      	adds	r3, #1
 8004754:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004756:	693b      	ldr	r3, [r7, #16]
 8004758:	2b03      	cmp	r3, #3
 800475a:	d10c      	bne.n	8004776 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800475c:	4a17      	ldr	r2, [pc, #92]	@ (80047bc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	fbb2 f3f3 	udiv	r3, r2, r3
 8004764:	4a14      	ldr	r2, [pc, #80]	@ (80047b8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004766:	68d2      	ldr	r2, [r2, #12]
 8004768:	0a12      	lsrs	r2, r2, #8
 800476a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800476e:	fb02 f303 	mul.w	r3, r2, r3
 8004772:	617b      	str	r3, [r7, #20]
    break;
 8004774:	e00c      	b.n	8004790 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004776:	4a12      	ldr	r2, [pc, #72]	@ (80047c0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	fbb2 f3f3 	udiv	r3, r2, r3
 800477e:	4a0e      	ldr	r2, [pc, #56]	@ (80047b8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004780:	68d2      	ldr	r2, [r2, #12]
 8004782:	0a12      	lsrs	r2, r2, #8
 8004784:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004788:	fb02 f303 	mul.w	r3, r2, r3
 800478c:	617b      	str	r3, [r7, #20]
    break;
 800478e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004790:	4b09      	ldr	r3, [pc, #36]	@ (80047b8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004792:	68db      	ldr	r3, [r3, #12]
 8004794:	0e5b      	lsrs	r3, r3, #25
 8004796:	f003 0303 	and.w	r3, r3, #3
 800479a:	3301      	adds	r3, #1
 800479c:	005b      	lsls	r3, r3, #1
 800479e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80047a0:	697a      	ldr	r2, [r7, #20]
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80047a8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80047aa:	687b      	ldr	r3, [r7, #4]
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	371c      	adds	r7, #28
 80047b0:	46bd      	mov	sp, r7
 80047b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b6:	4770      	bx	lr
 80047b8:	40021000 	.word	0x40021000
 80047bc:	016e3600 	.word	0x016e3600
 80047c0:	00f42400 	.word	0x00f42400

080047c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b086      	sub	sp, #24
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80047cc:	2300      	movs	r3, #0
 80047ce:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80047d0:	2300      	movs	r3, #0
 80047d2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80047dc:	2b00      	cmp	r3, #0
 80047de:	f000 8098 	beq.w	8004912 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80047e2:	2300      	movs	r3, #0
 80047e4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047e6:	4b43      	ldr	r3, [pc, #268]	@ (80048f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80047e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d10d      	bne.n	800480e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047f2:	4b40      	ldr	r3, [pc, #256]	@ (80048f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80047f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047f6:	4a3f      	ldr	r2, [pc, #252]	@ (80048f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80047f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80047fc:	6593      	str	r3, [r2, #88]	@ 0x58
 80047fe:	4b3d      	ldr	r3, [pc, #244]	@ (80048f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004800:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004802:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004806:	60bb      	str	r3, [r7, #8]
 8004808:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800480a:	2301      	movs	r3, #1
 800480c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800480e:	4b3a      	ldr	r3, [pc, #232]	@ (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4a39      	ldr	r2, [pc, #228]	@ (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004814:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004818:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800481a:	f7fc fe6b 	bl	80014f4 <HAL_GetTick>
 800481e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004820:	e009      	b.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004822:	f7fc fe67 	bl	80014f4 <HAL_GetTick>
 8004826:	4602      	mov	r2, r0
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	1ad3      	subs	r3, r2, r3
 800482c:	2b02      	cmp	r3, #2
 800482e:	d902      	bls.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004830:	2303      	movs	r3, #3
 8004832:	74fb      	strb	r3, [r7, #19]
        break;
 8004834:	e005      	b.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004836:	4b30      	ldr	r3, [pc, #192]	@ (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800483e:	2b00      	cmp	r3, #0
 8004840:	d0ef      	beq.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004842:	7cfb      	ldrb	r3, [r7, #19]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d159      	bne.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004848:	4b2a      	ldr	r3, [pc, #168]	@ (80048f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800484a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800484e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004852:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004854:	697b      	ldr	r3, [r7, #20]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d01e      	beq.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800485e:	697a      	ldr	r2, [r7, #20]
 8004860:	429a      	cmp	r2, r3
 8004862:	d019      	beq.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004864:	4b23      	ldr	r3, [pc, #140]	@ (80048f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004866:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800486a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800486e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004870:	4b20      	ldr	r3, [pc, #128]	@ (80048f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004872:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004876:	4a1f      	ldr	r2, [pc, #124]	@ (80048f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004878:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800487c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004880:	4b1c      	ldr	r3, [pc, #112]	@ (80048f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004882:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004886:	4a1b      	ldr	r2, [pc, #108]	@ (80048f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004888:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800488c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004890:	4a18      	ldr	r2, [pc, #96]	@ (80048f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004892:	697b      	ldr	r3, [r7, #20]
 8004894:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	f003 0301 	and.w	r3, r3, #1
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d016      	beq.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048a2:	f7fc fe27 	bl	80014f4 <HAL_GetTick>
 80048a6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80048a8:	e00b      	b.n	80048c2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048aa:	f7fc fe23 	bl	80014f4 <HAL_GetTick>
 80048ae:	4602      	mov	r2, r0
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	1ad3      	subs	r3, r2, r3
 80048b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d902      	bls.n	80048c2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80048bc:	2303      	movs	r3, #3
 80048be:	74fb      	strb	r3, [r7, #19]
            break;
 80048c0:	e006      	b.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80048c2:	4b0c      	ldr	r3, [pc, #48]	@ (80048f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80048c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048c8:	f003 0302 	and.w	r3, r3, #2
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d0ec      	beq.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80048d0:	7cfb      	ldrb	r3, [r7, #19]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d10b      	bne.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80048d6:	4b07      	ldr	r3, [pc, #28]	@ (80048f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80048d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048dc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048e4:	4903      	ldr	r1, [pc, #12]	@ (80048f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80048e6:	4313      	orrs	r3, r2
 80048e8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80048ec:	e008      	b.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80048ee:	7cfb      	ldrb	r3, [r7, #19]
 80048f0:	74bb      	strb	r3, [r7, #18]
 80048f2:	e005      	b.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80048f4:	40021000 	.word	0x40021000
 80048f8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048fc:	7cfb      	ldrb	r3, [r7, #19]
 80048fe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004900:	7c7b      	ldrb	r3, [r7, #17]
 8004902:	2b01      	cmp	r3, #1
 8004904:	d105      	bne.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004906:	4ba6      	ldr	r3, [pc, #664]	@ (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004908:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800490a:	4aa5      	ldr	r2, [pc, #660]	@ (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800490c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004910:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f003 0301 	and.w	r3, r3, #1
 800491a:	2b00      	cmp	r3, #0
 800491c:	d00a      	beq.n	8004934 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800491e:	4ba0      	ldr	r3, [pc, #640]	@ (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004920:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004924:	f023 0203 	bic.w	r2, r3, #3
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	499c      	ldr	r1, [pc, #624]	@ (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800492e:	4313      	orrs	r3, r2
 8004930:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f003 0302 	and.w	r3, r3, #2
 800493c:	2b00      	cmp	r3, #0
 800493e:	d00a      	beq.n	8004956 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004940:	4b97      	ldr	r3, [pc, #604]	@ (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004942:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004946:	f023 020c 	bic.w	r2, r3, #12
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	689b      	ldr	r3, [r3, #8]
 800494e:	4994      	ldr	r1, [pc, #592]	@ (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004950:	4313      	orrs	r3, r2
 8004952:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f003 0304 	and.w	r3, r3, #4
 800495e:	2b00      	cmp	r3, #0
 8004960:	d00a      	beq.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004962:	4b8f      	ldr	r3, [pc, #572]	@ (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004964:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004968:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	68db      	ldr	r3, [r3, #12]
 8004970:	498b      	ldr	r1, [pc, #556]	@ (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004972:	4313      	orrs	r3, r2
 8004974:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f003 0308 	and.w	r3, r3, #8
 8004980:	2b00      	cmp	r3, #0
 8004982:	d00a      	beq.n	800499a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004984:	4b86      	ldr	r3, [pc, #536]	@ (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004986:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800498a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	691b      	ldr	r3, [r3, #16]
 8004992:	4983      	ldr	r1, [pc, #524]	@ (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004994:	4313      	orrs	r3, r2
 8004996:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f003 0320 	and.w	r3, r3, #32
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d00a      	beq.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80049a6:	4b7e      	ldr	r3, [pc, #504]	@ (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049ac:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	695b      	ldr	r3, [r3, #20]
 80049b4:	497a      	ldr	r1, [pc, #488]	@ (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049b6:	4313      	orrs	r3, r2
 80049b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d00a      	beq.n	80049de <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80049c8:	4b75      	ldr	r3, [pc, #468]	@ (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049ce:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	699b      	ldr	r3, [r3, #24]
 80049d6:	4972      	ldr	r1, [pc, #456]	@ (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049d8:	4313      	orrs	r3, r2
 80049da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d00a      	beq.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80049ea:	4b6d      	ldr	r3, [pc, #436]	@ (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049f0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	69db      	ldr	r3, [r3, #28]
 80049f8:	4969      	ldr	r1, [pc, #420]	@ (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049fa:	4313      	orrs	r3, r2
 80049fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d00a      	beq.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004a0c:	4b64      	ldr	r3, [pc, #400]	@ (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a12:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6a1b      	ldr	r3, [r3, #32]
 8004a1a:	4961      	ldr	r1, [pc, #388]	@ (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a1c:	4313      	orrs	r3, r2
 8004a1e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d00a      	beq.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004a2e:	4b5c      	ldr	r3, [pc, #368]	@ (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a34:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a3c:	4958      	ldr	r1, [pc, #352]	@ (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d015      	beq.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004a50:	4b53      	ldr	r3, [pc, #332]	@ (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a56:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a5e:	4950      	ldr	r1, [pc, #320]	@ (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a60:	4313      	orrs	r3, r2
 8004a62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a6a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004a6e:	d105      	bne.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a70:	4b4b      	ldr	r3, [pc, #300]	@ (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a72:	68db      	ldr	r3, [r3, #12]
 8004a74:	4a4a      	ldr	r2, [pc, #296]	@ (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a76:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004a7a:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d015      	beq.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004a88:	4b45      	ldr	r3, [pc, #276]	@ (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a8e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a96:	4942      	ldr	r1, [pc, #264]	@ (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004aa2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004aa6:	d105      	bne.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004aa8:	4b3d      	ldr	r3, [pc, #244]	@ (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004aaa:	68db      	ldr	r3, [r3, #12]
 8004aac:	4a3c      	ldr	r2, [pc, #240]	@ (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004aae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004ab2:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d015      	beq.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004ac0:	4b37      	ldr	r3, [pc, #220]	@ (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ac2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ac6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ace:	4934      	ldr	r1, [pc, #208]	@ (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ada:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004ade:	d105      	bne.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ae0:	4b2f      	ldr	r3, [pc, #188]	@ (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ae2:	68db      	ldr	r3, [r3, #12]
 8004ae4:	4a2e      	ldr	r2, [pc, #184]	@ (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ae6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004aea:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d015      	beq.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004af8:	4b29      	ldr	r3, [pc, #164]	@ (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004afa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004afe:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b06:	4926      	ldr	r1, [pc, #152]	@ (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b08:	4313      	orrs	r3, r2
 8004b0a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b12:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004b16:	d105      	bne.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b18:	4b21      	ldr	r3, [pc, #132]	@ (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b1a:	68db      	ldr	r3, [r3, #12]
 8004b1c:	4a20      	ldr	r2, [pc, #128]	@ (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b1e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004b22:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d015      	beq.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004b30:	4b1b      	ldr	r3, [pc, #108]	@ (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b36:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b3e:	4918      	ldr	r1, [pc, #96]	@ (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b40:	4313      	orrs	r3, r2
 8004b42:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b4a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004b4e:	d105      	bne.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b50:	4b13      	ldr	r3, [pc, #76]	@ (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b52:	68db      	ldr	r3, [r3, #12]
 8004b54:	4a12      	ldr	r2, [pc, #72]	@ (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b56:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004b5a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d015      	beq.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004b68:	4b0d      	ldr	r3, [pc, #52]	@ (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b6e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b76:	490a      	ldr	r1, [pc, #40]	@ (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b78:	4313      	orrs	r3, r2
 8004b7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b82:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004b86:	d105      	bne.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004b88:	4b05      	ldr	r3, [pc, #20]	@ (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b8a:	68db      	ldr	r3, [r3, #12]
 8004b8c:	4a04      	ldr	r2, [pc, #16]	@ (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b8e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b92:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004b94:	7cbb      	ldrb	r3, [r7, #18]
}
 8004b96:	4618      	mov	r0, r3
 8004b98:	3718      	adds	r7, #24
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bd80      	pop	{r7, pc}
 8004b9e:	bf00      	nop
 8004ba0:	40021000 	.word	0x40021000

08004ba4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b082      	sub	sp, #8
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d101      	bne.n	8004bb6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	e049      	b.n	8004c4a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004bbc:	b2db      	uxtb	r3, r3
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d106      	bne.n	8004bd0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004bca:	6878      	ldr	r0, [r7, #4]
 8004bcc:	f7fc f99a 	bl	8000f04 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2202      	movs	r2, #2
 8004bd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681a      	ldr	r2, [r3, #0]
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	3304      	adds	r3, #4
 8004be0:	4619      	mov	r1, r3
 8004be2:	4610      	mov	r0, r2
 8004be4:	f000 fb12 	bl	800520c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2201      	movs	r2, #1
 8004bec:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2201      	movs	r2, #1
 8004bfc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2201      	movs	r2, #1
 8004c04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2201      	movs	r2, #1
 8004c0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2201      	movs	r2, #1
 8004c14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2201      	movs	r2, #1
 8004c1c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2201      	movs	r2, #1
 8004c24:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2201      	movs	r2, #1
 8004c34:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2201      	movs	r2, #1
 8004c44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004c48:	2300      	movs	r3, #0
}
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	3708      	adds	r7, #8
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bd80      	pop	{r7, pc}
	...

08004c54 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004c54:	b480      	push	{r7}
 8004c56:	b085      	sub	sp, #20
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c62:	b2db      	uxtb	r3, r3
 8004c64:	2b01      	cmp	r3, #1
 8004c66:	d001      	beq.n	8004c6c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004c68:	2301      	movs	r3, #1
 8004c6a:	e04a      	b.n	8004d02 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2202      	movs	r2, #2
 8004c70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	68da      	ldr	r2, [r3, #12]
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f042 0201 	orr.w	r2, r2, #1
 8004c82:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a21      	ldr	r2, [pc, #132]	@ (8004d10 <HAL_TIM_Base_Start_IT+0xbc>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d018      	beq.n	8004cc0 <HAL_TIM_Base_Start_IT+0x6c>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c96:	d013      	beq.n	8004cc0 <HAL_TIM_Base_Start_IT+0x6c>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a1d      	ldr	r2, [pc, #116]	@ (8004d14 <HAL_TIM_Base_Start_IT+0xc0>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d00e      	beq.n	8004cc0 <HAL_TIM_Base_Start_IT+0x6c>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a1c      	ldr	r2, [pc, #112]	@ (8004d18 <HAL_TIM_Base_Start_IT+0xc4>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d009      	beq.n	8004cc0 <HAL_TIM_Base_Start_IT+0x6c>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a1a      	ldr	r2, [pc, #104]	@ (8004d1c <HAL_TIM_Base_Start_IT+0xc8>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d004      	beq.n	8004cc0 <HAL_TIM_Base_Start_IT+0x6c>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4a19      	ldr	r2, [pc, #100]	@ (8004d20 <HAL_TIM_Base_Start_IT+0xcc>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d115      	bne.n	8004cec <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	689a      	ldr	r2, [r3, #8]
 8004cc6:	4b17      	ldr	r3, [pc, #92]	@ (8004d24 <HAL_TIM_Base_Start_IT+0xd0>)
 8004cc8:	4013      	ands	r3, r2
 8004cca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	2b06      	cmp	r3, #6
 8004cd0:	d015      	beq.n	8004cfe <HAL_TIM_Base_Start_IT+0xaa>
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004cd8:	d011      	beq.n	8004cfe <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	681a      	ldr	r2, [r3, #0]
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f042 0201 	orr.w	r2, r2, #1
 8004ce8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cea:	e008      	b.n	8004cfe <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	681a      	ldr	r2, [r3, #0]
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f042 0201 	orr.w	r2, r2, #1
 8004cfa:	601a      	str	r2, [r3, #0]
 8004cfc:	e000      	b.n	8004d00 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cfe:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004d00:	2300      	movs	r3, #0
}
 8004d02:	4618      	mov	r0, r3
 8004d04:	3714      	adds	r7, #20
 8004d06:	46bd      	mov	sp, r7
 8004d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0c:	4770      	bx	lr
 8004d0e:	bf00      	nop
 8004d10:	40012c00 	.word	0x40012c00
 8004d14:	40000400 	.word	0x40000400
 8004d18:	40000800 	.word	0x40000800
 8004d1c:	40013400 	.word	0x40013400
 8004d20:	40014000 	.word	0x40014000
 8004d24:	00010007 	.word	0x00010007

08004d28 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b084      	sub	sp, #16
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	68db      	ldr	r3, [r3, #12]
 8004d36:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	691b      	ldr	r3, [r3, #16]
 8004d3e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	f003 0302 	and.w	r3, r3, #2
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d020      	beq.n	8004d8c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	f003 0302 	and.w	r3, r3, #2
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d01b      	beq.n	8004d8c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f06f 0202 	mvn.w	r2, #2
 8004d5c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2201      	movs	r2, #1
 8004d62:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	699b      	ldr	r3, [r3, #24]
 8004d6a:	f003 0303 	and.w	r3, r3, #3
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d003      	beq.n	8004d7a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004d72:	6878      	ldr	r0, [r7, #4]
 8004d74:	f000 fa2c 	bl	80051d0 <HAL_TIM_IC_CaptureCallback>
 8004d78:	e005      	b.n	8004d86 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d7a:	6878      	ldr	r0, [r7, #4]
 8004d7c:	f000 fa1e 	bl	80051bc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d80:	6878      	ldr	r0, [r7, #4]
 8004d82:	f000 fa2f 	bl	80051e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004d8c:	68bb      	ldr	r3, [r7, #8]
 8004d8e:	f003 0304 	and.w	r3, r3, #4
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d020      	beq.n	8004dd8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	f003 0304 	and.w	r3, r3, #4
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d01b      	beq.n	8004dd8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f06f 0204 	mvn.w	r2, #4
 8004da8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2202      	movs	r2, #2
 8004dae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	699b      	ldr	r3, [r3, #24]
 8004db6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d003      	beq.n	8004dc6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004dbe:	6878      	ldr	r0, [r7, #4]
 8004dc0:	f000 fa06 	bl	80051d0 <HAL_TIM_IC_CaptureCallback>
 8004dc4:	e005      	b.n	8004dd2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dc6:	6878      	ldr	r0, [r7, #4]
 8004dc8:	f000 f9f8 	bl	80051bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004dcc:	6878      	ldr	r0, [r7, #4]
 8004dce:	f000 fa09 	bl	80051e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	f003 0308 	and.w	r3, r3, #8
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d020      	beq.n	8004e24 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	f003 0308 	and.w	r3, r3, #8
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d01b      	beq.n	8004e24 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f06f 0208 	mvn.w	r2, #8
 8004df4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2204      	movs	r2, #4
 8004dfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	69db      	ldr	r3, [r3, #28]
 8004e02:	f003 0303 	and.w	r3, r3, #3
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d003      	beq.n	8004e12 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e0a:	6878      	ldr	r0, [r7, #4]
 8004e0c:	f000 f9e0 	bl	80051d0 <HAL_TIM_IC_CaptureCallback>
 8004e10:	e005      	b.n	8004e1e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e12:	6878      	ldr	r0, [r7, #4]
 8004e14:	f000 f9d2 	bl	80051bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e18:	6878      	ldr	r0, [r7, #4]
 8004e1a:	f000 f9e3 	bl	80051e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2200      	movs	r2, #0
 8004e22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	f003 0310 	and.w	r3, r3, #16
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d020      	beq.n	8004e70 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	f003 0310 	and.w	r3, r3, #16
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d01b      	beq.n	8004e70 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f06f 0210 	mvn.w	r2, #16
 8004e40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2208      	movs	r2, #8
 8004e46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	69db      	ldr	r3, [r3, #28]
 8004e4e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d003      	beq.n	8004e5e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e56:	6878      	ldr	r0, [r7, #4]
 8004e58:	f000 f9ba 	bl	80051d0 <HAL_TIM_IC_CaptureCallback>
 8004e5c:	e005      	b.n	8004e6a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e5e:	6878      	ldr	r0, [r7, #4]
 8004e60:	f000 f9ac 	bl	80051bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e64:	6878      	ldr	r0, [r7, #4]
 8004e66:	f000 f9bd 	bl	80051e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	f003 0301 	and.w	r3, r3, #1
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d00c      	beq.n	8004e94 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	f003 0301 	and.w	r3, r3, #1
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d007      	beq.n	8004e94 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f06f 0201 	mvn.w	r2, #1
 8004e8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004e8e:	6878      	ldr	r0, [r7, #4]
 8004e90:	f7fb fe82 	bl	8000b98 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d104      	bne.n	8004ea8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004e9e:	68bb      	ldr	r3, [r7, #8]
 8004ea0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d00c      	beq.n	8004ec2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d007      	beq.n	8004ec2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8004eba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004ebc:	6878      	ldr	r0, [r7, #4]
 8004ebe:	f000 fb69 	bl	8005594 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004ec2:	68bb      	ldr	r3, [r7, #8]
 8004ec4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d00c      	beq.n	8004ee6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d007      	beq.n	8004ee6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004ede:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004ee0:	6878      	ldr	r0, [r7, #4]
 8004ee2:	f000 fb61 	bl	80055a8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004ee6:	68bb      	ldr	r3, [r7, #8]
 8004ee8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d00c      	beq.n	8004f0a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d007      	beq.n	8004f0a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004f02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004f04:	6878      	ldr	r0, [r7, #4]
 8004f06:	f000 f977 	bl	80051f8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	f003 0320 	and.w	r3, r3, #32
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d00c      	beq.n	8004f2e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	f003 0320 	and.w	r3, r3, #32
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d007      	beq.n	8004f2e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f06f 0220 	mvn.w	r2, #32
 8004f26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004f28:	6878      	ldr	r0, [r7, #4]
 8004f2a:	f000 fb29 	bl	8005580 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8004f2e:	68bb      	ldr	r3, [r7, #8]
 8004f30:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d00c      	beq.n	8004f52 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d007      	beq.n	8004f52 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8004f4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8004f4c:	6878      	ldr	r0, [r7, #4]
 8004f4e:	f000 fb35 	bl	80055bc <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8004f52:	68bb      	ldr	r3, [r7, #8]
 8004f54:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d00c      	beq.n	8004f76 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d007      	beq.n	8004f76 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8004f6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8004f70:	6878      	ldr	r0, [r7, #4]
 8004f72:	f000 fb2d 	bl	80055d0 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8004f76:	68bb      	ldr	r3, [r7, #8]
 8004f78:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d00c      	beq.n	8004f9a <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d007      	beq.n	8004f9a <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8004f92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8004f94:	6878      	ldr	r0, [r7, #4]
 8004f96:	f000 fb25 	bl	80055e4 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8004f9a:	68bb      	ldr	r3, [r7, #8]
 8004f9c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d00c      	beq.n	8004fbe <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d007      	beq.n	8004fbe <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8004fb6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8004fb8:	6878      	ldr	r0, [r7, #4]
 8004fba:	f000 fb1d 	bl	80055f8 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004fbe:	bf00      	nop
 8004fc0:	3710      	adds	r7, #16
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bd80      	pop	{r7, pc}
	...

08004fc8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b084      	sub	sp, #16
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
 8004fd0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004fdc:	2b01      	cmp	r3, #1
 8004fde:	d101      	bne.n	8004fe4 <HAL_TIM_ConfigClockSource+0x1c>
 8004fe0:	2302      	movs	r3, #2
 8004fe2:	e0de      	b.n	80051a2 <HAL_TIM_ConfigClockSource+0x1da>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2201      	movs	r2, #1
 8004fe8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2202      	movs	r2, #2
 8004ff0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	689b      	ldr	r3, [r3, #8]
 8004ffa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004ffc:	68bb      	ldr	r3, [r7, #8]
 8004ffe:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8005002:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005006:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800500e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	68ba      	ldr	r2, [r7, #8]
 8005016:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a63      	ldr	r2, [pc, #396]	@ (80051ac <HAL_TIM_ConfigClockSource+0x1e4>)
 800501e:	4293      	cmp	r3, r2
 8005020:	f000 80a9 	beq.w	8005176 <HAL_TIM_ConfigClockSource+0x1ae>
 8005024:	4a61      	ldr	r2, [pc, #388]	@ (80051ac <HAL_TIM_ConfigClockSource+0x1e4>)
 8005026:	4293      	cmp	r3, r2
 8005028:	f200 80ae 	bhi.w	8005188 <HAL_TIM_ConfigClockSource+0x1c0>
 800502c:	4a60      	ldr	r2, [pc, #384]	@ (80051b0 <HAL_TIM_ConfigClockSource+0x1e8>)
 800502e:	4293      	cmp	r3, r2
 8005030:	f000 80a1 	beq.w	8005176 <HAL_TIM_ConfigClockSource+0x1ae>
 8005034:	4a5e      	ldr	r2, [pc, #376]	@ (80051b0 <HAL_TIM_ConfigClockSource+0x1e8>)
 8005036:	4293      	cmp	r3, r2
 8005038:	f200 80a6 	bhi.w	8005188 <HAL_TIM_ConfigClockSource+0x1c0>
 800503c:	4a5d      	ldr	r2, [pc, #372]	@ (80051b4 <HAL_TIM_ConfigClockSource+0x1ec>)
 800503e:	4293      	cmp	r3, r2
 8005040:	f000 8099 	beq.w	8005176 <HAL_TIM_ConfigClockSource+0x1ae>
 8005044:	4a5b      	ldr	r2, [pc, #364]	@ (80051b4 <HAL_TIM_ConfigClockSource+0x1ec>)
 8005046:	4293      	cmp	r3, r2
 8005048:	f200 809e 	bhi.w	8005188 <HAL_TIM_ConfigClockSource+0x1c0>
 800504c:	4a5a      	ldr	r2, [pc, #360]	@ (80051b8 <HAL_TIM_ConfigClockSource+0x1f0>)
 800504e:	4293      	cmp	r3, r2
 8005050:	f000 8091 	beq.w	8005176 <HAL_TIM_ConfigClockSource+0x1ae>
 8005054:	4a58      	ldr	r2, [pc, #352]	@ (80051b8 <HAL_TIM_ConfigClockSource+0x1f0>)
 8005056:	4293      	cmp	r3, r2
 8005058:	f200 8096 	bhi.w	8005188 <HAL_TIM_ConfigClockSource+0x1c0>
 800505c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005060:	f000 8089 	beq.w	8005176 <HAL_TIM_ConfigClockSource+0x1ae>
 8005064:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005068:	f200 808e 	bhi.w	8005188 <HAL_TIM_ConfigClockSource+0x1c0>
 800506c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005070:	d03e      	beq.n	80050f0 <HAL_TIM_ConfigClockSource+0x128>
 8005072:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005076:	f200 8087 	bhi.w	8005188 <HAL_TIM_ConfigClockSource+0x1c0>
 800507a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800507e:	f000 8086 	beq.w	800518e <HAL_TIM_ConfigClockSource+0x1c6>
 8005082:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005086:	d87f      	bhi.n	8005188 <HAL_TIM_ConfigClockSource+0x1c0>
 8005088:	2b70      	cmp	r3, #112	@ 0x70
 800508a:	d01a      	beq.n	80050c2 <HAL_TIM_ConfigClockSource+0xfa>
 800508c:	2b70      	cmp	r3, #112	@ 0x70
 800508e:	d87b      	bhi.n	8005188 <HAL_TIM_ConfigClockSource+0x1c0>
 8005090:	2b60      	cmp	r3, #96	@ 0x60
 8005092:	d050      	beq.n	8005136 <HAL_TIM_ConfigClockSource+0x16e>
 8005094:	2b60      	cmp	r3, #96	@ 0x60
 8005096:	d877      	bhi.n	8005188 <HAL_TIM_ConfigClockSource+0x1c0>
 8005098:	2b50      	cmp	r3, #80	@ 0x50
 800509a:	d03c      	beq.n	8005116 <HAL_TIM_ConfigClockSource+0x14e>
 800509c:	2b50      	cmp	r3, #80	@ 0x50
 800509e:	d873      	bhi.n	8005188 <HAL_TIM_ConfigClockSource+0x1c0>
 80050a0:	2b40      	cmp	r3, #64	@ 0x40
 80050a2:	d058      	beq.n	8005156 <HAL_TIM_ConfigClockSource+0x18e>
 80050a4:	2b40      	cmp	r3, #64	@ 0x40
 80050a6:	d86f      	bhi.n	8005188 <HAL_TIM_ConfigClockSource+0x1c0>
 80050a8:	2b30      	cmp	r3, #48	@ 0x30
 80050aa:	d064      	beq.n	8005176 <HAL_TIM_ConfigClockSource+0x1ae>
 80050ac:	2b30      	cmp	r3, #48	@ 0x30
 80050ae:	d86b      	bhi.n	8005188 <HAL_TIM_ConfigClockSource+0x1c0>
 80050b0:	2b20      	cmp	r3, #32
 80050b2:	d060      	beq.n	8005176 <HAL_TIM_ConfigClockSource+0x1ae>
 80050b4:	2b20      	cmp	r3, #32
 80050b6:	d867      	bhi.n	8005188 <HAL_TIM_ConfigClockSource+0x1c0>
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d05c      	beq.n	8005176 <HAL_TIM_ConfigClockSource+0x1ae>
 80050bc:	2b10      	cmp	r3, #16
 80050be:	d05a      	beq.n	8005176 <HAL_TIM_ConfigClockSource+0x1ae>
 80050c0:	e062      	b.n	8005188 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80050d2:	f000 f9b3 	bl	800543c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	689b      	ldr	r3, [r3, #8]
 80050dc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80050de:	68bb      	ldr	r3, [r7, #8]
 80050e0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80050e4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	68ba      	ldr	r2, [r7, #8]
 80050ec:	609a      	str	r2, [r3, #8]
      break;
 80050ee:	e04f      	b.n	8005190 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005100:	f000 f99c 	bl	800543c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	689a      	ldr	r2, [r3, #8]
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005112:	609a      	str	r2, [r3, #8]
      break;
 8005114:	e03c      	b.n	8005190 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005122:	461a      	mov	r2, r3
 8005124:	f000 f90e 	bl	8005344 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	2150      	movs	r1, #80	@ 0x50
 800512e:	4618      	mov	r0, r3
 8005130:	f000 f967 	bl	8005402 <TIM_ITRx_SetConfig>
      break;
 8005134:	e02c      	b.n	8005190 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005142:	461a      	mov	r2, r3
 8005144:	f000 f92d 	bl	80053a2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	2160      	movs	r1, #96	@ 0x60
 800514e:	4618      	mov	r0, r3
 8005150:	f000 f957 	bl	8005402 <TIM_ITRx_SetConfig>
      break;
 8005154:	e01c      	b.n	8005190 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005162:	461a      	mov	r2, r3
 8005164:	f000 f8ee 	bl	8005344 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	2140      	movs	r1, #64	@ 0x40
 800516e:	4618      	mov	r0, r3
 8005170:	f000 f947 	bl	8005402 <TIM_ITRx_SetConfig>
      break;
 8005174:	e00c      	b.n	8005190 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681a      	ldr	r2, [r3, #0]
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4619      	mov	r1, r3
 8005180:	4610      	mov	r0, r2
 8005182:	f000 f93e 	bl	8005402 <TIM_ITRx_SetConfig>
      break;
 8005186:	e003      	b.n	8005190 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8005188:	2301      	movs	r3, #1
 800518a:	73fb      	strb	r3, [r7, #15]
      break;
 800518c:	e000      	b.n	8005190 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 800518e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2201      	movs	r2, #1
 8005194:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2200      	movs	r2, #0
 800519c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80051a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80051a2:	4618      	mov	r0, r3
 80051a4:	3710      	adds	r7, #16
 80051a6:	46bd      	mov	sp, r7
 80051a8:	bd80      	pop	{r7, pc}
 80051aa:	bf00      	nop
 80051ac:	00100070 	.word	0x00100070
 80051b0:	00100040 	.word	0x00100040
 80051b4:	00100030 	.word	0x00100030
 80051b8:	00100020 	.word	0x00100020

080051bc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80051bc:	b480      	push	{r7}
 80051be:	b083      	sub	sp, #12
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80051c4:	bf00      	nop
 80051c6:	370c      	adds	r7, #12
 80051c8:	46bd      	mov	sp, r7
 80051ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ce:	4770      	bx	lr

080051d0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80051d0:	b480      	push	{r7}
 80051d2:	b083      	sub	sp, #12
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80051d8:	bf00      	nop
 80051da:	370c      	adds	r7, #12
 80051dc:	46bd      	mov	sp, r7
 80051de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e2:	4770      	bx	lr

080051e4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80051e4:	b480      	push	{r7}
 80051e6:	b083      	sub	sp, #12
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80051ec:	bf00      	nop
 80051ee:	370c      	adds	r7, #12
 80051f0:	46bd      	mov	sp, r7
 80051f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f6:	4770      	bx	lr

080051f8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80051f8:	b480      	push	{r7}
 80051fa:	b083      	sub	sp, #12
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005200:	bf00      	nop
 8005202:	370c      	adds	r7, #12
 8005204:	46bd      	mov	sp, r7
 8005206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520a:	4770      	bx	lr

0800520c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800520c:	b480      	push	{r7}
 800520e:	b085      	sub	sp, #20
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
 8005214:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	4a42      	ldr	r2, [pc, #264]	@ (8005328 <TIM_Base_SetConfig+0x11c>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d00f      	beq.n	8005244 <TIM_Base_SetConfig+0x38>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800522a:	d00b      	beq.n	8005244 <TIM_Base_SetConfig+0x38>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	4a3f      	ldr	r2, [pc, #252]	@ (800532c <TIM_Base_SetConfig+0x120>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d007      	beq.n	8005244 <TIM_Base_SetConfig+0x38>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	4a3e      	ldr	r2, [pc, #248]	@ (8005330 <TIM_Base_SetConfig+0x124>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d003      	beq.n	8005244 <TIM_Base_SetConfig+0x38>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	4a3d      	ldr	r2, [pc, #244]	@ (8005334 <TIM_Base_SetConfig+0x128>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d108      	bne.n	8005256 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800524a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	68fa      	ldr	r2, [r7, #12]
 8005252:	4313      	orrs	r3, r2
 8005254:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	4a33      	ldr	r2, [pc, #204]	@ (8005328 <TIM_Base_SetConfig+0x11c>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d01b      	beq.n	8005296 <TIM_Base_SetConfig+0x8a>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005264:	d017      	beq.n	8005296 <TIM_Base_SetConfig+0x8a>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	4a30      	ldr	r2, [pc, #192]	@ (800532c <TIM_Base_SetConfig+0x120>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d013      	beq.n	8005296 <TIM_Base_SetConfig+0x8a>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	4a2f      	ldr	r2, [pc, #188]	@ (8005330 <TIM_Base_SetConfig+0x124>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d00f      	beq.n	8005296 <TIM_Base_SetConfig+0x8a>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	4a2e      	ldr	r2, [pc, #184]	@ (8005334 <TIM_Base_SetConfig+0x128>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d00b      	beq.n	8005296 <TIM_Base_SetConfig+0x8a>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	4a2d      	ldr	r2, [pc, #180]	@ (8005338 <TIM_Base_SetConfig+0x12c>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d007      	beq.n	8005296 <TIM_Base_SetConfig+0x8a>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	4a2c      	ldr	r2, [pc, #176]	@ (800533c <TIM_Base_SetConfig+0x130>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d003      	beq.n	8005296 <TIM_Base_SetConfig+0x8a>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	4a2b      	ldr	r2, [pc, #172]	@ (8005340 <TIM_Base_SetConfig+0x134>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d108      	bne.n	80052a8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800529c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	68db      	ldr	r3, [r3, #12]
 80052a2:	68fa      	ldr	r2, [r7, #12]
 80052a4:	4313      	orrs	r3, r2
 80052a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	695b      	ldr	r3, [r3, #20]
 80052b2:	4313      	orrs	r3, r2
 80052b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	68fa      	ldr	r2, [r7, #12]
 80052ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	689a      	ldr	r2, [r3, #8]
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	681a      	ldr	r2, [r3, #0]
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	4a16      	ldr	r2, [pc, #88]	@ (8005328 <TIM_Base_SetConfig+0x11c>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d00f      	beq.n	80052f4 <TIM_Base_SetConfig+0xe8>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	4a17      	ldr	r2, [pc, #92]	@ (8005334 <TIM_Base_SetConfig+0x128>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d00b      	beq.n	80052f4 <TIM_Base_SetConfig+0xe8>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	4a16      	ldr	r2, [pc, #88]	@ (8005338 <TIM_Base_SetConfig+0x12c>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d007      	beq.n	80052f4 <TIM_Base_SetConfig+0xe8>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	4a15      	ldr	r2, [pc, #84]	@ (800533c <TIM_Base_SetConfig+0x130>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d003      	beq.n	80052f4 <TIM_Base_SetConfig+0xe8>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	4a14      	ldr	r2, [pc, #80]	@ (8005340 <TIM_Base_SetConfig+0x134>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d103      	bne.n	80052fc <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	691a      	ldr	r2, [r3, #16]
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2201      	movs	r2, #1
 8005300:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	691b      	ldr	r3, [r3, #16]
 8005306:	f003 0301 	and.w	r3, r3, #1
 800530a:	2b01      	cmp	r3, #1
 800530c:	d105      	bne.n	800531a <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	691b      	ldr	r3, [r3, #16]
 8005312:	f023 0201 	bic.w	r2, r3, #1
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	611a      	str	r2, [r3, #16]
  }
}
 800531a:	bf00      	nop
 800531c:	3714      	adds	r7, #20
 800531e:	46bd      	mov	sp, r7
 8005320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005324:	4770      	bx	lr
 8005326:	bf00      	nop
 8005328:	40012c00 	.word	0x40012c00
 800532c:	40000400 	.word	0x40000400
 8005330:	40000800 	.word	0x40000800
 8005334:	40013400 	.word	0x40013400
 8005338:	40014000 	.word	0x40014000
 800533c:	40014400 	.word	0x40014400
 8005340:	40014800 	.word	0x40014800

08005344 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005344:	b480      	push	{r7}
 8005346:	b087      	sub	sp, #28
 8005348:	af00      	add	r7, sp, #0
 800534a:	60f8      	str	r0, [r7, #12]
 800534c:	60b9      	str	r1, [r7, #8]
 800534e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	6a1b      	ldr	r3, [r3, #32]
 8005354:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	6a1b      	ldr	r3, [r3, #32]
 800535a:	f023 0201 	bic.w	r2, r3, #1
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	699b      	ldr	r3, [r3, #24]
 8005366:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005368:	693b      	ldr	r3, [r7, #16]
 800536a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800536e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	011b      	lsls	r3, r3, #4
 8005374:	693a      	ldr	r2, [r7, #16]
 8005376:	4313      	orrs	r3, r2
 8005378:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800537a:	697b      	ldr	r3, [r7, #20]
 800537c:	f023 030a 	bic.w	r3, r3, #10
 8005380:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005382:	697a      	ldr	r2, [r7, #20]
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	4313      	orrs	r3, r2
 8005388:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	693a      	ldr	r2, [r7, #16]
 800538e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	697a      	ldr	r2, [r7, #20]
 8005394:	621a      	str	r2, [r3, #32]
}
 8005396:	bf00      	nop
 8005398:	371c      	adds	r7, #28
 800539a:	46bd      	mov	sp, r7
 800539c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a0:	4770      	bx	lr

080053a2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80053a2:	b480      	push	{r7}
 80053a4:	b087      	sub	sp, #28
 80053a6:	af00      	add	r7, sp, #0
 80053a8:	60f8      	str	r0, [r7, #12]
 80053aa:	60b9      	str	r1, [r7, #8]
 80053ac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	6a1b      	ldr	r3, [r3, #32]
 80053b2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	6a1b      	ldr	r3, [r3, #32]
 80053b8:	f023 0210 	bic.w	r2, r3, #16
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	699b      	ldr	r3, [r3, #24]
 80053c4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80053c6:	693b      	ldr	r3, [r7, #16]
 80053c8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80053cc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	031b      	lsls	r3, r3, #12
 80053d2:	693a      	ldr	r2, [r7, #16]
 80053d4:	4313      	orrs	r3, r2
 80053d6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80053d8:	697b      	ldr	r3, [r7, #20]
 80053da:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80053de:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	011b      	lsls	r3, r3, #4
 80053e4:	697a      	ldr	r2, [r7, #20]
 80053e6:	4313      	orrs	r3, r2
 80053e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	693a      	ldr	r2, [r7, #16]
 80053ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	697a      	ldr	r2, [r7, #20]
 80053f4:	621a      	str	r2, [r3, #32]
}
 80053f6:	bf00      	nop
 80053f8:	371c      	adds	r7, #28
 80053fa:	46bd      	mov	sp, r7
 80053fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005400:	4770      	bx	lr

08005402 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005402:	b480      	push	{r7}
 8005404:	b085      	sub	sp, #20
 8005406:	af00      	add	r7, sp, #0
 8005408:	6078      	str	r0, [r7, #4]
 800540a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	689b      	ldr	r3, [r3, #8]
 8005410:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8005418:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800541c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800541e:	683a      	ldr	r2, [r7, #0]
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	4313      	orrs	r3, r2
 8005424:	f043 0307 	orr.w	r3, r3, #7
 8005428:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	68fa      	ldr	r2, [r7, #12]
 800542e:	609a      	str	r2, [r3, #8]
}
 8005430:	bf00      	nop
 8005432:	3714      	adds	r7, #20
 8005434:	46bd      	mov	sp, r7
 8005436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543a:	4770      	bx	lr

0800543c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800543c:	b480      	push	{r7}
 800543e:	b087      	sub	sp, #28
 8005440:	af00      	add	r7, sp, #0
 8005442:	60f8      	str	r0, [r7, #12]
 8005444:	60b9      	str	r1, [r7, #8]
 8005446:	607a      	str	r2, [r7, #4]
 8005448:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	689b      	ldr	r3, [r3, #8]
 800544e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005450:	697b      	ldr	r3, [r7, #20]
 8005452:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005456:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	021a      	lsls	r2, r3, #8
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	431a      	orrs	r2, r3
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	4313      	orrs	r3, r2
 8005464:	697a      	ldr	r2, [r7, #20]
 8005466:	4313      	orrs	r3, r2
 8005468:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	697a      	ldr	r2, [r7, #20]
 800546e:	609a      	str	r2, [r3, #8]
}
 8005470:	bf00      	nop
 8005472:	371c      	adds	r7, #28
 8005474:	46bd      	mov	sp, r7
 8005476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547a:	4770      	bx	lr

0800547c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800547c:	b480      	push	{r7}
 800547e:	b085      	sub	sp, #20
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
 8005484:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800548c:	2b01      	cmp	r3, #1
 800548e:	d101      	bne.n	8005494 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005490:	2302      	movs	r3, #2
 8005492:	e065      	b.n	8005560 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2201      	movs	r2, #1
 8005498:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2202      	movs	r2, #2
 80054a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	685b      	ldr	r3, [r3, #4]
 80054aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	689b      	ldr	r3, [r3, #8]
 80054b2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4a2c      	ldr	r2, [pc, #176]	@ (800556c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d004      	beq.n	80054c8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4a2b      	ldr	r2, [pc, #172]	@ (8005570 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d108      	bne.n	80054da <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80054ce:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	685b      	ldr	r3, [r3, #4]
 80054d4:	68fa      	ldr	r2, [r7, #12]
 80054d6:	4313      	orrs	r3, r2
 80054d8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80054e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054e4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	68fa      	ldr	r2, [r7, #12]
 80054ec:	4313      	orrs	r3, r2
 80054ee:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	68fa      	ldr	r2, [r7, #12]
 80054f6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4a1b      	ldr	r2, [pc, #108]	@ (800556c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d018      	beq.n	8005534 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800550a:	d013      	beq.n	8005534 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4a18      	ldr	r2, [pc, #96]	@ (8005574 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d00e      	beq.n	8005534 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4a17      	ldr	r2, [pc, #92]	@ (8005578 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d009      	beq.n	8005534 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4a12      	ldr	r2, [pc, #72]	@ (8005570 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d004      	beq.n	8005534 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4a13      	ldr	r2, [pc, #76]	@ (800557c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d10c      	bne.n	800554e <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005534:	68bb      	ldr	r3, [r7, #8]
 8005536:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800553a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	689b      	ldr	r3, [r3, #8]
 8005540:	68ba      	ldr	r2, [r7, #8]
 8005542:	4313      	orrs	r3, r2
 8005544:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	68ba      	ldr	r2, [r7, #8]
 800554c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2201      	movs	r2, #1
 8005552:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2200      	movs	r2, #0
 800555a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800555e:	2300      	movs	r3, #0
}
 8005560:	4618      	mov	r0, r3
 8005562:	3714      	adds	r7, #20
 8005564:	46bd      	mov	sp, r7
 8005566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556a:	4770      	bx	lr
 800556c:	40012c00 	.word	0x40012c00
 8005570:	40013400 	.word	0x40013400
 8005574:	40000400 	.word	0x40000400
 8005578:	40000800 	.word	0x40000800
 800557c:	40014000 	.word	0x40014000

08005580 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005580:	b480      	push	{r7}
 8005582:	b083      	sub	sp, #12
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005588:	bf00      	nop
 800558a:	370c      	adds	r7, #12
 800558c:	46bd      	mov	sp, r7
 800558e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005592:	4770      	bx	lr

08005594 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005594:	b480      	push	{r7}
 8005596:	b083      	sub	sp, #12
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800559c:	bf00      	nop
 800559e:	370c      	adds	r7, #12
 80055a0:	46bd      	mov	sp, r7
 80055a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a6:	4770      	bx	lr

080055a8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80055a8:	b480      	push	{r7}
 80055aa:	b083      	sub	sp, #12
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80055b0:	bf00      	nop
 80055b2:	370c      	adds	r7, #12
 80055b4:	46bd      	mov	sp, r7
 80055b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ba:	4770      	bx	lr

080055bc <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80055bc:	b480      	push	{r7}
 80055be:	b083      	sub	sp, #12
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80055c4:	bf00      	nop
 80055c6:	370c      	adds	r7, #12
 80055c8:	46bd      	mov	sp, r7
 80055ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ce:	4770      	bx	lr

080055d0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80055d0:	b480      	push	{r7}
 80055d2:	b083      	sub	sp, #12
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80055d8:	bf00      	nop
 80055da:	370c      	adds	r7, #12
 80055dc:	46bd      	mov	sp, r7
 80055de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e2:	4770      	bx	lr

080055e4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80055e4:	b480      	push	{r7}
 80055e6:	b083      	sub	sp, #12
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80055ec:	bf00      	nop
 80055ee:	370c      	adds	r7, #12
 80055f0:	46bd      	mov	sp, r7
 80055f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f6:	4770      	bx	lr

080055f8 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80055f8:	b480      	push	{r7}
 80055fa:	b083      	sub	sp, #12
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8005600:	bf00      	nop
 8005602:	370c      	adds	r7, #12
 8005604:	46bd      	mov	sp, r7
 8005606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560a:	4770      	bx	lr

0800560c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b082      	sub	sp, #8
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d101      	bne.n	800561e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800561a:	2301      	movs	r3, #1
 800561c:	e042      	b.n	80056a4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005624:	2b00      	cmp	r3, #0
 8005626:	d106      	bne.n	8005636 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2200      	movs	r2, #0
 800562c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005630:	6878      	ldr	r0, [r7, #4]
 8005632:	f7fb fcdb 	bl	8000fec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2224      	movs	r2, #36	@ 0x24
 800563a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	681a      	ldr	r2, [r3, #0]
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f022 0201 	bic.w	r2, r2, #1
 800564c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005652:	2b00      	cmp	r3, #0
 8005654:	d002      	beq.n	800565c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005656:	6878      	ldr	r0, [r7, #4]
 8005658:	f001 f802 	bl	8006660 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800565c:	6878      	ldr	r0, [r7, #4]
 800565e:	f000 fd33 	bl	80060c8 <UART_SetConfig>
 8005662:	4603      	mov	r3, r0
 8005664:	2b01      	cmp	r3, #1
 8005666:	d101      	bne.n	800566c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005668:	2301      	movs	r3, #1
 800566a:	e01b      	b.n	80056a4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	685a      	ldr	r2, [r3, #4]
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800567a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	689a      	ldr	r2, [r3, #8]
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800568a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	681a      	ldr	r2, [r3, #0]
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f042 0201 	orr.w	r2, r2, #1
 800569a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800569c:	6878      	ldr	r0, [r7, #4]
 800569e:	f001 f881 	bl	80067a4 <UART_CheckIdleState>
 80056a2:	4603      	mov	r3, r0
}
 80056a4:	4618      	mov	r0, r3
 80056a6:	3708      	adds	r7, #8
 80056a8:	46bd      	mov	sp, r7
 80056aa:	bd80      	pop	{r7, pc}

080056ac <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80056ac:	b480      	push	{r7}
 80056ae:	b091      	sub	sp, #68	@ 0x44
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	60f8      	str	r0, [r7, #12]
 80056b4:	60b9      	str	r1, [r7, #8]
 80056b6:	4613      	mov	r3, r2
 80056b8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056c0:	2b20      	cmp	r3, #32
 80056c2:	d178      	bne.n	80057b6 <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d002      	beq.n	80056d0 <HAL_UART_Transmit_IT+0x24>
 80056ca:	88fb      	ldrh	r3, [r7, #6]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d101      	bne.n	80056d4 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 80056d0:	2301      	movs	r3, #1
 80056d2:	e071      	b.n	80057b8 <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	68ba      	ldr	r2, [r7, #8]
 80056d8:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	88fa      	ldrh	r2, [r7, #6]
 80056de:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	88fa      	ldrh	r2, [r7, #6]
 80056e6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    huart->TxISR       = NULL;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	2200      	movs	r2, #0
 80056ee:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	2200      	movs	r2, #0
 80056f4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	2221      	movs	r2, #33	@ 0x21
 80056fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005704:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005708:	d12a      	bne.n	8005760 <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	689b      	ldr	r3, [r3, #8]
 800570e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005712:	d107      	bne.n	8005724 <HAL_UART_Transmit_IT+0x78>
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	691b      	ldr	r3, [r3, #16]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d103      	bne.n	8005724 <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	4a29      	ldr	r2, [pc, #164]	@ (80057c4 <HAL_UART_Transmit_IT+0x118>)
 8005720:	679a      	str	r2, [r3, #120]	@ 0x78
 8005722:	e002      	b.n	800572a <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	4a28      	ldr	r2, [pc, #160]	@ (80057c8 <HAL_UART_Transmit_IT+0x11c>)
 8005728:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	3308      	adds	r3, #8
 8005730:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005732:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005734:	e853 3f00 	ldrex	r3, [r3]
 8005738:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800573a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800573c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005740:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	3308      	adds	r3, #8
 8005748:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800574a:	637a      	str	r2, [r7, #52]	@ 0x34
 800574c:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800574e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005750:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005752:	e841 2300 	strex	r3, r2, [r1]
 8005756:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8005758:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800575a:	2b00      	cmp	r3, #0
 800575c:	d1e5      	bne.n	800572a <HAL_UART_Transmit_IT+0x7e>
 800575e:	e028      	b.n	80057b2 <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	689b      	ldr	r3, [r3, #8]
 8005764:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005768:	d107      	bne.n	800577a <HAL_UART_Transmit_IT+0xce>
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	691b      	ldr	r3, [r3, #16]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d103      	bne.n	800577a <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	4a15      	ldr	r2, [pc, #84]	@ (80057cc <HAL_UART_Transmit_IT+0x120>)
 8005776:	679a      	str	r2, [r3, #120]	@ 0x78
 8005778:	e002      	b.n	8005780 <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	4a14      	ldr	r2, [pc, #80]	@ (80057d0 <HAL_UART_Transmit_IT+0x124>)
 800577e:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005786:	697b      	ldr	r3, [r7, #20]
 8005788:	e853 3f00 	ldrex	r3, [r3]
 800578c:	613b      	str	r3, [r7, #16]
   return(result);
 800578e:	693b      	ldr	r3, [r7, #16]
 8005790:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005794:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	461a      	mov	r2, r3
 800579c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800579e:	623b      	str	r3, [r7, #32]
 80057a0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057a2:	69f9      	ldr	r1, [r7, #28]
 80057a4:	6a3a      	ldr	r2, [r7, #32]
 80057a6:	e841 2300 	strex	r3, r2, [r1]
 80057aa:	61bb      	str	r3, [r7, #24]
   return(result);
 80057ac:	69bb      	ldr	r3, [r7, #24]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d1e6      	bne.n	8005780 <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 80057b2:	2300      	movs	r3, #0
 80057b4:	e000      	b.n	80057b8 <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80057b6:	2302      	movs	r3, #2
  }
}
 80057b8:	4618      	mov	r0, r3
 80057ba:	3744      	adds	r7, #68	@ 0x44
 80057bc:	46bd      	mov	sp, r7
 80057be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c2:	4770      	bx	lr
 80057c4:	080070d7 	.word	0x080070d7
 80057c8:	08006ff7 	.word	0x08006ff7
 80057cc:	08006f35 	.word	0x08006f35
 80057d0:	08006e7d 	.word	0x08006e7d

080057d4 <HAL_UART_DMAResume>:
  * @brief Resume the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAResume(UART_HandleTypeDef *huart)
{
 80057d4:	b480      	push	{r7}
 80057d6:	b09b      	sub	sp, #108	@ 0x6c
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057e2:	2b21      	cmp	r3, #33	@ 0x21
 80057e4:	d119      	bne.n	800581a <HAL_UART_DMAResume+0x46>
  {
    /* Enable the UART DMA Tx request */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	3308      	adds	r3, #8
 80057ec:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80057f0:	e853 3f00 	ldrex	r3, [r3]
 80057f4:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80057f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80057f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80057fc:	667b      	str	r3, [r7, #100]	@ 0x64
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	3308      	adds	r3, #8
 8005804:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005806:	657a      	str	r2, [r7, #84]	@ 0x54
 8005808:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800580a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800580c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800580e:	e841 2300 	strex	r3, r2, [r1]
 8005812:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8005814:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005816:	2b00      	cmp	r3, #0
 8005818:	d1e5      	bne.n	80057e6 <HAL_UART_DMAResume+0x12>
  }
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005820:	2b22      	cmp	r3, #34	@ 0x22
 8005822:	d154      	bne.n	80058ce <HAL_UART_DMAResume+0xfa>
  {
    /* Clear the Overrun flag before resuming the Rx transfer */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	2208      	movs	r2, #8
 800582a:	621a      	str	r2, [r3, #32]

    /* Re-enable PE and ERR (Frame error, noise error, overrun error) interrupts */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	691b      	ldr	r3, [r3, #16]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d018      	beq.n	8005866 <HAL_UART_DMAResume+0x92>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800583a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800583c:	e853 3f00 	ldrex	r3, [r3]
 8005840:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005842:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005844:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005848:	663b      	str	r3, [r7, #96]	@ 0x60
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	461a      	mov	r2, r3
 8005850:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005852:	643b      	str	r3, [r7, #64]	@ 0x40
 8005854:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005856:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005858:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800585a:	e841 2300 	strex	r3, r2, [r1]
 800585e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005860:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005862:	2b00      	cmp	r3, #0
 8005864:	d1e6      	bne.n	8005834 <HAL_UART_DMAResume+0x60>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	3308      	adds	r3, #8
 800586c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800586e:	6a3b      	ldr	r3, [r7, #32]
 8005870:	e853 3f00 	ldrex	r3, [r3]
 8005874:	61fb      	str	r3, [r7, #28]
   return(result);
 8005876:	69fb      	ldr	r3, [r7, #28]
 8005878:	f043 0301 	orr.w	r3, r3, #1
 800587c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	3308      	adds	r3, #8
 8005884:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005886:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005888:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800588a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800588c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800588e:	e841 2300 	strex	r3, r2, [r1]
 8005892:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005896:	2b00      	cmp	r3, #0
 8005898:	d1e5      	bne.n	8005866 <HAL_UART_DMAResume+0x92>

    /* Enable the UART DMA Rx request */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	3308      	adds	r3, #8
 80058a0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	e853 3f00 	ldrex	r3, [r3]
 80058a8:	60bb      	str	r3, [r7, #8]
   return(result);
 80058aa:	68bb      	ldr	r3, [r7, #8]
 80058ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80058b0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	3308      	adds	r3, #8
 80058b8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80058ba:	61ba      	str	r2, [r7, #24]
 80058bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058be:	6979      	ldr	r1, [r7, #20]
 80058c0:	69ba      	ldr	r2, [r7, #24]
 80058c2:	e841 2300 	strex	r3, r2, [r1]
 80058c6:	613b      	str	r3, [r7, #16]
   return(result);
 80058c8:	693b      	ldr	r3, [r7, #16]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d1e5      	bne.n	800589a <HAL_UART_DMAResume+0xc6>
  }

  return HAL_OK;
 80058ce:	2300      	movs	r3, #0
}
 80058d0:	4618      	mov	r0, r3
 80058d2:	376c      	adds	r7, #108	@ 0x6c
 80058d4:	46bd      	mov	sp, r7
 80058d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058da:	4770      	bx	lr

080058dc <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	b090      	sub	sp, #64	@ 0x40
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80058f2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	689b      	ldr	r3, [r3, #8]
 80058fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058fe:	2b80      	cmp	r3, #128	@ 0x80
 8005900:	d139      	bne.n	8005976 <HAL_UART_DMAStop+0x9a>
 8005902:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005904:	2b21      	cmp	r3, #33	@ 0x21
 8005906:	d136      	bne.n	8005976 <HAL_UART_DMAStop+0x9a>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	3308      	adds	r3, #8
 800590e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005910:	6a3b      	ldr	r3, [r7, #32]
 8005912:	e853 3f00 	ldrex	r3, [r3]
 8005916:	61fb      	str	r3, [r7, #28]
   return(result);
 8005918:	69fb      	ldr	r3, [r7, #28]
 800591a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800591e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	3308      	adds	r3, #8
 8005926:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005928:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800592a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800592c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800592e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005930:	e841 2300 	strex	r3, r2, [r1]
 8005934:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005938:	2b00      	cmp	r3, #0
 800593a:	d1e5      	bne.n	8005908 <HAL_UART_DMAStop+0x2c>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005940:	2b00      	cmp	r3, #0
 8005942:	d015      	beq.n	8005970 <HAL_UART_DMAStop+0x94>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005948:	4618      	mov	r0, r3
 800594a:	f7fc f866 	bl	8001a1a <HAL_DMA_Abort>
 800594e:	4603      	mov	r3, r0
 8005950:	2b00      	cmp	r3, #0
 8005952:	d00d      	beq.n	8005970 <HAL_UART_DMAStop+0x94>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005958:	4618      	mov	r0, r3
 800595a:	f7fc f9cd 	bl	8001cf8 <HAL_DMA_GetError>
 800595e:	4603      	mov	r3, r0
 8005960:	2b20      	cmp	r3, #32
 8005962:	d105      	bne.n	8005970 <HAL_UART_DMAStop+0x94>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2210      	movs	r2, #16
 8005968:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 800596c:	2303      	movs	r3, #3
 800596e:	e047      	b.n	8005a00 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndTxTransfer(huart);
 8005970:	6878      	ldr	r0, [r7, #4]
 8005972:	f001 f8d5 	bl	8006b20 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	689b      	ldr	r3, [r3, #8]
 800597c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005980:	2b40      	cmp	r3, #64	@ 0x40
 8005982:	d13c      	bne.n	80059fe <HAL_UART_DMAStop+0x122>
 8005984:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005986:	2b22      	cmp	r3, #34	@ 0x22
 8005988:	d139      	bne.n	80059fe <HAL_UART_DMAStop+0x122>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	3308      	adds	r3, #8
 8005990:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	e853 3f00 	ldrex	r3, [r3]
 8005998:	60bb      	str	r3, [r7, #8]
   return(result);
 800599a:	68bb      	ldr	r3, [r7, #8]
 800599c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80059a0:	633b      	str	r3, [r7, #48]	@ 0x30
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	3308      	adds	r3, #8
 80059a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80059aa:	61ba      	str	r2, [r7, #24]
 80059ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059ae:	6979      	ldr	r1, [r7, #20]
 80059b0:	69ba      	ldr	r2, [r7, #24]
 80059b2:	e841 2300 	strex	r3, r2, [r1]
 80059b6:	613b      	str	r3, [r7, #16]
   return(result);
 80059b8:	693b      	ldr	r3, [r7, #16]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d1e5      	bne.n	800598a <HAL_UART_DMAStop+0xae>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d017      	beq.n	80059f8 <HAL_UART_DMAStop+0x11c>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80059ce:	4618      	mov	r0, r3
 80059d0:	f7fc f823 	bl	8001a1a <HAL_DMA_Abort>
 80059d4:	4603      	mov	r3, r0
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d00e      	beq.n	80059f8 <HAL_UART_DMAStop+0x11c>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80059e0:	4618      	mov	r0, r3
 80059e2:	f7fc f989 	bl	8001cf8 <HAL_DMA_GetError>
 80059e6:	4603      	mov	r3, r0
 80059e8:	2b20      	cmp	r3, #32
 80059ea:	d105      	bne.n	80059f8 <HAL_UART_DMAStop+0x11c>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2210      	movs	r2, #16
 80059f0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 80059f4:	2303      	movs	r3, #3
 80059f6:	e003      	b.n	8005a00 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndRxTransfer(huart);
 80059f8:	6878      	ldr	r0, [r7, #4]
 80059fa:	f001 f8d2 	bl	8006ba2 <UART_EndRxTransfer>
  }

  return HAL_OK;
 80059fe:	2300      	movs	r3, #0
}
 8005a00:	4618      	mov	r0, r3
 8005a02:	3740      	adds	r7, #64	@ 0x40
 8005a04:	46bd      	mov	sp, r7
 8005a06:	bd80      	pop	{r7, pc}

08005a08 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b0ba      	sub	sp, #232	@ 0xe8
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	69db      	ldr	r3, [r3, #28]
 8005a16:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	689b      	ldr	r3, [r3, #8]
 8005a2a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005a2e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8005a32:	f640 030f 	movw	r3, #2063	@ 0x80f
 8005a36:	4013      	ands	r3, r2
 8005a38:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8005a3c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d11b      	bne.n	8005a7c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005a44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a48:	f003 0320 	and.w	r3, r3, #32
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d015      	beq.n	8005a7c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005a50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a54:	f003 0320 	and.w	r3, r3, #32
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d105      	bne.n	8005a68 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005a5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005a60:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d009      	beq.n	8005a7c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	f000 8300 	beq.w	8006072 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a76:	6878      	ldr	r0, [r7, #4]
 8005a78:	4798      	blx	r3
      }
      return;
 8005a7a:	e2fa      	b.n	8006072 <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005a7c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	f000 8123 	beq.w	8005ccc <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005a86:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8005a8a:	4b8d      	ldr	r3, [pc, #564]	@ (8005cc0 <HAL_UART_IRQHandler+0x2b8>)
 8005a8c:	4013      	ands	r3, r2
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d106      	bne.n	8005aa0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005a92:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8005a96:	4b8b      	ldr	r3, [pc, #556]	@ (8005cc4 <HAL_UART_IRQHandler+0x2bc>)
 8005a98:	4013      	ands	r3, r2
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	f000 8116 	beq.w	8005ccc <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005aa0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005aa4:	f003 0301 	and.w	r3, r3, #1
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d011      	beq.n	8005ad0 <HAL_UART_IRQHandler+0xc8>
 8005aac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ab0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d00b      	beq.n	8005ad0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	2201      	movs	r2, #1
 8005abe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ac6:	f043 0201 	orr.w	r2, r3, #1
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005ad0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ad4:	f003 0302 	and.w	r3, r3, #2
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d011      	beq.n	8005b00 <HAL_UART_IRQHandler+0xf8>
 8005adc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005ae0:	f003 0301 	and.w	r3, r3, #1
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d00b      	beq.n	8005b00 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	2202      	movs	r2, #2
 8005aee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005af6:	f043 0204 	orr.w	r2, r3, #4
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005b00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b04:	f003 0304 	and.w	r3, r3, #4
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d011      	beq.n	8005b30 <HAL_UART_IRQHandler+0x128>
 8005b0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005b10:	f003 0301 	and.w	r3, r3, #1
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d00b      	beq.n	8005b30 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	2204      	movs	r2, #4
 8005b1e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b26:	f043 0202 	orr.w	r2, r3, #2
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005b30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b34:	f003 0308 	and.w	r3, r3, #8
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d017      	beq.n	8005b6c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005b3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b40:	f003 0320 	and.w	r3, r3, #32
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d105      	bne.n	8005b54 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005b48:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8005b4c:	4b5c      	ldr	r3, [pc, #368]	@ (8005cc0 <HAL_UART_IRQHandler+0x2b8>)
 8005b4e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d00b      	beq.n	8005b6c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	2208      	movs	r2, #8
 8005b5a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b62:	f043 0208 	orr.w	r2, r3, #8
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005b6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b70:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d012      	beq.n	8005b9e <HAL_UART_IRQHandler+0x196>
 8005b78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b7c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d00c      	beq.n	8005b9e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005b8c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b94:	f043 0220 	orr.w	r2, r3, #32
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	f000 8266 	beq.w	8006076 <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005baa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005bae:	f003 0320 	and.w	r3, r3, #32
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d013      	beq.n	8005bde <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005bb6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005bba:	f003 0320 	and.w	r3, r3, #32
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d105      	bne.n	8005bce <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005bc2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005bc6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d007      	beq.n	8005bde <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d003      	beq.n	8005bde <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005bda:	6878      	ldr	r0, [r7, #4]
 8005bdc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005be4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	689b      	ldr	r3, [r3, #8]
 8005bee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bf2:	2b40      	cmp	r3, #64	@ 0x40
 8005bf4:	d005      	beq.n	8005c02 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005bf6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005bfa:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d054      	beq.n	8005cac <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005c02:	6878      	ldr	r0, [r7, #4]
 8005c04:	f000 ffcd 	bl	8006ba2 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	689b      	ldr	r3, [r3, #8]
 8005c0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c12:	2b40      	cmp	r3, #64	@ 0x40
 8005c14:	d146      	bne.n	8005ca4 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	3308      	adds	r3, #8
 8005c1c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c20:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005c24:	e853 3f00 	ldrex	r3, [r3]
 8005c28:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005c2c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005c30:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005c34:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	3308      	adds	r3, #8
 8005c3e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005c42:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005c46:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c4a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005c4e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005c52:	e841 2300 	strex	r3, r2, [r1]
 8005c56:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005c5a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d1d9      	bne.n	8005c16 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d017      	beq.n	8005c9c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005c72:	4a15      	ldr	r2, [pc, #84]	@ (8005cc8 <HAL_UART_IRQHandler+0x2c0>)
 8005c74:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	f7fb ff25 	bl	8001acc <HAL_DMA_Abort_IT>
 8005c82:	4603      	mov	r3, r0
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d019      	beq.n	8005cbc <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005c8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c90:	687a      	ldr	r2, [r7, #4]
 8005c92:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8005c96:	4610      	mov	r0, r2
 8005c98:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c9a:	e00f      	b.n	8005cbc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005c9c:	6878      	ldr	r0, [r7, #4]
 8005c9e:	f000 fa09 	bl	80060b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ca2:	e00b      	b.n	8005cbc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005ca4:	6878      	ldr	r0, [r7, #4]
 8005ca6:	f000 fa05 	bl	80060b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005caa:	e007      	b.n	8005cbc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005cac:	6878      	ldr	r0, [r7, #4]
 8005cae:	f000 fa01 	bl	80060b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8005cba:	e1dc      	b.n	8006076 <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cbc:	bf00      	nop
    return;
 8005cbe:	e1da      	b.n	8006076 <HAL_UART_IRQHandler+0x66e>
 8005cc0:	10000001 	.word	0x10000001
 8005cc4:	04000120 	.word	0x04000120
 8005cc8:	08006e59 	.word	0x08006e59

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005cd0:	2b01      	cmp	r3, #1
 8005cd2:	f040 8170 	bne.w	8005fb6 <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005cd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005cda:	f003 0310 	and.w	r3, r3, #16
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	f000 8169 	beq.w	8005fb6 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005ce4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ce8:	f003 0310 	and.w	r3, r3, #16
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	f000 8162 	beq.w	8005fb6 <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	2210      	movs	r2, #16
 8005cf8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	689b      	ldr	r3, [r3, #8]
 8005d00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d04:	2b40      	cmp	r3, #64	@ 0x40
 8005d06:	f040 80d8 	bne.w	8005eba <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	685b      	ldr	r3, [r3, #4]
 8005d14:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005d18:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	f000 80af 	beq.w	8005e80 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005d28:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005d2c:	429a      	cmp	r2, r3
 8005d2e:	f080 80a7 	bcs.w	8005e80 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005d38:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f003 0320 	and.w	r3, r3, #32
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	f040 8087 	bne.w	8005e5e <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d58:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005d5c:	e853 3f00 	ldrex	r3, [r3]
 8005d60:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005d64:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005d68:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005d6c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	461a      	mov	r2, r3
 8005d76:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005d7a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005d7e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d82:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005d86:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005d8a:	e841 2300 	strex	r3, r2, [r1]
 8005d8e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005d92:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d1da      	bne.n	8005d50 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	3308      	adds	r3, #8
 8005da0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005da2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005da4:	e853 3f00 	ldrex	r3, [r3]
 8005da8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005daa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005dac:	f023 0301 	bic.w	r3, r3, #1
 8005db0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	3308      	adds	r3, #8
 8005dba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005dbe:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005dc2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dc4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005dc6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005dca:	e841 2300 	strex	r3, r2, [r1]
 8005dce:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005dd0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d1e1      	bne.n	8005d9a <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	3308      	adds	r3, #8
 8005ddc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dde:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005de0:	e853 3f00 	ldrex	r3, [r3]
 8005de4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005de6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005de8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005dec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	3308      	adds	r3, #8
 8005df6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005dfa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005dfc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dfe:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005e00:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005e02:	e841 2300 	strex	r3, r2, [r1]
 8005e06:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005e08:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d1e3      	bne.n	8005dd6 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2220      	movs	r2, #32
 8005e12:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2200      	movs	r2, #0
 8005e1a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e22:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005e24:	e853 3f00 	ldrex	r3, [r3]
 8005e28:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005e2a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005e2c:	f023 0310 	bic.w	r3, r3, #16
 8005e30:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	461a      	mov	r2, r3
 8005e3a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005e3e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005e40:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e42:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005e44:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005e46:	e841 2300 	strex	r3, r2, [r1]
 8005e4a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005e4c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d1e4      	bne.n	8005e1c <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005e58:	4618      	mov	r0, r3
 8005e5a:	f7fb fdde 	bl	8001a1a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2202      	movs	r2, #2
 8005e62:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005e70:	b29b      	uxth	r3, r3
 8005e72:	1ad3      	subs	r3, r2, r3
 8005e74:	b29b      	uxth	r3, r3
 8005e76:	4619      	mov	r1, r3
 8005e78:	6878      	ldr	r0, [r7, #4]
 8005e7a:	f7fa fed1 	bl	8000c20 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8005e7e:	e0fc      	b.n	800607a <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005e86:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005e8a:	429a      	cmp	r2, r3
 8005e8c:	f040 80f5 	bne.w	800607a <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f003 0320 	and.w	r3, r3, #32
 8005e9e:	2b20      	cmp	r3, #32
 8005ea0:	f040 80eb 	bne.w	800607a <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2202      	movs	r2, #2
 8005ea8:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005eb0:	4619      	mov	r1, r3
 8005eb2:	6878      	ldr	r0, [r7, #4]
 8005eb4:	f7fa feb4 	bl	8000c20 <HAL_UARTEx_RxEventCallback>
      return;
 8005eb8:	e0df      	b.n	800607a <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005ec6:	b29b      	uxth	r3, r3
 8005ec8:	1ad3      	subs	r3, r2, r3
 8005eca:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005ed4:	b29b      	uxth	r3, r3
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	f000 80d1 	beq.w	800607e <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8005edc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	f000 80cc 	beq.w	800607e <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005eee:	e853 3f00 	ldrex	r3, [r3]
 8005ef2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005ef4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ef6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005efa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	461a      	mov	r2, r3
 8005f04:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005f08:	647b      	str	r3, [r7, #68]	@ 0x44
 8005f0a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f0c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005f0e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005f10:	e841 2300 	strex	r3, r2, [r1]
 8005f14:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005f16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d1e4      	bne.n	8005ee6 <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	3308      	adds	r3, #8
 8005f22:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f26:	e853 3f00 	ldrex	r3, [r3]
 8005f2a:	623b      	str	r3, [r7, #32]
   return(result);
 8005f2c:	6a3b      	ldr	r3, [r7, #32]
 8005f2e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005f32:	f023 0301 	bic.w	r3, r3, #1
 8005f36:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	3308      	adds	r3, #8
 8005f40:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005f44:	633a      	str	r2, [r7, #48]	@ 0x30
 8005f46:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f48:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005f4a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f4c:	e841 2300 	strex	r3, r2, [r1]
 8005f50:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005f52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d1e1      	bne.n	8005f1c <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2220      	movs	r2, #32
 8005f5c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2200      	movs	r2, #0
 8005f64:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2200      	movs	r2, #0
 8005f6a:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f72:	693b      	ldr	r3, [r7, #16]
 8005f74:	e853 3f00 	ldrex	r3, [r3]
 8005f78:	60fb      	str	r3, [r7, #12]
   return(result);
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	f023 0310 	bic.w	r3, r3, #16
 8005f80:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	461a      	mov	r2, r3
 8005f8a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005f8e:	61fb      	str	r3, [r7, #28]
 8005f90:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f92:	69b9      	ldr	r1, [r7, #24]
 8005f94:	69fa      	ldr	r2, [r7, #28]
 8005f96:	e841 2300 	strex	r3, r2, [r1]
 8005f9a:	617b      	str	r3, [r7, #20]
   return(result);
 8005f9c:	697b      	ldr	r3, [r7, #20]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d1e4      	bne.n	8005f6c <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2202      	movs	r2, #2
 8005fa6:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005fa8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005fac:	4619      	mov	r1, r3
 8005fae:	6878      	ldr	r0, [r7, #4]
 8005fb0:	f7fa fe36 	bl	8000c20 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005fb4:	e063      	b.n	800607e <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005fb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005fba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d00e      	beq.n	8005fe0 <HAL_UART_IRQHandler+0x5d8>
 8005fc2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005fc6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d008      	beq.n	8005fe0 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8005fd6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005fd8:	6878      	ldr	r0, [r7, #4]
 8005fda:	f001 f91c 	bl	8007216 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005fde:	e051      	b.n	8006084 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005fe0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005fe4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d014      	beq.n	8006016 <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005fec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ff0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d105      	bne.n	8006004 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005ff8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005ffc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006000:	2b00      	cmp	r3, #0
 8006002:	d008      	beq.n	8006016 <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006008:	2b00      	cmp	r3, #0
 800600a:	d03a      	beq.n	8006082 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006010:	6878      	ldr	r0, [r7, #4]
 8006012:	4798      	blx	r3
    }
    return;
 8006014:	e035      	b.n	8006082 <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006016:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800601a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800601e:	2b00      	cmp	r3, #0
 8006020:	d009      	beq.n	8006036 <HAL_UART_IRQHandler+0x62e>
 8006022:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006026:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800602a:	2b00      	cmp	r3, #0
 800602c:	d003      	beq.n	8006036 <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 800602e:	6878      	ldr	r0, [r7, #4]
 8006030:	f001 f8c6 	bl	80071c0 <UART_EndTransmit_IT>
    return;
 8006034:	e026      	b.n	8006084 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006036:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800603a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800603e:	2b00      	cmp	r3, #0
 8006040:	d009      	beq.n	8006056 <HAL_UART_IRQHandler+0x64e>
 8006042:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006046:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800604a:	2b00      	cmp	r3, #0
 800604c:	d003      	beq.n	8006056 <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800604e:	6878      	ldr	r0, [r7, #4]
 8006050:	f001 f8f5 	bl	800723e <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006054:	e016      	b.n	8006084 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006056:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800605a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800605e:	2b00      	cmp	r3, #0
 8006060:	d010      	beq.n	8006084 <HAL_UART_IRQHandler+0x67c>
 8006062:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006066:	2b00      	cmp	r3, #0
 8006068:	da0c      	bge.n	8006084 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800606a:	6878      	ldr	r0, [r7, #4]
 800606c:	f001 f8dd 	bl	800722a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006070:	e008      	b.n	8006084 <HAL_UART_IRQHandler+0x67c>
      return;
 8006072:	bf00      	nop
 8006074:	e006      	b.n	8006084 <HAL_UART_IRQHandler+0x67c>
    return;
 8006076:	bf00      	nop
 8006078:	e004      	b.n	8006084 <HAL_UART_IRQHandler+0x67c>
      return;
 800607a:	bf00      	nop
 800607c:	e002      	b.n	8006084 <HAL_UART_IRQHandler+0x67c>
      return;
 800607e:	bf00      	nop
 8006080:	e000      	b.n	8006084 <HAL_UART_IRQHandler+0x67c>
    return;
 8006082:	bf00      	nop
  }
}
 8006084:	37e8      	adds	r7, #232	@ 0xe8
 8006086:	46bd      	mov	sp, r7
 8006088:	bd80      	pop	{r7, pc}
 800608a:	bf00      	nop

0800608c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800608c:	b480      	push	{r7}
 800608e:	b083      	sub	sp, #12
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8006094:	bf00      	nop
 8006096:	370c      	adds	r7, #12
 8006098:	46bd      	mov	sp, r7
 800609a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609e:	4770      	bx	lr

080060a0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80060a0:	b480      	push	{r7}
 80060a2:	b083      	sub	sp, #12
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80060a8:	bf00      	nop
 80060aa:	370c      	adds	r7, #12
 80060ac:	46bd      	mov	sp, r7
 80060ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b2:	4770      	bx	lr

080060b4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80060b4:	b480      	push	{r7}
 80060b6:	b083      	sub	sp, #12
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80060bc:	bf00      	nop
 80060be:	370c      	adds	r7, #12
 80060c0:	46bd      	mov	sp, r7
 80060c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c6:	4770      	bx	lr

080060c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80060c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80060cc:	b08c      	sub	sp, #48	@ 0x30
 80060ce:	af00      	add	r7, sp, #0
 80060d0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80060d2:	2300      	movs	r3, #0
 80060d4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80060d8:	697b      	ldr	r3, [r7, #20]
 80060da:	689a      	ldr	r2, [r3, #8]
 80060dc:	697b      	ldr	r3, [r7, #20]
 80060de:	691b      	ldr	r3, [r3, #16]
 80060e0:	431a      	orrs	r2, r3
 80060e2:	697b      	ldr	r3, [r7, #20]
 80060e4:	695b      	ldr	r3, [r3, #20]
 80060e6:	431a      	orrs	r2, r3
 80060e8:	697b      	ldr	r3, [r7, #20]
 80060ea:	69db      	ldr	r3, [r3, #28]
 80060ec:	4313      	orrs	r3, r2
 80060ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80060f0:	697b      	ldr	r3, [r7, #20]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	681a      	ldr	r2, [r3, #0]
 80060f6:	4bab      	ldr	r3, [pc, #684]	@ (80063a4 <UART_SetConfig+0x2dc>)
 80060f8:	4013      	ands	r3, r2
 80060fa:	697a      	ldr	r2, [r7, #20]
 80060fc:	6812      	ldr	r2, [r2, #0]
 80060fe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006100:	430b      	orrs	r3, r1
 8006102:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006104:	697b      	ldr	r3, [r7, #20]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	685b      	ldr	r3, [r3, #4]
 800610a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800610e:	697b      	ldr	r3, [r7, #20]
 8006110:	68da      	ldr	r2, [r3, #12]
 8006112:	697b      	ldr	r3, [r7, #20]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	430a      	orrs	r2, r1
 8006118:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800611a:	697b      	ldr	r3, [r7, #20]
 800611c:	699b      	ldr	r3, [r3, #24]
 800611e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006120:	697b      	ldr	r3, [r7, #20]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	4aa0      	ldr	r2, [pc, #640]	@ (80063a8 <UART_SetConfig+0x2e0>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d004      	beq.n	8006134 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800612a:	697b      	ldr	r3, [r7, #20]
 800612c:	6a1b      	ldr	r3, [r3, #32]
 800612e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006130:	4313      	orrs	r3, r2
 8006132:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006134:	697b      	ldr	r3, [r7, #20]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	689b      	ldr	r3, [r3, #8]
 800613a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800613e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8006142:	697a      	ldr	r2, [r7, #20]
 8006144:	6812      	ldr	r2, [r2, #0]
 8006146:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006148:	430b      	orrs	r3, r1
 800614a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800614c:	697b      	ldr	r3, [r7, #20]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006152:	f023 010f 	bic.w	r1, r3, #15
 8006156:	697b      	ldr	r3, [r7, #20]
 8006158:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800615a:	697b      	ldr	r3, [r7, #20]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	430a      	orrs	r2, r1
 8006160:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006162:	697b      	ldr	r3, [r7, #20]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	4a91      	ldr	r2, [pc, #580]	@ (80063ac <UART_SetConfig+0x2e4>)
 8006168:	4293      	cmp	r3, r2
 800616a:	d125      	bne.n	80061b8 <UART_SetConfig+0xf0>
 800616c:	4b90      	ldr	r3, [pc, #576]	@ (80063b0 <UART_SetConfig+0x2e8>)
 800616e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006172:	f003 0303 	and.w	r3, r3, #3
 8006176:	2b03      	cmp	r3, #3
 8006178:	d81a      	bhi.n	80061b0 <UART_SetConfig+0xe8>
 800617a:	a201      	add	r2, pc, #4	@ (adr r2, 8006180 <UART_SetConfig+0xb8>)
 800617c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006180:	08006191 	.word	0x08006191
 8006184:	080061a1 	.word	0x080061a1
 8006188:	08006199 	.word	0x08006199
 800618c:	080061a9 	.word	0x080061a9
 8006190:	2301      	movs	r3, #1
 8006192:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006196:	e0d6      	b.n	8006346 <UART_SetConfig+0x27e>
 8006198:	2302      	movs	r3, #2
 800619a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800619e:	e0d2      	b.n	8006346 <UART_SetConfig+0x27e>
 80061a0:	2304      	movs	r3, #4
 80061a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80061a6:	e0ce      	b.n	8006346 <UART_SetConfig+0x27e>
 80061a8:	2308      	movs	r3, #8
 80061aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80061ae:	e0ca      	b.n	8006346 <UART_SetConfig+0x27e>
 80061b0:	2310      	movs	r3, #16
 80061b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80061b6:	e0c6      	b.n	8006346 <UART_SetConfig+0x27e>
 80061b8:	697b      	ldr	r3, [r7, #20]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	4a7d      	ldr	r2, [pc, #500]	@ (80063b4 <UART_SetConfig+0x2ec>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d138      	bne.n	8006234 <UART_SetConfig+0x16c>
 80061c2:	4b7b      	ldr	r3, [pc, #492]	@ (80063b0 <UART_SetConfig+0x2e8>)
 80061c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061c8:	f003 030c 	and.w	r3, r3, #12
 80061cc:	2b0c      	cmp	r3, #12
 80061ce:	d82d      	bhi.n	800622c <UART_SetConfig+0x164>
 80061d0:	a201      	add	r2, pc, #4	@ (adr r2, 80061d8 <UART_SetConfig+0x110>)
 80061d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061d6:	bf00      	nop
 80061d8:	0800620d 	.word	0x0800620d
 80061dc:	0800622d 	.word	0x0800622d
 80061e0:	0800622d 	.word	0x0800622d
 80061e4:	0800622d 	.word	0x0800622d
 80061e8:	0800621d 	.word	0x0800621d
 80061ec:	0800622d 	.word	0x0800622d
 80061f0:	0800622d 	.word	0x0800622d
 80061f4:	0800622d 	.word	0x0800622d
 80061f8:	08006215 	.word	0x08006215
 80061fc:	0800622d 	.word	0x0800622d
 8006200:	0800622d 	.word	0x0800622d
 8006204:	0800622d 	.word	0x0800622d
 8006208:	08006225 	.word	0x08006225
 800620c:	2300      	movs	r3, #0
 800620e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006212:	e098      	b.n	8006346 <UART_SetConfig+0x27e>
 8006214:	2302      	movs	r3, #2
 8006216:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800621a:	e094      	b.n	8006346 <UART_SetConfig+0x27e>
 800621c:	2304      	movs	r3, #4
 800621e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006222:	e090      	b.n	8006346 <UART_SetConfig+0x27e>
 8006224:	2308      	movs	r3, #8
 8006226:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800622a:	e08c      	b.n	8006346 <UART_SetConfig+0x27e>
 800622c:	2310      	movs	r3, #16
 800622e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006232:	e088      	b.n	8006346 <UART_SetConfig+0x27e>
 8006234:	697b      	ldr	r3, [r7, #20]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	4a5f      	ldr	r2, [pc, #380]	@ (80063b8 <UART_SetConfig+0x2f0>)
 800623a:	4293      	cmp	r3, r2
 800623c:	d125      	bne.n	800628a <UART_SetConfig+0x1c2>
 800623e:	4b5c      	ldr	r3, [pc, #368]	@ (80063b0 <UART_SetConfig+0x2e8>)
 8006240:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006244:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006248:	2b30      	cmp	r3, #48	@ 0x30
 800624a:	d016      	beq.n	800627a <UART_SetConfig+0x1b2>
 800624c:	2b30      	cmp	r3, #48	@ 0x30
 800624e:	d818      	bhi.n	8006282 <UART_SetConfig+0x1ba>
 8006250:	2b20      	cmp	r3, #32
 8006252:	d00a      	beq.n	800626a <UART_SetConfig+0x1a2>
 8006254:	2b20      	cmp	r3, #32
 8006256:	d814      	bhi.n	8006282 <UART_SetConfig+0x1ba>
 8006258:	2b00      	cmp	r3, #0
 800625a:	d002      	beq.n	8006262 <UART_SetConfig+0x19a>
 800625c:	2b10      	cmp	r3, #16
 800625e:	d008      	beq.n	8006272 <UART_SetConfig+0x1aa>
 8006260:	e00f      	b.n	8006282 <UART_SetConfig+0x1ba>
 8006262:	2300      	movs	r3, #0
 8006264:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006268:	e06d      	b.n	8006346 <UART_SetConfig+0x27e>
 800626a:	2302      	movs	r3, #2
 800626c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006270:	e069      	b.n	8006346 <UART_SetConfig+0x27e>
 8006272:	2304      	movs	r3, #4
 8006274:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006278:	e065      	b.n	8006346 <UART_SetConfig+0x27e>
 800627a:	2308      	movs	r3, #8
 800627c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006280:	e061      	b.n	8006346 <UART_SetConfig+0x27e>
 8006282:	2310      	movs	r3, #16
 8006284:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006288:	e05d      	b.n	8006346 <UART_SetConfig+0x27e>
 800628a:	697b      	ldr	r3, [r7, #20]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	4a4b      	ldr	r2, [pc, #300]	@ (80063bc <UART_SetConfig+0x2f4>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d125      	bne.n	80062e0 <UART_SetConfig+0x218>
 8006294:	4b46      	ldr	r3, [pc, #280]	@ (80063b0 <UART_SetConfig+0x2e8>)
 8006296:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800629a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800629e:	2bc0      	cmp	r3, #192	@ 0xc0
 80062a0:	d016      	beq.n	80062d0 <UART_SetConfig+0x208>
 80062a2:	2bc0      	cmp	r3, #192	@ 0xc0
 80062a4:	d818      	bhi.n	80062d8 <UART_SetConfig+0x210>
 80062a6:	2b80      	cmp	r3, #128	@ 0x80
 80062a8:	d00a      	beq.n	80062c0 <UART_SetConfig+0x1f8>
 80062aa:	2b80      	cmp	r3, #128	@ 0x80
 80062ac:	d814      	bhi.n	80062d8 <UART_SetConfig+0x210>
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d002      	beq.n	80062b8 <UART_SetConfig+0x1f0>
 80062b2:	2b40      	cmp	r3, #64	@ 0x40
 80062b4:	d008      	beq.n	80062c8 <UART_SetConfig+0x200>
 80062b6:	e00f      	b.n	80062d8 <UART_SetConfig+0x210>
 80062b8:	2300      	movs	r3, #0
 80062ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80062be:	e042      	b.n	8006346 <UART_SetConfig+0x27e>
 80062c0:	2302      	movs	r3, #2
 80062c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80062c6:	e03e      	b.n	8006346 <UART_SetConfig+0x27e>
 80062c8:	2304      	movs	r3, #4
 80062ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80062ce:	e03a      	b.n	8006346 <UART_SetConfig+0x27e>
 80062d0:	2308      	movs	r3, #8
 80062d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80062d6:	e036      	b.n	8006346 <UART_SetConfig+0x27e>
 80062d8:	2310      	movs	r3, #16
 80062da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80062de:	e032      	b.n	8006346 <UART_SetConfig+0x27e>
 80062e0:	697b      	ldr	r3, [r7, #20]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	4a30      	ldr	r2, [pc, #192]	@ (80063a8 <UART_SetConfig+0x2e0>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d12a      	bne.n	8006340 <UART_SetConfig+0x278>
 80062ea:	4b31      	ldr	r3, [pc, #196]	@ (80063b0 <UART_SetConfig+0x2e8>)
 80062ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062f0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80062f4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80062f8:	d01a      	beq.n	8006330 <UART_SetConfig+0x268>
 80062fa:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80062fe:	d81b      	bhi.n	8006338 <UART_SetConfig+0x270>
 8006300:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006304:	d00c      	beq.n	8006320 <UART_SetConfig+0x258>
 8006306:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800630a:	d815      	bhi.n	8006338 <UART_SetConfig+0x270>
 800630c:	2b00      	cmp	r3, #0
 800630e:	d003      	beq.n	8006318 <UART_SetConfig+0x250>
 8006310:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006314:	d008      	beq.n	8006328 <UART_SetConfig+0x260>
 8006316:	e00f      	b.n	8006338 <UART_SetConfig+0x270>
 8006318:	2300      	movs	r3, #0
 800631a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800631e:	e012      	b.n	8006346 <UART_SetConfig+0x27e>
 8006320:	2302      	movs	r3, #2
 8006322:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006326:	e00e      	b.n	8006346 <UART_SetConfig+0x27e>
 8006328:	2304      	movs	r3, #4
 800632a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800632e:	e00a      	b.n	8006346 <UART_SetConfig+0x27e>
 8006330:	2308      	movs	r3, #8
 8006332:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006336:	e006      	b.n	8006346 <UART_SetConfig+0x27e>
 8006338:	2310      	movs	r3, #16
 800633a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800633e:	e002      	b.n	8006346 <UART_SetConfig+0x27e>
 8006340:	2310      	movs	r3, #16
 8006342:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006346:	697b      	ldr	r3, [r7, #20]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	4a17      	ldr	r2, [pc, #92]	@ (80063a8 <UART_SetConfig+0x2e0>)
 800634c:	4293      	cmp	r3, r2
 800634e:	f040 80a8 	bne.w	80064a2 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006352:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006356:	2b08      	cmp	r3, #8
 8006358:	d834      	bhi.n	80063c4 <UART_SetConfig+0x2fc>
 800635a:	a201      	add	r2, pc, #4	@ (adr r2, 8006360 <UART_SetConfig+0x298>)
 800635c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006360:	08006385 	.word	0x08006385
 8006364:	080063c5 	.word	0x080063c5
 8006368:	0800638d 	.word	0x0800638d
 800636c:	080063c5 	.word	0x080063c5
 8006370:	08006393 	.word	0x08006393
 8006374:	080063c5 	.word	0x080063c5
 8006378:	080063c5 	.word	0x080063c5
 800637c:	080063c5 	.word	0x080063c5
 8006380:	0800639b 	.word	0x0800639b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006384:	f7fe f9ac 	bl	80046e0 <HAL_RCC_GetPCLK1Freq>
 8006388:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800638a:	e021      	b.n	80063d0 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800638c:	4b0c      	ldr	r3, [pc, #48]	@ (80063c0 <UART_SetConfig+0x2f8>)
 800638e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006390:	e01e      	b.n	80063d0 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006392:	f7fe f937 	bl	8004604 <HAL_RCC_GetSysClockFreq>
 8006396:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006398:	e01a      	b.n	80063d0 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800639a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800639e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80063a0:	e016      	b.n	80063d0 <UART_SetConfig+0x308>
 80063a2:	bf00      	nop
 80063a4:	cfff69f3 	.word	0xcfff69f3
 80063a8:	40008000 	.word	0x40008000
 80063ac:	40013800 	.word	0x40013800
 80063b0:	40021000 	.word	0x40021000
 80063b4:	40004400 	.word	0x40004400
 80063b8:	40004800 	.word	0x40004800
 80063bc:	40004c00 	.word	0x40004c00
 80063c0:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80063c4:	2300      	movs	r3, #0
 80063c6:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80063c8:	2301      	movs	r3, #1
 80063ca:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80063ce:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80063d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	f000 812a 	beq.w	800662c <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80063d8:	697b      	ldr	r3, [r7, #20]
 80063da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063dc:	4a9e      	ldr	r2, [pc, #632]	@ (8006658 <UART_SetConfig+0x590>)
 80063de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80063e2:	461a      	mov	r2, r3
 80063e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063e6:	fbb3 f3f2 	udiv	r3, r3, r2
 80063ea:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80063ec:	697b      	ldr	r3, [r7, #20]
 80063ee:	685a      	ldr	r2, [r3, #4]
 80063f0:	4613      	mov	r3, r2
 80063f2:	005b      	lsls	r3, r3, #1
 80063f4:	4413      	add	r3, r2
 80063f6:	69ba      	ldr	r2, [r7, #24]
 80063f8:	429a      	cmp	r2, r3
 80063fa:	d305      	bcc.n	8006408 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80063fc:	697b      	ldr	r3, [r7, #20]
 80063fe:	685b      	ldr	r3, [r3, #4]
 8006400:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006402:	69ba      	ldr	r2, [r7, #24]
 8006404:	429a      	cmp	r2, r3
 8006406:	d903      	bls.n	8006410 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8006408:	2301      	movs	r3, #1
 800640a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800640e:	e10d      	b.n	800662c <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006410:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006412:	2200      	movs	r2, #0
 8006414:	60bb      	str	r3, [r7, #8]
 8006416:	60fa      	str	r2, [r7, #12]
 8006418:	697b      	ldr	r3, [r7, #20]
 800641a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800641c:	4a8e      	ldr	r2, [pc, #568]	@ (8006658 <UART_SetConfig+0x590>)
 800641e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006422:	b29b      	uxth	r3, r3
 8006424:	2200      	movs	r2, #0
 8006426:	603b      	str	r3, [r7, #0]
 8006428:	607a      	str	r2, [r7, #4]
 800642a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800642e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006432:	f7f9 ff45 	bl	80002c0 <__aeabi_uldivmod>
 8006436:	4602      	mov	r2, r0
 8006438:	460b      	mov	r3, r1
 800643a:	4610      	mov	r0, r2
 800643c:	4619      	mov	r1, r3
 800643e:	f04f 0200 	mov.w	r2, #0
 8006442:	f04f 0300 	mov.w	r3, #0
 8006446:	020b      	lsls	r3, r1, #8
 8006448:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800644c:	0202      	lsls	r2, r0, #8
 800644e:	6979      	ldr	r1, [r7, #20]
 8006450:	6849      	ldr	r1, [r1, #4]
 8006452:	0849      	lsrs	r1, r1, #1
 8006454:	2000      	movs	r0, #0
 8006456:	460c      	mov	r4, r1
 8006458:	4605      	mov	r5, r0
 800645a:	eb12 0804 	adds.w	r8, r2, r4
 800645e:	eb43 0905 	adc.w	r9, r3, r5
 8006462:	697b      	ldr	r3, [r7, #20]
 8006464:	685b      	ldr	r3, [r3, #4]
 8006466:	2200      	movs	r2, #0
 8006468:	469a      	mov	sl, r3
 800646a:	4693      	mov	fp, r2
 800646c:	4652      	mov	r2, sl
 800646e:	465b      	mov	r3, fp
 8006470:	4640      	mov	r0, r8
 8006472:	4649      	mov	r1, r9
 8006474:	f7f9 ff24 	bl	80002c0 <__aeabi_uldivmod>
 8006478:	4602      	mov	r2, r0
 800647a:	460b      	mov	r3, r1
 800647c:	4613      	mov	r3, r2
 800647e:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006480:	6a3b      	ldr	r3, [r7, #32]
 8006482:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006486:	d308      	bcc.n	800649a <UART_SetConfig+0x3d2>
 8006488:	6a3b      	ldr	r3, [r7, #32]
 800648a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800648e:	d204      	bcs.n	800649a <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8006490:	697b      	ldr	r3, [r7, #20]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	6a3a      	ldr	r2, [r7, #32]
 8006496:	60da      	str	r2, [r3, #12]
 8006498:	e0c8      	b.n	800662c <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800649a:	2301      	movs	r3, #1
 800649c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80064a0:	e0c4      	b.n	800662c <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80064a2:	697b      	ldr	r3, [r7, #20]
 80064a4:	69db      	ldr	r3, [r3, #28]
 80064a6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80064aa:	d167      	bne.n	800657c <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 80064ac:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80064b0:	2b08      	cmp	r3, #8
 80064b2:	d828      	bhi.n	8006506 <UART_SetConfig+0x43e>
 80064b4:	a201      	add	r2, pc, #4	@ (adr r2, 80064bc <UART_SetConfig+0x3f4>)
 80064b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064ba:	bf00      	nop
 80064bc:	080064e1 	.word	0x080064e1
 80064c0:	080064e9 	.word	0x080064e9
 80064c4:	080064f1 	.word	0x080064f1
 80064c8:	08006507 	.word	0x08006507
 80064cc:	080064f7 	.word	0x080064f7
 80064d0:	08006507 	.word	0x08006507
 80064d4:	08006507 	.word	0x08006507
 80064d8:	08006507 	.word	0x08006507
 80064dc:	080064ff 	.word	0x080064ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80064e0:	f7fe f8fe 	bl	80046e0 <HAL_RCC_GetPCLK1Freq>
 80064e4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80064e6:	e014      	b.n	8006512 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80064e8:	f7fe f910 	bl	800470c <HAL_RCC_GetPCLK2Freq>
 80064ec:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80064ee:	e010      	b.n	8006512 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80064f0:	4b5a      	ldr	r3, [pc, #360]	@ (800665c <UART_SetConfig+0x594>)
 80064f2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80064f4:	e00d      	b.n	8006512 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80064f6:	f7fe f885 	bl	8004604 <HAL_RCC_GetSysClockFreq>
 80064fa:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80064fc:	e009      	b.n	8006512 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80064fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006502:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006504:	e005      	b.n	8006512 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8006506:	2300      	movs	r3, #0
 8006508:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800650a:	2301      	movs	r3, #1
 800650c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006510:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006514:	2b00      	cmp	r3, #0
 8006516:	f000 8089 	beq.w	800662c <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800651a:	697b      	ldr	r3, [r7, #20]
 800651c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800651e:	4a4e      	ldr	r2, [pc, #312]	@ (8006658 <UART_SetConfig+0x590>)
 8006520:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006524:	461a      	mov	r2, r3
 8006526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006528:	fbb3 f3f2 	udiv	r3, r3, r2
 800652c:	005a      	lsls	r2, r3, #1
 800652e:	697b      	ldr	r3, [r7, #20]
 8006530:	685b      	ldr	r3, [r3, #4]
 8006532:	085b      	lsrs	r3, r3, #1
 8006534:	441a      	add	r2, r3
 8006536:	697b      	ldr	r3, [r7, #20]
 8006538:	685b      	ldr	r3, [r3, #4]
 800653a:	fbb2 f3f3 	udiv	r3, r2, r3
 800653e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006540:	6a3b      	ldr	r3, [r7, #32]
 8006542:	2b0f      	cmp	r3, #15
 8006544:	d916      	bls.n	8006574 <UART_SetConfig+0x4ac>
 8006546:	6a3b      	ldr	r3, [r7, #32]
 8006548:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800654c:	d212      	bcs.n	8006574 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800654e:	6a3b      	ldr	r3, [r7, #32]
 8006550:	b29b      	uxth	r3, r3
 8006552:	f023 030f 	bic.w	r3, r3, #15
 8006556:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006558:	6a3b      	ldr	r3, [r7, #32]
 800655a:	085b      	lsrs	r3, r3, #1
 800655c:	b29b      	uxth	r3, r3
 800655e:	f003 0307 	and.w	r3, r3, #7
 8006562:	b29a      	uxth	r2, r3
 8006564:	8bfb      	ldrh	r3, [r7, #30]
 8006566:	4313      	orrs	r3, r2
 8006568:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800656a:	697b      	ldr	r3, [r7, #20]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	8bfa      	ldrh	r2, [r7, #30]
 8006570:	60da      	str	r2, [r3, #12]
 8006572:	e05b      	b.n	800662c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8006574:	2301      	movs	r3, #1
 8006576:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800657a:	e057      	b.n	800662c <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800657c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006580:	2b08      	cmp	r3, #8
 8006582:	d828      	bhi.n	80065d6 <UART_SetConfig+0x50e>
 8006584:	a201      	add	r2, pc, #4	@ (adr r2, 800658c <UART_SetConfig+0x4c4>)
 8006586:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800658a:	bf00      	nop
 800658c:	080065b1 	.word	0x080065b1
 8006590:	080065b9 	.word	0x080065b9
 8006594:	080065c1 	.word	0x080065c1
 8006598:	080065d7 	.word	0x080065d7
 800659c:	080065c7 	.word	0x080065c7
 80065a0:	080065d7 	.word	0x080065d7
 80065a4:	080065d7 	.word	0x080065d7
 80065a8:	080065d7 	.word	0x080065d7
 80065ac:	080065cf 	.word	0x080065cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80065b0:	f7fe f896 	bl	80046e0 <HAL_RCC_GetPCLK1Freq>
 80065b4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80065b6:	e014      	b.n	80065e2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80065b8:	f7fe f8a8 	bl	800470c <HAL_RCC_GetPCLK2Freq>
 80065bc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80065be:	e010      	b.n	80065e2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80065c0:	4b26      	ldr	r3, [pc, #152]	@ (800665c <UART_SetConfig+0x594>)
 80065c2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80065c4:	e00d      	b.n	80065e2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80065c6:	f7fe f81d 	bl	8004604 <HAL_RCC_GetSysClockFreq>
 80065ca:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80065cc:	e009      	b.n	80065e2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80065ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80065d2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80065d4:	e005      	b.n	80065e2 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 80065d6:	2300      	movs	r3, #0
 80065d8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80065da:	2301      	movs	r3, #1
 80065dc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80065e0:	bf00      	nop
    }

    if (pclk != 0U)
 80065e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d021      	beq.n	800662c <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80065e8:	697b      	ldr	r3, [r7, #20]
 80065ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065ec:	4a1a      	ldr	r2, [pc, #104]	@ (8006658 <UART_SetConfig+0x590>)
 80065ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80065f2:	461a      	mov	r2, r3
 80065f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065f6:	fbb3 f2f2 	udiv	r2, r3, r2
 80065fa:	697b      	ldr	r3, [r7, #20]
 80065fc:	685b      	ldr	r3, [r3, #4]
 80065fe:	085b      	lsrs	r3, r3, #1
 8006600:	441a      	add	r2, r3
 8006602:	697b      	ldr	r3, [r7, #20]
 8006604:	685b      	ldr	r3, [r3, #4]
 8006606:	fbb2 f3f3 	udiv	r3, r2, r3
 800660a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800660c:	6a3b      	ldr	r3, [r7, #32]
 800660e:	2b0f      	cmp	r3, #15
 8006610:	d909      	bls.n	8006626 <UART_SetConfig+0x55e>
 8006612:	6a3b      	ldr	r3, [r7, #32]
 8006614:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006618:	d205      	bcs.n	8006626 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800661a:	6a3b      	ldr	r3, [r7, #32]
 800661c:	b29a      	uxth	r2, r3
 800661e:	697b      	ldr	r3, [r7, #20]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	60da      	str	r2, [r3, #12]
 8006624:	e002      	b.n	800662c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8006626:	2301      	movs	r3, #1
 8006628:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800662c:	697b      	ldr	r3, [r7, #20]
 800662e:	2201      	movs	r2, #1
 8006630:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006634:	697b      	ldr	r3, [r7, #20]
 8006636:	2201      	movs	r2, #1
 8006638:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800663c:	697b      	ldr	r3, [r7, #20]
 800663e:	2200      	movs	r2, #0
 8006640:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006642:	697b      	ldr	r3, [r7, #20]
 8006644:	2200      	movs	r2, #0
 8006646:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006648:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800664c:	4618      	mov	r0, r3
 800664e:	3730      	adds	r7, #48	@ 0x30
 8006650:	46bd      	mov	sp, r7
 8006652:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006656:	bf00      	nop
 8006658:	0800c668 	.word	0x0800c668
 800665c:	00f42400 	.word	0x00f42400

08006660 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006660:	b480      	push	{r7}
 8006662:	b083      	sub	sp, #12
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800666c:	f003 0308 	and.w	r3, r3, #8
 8006670:	2b00      	cmp	r3, #0
 8006672:	d00a      	beq.n	800668a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	685b      	ldr	r3, [r3, #4]
 800667a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	430a      	orrs	r2, r1
 8006688:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800668e:	f003 0301 	and.w	r3, r3, #1
 8006692:	2b00      	cmp	r3, #0
 8006694:	d00a      	beq.n	80066ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	685b      	ldr	r3, [r3, #4]
 800669c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	430a      	orrs	r2, r1
 80066aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066b0:	f003 0302 	and.w	r3, r3, #2
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d00a      	beq.n	80066ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	685b      	ldr	r3, [r3, #4]
 80066be:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	430a      	orrs	r2, r1
 80066cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066d2:	f003 0304 	and.w	r3, r3, #4
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d00a      	beq.n	80066f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	685b      	ldr	r3, [r3, #4]
 80066e0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	430a      	orrs	r2, r1
 80066ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066f4:	f003 0310 	and.w	r3, r3, #16
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d00a      	beq.n	8006712 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	689b      	ldr	r3, [r3, #8]
 8006702:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	430a      	orrs	r2, r1
 8006710:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006716:	f003 0320 	and.w	r3, r3, #32
 800671a:	2b00      	cmp	r3, #0
 800671c:	d00a      	beq.n	8006734 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	689b      	ldr	r3, [r3, #8]
 8006724:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	430a      	orrs	r2, r1
 8006732:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006738:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800673c:	2b00      	cmp	r3, #0
 800673e:	d01a      	beq.n	8006776 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	685b      	ldr	r3, [r3, #4]
 8006746:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	430a      	orrs	r2, r1
 8006754:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800675a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800675e:	d10a      	bne.n	8006776 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	685b      	ldr	r3, [r3, #4]
 8006766:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	430a      	orrs	r2, r1
 8006774:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800677a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800677e:	2b00      	cmp	r3, #0
 8006780:	d00a      	beq.n	8006798 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	685b      	ldr	r3, [r3, #4]
 8006788:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	430a      	orrs	r2, r1
 8006796:	605a      	str	r2, [r3, #4]
  }
}
 8006798:	bf00      	nop
 800679a:	370c      	adds	r7, #12
 800679c:	46bd      	mov	sp, r7
 800679e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a2:	4770      	bx	lr

080067a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b098      	sub	sp, #96	@ 0x60
 80067a8:	af02      	add	r7, sp, #8
 80067aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2200      	movs	r2, #0
 80067b0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80067b4:	f7fa fe9e 	bl	80014f4 <HAL_GetTick>
 80067b8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f003 0308 	and.w	r3, r3, #8
 80067c4:	2b08      	cmp	r3, #8
 80067c6:	d12f      	bne.n	8006828 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80067c8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80067cc:	9300      	str	r3, [sp, #0]
 80067ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80067d0:	2200      	movs	r2, #0
 80067d2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80067d6:	6878      	ldr	r0, [r7, #4]
 80067d8:	f000 f88e 	bl	80068f8 <UART_WaitOnFlagUntilTimeout>
 80067dc:	4603      	mov	r3, r0
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d022      	beq.n	8006828 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067ea:	e853 3f00 	ldrex	r3, [r3]
 80067ee:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80067f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067f2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80067f6:	653b      	str	r3, [r7, #80]	@ 0x50
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	461a      	mov	r2, r3
 80067fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006800:	647b      	str	r3, [r7, #68]	@ 0x44
 8006802:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006804:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006806:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006808:	e841 2300 	strex	r3, r2, [r1]
 800680c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800680e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006810:	2b00      	cmp	r3, #0
 8006812:	d1e6      	bne.n	80067e2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2220      	movs	r2, #32
 8006818:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2200      	movs	r2, #0
 8006820:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006824:	2303      	movs	r3, #3
 8006826:	e063      	b.n	80068f0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f003 0304 	and.w	r3, r3, #4
 8006832:	2b04      	cmp	r3, #4
 8006834:	d149      	bne.n	80068ca <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006836:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800683a:	9300      	str	r3, [sp, #0]
 800683c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800683e:	2200      	movs	r2, #0
 8006840:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006844:	6878      	ldr	r0, [r7, #4]
 8006846:	f000 f857 	bl	80068f8 <UART_WaitOnFlagUntilTimeout>
 800684a:	4603      	mov	r3, r0
 800684c:	2b00      	cmp	r3, #0
 800684e:	d03c      	beq.n	80068ca <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006858:	e853 3f00 	ldrex	r3, [r3]
 800685c:	623b      	str	r3, [r7, #32]
   return(result);
 800685e:	6a3b      	ldr	r3, [r7, #32]
 8006860:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006864:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	461a      	mov	r2, r3
 800686c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800686e:	633b      	str	r3, [r7, #48]	@ 0x30
 8006870:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006872:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006874:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006876:	e841 2300 	strex	r3, r2, [r1]
 800687a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800687c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800687e:	2b00      	cmp	r3, #0
 8006880:	d1e6      	bne.n	8006850 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	3308      	adds	r3, #8
 8006888:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800688a:	693b      	ldr	r3, [r7, #16]
 800688c:	e853 3f00 	ldrex	r3, [r3]
 8006890:	60fb      	str	r3, [r7, #12]
   return(result);
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	f023 0301 	bic.w	r3, r3, #1
 8006898:	64bb      	str	r3, [r7, #72]	@ 0x48
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	3308      	adds	r3, #8
 80068a0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80068a2:	61fa      	str	r2, [r7, #28]
 80068a4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068a6:	69b9      	ldr	r1, [r7, #24]
 80068a8:	69fa      	ldr	r2, [r7, #28]
 80068aa:	e841 2300 	strex	r3, r2, [r1]
 80068ae:	617b      	str	r3, [r7, #20]
   return(result);
 80068b0:	697b      	ldr	r3, [r7, #20]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d1e5      	bne.n	8006882 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2220      	movs	r2, #32
 80068ba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	2200      	movs	r2, #0
 80068c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80068c6:	2303      	movs	r3, #3
 80068c8:	e012      	b.n	80068f0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2220      	movs	r2, #32
 80068ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2220      	movs	r2, #32
 80068d6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	2200      	movs	r2, #0
 80068de:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2200      	movs	r2, #0
 80068e4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2200      	movs	r2, #0
 80068ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80068ee:	2300      	movs	r3, #0
}
 80068f0:	4618      	mov	r0, r3
 80068f2:	3758      	adds	r7, #88	@ 0x58
 80068f4:	46bd      	mov	sp, r7
 80068f6:	bd80      	pop	{r7, pc}

080068f8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b084      	sub	sp, #16
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	60f8      	str	r0, [r7, #12]
 8006900:	60b9      	str	r1, [r7, #8]
 8006902:	603b      	str	r3, [r7, #0]
 8006904:	4613      	mov	r3, r2
 8006906:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006908:	e04f      	b.n	80069aa <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800690a:	69bb      	ldr	r3, [r7, #24]
 800690c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006910:	d04b      	beq.n	80069aa <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006912:	f7fa fdef 	bl	80014f4 <HAL_GetTick>
 8006916:	4602      	mov	r2, r0
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	1ad3      	subs	r3, r2, r3
 800691c:	69ba      	ldr	r2, [r7, #24]
 800691e:	429a      	cmp	r2, r3
 8006920:	d302      	bcc.n	8006928 <UART_WaitOnFlagUntilTimeout+0x30>
 8006922:	69bb      	ldr	r3, [r7, #24]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d101      	bne.n	800692c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006928:	2303      	movs	r3, #3
 800692a:	e04e      	b.n	80069ca <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f003 0304 	and.w	r3, r3, #4
 8006936:	2b00      	cmp	r3, #0
 8006938:	d037      	beq.n	80069aa <UART_WaitOnFlagUntilTimeout+0xb2>
 800693a:	68bb      	ldr	r3, [r7, #8]
 800693c:	2b80      	cmp	r3, #128	@ 0x80
 800693e:	d034      	beq.n	80069aa <UART_WaitOnFlagUntilTimeout+0xb2>
 8006940:	68bb      	ldr	r3, [r7, #8]
 8006942:	2b40      	cmp	r3, #64	@ 0x40
 8006944:	d031      	beq.n	80069aa <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	69db      	ldr	r3, [r3, #28]
 800694c:	f003 0308 	and.w	r3, r3, #8
 8006950:	2b08      	cmp	r3, #8
 8006952:	d110      	bne.n	8006976 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	2208      	movs	r2, #8
 800695a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800695c:	68f8      	ldr	r0, [r7, #12]
 800695e:	f000 f920 	bl	8006ba2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	2208      	movs	r2, #8
 8006966:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	2200      	movs	r2, #0
 800696e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8006972:	2301      	movs	r3, #1
 8006974:	e029      	b.n	80069ca <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	69db      	ldr	r3, [r3, #28]
 800697c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006980:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006984:	d111      	bne.n	80069aa <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800698e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006990:	68f8      	ldr	r0, [r7, #12]
 8006992:	f000 f906 	bl	8006ba2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	2220      	movs	r2, #32
 800699a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	2200      	movs	r2, #0
 80069a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80069a6:	2303      	movs	r3, #3
 80069a8:	e00f      	b.n	80069ca <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	69da      	ldr	r2, [r3, #28]
 80069b0:	68bb      	ldr	r3, [r7, #8]
 80069b2:	4013      	ands	r3, r2
 80069b4:	68ba      	ldr	r2, [r7, #8]
 80069b6:	429a      	cmp	r2, r3
 80069b8:	bf0c      	ite	eq
 80069ba:	2301      	moveq	r3, #1
 80069bc:	2300      	movne	r3, #0
 80069be:	b2db      	uxtb	r3, r3
 80069c0:	461a      	mov	r2, r3
 80069c2:	79fb      	ldrb	r3, [r7, #7]
 80069c4:	429a      	cmp	r2, r3
 80069c6:	d0a0      	beq.n	800690a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80069c8:	2300      	movs	r3, #0
}
 80069ca:	4618      	mov	r0, r3
 80069cc:	3710      	adds	r7, #16
 80069ce:	46bd      	mov	sp, r7
 80069d0:	bd80      	pop	{r7, pc}
	...

080069d4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b096      	sub	sp, #88	@ 0x58
 80069d8:	af00      	add	r7, sp, #0
 80069da:	60f8      	str	r0, [r7, #12]
 80069dc:	60b9      	str	r1, [r7, #8]
 80069de:	4613      	mov	r3, r2
 80069e0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	68ba      	ldr	r2, [r7, #8]
 80069e6:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	88fa      	ldrh	r2, [r7, #6]
 80069ec:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	2200      	movs	r2, #0
 80069f4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	2222      	movs	r2, #34	@ 0x22
 80069fc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d02d      	beq.n	8006a66 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006a10:	4a40      	ldr	r2, [pc, #256]	@ (8006b14 <UART_Start_Receive_DMA+0x140>)
 8006a12:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006a1a:	4a3f      	ldr	r2, [pc, #252]	@ (8006b18 <UART_Start_Receive_DMA+0x144>)
 8006a1c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006a24:	4a3d      	ldr	r2, [pc, #244]	@ (8006b1c <UART_Start_Receive_DMA+0x148>)
 8006a26:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006a2e:	2200      	movs	r2, #0
 8006a30:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	3324      	adds	r3, #36	@ 0x24
 8006a3e:	4619      	mov	r1, r3
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a44:	461a      	mov	r2, r3
 8006a46:	88fb      	ldrh	r3, [r7, #6]
 8006a48:	f7fa ff6c 	bl	8001924 <HAL_DMA_Start_IT>
 8006a4c:	4603      	mov	r3, r0
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d009      	beq.n	8006a66 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	2210      	movs	r2, #16
 8006a56:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	2220      	movs	r2, #32
 8006a5e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 8006a62:	2301      	movs	r3, #1
 8006a64:	e051      	b.n	8006b0a <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	691b      	ldr	r3, [r3, #16]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d018      	beq.n	8006aa0 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a76:	e853 3f00 	ldrex	r3, [r3]
 8006a7a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006a7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a7e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006a82:	657b      	str	r3, [r7, #84]	@ 0x54
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	461a      	mov	r2, r3
 8006a8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006a8c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006a8e:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a90:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006a92:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006a94:	e841 2300 	strex	r3, r2, [r1]
 8006a98:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8006a9a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d1e6      	bne.n	8006a6e <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	3308      	adds	r3, #8
 8006aa6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aa8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006aaa:	e853 3f00 	ldrex	r3, [r3]
 8006aae:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006ab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ab2:	f043 0301 	orr.w	r3, r3, #1
 8006ab6:	653b      	str	r3, [r7, #80]	@ 0x50
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	3308      	adds	r3, #8
 8006abe:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006ac0:	637a      	str	r2, [r7, #52]	@ 0x34
 8006ac2:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ac4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006ac6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006ac8:	e841 2300 	strex	r3, r2, [r1]
 8006acc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8006ace:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d1e5      	bne.n	8006aa0 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	3308      	adds	r3, #8
 8006ada:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006adc:	697b      	ldr	r3, [r7, #20]
 8006ade:	e853 3f00 	ldrex	r3, [r3]
 8006ae2:	613b      	str	r3, [r7, #16]
   return(result);
 8006ae4:	693b      	ldr	r3, [r7, #16]
 8006ae6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006aea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	3308      	adds	r3, #8
 8006af2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006af4:	623a      	str	r2, [r7, #32]
 8006af6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006af8:	69f9      	ldr	r1, [r7, #28]
 8006afa:	6a3a      	ldr	r2, [r7, #32]
 8006afc:	e841 2300 	strex	r3, r2, [r1]
 8006b00:	61bb      	str	r3, [r7, #24]
   return(result);
 8006b02:	69bb      	ldr	r3, [r7, #24]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d1e5      	bne.n	8006ad4 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8006b08:	2300      	movs	r3, #0
}
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	3758      	adds	r7, #88	@ 0x58
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	bd80      	pop	{r7, pc}
 8006b12:	bf00      	nop
 8006b14:	08006c6f 	.word	0x08006c6f
 8006b18:	08006d9b 	.word	0x08006d9b
 8006b1c:	08006dd9 	.word	0x08006dd9

08006b20 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006b20:	b480      	push	{r7}
 8006b22:	b08f      	sub	sp, #60	@ 0x3c
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b2e:	6a3b      	ldr	r3, [r7, #32]
 8006b30:	e853 3f00 	ldrex	r3, [r3]
 8006b34:	61fb      	str	r3, [r7, #28]
   return(result);
 8006b36:	69fb      	ldr	r3, [r7, #28]
 8006b38:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8006b3c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	461a      	mov	r2, r3
 8006b44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b46:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006b48:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b4a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006b4c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006b4e:	e841 2300 	strex	r3, r2, [r1]
 8006b52:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006b54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d1e6      	bne.n	8006b28 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	3308      	adds	r3, #8
 8006b60:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	e853 3f00 	ldrex	r3, [r3]
 8006b68:	60bb      	str	r3, [r7, #8]
   return(result);
 8006b6a:	68bb      	ldr	r3, [r7, #8]
 8006b6c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8006b70:	633b      	str	r3, [r7, #48]	@ 0x30
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	3308      	adds	r3, #8
 8006b78:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006b7a:	61ba      	str	r2, [r7, #24]
 8006b7c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b7e:	6979      	ldr	r1, [r7, #20]
 8006b80:	69ba      	ldr	r2, [r7, #24]
 8006b82:	e841 2300 	strex	r3, r2, [r1]
 8006b86:	613b      	str	r3, [r7, #16]
   return(result);
 8006b88:	693b      	ldr	r3, [r7, #16]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d1e5      	bne.n	8006b5a <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2220      	movs	r2, #32
 8006b92:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8006b96:	bf00      	nop
 8006b98:	373c      	adds	r7, #60	@ 0x3c
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba0:	4770      	bx	lr

08006ba2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006ba2:	b480      	push	{r7}
 8006ba4:	b095      	sub	sp, #84	@ 0x54
 8006ba6:	af00      	add	r7, sp, #0
 8006ba8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006bb2:	e853 3f00 	ldrex	r3, [r3]
 8006bb6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006bb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bba:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006bbe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	461a      	mov	r2, r3
 8006bc6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006bc8:	643b      	str	r3, [r7, #64]	@ 0x40
 8006bca:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bcc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006bce:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006bd0:	e841 2300 	strex	r3, r2, [r1]
 8006bd4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006bd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d1e6      	bne.n	8006baa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	3308      	adds	r3, #8
 8006be2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006be4:	6a3b      	ldr	r3, [r7, #32]
 8006be6:	e853 3f00 	ldrex	r3, [r3]
 8006bea:	61fb      	str	r3, [r7, #28]
   return(result);
 8006bec:	69fb      	ldr	r3, [r7, #28]
 8006bee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006bf2:	f023 0301 	bic.w	r3, r3, #1
 8006bf6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	3308      	adds	r3, #8
 8006bfe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006c00:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006c02:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c04:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006c06:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006c08:	e841 2300 	strex	r3, r2, [r1]
 8006c0c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006c0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d1e3      	bne.n	8006bdc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006c18:	2b01      	cmp	r3, #1
 8006c1a:	d118      	bne.n	8006c4e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	e853 3f00 	ldrex	r3, [r3]
 8006c28:	60bb      	str	r3, [r7, #8]
   return(result);
 8006c2a:	68bb      	ldr	r3, [r7, #8]
 8006c2c:	f023 0310 	bic.w	r3, r3, #16
 8006c30:	647b      	str	r3, [r7, #68]	@ 0x44
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	461a      	mov	r2, r3
 8006c38:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006c3a:	61bb      	str	r3, [r7, #24]
 8006c3c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c3e:	6979      	ldr	r1, [r7, #20]
 8006c40:	69ba      	ldr	r2, [r7, #24]
 8006c42:	e841 2300 	strex	r3, r2, [r1]
 8006c46:	613b      	str	r3, [r7, #16]
   return(result);
 8006c48:	693b      	ldr	r3, [r7, #16]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d1e6      	bne.n	8006c1c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2220      	movs	r2, #32
 8006c52:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2200      	movs	r2, #0
 8006c5a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2200      	movs	r2, #0
 8006c60:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006c62:	bf00      	nop
 8006c64:	3754      	adds	r7, #84	@ 0x54
 8006c66:	46bd      	mov	sp, r7
 8006c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6c:	4770      	bx	lr

08006c6e <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006c6e:	b580      	push	{r7, lr}
 8006c70:	b09c      	sub	sp, #112	@ 0x70
 8006c72:	af00      	add	r7, sp, #0
 8006c74:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c7a:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f003 0320 	and.w	r3, r3, #32
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d171      	bne.n	8006d6e <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8006c8a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006c92:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c98:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006c9a:	e853 3f00 	ldrex	r3, [r3]
 8006c9e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006ca0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006ca2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006ca6:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006ca8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	461a      	mov	r2, r3
 8006cae:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006cb0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006cb2:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cb4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006cb6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006cb8:	e841 2300 	strex	r3, r2, [r1]
 8006cbc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006cbe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d1e6      	bne.n	8006c92 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cc4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	3308      	adds	r3, #8
 8006cca:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ccc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cce:	e853 3f00 	ldrex	r3, [r3]
 8006cd2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006cd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006cd6:	f023 0301 	bic.w	r3, r3, #1
 8006cda:	667b      	str	r3, [r7, #100]	@ 0x64
 8006cdc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	3308      	adds	r3, #8
 8006ce2:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006ce4:	647a      	str	r2, [r7, #68]	@ 0x44
 8006ce6:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ce8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006cea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006cec:	e841 2300 	strex	r3, r2, [r1]
 8006cf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006cf2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d1e5      	bne.n	8006cc4 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006cf8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	3308      	adds	r3, #8
 8006cfe:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d02:	e853 3f00 	ldrex	r3, [r3]
 8006d06:	623b      	str	r3, [r7, #32]
   return(result);
 8006d08:	6a3b      	ldr	r3, [r7, #32]
 8006d0a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006d0e:	663b      	str	r3, [r7, #96]	@ 0x60
 8006d10:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	3308      	adds	r3, #8
 8006d16:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006d18:	633a      	str	r2, [r7, #48]	@ 0x30
 8006d1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d1c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006d1e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006d20:	e841 2300 	strex	r3, r2, [r1]
 8006d24:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006d26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d1e5      	bne.n	8006cf8 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006d2c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006d2e:	2220      	movs	r2, #32
 8006d30:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d34:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006d36:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006d38:	2b01      	cmp	r3, #1
 8006d3a:	d118      	bne.n	8006d6e <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d3c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d42:	693b      	ldr	r3, [r7, #16]
 8006d44:	e853 3f00 	ldrex	r3, [r3]
 8006d48:	60fb      	str	r3, [r7, #12]
   return(result);
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	f023 0310 	bic.w	r3, r3, #16
 8006d50:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006d52:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	461a      	mov	r2, r3
 8006d58:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006d5a:	61fb      	str	r3, [r7, #28]
 8006d5c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d5e:	69b9      	ldr	r1, [r7, #24]
 8006d60:	69fa      	ldr	r2, [r7, #28]
 8006d62:	e841 2300 	strex	r3, r2, [r1]
 8006d66:	617b      	str	r3, [r7, #20]
   return(result);
 8006d68:	697b      	ldr	r3, [r7, #20]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d1e6      	bne.n	8006d3c <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006d6e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006d70:	2200      	movs	r2, #0
 8006d72:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d74:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006d76:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006d78:	2b01      	cmp	r3, #1
 8006d7a:	d107      	bne.n	8006d8c <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006d7c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006d7e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006d82:	4619      	mov	r1, r3
 8006d84:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006d86:	f7f9 ff4b 	bl	8000c20 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006d8a:	e002      	b.n	8006d92 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8006d8c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006d8e:	f7ff f97d 	bl	800608c <HAL_UART_RxCpltCallback>
}
 8006d92:	bf00      	nop
 8006d94:	3770      	adds	r7, #112	@ 0x70
 8006d96:	46bd      	mov	sp, r7
 8006d98:	bd80      	pop	{r7, pc}

08006d9a <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006d9a:	b580      	push	{r7, lr}
 8006d9c:	b084      	sub	sp, #16
 8006d9e:	af00      	add	r7, sp, #0
 8006da0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006da6:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	2201      	movs	r2, #1
 8006dac:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006db2:	2b01      	cmp	r3, #1
 8006db4:	d109      	bne.n	8006dca <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006dbc:	085b      	lsrs	r3, r3, #1
 8006dbe:	b29b      	uxth	r3, r3
 8006dc0:	4619      	mov	r1, r3
 8006dc2:	68f8      	ldr	r0, [r7, #12]
 8006dc4:	f7f9 ff2c 	bl	8000c20 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006dc8:	e002      	b.n	8006dd0 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8006dca:	68f8      	ldr	r0, [r7, #12]
 8006dcc:	f7ff f968 	bl	80060a0 <HAL_UART_RxHalfCpltCallback>
}
 8006dd0:	bf00      	nop
 8006dd2:	3710      	adds	r7, #16
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	bd80      	pop	{r7, pc}

08006dd8 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b086      	sub	sp, #24
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006de4:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006de6:	697b      	ldr	r3, [r7, #20]
 8006de8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006dec:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006dee:	697b      	ldr	r3, [r7, #20]
 8006df0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006df4:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006df6:	697b      	ldr	r3, [r7, #20]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	689b      	ldr	r3, [r3, #8]
 8006dfc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e00:	2b80      	cmp	r3, #128	@ 0x80
 8006e02:	d109      	bne.n	8006e18 <UART_DMAError+0x40>
 8006e04:	693b      	ldr	r3, [r7, #16]
 8006e06:	2b21      	cmp	r3, #33	@ 0x21
 8006e08:	d106      	bne.n	8006e18 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8006e0a:	697b      	ldr	r3, [r7, #20]
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8006e12:	6978      	ldr	r0, [r7, #20]
 8006e14:	f7ff fe84 	bl	8006b20 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006e18:	697b      	ldr	r3, [r7, #20]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	689b      	ldr	r3, [r3, #8]
 8006e1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e22:	2b40      	cmp	r3, #64	@ 0x40
 8006e24:	d109      	bne.n	8006e3a <UART_DMAError+0x62>
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	2b22      	cmp	r3, #34	@ 0x22
 8006e2a:	d106      	bne.n	8006e3a <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8006e2c:	697b      	ldr	r3, [r7, #20]
 8006e2e:	2200      	movs	r2, #0
 8006e30:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8006e34:	6978      	ldr	r0, [r7, #20]
 8006e36:	f7ff feb4 	bl	8006ba2 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006e3a:	697b      	ldr	r3, [r7, #20]
 8006e3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e40:	f043 0210 	orr.w	r2, r3, #16
 8006e44:	697b      	ldr	r3, [r7, #20]
 8006e46:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006e4a:	6978      	ldr	r0, [r7, #20]
 8006e4c:	f7ff f932 	bl	80060b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006e50:	bf00      	nop
 8006e52:	3718      	adds	r7, #24
 8006e54:	46bd      	mov	sp, r7
 8006e56:	bd80      	pop	{r7, pc}

08006e58 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	b084      	sub	sp, #16
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e64:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	2200      	movs	r2, #0
 8006e6a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006e6e:	68f8      	ldr	r0, [r7, #12]
 8006e70:	f7ff f920 	bl	80060b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006e74:	bf00      	nop
 8006e76:	3710      	adds	r7, #16
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	bd80      	pop	{r7, pc}

08006e7c <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006e7c:	b480      	push	{r7}
 8006e7e:	b08f      	sub	sp, #60	@ 0x3c
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e8a:	2b21      	cmp	r3, #33	@ 0x21
 8006e8c:	d14c      	bne.n	8006f28 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006e94:	b29b      	uxth	r3, r3
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d132      	bne.n	8006f00 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ea0:	6a3b      	ldr	r3, [r7, #32]
 8006ea2:	e853 3f00 	ldrex	r3, [r3]
 8006ea6:	61fb      	str	r3, [r7, #28]
   return(result);
 8006ea8:	69fb      	ldr	r3, [r7, #28]
 8006eaa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006eae:	637b      	str	r3, [r7, #52]	@ 0x34
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	461a      	mov	r2, r3
 8006eb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006eb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006eba:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ebc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006ebe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006ec0:	e841 2300 	strex	r3, r2, [r1]
 8006ec4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d1e6      	bne.n	8006e9a <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	e853 3f00 	ldrex	r3, [r3]
 8006ed8:	60bb      	str	r3, [r7, #8]
   return(result);
 8006eda:	68bb      	ldr	r3, [r7, #8]
 8006edc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006ee0:	633b      	str	r3, [r7, #48]	@ 0x30
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	461a      	mov	r2, r3
 8006ee8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006eea:	61bb      	str	r3, [r7, #24]
 8006eec:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eee:	6979      	ldr	r1, [r7, #20]
 8006ef0:	69ba      	ldr	r2, [r7, #24]
 8006ef2:	e841 2300 	strex	r3, r2, [r1]
 8006ef6:	613b      	str	r3, [r7, #16]
   return(result);
 8006ef8:	693b      	ldr	r3, [r7, #16]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d1e6      	bne.n	8006ecc <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8006efe:	e013      	b.n	8006f28 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f04:	781a      	ldrb	r2, [r3, #0]
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f10:	1c5a      	adds	r2, r3, #1
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006f1c:	b29b      	uxth	r3, r3
 8006f1e:	3b01      	subs	r3, #1
 8006f20:	b29a      	uxth	r2, r3
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 8006f28:	bf00      	nop
 8006f2a:	373c      	adds	r7, #60	@ 0x3c
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f32:	4770      	bx	lr

08006f34 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006f34:	b480      	push	{r7}
 8006f36:	b091      	sub	sp, #68	@ 0x44
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f42:	2b21      	cmp	r3, #33	@ 0x21
 8006f44:	d151      	bne.n	8006fea <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006f4c:	b29b      	uxth	r3, r3
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d132      	bne.n	8006fb8 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f5a:	e853 3f00 	ldrex	r3, [r3]
 8006f5e:	623b      	str	r3, [r7, #32]
   return(result);
 8006f60:	6a3b      	ldr	r3, [r7, #32]
 8006f62:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006f66:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	461a      	mov	r2, r3
 8006f6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f70:	633b      	str	r3, [r7, #48]	@ 0x30
 8006f72:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f74:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006f76:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006f78:	e841 2300 	strex	r3, r2, [r1]
 8006f7c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006f7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d1e6      	bne.n	8006f52 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f8a:	693b      	ldr	r3, [r7, #16]
 8006f8c:	e853 3f00 	ldrex	r3, [r3]
 8006f90:	60fb      	str	r3, [r7, #12]
   return(result);
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006f98:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	461a      	mov	r2, r3
 8006fa0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006fa2:	61fb      	str	r3, [r7, #28]
 8006fa4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fa6:	69b9      	ldr	r1, [r7, #24]
 8006fa8:	69fa      	ldr	r2, [r7, #28]
 8006faa:	e841 2300 	strex	r3, r2, [r1]
 8006fae:	617b      	str	r3, [r7, #20]
   return(result);
 8006fb0:	697b      	ldr	r3, [r7, #20]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d1e6      	bne.n	8006f84 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8006fb6:	e018      	b.n	8006fea <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006fbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8006fbe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006fc0:	881b      	ldrh	r3, [r3, #0]
 8006fc2:	461a      	mov	r2, r3
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006fcc:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006fd2:	1c9a      	adds	r2, r3, #2
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006fde:	b29b      	uxth	r3, r3
 8006fe0:	3b01      	subs	r3, #1
 8006fe2:	b29a      	uxth	r2, r3
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 8006fea:	bf00      	nop
 8006fec:	3744      	adds	r7, #68	@ 0x44
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff4:	4770      	bx	lr

08006ff6 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006ff6:	b480      	push	{r7}
 8006ff8:	b091      	sub	sp, #68	@ 0x44
 8006ffa:	af00      	add	r7, sp, #0
 8006ffc:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007004:	2b21      	cmp	r3, #33	@ 0x21
 8007006:	d160      	bne.n	80070ca <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800700e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8007010:	e057      	b.n	80070c2 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007018:	b29b      	uxth	r3, r3
 800701a:	2b00      	cmp	r3, #0
 800701c:	d133      	bne.n	8007086 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	3308      	adds	r3, #8
 8007024:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007028:	e853 3f00 	ldrex	r3, [r3]
 800702c:	623b      	str	r3, [r7, #32]
   return(result);
 800702e:	6a3b      	ldr	r3, [r7, #32]
 8007030:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8007034:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	3308      	adds	r3, #8
 800703c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800703e:	633a      	str	r2, [r7, #48]	@ 0x30
 8007040:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007042:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007044:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007046:	e841 2300 	strex	r3, r2, [r1]
 800704a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800704c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800704e:	2b00      	cmp	r3, #0
 8007050:	d1e5      	bne.n	800701e <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007058:	693b      	ldr	r3, [r7, #16]
 800705a:	e853 3f00 	ldrex	r3, [r3]
 800705e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007066:	637b      	str	r3, [r7, #52]	@ 0x34
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	461a      	mov	r2, r3
 800706e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007070:	61fb      	str	r3, [r7, #28]
 8007072:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007074:	69b9      	ldr	r1, [r7, #24]
 8007076:	69fa      	ldr	r2, [r7, #28]
 8007078:	e841 2300 	strex	r3, r2, [r1]
 800707c:	617b      	str	r3, [r7, #20]
   return(result);
 800707e:	697b      	ldr	r3, [r7, #20]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d1e6      	bne.n	8007052 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8007084:	e021      	b.n	80070ca <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	69db      	ldr	r3, [r3, #28]
 800708c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007090:	2b00      	cmp	r3, #0
 8007092:	d013      	beq.n	80070bc <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007098:	781a      	ldrb	r2, [r3, #0]
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80070a4:	1c5a      	adds	r2, r3, #1
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80070b0:	b29b      	uxth	r3, r3
 80070b2:	3b01      	subs	r3, #1
 80070b4:	b29a      	uxth	r2, r3
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80070bc:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80070be:	3b01      	subs	r3, #1
 80070c0:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80070c2:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d1a4      	bne.n	8007012 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 80070c8:	e7ff      	b.n	80070ca <UART_TxISR_8BIT_FIFOEN+0xd4>
 80070ca:	bf00      	nop
 80070cc:	3744      	adds	r7, #68	@ 0x44
 80070ce:	46bd      	mov	sp, r7
 80070d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d4:	4770      	bx	lr

080070d6 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80070d6:	b480      	push	{r7}
 80070d8:	b091      	sub	sp, #68	@ 0x44
 80070da:	af00      	add	r7, sp, #0
 80070dc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070e4:	2b21      	cmp	r3, #33	@ 0x21
 80070e6:	d165      	bne.n	80071b4 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80070ee:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80070f0:	e05c      	b.n	80071ac <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80070f8:	b29b      	uxth	r3, r3
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d133      	bne.n	8007166 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	3308      	adds	r3, #8
 8007104:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007106:	6a3b      	ldr	r3, [r7, #32]
 8007108:	e853 3f00 	ldrex	r3, [r3]
 800710c:	61fb      	str	r3, [r7, #28]
   return(result);
 800710e:	69fb      	ldr	r3, [r7, #28]
 8007110:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8007114:	637b      	str	r3, [r7, #52]	@ 0x34
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	3308      	adds	r3, #8
 800711c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800711e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007120:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007122:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007124:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007126:	e841 2300 	strex	r3, r2, [r1]
 800712a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800712c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800712e:	2b00      	cmp	r3, #0
 8007130:	d1e5      	bne.n	80070fe <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	e853 3f00 	ldrex	r3, [r3]
 800713e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007140:	68bb      	ldr	r3, [r7, #8]
 8007142:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007146:	633b      	str	r3, [r7, #48]	@ 0x30
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	461a      	mov	r2, r3
 800714e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007150:	61bb      	str	r3, [r7, #24]
 8007152:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007154:	6979      	ldr	r1, [r7, #20]
 8007156:	69ba      	ldr	r2, [r7, #24]
 8007158:	e841 2300 	strex	r3, r2, [r1]
 800715c:	613b      	str	r3, [r7, #16]
   return(result);
 800715e:	693b      	ldr	r3, [r7, #16]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d1e6      	bne.n	8007132 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8007164:	e026      	b.n	80071b4 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	69db      	ldr	r3, [r3, #28]
 800716c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007170:	2b00      	cmp	r3, #0
 8007172:	d018      	beq.n	80071a6 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007178:	63bb      	str	r3, [r7, #56]	@ 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800717a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800717c:	881b      	ldrh	r3, [r3, #0]
 800717e:	461a      	mov	r2, r3
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007188:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800718e:	1c9a      	adds	r2, r3, #2
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800719a:	b29b      	uxth	r3, r3
 800719c:	3b01      	subs	r3, #1
 800719e:	b29a      	uxth	r2, r3
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80071a6:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80071a8:	3b01      	subs	r3, #1
 80071aa:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80071ac:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d19f      	bne.n	80070f2 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 80071b2:	e7ff      	b.n	80071b4 <UART_TxISR_16BIT_FIFOEN+0xde>
 80071b4:	bf00      	nop
 80071b6:	3744      	adds	r7, #68	@ 0x44
 80071b8:	46bd      	mov	sp, r7
 80071ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071be:	4770      	bx	lr

080071c0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b088      	sub	sp, #32
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	e853 3f00 	ldrex	r3, [r3]
 80071d4:	60bb      	str	r3, [r7, #8]
   return(result);
 80071d6:	68bb      	ldr	r3, [r7, #8]
 80071d8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80071dc:	61fb      	str	r3, [r7, #28]
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	461a      	mov	r2, r3
 80071e4:	69fb      	ldr	r3, [r7, #28]
 80071e6:	61bb      	str	r3, [r7, #24]
 80071e8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071ea:	6979      	ldr	r1, [r7, #20]
 80071ec:	69ba      	ldr	r2, [r7, #24]
 80071ee:	e841 2300 	strex	r3, r2, [r1]
 80071f2:	613b      	str	r3, [r7, #16]
   return(result);
 80071f4:	693b      	ldr	r3, [r7, #16]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d1e6      	bne.n	80071c8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	2220      	movs	r2, #32
 80071fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	2200      	movs	r2, #0
 8007206:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007208:	6878      	ldr	r0, [r7, #4]
 800720a:	f7f9 fd5f 	bl	8000ccc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800720e:	bf00      	nop
 8007210:	3720      	adds	r7, #32
 8007212:	46bd      	mov	sp, r7
 8007214:	bd80      	pop	{r7, pc}

08007216 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007216:	b480      	push	{r7}
 8007218:	b083      	sub	sp, #12
 800721a:	af00      	add	r7, sp, #0
 800721c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800721e:	bf00      	nop
 8007220:	370c      	adds	r7, #12
 8007222:	46bd      	mov	sp, r7
 8007224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007228:	4770      	bx	lr

0800722a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800722a:	b480      	push	{r7}
 800722c:	b083      	sub	sp, #12
 800722e:	af00      	add	r7, sp, #0
 8007230:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007232:	bf00      	nop
 8007234:	370c      	adds	r7, #12
 8007236:	46bd      	mov	sp, r7
 8007238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723c:	4770      	bx	lr

0800723e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800723e:	b480      	push	{r7}
 8007240:	b083      	sub	sp, #12
 8007242:	af00      	add	r7, sp, #0
 8007244:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007246:	bf00      	nop
 8007248:	370c      	adds	r7, #12
 800724a:	46bd      	mov	sp, r7
 800724c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007250:	4770      	bx	lr

08007252 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007252:	b480      	push	{r7}
 8007254:	b085      	sub	sp, #20
 8007256:	af00      	add	r7, sp, #0
 8007258:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007260:	2b01      	cmp	r3, #1
 8007262:	d101      	bne.n	8007268 <HAL_UARTEx_DisableFifoMode+0x16>
 8007264:	2302      	movs	r3, #2
 8007266:	e027      	b.n	80072b8 <HAL_UARTEx_DisableFifoMode+0x66>
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2201      	movs	r2, #1
 800726c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2224      	movs	r2, #36	@ 0x24
 8007274:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	681a      	ldr	r2, [r3, #0]
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	f022 0201 	bic.w	r2, r2, #1
 800728e:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007296:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2200      	movs	r2, #0
 800729c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	68fa      	ldr	r2, [r7, #12]
 80072a4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	2220      	movs	r2, #32
 80072aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	2200      	movs	r2, #0
 80072b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80072b6:	2300      	movs	r3, #0
}
 80072b8:	4618      	mov	r0, r3
 80072ba:	3714      	adds	r7, #20
 80072bc:	46bd      	mov	sp, r7
 80072be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c2:	4770      	bx	lr

080072c4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b084      	sub	sp, #16
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
 80072cc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80072d4:	2b01      	cmp	r3, #1
 80072d6:	d101      	bne.n	80072dc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80072d8:	2302      	movs	r3, #2
 80072da:	e02d      	b.n	8007338 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2201      	movs	r2, #1
 80072e0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2224      	movs	r2, #36	@ 0x24
 80072e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	681a      	ldr	r2, [r3, #0]
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	f022 0201 	bic.w	r2, r2, #1
 8007302:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	689b      	ldr	r3, [r3, #8]
 800730a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	683a      	ldr	r2, [r7, #0]
 8007314:	430a      	orrs	r2, r1
 8007316:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007318:	6878      	ldr	r0, [r7, #4]
 800731a:	f000 f8a3 	bl	8007464 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	68fa      	ldr	r2, [r7, #12]
 8007324:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	2220      	movs	r2, #32
 800732a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	2200      	movs	r2, #0
 8007332:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007336:	2300      	movs	r3, #0
}
 8007338:	4618      	mov	r0, r3
 800733a:	3710      	adds	r7, #16
 800733c:	46bd      	mov	sp, r7
 800733e:	bd80      	pop	{r7, pc}

08007340 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007340:	b580      	push	{r7, lr}
 8007342:	b084      	sub	sp, #16
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]
 8007348:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007350:	2b01      	cmp	r3, #1
 8007352:	d101      	bne.n	8007358 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007354:	2302      	movs	r3, #2
 8007356:	e02d      	b.n	80073b4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	2201      	movs	r2, #1
 800735c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	2224      	movs	r2, #36	@ 0x24
 8007364:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	681a      	ldr	r2, [r3, #0]
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	f022 0201 	bic.w	r2, r2, #1
 800737e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	689b      	ldr	r3, [r3, #8]
 8007386:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	683a      	ldr	r2, [r7, #0]
 8007390:	430a      	orrs	r2, r1
 8007392:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007394:	6878      	ldr	r0, [r7, #4]
 8007396:	f000 f865 	bl	8007464 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	68fa      	ldr	r2, [r7, #12]
 80073a0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	2220      	movs	r2, #32
 80073a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	2200      	movs	r2, #0
 80073ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80073b2:	2300      	movs	r3, #0
}
 80073b4:	4618      	mov	r0, r3
 80073b6:	3710      	adds	r7, #16
 80073b8:	46bd      	mov	sp, r7
 80073ba:	bd80      	pop	{r7, pc}

080073bc <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80073bc:	b580      	push	{r7, lr}
 80073be:	b08c      	sub	sp, #48	@ 0x30
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	60f8      	str	r0, [r7, #12]
 80073c4:	60b9      	str	r1, [r7, #8]
 80073c6:	4613      	mov	r3, r2
 80073c8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80073d0:	2b20      	cmp	r3, #32
 80073d2:	d142      	bne.n	800745a <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 80073d4:	68bb      	ldr	r3, [r7, #8]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d002      	beq.n	80073e0 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 80073da:	88fb      	ldrh	r3, [r7, #6]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d101      	bne.n	80073e4 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 80073e0:	2301      	movs	r3, #1
 80073e2:	e03b      	b.n	800745c <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	2201      	movs	r2, #1
 80073e8:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	2200      	movs	r2, #0
 80073ee:	671a      	str	r2, [r3, #112]	@ 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80073f0:	88fb      	ldrh	r3, [r7, #6]
 80073f2:	461a      	mov	r2, r3
 80073f4:	68b9      	ldr	r1, [r7, #8]
 80073f6:	68f8      	ldr	r0, [r7, #12]
 80073f8:	f7ff faec 	bl	80069d4 <UART_Start_Receive_DMA>
 80073fc:	4603      	mov	r3, r0
 80073fe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8007402:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007406:	2b00      	cmp	r3, #0
 8007408:	d124      	bne.n	8007454 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800740e:	2b01      	cmp	r3, #1
 8007410:	d11d      	bne.n	800744e <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	2210      	movs	r2, #16
 8007418:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007420:	69bb      	ldr	r3, [r7, #24]
 8007422:	e853 3f00 	ldrex	r3, [r3]
 8007426:	617b      	str	r3, [r7, #20]
   return(result);
 8007428:	697b      	ldr	r3, [r7, #20]
 800742a:	f043 0310 	orr.w	r3, r3, #16
 800742e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	461a      	mov	r2, r3
 8007436:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007438:	627b      	str	r3, [r7, #36]	@ 0x24
 800743a:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800743c:	6a39      	ldr	r1, [r7, #32]
 800743e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007440:	e841 2300 	strex	r3, r2, [r1]
 8007444:	61fb      	str	r3, [r7, #28]
   return(result);
 8007446:	69fb      	ldr	r3, [r7, #28]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d1e6      	bne.n	800741a <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 800744c:	e002      	b.n	8007454 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800744e:	2301      	movs	r3, #1
 8007450:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8007454:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007458:	e000      	b.n	800745c <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800745a:	2302      	movs	r3, #2
  }
}
 800745c:	4618      	mov	r0, r3
 800745e:	3730      	adds	r7, #48	@ 0x30
 8007460:	46bd      	mov	sp, r7
 8007462:	bd80      	pop	{r7, pc}

08007464 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007464:	b480      	push	{r7}
 8007466:	b085      	sub	sp, #20
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007470:	2b00      	cmp	r3, #0
 8007472:	d108      	bne.n	8007486 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2201      	movs	r2, #1
 8007478:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2201      	movs	r2, #1
 8007480:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007484:	e031      	b.n	80074ea <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007486:	2308      	movs	r3, #8
 8007488:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800748a:	2308      	movs	r3, #8
 800748c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	689b      	ldr	r3, [r3, #8]
 8007494:	0e5b      	lsrs	r3, r3, #25
 8007496:	b2db      	uxtb	r3, r3
 8007498:	f003 0307 	and.w	r3, r3, #7
 800749c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	689b      	ldr	r3, [r3, #8]
 80074a4:	0f5b      	lsrs	r3, r3, #29
 80074a6:	b2db      	uxtb	r3, r3
 80074a8:	f003 0307 	and.w	r3, r3, #7
 80074ac:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80074ae:	7bbb      	ldrb	r3, [r7, #14]
 80074b0:	7b3a      	ldrb	r2, [r7, #12]
 80074b2:	4911      	ldr	r1, [pc, #68]	@ (80074f8 <UARTEx_SetNbDataToProcess+0x94>)
 80074b4:	5c8a      	ldrb	r2, [r1, r2]
 80074b6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80074ba:	7b3a      	ldrb	r2, [r7, #12]
 80074bc:	490f      	ldr	r1, [pc, #60]	@ (80074fc <UARTEx_SetNbDataToProcess+0x98>)
 80074be:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80074c0:	fb93 f3f2 	sdiv	r3, r3, r2
 80074c4:	b29a      	uxth	r2, r3
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80074cc:	7bfb      	ldrb	r3, [r7, #15]
 80074ce:	7b7a      	ldrb	r2, [r7, #13]
 80074d0:	4909      	ldr	r1, [pc, #36]	@ (80074f8 <UARTEx_SetNbDataToProcess+0x94>)
 80074d2:	5c8a      	ldrb	r2, [r1, r2]
 80074d4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80074d8:	7b7a      	ldrb	r2, [r7, #13]
 80074da:	4908      	ldr	r1, [pc, #32]	@ (80074fc <UARTEx_SetNbDataToProcess+0x98>)
 80074dc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80074de:	fb93 f3f2 	sdiv	r3, r3, r2
 80074e2:	b29a      	uxth	r2, r3
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80074ea:	bf00      	nop
 80074ec:	3714      	adds	r7, #20
 80074ee:	46bd      	mov	sp, r7
 80074f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f4:	4770      	bx	lr
 80074f6:	bf00      	nop
 80074f8:	0800c680 	.word	0x0800c680
 80074fc:	0800c688 	.word	0x0800c688

08007500 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8007500:	b480      	push	{r7}
 8007502:	b085      	sub	sp, #20
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2200      	movs	r2, #0
 800750c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007510:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8007514:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	b29a      	uxth	r2, r3
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8007520:	2300      	movs	r3, #0
}
 8007522:	4618      	mov	r0, r3
 8007524:	3714      	adds	r7, #20
 8007526:	46bd      	mov	sp, r7
 8007528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752c:	4770      	bx	lr

0800752e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800752e:	b480      	push	{r7}
 8007530:	b085      	sub	sp, #20
 8007532:	af00      	add	r7, sp, #0
 8007534:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007536:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800753a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8007542:	b29a      	uxth	r2, r3
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	b29b      	uxth	r3, r3
 8007548:	43db      	mvns	r3, r3
 800754a:	b29b      	uxth	r3, r3
 800754c:	4013      	ands	r3, r2
 800754e:	b29a      	uxth	r2, r3
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8007556:	2300      	movs	r3, #0
}
 8007558:	4618      	mov	r0, r3
 800755a:	3714      	adds	r7, #20
 800755c:	46bd      	mov	sp, r7
 800755e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007562:	4770      	bx	lr

08007564 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007564:	b480      	push	{r7}
 8007566:	b085      	sub	sp, #20
 8007568:	af00      	add	r7, sp, #0
 800756a:	60f8      	str	r0, [r7, #12]
 800756c:	1d3b      	adds	r3, r7, #4
 800756e:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	2201      	movs	r2, #1
 8007576:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	2200      	movs	r2, #0
 800757e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	2200      	movs	r2, #0
 8007586:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	2200      	movs	r2, #0
 800758e:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8007592:	2300      	movs	r3, #0
}
 8007594:	4618      	mov	r0, r3
 8007596:	3714      	adds	r7, #20
 8007598:	46bd      	mov	sp, r7
 800759a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759e:	4770      	bx	lr

080075a0 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80075a0:	b480      	push	{r7}
 80075a2:	b0a7      	sub	sp, #156	@ 0x9c
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
 80075a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80075aa:	2300      	movs	r3, #0
 80075ac:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80075b0:	687a      	ldr	r2, [r7, #4]
 80075b2:	683b      	ldr	r3, [r7, #0]
 80075b4:	781b      	ldrb	r3, [r3, #0]
 80075b6:	009b      	lsls	r3, r3, #2
 80075b8:	4413      	add	r3, r2
 80075ba:	881b      	ldrh	r3, [r3, #0]
 80075bc:	b29b      	uxth	r3, r3
 80075be:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 80075c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80075c6:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94

  /* initialize Endpoint */
  switch (ep->type)
 80075ca:	683b      	ldr	r3, [r7, #0]
 80075cc:	78db      	ldrb	r3, [r3, #3]
 80075ce:	2b03      	cmp	r3, #3
 80075d0:	d81f      	bhi.n	8007612 <USB_ActivateEndpoint+0x72>
 80075d2:	a201      	add	r2, pc, #4	@ (adr r2, 80075d8 <USB_ActivateEndpoint+0x38>)
 80075d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075d8:	080075e9 	.word	0x080075e9
 80075dc:	08007605 	.word	0x08007605
 80075e0:	0800761b 	.word	0x0800761b
 80075e4:	080075f7 	.word	0x080075f7
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80075e8:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80075ec:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80075f0:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 80075f4:	e012      	b.n	800761c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80075f6:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80075fa:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 80075fe:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 8007602:	e00b      	b.n	800761c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8007604:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8007608:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800760c:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 8007610:	e004      	b.n	800761c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8007612:	2301      	movs	r3, #1
 8007614:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
      break;
 8007618:	e000      	b.n	800761c <USB_ActivateEndpoint+0x7c>
      break;
 800761a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800761c:	687a      	ldr	r2, [r7, #4]
 800761e:	683b      	ldr	r3, [r7, #0]
 8007620:	781b      	ldrb	r3, [r3, #0]
 8007622:	009b      	lsls	r3, r3, #2
 8007624:	441a      	add	r2, r3
 8007626:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800762a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800762e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007632:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007636:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800763a:	b29b      	uxth	r3, r3
 800763c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800763e:	687a      	ldr	r2, [r7, #4]
 8007640:	683b      	ldr	r3, [r7, #0]
 8007642:	781b      	ldrb	r3, [r3, #0]
 8007644:	009b      	lsls	r3, r3, #2
 8007646:	4413      	add	r3, r2
 8007648:	881b      	ldrh	r3, [r3, #0]
 800764a:	b29b      	uxth	r3, r3
 800764c:	b21b      	sxth	r3, r3
 800764e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007652:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007656:	b21a      	sxth	r2, r3
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	781b      	ldrb	r3, [r3, #0]
 800765c:	b21b      	sxth	r3, r3
 800765e:	4313      	orrs	r3, r2
 8007660:	b21b      	sxth	r3, r3
 8007662:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
 8007666:	687a      	ldr	r2, [r7, #4]
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	781b      	ldrb	r3, [r3, #0]
 800766c:	009b      	lsls	r3, r3, #2
 800766e:	441a      	add	r2, r3
 8007670:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8007674:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007678:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800767c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007680:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007684:	b29b      	uxth	r3, r3
 8007686:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	7b1b      	ldrb	r3, [r3, #12]
 800768c:	2b00      	cmp	r3, #0
 800768e:	f040 8180 	bne.w	8007992 <USB_ActivateEndpoint+0x3f2>
  {
    if (ep->is_in != 0U)
 8007692:	683b      	ldr	r3, [r7, #0]
 8007694:	785b      	ldrb	r3, [r3, #1]
 8007696:	2b00      	cmp	r3, #0
 8007698:	f000 8084 	beq.w	80077a4 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	61bb      	str	r3, [r7, #24]
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80076a6:	b29b      	uxth	r3, r3
 80076a8:	461a      	mov	r2, r3
 80076aa:	69bb      	ldr	r3, [r7, #24]
 80076ac:	4413      	add	r3, r2
 80076ae:	61bb      	str	r3, [r7, #24]
 80076b0:	683b      	ldr	r3, [r7, #0]
 80076b2:	781b      	ldrb	r3, [r3, #0]
 80076b4:	00da      	lsls	r2, r3, #3
 80076b6:	69bb      	ldr	r3, [r7, #24]
 80076b8:	4413      	add	r3, r2
 80076ba:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80076be:	617b      	str	r3, [r7, #20]
 80076c0:	683b      	ldr	r3, [r7, #0]
 80076c2:	88db      	ldrh	r3, [r3, #6]
 80076c4:	085b      	lsrs	r3, r3, #1
 80076c6:	b29b      	uxth	r3, r3
 80076c8:	005b      	lsls	r3, r3, #1
 80076ca:	b29a      	uxth	r2, r3
 80076cc:	697b      	ldr	r3, [r7, #20]
 80076ce:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80076d0:	687a      	ldr	r2, [r7, #4]
 80076d2:	683b      	ldr	r3, [r7, #0]
 80076d4:	781b      	ldrb	r3, [r3, #0]
 80076d6:	009b      	lsls	r3, r3, #2
 80076d8:	4413      	add	r3, r2
 80076da:	881b      	ldrh	r3, [r3, #0]
 80076dc:	827b      	strh	r3, [r7, #18]
 80076de:	8a7b      	ldrh	r3, [r7, #18]
 80076e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d01b      	beq.n	8007720 <USB_ActivateEndpoint+0x180>
 80076e8:	687a      	ldr	r2, [r7, #4]
 80076ea:	683b      	ldr	r3, [r7, #0]
 80076ec:	781b      	ldrb	r3, [r3, #0]
 80076ee:	009b      	lsls	r3, r3, #2
 80076f0:	4413      	add	r3, r2
 80076f2:	881b      	ldrh	r3, [r3, #0]
 80076f4:	b29b      	uxth	r3, r3
 80076f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80076fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80076fe:	823b      	strh	r3, [r7, #16]
 8007700:	687a      	ldr	r2, [r7, #4]
 8007702:	683b      	ldr	r3, [r7, #0]
 8007704:	781b      	ldrb	r3, [r3, #0]
 8007706:	009b      	lsls	r3, r3, #2
 8007708:	441a      	add	r2, r3
 800770a:	8a3b      	ldrh	r3, [r7, #16]
 800770c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007710:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007714:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007718:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800771c:	b29b      	uxth	r3, r3
 800771e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007720:	683b      	ldr	r3, [r7, #0]
 8007722:	78db      	ldrb	r3, [r3, #3]
 8007724:	2b01      	cmp	r3, #1
 8007726:	d020      	beq.n	800776a <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007728:	687a      	ldr	r2, [r7, #4]
 800772a:	683b      	ldr	r3, [r7, #0]
 800772c:	781b      	ldrb	r3, [r3, #0]
 800772e:	009b      	lsls	r3, r3, #2
 8007730:	4413      	add	r3, r2
 8007732:	881b      	ldrh	r3, [r3, #0]
 8007734:	b29b      	uxth	r3, r3
 8007736:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800773a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800773e:	81bb      	strh	r3, [r7, #12]
 8007740:	89bb      	ldrh	r3, [r7, #12]
 8007742:	f083 0320 	eor.w	r3, r3, #32
 8007746:	81bb      	strh	r3, [r7, #12]
 8007748:	687a      	ldr	r2, [r7, #4]
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	781b      	ldrb	r3, [r3, #0]
 800774e:	009b      	lsls	r3, r3, #2
 8007750:	441a      	add	r2, r3
 8007752:	89bb      	ldrh	r3, [r7, #12]
 8007754:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007758:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800775c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007760:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007764:	b29b      	uxth	r3, r3
 8007766:	8013      	strh	r3, [r2, #0]
 8007768:	e3f9      	b.n	8007f5e <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800776a:	687a      	ldr	r2, [r7, #4]
 800776c:	683b      	ldr	r3, [r7, #0]
 800776e:	781b      	ldrb	r3, [r3, #0]
 8007770:	009b      	lsls	r3, r3, #2
 8007772:	4413      	add	r3, r2
 8007774:	881b      	ldrh	r3, [r3, #0]
 8007776:	b29b      	uxth	r3, r3
 8007778:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800777c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007780:	81fb      	strh	r3, [r7, #14]
 8007782:	687a      	ldr	r2, [r7, #4]
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	781b      	ldrb	r3, [r3, #0]
 8007788:	009b      	lsls	r3, r3, #2
 800778a:	441a      	add	r2, r3
 800778c:	89fb      	ldrh	r3, [r7, #14]
 800778e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007792:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007796:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800779a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800779e:	b29b      	uxth	r3, r3
 80077a0:	8013      	strh	r3, [r2, #0]
 80077a2:	e3dc      	b.n	8007f5e <USB_ActivateEndpoint+0x9be>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	633b      	str	r3, [r7, #48]	@ 0x30
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80077ae:	b29b      	uxth	r3, r3
 80077b0:	461a      	mov	r2, r3
 80077b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077b4:	4413      	add	r3, r2
 80077b6:	633b      	str	r3, [r7, #48]	@ 0x30
 80077b8:	683b      	ldr	r3, [r7, #0]
 80077ba:	781b      	ldrb	r3, [r3, #0]
 80077bc:	00da      	lsls	r2, r3, #3
 80077be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077c0:	4413      	add	r3, r2
 80077c2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80077c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80077c8:	683b      	ldr	r3, [r7, #0]
 80077ca:	88db      	ldrh	r3, [r3, #6]
 80077cc:	085b      	lsrs	r3, r3, #1
 80077ce:	b29b      	uxth	r3, r3
 80077d0:	005b      	lsls	r3, r3, #1
 80077d2:	b29a      	uxth	r2, r3
 80077d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077d6:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	62bb      	str	r3, [r7, #40]	@ 0x28
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80077e2:	b29b      	uxth	r3, r3
 80077e4:	461a      	mov	r2, r3
 80077e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077e8:	4413      	add	r3, r2
 80077ea:	62bb      	str	r3, [r7, #40]	@ 0x28
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	781b      	ldrb	r3, [r3, #0]
 80077f0:	00da      	lsls	r2, r3, #3
 80077f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077f4:	4413      	add	r3, r2
 80077f6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80077fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80077fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077fe:	881b      	ldrh	r3, [r3, #0]
 8007800:	b29b      	uxth	r3, r3
 8007802:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007806:	b29a      	uxth	r2, r3
 8007808:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800780a:	801a      	strh	r2, [r3, #0]
 800780c:	683b      	ldr	r3, [r7, #0]
 800780e:	691b      	ldr	r3, [r3, #16]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d10a      	bne.n	800782a <USB_ActivateEndpoint+0x28a>
 8007814:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007816:	881b      	ldrh	r3, [r3, #0]
 8007818:	b29b      	uxth	r3, r3
 800781a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800781e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007822:	b29a      	uxth	r2, r3
 8007824:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007826:	801a      	strh	r2, [r3, #0]
 8007828:	e041      	b.n	80078ae <USB_ActivateEndpoint+0x30e>
 800782a:	683b      	ldr	r3, [r7, #0]
 800782c:	691b      	ldr	r3, [r3, #16]
 800782e:	2b3e      	cmp	r3, #62	@ 0x3e
 8007830:	d81c      	bhi.n	800786c <USB_ActivateEndpoint+0x2cc>
 8007832:	683b      	ldr	r3, [r7, #0]
 8007834:	691b      	ldr	r3, [r3, #16]
 8007836:	085b      	lsrs	r3, r3, #1
 8007838:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800783c:	683b      	ldr	r3, [r7, #0]
 800783e:	691b      	ldr	r3, [r3, #16]
 8007840:	f003 0301 	and.w	r3, r3, #1
 8007844:	2b00      	cmp	r3, #0
 8007846:	d004      	beq.n	8007852 <USB_ActivateEndpoint+0x2b2>
 8007848:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800784c:	3301      	adds	r3, #1
 800784e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007854:	881b      	ldrh	r3, [r3, #0]
 8007856:	b29a      	uxth	r2, r3
 8007858:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800785c:	b29b      	uxth	r3, r3
 800785e:	029b      	lsls	r3, r3, #10
 8007860:	b29b      	uxth	r3, r3
 8007862:	4313      	orrs	r3, r2
 8007864:	b29a      	uxth	r2, r3
 8007866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007868:	801a      	strh	r2, [r3, #0]
 800786a:	e020      	b.n	80078ae <USB_ActivateEndpoint+0x30e>
 800786c:	683b      	ldr	r3, [r7, #0]
 800786e:	691b      	ldr	r3, [r3, #16]
 8007870:	095b      	lsrs	r3, r3, #5
 8007872:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007876:	683b      	ldr	r3, [r7, #0]
 8007878:	691b      	ldr	r3, [r3, #16]
 800787a:	f003 031f 	and.w	r3, r3, #31
 800787e:	2b00      	cmp	r3, #0
 8007880:	d104      	bne.n	800788c <USB_ActivateEndpoint+0x2ec>
 8007882:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007886:	3b01      	subs	r3, #1
 8007888:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800788c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800788e:	881b      	ldrh	r3, [r3, #0]
 8007890:	b29a      	uxth	r2, r3
 8007892:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007896:	b29b      	uxth	r3, r3
 8007898:	029b      	lsls	r3, r3, #10
 800789a:	b29b      	uxth	r3, r3
 800789c:	4313      	orrs	r3, r2
 800789e:	b29b      	uxth	r3, r3
 80078a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80078a8:	b29a      	uxth	r2, r3
 80078aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078ac:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80078ae:	687a      	ldr	r2, [r7, #4]
 80078b0:	683b      	ldr	r3, [r7, #0]
 80078b2:	781b      	ldrb	r3, [r3, #0]
 80078b4:	009b      	lsls	r3, r3, #2
 80078b6:	4413      	add	r3, r2
 80078b8:	881b      	ldrh	r3, [r3, #0]
 80078ba:	847b      	strh	r3, [r7, #34]	@ 0x22
 80078bc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80078be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d01b      	beq.n	80078fe <USB_ActivateEndpoint+0x35e>
 80078c6:	687a      	ldr	r2, [r7, #4]
 80078c8:	683b      	ldr	r3, [r7, #0]
 80078ca:	781b      	ldrb	r3, [r3, #0]
 80078cc:	009b      	lsls	r3, r3, #2
 80078ce:	4413      	add	r3, r2
 80078d0:	881b      	ldrh	r3, [r3, #0]
 80078d2:	b29b      	uxth	r3, r3
 80078d4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80078d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80078dc:	843b      	strh	r3, [r7, #32]
 80078de:	687a      	ldr	r2, [r7, #4]
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	781b      	ldrb	r3, [r3, #0]
 80078e4:	009b      	lsls	r3, r3, #2
 80078e6:	441a      	add	r2, r3
 80078e8:	8c3b      	ldrh	r3, [r7, #32]
 80078ea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80078ee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80078f2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80078f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80078fa:	b29b      	uxth	r3, r3
 80078fc:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 80078fe:	683b      	ldr	r3, [r7, #0]
 8007900:	781b      	ldrb	r3, [r3, #0]
 8007902:	2b00      	cmp	r3, #0
 8007904:	d124      	bne.n	8007950 <USB_ActivateEndpoint+0x3b0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007906:	687a      	ldr	r2, [r7, #4]
 8007908:	683b      	ldr	r3, [r7, #0]
 800790a:	781b      	ldrb	r3, [r3, #0]
 800790c:	009b      	lsls	r3, r3, #2
 800790e:	4413      	add	r3, r2
 8007910:	881b      	ldrh	r3, [r3, #0]
 8007912:	b29b      	uxth	r3, r3
 8007914:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007918:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800791c:	83bb      	strh	r3, [r7, #28]
 800791e:	8bbb      	ldrh	r3, [r7, #28]
 8007920:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007924:	83bb      	strh	r3, [r7, #28]
 8007926:	8bbb      	ldrh	r3, [r7, #28]
 8007928:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800792c:	83bb      	strh	r3, [r7, #28]
 800792e:	687a      	ldr	r2, [r7, #4]
 8007930:	683b      	ldr	r3, [r7, #0]
 8007932:	781b      	ldrb	r3, [r3, #0]
 8007934:	009b      	lsls	r3, r3, #2
 8007936:	441a      	add	r2, r3
 8007938:	8bbb      	ldrh	r3, [r7, #28]
 800793a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800793e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007942:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007946:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800794a:	b29b      	uxth	r3, r3
 800794c:	8013      	strh	r3, [r2, #0]
 800794e:	e306      	b.n	8007f5e <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8007950:	687a      	ldr	r2, [r7, #4]
 8007952:	683b      	ldr	r3, [r7, #0]
 8007954:	781b      	ldrb	r3, [r3, #0]
 8007956:	009b      	lsls	r3, r3, #2
 8007958:	4413      	add	r3, r2
 800795a:	881b      	ldrh	r3, [r3, #0]
 800795c:	b29b      	uxth	r3, r3
 800795e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007962:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007966:	83fb      	strh	r3, [r7, #30]
 8007968:	8bfb      	ldrh	r3, [r7, #30]
 800796a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800796e:	83fb      	strh	r3, [r7, #30]
 8007970:	687a      	ldr	r2, [r7, #4]
 8007972:	683b      	ldr	r3, [r7, #0]
 8007974:	781b      	ldrb	r3, [r3, #0]
 8007976:	009b      	lsls	r3, r3, #2
 8007978:	441a      	add	r2, r3
 800797a:	8bfb      	ldrh	r3, [r7, #30]
 800797c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007980:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007984:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007988:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800798c:	b29b      	uxth	r3, r3
 800798e:	8013      	strh	r3, [r2, #0]
 8007990:	e2e5      	b.n	8007f5e <USB_ActivateEndpoint+0x9be>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8007992:	683b      	ldr	r3, [r7, #0]
 8007994:	78db      	ldrb	r3, [r3, #3]
 8007996:	2b02      	cmp	r3, #2
 8007998:	d11e      	bne.n	80079d8 <USB_ActivateEndpoint+0x438>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800799a:	687a      	ldr	r2, [r7, #4]
 800799c:	683b      	ldr	r3, [r7, #0]
 800799e:	781b      	ldrb	r3, [r3, #0]
 80079a0:	009b      	lsls	r3, r3, #2
 80079a2:	4413      	add	r3, r2
 80079a4:	881b      	ldrh	r3, [r3, #0]
 80079a6:	b29b      	uxth	r3, r3
 80079a8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80079ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80079b0:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 80079b4:	687a      	ldr	r2, [r7, #4]
 80079b6:	683b      	ldr	r3, [r7, #0]
 80079b8:	781b      	ldrb	r3, [r3, #0]
 80079ba:	009b      	lsls	r3, r3, #2
 80079bc:	441a      	add	r2, r3
 80079be:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 80079c2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80079c6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80079ca:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80079ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80079d2:	b29b      	uxth	r3, r3
 80079d4:	8013      	strh	r3, [r2, #0]
 80079d6:	e01d      	b.n	8007a14 <USB_ActivateEndpoint+0x474>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80079d8:	687a      	ldr	r2, [r7, #4]
 80079da:	683b      	ldr	r3, [r7, #0]
 80079dc:	781b      	ldrb	r3, [r3, #0]
 80079de:	009b      	lsls	r3, r3, #2
 80079e0:	4413      	add	r3, r2
 80079e2:	881b      	ldrh	r3, [r3, #0]
 80079e4:	b29b      	uxth	r3, r3
 80079e6:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80079ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80079ee:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
 80079f2:	687a      	ldr	r2, [r7, #4]
 80079f4:	683b      	ldr	r3, [r7, #0]
 80079f6:	781b      	ldrb	r3, [r3, #0]
 80079f8:	009b      	lsls	r3, r3, #2
 80079fa:	441a      	add	r2, r3
 80079fc:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 8007a00:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007a04:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007a08:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007a0c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007a10:	b29b      	uxth	r3, r3
 8007a12:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007a1e:	b29b      	uxth	r3, r3
 8007a20:	461a      	mov	r2, r3
 8007a22:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007a24:	4413      	add	r3, r2
 8007a26:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007a28:	683b      	ldr	r3, [r7, #0]
 8007a2a:	781b      	ldrb	r3, [r3, #0]
 8007a2c:	00da      	lsls	r2, r3, #3
 8007a2e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007a30:	4413      	add	r3, r2
 8007a32:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007a36:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	891b      	ldrh	r3, [r3, #8]
 8007a3c:	085b      	lsrs	r3, r3, #1
 8007a3e:	b29b      	uxth	r3, r3
 8007a40:	005b      	lsls	r3, r3, #1
 8007a42:	b29a      	uxth	r2, r3
 8007a44:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007a46:	801a      	strh	r2, [r3, #0]
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	677b      	str	r3, [r7, #116]	@ 0x74
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007a52:	b29b      	uxth	r3, r3
 8007a54:	461a      	mov	r2, r3
 8007a56:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007a58:	4413      	add	r3, r2
 8007a5a:	677b      	str	r3, [r7, #116]	@ 0x74
 8007a5c:	683b      	ldr	r3, [r7, #0]
 8007a5e:	781b      	ldrb	r3, [r3, #0]
 8007a60:	00da      	lsls	r2, r3, #3
 8007a62:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007a64:	4413      	add	r3, r2
 8007a66:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007a6a:	673b      	str	r3, [r7, #112]	@ 0x70
 8007a6c:	683b      	ldr	r3, [r7, #0]
 8007a6e:	895b      	ldrh	r3, [r3, #10]
 8007a70:	085b      	lsrs	r3, r3, #1
 8007a72:	b29b      	uxth	r3, r3
 8007a74:	005b      	lsls	r3, r3, #1
 8007a76:	b29a      	uxth	r2, r3
 8007a78:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007a7a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8007a7c:	683b      	ldr	r3, [r7, #0]
 8007a7e:	785b      	ldrb	r3, [r3, #1]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	f040 81af 	bne.w	8007de4 <USB_ActivateEndpoint+0x844>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007a86:	687a      	ldr	r2, [r7, #4]
 8007a88:	683b      	ldr	r3, [r7, #0]
 8007a8a:	781b      	ldrb	r3, [r3, #0]
 8007a8c:	009b      	lsls	r3, r3, #2
 8007a8e:	4413      	add	r3, r2
 8007a90:	881b      	ldrh	r3, [r3, #0]
 8007a92:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
 8007a96:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 8007a9a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d01d      	beq.n	8007ade <USB_ActivateEndpoint+0x53e>
 8007aa2:	687a      	ldr	r2, [r7, #4]
 8007aa4:	683b      	ldr	r3, [r7, #0]
 8007aa6:	781b      	ldrb	r3, [r3, #0]
 8007aa8:	009b      	lsls	r3, r3, #2
 8007aaa:	4413      	add	r3, r2
 8007aac:	881b      	ldrh	r3, [r3, #0]
 8007aae:	b29b      	uxth	r3, r3
 8007ab0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007ab4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007ab8:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 8007abc:	687a      	ldr	r2, [r7, #4]
 8007abe:	683b      	ldr	r3, [r7, #0]
 8007ac0:	781b      	ldrb	r3, [r3, #0]
 8007ac2:	009b      	lsls	r3, r3, #2
 8007ac4:	441a      	add	r2, r3
 8007ac6:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8007aca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007ace:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007ad2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007ad6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007ada:	b29b      	uxth	r3, r3
 8007adc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007ade:	687a      	ldr	r2, [r7, #4]
 8007ae0:	683b      	ldr	r3, [r7, #0]
 8007ae2:	781b      	ldrb	r3, [r3, #0]
 8007ae4:	009b      	lsls	r3, r3, #2
 8007ae6:	4413      	add	r3, r2
 8007ae8:	881b      	ldrh	r3, [r3, #0]
 8007aea:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 8007aee:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 8007af2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d01d      	beq.n	8007b36 <USB_ActivateEndpoint+0x596>
 8007afa:	687a      	ldr	r2, [r7, #4]
 8007afc:	683b      	ldr	r3, [r7, #0]
 8007afe:	781b      	ldrb	r3, [r3, #0]
 8007b00:	009b      	lsls	r3, r3, #2
 8007b02:	4413      	add	r3, r2
 8007b04:	881b      	ldrh	r3, [r3, #0]
 8007b06:	b29b      	uxth	r3, r3
 8007b08:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007b0c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007b10:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 8007b14:	687a      	ldr	r2, [r7, #4]
 8007b16:	683b      	ldr	r3, [r7, #0]
 8007b18:	781b      	ldrb	r3, [r3, #0]
 8007b1a:	009b      	lsls	r3, r3, #2
 8007b1c:	441a      	add	r2, r3
 8007b1e:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8007b22:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007b26:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007b2a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007b2e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007b32:	b29b      	uxth	r3, r3
 8007b34:	8013      	strh	r3, [r2, #0]

      /* Set endpoint RX count */
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007b36:	683b      	ldr	r3, [r7, #0]
 8007b38:	785b      	ldrb	r3, [r3, #1]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d16b      	bne.n	8007c16 <USB_ActivateEndpoint+0x676>
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007b48:	b29b      	uxth	r3, r3
 8007b4a:	461a      	mov	r2, r3
 8007b4c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007b4e:	4413      	add	r3, r2
 8007b50:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007b52:	683b      	ldr	r3, [r7, #0]
 8007b54:	781b      	ldrb	r3, [r3, #0]
 8007b56:	00da      	lsls	r2, r3, #3
 8007b58:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007b5a:	4413      	add	r3, r2
 8007b5c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007b60:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007b62:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007b64:	881b      	ldrh	r3, [r3, #0]
 8007b66:	b29b      	uxth	r3, r3
 8007b68:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007b6c:	b29a      	uxth	r2, r3
 8007b6e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007b70:	801a      	strh	r2, [r3, #0]
 8007b72:	683b      	ldr	r3, [r7, #0]
 8007b74:	691b      	ldr	r3, [r3, #16]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d10a      	bne.n	8007b90 <USB_ActivateEndpoint+0x5f0>
 8007b7a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007b7c:	881b      	ldrh	r3, [r3, #0]
 8007b7e:	b29b      	uxth	r3, r3
 8007b80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b88:	b29a      	uxth	r2, r3
 8007b8a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007b8c:	801a      	strh	r2, [r3, #0]
 8007b8e:	e05d      	b.n	8007c4c <USB_ActivateEndpoint+0x6ac>
 8007b90:	683b      	ldr	r3, [r7, #0]
 8007b92:	691b      	ldr	r3, [r3, #16]
 8007b94:	2b3e      	cmp	r3, #62	@ 0x3e
 8007b96:	d81c      	bhi.n	8007bd2 <USB_ActivateEndpoint+0x632>
 8007b98:	683b      	ldr	r3, [r7, #0]
 8007b9a:	691b      	ldr	r3, [r3, #16]
 8007b9c:	085b      	lsrs	r3, r3, #1
 8007b9e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007ba2:	683b      	ldr	r3, [r7, #0]
 8007ba4:	691b      	ldr	r3, [r3, #16]
 8007ba6:	f003 0301 	and.w	r3, r3, #1
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d004      	beq.n	8007bb8 <USB_ActivateEndpoint+0x618>
 8007bae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007bb2:	3301      	adds	r3, #1
 8007bb4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007bb8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007bba:	881b      	ldrh	r3, [r3, #0]
 8007bbc:	b29a      	uxth	r2, r3
 8007bbe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007bc2:	b29b      	uxth	r3, r3
 8007bc4:	029b      	lsls	r3, r3, #10
 8007bc6:	b29b      	uxth	r3, r3
 8007bc8:	4313      	orrs	r3, r2
 8007bca:	b29a      	uxth	r2, r3
 8007bcc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007bce:	801a      	strh	r2, [r3, #0]
 8007bd0:	e03c      	b.n	8007c4c <USB_ActivateEndpoint+0x6ac>
 8007bd2:	683b      	ldr	r3, [r7, #0]
 8007bd4:	691b      	ldr	r3, [r3, #16]
 8007bd6:	095b      	lsrs	r3, r3, #5
 8007bd8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007bdc:	683b      	ldr	r3, [r7, #0]
 8007bde:	691b      	ldr	r3, [r3, #16]
 8007be0:	f003 031f 	and.w	r3, r3, #31
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d104      	bne.n	8007bf2 <USB_ActivateEndpoint+0x652>
 8007be8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007bec:	3b01      	subs	r3, #1
 8007bee:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007bf2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007bf4:	881b      	ldrh	r3, [r3, #0]
 8007bf6:	b29a      	uxth	r2, r3
 8007bf8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007bfc:	b29b      	uxth	r3, r3
 8007bfe:	029b      	lsls	r3, r3, #10
 8007c00:	b29b      	uxth	r3, r3
 8007c02:	4313      	orrs	r3, r2
 8007c04:	b29b      	uxth	r3, r3
 8007c06:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c0a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c0e:	b29a      	uxth	r2, r3
 8007c10:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007c12:	801a      	strh	r2, [r3, #0]
 8007c14:	e01a      	b.n	8007c4c <USB_ActivateEndpoint+0x6ac>
 8007c16:	683b      	ldr	r3, [r7, #0]
 8007c18:	785b      	ldrb	r3, [r3, #1]
 8007c1a:	2b01      	cmp	r3, #1
 8007c1c:	d116      	bne.n	8007c4c <USB_ActivateEndpoint+0x6ac>
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	657b      	str	r3, [r7, #84]	@ 0x54
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007c28:	b29b      	uxth	r3, r3
 8007c2a:	461a      	mov	r2, r3
 8007c2c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007c2e:	4413      	add	r3, r2
 8007c30:	657b      	str	r3, [r7, #84]	@ 0x54
 8007c32:	683b      	ldr	r3, [r7, #0]
 8007c34:	781b      	ldrb	r3, [r3, #0]
 8007c36:	00da      	lsls	r2, r3, #3
 8007c38:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007c3a:	4413      	add	r3, r2
 8007c3c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007c40:	653b      	str	r3, [r7, #80]	@ 0x50
 8007c42:	683b      	ldr	r3, [r7, #0]
 8007c44:	691b      	ldr	r3, [r3, #16]
 8007c46:	b29a      	uxth	r2, r3
 8007c48:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007c4a:	801a      	strh	r2, [r3, #0]
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	647b      	str	r3, [r7, #68]	@ 0x44
 8007c50:	683b      	ldr	r3, [r7, #0]
 8007c52:	785b      	ldrb	r3, [r3, #1]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d16b      	bne.n	8007d30 <USB_ActivateEndpoint+0x790>
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007c62:	b29b      	uxth	r3, r3
 8007c64:	461a      	mov	r2, r3
 8007c66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c68:	4413      	add	r3, r2
 8007c6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007c6c:	683b      	ldr	r3, [r7, #0]
 8007c6e:	781b      	ldrb	r3, [r3, #0]
 8007c70:	00da      	lsls	r2, r3, #3
 8007c72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c74:	4413      	add	r3, r2
 8007c76:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007c7a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007c7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c7e:	881b      	ldrh	r3, [r3, #0]
 8007c80:	b29b      	uxth	r3, r3
 8007c82:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007c86:	b29a      	uxth	r2, r3
 8007c88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c8a:	801a      	strh	r2, [r3, #0]
 8007c8c:	683b      	ldr	r3, [r7, #0]
 8007c8e:	691b      	ldr	r3, [r3, #16]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d10a      	bne.n	8007caa <USB_ActivateEndpoint+0x70a>
 8007c94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c96:	881b      	ldrh	r3, [r3, #0]
 8007c98:	b29b      	uxth	r3, r3
 8007c9a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c9e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ca2:	b29a      	uxth	r2, r3
 8007ca4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ca6:	801a      	strh	r2, [r3, #0]
 8007ca8:	e05b      	b.n	8007d62 <USB_ActivateEndpoint+0x7c2>
 8007caa:	683b      	ldr	r3, [r7, #0]
 8007cac:	691b      	ldr	r3, [r3, #16]
 8007cae:	2b3e      	cmp	r3, #62	@ 0x3e
 8007cb0:	d81c      	bhi.n	8007cec <USB_ActivateEndpoint+0x74c>
 8007cb2:	683b      	ldr	r3, [r7, #0]
 8007cb4:	691b      	ldr	r3, [r3, #16]
 8007cb6:	085b      	lsrs	r3, r3, #1
 8007cb8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007cbc:	683b      	ldr	r3, [r7, #0]
 8007cbe:	691b      	ldr	r3, [r3, #16]
 8007cc0:	f003 0301 	and.w	r3, r3, #1
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d004      	beq.n	8007cd2 <USB_ActivateEndpoint+0x732>
 8007cc8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007ccc:	3301      	adds	r3, #1
 8007cce:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007cd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cd4:	881b      	ldrh	r3, [r3, #0]
 8007cd6:	b29a      	uxth	r2, r3
 8007cd8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007cdc:	b29b      	uxth	r3, r3
 8007cde:	029b      	lsls	r3, r3, #10
 8007ce0:	b29b      	uxth	r3, r3
 8007ce2:	4313      	orrs	r3, r2
 8007ce4:	b29a      	uxth	r2, r3
 8007ce6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ce8:	801a      	strh	r2, [r3, #0]
 8007cea:	e03a      	b.n	8007d62 <USB_ActivateEndpoint+0x7c2>
 8007cec:	683b      	ldr	r3, [r7, #0]
 8007cee:	691b      	ldr	r3, [r3, #16]
 8007cf0:	095b      	lsrs	r3, r3, #5
 8007cf2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007cf6:	683b      	ldr	r3, [r7, #0]
 8007cf8:	691b      	ldr	r3, [r3, #16]
 8007cfa:	f003 031f 	and.w	r3, r3, #31
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d104      	bne.n	8007d0c <USB_ActivateEndpoint+0x76c>
 8007d02:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007d06:	3b01      	subs	r3, #1
 8007d08:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007d0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d0e:	881b      	ldrh	r3, [r3, #0]
 8007d10:	b29a      	uxth	r2, r3
 8007d12:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007d16:	b29b      	uxth	r3, r3
 8007d18:	029b      	lsls	r3, r3, #10
 8007d1a:	b29b      	uxth	r3, r3
 8007d1c:	4313      	orrs	r3, r2
 8007d1e:	b29b      	uxth	r3, r3
 8007d20:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d24:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d28:	b29a      	uxth	r2, r3
 8007d2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d2c:	801a      	strh	r2, [r3, #0]
 8007d2e:	e018      	b.n	8007d62 <USB_ActivateEndpoint+0x7c2>
 8007d30:	683b      	ldr	r3, [r7, #0]
 8007d32:	785b      	ldrb	r3, [r3, #1]
 8007d34:	2b01      	cmp	r3, #1
 8007d36:	d114      	bne.n	8007d62 <USB_ActivateEndpoint+0x7c2>
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007d3e:	b29b      	uxth	r3, r3
 8007d40:	461a      	mov	r2, r3
 8007d42:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007d44:	4413      	add	r3, r2
 8007d46:	647b      	str	r3, [r7, #68]	@ 0x44
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	781b      	ldrb	r3, [r3, #0]
 8007d4c:	00da      	lsls	r2, r3, #3
 8007d4e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007d50:	4413      	add	r3, r2
 8007d52:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007d56:	643b      	str	r3, [r7, #64]	@ 0x40
 8007d58:	683b      	ldr	r3, [r7, #0]
 8007d5a:	691b      	ldr	r3, [r3, #16]
 8007d5c:	b29a      	uxth	r2, r3
 8007d5e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007d60:	801a      	strh	r2, [r3, #0]

      /* Set endpoint RX to valid state */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007d62:	687a      	ldr	r2, [r7, #4]
 8007d64:	683b      	ldr	r3, [r7, #0]
 8007d66:	781b      	ldrb	r3, [r3, #0]
 8007d68:	009b      	lsls	r3, r3, #2
 8007d6a:	4413      	add	r3, r2
 8007d6c:	881b      	ldrh	r3, [r3, #0]
 8007d6e:	b29b      	uxth	r3, r3
 8007d70:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007d74:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007d78:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8007d7a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007d7c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007d80:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8007d82:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007d84:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007d88:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8007d8a:	687a      	ldr	r2, [r7, #4]
 8007d8c:	683b      	ldr	r3, [r7, #0]
 8007d8e:	781b      	ldrb	r3, [r3, #0]
 8007d90:	009b      	lsls	r3, r3, #2
 8007d92:	441a      	add	r2, r3
 8007d94:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007d96:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007d9a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007d9e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007da2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007da6:	b29b      	uxth	r3, r3
 8007da8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007daa:	687a      	ldr	r2, [r7, #4]
 8007dac:	683b      	ldr	r3, [r7, #0]
 8007dae:	781b      	ldrb	r3, [r3, #0]
 8007db0:	009b      	lsls	r3, r3, #2
 8007db2:	4413      	add	r3, r2
 8007db4:	881b      	ldrh	r3, [r3, #0]
 8007db6:	b29b      	uxth	r3, r3
 8007db8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007dbc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007dc0:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8007dc2:	687a      	ldr	r2, [r7, #4]
 8007dc4:	683b      	ldr	r3, [r7, #0]
 8007dc6:	781b      	ldrb	r3, [r3, #0]
 8007dc8:	009b      	lsls	r3, r3, #2
 8007dca:	441a      	add	r2, r3
 8007dcc:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8007dce:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007dd2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007dd6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007dda:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007dde:	b29b      	uxth	r3, r3
 8007de0:	8013      	strh	r3, [r2, #0]
 8007de2:	e0bc      	b.n	8007f5e <USB_ActivateEndpoint+0x9be>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007de4:	687a      	ldr	r2, [r7, #4]
 8007de6:	683b      	ldr	r3, [r7, #0]
 8007de8:	781b      	ldrb	r3, [r3, #0]
 8007dea:	009b      	lsls	r3, r3, #2
 8007dec:	4413      	add	r3, r2
 8007dee:	881b      	ldrh	r3, [r3, #0]
 8007df0:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 8007df4:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8007df8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d01d      	beq.n	8007e3c <USB_ActivateEndpoint+0x89c>
 8007e00:	687a      	ldr	r2, [r7, #4]
 8007e02:	683b      	ldr	r3, [r7, #0]
 8007e04:	781b      	ldrb	r3, [r3, #0]
 8007e06:	009b      	lsls	r3, r3, #2
 8007e08:	4413      	add	r3, r2
 8007e0a:	881b      	ldrh	r3, [r3, #0]
 8007e0c:	b29b      	uxth	r3, r3
 8007e0e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007e12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007e16:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 8007e1a:	687a      	ldr	r2, [r7, #4]
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	781b      	ldrb	r3, [r3, #0]
 8007e20:	009b      	lsls	r3, r3, #2
 8007e22:	441a      	add	r2, r3
 8007e24:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8007e28:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007e2c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007e30:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007e34:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007e38:	b29b      	uxth	r3, r3
 8007e3a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007e3c:	687a      	ldr	r2, [r7, #4]
 8007e3e:	683b      	ldr	r3, [r7, #0]
 8007e40:	781b      	ldrb	r3, [r3, #0]
 8007e42:	009b      	lsls	r3, r3, #2
 8007e44:	4413      	add	r3, r2
 8007e46:	881b      	ldrh	r3, [r3, #0]
 8007e48:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
 8007e4c:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 8007e50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d01d      	beq.n	8007e94 <USB_ActivateEndpoint+0x8f4>
 8007e58:	687a      	ldr	r2, [r7, #4]
 8007e5a:	683b      	ldr	r3, [r7, #0]
 8007e5c:	781b      	ldrb	r3, [r3, #0]
 8007e5e:	009b      	lsls	r3, r3, #2
 8007e60:	4413      	add	r3, r2
 8007e62:	881b      	ldrh	r3, [r3, #0]
 8007e64:	b29b      	uxth	r3, r3
 8007e66:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007e6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007e6e:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
 8007e72:	687a      	ldr	r2, [r7, #4]
 8007e74:	683b      	ldr	r3, [r7, #0]
 8007e76:	781b      	ldrb	r3, [r3, #0]
 8007e78:	009b      	lsls	r3, r3, #2
 8007e7a:	441a      	add	r2, r3
 8007e7c:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 8007e80:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007e84:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007e88:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007e8c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007e90:	b29b      	uxth	r3, r3
 8007e92:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007e94:	683b      	ldr	r3, [r7, #0]
 8007e96:	78db      	ldrb	r3, [r3, #3]
 8007e98:	2b01      	cmp	r3, #1
 8007e9a:	d024      	beq.n	8007ee6 <USB_ActivateEndpoint+0x946>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007e9c:	687a      	ldr	r2, [r7, #4]
 8007e9e:	683b      	ldr	r3, [r7, #0]
 8007ea0:	781b      	ldrb	r3, [r3, #0]
 8007ea2:	009b      	lsls	r3, r3, #2
 8007ea4:	4413      	add	r3, r2
 8007ea6:	881b      	ldrh	r3, [r3, #0]
 8007ea8:	b29b      	uxth	r3, r3
 8007eaa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007eae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007eb2:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8007eb6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8007eba:	f083 0320 	eor.w	r3, r3, #32
 8007ebe:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8007ec2:	687a      	ldr	r2, [r7, #4]
 8007ec4:	683b      	ldr	r3, [r7, #0]
 8007ec6:	781b      	ldrb	r3, [r3, #0]
 8007ec8:	009b      	lsls	r3, r3, #2
 8007eca:	441a      	add	r2, r3
 8007ecc:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8007ed0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007ed4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007ed8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007edc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007ee0:	b29b      	uxth	r3, r3
 8007ee2:	8013      	strh	r3, [r2, #0]
 8007ee4:	e01d      	b.n	8007f22 <USB_ActivateEndpoint+0x982>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007ee6:	687a      	ldr	r2, [r7, #4]
 8007ee8:	683b      	ldr	r3, [r7, #0]
 8007eea:	781b      	ldrb	r3, [r3, #0]
 8007eec:	009b      	lsls	r3, r3, #2
 8007eee:	4413      	add	r3, r2
 8007ef0:	881b      	ldrh	r3, [r3, #0]
 8007ef2:	b29b      	uxth	r3, r3
 8007ef4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007ef8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007efc:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8007f00:	687a      	ldr	r2, [r7, #4]
 8007f02:	683b      	ldr	r3, [r7, #0]
 8007f04:	781b      	ldrb	r3, [r3, #0]
 8007f06:	009b      	lsls	r3, r3, #2
 8007f08:	441a      	add	r2, r3
 8007f0a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8007f0e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007f12:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007f16:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007f1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007f1e:	b29b      	uxth	r3, r3
 8007f20:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007f22:	687a      	ldr	r2, [r7, #4]
 8007f24:	683b      	ldr	r3, [r7, #0]
 8007f26:	781b      	ldrb	r3, [r3, #0]
 8007f28:	009b      	lsls	r3, r3, #2
 8007f2a:	4413      	add	r3, r2
 8007f2c:	881b      	ldrh	r3, [r3, #0]
 8007f2e:	b29b      	uxth	r3, r3
 8007f30:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007f34:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f38:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8007f3c:	687a      	ldr	r2, [r7, #4]
 8007f3e:	683b      	ldr	r3, [r7, #0]
 8007f40:	781b      	ldrb	r3, [r3, #0]
 8007f42:	009b      	lsls	r3, r3, #2
 8007f44:	441a      	add	r2, r3
 8007f46:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8007f4a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007f4e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007f52:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007f56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007f5a:	b29b      	uxth	r3, r3
 8007f5c:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8007f5e:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
}
 8007f62:	4618      	mov	r0, r3
 8007f64:	379c      	adds	r7, #156	@ 0x9c
 8007f66:	46bd      	mov	sp, r7
 8007f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6c:	4770      	bx	lr
 8007f6e:	bf00      	nop

08007f70 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007f70:	b480      	push	{r7}
 8007f72:	b08d      	sub	sp, #52	@ 0x34
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
 8007f78:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007f7a:	683b      	ldr	r3, [r7, #0]
 8007f7c:	7b1b      	ldrb	r3, [r3, #12]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	f040 808e 	bne.w	80080a0 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8007f84:	683b      	ldr	r3, [r7, #0]
 8007f86:	785b      	ldrb	r3, [r3, #1]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d044      	beq.n	8008016 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007f8c:	687a      	ldr	r2, [r7, #4]
 8007f8e:	683b      	ldr	r3, [r7, #0]
 8007f90:	781b      	ldrb	r3, [r3, #0]
 8007f92:	009b      	lsls	r3, r3, #2
 8007f94:	4413      	add	r3, r2
 8007f96:	881b      	ldrh	r3, [r3, #0]
 8007f98:	81bb      	strh	r3, [r7, #12]
 8007f9a:	89bb      	ldrh	r3, [r7, #12]
 8007f9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d01b      	beq.n	8007fdc <USB_DeactivateEndpoint+0x6c>
 8007fa4:	687a      	ldr	r2, [r7, #4]
 8007fa6:	683b      	ldr	r3, [r7, #0]
 8007fa8:	781b      	ldrb	r3, [r3, #0]
 8007faa:	009b      	lsls	r3, r3, #2
 8007fac:	4413      	add	r3, r2
 8007fae:	881b      	ldrh	r3, [r3, #0]
 8007fb0:	b29b      	uxth	r3, r3
 8007fb2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007fb6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007fba:	817b      	strh	r3, [r7, #10]
 8007fbc:	687a      	ldr	r2, [r7, #4]
 8007fbe:	683b      	ldr	r3, [r7, #0]
 8007fc0:	781b      	ldrb	r3, [r3, #0]
 8007fc2:	009b      	lsls	r3, r3, #2
 8007fc4:	441a      	add	r2, r3
 8007fc6:	897b      	ldrh	r3, [r7, #10]
 8007fc8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007fcc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007fd0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007fd4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007fd8:	b29b      	uxth	r3, r3
 8007fda:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007fdc:	687a      	ldr	r2, [r7, #4]
 8007fde:	683b      	ldr	r3, [r7, #0]
 8007fe0:	781b      	ldrb	r3, [r3, #0]
 8007fe2:	009b      	lsls	r3, r3, #2
 8007fe4:	4413      	add	r3, r2
 8007fe6:	881b      	ldrh	r3, [r3, #0]
 8007fe8:	b29b      	uxth	r3, r3
 8007fea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007fee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007ff2:	813b      	strh	r3, [r7, #8]
 8007ff4:	687a      	ldr	r2, [r7, #4]
 8007ff6:	683b      	ldr	r3, [r7, #0]
 8007ff8:	781b      	ldrb	r3, [r3, #0]
 8007ffa:	009b      	lsls	r3, r3, #2
 8007ffc:	441a      	add	r2, r3
 8007ffe:	893b      	ldrh	r3, [r7, #8]
 8008000:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008004:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008008:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800800c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008010:	b29b      	uxth	r3, r3
 8008012:	8013      	strh	r3, [r2, #0]
 8008014:	e192      	b.n	800833c <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008016:	687a      	ldr	r2, [r7, #4]
 8008018:	683b      	ldr	r3, [r7, #0]
 800801a:	781b      	ldrb	r3, [r3, #0]
 800801c:	009b      	lsls	r3, r3, #2
 800801e:	4413      	add	r3, r2
 8008020:	881b      	ldrh	r3, [r3, #0]
 8008022:	827b      	strh	r3, [r7, #18]
 8008024:	8a7b      	ldrh	r3, [r7, #18]
 8008026:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800802a:	2b00      	cmp	r3, #0
 800802c:	d01b      	beq.n	8008066 <USB_DeactivateEndpoint+0xf6>
 800802e:	687a      	ldr	r2, [r7, #4]
 8008030:	683b      	ldr	r3, [r7, #0]
 8008032:	781b      	ldrb	r3, [r3, #0]
 8008034:	009b      	lsls	r3, r3, #2
 8008036:	4413      	add	r3, r2
 8008038:	881b      	ldrh	r3, [r3, #0]
 800803a:	b29b      	uxth	r3, r3
 800803c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008040:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008044:	823b      	strh	r3, [r7, #16]
 8008046:	687a      	ldr	r2, [r7, #4]
 8008048:	683b      	ldr	r3, [r7, #0]
 800804a:	781b      	ldrb	r3, [r3, #0]
 800804c:	009b      	lsls	r3, r3, #2
 800804e:	441a      	add	r2, r3
 8008050:	8a3b      	ldrh	r3, [r7, #16]
 8008052:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008056:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800805a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800805e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008062:	b29b      	uxth	r3, r3
 8008064:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008066:	687a      	ldr	r2, [r7, #4]
 8008068:	683b      	ldr	r3, [r7, #0]
 800806a:	781b      	ldrb	r3, [r3, #0]
 800806c:	009b      	lsls	r3, r3, #2
 800806e:	4413      	add	r3, r2
 8008070:	881b      	ldrh	r3, [r3, #0]
 8008072:	b29b      	uxth	r3, r3
 8008074:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008078:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800807c:	81fb      	strh	r3, [r7, #14]
 800807e:	687a      	ldr	r2, [r7, #4]
 8008080:	683b      	ldr	r3, [r7, #0]
 8008082:	781b      	ldrb	r3, [r3, #0]
 8008084:	009b      	lsls	r3, r3, #2
 8008086:	441a      	add	r2, r3
 8008088:	89fb      	ldrh	r3, [r7, #14]
 800808a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800808e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008092:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008096:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800809a:	b29b      	uxth	r3, r3
 800809c:	8013      	strh	r3, [r2, #0]
 800809e:	e14d      	b.n	800833c <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80080a0:	683b      	ldr	r3, [r7, #0]
 80080a2:	785b      	ldrb	r3, [r3, #1]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	f040 80a5 	bne.w	80081f4 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80080aa:	687a      	ldr	r2, [r7, #4]
 80080ac:	683b      	ldr	r3, [r7, #0]
 80080ae:	781b      	ldrb	r3, [r3, #0]
 80080b0:	009b      	lsls	r3, r3, #2
 80080b2:	4413      	add	r3, r2
 80080b4:	881b      	ldrh	r3, [r3, #0]
 80080b6:	843b      	strh	r3, [r7, #32]
 80080b8:	8c3b      	ldrh	r3, [r7, #32]
 80080ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d01b      	beq.n	80080fa <USB_DeactivateEndpoint+0x18a>
 80080c2:	687a      	ldr	r2, [r7, #4]
 80080c4:	683b      	ldr	r3, [r7, #0]
 80080c6:	781b      	ldrb	r3, [r3, #0]
 80080c8:	009b      	lsls	r3, r3, #2
 80080ca:	4413      	add	r3, r2
 80080cc:	881b      	ldrh	r3, [r3, #0]
 80080ce:	b29b      	uxth	r3, r3
 80080d0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80080d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80080d8:	83fb      	strh	r3, [r7, #30]
 80080da:	687a      	ldr	r2, [r7, #4]
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	781b      	ldrb	r3, [r3, #0]
 80080e0:	009b      	lsls	r3, r3, #2
 80080e2:	441a      	add	r2, r3
 80080e4:	8bfb      	ldrh	r3, [r7, #30]
 80080e6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80080ea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80080ee:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80080f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80080f6:	b29b      	uxth	r3, r3
 80080f8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80080fa:	687a      	ldr	r2, [r7, #4]
 80080fc:	683b      	ldr	r3, [r7, #0]
 80080fe:	781b      	ldrb	r3, [r3, #0]
 8008100:	009b      	lsls	r3, r3, #2
 8008102:	4413      	add	r3, r2
 8008104:	881b      	ldrh	r3, [r3, #0]
 8008106:	83bb      	strh	r3, [r7, #28]
 8008108:	8bbb      	ldrh	r3, [r7, #28]
 800810a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800810e:	2b00      	cmp	r3, #0
 8008110:	d01b      	beq.n	800814a <USB_DeactivateEndpoint+0x1da>
 8008112:	687a      	ldr	r2, [r7, #4]
 8008114:	683b      	ldr	r3, [r7, #0]
 8008116:	781b      	ldrb	r3, [r3, #0]
 8008118:	009b      	lsls	r3, r3, #2
 800811a:	4413      	add	r3, r2
 800811c:	881b      	ldrh	r3, [r3, #0]
 800811e:	b29b      	uxth	r3, r3
 8008120:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008124:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008128:	837b      	strh	r3, [r7, #26]
 800812a:	687a      	ldr	r2, [r7, #4]
 800812c:	683b      	ldr	r3, [r7, #0]
 800812e:	781b      	ldrb	r3, [r3, #0]
 8008130:	009b      	lsls	r3, r3, #2
 8008132:	441a      	add	r2, r3
 8008134:	8b7b      	ldrh	r3, [r7, #26]
 8008136:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800813a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800813e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008142:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008146:	b29b      	uxth	r3, r3
 8008148:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800814a:	687a      	ldr	r2, [r7, #4]
 800814c:	683b      	ldr	r3, [r7, #0]
 800814e:	781b      	ldrb	r3, [r3, #0]
 8008150:	009b      	lsls	r3, r3, #2
 8008152:	4413      	add	r3, r2
 8008154:	881b      	ldrh	r3, [r3, #0]
 8008156:	b29b      	uxth	r3, r3
 8008158:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800815c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008160:	833b      	strh	r3, [r7, #24]
 8008162:	687a      	ldr	r2, [r7, #4]
 8008164:	683b      	ldr	r3, [r7, #0]
 8008166:	781b      	ldrb	r3, [r3, #0]
 8008168:	009b      	lsls	r3, r3, #2
 800816a:	441a      	add	r2, r3
 800816c:	8b3b      	ldrh	r3, [r7, #24]
 800816e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008172:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008176:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800817a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800817e:	b29b      	uxth	r3, r3
 8008180:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008182:	687a      	ldr	r2, [r7, #4]
 8008184:	683b      	ldr	r3, [r7, #0]
 8008186:	781b      	ldrb	r3, [r3, #0]
 8008188:	009b      	lsls	r3, r3, #2
 800818a:	4413      	add	r3, r2
 800818c:	881b      	ldrh	r3, [r3, #0]
 800818e:	b29b      	uxth	r3, r3
 8008190:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008194:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008198:	82fb      	strh	r3, [r7, #22]
 800819a:	687a      	ldr	r2, [r7, #4]
 800819c:	683b      	ldr	r3, [r7, #0]
 800819e:	781b      	ldrb	r3, [r3, #0]
 80081a0:	009b      	lsls	r3, r3, #2
 80081a2:	441a      	add	r2, r3
 80081a4:	8afb      	ldrh	r3, [r7, #22]
 80081a6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80081aa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80081ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80081b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80081b6:	b29b      	uxth	r3, r3
 80081b8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80081ba:	687a      	ldr	r2, [r7, #4]
 80081bc:	683b      	ldr	r3, [r7, #0]
 80081be:	781b      	ldrb	r3, [r3, #0]
 80081c0:	009b      	lsls	r3, r3, #2
 80081c2:	4413      	add	r3, r2
 80081c4:	881b      	ldrh	r3, [r3, #0]
 80081c6:	b29b      	uxth	r3, r3
 80081c8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80081cc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80081d0:	82bb      	strh	r3, [r7, #20]
 80081d2:	687a      	ldr	r2, [r7, #4]
 80081d4:	683b      	ldr	r3, [r7, #0]
 80081d6:	781b      	ldrb	r3, [r3, #0]
 80081d8:	009b      	lsls	r3, r3, #2
 80081da:	441a      	add	r2, r3
 80081dc:	8abb      	ldrh	r3, [r7, #20]
 80081de:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80081e2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80081e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80081ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80081ee:	b29b      	uxth	r3, r3
 80081f0:	8013      	strh	r3, [r2, #0]
 80081f2:	e0a3      	b.n	800833c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80081f4:	687a      	ldr	r2, [r7, #4]
 80081f6:	683b      	ldr	r3, [r7, #0]
 80081f8:	781b      	ldrb	r3, [r3, #0]
 80081fa:	009b      	lsls	r3, r3, #2
 80081fc:	4413      	add	r3, r2
 80081fe:	881b      	ldrh	r3, [r3, #0]
 8008200:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8008202:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8008204:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008208:	2b00      	cmp	r3, #0
 800820a:	d01b      	beq.n	8008244 <USB_DeactivateEndpoint+0x2d4>
 800820c:	687a      	ldr	r2, [r7, #4]
 800820e:	683b      	ldr	r3, [r7, #0]
 8008210:	781b      	ldrb	r3, [r3, #0]
 8008212:	009b      	lsls	r3, r3, #2
 8008214:	4413      	add	r3, r2
 8008216:	881b      	ldrh	r3, [r3, #0]
 8008218:	b29b      	uxth	r3, r3
 800821a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800821e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008222:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8008224:	687a      	ldr	r2, [r7, #4]
 8008226:	683b      	ldr	r3, [r7, #0]
 8008228:	781b      	ldrb	r3, [r3, #0]
 800822a:	009b      	lsls	r3, r3, #2
 800822c:	441a      	add	r2, r3
 800822e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8008230:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008234:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008238:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800823c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008240:	b29b      	uxth	r3, r3
 8008242:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008244:	687a      	ldr	r2, [r7, #4]
 8008246:	683b      	ldr	r3, [r7, #0]
 8008248:	781b      	ldrb	r3, [r3, #0]
 800824a:	009b      	lsls	r3, r3, #2
 800824c:	4413      	add	r3, r2
 800824e:	881b      	ldrh	r3, [r3, #0]
 8008250:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8008252:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8008254:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008258:	2b00      	cmp	r3, #0
 800825a:	d01b      	beq.n	8008294 <USB_DeactivateEndpoint+0x324>
 800825c:	687a      	ldr	r2, [r7, #4]
 800825e:	683b      	ldr	r3, [r7, #0]
 8008260:	781b      	ldrb	r3, [r3, #0]
 8008262:	009b      	lsls	r3, r3, #2
 8008264:	4413      	add	r3, r2
 8008266:	881b      	ldrh	r3, [r3, #0]
 8008268:	b29b      	uxth	r3, r3
 800826a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800826e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008272:	853b      	strh	r3, [r7, #40]	@ 0x28
 8008274:	687a      	ldr	r2, [r7, #4]
 8008276:	683b      	ldr	r3, [r7, #0]
 8008278:	781b      	ldrb	r3, [r3, #0]
 800827a:	009b      	lsls	r3, r3, #2
 800827c:	441a      	add	r2, r3
 800827e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8008280:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008284:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008288:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800828c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008290:	b29b      	uxth	r3, r3
 8008292:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8008294:	687a      	ldr	r2, [r7, #4]
 8008296:	683b      	ldr	r3, [r7, #0]
 8008298:	781b      	ldrb	r3, [r3, #0]
 800829a:	009b      	lsls	r3, r3, #2
 800829c:	4413      	add	r3, r2
 800829e:	881b      	ldrh	r3, [r3, #0]
 80082a0:	b29b      	uxth	r3, r3
 80082a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80082a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80082aa:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80082ac:	687a      	ldr	r2, [r7, #4]
 80082ae:	683b      	ldr	r3, [r7, #0]
 80082b0:	781b      	ldrb	r3, [r3, #0]
 80082b2:	009b      	lsls	r3, r3, #2
 80082b4:	441a      	add	r2, r3
 80082b6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80082b8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80082bc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80082c0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80082c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80082c8:	b29b      	uxth	r3, r3
 80082ca:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80082cc:	687a      	ldr	r2, [r7, #4]
 80082ce:	683b      	ldr	r3, [r7, #0]
 80082d0:	781b      	ldrb	r3, [r3, #0]
 80082d2:	009b      	lsls	r3, r3, #2
 80082d4:	4413      	add	r3, r2
 80082d6:	881b      	ldrh	r3, [r3, #0]
 80082d8:	b29b      	uxth	r3, r3
 80082da:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80082de:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80082e2:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80082e4:	687a      	ldr	r2, [r7, #4]
 80082e6:	683b      	ldr	r3, [r7, #0]
 80082e8:	781b      	ldrb	r3, [r3, #0]
 80082ea:	009b      	lsls	r3, r3, #2
 80082ec:	441a      	add	r2, r3
 80082ee:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80082f0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80082f4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80082f8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80082fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008300:	b29b      	uxth	r3, r3
 8008302:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008304:	687a      	ldr	r2, [r7, #4]
 8008306:	683b      	ldr	r3, [r7, #0]
 8008308:	781b      	ldrb	r3, [r3, #0]
 800830a:	009b      	lsls	r3, r3, #2
 800830c:	4413      	add	r3, r2
 800830e:	881b      	ldrh	r3, [r3, #0]
 8008310:	b29b      	uxth	r3, r3
 8008312:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008316:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800831a:	847b      	strh	r3, [r7, #34]	@ 0x22
 800831c:	687a      	ldr	r2, [r7, #4]
 800831e:	683b      	ldr	r3, [r7, #0]
 8008320:	781b      	ldrb	r3, [r3, #0]
 8008322:	009b      	lsls	r3, r3, #2
 8008324:	441a      	add	r2, r3
 8008326:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8008328:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800832c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008330:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008334:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008338:	b29b      	uxth	r3, r3
 800833a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800833c:	2300      	movs	r3, #0
}
 800833e:	4618      	mov	r0, r3
 8008340:	3734      	adds	r7, #52	@ 0x34
 8008342:	46bd      	mov	sp, r7
 8008344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008348:	4770      	bx	lr

0800834a <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800834a:	b580      	push	{r7, lr}
 800834c:	b0ac      	sub	sp, #176	@ 0xb0
 800834e:	af00      	add	r7, sp, #0
 8008350:	6078      	str	r0, [r7, #4]
 8008352:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008354:	683b      	ldr	r3, [r7, #0]
 8008356:	785b      	ldrb	r3, [r3, #1]
 8008358:	2b01      	cmp	r3, #1
 800835a:	f040 84ca 	bne.w	8008cf2 <USB_EPStartXfer+0x9a8>
  {
    /* Multi packet transfer */
    if (ep->xfer_len > ep->maxpacket)
 800835e:	683b      	ldr	r3, [r7, #0]
 8008360:	699a      	ldr	r2, [r3, #24]
 8008362:	683b      	ldr	r3, [r7, #0]
 8008364:	691b      	ldr	r3, [r3, #16]
 8008366:	429a      	cmp	r2, r3
 8008368:	d904      	bls.n	8008374 <USB_EPStartXfer+0x2a>
    {
      len = ep->maxpacket;
 800836a:	683b      	ldr	r3, [r7, #0]
 800836c:	691b      	ldr	r3, [r3, #16]
 800836e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008372:	e003      	b.n	800837c <USB_EPStartXfer+0x32>
    }
    else
    {
      len = ep->xfer_len;
 8008374:	683b      	ldr	r3, [r7, #0]
 8008376:	699b      	ldr	r3, [r3, #24]
 8008378:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800837c:	683b      	ldr	r3, [r7, #0]
 800837e:	7b1b      	ldrb	r3, [r3, #12]
 8008380:	2b00      	cmp	r3, #0
 8008382:	d122      	bne.n	80083ca <USB_EPStartXfer+0x80>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8008384:	683b      	ldr	r3, [r7, #0]
 8008386:	6959      	ldr	r1, [r3, #20]
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	88da      	ldrh	r2, [r3, #6]
 800838c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008390:	b29b      	uxth	r3, r3
 8008392:	6878      	ldr	r0, [r7, #4]
 8008394:	f000 febd 	bl	8009112 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	613b      	str	r3, [r7, #16]
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80083a2:	b29b      	uxth	r3, r3
 80083a4:	461a      	mov	r2, r3
 80083a6:	693b      	ldr	r3, [r7, #16]
 80083a8:	4413      	add	r3, r2
 80083aa:	613b      	str	r3, [r7, #16]
 80083ac:	683b      	ldr	r3, [r7, #0]
 80083ae:	781b      	ldrb	r3, [r3, #0]
 80083b0:	00da      	lsls	r2, r3, #3
 80083b2:	693b      	ldr	r3, [r7, #16]
 80083b4:	4413      	add	r3, r2
 80083b6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80083ba:	60fb      	str	r3, [r7, #12]
 80083bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80083c0:	b29a      	uxth	r2, r3
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	801a      	strh	r2, [r3, #0]
 80083c6:	f000 bc6f 	b.w	8008ca8 <USB_EPStartXfer+0x95e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80083ca:	683b      	ldr	r3, [r7, #0]
 80083cc:	78db      	ldrb	r3, [r3, #3]
 80083ce:	2b02      	cmp	r3, #2
 80083d0:	f040 831e 	bne.w	8008a10 <USB_EPStartXfer+0x6c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80083d4:	683b      	ldr	r3, [r7, #0]
 80083d6:	6a1a      	ldr	r2, [r3, #32]
 80083d8:	683b      	ldr	r3, [r7, #0]
 80083da:	691b      	ldr	r3, [r3, #16]
 80083dc:	429a      	cmp	r2, r3
 80083de:	f240 82cf 	bls.w	8008980 <USB_EPStartXfer+0x636>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80083e2:	687a      	ldr	r2, [r7, #4]
 80083e4:	683b      	ldr	r3, [r7, #0]
 80083e6:	781b      	ldrb	r3, [r3, #0]
 80083e8:	009b      	lsls	r3, r3, #2
 80083ea:	4413      	add	r3, r2
 80083ec:	881b      	ldrh	r3, [r3, #0]
 80083ee:	b29b      	uxth	r3, r3
 80083f0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80083f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80083f8:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 80083fc:	687a      	ldr	r2, [r7, #4]
 80083fe:	683b      	ldr	r3, [r7, #0]
 8008400:	781b      	ldrb	r3, [r3, #0]
 8008402:	009b      	lsls	r3, r3, #2
 8008404:	441a      	add	r2, r3
 8008406:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800840a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800840e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008412:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8008416:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800841a:	b29b      	uxth	r3, r3
 800841c:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800841e:	683b      	ldr	r3, [r7, #0]
 8008420:	6a1a      	ldr	r2, [r3, #32]
 8008422:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008426:	1ad2      	subs	r2, r2, r3
 8008428:	683b      	ldr	r3, [r7, #0]
 800842a:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800842c:	687a      	ldr	r2, [r7, #4]
 800842e:	683b      	ldr	r3, [r7, #0]
 8008430:	781b      	ldrb	r3, [r3, #0]
 8008432:	009b      	lsls	r3, r3, #2
 8008434:	4413      	add	r3, r2
 8008436:	881b      	ldrh	r3, [r3, #0]
 8008438:	b29b      	uxth	r3, r3
 800843a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800843e:	2b00      	cmp	r3, #0
 8008440:	f000 814f 	beq.w	80086e2 <USB_EPStartXfer+0x398>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	633b      	str	r3, [r7, #48]	@ 0x30
 8008448:	683b      	ldr	r3, [r7, #0]
 800844a:	785b      	ldrb	r3, [r3, #1]
 800844c:	2b00      	cmp	r3, #0
 800844e:	d16b      	bne.n	8008528 <USB_EPStartXfer+0x1de>
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800845a:	b29b      	uxth	r3, r3
 800845c:	461a      	mov	r2, r3
 800845e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008460:	4413      	add	r3, r2
 8008462:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008464:	683b      	ldr	r3, [r7, #0]
 8008466:	781b      	ldrb	r3, [r3, #0]
 8008468:	00da      	lsls	r2, r3, #3
 800846a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800846c:	4413      	add	r3, r2
 800846e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008472:	627b      	str	r3, [r7, #36]	@ 0x24
 8008474:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008476:	881b      	ldrh	r3, [r3, #0]
 8008478:	b29b      	uxth	r3, r3
 800847a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800847e:	b29a      	uxth	r2, r3
 8008480:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008482:	801a      	strh	r2, [r3, #0]
 8008484:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008488:	2b00      	cmp	r3, #0
 800848a:	d10a      	bne.n	80084a2 <USB_EPStartXfer+0x158>
 800848c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800848e:	881b      	ldrh	r3, [r3, #0]
 8008490:	b29b      	uxth	r3, r3
 8008492:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008496:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800849a:	b29a      	uxth	r2, r3
 800849c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800849e:	801a      	strh	r2, [r3, #0]
 80084a0:	e05b      	b.n	800855a <USB_EPStartXfer+0x210>
 80084a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80084a6:	2b3e      	cmp	r3, #62	@ 0x3e
 80084a8:	d81c      	bhi.n	80084e4 <USB_EPStartXfer+0x19a>
 80084aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80084ae:	085b      	lsrs	r3, r3, #1
 80084b0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80084b4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80084b8:	f003 0301 	and.w	r3, r3, #1
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d004      	beq.n	80084ca <USB_EPStartXfer+0x180>
 80084c0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80084c4:	3301      	adds	r3, #1
 80084c6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80084ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084cc:	881b      	ldrh	r3, [r3, #0]
 80084ce:	b29a      	uxth	r2, r3
 80084d0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80084d4:	b29b      	uxth	r3, r3
 80084d6:	029b      	lsls	r3, r3, #10
 80084d8:	b29b      	uxth	r3, r3
 80084da:	4313      	orrs	r3, r2
 80084dc:	b29a      	uxth	r2, r3
 80084de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084e0:	801a      	strh	r2, [r3, #0]
 80084e2:	e03a      	b.n	800855a <USB_EPStartXfer+0x210>
 80084e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80084e8:	095b      	lsrs	r3, r3, #5
 80084ea:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80084ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80084f2:	f003 031f 	and.w	r3, r3, #31
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d104      	bne.n	8008504 <USB_EPStartXfer+0x1ba>
 80084fa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80084fe:	3b01      	subs	r3, #1
 8008500:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008506:	881b      	ldrh	r3, [r3, #0]
 8008508:	b29a      	uxth	r2, r3
 800850a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800850e:	b29b      	uxth	r3, r3
 8008510:	029b      	lsls	r3, r3, #10
 8008512:	b29b      	uxth	r3, r3
 8008514:	4313      	orrs	r3, r2
 8008516:	b29b      	uxth	r3, r3
 8008518:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800851c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008520:	b29a      	uxth	r2, r3
 8008522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008524:	801a      	strh	r2, [r3, #0]
 8008526:	e018      	b.n	800855a <USB_EPStartXfer+0x210>
 8008528:	683b      	ldr	r3, [r7, #0]
 800852a:	785b      	ldrb	r3, [r3, #1]
 800852c:	2b01      	cmp	r3, #1
 800852e:	d114      	bne.n	800855a <USB_EPStartXfer+0x210>
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008536:	b29b      	uxth	r3, r3
 8008538:	461a      	mov	r2, r3
 800853a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800853c:	4413      	add	r3, r2
 800853e:	633b      	str	r3, [r7, #48]	@ 0x30
 8008540:	683b      	ldr	r3, [r7, #0]
 8008542:	781b      	ldrb	r3, [r3, #0]
 8008544:	00da      	lsls	r2, r3, #3
 8008546:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008548:	4413      	add	r3, r2
 800854a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800854e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008550:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008554:	b29a      	uxth	r2, r3
 8008556:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008558:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800855a:	683b      	ldr	r3, [r7, #0]
 800855c:	895b      	ldrh	r3, [r3, #10]
 800855e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008562:	683b      	ldr	r3, [r7, #0]
 8008564:	6959      	ldr	r1, [r3, #20]
 8008566:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800856a:	b29b      	uxth	r3, r3
 800856c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008570:	6878      	ldr	r0, [r7, #4]
 8008572:	f000 fdce 	bl	8009112 <USB_WritePMA>
            ep->xfer_buff += len;
 8008576:	683b      	ldr	r3, [r7, #0]
 8008578:	695a      	ldr	r2, [r3, #20]
 800857a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800857e:	441a      	add	r2, r3
 8008580:	683b      	ldr	r3, [r7, #0]
 8008582:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008584:	683b      	ldr	r3, [r7, #0]
 8008586:	6a1a      	ldr	r2, [r3, #32]
 8008588:	683b      	ldr	r3, [r7, #0]
 800858a:	691b      	ldr	r3, [r3, #16]
 800858c:	429a      	cmp	r2, r3
 800858e:	d907      	bls.n	80085a0 <USB_EPStartXfer+0x256>
            {
              ep->xfer_len_db -= len;
 8008590:	683b      	ldr	r3, [r7, #0]
 8008592:	6a1a      	ldr	r2, [r3, #32]
 8008594:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008598:	1ad2      	subs	r2, r2, r3
 800859a:	683b      	ldr	r3, [r7, #0]
 800859c:	621a      	str	r2, [r3, #32]
 800859e:	e006      	b.n	80085ae <USB_EPStartXfer+0x264>
            }
            else
            {
              len = ep->xfer_len_db;
 80085a0:	683b      	ldr	r3, [r7, #0]
 80085a2:	6a1b      	ldr	r3, [r3, #32]
 80085a4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 80085a8:	683b      	ldr	r3, [r7, #0]
 80085aa:	2200      	movs	r2, #0
 80085ac:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80085ae:	683b      	ldr	r3, [r7, #0]
 80085b0:	785b      	ldrb	r3, [r3, #1]
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d16b      	bne.n	800868e <USB_EPStartXfer+0x344>
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	61bb      	str	r3, [r7, #24]
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80085c0:	b29b      	uxth	r3, r3
 80085c2:	461a      	mov	r2, r3
 80085c4:	69bb      	ldr	r3, [r7, #24]
 80085c6:	4413      	add	r3, r2
 80085c8:	61bb      	str	r3, [r7, #24]
 80085ca:	683b      	ldr	r3, [r7, #0]
 80085cc:	781b      	ldrb	r3, [r3, #0]
 80085ce:	00da      	lsls	r2, r3, #3
 80085d0:	69bb      	ldr	r3, [r7, #24]
 80085d2:	4413      	add	r3, r2
 80085d4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80085d8:	617b      	str	r3, [r7, #20]
 80085da:	697b      	ldr	r3, [r7, #20]
 80085dc:	881b      	ldrh	r3, [r3, #0]
 80085de:	b29b      	uxth	r3, r3
 80085e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80085e4:	b29a      	uxth	r2, r3
 80085e6:	697b      	ldr	r3, [r7, #20]
 80085e8:	801a      	strh	r2, [r3, #0]
 80085ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d10a      	bne.n	8008608 <USB_EPStartXfer+0x2be>
 80085f2:	697b      	ldr	r3, [r7, #20]
 80085f4:	881b      	ldrh	r3, [r3, #0]
 80085f6:	b29b      	uxth	r3, r3
 80085f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80085fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008600:	b29a      	uxth	r2, r3
 8008602:	697b      	ldr	r3, [r7, #20]
 8008604:	801a      	strh	r2, [r3, #0]
 8008606:	e05d      	b.n	80086c4 <USB_EPStartXfer+0x37a>
 8008608:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800860c:	2b3e      	cmp	r3, #62	@ 0x3e
 800860e:	d81c      	bhi.n	800864a <USB_EPStartXfer+0x300>
 8008610:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008614:	085b      	lsrs	r3, r3, #1
 8008616:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800861a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800861e:	f003 0301 	and.w	r3, r3, #1
 8008622:	2b00      	cmp	r3, #0
 8008624:	d004      	beq.n	8008630 <USB_EPStartXfer+0x2e6>
 8008626:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800862a:	3301      	adds	r3, #1
 800862c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008630:	697b      	ldr	r3, [r7, #20]
 8008632:	881b      	ldrh	r3, [r3, #0]
 8008634:	b29a      	uxth	r2, r3
 8008636:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800863a:	b29b      	uxth	r3, r3
 800863c:	029b      	lsls	r3, r3, #10
 800863e:	b29b      	uxth	r3, r3
 8008640:	4313      	orrs	r3, r2
 8008642:	b29a      	uxth	r2, r3
 8008644:	697b      	ldr	r3, [r7, #20]
 8008646:	801a      	strh	r2, [r3, #0]
 8008648:	e03c      	b.n	80086c4 <USB_EPStartXfer+0x37a>
 800864a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800864e:	095b      	lsrs	r3, r3, #5
 8008650:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008654:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008658:	f003 031f 	and.w	r3, r3, #31
 800865c:	2b00      	cmp	r3, #0
 800865e:	d104      	bne.n	800866a <USB_EPStartXfer+0x320>
 8008660:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8008664:	3b01      	subs	r3, #1
 8008666:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800866a:	697b      	ldr	r3, [r7, #20]
 800866c:	881b      	ldrh	r3, [r3, #0]
 800866e:	b29a      	uxth	r2, r3
 8008670:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8008674:	b29b      	uxth	r3, r3
 8008676:	029b      	lsls	r3, r3, #10
 8008678:	b29b      	uxth	r3, r3
 800867a:	4313      	orrs	r3, r2
 800867c:	b29b      	uxth	r3, r3
 800867e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008682:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008686:	b29a      	uxth	r2, r3
 8008688:	697b      	ldr	r3, [r7, #20]
 800868a:	801a      	strh	r2, [r3, #0]
 800868c:	e01a      	b.n	80086c4 <USB_EPStartXfer+0x37a>
 800868e:	683b      	ldr	r3, [r7, #0]
 8008690:	785b      	ldrb	r3, [r3, #1]
 8008692:	2b01      	cmp	r3, #1
 8008694:	d116      	bne.n	80086c4 <USB_EPStartXfer+0x37a>
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	623b      	str	r3, [r7, #32]
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80086a0:	b29b      	uxth	r3, r3
 80086a2:	461a      	mov	r2, r3
 80086a4:	6a3b      	ldr	r3, [r7, #32]
 80086a6:	4413      	add	r3, r2
 80086a8:	623b      	str	r3, [r7, #32]
 80086aa:	683b      	ldr	r3, [r7, #0]
 80086ac:	781b      	ldrb	r3, [r3, #0]
 80086ae:	00da      	lsls	r2, r3, #3
 80086b0:	6a3b      	ldr	r3, [r7, #32]
 80086b2:	4413      	add	r3, r2
 80086b4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80086b8:	61fb      	str	r3, [r7, #28]
 80086ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80086be:	b29a      	uxth	r2, r3
 80086c0:	69fb      	ldr	r3, [r7, #28]
 80086c2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80086c4:	683b      	ldr	r3, [r7, #0]
 80086c6:	891b      	ldrh	r3, [r3, #8]
 80086c8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80086cc:	683b      	ldr	r3, [r7, #0]
 80086ce:	6959      	ldr	r1, [r3, #20]
 80086d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80086d4:	b29b      	uxth	r3, r3
 80086d6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80086da:	6878      	ldr	r0, [r7, #4]
 80086dc:	f000 fd19 	bl	8009112 <USB_WritePMA>
 80086e0:	e2e2      	b.n	8008ca8 <USB_EPStartXfer+0x95e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80086e2:	683b      	ldr	r3, [r7, #0]
 80086e4:	785b      	ldrb	r3, [r3, #1]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d16b      	bne.n	80087c2 <USB_EPStartXfer+0x478>
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	64bb      	str	r3, [r7, #72]	@ 0x48
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80086f4:	b29b      	uxth	r3, r3
 80086f6:	461a      	mov	r2, r3
 80086f8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80086fa:	4413      	add	r3, r2
 80086fc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80086fe:	683b      	ldr	r3, [r7, #0]
 8008700:	781b      	ldrb	r3, [r3, #0]
 8008702:	00da      	lsls	r2, r3, #3
 8008704:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008706:	4413      	add	r3, r2
 8008708:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800870c:	647b      	str	r3, [r7, #68]	@ 0x44
 800870e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008710:	881b      	ldrh	r3, [r3, #0]
 8008712:	b29b      	uxth	r3, r3
 8008714:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008718:	b29a      	uxth	r2, r3
 800871a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800871c:	801a      	strh	r2, [r3, #0]
 800871e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008722:	2b00      	cmp	r3, #0
 8008724:	d10a      	bne.n	800873c <USB_EPStartXfer+0x3f2>
 8008726:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008728:	881b      	ldrh	r3, [r3, #0]
 800872a:	b29b      	uxth	r3, r3
 800872c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008730:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008734:	b29a      	uxth	r2, r3
 8008736:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008738:	801a      	strh	r2, [r3, #0]
 800873a:	e05d      	b.n	80087f8 <USB_EPStartXfer+0x4ae>
 800873c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008740:	2b3e      	cmp	r3, #62	@ 0x3e
 8008742:	d81c      	bhi.n	800877e <USB_EPStartXfer+0x434>
 8008744:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008748:	085b      	lsrs	r3, r3, #1
 800874a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800874e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008752:	f003 0301 	and.w	r3, r3, #1
 8008756:	2b00      	cmp	r3, #0
 8008758:	d004      	beq.n	8008764 <USB_EPStartXfer+0x41a>
 800875a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800875e:	3301      	adds	r3, #1
 8008760:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008764:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008766:	881b      	ldrh	r3, [r3, #0]
 8008768:	b29a      	uxth	r2, r3
 800876a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800876e:	b29b      	uxth	r3, r3
 8008770:	029b      	lsls	r3, r3, #10
 8008772:	b29b      	uxth	r3, r3
 8008774:	4313      	orrs	r3, r2
 8008776:	b29a      	uxth	r2, r3
 8008778:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800877a:	801a      	strh	r2, [r3, #0]
 800877c:	e03c      	b.n	80087f8 <USB_EPStartXfer+0x4ae>
 800877e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008782:	095b      	lsrs	r3, r3, #5
 8008784:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008788:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800878c:	f003 031f 	and.w	r3, r3, #31
 8008790:	2b00      	cmp	r3, #0
 8008792:	d104      	bne.n	800879e <USB_EPStartXfer+0x454>
 8008794:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008798:	3b01      	subs	r3, #1
 800879a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800879e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80087a0:	881b      	ldrh	r3, [r3, #0]
 80087a2:	b29a      	uxth	r2, r3
 80087a4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80087a8:	b29b      	uxth	r3, r3
 80087aa:	029b      	lsls	r3, r3, #10
 80087ac:	b29b      	uxth	r3, r3
 80087ae:	4313      	orrs	r3, r2
 80087b0:	b29b      	uxth	r3, r3
 80087b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80087b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80087ba:	b29a      	uxth	r2, r3
 80087bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80087be:	801a      	strh	r2, [r3, #0]
 80087c0:	e01a      	b.n	80087f8 <USB_EPStartXfer+0x4ae>
 80087c2:	683b      	ldr	r3, [r7, #0]
 80087c4:	785b      	ldrb	r3, [r3, #1]
 80087c6:	2b01      	cmp	r3, #1
 80087c8:	d116      	bne.n	80087f8 <USB_EPStartXfer+0x4ae>
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	653b      	str	r3, [r7, #80]	@ 0x50
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80087d4:	b29b      	uxth	r3, r3
 80087d6:	461a      	mov	r2, r3
 80087d8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80087da:	4413      	add	r3, r2
 80087dc:	653b      	str	r3, [r7, #80]	@ 0x50
 80087de:	683b      	ldr	r3, [r7, #0]
 80087e0:	781b      	ldrb	r3, [r3, #0]
 80087e2:	00da      	lsls	r2, r3, #3
 80087e4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80087e6:	4413      	add	r3, r2
 80087e8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80087ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80087ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80087f2:	b29a      	uxth	r2, r3
 80087f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80087f6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80087f8:	683b      	ldr	r3, [r7, #0]
 80087fa:	891b      	ldrh	r3, [r3, #8]
 80087fc:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008800:	683b      	ldr	r3, [r7, #0]
 8008802:	6959      	ldr	r1, [r3, #20]
 8008804:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008808:	b29b      	uxth	r3, r3
 800880a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800880e:	6878      	ldr	r0, [r7, #4]
 8008810:	f000 fc7f 	bl	8009112 <USB_WritePMA>
            ep->xfer_buff += len;
 8008814:	683b      	ldr	r3, [r7, #0]
 8008816:	695a      	ldr	r2, [r3, #20]
 8008818:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800881c:	441a      	add	r2, r3
 800881e:	683b      	ldr	r3, [r7, #0]
 8008820:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008822:	683b      	ldr	r3, [r7, #0]
 8008824:	6a1a      	ldr	r2, [r3, #32]
 8008826:	683b      	ldr	r3, [r7, #0]
 8008828:	691b      	ldr	r3, [r3, #16]
 800882a:	429a      	cmp	r2, r3
 800882c:	d907      	bls.n	800883e <USB_EPStartXfer+0x4f4>
            {
              ep->xfer_len_db -= len;
 800882e:	683b      	ldr	r3, [r7, #0]
 8008830:	6a1a      	ldr	r2, [r3, #32]
 8008832:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008836:	1ad2      	subs	r2, r2, r3
 8008838:	683b      	ldr	r3, [r7, #0]
 800883a:	621a      	str	r2, [r3, #32]
 800883c:	e006      	b.n	800884c <USB_EPStartXfer+0x502>
            }
            else
            {
              len = ep->xfer_len_db;
 800883e:	683b      	ldr	r3, [r7, #0]
 8008840:	6a1b      	ldr	r3, [r3, #32]
 8008842:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 8008846:	683b      	ldr	r3, [r7, #0]
 8008848:	2200      	movs	r2, #0
 800884a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	643b      	str	r3, [r7, #64]	@ 0x40
 8008850:	683b      	ldr	r3, [r7, #0]
 8008852:	785b      	ldrb	r3, [r3, #1]
 8008854:	2b00      	cmp	r3, #0
 8008856:	d16b      	bne.n	8008930 <USB_EPStartXfer+0x5e6>
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008862:	b29b      	uxth	r3, r3
 8008864:	461a      	mov	r2, r3
 8008866:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008868:	4413      	add	r3, r2
 800886a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800886c:	683b      	ldr	r3, [r7, #0]
 800886e:	781b      	ldrb	r3, [r3, #0]
 8008870:	00da      	lsls	r2, r3, #3
 8008872:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008874:	4413      	add	r3, r2
 8008876:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800887a:	637b      	str	r3, [r7, #52]	@ 0x34
 800887c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800887e:	881b      	ldrh	r3, [r3, #0]
 8008880:	b29b      	uxth	r3, r3
 8008882:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008886:	b29a      	uxth	r2, r3
 8008888:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800888a:	801a      	strh	r2, [r3, #0]
 800888c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008890:	2b00      	cmp	r3, #0
 8008892:	d10a      	bne.n	80088aa <USB_EPStartXfer+0x560>
 8008894:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008896:	881b      	ldrh	r3, [r3, #0]
 8008898:	b29b      	uxth	r3, r3
 800889a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800889e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80088a2:	b29a      	uxth	r2, r3
 80088a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80088a6:	801a      	strh	r2, [r3, #0]
 80088a8:	e05b      	b.n	8008962 <USB_EPStartXfer+0x618>
 80088aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80088ae:	2b3e      	cmp	r3, #62	@ 0x3e
 80088b0:	d81c      	bhi.n	80088ec <USB_EPStartXfer+0x5a2>
 80088b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80088b6:	085b      	lsrs	r3, r3, #1
 80088b8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80088bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80088c0:	f003 0301 	and.w	r3, r3, #1
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d004      	beq.n	80088d2 <USB_EPStartXfer+0x588>
 80088c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80088cc:	3301      	adds	r3, #1
 80088ce:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80088d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80088d4:	881b      	ldrh	r3, [r3, #0]
 80088d6:	b29a      	uxth	r2, r3
 80088d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80088dc:	b29b      	uxth	r3, r3
 80088de:	029b      	lsls	r3, r3, #10
 80088e0:	b29b      	uxth	r3, r3
 80088e2:	4313      	orrs	r3, r2
 80088e4:	b29a      	uxth	r2, r3
 80088e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80088e8:	801a      	strh	r2, [r3, #0]
 80088ea:	e03a      	b.n	8008962 <USB_EPStartXfer+0x618>
 80088ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80088f0:	095b      	lsrs	r3, r3, #5
 80088f2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80088f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80088fa:	f003 031f 	and.w	r3, r3, #31
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d104      	bne.n	800890c <USB_EPStartXfer+0x5c2>
 8008902:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008906:	3b01      	subs	r3, #1
 8008908:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800890c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800890e:	881b      	ldrh	r3, [r3, #0]
 8008910:	b29a      	uxth	r2, r3
 8008912:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008916:	b29b      	uxth	r3, r3
 8008918:	029b      	lsls	r3, r3, #10
 800891a:	b29b      	uxth	r3, r3
 800891c:	4313      	orrs	r3, r2
 800891e:	b29b      	uxth	r3, r3
 8008920:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008924:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008928:	b29a      	uxth	r2, r3
 800892a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800892c:	801a      	strh	r2, [r3, #0]
 800892e:	e018      	b.n	8008962 <USB_EPStartXfer+0x618>
 8008930:	683b      	ldr	r3, [r7, #0]
 8008932:	785b      	ldrb	r3, [r3, #1]
 8008934:	2b01      	cmp	r3, #1
 8008936:	d114      	bne.n	8008962 <USB_EPStartXfer+0x618>
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800893e:	b29b      	uxth	r3, r3
 8008940:	461a      	mov	r2, r3
 8008942:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008944:	4413      	add	r3, r2
 8008946:	643b      	str	r3, [r7, #64]	@ 0x40
 8008948:	683b      	ldr	r3, [r7, #0]
 800894a:	781b      	ldrb	r3, [r3, #0]
 800894c:	00da      	lsls	r2, r3, #3
 800894e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008950:	4413      	add	r3, r2
 8008952:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008956:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008958:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800895c:	b29a      	uxth	r2, r3
 800895e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008960:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008962:	683b      	ldr	r3, [r7, #0]
 8008964:	895b      	ldrh	r3, [r3, #10]
 8008966:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800896a:	683b      	ldr	r3, [r7, #0]
 800896c:	6959      	ldr	r1, [r3, #20]
 800896e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008972:	b29b      	uxth	r3, r3
 8008974:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008978:	6878      	ldr	r0, [r7, #4]
 800897a:	f000 fbca 	bl	8009112 <USB_WritePMA>
 800897e:	e193      	b.n	8008ca8 <USB_EPStartXfer+0x95e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8008980:	683b      	ldr	r3, [r7, #0]
 8008982:	6a1b      	ldr	r3, [r3, #32]
 8008984:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8008988:	687a      	ldr	r2, [r7, #4]
 800898a:	683b      	ldr	r3, [r7, #0]
 800898c:	781b      	ldrb	r3, [r3, #0]
 800898e:	009b      	lsls	r3, r3, #2
 8008990:	4413      	add	r3, r2
 8008992:	881b      	ldrh	r3, [r3, #0]
 8008994:	b29b      	uxth	r3, r3
 8008996:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800899a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800899e:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80089a2:	687a      	ldr	r2, [r7, #4]
 80089a4:	683b      	ldr	r3, [r7, #0]
 80089a6:	781b      	ldrb	r3, [r3, #0]
 80089a8:	009b      	lsls	r3, r3, #2
 80089aa:	441a      	add	r2, r3
 80089ac:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80089b0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80089b4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80089b8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80089bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80089c0:	b29b      	uxth	r3, r3
 80089c2:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80089ce:	b29b      	uxth	r3, r3
 80089d0:	461a      	mov	r2, r3
 80089d2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80089d4:	4413      	add	r3, r2
 80089d6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80089d8:	683b      	ldr	r3, [r7, #0]
 80089da:	781b      	ldrb	r3, [r3, #0]
 80089dc:	00da      	lsls	r2, r3, #3
 80089de:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80089e0:	4413      	add	r3, r2
 80089e2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80089e6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80089e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80089ec:	b29a      	uxth	r2, r3
 80089ee:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80089f0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80089f2:	683b      	ldr	r3, [r7, #0]
 80089f4:	891b      	ldrh	r3, [r3, #8]
 80089f6:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80089fa:	683b      	ldr	r3, [r7, #0]
 80089fc:	6959      	ldr	r1, [r3, #20]
 80089fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008a02:	b29b      	uxth	r3, r3
 8008a04:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008a08:	6878      	ldr	r0, [r7, #4]
 8008a0a:	f000 fb82 	bl	8009112 <USB_WritePMA>
 8008a0e:	e14b      	b.n	8008ca8 <USB_EPStartXfer+0x95e>
        }
      }
      else /* Manage isochronous double buffer IN mode */
      {
        /* Each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8008a10:	683b      	ldr	r3, [r7, #0]
 8008a12:	6a1a      	ldr	r2, [r3, #32]
 8008a14:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008a18:	1ad2      	subs	r2, r2, r3
 8008a1a:	683b      	ldr	r3, [r7, #0]
 8008a1c:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008a1e:	687a      	ldr	r2, [r7, #4]
 8008a20:	683b      	ldr	r3, [r7, #0]
 8008a22:	781b      	ldrb	r3, [r3, #0]
 8008a24:	009b      	lsls	r3, r3, #2
 8008a26:	4413      	add	r3, r2
 8008a28:	881b      	ldrh	r3, [r3, #0]
 8008a2a:	b29b      	uxth	r3, r3
 8008a2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	f000 809a 	beq.w	8008b6a <USB_EPStartXfer+0x820>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	673b      	str	r3, [r7, #112]	@ 0x70
 8008a3a:	683b      	ldr	r3, [r7, #0]
 8008a3c:	785b      	ldrb	r3, [r3, #1]
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d16b      	bne.n	8008b1a <USB_EPStartXfer+0x7d0>
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008a4c:	b29b      	uxth	r3, r3
 8008a4e:	461a      	mov	r2, r3
 8008a50:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008a52:	4413      	add	r3, r2
 8008a54:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008a56:	683b      	ldr	r3, [r7, #0]
 8008a58:	781b      	ldrb	r3, [r3, #0]
 8008a5a:	00da      	lsls	r2, r3, #3
 8008a5c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008a5e:	4413      	add	r3, r2
 8008a60:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008a64:	667b      	str	r3, [r7, #100]	@ 0x64
 8008a66:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008a68:	881b      	ldrh	r3, [r3, #0]
 8008a6a:	b29b      	uxth	r3, r3
 8008a6c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008a70:	b29a      	uxth	r2, r3
 8008a72:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008a74:	801a      	strh	r2, [r3, #0]
 8008a76:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d10a      	bne.n	8008a94 <USB_EPStartXfer+0x74a>
 8008a7e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008a80:	881b      	ldrh	r3, [r3, #0]
 8008a82:	b29b      	uxth	r3, r3
 8008a84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008a8c:	b29a      	uxth	r2, r3
 8008a8e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008a90:	801a      	strh	r2, [r3, #0]
 8008a92:	e05b      	b.n	8008b4c <USB_EPStartXfer+0x802>
 8008a94:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008a98:	2b3e      	cmp	r3, #62	@ 0x3e
 8008a9a:	d81c      	bhi.n	8008ad6 <USB_EPStartXfer+0x78c>
 8008a9c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008aa0:	085b      	lsrs	r3, r3, #1
 8008aa2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008aa6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008aaa:	f003 0301 	and.w	r3, r3, #1
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d004      	beq.n	8008abc <USB_EPStartXfer+0x772>
 8008ab2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008ab6:	3301      	adds	r3, #1
 8008ab8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008abc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008abe:	881b      	ldrh	r3, [r3, #0]
 8008ac0:	b29a      	uxth	r2, r3
 8008ac2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008ac6:	b29b      	uxth	r3, r3
 8008ac8:	029b      	lsls	r3, r3, #10
 8008aca:	b29b      	uxth	r3, r3
 8008acc:	4313      	orrs	r3, r2
 8008ace:	b29a      	uxth	r2, r3
 8008ad0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008ad2:	801a      	strh	r2, [r3, #0]
 8008ad4:	e03a      	b.n	8008b4c <USB_EPStartXfer+0x802>
 8008ad6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008ada:	095b      	lsrs	r3, r3, #5
 8008adc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008ae0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008ae4:	f003 031f 	and.w	r3, r3, #31
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d104      	bne.n	8008af6 <USB_EPStartXfer+0x7ac>
 8008aec:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008af0:	3b01      	subs	r3, #1
 8008af2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008af6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008af8:	881b      	ldrh	r3, [r3, #0]
 8008afa:	b29a      	uxth	r2, r3
 8008afc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008b00:	b29b      	uxth	r3, r3
 8008b02:	029b      	lsls	r3, r3, #10
 8008b04:	b29b      	uxth	r3, r3
 8008b06:	4313      	orrs	r3, r2
 8008b08:	b29b      	uxth	r3, r3
 8008b0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b12:	b29a      	uxth	r2, r3
 8008b14:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008b16:	801a      	strh	r2, [r3, #0]
 8008b18:	e018      	b.n	8008b4c <USB_EPStartXfer+0x802>
 8008b1a:	683b      	ldr	r3, [r7, #0]
 8008b1c:	785b      	ldrb	r3, [r3, #1]
 8008b1e:	2b01      	cmp	r3, #1
 8008b20:	d114      	bne.n	8008b4c <USB_EPStartXfer+0x802>
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008b28:	b29b      	uxth	r3, r3
 8008b2a:	461a      	mov	r2, r3
 8008b2c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008b2e:	4413      	add	r3, r2
 8008b30:	673b      	str	r3, [r7, #112]	@ 0x70
 8008b32:	683b      	ldr	r3, [r7, #0]
 8008b34:	781b      	ldrb	r3, [r3, #0]
 8008b36:	00da      	lsls	r2, r3, #3
 8008b38:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008b3a:	4413      	add	r3, r2
 8008b3c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008b40:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008b42:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008b46:	b29a      	uxth	r2, r3
 8008b48:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008b4a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8008b4c:	683b      	ldr	r3, [r7, #0]
 8008b4e:	895b      	ldrh	r3, [r3, #10]
 8008b50:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008b54:	683b      	ldr	r3, [r7, #0]
 8008b56:	6959      	ldr	r1, [r3, #20]
 8008b58:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008b5c:	b29b      	uxth	r3, r3
 8008b5e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008b62:	6878      	ldr	r0, [r7, #4]
 8008b64:	f000 fad5 	bl	8009112 <USB_WritePMA>
 8008b68:	e09e      	b.n	8008ca8 <USB_EPStartXfer+0x95e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008b6a:	683b      	ldr	r3, [r7, #0]
 8008b6c:	785b      	ldrb	r3, [r3, #1]
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d16b      	bne.n	8008c4a <USB_EPStartXfer+0x900>
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008b7c:	b29b      	uxth	r3, r3
 8008b7e:	461a      	mov	r2, r3
 8008b80:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008b82:	4413      	add	r3, r2
 8008b84:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008b86:	683b      	ldr	r3, [r7, #0]
 8008b88:	781b      	ldrb	r3, [r3, #0]
 8008b8a:	00da      	lsls	r2, r3, #3
 8008b8c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008b8e:	4413      	add	r3, r2
 8008b90:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008b94:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008b96:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008b98:	881b      	ldrh	r3, [r3, #0]
 8008b9a:	b29b      	uxth	r3, r3
 8008b9c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008ba0:	b29a      	uxth	r2, r3
 8008ba2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008ba4:	801a      	strh	r2, [r3, #0]
 8008ba6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d10a      	bne.n	8008bc4 <USB_EPStartXfer+0x87a>
 8008bae:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008bb0:	881b      	ldrh	r3, [r3, #0]
 8008bb2:	b29b      	uxth	r3, r3
 8008bb4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008bb8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008bbc:	b29a      	uxth	r2, r3
 8008bbe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008bc0:	801a      	strh	r2, [r3, #0]
 8008bc2:	e063      	b.n	8008c8c <USB_EPStartXfer+0x942>
 8008bc4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008bc8:	2b3e      	cmp	r3, #62	@ 0x3e
 8008bca:	d81c      	bhi.n	8008c06 <USB_EPStartXfer+0x8bc>
 8008bcc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008bd0:	085b      	lsrs	r3, r3, #1
 8008bd2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008bd6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008bda:	f003 0301 	and.w	r3, r3, #1
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d004      	beq.n	8008bec <USB_EPStartXfer+0x8a2>
 8008be2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008be6:	3301      	adds	r3, #1
 8008be8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008bec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008bee:	881b      	ldrh	r3, [r3, #0]
 8008bf0:	b29a      	uxth	r2, r3
 8008bf2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008bf6:	b29b      	uxth	r3, r3
 8008bf8:	029b      	lsls	r3, r3, #10
 8008bfa:	b29b      	uxth	r3, r3
 8008bfc:	4313      	orrs	r3, r2
 8008bfe:	b29a      	uxth	r2, r3
 8008c00:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008c02:	801a      	strh	r2, [r3, #0]
 8008c04:	e042      	b.n	8008c8c <USB_EPStartXfer+0x942>
 8008c06:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008c0a:	095b      	lsrs	r3, r3, #5
 8008c0c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008c10:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008c14:	f003 031f 	and.w	r3, r3, #31
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d104      	bne.n	8008c26 <USB_EPStartXfer+0x8dc>
 8008c1c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008c20:	3b01      	subs	r3, #1
 8008c22:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008c26:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008c28:	881b      	ldrh	r3, [r3, #0]
 8008c2a:	b29a      	uxth	r2, r3
 8008c2c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008c30:	b29b      	uxth	r3, r3
 8008c32:	029b      	lsls	r3, r3, #10
 8008c34:	b29b      	uxth	r3, r3
 8008c36:	4313      	orrs	r3, r2
 8008c38:	b29b      	uxth	r3, r3
 8008c3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008c3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008c42:	b29a      	uxth	r2, r3
 8008c44:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008c46:	801a      	strh	r2, [r3, #0]
 8008c48:	e020      	b.n	8008c8c <USB_EPStartXfer+0x942>
 8008c4a:	683b      	ldr	r3, [r7, #0]
 8008c4c:	785b      	ldrb	r3, [r3, #1]
 8008c4e:	2b01      	cmp	r3, #1
 8008c50:	d11c      	bne.n	8008c8c <USB_EPStartXfer+0x942>
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008c5e:	b29b      	uxth	r3, r3
 8008c60:	461a      	mov	r2, r3
 8008c62:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008c66:	4413      	add	r3, r2
 8008c68:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008c6c:	683b      	ldr	r3, [r7, #0]
 8008c6e:	781b      	ldrb	r3, [r3, #0]
 8008c70:	00da      	lsls	r2, r3, #3
 8008c72:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008c76:	4413      	add	r3, r2
 8008c78:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008c7c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008c80:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008c84:	b29a      	uxth	r2, r3
 8008c86:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008c8a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008c8c:	683b      	ldr	r3, [r7, #0]
 8008c8e:	891b      	ldrh	r3, [r3, #8]
 8008c90:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008c94:	683b      	ldr	r3, [r7, #0]
 8008c96:	6959      	ldr	r1, [r3, #20]
 8008c98:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008c9c:	b29b      	uxth	r3, r3
 8008c9e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008ca2:	6878      	ldr	r0, [r7, #4]
 8008ca4:	f000 fa35 	bl	8009112 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8008ca8:	687a      	ldr	r2, [r7, #4]
 8008caa:	683b      	ldr	r3, [r7, #0]
 8008cac:	781b      	ldrb	r3, [r3, #0]
 8008cae:	009b      	lsls	r3, r3, #2
 8008cb0:	4413      	add	r3, r2
 8008cb2:	881b      	ldrh	r3, [r3, #0]
 8008cb4:	b29b      	uxth	r3, r3
 8008cb6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008cba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008cbe:	817b      	strh	r3, [r7, #10]
 8008cc0:	897b      	ldrh	r3, [r7, #10]
 8008cc2:	f083 0310 	eor.w	r3, r3, #16
 8008cc6:	817b      	strh	r3, [r7, #10]
 8008cc8:	897b      	ldrh	r3, [r7, #10]
 8008cca:	f083 0320 	eor.w	r3, r3, #32
 8008cce:	817b      	strh	r3, [r7, #10]
 8008cd0:	687a      	ldr	r2, [r7, #4]
 8008cd2:	683b      	ldr	r3, [r7, #0]
 8008cd4:	781b      	ldrb	r3, [r3, #0]
 8008cd6:	009b      	lsls	r3, r3, #2
 8008cd8:	441a      	add	r2, r3
 8008cda:	897b      	ldrh	r3, [r7, #10]
 8008cdc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008ce0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008ce4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008ce8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008cec:	b29b      	uxth	r3, r3
 8008cee:	8013      	strh	r3, [r2, #0]
 8008cf0:	e0d5      	b.n	8008e9e <USB_EPStartXfer+0xb54>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8008cf2:	683b      	ldr	r3, [r7, #0]
 8008cf4:	7b1b      	ldrb	r3, [r3, #12]
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d156      	bne.n	8008da8 <USB_EPStartXfer+0xa5e>
    {
      if ((ep->xfer_len == 0U) && (ep->type == EP_TYPE_CTRL))
 8008cfa:	683b      	ldr	r3, [r7, #0]
 8008cfc:	699b      	ldr	r3, [r3, #24]
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d122      	bne.n	8008d48 <USB_EPStartXfer+0x9fe>
 8008d02:	683b      	ldr	r3, [r7, #0]
 8008d04:	78db      	ldrb	r3, [r3, #3]
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d11e      	bne.n	8008d48 <USB_EPStartXfer+0x9fe>
      {
        /* This is a status out stage set the OUT_STATUS */
        PCD_SET_OUT_STATUS(USBx, ep->num);
 8008d0a:	687a      	ldr	r2, [r7, #4]
 8008d0c:	683b      	ldr	r3, [r7, #0]
 8008d0e:	781b      	ldrb	r3, [r3, #0]
 8008d10:	009b      	lsls	r3, r3, #2
 8008d12:	4413      	add	r3, r2
 8008d14:	881b      	ldrh	r3, [r3, #0]
 8008d16:	b29b      	uxth	r3, r3
 8008d18:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008d1c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008d20:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 8008d24:	687a      	ldr	r2, [r7, #4]
 8008d26:	683b      	ldr	r3, [r7, #0]
 8008d28:	781b      	ldrb	r3, [r3, #0]
 8008d2a:	009b      	lsls	r3, r3, #2
 8008d2c:	441a      	add	r2, r3
 8008d2e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8008d32:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008d36:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008d3a:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8008d3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008d42:	b29b      	uxth	r3, r3
 8008d44:	8013      	strh	r3, [r2, #0]
 8008d46:	e01d      	b.n	8008d84 <USB_EPStartXfer+0xa3a>
      }
      else
      {
        PCD_CLEAR_OUT_STATUS(USBx, ep->num);
 8008d48:	687a      	ldr	r2, [r7, #4]
 8008d4a:	683b      	ldr	r3, [r7, #0]
 8008d4c:	781b      	ldrb	r3, [r3, #0]
 8008d4e:	009b      	lsls	r3, r3, #2
 8008d50:	4413      	add	r3, r2
 8008d52:	881b      	ldrh	r3, [r3, #0]
 8008d54:	b29b      	uxth	r3, r3
 8008d56:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8008d5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008d5e:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
 8008d62:	687a      	ldr	r2, [r7, #4]
 8008d64:	683b      	ldr	r3, [r7, #0]
 8008d66:	781b      	ldrb	r3, [r3, #0]
 8008d68:	009b      	lsls	r3, r3, #2
 8008d6a:	441a      	add	r2, r3
 8008d6c:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 8008d70:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008d74:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008d78:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008d7c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008d80:	b29b      	uxth	r3, r3
 8008d82:	8013      	strh	r3, [r2, #0]
      }

      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8008d84:	683b      	ldr	r3, [r7, #0]
 8008d86:	699a      	ldr	r2, [r3, #24]
 8008d88:	683b      	ldr	r3, [r7, #0]
 8008d8a:	691b      	ldr	r3, [r3, #16]
 8008d8c:	429a      	cmp	r2, r3
 8008d8e:	d907      	bls.n	8008da0 <USB_EPStartXfer+0xa56>
      {
        ep->xfer_len -= ep->maxpacket;
 8008d90:	683b      	ldr	r3, [r7, #0]
 8008d92:	699a      	ldr	r2, [r3, #24]
 8008d94:	683b      	ldr	r3, [r7, #0]
 8008d96:	691b      	ldr	r3, [r3, #16]
 8008d98:	1ad2      	subs	r2, r2, r3
 8008d9a:	683b      	ldr	r3, [r7, #0]
 8008d9c:	619a      	str	r2, [r3, #24]
 8008d9e:	e054      	b.n	8008e4a <USB_EPStartXfer+0xb00>
      }
      else
      {
        ep->xfer_len = 0U;
 8008da0:	683b      	ldr	r3, [r7, #0]
 8008da2:	2200      	movs	r2, #0
 8008da4:	619a      	str	r2, [r3, #24]
 8008da6:	e050      	b.n	8008e4a <USB_EPStartXfer+0xb00>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8008da8:	683b      	ldr	r3, [r7, #0]
 8008daa:	78db      	ldrb	r3, [r3, #3]
 8008dac:	2b02      	cmp	r3, #2
 8008dae:	d142      	bne.n	8008e36 <USB_EPStartXfer+0xaec>
      {
        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8008db0:	683b      	ldr	r3, [r7, #0]
 8008db2:	69db      	ldr	r3, [r3, #28]
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d048      	beq.n	8008e4a <USB_EPStartXfer+0xb00>
        {
          /* Update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8008db8:	687a      	ldr	r2, [r7, #4]
 8008dba:	683b      	ldr	r3, [r7, #0]
 8008dbc:	781b      	ldrb	r3, [r3, #0]
 8008dbe:	009b      	lsls	r3, r3, #2
 8008dc0:	4413      	add	r3, r2
 8008dc2:	881b      	ldrh	r3, [r3, #0]
 8008dc4:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92

          /* Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008dc8:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8008dcc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d005      	beq.n	8008de0 <USB_EPStartXfer+0xa96>
 8008dd4:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8008dd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d10b      	bne.n	8008df8 <USB_EPStartXfer+0xaae>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008de0:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8008de4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d12e      	bne.n	8008e4a <USB_EPStartXfer+0xb00>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008dec:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8008df0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d128      	bne.n	8008e4a <USB_EPStartXfer+0xb00>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8008df8:	687a      	ldr	r2, [r7, #4]
 8008dfa:	683b      	ldr	r3, [r7, #0]
 8008dfc:	781b      	ldrb	r3, [r3, #0]
 8008dfe:	009b      	lsls	r3, r3, #2
 8008e00:	4413      	add	r3, r2
 8008e02:	881b      	ldrh	r3, [r3, #0]
 8008e04:	b29b      	uxth	r3, r3
 8008e06:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008e0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008e0e:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
 8008e12:	687a      	ldr	r2, [r7, #4]
 8008e14:	683b      	ldr	r3, [r7, #0]
 8008e16:	781b      	ldrb	r3, [r3, #0]
 8008e18:	009b      	lsls	r3, r3, #2
 8008e1a:	441a      	add	r2, r3
 8008e1c:	f8b7 3090 	ldrh.w	r3, [r7, #144]	@ 0x90
 8008e20:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008e24:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008e28:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008e2c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008e30:	b29b      	uxth	r3, r3
 8008e32:	8013      	strh	r3, [r2, #0]
 8008e34:	e009      	b.n	8008e4a <USB_EPStartXfer+0xb00>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8008e36:	683b      	ldr	r3, [r7, #0]
 8008e38:	78db      	ldrb	r3, [r3, #3]
 8008e3a:	2b01      	cmp	r3, #1
 8008e3c:	d103      	bne.n	8008e46 <USB_EPStartXfer+0xafc>
      {
        /* Only single packet transfer supported in FS */
        ep->xfer_len = 0U;
 8008e3e:	683b      	ldr	r3, [r7, #0]
 8008e40:	2200      	movs	r2, #0
 8008e42:	619a      	str	r2, [r3, #24]
 8008e44:	e001      	b.n	8008e4a <USB_EPStartXfer+0xb00>
      }
      else
      {
        return HAL_ERROR;
 8008e46:	2301      	movs	r3, #1
 8008e48:	e02a      	b.n	8008ea0 <USB_EPStartXfer+0xb56>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008e4a:	687a      	ldr	r2, [r7, #4]
 8008e4c:	683b      	ldr	r3, [r7, #0]
 8008e4e:	781b      	ldrb	r3, [r3, #0]
 8008e50:	009b      	lsls	r3, r3, #2
 8008e52:	4413      	add	r3, r2
 8008e54:	881b      	ldrh	r3, [r3, #0]
 8008e56:	b29b      	uxth	r3, r3
 8008e58:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008e5c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008e60:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8008e64:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8008e68:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008e6c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8008e70:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8008e74:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008e78:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8008e7c:	687a      	ldr	r2, [r7, #4]
 8008e7e:	683b      	ldr	r3, [r7, #0]
 8008e80:	781b      	ldrb	r3, [r3, #0]
 8008e82:	009b      	lsls	r3, r3, #2
 8008e84:	441a      	add	r2, r3
 8008e86:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8008e8a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008e8e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008e92:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008e96:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008e9a:	b29b      	uxth	r3, r3
 8008e9c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008e9e:	2300      	movs	r3, #0
}
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	37b0      	adds	r7, #176	@ 0xb0
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	bd80      	pop	{r7, pc}

08008ea8 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008ea8:	b480      	push	{r7}
 8008eaa:	b085      	sub	sp, #20
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	6078      	str	r0, [r7, #4]
 8008eb0:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008eb2:	683b      	ldr	r3, [r7, #0]
 8008eb4:	785b      	ldrb	r3, [r3, #1]
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d020      	beq.n	8008efc <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8008eba:	687a      	ldr	r2, [r7, #4]
 8008ebc:	683b      	ldr	r3, [r7, #0]
 8008ebe:	781b      	ldrb	r3, [r3, #0]
 8008ec0:	009b      	lsls	r3, r3, #2
 8008ec2:	4413      	add	r3, r2
 8008ec4:	881b      	ldrh	r3, [r3, #0]
 8008ec6:	b29b      	uxth	r3, r3
 8008ec8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008ecc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008ed0:	81bb      	strh	r3, [r7, #12]
 8008ed2:	89bb      	ldrh	r3, [r7, #12]
 8008ed4:	f083 0310 	eor.w	r3, r3, #16
 8008ed8:	81bb      	strh	r3, [r7, #12]
 8008eda:	687a      	ldr	r2, [r7, #4]
 8008edc:	683b      	ldr	r3, [r7, #0]
 8008ede:	781b      	ldrb	r3, [r3, #0]
 8008ee0:	009b      	lsls	r3, r3, #2
 8008ee2:	441a      	add	r2, r3
 8008ee4:	89bb      	ldrh	r3, [r7, #12]
 8008ee6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008eea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008eee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008ef2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008ef6:	b29b      	uxth	r3, r3
 8008ef8:	8013      	strh	r3, [r2, #0]
 8008efa:	e01f      	b.n	8008f3c <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8008efc:	687a      	ldr	r2, [r7, #4]
 8008efe:	683b      	ldr	r3, [r7, #0]
 8008f00:	781b      	ldrb	r3, [r3, #0]
 8008f02:	009b      	lsls	r3, r3, #2
 8008f04:	4413      	add	r3, r2
 8008f06:	881b      	ldrh	r3, [r3, #0]
 8008f08:	b29b      	uxth	r3, r3
 8008f0a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008f0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008f12:	81fb      	strh	r3, [r7, #14]
 8008f14:	89fb      	ldrh	r3, [r7, #14]
 8008f16:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008f1a:	81fb      	strh	r3, [r7, #14]
 8008f1c:	687a      	ldr	r2, [r7, #4]
 8008f1e:	683b      	ldr	r3, [r7, #0]
 8008f20:	781b      	ldrb	r3, [r3, #0]
 8008f22:	009b      	lsls	r3, r3, #2
 8008f24:	441a      	add	r2, r3
 8008f26:	89fb      	ldrh	r3, [r7, #14]
 8008f28:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008f2c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008f30:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008f34:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008f38:	b29b      	uxth	r3, r3
 8008f3a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008f3c:	2300      	movs	r3, #0
}
 8008f3e:	4618      	mov	r0, r3
 8008f40:	3714      	adds	r7, #20
 8008f42:	46bd      	mov	sp, r7
 8008f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f48:	4770      	bx	lr

08008f4a <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008f4a:	b480      	push	{r7}
 8008f4c:	b087      	sub	sp, #28
 8008f4e:	af00      	add	r7, sp, #0
 8008f50:	6078      	str	r0, [r7, #4]
 8008f52:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008f54:	683b      	ldr	r3, [r7, #0]
 8008f56:	785b      	ldrb	r3, [r3, #1]
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d04c      	beq.n	8008ff6 <USB_EPClearStall+0xac>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008f5c:	687a      	ldr	r2, [r7, #4]
 8008f5e:	683b      	ldr	r3, [r7, #0]
 8008f60:	781b      	ldrb	r3, [r3, #0]
 8008f62:	009b      	lsls	r3, r3, #2
 8008f64:	4413      	add	r3, r2
 8008f66:	881b      	ldrh	r3, [r3, #0]
 8008f68:	823b      	strh	r3, [r7, #16]
 8008f6a:	8a3b      	ldrh	r3, [r7, #16]
 8008f6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d01b      	beq.n	8008fac <USB_EPClearStall+0x62>
 8008f74:	687a      	ldr	r2, [r7, #4]
 8008f76:	683b      	ldr	r3, [r7, #0]
 8008f78:	781b      	ldrb	r3, [r3, #0]
 8008f7a:	009b      	lsls	r3, r3, #2
 8008f7c:	4413      	add	r3, r2
 8008f7e:	881b      	ldrh	r3, [r3, #0]
 8008f80:	b29b      	uxth	r3, r3
 8008f82:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008f86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008f8a:	81fb      	strh	r3, [r7, #14]
 8008f8c:	687a      	ldr	r2, [r7, #4]
 8008f8e:	683b      	ldr	r3, [r7, #0]
 8008f90:	781b      	ldrb	r3, [r3, #0]
 8008f92:	009b      	lsls	r3, r3, #2
 8008f94:	441a      	add	r2, r3
 8008f96:	89fb      	ldrh	r3, [r7, #14]
 8008f98:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008f9c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008fa0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008fa4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008fa8:	b29b      	uxth	r3, r3
 8008faa:	8013      	strh	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8008fac:	683b      	ldr	r3, [r7, #0]
 8008fae:	78db      	ldrb	r3, [r3, #3]
 8008fb0:	2b01      	cmp	r3, #1
 8008fb2:	d06c      	beq.n	800908e <USB_EPClearStall+0x144>
    {
      /* Configure NAK status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008fb4:	687a      	ldr	r2, [r7, #4]
 8008fb6:	683b      	ldr	r3, [r7, #0]
 8008fb8:	781b      	ldrb	r3, [r3, #0]
 8008fba:	009b      	lsls	r3, r3, #2
 8008fbc:	4413      	add	r3, r2
 8008fbe:	881b      	ldrh	r3, [r3, #0]
 8008fc0:	b29b      	uxth	r3, r3
 8008fc2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008fc6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008fca:	81bb      	strh	r3, [r7, #12]
 8008fcc:	89bb      	ldrh	r3, [r7, #12]
 8008fce:	f083 0320 	eor.w	r3, r3, #32
 8008fd2:	81bb      	strh	r3, [r7, #12]
 8008fd4:	687a      	ldr	r2, [r7, #4]
 8008fd6:	683b      	ldr	r3, [r7, #0]
 8008fd8:	781b      	ldrb	r3, [r3, #0]
 8008fda:	009b      	lsls	r3, r3, #2
 8008fdc:	441a      	add	r2, r3
 8008fde:	89bb      	ldrh	r3, [r7, #12]
 8008fe0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008fe4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008fe8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008fec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008ff0:	b29b      	uxth	r3, r3
 8008ff2:	8013      	strh	r3, [r2, #0]
 8008ff4:	e04b      	b.n	800908e <USB_EPClearStall+0x144>
    }
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008ff6:	687a      	ldr	r2, [r7, #4]
 8008ff8:	683b      	ldr	r3, [r7, #0]
 8008ffa:	781b      	ldrb	r3, [r3, #0]
 8008ffc:	009b      	lsls	r3, r3, #2
 8008ffe:	4413      	add	r3, r2
 8009000:	881b      	ldrh	r3, [r3, #0]
 8009002:	82fb      	strh	r3, [r7, #22]
 8009004:	8afb      	ldrh	r3, [r7, #22]
 8009006:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800900a:	2b00      	cmp	r3, #0
 800900c:	d01b      	beq.n	8009046 <USB_EPClearStall+0xfc>
 800900e:	687a      	ldr	r2, [r7, #4]
 8009010:	683b      	ldr	r3, [r7, #0]
 8009012:	781b      	ldrb	r3, [r3, #0]
 8009014:	009b      	lsls	r3, r3, #2
 8009016:	4413      	add	r3, r2
 8009018:	881b      	ldrh	r3, [r3, #0]
 800901a:	b29b      	uxth	r3, r3
 800901c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009020:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009024:	82bb      	strh	r3, [r7, #20]
 8009026:	687a      	ldr	r2, [r7, #4]
 8009028:	683b      	ldr	r3, [r7, #0]
 800902a:	781b      	ldrb	r3, [r3, #0]
 800902c:	009b      	lsls	r3, r3, #2
 800902e:	441a      	add	r2, r3
 8009030:	8abb      	ldrh	r3, [r7, #20]
 8009032:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009036:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800903a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800903e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009042:	b29b      	uxth	r3, r3
 8009044:	8013      	strh	r3, [r2, #0]

    /* Configure VALID status for the Endpoint */
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009046:	687a      	ldr	r2, [r7, #4]
 8009048:	683b      	ldr	r3, [r7, #0]
 800904a:	781b      	ldrb	r3, [r3, #0]
 800904c:	009b      	lsls	r3, r3, #2
 800904e:	4413      	add	r3, r2
 8009050:	881b      	ldrh	r3, [r3, #0]
 8009052:	b29b      	uxth	r3, r3
 8009054:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009058:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800905c:	827b      	strh	r3, [r7, #18]
 800905e:	8a7b      	ldrh	r3, [r7, #18]
 8009060:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8009064:	827b      	strh	r3, [r7, #18]
 8009066:	8a7b      	ldrh	r3, [r7, #18]
 8009068:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800906c:	827b      	strh	r3, [r7, #18]
 800906e:	687a      	ldr	r2, [r7, #4]
 8009070:	683b      	ldr	r3, [r7, #0]
 8009072:	781b      	ldrb	r3, [r3, #0]
 8009074:	009b      	lsls	r3, r3, #2
 8009076:	441a      	add	r2, r3
 8009078:	8a7b      	ldrh	r3, [r7, #18]
 800907a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800907e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009082:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009086:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800908a:	b29b      	uxth	r3, r3
 800908c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800908e:	2300      	movs	r3, #0
}
 8009090:	4618      	mov	r0, r3
 8009092:	371c      	adds	r7, #28
 8009094:	46bd      	mov	sp, r7
 8009096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800909a:	4770      	bx	lr

0800909c <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800909c:	b480      	push	{r7}
 800909e:	b083      	sub	sp, #12
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	6078      	str	r0, [r7, #4]
 80090a4:	460b      	mov	r3, r1
 80090a6:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80090a8:	78fb      	ldrb	r3, [r7, #3]
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d103      	bne.n	80090b6 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	2280      	movs	r2, #128	@ 0x80
 80090b2:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 80090b6:	2300      	movs	r3, #0
}
 80090b8:	4618      	mov	r0, r3
 80090ba:	370c      	adds	r7, #12
 80090bc:	46bd      	mov	sp, r7
 80090be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c2:	4770      	bx	lr

080090c4 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80090c4:	b480      	push	{r7}
 80090c6:	b083      	sub	sp, #12
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80090d2:	b29b      	uxth	r3, r3
 80090d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80090d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80090dc:	b29a      	uxth	r2, r3
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 80090e4:	2300      	movs	r3, #0
}
 80090e6:	4618      	mov	r0, r3
 80090e8:	370c      	adds	r7, #12
 80090ea:	46bd      	mov	sp, r7
 80090ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f0:	4770      	bx	lr

080090f2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 80090f2:	b480      	push	{r7}
 80090f4:	b085      	sub	sp, #20
 80090f6:	af00      	add	r7, sp, #0
 80090f8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8009100:	b29b      	uxth	r3, r3
 8009102:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8009104:	68fb      	ldr	r3, [r7, #12]
}
 8009106:	4618      	mov	r0, r3
 8009108:	3714      	adds	r7, #20
 800910a:	46bd      	mov	sp, r7
 800910c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009110:	4770      	bx	lr

08009112 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009112:	b480      	push	{r7}
 8009114:	b08b      	sub	sp, #44	@ 0x2c
 8009116:	af00      	add	r7, sp, #0
 8009118:	60f8      	str	r0, [r7, #12]
 800911a:	60b9      	str	r1, [r7, #8]
 800911c:	4611      	mov	r1, r2
 800911e:	461a      	mov	r2, r3
 8009120:	460b      	mov	r3, r1
 8009122:	80fb      	strh	r3, [r7, #6]
 8009124:	4613      	mov	r3, r2
 8009126:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8009128:	88bb      	ldrh	r3, [r7, #4]
 800912a:	3301      	adds	r3, #1
 800912c:	085b      	lsrs	r3, r3, #1
 800912e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009134:	68bb      	ldr	r3, [r7, #8]
 8009136:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009138:	88fa      	ldrh	r2, [r7, #6]
 800913a:	697b      	ldr	r3, [r7, #20]
 800913c:	4413      	add	r3, r2
 800913e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009142:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8009144:	69bb      	ldr	r3, [r7, #24]
 8009146:	627b      	str	r3, [r7, #36]	@ 0x24
 8009148:	e01b      	b.n	8009182 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800914a:	69fb      	ldr	r3, [r7, #28]
 800914c:	781b      	ldrb	r3, [r3, #0]
 800914e:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8009150:	69fb      	ldr	r3, [r7, #28]
 8009152:	3301      	adds	r3, #1
 8009154:	781b      	ldrb	r3, [r3, #0]
 8009156:	021b      	lsls	r3, r3, #8
 8009158:	b21a      	sxth	r2, r3
 800915a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800915e:	4313      	orrs	r3, r2
 8009160:	b21b      	sxth	r3, r3
 8009162:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8009164:	6a3b      	ldr	r3, [r7, #32]
 8009166:	8a7a      	ldrh	r2, [r7, #18]
 8009168:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800916a:	6a3b      	ldr	r3, [r7, #32]
 800916c:	3302      	adds	r3, #2
 800916e:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8009170:	69fb      	ldr	r3, [r7, #28]
 8009172:	3301      	adds	r3, #1
 8009174:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8009176:	69fb      	ldr	r3, [r7, #28]
 8009178:	3301      	adds	r3, #1
 800917a:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800917c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800917e:	3b01      	subs	r3, #1
 8009180:	627b      	str	r3, [r7, #36]	@ 0x24
 8009182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009184:	2b00      	cmp	r3, #0
 8009186:	d1e0      	bne.n	800914a <USB_WritePMA+0x38>
  }
}
 8009188:	bf00      	nop
 800918a:	bf00      	nop
 800918c:	372c      	adds	r7, #44	@ 0x2c
 800918e:	46bd      	mov	sp, r7
 8009190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009194:	4770      	bx	lr

08009196 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009196:	b480      	push	{r7}
 8009198:	b08b      	sub	sp, #44	@ 0x2c
 800919a:	af00      	add	r7, sp, #0
 800919c:	60f8      	str	r0, [r7, #12]
 800919e:	60b9      	str	r1, [r7, #8]
 80091a0:	4611      	mov	r1, r2
 80091a2:	461a      	mov	r2, r3
 80091a4:	460b      	mov	r3, r1
 80091a6:	80fb      	strh	r3, [r7, #6]
 80091a8:	4613      	mov	r3, r2
 80091aa:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80091ac:	88bb      	ldrh	r3, [r7, #4]
 80091ae:	085b      	lsrs	r3, r3, #1
 80091b0:	b29b      	uxth	r3, r3
 80091b2:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80091b8:	68bb      	ldr	r3, [r7, #8]
 80091ba:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80091bc:	88fa      	ldrh	r2, [r7, #6]
 80091be:	697b      	ldr	r3, [r7, #20]
 80091c0:	4413      	add	r3, r2
 80091c2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80091c6:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80091c8:	69bb      	ldr	r3, [r7, #24]
 80091ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80091cc:	e018      	b.n	8009200 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 80091ce:	6a3b      	ldr	r3, [r7, #32]
 80091d0:	881b      	ldrh	r3, [r3, #0]
 80091d2:	b29b      	uxth	r3, r3
 80091d4:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80091d6:	6a3b      	ldr	r3, [r7, #32]
 80091d8:	3302      	adds	r3, #2
 80091da:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80091dc:	693b      	ldr	r3, [r7, #16]
 80091de:	b2da      	uxtb	r2, r3
 80091e0:	69fb      	ldr	r3, [r7, #28]
 80091e2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80091e4:	69fb      	ldr	r3, [r7, #28]
 80091e6:	3301      	adds	r3, #1
 80091e8:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 80091ea:	693b      	ldr	r3, [r7, #16]
 80091ec:	0a1b      	lsrs	r3, r3, #8
 80091ee:	b2da      	uxtb	r2, r3
 80091f0:	69fb      	ldr	r3, [r7, #28]
 80091f2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80091f4:	69fb      	ldr	r3, [r7, #28]
 80091f6:	3301      	adds	r3, #1
 80091f8:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80091fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091fc:	3b01      	subs	r3, #1
 80091fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8009200:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009202:	2b00      	cmp	r3, #0
 8009204:	d1e3      	bne.n	80091ce <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8009206:	88bb      	ldrh	r3, [r7, #4]
 8009208:	f003 0301 	and.w	r3, r3, #1
 800920c:	b29b      	uxth	r3, r3
 800920e:	2b00      	cmp	r3, #0
 8009210:	d007      	beq.n	8009222 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 8009212:	6a3b      	ldr	r3, [r7, #32]
 8009214:	881b      	ldrh	r3, [r3, #0]
 8009216:	b29b      	uxth	r3, r3
 8009218:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800921a:	693b      	ldr	r3, [r7, #16]
 800921c:	b2da      	uxtb	r2, r3
 800921e:	69fb      	ldr	r3, [r7, #28]
 8009220:	701a      	strb	r2, [r3, #0]
  }
}
 8009222:	bf00      	nop
 8009224:	372c      	adds	r7, #44	@ 0x2c
 8009226:	46bd      	mov	sp, r7
 8009228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922c:	4770      	bx	lr

0800922e <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800922e:	b580      	push	{r7, lr}
 8009230:	b084      	sub	sp, #16
 8009232:	af00      	add	r7, sp, #0
 8009234:	6078      	str	r0, [r7, #4]
 8009236:	460b      	mov	r3, r1
 8009238:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800923a:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800923e:	f002 f911 	bl	800b464 <USBD_static_malloc>
 8009242:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	2b00      	cmp	r3, #0
 8009248:	d105      	bne.n	8009256 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	2200      	movs	r2, #0
 800924e:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    return (uint8_t)USBD_EMEM;
 8009252:	2302      	movs	r3, #2
 8009254:	e066      	b.n	8009324 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	68fa      	ldr	r2, [r7, #12]
 800925a:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	7c1b      	ldrb	r3, [r3, #16]
 8009262:	2b00      	cmp	r3, #0
 8009264:	d119      	bne.n	800929a <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009266:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800926a:	2202      	movs	r2, #2
 800926c:	2181      	movs	r1, #129	@ 0x81
 800926e:	6878      	ldr	r0, [r7, #4]
 8009270:	f001 ff9f 	bl	800b1b2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	2201      	movs	r2, #1
 8009278:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800927a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800927e:	2202      	movs	r2, #2
 8009280:	2101      	movs	r1, #1
 8009282:	6878      	ldr	r0, [r7, #4]
 8009284:	f001 ff95 	bl	800b1b2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	2201      	movs	r2, #1
 800928c:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	2210      	movs	r2, #16
 8009294:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
 8009298:	e016      	b.n	80092c8 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800929a:	2340      	movs	r3, #64	@ 0x40
 800929c:	2202      	movs	r2, #2
 800929e:	2181      	movs	r1, #129	@ 0x81
 80092a0:	6878      	ldr	r0, [r7, #4]
 80092a2:	f001 ff86 	bl	800b1b2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	2201      	movs	r2, #1
 80092aa:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80092ac:	2340      	movs	r3, #64	@ 0x40
 80092ae:	2202      	movs	r2, #2
 80092b0:	2101      	movs	r1, #1
 80092b2:	6878      	ldr	r0, [r7, #4]
 80092b4:	f001 ff7d 	bl	800b1b2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	2201      	movs	r2, #1
 80092bc:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	2210      	movs	r2, #16
 80092c4:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80092c8:	2308      	movs	r3, #8
 80092ca:	2203      	movs	r2, #3
 80092cc:	2182      	movs	r1, #130	@ 0x82
 80092ce:	6878      	ldr	r0, [r7, #4]
 80092d0:	f001 ff6f 	bl	800b1b2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	2201      	movs	r2, #1
 80092d8:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	2200      	movs	r2, #0
 80092ea:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	2200      	movs	r2, #0
 80092f2:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	7c1b      	ldrb	r3, [r3, #16]
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d109      	bne.n	8009312 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009304:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009308:	2101      	movs	r1, #1
 800930a:	6878      	ldr	r0, [r7, #4]
 800930c:	f002 f840 	bl	800b390 <USBD_LL_PrepareReceive>
 8009310:	e007      	b.n	8009322 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009318:	2340      	movs	r3, #64	@ 0x40
 800931a:	2101      	movs	r1, #1
 800931c:	6878      	ldr	r0, [r7, #4]
 800931e:	f002 f837 	bl	800b390 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009322:	2300      	movs	r3, #0
}
 8009324:	4618      	mov	r0, r3
 8009326:	3710      	adds	r7, #16
 8009328:	46bd      	mov	sp, r7
 800932a:	bd80      	pop	{r7, pc}

0800932c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800932c:	b580      	push	{r7, lr}
 800932e:	b082      	sub	sp, #8
 8009330:	af00      	add	r7, sp, #0
 8009332:	6078      	str	r0, [r7, #4]
 8009334:	460b      	mov	r3, r1
 8009336:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8009338:	2181      	movs	r1, #129	@ 0x81
 800933a:	6878      	ldr	r0, [r7, #4]
 800933c:	f001 ff5f 	bl	800b1fe <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	2200      	movs	r2, #0
 8009344:	871a      	strh	r2, [r3, #56]	@ 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8009346:	2101      	movs	r1, #1
 8009348:	6878      	ldr	r0, [r7, #4]
 800934a:	f001 ff58 	bl	800b1fe <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	2200      	movs	r2, #0
 8009352:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8009356:	2182      	movs	r1, #130	@ 0x82
 8009358:	6878      	ldr	r0, [r7, #4]
 800935a:	f001 ff50 	bl	800b1fe <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	2200      	movs	r2, #0
 8009362:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	2200      	movs	r2, #0
 800936a:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009374:	2b00      	cmp	r3, #0
 8009376:	d00e      	beq.n	8009396 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800937e:	685b      	ldr	r3, [r3, #4]
 8009380:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009388:	4618      	mov	r0, r3
 800938a:	f002 f879 	bl	800b480 <USBD_static_free>
    pdev->pClassData = NULL;
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	2200      	movs	r2, #0
 8009392:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009396:	2300      	movs	r3, #0
}
 8009398:	4618      	mov	r0, r3
 800939a:	3708      	adds	r7, #8
 800939c:	46bd      	mov	sp, r7
 800939e:	bd80      	pop	{r7, pc}

080093a0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80093a0:	b580      	push	{r7, lr}
 80093a2:	b086      	sub	sp, #24
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	6078      	str	r0, [r7, #4]
 80093a8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80093b0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80093b2:	2300      	movs	r3, #0
 80093b4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80093b6:	2300      	movs	r3, #0
 80093b8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80093ba:	2300      	movs	r3, #0
 80093bc:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80093be:	693b      	ldr	r3, [r7, #16]
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d101      	bne.n	80093c8 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 80093c4:	2303      	movs	r3, #3
 80093c6:	e0af      	b.n	8009528 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80093c8:	683b      	ldr	r3, [r7, #0]
 80093ca:	781b      	ldrb	r3, [r3, #0]
 80093cc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d03f      	beq.n	8009454 <USBD_CDC_Setup+0xb4>
 80093d4:	2b20      	cmp	r3, #32
 80093d6:	f040 809f 	bne.w	8009518 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80093da:	683b      	ldr	r3, [r7, #0]
 80093dc:	88db      	ldrh	r3, [r3, #6]
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d02e      	beq.n	8009440 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80093e2:	683b      	ldr	r3, [r7, #0]
 80093e4:	781b      	ldrb	r3, [r3, #0]
 80093e6:	b25b      	sxtb	r3, r3
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	da16      	bge.n	800941a <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80093f2:	689b      	ldr	r3, [r3, #8]
 80093f4:	683a      	ldr	r2, [r7, #0]
 80093f6:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 80093f8:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80093fa:	683a      	ldr	r2, [r7, #0]
 80093fc:	88d2      	ldrh	r2, [r2, #6]
 80093fe:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8009400:	683b      	ldr	r3, [r7, #0]
 8009402:	88db      	ldrh	r3, [r3, #6]
 8009404:	2b07      	cmp	r3, #7
 8009406:	bf28      	it	cs
 8009408:	2307      	movcs	r3, #7
 800940a:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800940c:	693b      	ldr	r3, [r7, #16]
 800940e:	89fa      	ldrh	r2, [r7, #14]
 8009410:	4619      	mov	r1, r3
 8009412:	6878      	ldr	r0, [r7, #4]
 8009414:	f001 facd 	bl	800a9b2 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8009418:	e085      	b.n	8009526 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800941a:	683b      	ldr	r3, [r7, #0]
 800941c:	785a      	ldrb	r2, [r3, #1]
 800941e:	693b      	ldr	r3, [r7, #16]
 8009420:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8009424:	683b      	ldr	r3, [r7, #0]
 8009426:	88db      	ldrh	r3, [r3, #6]
 8009428:	b2da      	uxtb	r2, r3
 800942a:	693b      	ldr	r3, [r7, #16]
 800942c:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8009430:	6939      	ldr	r1, [r7, #16]
 8009432:	683b      	ldr	r3, [r7, #0]
 8009434:	88db      	ldrh	r3, [r3, #6]
 8009436:	461a      	mov	r2, r3
 8009438:	6878      	ldr	r0, [r7, #4]
 800943a:	f001 fae6 	bl	800aa0a <USBD_CtlPrepareRx>
      break;
 800943e:	e072      	b.n	8009526 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009446:	689b      	ldr	r3, [r3, #8]
 8009448:	683a      	ldr	r2, [r7, #0]
 800944a:	7850      	ldrb	r0, [r2, #1]
 800944c:	2200      	movs	r2, #0
 800944e:	6839      	ldr	r1, [r7, #0]
 8009450:	4798      	blx	r3
      break;
 8009452:	e068      	b.n	8009526 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009454:	683b      	ldr	r3, [r7, #0]
 8009456:	785b      	ldrb	r3, [r3, #1]
 8009458:	2b0b      	cmp	r3, #11
 800945a:	d852      	bhi.n	8009502 <USBD_CDC_Setup+0x162>
 800945c:	a201      	add	r2, pc, #4	@ (adr r2, 8009464 <USBD_CDC_Setup+0xc4>)
 800945e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009462:	bf00      	nop
 8009464:	08009495 	.word	0x08009495
 8009468:	08009511 	.word	0x08009511
 800946c:	08009503 	.word	0x08009503
 8009470:	08009503 	.word	0x08009503
 8009474:	08009503 	.word	0x08009503
 8009478:	08009503 	.word	0x08009503
 800947c:	08009503 	.word	0x08009503
 8009480:	08009503 	.word	0x08009503
 8009484:	08009503 	.word	0x08009503
 8009488:	08009503 	.word	0x08009503
 800948c:	080094bf 	.word	0x080094bf
 8009490:	080094e9 	.word	0x080094e9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800949a:	b2db      	uxtb	r3, r3
 800949c:	2b03      	cmp	r3, #3
 800949e:	d107      	bne.n	80094b0 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80094a0:	f107 030a 	add.w	r3, r7, #10
 80094a4:	2202      	movs	r2, #2
 80094a6:	4619      	mov	r1, r3
 80094a8:	6878      	ldr	r0, [r7, #4]
 80094aa:	f001 fa82 	bl	800a9b2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80094ae:	e032      	b.n	8009516 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80094b0:	6839      	ldr	r1, [r7, #0]
 80094b2:	6878      	ldr	r0, [r7, #4]
 80094b4:	f001 fa0c 	bl	800a8d0 <USBD_CtlError>
            ret = USBD_FAIL;
 80094b8:	2303      	movs	r3, #3
 80094ba:	75fb      	strb	r3, [r7, #23]
          break;
 80094bc:	e02b      	b.n	8009516 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80094c4:	b2db      	uxtb	r3, r3
 80094c6:	2b03      	cmp	r3, #3
 80094c8:	d107      	bne.n	80094da <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80094ca:	f107 030d 	add.w	r3, r7, #13
 80094ce:	2201      	movs	r2, #1
 80094d0:	4619      	mov	r1, r3
 80094d2:	6878      	ldr	r0, [r7, #4]
 80094d4:	f001 fa6d 	bl	800a9b2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80094d8:	e01d      	b.n	8009516 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80094da:	6839      	ldr	r1, [r7, #0]
 80094dc:	6878      	ldr	r0, [r7, #4]
 80094de:	f001 f9f7 	bl	800a8d0 <USBD_CtlError>
            ret = USBD_FAIL;
 80094e2:	2303      	movs	r3, #3
 80094e4:	75fb      	strb	r3, [r7, #23]
          break;
 80094e6:	e016      	b.n	8009516 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80094ee:	b2db      	uxtb	r3, r3
 80094f0:	2b03      	cmp	r3, #3
 80094f2:	d00f      	beq.n	8009514 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 80094f4:	6839      	ldr	r1, [r7, #0]
 80094f6:	6878      	ldr	r0, [r7, #4]
 80094f8:	f001 f9ea 	bl	800a8d0 <USBD_CtlError>
            ret = USBD_FAIL;
 80094fc:	2303      	movs	r3, #3
 80094fe:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009500:	e008      	b.n	8009514 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8009502:	6839      	ldr	r1, [r7, #0]
 8009504:	6878      	ldr	r0, [r7, #4]
 8009506:	f001 f9e3 	bl	800a8d0 <USBD_CtlError>
          ret = USBD_FAIL;
 800950a:	2303      	movs	r3, #3
 800950c:	75fb      	strb	r3, [r7, #23]
          break;
 800950e:	e002      	b.n	8009516 <USBD_CDC_Setup+0x176>
          break;
 8009510:	bf00      	nop
 8009512:	e008      	b.n	8009526 <USBD_CDC_Setup+0x186>
          break;
 8009514:	bf00      	nop
      }
      break;
 8009516:	e006      	b.n	8009526 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8009518:	6839      	ldr	r1, [r7, #0]
 800951a:	6878      	ldr	r0, [r7, #4]
 800951c:	f001 f9d8 	bl	800a8d0 <USBD_CtlError>
      ret = USBD_FAIL;
 8009520:	2303      	movs	r3, #3
 8009522:	75fb      	strb	r3, [r7, #23]
      break;
 8009524:	bf00      	nop
  }

  return (uint8_t)ret;
 8009526:	7dfb      	ldrb	r3, [r7, #23]
}
 8009528:	4618      	mov	r0, r3
 800952a:	3718      	adds	r7, #24
 800952c:	46bd      	mov	sp, r7
 800952e:	bd80      	pop	{r7, pc}

08009530 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009530:	b580      	push	{r7, lr}
 8009532:	b084      	sub	sp, #16
 8009534:	af00      	add	r7, sp, #0
 8009536:	6078      	str	r0, [r7, #4]
 8009538:	460b      	mov	r3, r1
 800953a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8009542:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800954a:	2b00      	cmp	r3, #0
 800954c:	d101      	bne.n	8009552 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800954e:	2303      	movs	r3, #3
 8009550:	e04f      	b.n	80095f2 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009558:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800955a:	78fa      	ldrb	r2, [r7, #3]
 800955c:	6879      	ldr	r1, [r7, #4]
 800955e:	4613      	mov	r3, r2
 8009560:	009b      	lsls	r3, r3, #2
 8009562:	4413      	add	r3, r2
 8009564:	009b      	lsls	r3, r3, #2
 8009566:	440b      	add	r3, r1
 8009568:	3318      	adds	r3, #24
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	2b00      	cmp	r3, #0
 800956e:	d029      	beq.n	80095c4 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8009570:	78fa      	ldrb	r2, [r7, #3]
 8009572:	6879      	ldr	r1, [r7, #4]
 8009574:	4613      	mov	r3, r2
 8009576:	009b      	lsls	r3, r3, #2
 8009578:	4413      	add	r3, r2
 800957a:	009b      	lsls	r3, r3, #2
 800957c:	440b      	add	r3, r1
 800957e:	3318      	adds	r3, #24
 8009580:	681a      	ldr	r2, [r3, #0]
 8009582:	78f9      	ldrb	r1, [r7, #3]
 8009584:	68f8      	ldr	r0, [r7, #12]
 8009586:	460b      	mov	r3, r1
 8009588:	009b      	lsls	r3, r3, #2
 800958a:	440b      	add	r3, r1
 800958c:	00db      	lsls	r3, r3, #3
 800958e:	4403      	add	r3, r0
 8009590:	3320      	adds	r3, #32
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	fbb2 f1f3 	udiv	r1, r2, r3
 8009598:	fb01 f303 	mul.w	r3, r1, r3
 800959c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d110      	bne.n	80095c4 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 80095a2:	78fa      	ldrb	r2, [r7, #3]
 80095a4:	6879      	ldr	r1, [r7, #4]
 80095a6:	4613      	mov	r3, r2
 80095a8:	009b      	lsls	r3, r3, #2
 80095aa:	4413      	add	r3, r2
 80095ac:	009b      	lsls	r3, r3, #2
 80095ae:	440b      	add	r3, r1
 80095b0:	3318      	adds	r3, #24
 80095b2:	2200      	movs	r2, #0
 80095b4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80095b6:	78f9      	ldrb	r1, [r7, #3]
 80095b8:	2300      	movs	r3, #0
 80095ba:	2200      	movs	r2, #0
 80095bc:	6878      	ldr	r0, [r7, #4]
 80095be:	f001 fec6 	bl	800b34e <USBD_LL_Transmit>
 80095c2:	e015      	b.n	80095f0 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 80095c4:	68bb      	ldr	r3, [r7, #8]
 80095c6:	2200      	movs	r2, #0
 80095c8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80095d2:	691b      	ldr	r3, [r3, #16]
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d00b      	beq.n	80095f0 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80095de:	691b      	ldr	r3, [r3, #16]
 80095e0:	68ba      	ldr	r2, [r7, #8]
 80095e2:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 80095e6:	68ba      	ldr	r2, [r7, #8]
 80095e8:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 80095ec:	78fa      	ldrb	r2, [r7, #3]
 80095ee:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80095f0:	2300      	movs	r3, #0
}
 80095f2:	4618      	mov	r0, r3
 80095f4:	3710      	adds	r7, #16
 80095f6:	46bd      	mov	sp, r7
 80095f8:	bd80      	pop	{r7, pc}

080095fa <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80095fa:	b580      	push	{r7, lr}
 80095fc:	b084      	sub	sp, #16
 80095fe:	af00      	add	r7, sp, #0
 8009600:	6078      	str	r0, [r7, #4]
 8009602:	460b      	mov	r3, r1
 8009604:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800960c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009614:	2b00      	cmp	r3, #0
 8009616:	d101      	bne.n	800961c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009618:	2303      	movs	r3, #3
 800961a:	e015      	b.n	8009648 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800961c:	78fb      	ldrb	r3, [r7, #3]
 800961e:	4619      	mov	r1, r3
 8009620:	6878      	ldr	r0, [r7, #4]
 8009622:	f001 fed6 	bl	800b3d2 <USBD_LL_GetRxDataSize>
 8009626:	4602      	mov	r2, r0
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009634:	68db      	ldr	r3, [r3, #12]
 8009636:	68fa      	ldr	r2, [r7, #12]
 8009638:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800963c:	68fa      	ldr	r2, [r7, #12]
 800963e:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8009642:	4611      	mov	r1, r2
 8009644:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8009646:	2300      	movs	r3, #0
}
 8009648:	4618      	mov	r0, r3
 800964a:	3710      	adds	r7, #16
 800964c:	46bd      	mov	sp, r7
 800964e:	bd80      	pop	{r7, pc}

08009650 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009650:	b580      	push	{r7, lr}
 8009652:	b084      	sub	sp, #16
 8009654:	af00      	add	r7, sp, #0
 8009656:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800965e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	2b00      	cmp	r3, #0
 8009664:	d101      	bne.n	800966a <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8009666:	2303      	movs	r3, #3
 8009668:	e01a      	b.n	80096a0 <USBD_CDC_EP0_RxReady+0x50>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009670:	2b00      	cmp	r3, #0
 8009672:	d014      	beq.n	800969e <USBD_CDC_EP0_RxReady+0x4e>
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800967a:	2bff      	cmp	r3, #255	@ 0xff
 800967c:	d00f      	beq.n	800969e <USBD_CDC_EP0_RxReady+0x4e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009684:	689b      	ldr	r3, [r3, #8]
 8009686:	68fa      	ldr	r2, [r7, #12]
 8009688:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)hcdc->data,
 800968c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800968e:	68fa      	ldr	r2, [r7, #12]
 8009690:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009694:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	22ff      	movs	r2, #255	@ 0xff
 800969a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800969e:	2300      	movs	r3, #0
}
 80096a0:	4618      	mov	r0, r3
 80096a2:	3710      	adds	r7, #16
 80096a4:	46bd      	mov	sp, r7
 80096a6:	bd80      	pop	{r7, pc}

080096a8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80096a8:	b480      	push	{r7}
 80096aa:	b083      	sub	sp, #12
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	2243      	movs	r2, #67	@ 0x43
 80096b4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 80096b6:	4b03      	ldr	r3, [pc, #12]	@ (80096c4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80096b8:	4618      	mov	r0, r3
 80096ba:	370c      	adds	r7, #12
 80096bc:	46bd      	mov	sp, r7
 80096be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c2:	4770      	bx	lr
 80096c4:	200000a4 	.word	0x200000a4

080096c8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80096c8:	b480      	push	{r7}
 80096ca:	b083      	sub	sp, #12
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	2243      	movs	r2, #67	@ 0x43
 80096d4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 80096d6:	4b03      	ldr	r3, [pc, #12]	@ (80096e4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80096d8:	4618      	mov	r0, r3
 80096da:	370c      	adds	r7, #12
 80096dc:	46bd      	mov	sp, r7
 80096de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e2:	4770      	bx	lr
 80096e4:	20000060 	.word	0x20000060

080096e8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80096e8:	b480      	push	{r7}
 80096ea:	b083      	sub	sp, #12
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	2243      	movs	r2, #67	@ 0x43
 80096f4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80096f6:	4b03      	ldr	r3, [pc, #12]	@ (8009704 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80096f8:	4618      	mov	r0, r3
 80096fa:	370c      	adds	r7, #12
 80096fc:	46bd      	mov	sp, r7
 80096fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009702:	4770      	bx	lr
 8009704:	200000e8 	.word	0x200000e8

08009708 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009708:	b480      	push	{r7}
 800970a:	b083      	sub	sp, #12
 800970c:	af00      	add	r7, sp, #0
 800970e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	220a      	movs	r2, #10
 8009714:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8009716:	4b03      	ldr	r3, [pc, #12]	@ (8009724 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009718:	4618      	mov	r0, r3
 800971a:	370c      	adds	r7, #12
 800971c:	46bd      	mov	sp, r7
 800971e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009722:	4770      	bx	lr
 8009724:	2000001c 	.word	0x2000001c

08009728 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8009728:	b480      	push	{r7}
 800972a:	b083      	sub	sp, #12
 800972c:	af00      	add	r7, sp, #0
 800972e:	6078      	str	r0, [r7, #4]
 8009730:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8009732:	683b      	ldr	r3, [r7, #0]
 8009734:	2b00      	cmp	r3, #0
 8009736:	d101      	bne.n	800973c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009738:	2303      	movs	r3, #3
 800973a:	e004      	b.n	8009746 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	683a      	ldr	r2, [r7, #0]
 8009740:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  return (uint8_t)USBD_OK;
 8009744:	2300      	movs	r3, #0
}
 8009746:	4618      	mov	r0, r3
 8009748:	370c      	adds	r7, #12
 800974a:	46bd      	mov	sp, r7
 800974c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009750:	4770      	bx	lr

08009752 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8009752:	b480      	push	{r7}
 8009754:	b087      	sub	sp, #28
 8009756:	af00      	add	r7, sp, #0
 8009758:	60f8      	str	r0, [r7, #12]
 800975a:	60b9      	str	r1, [r7, #8]
 800975c:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009764:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8009766:	697b      	ldr	r3, [r7, #20]
 8009768:	2b00      	cmp	r3, #0
 800976a:	d101      	bne.n	8009770 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800976c:	2303      	movs	r3, #3
 800976e:	e008      	b.n	8009782 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8009770:	697b      	ldr	r3, [r7, #20]
 8009772:	68ba      	ldr	r2, [r7, #8]
 8009774:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8009778:	697b      	ldr	r3, [r7, #20]
 800977a:	687a      	ldr	r2, [r7, #4]
 800977c:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8009780:	2300      	movs	r3, #0
}
 8009782:	4618      	mov	r0, r3
 8009784:	371c      	adds	r7, #28
 8009786:	46bd      	mov	sp, r7
 8009788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800978c:	4770      	bx	lr

0800978e <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800978e:	b480      	push	{r7}
 8009790:	b085      	sub	sp, #20
 8009792:	af00      	add	r7, sp, #0
 8009794:	6078      	str	r0, [r7, #4]
 8009796:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800979e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d101      	bne.n	80097aa <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 80097a6:	2303      	movs	r3, #3
 80097a8:	e004      	b.n	80097b4 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	683a      	ldr	r2, [r7, #0]
 80097ae:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 80097b2:	2300      	movs	r3, #0
}
 80097b4:	4618      	mov	r0, r3
 80097b6:	3714      	adds	r7, #20
 80097b8:	46bd      	mov	sp, r7
 80097ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097be:	4770      	bx	lr

080097c0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80097c0:	b580      	push	{r7, lr}
 80097c2:	b084      	sub	sp, #16
 80097c4:	af00      	add	r7, sp, #0
 80097c6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80097ce:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80097d0:	2301      	movs	r3, #1
 80097d2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d101      	bne.n	80097e2 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80097de:	2303      	movs	r3, #3
 80097e0:	e01a      	b.n	8009818 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 80097e2:	68bb      	ldr	r3, [r7, #8]
 80097e4:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d114      	bne.n	8009816 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80097ec:	68bb      	ldr	r3, [r7, #8]
 80097ee:	2201      	movs	r2, #1
 80097f0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80097f4:	68bb      	ldr	r3, [r7, #8]
 80097f6:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 80097fe:	68bb      	ldr	r3, [r7, #8]
 8009800:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8009804:	68bb      	ldr	r3, [r7, #8]
 8009806:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800980a:	2181      	movs	r1, #129	@ 0x81
 800980c:	6878      	ldr	r0, [r7, #4]
 800980e:	f001 fd9e 	bl	800b34e <USBD_LL_Transmit>

    ret = USBD_OK;
 8009812:	2300      	movs	r3, #0
 8009814:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8009816:	7bfb      	ldrb	r3, [r7, #15]
}
 8009818:	4618      	mov	r0, r3
 800981a:	3710      	adds	r7, #16
 800981c:	46bd      	mov	sp, r7
 800981e:	bd80      	pop	{r7, pc}

08009820 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009820:	b580      	push	{r7, lr}
 8009822:	b084      	sub	sp, #16
 8009824:	af00      	add	r7, sp, #0
 8009826:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800982e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009836:	2b00      	cmp	r3, #0
 8009838:	d101      	bne.n	800983e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800983a:	2303      	movs	r3, #3
 800983c:	e016      	b.n	800986c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	7c1b      	ldrb	r3, [r3, #16]
 8009842:	2b00      	cmp	r3, #0
 8009844:	d109      	bne.n	800985a <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800984c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009850:	2101      	movs	r1, #1
 8009852:	6878      	ldr	r0, [r7, #4]
 8009854:	f001 fd9c 	bl	800b390 <USBD_LL_PrepareReceive>
 8009858:	e007      	b.n	800986a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009860:	2340      	movs	r3, #64	@ 0x40
 8009862:	2101      	movs	r1, #1
 8009864:	6878      	ldr	r0, [r7, #4]
 8009866:	f001 fd93 	bl	800b390 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800986a:	2300      	movs	r3, #0
}
 800986c:	4618      	mov	r0, r3
 800986e:	3710      	adds	r7, #16
 8009870:	46bd      	mov	sp, r7
 8009872:	bd80      	pop	{r7, pc}

08009874 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009874:	b580      	push	{r7, lr}
 8009876:	b086      	sub	sp, #24
 8009878:	af00      	add	r7, sp, #0
 800987a:	60f8      	str	r0, [r7, #12]
 800987c:	60b9      	str	r1, [r7, #8]
 800987e:	4613      	mov	r3, r2
 8009880:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	2b00      	cmp	r3, #0
 8009886:	d101      	bne.n	800988c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8009888:	2303      	movs	r3, #3
 800988a:	e01f      	b.n	80098cc <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	2200      	movs	r2, #0
 8009890:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	2200      	movs	r2, #0
 8009898:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	2200      	movs	r2, #0
 80098a0:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80098a4:	68bb      	ldr	r3, [r7, #8]
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d003      	beq.n	80098b2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	68ba      	ldr	r2, [r7, #8]
 80098ae:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	2201      	movs	r2, #1
 80098b6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	79fa      	ldrb	r2, [r7, #7]
 80098be:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80098c0:	68f8      	ldr	r0, [r7, #12]
 80098c2:	f001 fbfb 	bl	800b0bc <USBD_LL_Init>
 80098c6:	4603      	mov	r3, r0
 80098c8:	75fb      	strb	r3, [r7, #23]

  return ret;
 80098ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80098cc:	4618      	mov	r0, r3
 80098ce:	3718      	adds	r7, #24
 80098d0:	46bd      	mov	sp, r7
 80098d2:	bd80      	pop	{r7, pc}

080098d4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80098d4:	b580      	push	{r7, lr}
 80098d6:	b084      	sub	sp, #16
 80098d8:	af00      	add	r7, sp, #0
 80098da:	6078      	str	r0, [r7, #4]
 80098dc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80098de:	2300      	movs	r3, #0
 80098e0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80098e2:	683b      	ldr	r3, [r7, #0]
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d101      	bne.n	80098ec <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80098e8:	2303      	movs	r3, #3
 80098ea:	e016      	b.n	800991a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	683a      	ldr	r2, [r7, #0]
 80098f0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80098fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d00b      	beq.n	8009918 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009906:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009908:	f107 020e 	add.w	r2, r7, #14
 800990c:	4610      	mov	r0, r2
 800990e:	4798      	blx	r3
 8009910:	4602      	mov	r2, r0
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8009918:	2300      	movs	r3, #0
}
 800991a:	4618      	mov	r0, r3
 800991c:	3710      	adds	r7, #16
 800991e:	46bd      	mov	sp, r7
 8009920:	bd80      	pop	{r7, pc}

08009922 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009922:	b580      	push	{r7, lr}
 8009924:	b082      	sub	sp, #8
 8009926:	af00      	add	r7, sp, #0
 8009928:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800992a:	6878      	ldr	r0, [r7, #4]
 800992c:	f001 fc26 	bl	800b17c <USBD_LL_Start>
 8009930:	4603      	mov	r3, r0
}
 8009932:	4618      	mov	r0, r3
 8009934:	3708      	adds	r7, #8
 8009936:	46bd      	mov	sp, r7
 8009938:	bd80      	pop	{r7, pc}

0800993a <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800993a:	b480      	push	{r7}
 800993c:	b083      	sub	sp, #12
 800993e:	af00      	add	r7, sp, #0
 8009940:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009942:	2300      	movs	r3, #0
}
 8009944:	4618      	mov	r0, r3
 8009946:	370c      	adds	r7, #12
 8009948:	46bd      	mov	sp, r7
 800994a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800994e:	4770      	bx	lr

08009950 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009950:	b580      	push	{r7, lr}
 8009952:	b084      	sub	sp, #16
 8009954:	af00      	add	r7, sp, #0
 8009956:	6078      	str	r0, [r7, #4]
 8009958:	460b      	mov	r3, r1
 800995a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800995c:	2303      	movs	r3, #3
 800995e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009966:	2b00      	cmp	r3, #0
 8009968:	d009      	beq.n	800997e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	78fa      	ldrb	r2, [r7, #3]
 8009974:	4611      	mov	r1, r2
 8009976:	6878      	ldr	r0, [r7, #4]
 8009978:	4798      	blx	r3
 800997a:	4603      	mov	r3, r0
 800997c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800997e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009980:	4618      	mov	r0, r3
 8009982:	3710      	adds	r7, #16
 8009984:	46bd      	mov	sp, r7
 8009986:	bd80      	pop	{r7, pc}

08009988 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009988:	b580      	push	{r7, lr}
 800998a:	b082      	sub	sp, #8
 800998c:	af00      	add	r7, sp, #0
 800998e:	6078      	str	r0, [r7, #4]
 8009990:	460b      	mov	r3, r1
 8009992:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800999a:	2b00      	cmp	r3, #0
 800999c:	d007      	beq.n	80099ae <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80099a4:	685b      	ldr	r3, [r3, #4]
 80099a6:	78fa      	ldrb	r2, [r7, #3]
 80099a8:	4611      	mov	r1, r2
 80099aa:	6878      	ldr	r0, [r7, #4]
 80099ac:	4798      	blx	r3
  }

  return USBD_OK;
 80099ae:	2300      	movs	r3, #0
}
 80099b0:	4618      	mov	r0, r3
 80099b2:	3708      	adds	r7, #8
 80099b4:	46bd      	mov	sp, r7
 80099b6:	bd80      	pop	{r7, pc}

080099b8 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80099b8:	b580      	push	{r7, lr}
 80099ba:	b084      	sub	sp, #16
 80099bc:	af00      	add	r7, sp, #0
 80099be:	6078      	str	r0, [r7, #4]
 80099c0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80099c8:	6839      	ldr	r1, [r7, #0]
 80099ca:	4618      	mov	r0, r3
 80099cc:	f000 ff46 	bl	800a85c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	2201      	movs	r2, #1
 80099d4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80099de:	461a      	mov	r2, r3
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80099ec:	f003 031f 	and.w	r3, r3, #31
 80099f0:	2b02      	cmp	r3, #2
 80099f2:	d01a      	beq.n	8009a2a <USBD_LL_SetupStage+0x72>
 80099f4:	2b02      	cmp	r3, #2
 80099f6:	d822      	bhi.n	8009a3e <USBD_LL_SetupStage+0x86>
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d002      	beq.n	8009a02 <USBD_LL_SetupStage+0x4a>
 80099fc:	2b01      	cmp	r3, #1
 80099fe:	d00a      	beq.n	8009a16 <USBD_LL_SetupStage+0x5e>
 8009a00:	e01d      	b.n	8009a3e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009a08:	4619      	mov	r1, r3
 8009a0a:	6878      	ldr	r0, [r7, #4]
 8009a0c:	f000 f9ee 	bl	8009dec <USBD_StdDevReq>
 8009a10:	4603      	mov	r3, r0
 8009a12:	73fb      	strb	r3, [r7, #15]
      break;
 8009a14:	e020      	b.n	8009a58 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009a1c:	4619      	mov	r1, r3
 8009a1e:	6878      	ldr	r0, [r7, #4]
 8009a20:	f000 fa52 	bl	8009ec8 <USBD_StdItfReq>
 8009a24:	4603      	mov	r3, r0
 8009a26:	73fb      	strb	r3, [r7, #15]
      break;
 8009a28:	e016      	b.n	8009a58 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009a30:	4619      	mov	r1, r3
 8009a32:	6878      	ldr	r0, [r7, #4]
 8009a34:	f000 fa91 	bl	8009f5a <USBD_StdEPReq>
 8009a38:	4603      	mov	r3, r0
 8009a3a:	73fb      	strb	r3, [r7, #15]
      break;
 8009a3c:	e00c      	b.n	8009a58 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8009a44:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8009a48:	b2db      	uxtb	r3, r3
 8009a4a:	4619      	mov	r1, r3
 8009a4c:	6878      	ldr	r0, [r7, #4]
 8009a4e:	f001 fbf5 	bl	800b23c <USBD_LL_StallEP>
 8009a52:	4603      	mov	r3, r0
 8009a54:	73fb      	strb	r3, [r7, #15]
      break;
 8009a56:	bf00      	nop
  }

  return ret;
 8009a58:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a5a:	4618      	mov	r0, r3
 8009a5c:	3710      	adds	r7, #16
 8009a5e:	46bd      	mov	sp, r7
 8009a60:	bd80      	pop	{r7, pc}

08009a62 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009a62:	b580      	push	{r7, lr}
 8009a64:	b086      	sub	sp, #24
 8009a66:	af00      	add	r7, sp, #0
 8009a68:	60f8      	str	r0, [r7, #12]
 8009a6a:	460b      	mov	r3, r1
 8009a6c:	607a      	str	r2, [r7, #4]
 8009a6e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8009a70:	7afb      	ldrb	r3, [r7, #11]
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d138      	bne.n	8009ae8 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8009a7c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009a84:	2b03      	cmp	r3, #3
 8009a86:	d14a      	bne.n	8009b1e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8009a88:	693b      	ldr	r3, [r7, #16]
 8009a8a:	689a      	ldr	r2, [r3, #8]
 8009a8c:	693b      	ldr	r3, [r7, #16]
 8009a8e:	68db      	ldr	r3, [r3, #12]
 8009a90:	429a      	cmp	r2, r3
 8009a92:	d913      	bls.n	8009abc <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009a94:	693b      	ldr	r3, [r7, #16]
 8009a96:	689a      	ldr	r2, [r3, #8]
 8009a98:	693b      	ldr	r3, [r7, #16]
 8009a9a:	68db      	ldr	r3, [r3, #12]
 8009a9c:	1ad2      	subs	r2, r2, r3
 8009a9e:	693b      	ldr	r3, [r7, #16]
 8009aa0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8009aa2:	693b      	ldr	r3, [r7, #16]
 8009aa4:	68da      	ldr	r2, [r3, #12]
 8009aa6:	693b      	ldr	r3, [r7, #16]
 8009aa8:	689b      	ldr	r3, [r3, #8]
 8009aaa:	4293      	cmp	r3, r2
 8009aac:	bf28      	it	cs
 8009aae:	4613      	movcs	r3, r2
 8009ab0:	461a      	mov	r2, r3
 8009ab2:	6879      	ldr	r1, [r7, #4]
 8009ab4:	68f8      	ldr	r0, [r7, #12]
 8009ab6:	f000 ffc5 	bl	800aa44 <USBD_CtlContinueRx>
 8009aba:	e030      	b.n	8009b1e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009ac2:	b2db      	uxtb	r3, r3
 8009ac4:	2b03      	cmp	r3, #3
 8009ac6:	d10b      	bne.n	8009ae0 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009ace:	691b      	ldr	r3, [r3, #16]
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d005      	beq.n	8009ae0 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009ada:	691b      	ldr	r3, [r3, #16]
 8009adc:	68f8      	ldr	r0, [r7, #12]
 8009ade:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8009ae0:	68f8      	ldr	r0, [r7, #12]
 8009ae2:	f000 ffc0 	bl	800aa66 <USBD_CtlSendStatus>
 8009ae6:	e01a      	b.n	8009b1e <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009aee:	b2db      	uxtb	r3, r3
 8009af0:	2b03      	cmp	r3, #3
 8009af2:	d114      	bne.n	8009b1e <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009afa:	699b      	ldr	r3, [r3, #24]
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d00e      	beq.n	8009b1e <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009b06:	699b      	ldr	r3, [r3, #24]
 8009b08:	7afa      	ldrb	r2, [r7, #11]
 8009b0a:	4611      	mov	r1, r2
 8009b0c:	68f8      	ldr	r0, [r7, #12]
 8009b0e:	4798      	blx	r3
 8009b10:	4603      	mov	r3, r0
 8009b12:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8009b14:	7dfb      	ldrb	r3, [r7, #23]
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d001      	beq.n	8009b1e <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8009b1a:	7dfb      	ldrb	r3, [r7, #23]
 8009b1c:	e000      	b.n	8009b20 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8009b1e:	2300      	movs	r3, #0
}
 8009b20:	4618      	mov	r0, r3
 8009b22:	3718      	adds	r7, #24
 8009b24:	46bd      	mov	sp, r7
 8009b26:	bd80      	pop	{r7, pc}

08009b28 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009b28:	b580      	push	{r7, lr}
 8009b2a:	b086      	sub	sp, #24
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	60f8      	str	r0, [r7, #12]
 8009b30:	460b      	mov	r3, r1
 8009b32:	607a      	str	r2, [r7, #4]
 8009b34:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8009b36:	7afb      	ldrb	r3, [r7, #11]
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d16b      	bne.n	8009c14 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	3314      	adds	r3, #20
 8009b40:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009b48:	2b02      	cmp	r3, #2
 8009b4a:	d156      	bne.n	8009bfa <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8009b4c:	693b      	ldr	r3, [r7, #16]
 8009b4e:	689a      	ldr	r2, [r3, #8]
 8009b50:	693b      	ldr	r3, [r7, #16]
 8009b52:	68db      	ldr	r3, [r3, #12]
 8009b54:	429a      	cmp	r2, r3
 8009b56:	d914      	bls.n	8009b82 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009b58:	693b      	ldr	r3, [r7, #16]
 8009b5a:	689a      	ldr	r2, [r3, #8]
 8009b5c:	693b      	ldr	r3, [r7, #16]
 8009b5e:	68db      	ldr	r3, [r3, #12]
 8009b60:	1ad2      	subs	r2, r2, r3
 8009b62:	693b      	ldr	r3, [r7, #16]
 8009b64:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009b66:	693b      	ldr	r3, [r7, #16]
 8009b68:	689b      	ldr	r3, [r3, #8]
 8009b6a:	461a      	mov	r2, r3
 8009b6c:	6879      	ldr	r1, [r7, #4]
 8009b6e:	68f8      	ldr	r0, [r7, #12]
 8009b70:	f000 ff3a 	bl	800a9e8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009b74:	2300      	movs	r3, #0
 8009b76:	2200      	movs	r2, #0
 8009b78:	2100      	movs	r1, #0
 8009b7a:	68f8      	ldr	r0, [r7, #12]
 8009b7c:	f001 fc08 	bl	800b390 <USBD_LL_PrepareReceive>
 8009b80:	e03b      	b.n	8009bfa <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009b82:	693b      	ldr	r3, [r7, #16]
 8009b84:	68da      	ldr	r2, [r3, #12]
 8009b86:	693b      	ldr	r3, [r7, #16]
 8009b88:	689b      	ldr	r3, [r3, #8]
 8009b8a:	429a      	cmp	r2, r3
 8009b8c:	d11c      	bne.n	8009bc8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009b8e:	693b      	ldr	r3, [r7, #16]
 8009b90:	685a      	ldr	r2, [r3, #4]
 8009b92:	693b      	ldr	r3, [r7, #16]
 8009b94:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009b96:	429a      	cmp	r2, r3
 8009b98:	d316      	bcc.n	8009bc8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009b9a:	693b      	ldr	r3, [r7, #16]
 8009b9c:	685a      	ldr	r2, [r3, #4]
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009ba4:	429a      	cmp	r2, r3
 8009ba6:	d20f      	bcs.n	8009bc8 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009ba8:	2200      	movs	r2, #0
 8009baa:	2100      	movs	r1, #0
 8009bac:	68f8      	ldr	r0, [r7, #12]
 8009bae:	f000 ff1b 	bl	800a9e8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	2200      	movs	r2, #0
 8009bb6:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009bba:	2300      	movs	r3, #0
 8009bbc:	2200      	movs	r2, #0
 8009bbe:	2100      	movs	r1, #0
 8009bc0:	68f8      	ldr	r0, [r7, #12]
 8009bc2:	f001 fbe5 	bl	800b390 <USBD_LL_PrepareReceive>
 8009bc6:	e018      	b.n	8009bfa <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009bce:	b2db      	uxtb	r3, r3
 8009bd0:	2b03      	cmp	r3, #3
 8009bd2:	d10b      	bne.n	8009bec <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009bda:	68db      	ldr	r3, [r3, #12]
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d005      	beq.n	8009bec <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009be6:	68db      	ldr	r3, [r3, #12]
 8009be8:	68f8      	ldr	r0, [r7, #12]
 8009bea:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009bec:	2180      	movs	r1, #128	@ 0x80
 8009bee:	68f8      	ldr	r0, [r7, #12]
 8009bf0:	f001 fb24 	bl	800b23c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8009bf4:	68f8      	ldr	r0, [r7, #12]
 8009bf6:	f000 ff49 	bl	800aa8c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8009c00:	2b01      	cmp	r3, #1
 8009c02:	d122      	bne.n	8009c4a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8009c04:	68f8      	ldr	r0, [r7, #12]
 8009c06:	f7ff fe98 	bl	800993a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	2200      	movs	r2, #0
 8009c0e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8009c12:	e01a      	b.n	8009c4a <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009c1a:	b2db      	uxtb	r3, r3
 8009c1c:	2b03      	cmp	r3, #3
 8009c1e:	d114      	bne.n	8009c4a <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009c26:	695b      	ldr	r3, [r3, #20]
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d00e      	beq.n	8009c4a <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009c32:	695b      	ldr	r3, [r3, #20]
 8009c34:	7afa      	ldrb	r2, [r7, #11]
 8009c36:	4611      	mov	r1, r2
 8009c38:	68f8      	ldr	r0, [r7, #12]
 8009c3a:	4798      	blx	r3
 8009c3c:	4603      	mov	r3, r0
 8009c3e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8009c40:	7dfb      	ldrb	r3, [r7, #23]
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d001      	beq.n	8009c4a <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8009c46:	7dfb      	ldrb	r3, [r7, #23]
 8009c48:	e000      	b.n	8009c4c <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8009c4a:	2300      	movs	r3, #0
}
 8009c4c:	4618      	mov	r0, r3
 8009c4e:	3718      	adds	r7, #24
 8009c50:	46bd      	mov	sp, r7
 8009c52:	bd80      	pop	{r7, pc}

08009c54 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009c54:	b580      	push	{r7, lr}
 8009c56:	b082      	sub	sp, #8
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	2201      	movs	r2, #1
 8009c60:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	2200      	movs	r2, #0
 8009c68:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	2200      	movs	r2, #0
 8009c70:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	2200      	movs	r2, #0
 8009c76:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d101      	bne.n	8009c88 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8009c84:	2303      	movs	r3, #3
 8009c86:	e02f      	b.n	8009ce8 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d00f      	beq.n	8009cb2 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009c98:	685b      	ldr	r3, [r3, #4]
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d009      	beq.n	8009cb2 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009ca4:	685b      	ldr	r3, [r3, #4]
 8009ca6:	687a      	ldr	r2, [r7, #4]
 8009ca8:	6852      	ldr	r2, [r2, #4]
 8009caa:	b2d2      	uxtb	r2, r2
 8009cac:	4611      	mov	r1, r2
 8009cae:	6878      	ldr	r0, [r7, #4]
 8009cb0:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009cb2:	2340      	movs	r3, #64	@ 0x40
 8009cb4:	2200      	movs	r2, #0
 8009cb6:	2100      	movs	r1, #0
 8009cb8:	6878      	ldr	r0, [r7, #4]
 8009cba:	f001 fa7a 	bl	800b1b2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	2201      	movs	r2, #1
 8009cc2:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	2240      	movs	r2, #64	@ 0x40
 8009cca:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009cce:	2340      	movs	r3, #64	@ 0x40
 8009cd0:	2200      	movs	r2, #0
 8009cd2:	2180      	movs	r1, #128	@ 0x80
 8009cd4:	6878      	ldr	r0, [r7, #4]
 8009cd6:	f001 fa6c 	bl	800b1b2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	2201      	movs	r2, #1
 8009cde:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	2240      	movs	r2, #64	@ 0x40
 8009ce4:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8009ce6:	2300      	movs	r3, #0
}
 8009ce8:	4618      	mov	r0, r3
 8009cea:	3708      	adds	r7, #8
 8009cec:	46bd      	mov	sp, r7
 8009cee:	bd80      	pop	{r7, pc}

08009cf0 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009cf0:	b480      	push	{r7}
 8009cf2:	b083      	sub	sp, #12
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	6078      	str	r0, [r7, #4]
 8009cf8:	460b      	mov	r3, r1
 8009cfa:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	78fa      	ldrb	r2, [r7, #3]
 8009d00:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009d02:	2300      	movs	r3, #0
}
 8009d04:	4618      	mov	r0, r3
 8009d06:	370c      	adds	r7, #12
 8009d08:	46bd      	mov	sp, r7
 8009d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d0e:	4770      	bx	lr

08009d10 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009d10:	b480      	push	{r7}
 8009d12:	b083      	sub	sp, #12
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009d1e:	b2da      	uxtb	r2, r3
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	2204      	movs	r2, #4
 8009d2a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8009d2e:	2300      	movs	r3, #0
}
 8009d30:	4618      	mov	r0, r3
 8009d32:	370c      	adds	r7, #12
 8009d34:	46bd      	mov	sp, r7
 8009d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d3a:	4770      	bx	lr

08009d3c <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009d3c:	b480      	push	{r7}
 8009d3e:	b083      	sub	sp, #12
 8009d40:	af00      	add	r7, sp, #0
 8009d42:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009d4a:	b2db      	uxtb	r3, r3
 8009d4c:	2b04      	cmp	r3, #4
 8009d4e:	d106      	bne.n	8009d5e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8009d56:	b2da      	uxtb	r2, r3
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8009d5e:	2300      	movs	r3, #0
}
 8009d60:	4618      	mov	r0, r3
 8009d62:	370c      	adds	r7, #12
 8009d64:	46bd      	mov	sp, r7
 8009d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d6a:	4770      	bx	lr

08009d6c <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009d6c:	b580      	push	{r7, lr}
 8009d6e:	b082      	sub	sp, #8
 8009d70:	af00      	add	r7, sp, #0
 8009d72:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d101      	bne.n	8009d82 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8009d7e:	2303      	movs	r3, #3
 8009d80:	e012      	b.n	8009da8 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009d88:	b2db      	uxtb	r3, r3
 8009d8a:	2b03      	cmp	r3, #3
 8009d8c:	d10b      	bne.n	8009da6 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009d94:	69db      	ldr	r3, [r3, #28]
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d005      	beq.n	8009da6 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009da0:	69db      	ldr	r3, [r3, #28]
 8009da2:	6878      	ldr	r0, [r7, #4]
 8009da4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009da6:	2300      	movs	r3, #0
}
 8009da8:	4618      	mov	r0, r3
 8009daa:	3708      	adds	r7, #8
 8009dac:	46bd      	mov	sp, r7
 8009dae:	bd80      	pop	{r7, pc}

08009db0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009db0:	b480      	push	{r7}
 8009db2:	b087      	sub	sp, #28
 8009db4:	af00      	add	r7, sp, #0
 8009db6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009dbc:	697b      	ldr	r3, [r7, #20]
 8009dbe:	781b      	ldrb	r3, [r3, #0]
 8009dc0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009dc2:	697b      	ldr	r3, [r7, #20]
 8009dc4:	3301      	adds	r3, #1
 8009dc6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009dc8:	697b      	ldr	r3, [r7, #20]
 8009dca:	781b      	ldrb	r3, [r3, #0]
 8009dcc:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009dce:	8a3b      	ldrh	r3, [r7, #16]
 8009dd0:	021b      	lsls	r3, r3, #8
 8009dd2:	b21a      	sxth	r2, r3
 8009dd4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009dd8:	4313      	orrs	r3, r2
 8009dda:	b21b      	sxth	r3, r3
 8009ddc:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009dde:	89fb      	ldrh	r3, [r7, #14]
}
 8009de0:	4618      	mov	r0, r3
 8009de2:	371c      	adds	r7, #28
 8009de4:	46bd      	mov	sp, r7
 8009de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dea:	4770      	bx	lr

08009dec <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009dec:	b580      	push	{r7, lr}
 8009dee:	b084      	sub	sp, #16
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	6078      	str	r0, [r7, #4]
 8009df4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009df6:	2300      	movs	r3, #0
 8009df8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009dfa:	683b      	ldr	r3, [r7, #0]
 8009dfc:	781b      	ldrb	r3, [r3, #0]
 8009dfe:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009e02:	2b40      	cmp	r3, #64	@ 0x40
 8009e04:	d005      	beq.n	8009e12 <USBD_StdDevReq+0x26>
 8009e06:	2b40      	cmp	r3, #64	@ 0x40
 8009e08:	d853      	bhi.n	8009eb2 <USBD_StdDevReq+0xc6>
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d00b      	beq.n	8009e26 <USBD_StdDevReq+0x3a>
 8009e0e:	2b20      	cmp	r3, #32
 8009e10:	d14f      	bne.n	8009eb2 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009e18:	689b      	ldr	r3, [r3, #8]
 8009e1a:	6839      	ldr	r1, [r7, #0]
 8009e1c:	6878      	ldr	r0, [r7, #4]
 8009e1e:	4798      	blx	r3
 8009e20:	4603      	mov	r3, r0
 8009e22:	73fb      	strb	r3, [r7, #15]
      break;
 8009e24:	e04a      	b.n	8009ebc <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009e26:	683b      	ldr	r3, [r7, #0]
 8009e28:	785b      	ldrb	r3, [r3, #1]
 8009e2a:	2b09      	cmp	r3, #9
 8009e2c:	d83b      	bhi.n	8009ea6 <USBD_StdDevReq+0xba>
 8009e2e:	a201      	add	r2, pc, #4	@ (adr r2, 8009e34 <USBD_StdDevReq+0x48>)
 8009e30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e34:	08009e89 	.word	0x08009e89
 8009e38:	08009e9d 	.word	0x08009e9d
 8009e3c:	08009ea7 	.word	0x08009ea7
 8009e40:	08009e93 	.word	0x08009e93
 8009e44:	08009ea7 	.word	0x08009ea7
 8009e48:	08009e67 	.word	0x08009e67
 8009e4c:	08009e5d 	.word	0x08009e5d
 8009e50:	08009ea7 	.word	0x08009ea7
 8009e54:	08009e7f 	.word	0x08009e7f
 8009e58:	08009e71 	.word	0x08009e71
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009e5c:	6839      	ldr	r1, [r7, #0]
 8009e5e:	6878      	ldr	r0, [r7, #4]
 8009e60:	f000 f9de 	bl	800a220 <USBD_GetDescriptor>
          break;
 8009e64:	e024      	b.n	8009eb0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009e66:	6839      	ldr	r1, [r7, #0]
 8009e68:	6878      	ldr	r0, [r7, #4]
 8009e6a:	f000 fb6d 	bl	800a548 <USBD_SetAddress>
          break;
 8009e6e:	e01f      	b.n	8009eb0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009e70:	6839      	ldr	r1, [r7, #0]
 8009e72:	6878      	ldr	r0, [r7, #4]
 8009e74:	f000 fbac 	bl	800a5d0 <USBD_SetConfig>
 8009e78:	4603      	mov	r3, r0
 8009e7a:	73fb      	strb	r3, [r7, #15]
          break;
 8009e7c:	e018      	b.n	8009eb0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009e7e:	6839      	ldr	r1, [r7, #0]
 8009e80:	6878      	ldr	r0, [r7, #4]
 8009e82:	f000 fc4b 	bl	800a71c <USBD_GetConfig>
          break;
 8009e86:	e013      	b.n	8009eb0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009e88:	6839      	ldr	r1, [r7, #0]
 8009e8a:	6878      	ldr	r0, [r7, #4]
 8009e8c:	f000 fc7c 	bl	800a788 <USBD_GetStatus>
          break;
 8009e90:	e00e      	b.n	8009eb0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009e92:	6839      	ldr	r1, [r7, #0]
 8009e94:	6878      	ldr	r0, [r7, #4]
 8009e96:	f000 fcab 	bl	800a7f0 <USBD_SetFeature>
          break;
 8009e9a:	e009      	b.n	8009eb0 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009e9c:	6839      	ldr	r1, [r7, #0]
 8009e9e:	6878      	ldr	r0, [r7, #4]
 8009ea0:	f000 fcba 	bl	800a818 <USBD_ClrFeature>
          break;
 8009ea4:	e004      	b.n	8009eb0 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8009ea6:	6839      	ldr	r1, [r7, #0]
 8009ea8:	6878      	ldr	r0, [r7, #4]
 8009eaa:	f000 fd11 	bl	800a8d0 <USBD_CtlError>
          break;
 8009eae:	bf00      	nop
      }
      break;
 8009eb0:	e004      	b.n	8009ebc <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8009eb2:	6839      	ldr	r1, [r7, #0]
 8009eb4:	6878      	ldr	r0, [r7, #4]
 8009eb6:	f000 fd0b 	bl	800a8d0 <USBD_CtlError>
      break;
 8009eba:	bf00      	nop
  }

  return ret;
 8009ebc:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ebe:	4618      	mov	r0, r3
 8009ec0:	3710      	adds	r7, #16
 8009ec2:	46bd      	mov	sp, r7
 8009ec4:	bd80      	pop	{r7, pc}
 8009ec6:	bf00      	nop

08009ec8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ec8:	b580      	push	{r7, lr}
 8009eca:	b084      	sub	sp, #16
 8009ecc:	af00      	add	r7, sp, #0
 8009ece:	6078      	str	r0, [r7, #4]
 8009ed0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009ed2:	2300      	movs	r3, #0
 8009ed4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009ed6:	683b      	ldr	r3, [r7, #0]
 8009ed8:	781b      	ldrb	r3, [r3, #0]
 8009eda:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009ede:	2b40      	cmp	r3, #64	@ 0x40
 8009ee0:	d005      	beq.n	8009eee <USBD_StdItfReq+0x26>
 8009ee2:	2b40      	cmp	r3, #64	@ 0x40
 8009ee4:	d82f      	bhi.n	8009f46 <USBD_StdItfReq+0x7e>
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d001      	beq.n	8009eee <USBD_StdItfReq+0x26>
 8009eea:	2b20      	cmp	r3, #32
 8009eec:	d12b      	bne.n	8009f46 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009ef4:	b2db      	uxtb	r3, r3
 8009ef6:	3b01      	subs	r3, #1
 8009ef8:	2b02      	cmp	r3, #2
 8009efa:	d81d      	bhi.n	8009f38 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009efc:	683b      	ldr	r3, [r7, #0]
 8009efe:	889b      	ldrh	r3, [r3, #4]
 8009f00:	b2db      	uxtb	r3, r3
 8009f02:	2b01      	cmp	r3, #1
 8009f04:	d813      	bhi.n	8009f2e <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009f0c:	689b      	ldr	r3, [r3, #8]
 8009f0e:	6839      	ldr	r1, [r7, #0]
 8009f10:	6878      	ldr	r0, [r7, #4]
 8009f12:	4798      	blx	r3
 8009f14:	4603      	mov	r3, r0
 8009f16:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009f18:	683b      	ldr	r3, [r7, #0]
 8009f1a:	88db      	ldrh	r3, [r3, #6]
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d110      	bne.n	8009f42 <USBD_StdItfReq+0x7a>
 8009f20:	7bfb      	ldrb	r3, [r7, #15]
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d10d      	bne.n	8009f42 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009f26:	6878      	ldr	r0, [r7, #4]
 8009f28:	f000 fd9d 	bl	800aa66 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009f2c:	e009      	b.n	8009f42 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8009f2e:	6839      	ldr	r1, [r7, #0]
 8009f30:	6878      	ldr	r0, [r7, #4]
 8009f32:	f000 fccd 	bl	800a8d0 <USBD_CtlError>
          break;
 8009f36:	e004      	b.n	8009f42 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8009f38:	6839      	ldr	r1, [r7, #0]
 8009f3a:	6878      	ldr	r0, [r7, #4]
 8009f3c:	f000 fcc8 	bl	800a8d0 <USBD_CtlError>
          break;
 8009f40:	e000      	b.n	8009f44 <USBD_StdItfReq+0x7c>
          break;
 8009f42:	bf00      	nop
      }
      break;
 8009f44:	e004      	b.n	8009f50 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8009f46:	6839      	ldr	r1, [r7, #0]
 8009f48:	6878      	ldr	r0, [r7, #4]
 8009f4a:	f000 fcc1 	bl	800a8d0 <USBD_CtlError>
      break;
 8009f4e:	bf00      	nop
  }

  return ret;
 8009f50:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f52:	4618      	mov	r0, r3
 8009f54:	3710      	adds	r7, #16
 8009f56:	46bd      	mov	sp, r7
 8009f58:	bd80      	pop	{r7, pc}

08009f5a <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009f5a:	b580      	push	{r7, lr}
 8009f5c:	b084      	sub	sp, #16
 8009f5e:	af00      	add	r7, sp, #0
 8009f60:	6078      	str	r0, [r7, #4]
 8009f62:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009f64:	2300      	movs	r3, #0
 8009f66:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8009f68:	683b      	ldr	r3, [r7, #0]
 8009f6a:	889b      	ldrh	r3, [r3, #4]
 8009f6c:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009f6e:	683b      	ldr	r3, [r7, #0]
 8009f70:	781b      	ldrb	r3, [r3, #0]
 8009f72:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009f76:	2b40      	cmp	r3, #64	@ 0x40
 8009f78:	d007      	beq.n	8009f8a <USBD_StdEPReq+0x30>
 8009f7a:	2b40      	cmp	r3, #64	@ 0x40
 8009f7c:	f200 8145 	bhi.w	800a20a <USBD_StdEPReq+0x2b0>
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d00c      	beq.n	8009f9e <USBD_StdEPReq+0x44>
 8009f84:	2b20      	cmp	r3, #32
 8009f86:	f040 8140 	bne.w	800a20a <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009f90:	689b      	ldr	r3, [r3, #8]
 8009f92:	6839      	ldr	r1, [r7, #0]
 8009f94:	6878      	ldr	r0, [r7, #4]
 8009f96:	4798      	blx	r3
 8009f98:	4603      	mov	r3, r0
 8009f9a:	73fb      	strb	r3, [r7, #15]
      break;
 8009f9c:	e13a      	b.n	800a214 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009f9e:	683b      	ldr	r3, [r7, #0]
 8009fa0:	785b      	ldrb	r3, [r3, #1]
 8009fa2:	2b03      	cmp	r3, #3
 8009fa4:	d007      	beq.n	8009fb6 <USBD_StdEPReq+0x5c>
 8009fa6:	2b03      	cmp	r3, #3
 8009fa8:	f300 8129 	bgt.w	800a1fe <USBD_StdEPReq+0x2a4>
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d07f      	beq.n	800a0b0 <USBD_StdEPReq+0x156>
 8009fb0:	2b01      	cmp	r3, #1
 8009fb2:	d03c      	beq.n	800a02e <USBD_StdEPReq+0xd4>
 8009fb4:	e123      	b.n	800a1fe <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009fbc:	b2db      	uxtb	r3, r3
 8009fbe:	2b02      	cmp	r3, #2
 8009fc0:	d002      	beq.n	8009fc8 <USBD_StdEPReq+0x6e>
 8009fc2:	2b03      	cmp	r3, #3
 8009fc4:	d016      	beq.n	8009ff4 <USBD_StdEPReq+0x9a>
 8009fc6:	e02c      	b.n	800a022 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009fc8:	7bbb      	ldrb	r3, [r7, #14]
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d00d      	beq.n	8009fea <USBD_StdEPReq+0x90>
 8009fce:	7bbb      	ldrb	r3, [r7, #14]
 8009fd0:	2b80      	cmp	r3, #128	@ 0x80
 8009fd2:	d00a      	beq.n	8009fea <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009fd4:	7bbb      	ldrb	r3, [r7, #14]
 8009fd6:	4619      	mov	r1, r3
 8009fd8:	6878      	ldr	r0, [r7, #4]
 8009fda:	f001 f92f 	bl	800b23c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009fde:	2180      	movs	r1, #128	@ 0x80
 8009fe0:	6878      	ldr	r0, [r7, #4]
 8009fe2:	f001 f92b 	bl	800b23c <USBD_LL_StallEP>
 8009fe6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009fe8:	e020      	b.n	800a02c <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8009fea:	6839      	ldr	r1, [r7, #0]
 8009fec:	6878      	ldr	r0, [r7, #4]
 8009fee:	f000 fc6f 	bl	800a8d0 <USBD_CtlError>
              break;
 8009ff2:	e01b      	b.n	800a02c <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009ff4:	683b      	ldr	r3, [r7, #0]
 8009ff6:	885b      	ldrh	r3, [r3, #2]
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d10e      	bne.n	800a01a <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009ffc:	7bbb      	ldrb	r3, [r7, #14]
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d00b      	beq.n	800a01a <USBD_StdEPReq+0xc0>
 800a002:	7bbb      	ldrb	r3, [r7, #14]
 800a004:	2b80      	cmp	r3, #128	@ 0x80
 800a006:	d008      	beq.n	800a01a <USBD_StdEPReq+0xc0>
 800a008:	683b      	ldr	r3, [r7, #0]
 800a00a:	88db      	ldrh	r3, [r3, #6]
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d104      	bne.n	800a01a <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800a010:	7bbb      	ldrb	r3, [r7, #14]
 800a012:	4619      	mov	r1, r3
 800a014:	6878      	ldr	r0, [r7, #4]
 800a016:	f001 f911 	bl	800b23c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800a01a:	6878      	ldr	r0, [r7, #4]
 800a01c:	f000 fd23 	bl	800aa66 <USBD_CtlSendStatus>

              break;
 800a020:	e004      	b.n	800a02c <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800a022:	6839      	ldr	r1, [r7, #0]
 800a024:	6878      	ldr	r0, [r7, #4]
 800a026:	f000 fc53 	bl	800a8d0 <USBD_CtlError>
              break;
 800a02a:	bf00      	nop
          }
          break;
 800a02c:	e0ec      	b.n	800a208 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a034:	b2db      	uxtb	r3, r3
 800a036:	2b02      	cmp	r3, #2
 800a038:	d002      	beq.n	800a040 <USBD_StdEPReq+0xe6>
 800a03a:	2b03      	cmp	r3, #3
 800a03c:	d016      	beq.n	800a06c <USBD_StdEPReq+0x112>
 800a03e:	e030      	b.n	800a0a2 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a040:	7bbb      	ldrb	r3, [r7, #14]
 800a042:	2b00      	cmp	r3, #0
 800a044:	d00d      	beq.n	800a062 <USBD_StdEPReq+0x108>
 800a046:	7bbb      	ldrb	r3, [r7, #14]
 800a048:	2b80      	cmp	r3, #128	@ 0x80
 800a04a:	d00a      	beq.n	800a062 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a04c:	7bbb      	ldrb	r3, [r7, #14]
 800a04e:	4619      	mov	r1, r3
 800a050:	6878      	ldr	r0, [r7, #4]
 800a052:	f001 f8f3 	bl	800b23c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a056:	2180      	movs	r1, #128	@ 0x80
 800a058:	6878      	ldr	r0, [r7, #4]
 800a05a:	f001 f8ef 	bl	800b23c <USBD_LL_StallEP>
 800a05e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a060:	e025      	b.n	800a0ae <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800a062:	6839      	ldr	r1, [r7, #0]
 800a064:	6878      	ldr	r0, [r7, #4]
 800a066:	f000 fc33 	bl	800a8d0 <USBD_CtlError>
              break;
 800a06a:	e020      	b.n	800a0ae <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a06c:	683b      	ldr	r3, [r7, #0]
 800a06e:	885b      	ldrh	r3, [r3, #2]
 800a070:	2b00      	cmp	r3, #0
 800a072:	d11b      	bne.n	800a0ac <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a074:	7bbb      	ldrb	r3, [r7, #14]
 800a076:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d004      	beq.n	800a088 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800a07e:	7bbb      	ldrb	r3, [r7, #14]
 800a080:	4619      	mov	r1, r3
 800a082:	6878      	ldr	r0, [r7, #4]
 800a084:	f001 f8f9 	bl	800b27a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800a088:	6878      	ldr	r0, [r7, #4]
 800a08a:	f000 fcec 	bl	800aa66 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a094:	689b      	ldr	r3, [r3, #8]
 800a096:	6839      	ldr	r1, [r7, #0]
 800a098:	6878      	ldr	r0, [r7, #4]
 800a09a:	4798      	blx	r3
 800a09c:	4603      	mov	r3, r0
 800a09e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800a0a0:	e004      	b.n	800a0ac <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800a0a2:	6839      	ldr	r1, [r7, #0]
 800a0a4:	6878      	ldr	r0, [r7, #4]
 800a0a6:	f000 fc13 	bl	800a8d0 <USBD_CtlError>
              break;
 800a0aa:	e000      	b.n	800a0ae <USBD_StdEPReq+0x154>
              break;
 800a0ac:	bf00      	nop
          }
          break;
 800a0ae:	e0ab      	b.n	800a208 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a0b6:	b2db      	uxtb	r3, r3
 800a0b8:	2b02      	cmp	r3, #2
 800a0ba:	d002      	beq.n	800a0c2 <USBD_StdEPReq+0x168>
 800a0bc:	2b03      	cmp	r3, #3
 800a0be:	d032      	beq.n	800a126 <USBD_StdEPReq+0x1cc>
 800a0c0:	e097      	b.n	800a1f2 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a0c2:	7bbb      	ldrb	r3, [r7, #14]
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d007      	beq.n	800a0d8 <USBD_StdEPReq+0x17e>
 800a0c8:	7bbb      	ldrb	r3, [r7, #14]
 800a0ca:	2b80      	cmp	r3, #128	@ 0x80
 800a0cc:	d004      	beq.n	800a0d8 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800a0ce:	6839      	ldr	r1, [r7, #0]
 800a0d0:	6878      	ldr	r0, [r7, #4]
 800a0d2:	f000 fbfd 	bl	800a8d0 <USBD_CtlError>
                break;
 800a0d6:	e091      	b.n	800a1fc <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a0d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	da0b      	bge.n	800a0f8 <USBD_StdEPReq+0x19e>
 800a0e0:	7bbb      	ldrb	r3, [r7, #14]
 800a0e2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a0e6:	4613      	mov	r3, r2
 800a0e8:	009b      	lsls	r3, r3, #2
 800a0ea:	4413      	add	r3, r2
 800a0ec:	009b      	lsls	r3, r3, #2
 800a0ee:	3310      	adds	r3, #16
 800a0f0:	687a      	ldr	r2, [r7, #4]
 800a0f2:	4413      	add	r3, r2
 800a0f4:	3304      	adds	r3, #4
 800a0f6:	e00b      	b.n	800a110 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a0f8:	7bbb      	ldrb	r3, [r7, #14]
 800a0fa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a0fe:	4613      	mov	r3, r2
 800a100:	009b      	lsls	r3, r3, #2
 800a102:	4413      	add	r3, r2
 800a104:	009b      	lsls	r3, r3, #2
 800a106:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a10a:	687a      	ldr	r2, [r7, #4]
 800a10c:	4413      	add	r3, r2
 800a10e:	3304      	adds	r3, #4
 800a110:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a112:	68bb      	ldr	r3, [r7, #8]
 800a114:	2200      	movs	r2, #0
 800a116:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a118:	68bb      	ldr	r3, [r7, #8]
 800a11a:	2202      	movs	r2, #2
 800a11c:	4619      	mov	r1, r3
 800a11e:	6878      	ldr	r0, [r7, #4]
 800a120:	f000 fc47 	bl	800a9b2 <USBD_CtlSendData>
              break;
 800a124:	e06a      	b.n	800a1fc <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a126:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	da11      	bge.n	800a152 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a12e:	7bbb      	ldrb	r3, [r7, #14]
 800a130:	f003 020f 	and.w	r2, r3, #15
 800a134:	6879      	ldr	r1, [r7, #4]
 800a136:	4613      	mov	r3, r2
 800a138:	009b      	lsls	r3, r3, #2
 800a13a:	4413      	add	r3, r2
 800a13c:	009b      	lsls	r3, r3, #2
 800a13e:	440b      	add	r3, r1
 800a140:	3324      	adds	r3, #36	@ 0x24
 800a142:	881b      	ldrh	r3, [r3, #0]
 800a144:	2b00      	cmp	r3, #0
 800a146:	d117      	bne.n	800a178 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800a148:	6839      	ldr	r1, [r7, #0]
 800a14a:	6878      	ldr	r0, [r7, #4]
 800a14c:	f000 fbc0 	bl	800a8d0 <USBD_CtlError>
                  break;
 800a150:	e054      	b.n	800a1fc <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a152:	7bbb      	ldrb	r3, [r7, #14]
 800a154:	f003 020f 	and.w	r2, r3, #15
 800a158:	6879      	ldr	r1, [r7, #4]
 800a15a:	4613      	mov	r3, r2
 800a15c:	009b      	lsls	r3, r3, #2
 800a15e:	4413      	add	r3, r2
 800a160:	009b      	lsls	r3, r3, #2
 800a162:	440b      	add	r3, r1
 800a164:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a168:	881b      	ldrh	r3, [r3, #0]
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d104      	bne.n	800a178 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800a16e:	6839      	ldr	r1, [r7, #0]
 800a170:	6878      	ldr	r0, [r7, #4]
 800a172:	f000 fbad 	bl	800a8d0 <USBD_CtlError>
                  break;
 800a176:	e041      	b.n	800a1fc <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a178:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	da0b      	bge.n	800a198 <USBD_StdEPReq+0x23e>
 800a180:	7bbb      	ldrb	r3, [r7, #14]
 800a182:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a186:	4613      	mov	r3, r2
 800a188:	009b      	lsls	r3, r3, #2
 800a18a:	4413      	add	r3, r2
 800a18c:	009b      	lsls	r3, r3, #2
 800a18e:	3310      	adds	r3, #16
 800a190:	687a      	ldr	r2, [r7, #4]
 800a192:	4413      	add	r3, r2
 800a194:	3304      	adds	r3, #4
 800a196:	e00b      	b.n	800a1b0 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a198:	7bbb      	ldrb	r3, [r7, #14]
 800a19a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a19e:	4613      	mov	r3, r2
 800a1a0:	009b      	lsls	r3, r3, #2
 800a1a2:	4413      	add	r3, r2
 800a1a4:	009b      	lsls	r3, r3, #2
 800a1a6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a1aa:	687a      	ldr	r2, [r7, #4]
 800a1ac:	4413      	add	r3, r2
 800a1ae:	3304      	adds	r3, #4
 800a1b0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a1b2:	7bbb      	ldrb	r3, [r7, #14]
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d002      	beq.n	800a1be <USBD_StdEPReq+0x264>
 800a1b8:	7bbb      	ldrb	r3, [r7, #14]
 800a1ba:	2b80      	cmp	r3, #128	@ 0x80
 800a1bc:	d103      	bne.n	800a1c6 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800a1be:	68bb      	ldr	r3, [r7, #8]
 800a1c0:	2200      	movs	r2, #0
 800a1c2:	601a      	str	r2, [r3, #0]
 800a1c4:	e00e      	b.n	800a1e4 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800a1c6:	7bbb      	ldrb	r3, [r7, #14]
 800a1c8:	4619      	mov	r1, r3
 800a1ca:	6878      	ldr	r0, [r7, #4]
 800a1cc:	f001 f874 	bl	800b2b8 <USBD_LL_IsStallEP>
 800a1d0:	4603      	mov	r3, r0
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d003      	beq.n	800a1de <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800a1d6:	68bb      	ldr	r3, [r7, #8]
 800a1d8:	2201      	movs	r2, #1
 800a1da:	601a      	str	r2, [r3, #0]
 800a1dc:	e002      	b.n	800a1e4 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800a1de:	68bb      	ldr	r3, [r7, #8]
 800a1e0:	2200      	movs	r2, #0
 800a1e2:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a1e4:	68bb      	ldr	r3, [r7, #8]
 800a1e6:	2202      	movs	r2, #2
 800a1e8:	4619      	mov	r1, r3
 800a1ea:	6878      	ldr	r0, [r7, #4]
 800a1ec:	f000 fbe1 	bl	800a9b2 <USBD_CtlSendData>
              break;
 800a1f0:	e004      	b.n	800a1fc <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800a1f2:	6839      	ldr	r1, [r7, #0]
 800a1f4:	6878      	ldr	r0, [r7, #4]
 800a1f6:	f000 fb6b 	bl	800a8d0 <USBD_CtlError>
              break;
 800a1fa:	bf00      	nop
          }
          break;
 800a1fc:	e004      	b.n	800a208 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800a1fe:	6839      	ldr	r1, [r7, #0]
 800a200:	6878      	ldr	r0, [r7, #4]
 800a202:	f000 fb65 	bl	800a8d0 <USBD_CtlError>
          break;
 800a206:	bf00      	nop
      }
      break;
 800a208:	e004      	b.n	800a214 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800a20a:	6839      	ldr	r1, [r7, #0]
 800a20c:	6878      	ldr	r0, [r7, #4]
 800a20e:	f000 fb5f 	bl	800a8d0 <USBD_CtlError>
      break;
 800a212:	bf00      	nop
  }

  return ret;
 800a214:	7bfb      	ldrb	r3, [r7, #15]
}
 800a216:	4618      	mov	r0, r3
 800a218:	3710      	adds	r7, #16
 800a21a:	46bd      	mov	sp, r7
 800a21c:	bd80      	pop	{r7, pc}
	...

0800a220 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a220:	b580      	push	{r7, lr}
 800a222:	b084      	sub	sp, #16
 800a224:	af00      	add	r7, sp, #0
 800a226:	6078      	str	r0, [r7, #4]
 800a228:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a22a:	2300      	movs	r3, #0
 800a22c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a22e:	2300      	movs	r3, #0
 800a230:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a232:	2300      	movs	r3, #0
 800a234:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a236:	683b      	ldr	r3, [r7, #0]
 800a238:	885b      	ldrh	r3, [r3, #2]
 800a23a:	0a1b      	lsrs	r3, r3, #8
 800a23c:	b29b      	uxth	r3, r3
 800a23e:	3b01      	subs	r3, #1
 800a240:	2b0e      	cmp	r3, #14
 800a242:	f200 8152 	bhi.w	800a4ea <USBD_GetDescriptor+0x2ca>
 800a246:	a201      	add	r2, pc, #4	@ (adr r2, 800a24c <USBD_GetDescriptor+0x2c>)
 800a248:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a24c:	0800a2bd 	.word	0x0800a2bd
 800a250:	0800a2d5 	.word	0x0800a2d5
 800a254:	0800a315 	.word	0x0800a315
 800a258:	0800a4eb 	.word	0x0800a4eb
 800a25c:	0800a4eb 	.word	0x0800a4eb
 800a260:	0800a48b 	.word	0x0800a48b
 800a264:	0800a4b7 	.word	0x0800a4b7
 800a268:	0800a4eb 	.word	0x0800a4eb
 800a26c:	0800a4eb 	.word	0x0800a4eb
 800a270:	0800a4eb 	.word	0x0800a4eb
 800a274:	0800a4eb 	.word	0x0800a4eb
 800a278:	0800a4eb 	.word	0x0800a4eb
 800a27c:	0800a4eb 	.word	0x0800a4eb
 800a280:	0800a4eb 	.word	0x0800a4eb
 800a284:	0800a289 	.word	0x0800a289
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a28e:	69db      	ldr	r3, [r3, #28]
 800a290:	2b00      	cmp	r3, #0
 800a292:	d00b      	beq.n	800a2ac <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a29a:	69db      	ldr	r3, [r3, #28]
 800a29c:	687a      	ldr	r2, [r7, #4]
 800a29e:	7c12      	ldrb	r2, [r2, #16]
 800a2a0:	f107 0108 	add.w	r1, r7, #8
 800a2a4:	4610      	mov	r0, r2
 800a2a6:	4798      	blx	r3
 800a2a8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a2aa:	e126      	b.n	800a4fa <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a2ac:	6839      	ldr	r1, [r7, #0]
 800a2ae:	6878      	ldr	r0, [r7, #4]
 800a2b0:	f000 fb0e 	bl	800a8d0 <USBD_CtlError>
        err++;
 800a2b4:	7afb      	ldrb	r3, [r7, #11]
 800a2b6:	3301      	adds	r3, #1
 800a2b8:	72fb      	strb	r3, [r7, #11]
      break;
 800a2ba:	e11e      	b.n	800a4fa <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	687a      	ldr	r2, [r7, #4]
 800a2c6:	7c12      	ldrb	r2, [r2, #16]
 800a2c8:	f107 0108 	add.w	r1, r7, #8
 800a2cc:	4610      	mov	r0, r2
 800a2ce:	4798      	blx	r3
 800a2d0:	60f8      	str	r0, [r7, #12]
      break;
 800a2d2:	e112      	b.n	800a4fa <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	7c1b      	ldrb	r3, [r3, #16]
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d10d      	bne.n	800a2f8 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a2e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a2e4:	f107 0208 	add.w	r2, r7, #8
 800a2e8:	4610      	mov	r0, r2
 800a2ea:	4798      	blx	r3
 800a2ec:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	3301      	adds	r3, #1
 800a2f2:	2202      	movs	r2, #2
 800a2f4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a2f6:	e100      	b.n	800a4fa <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a2fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a300:	f107 0208 	add.w	r2, r7, #8
 800a304:	4610      	mov	r0, r2
 800a306:	4798      	blx	r3
 800a308:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	3301      	adds	r3, #1
 800a30e:	2202      	movs	r2, #2
 800a310:	701a      	strb	r2, [r3, #0]
      break;
 800a312:	e0f2      	b.n	800a4fa <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a314:	683b      	ldr	r3, [r7, #0]
 800a316:	885b      	ldrh	r3, [r3, #2]
 800a318:	b2db      	uxtb	r3, r3
 800a31a:	2b05      	cmp	r3, #5
 800a31c:	f200 80ac 	bhi.w	800a478 <USBD_GetDescriptor+0x258>
 800a320:	a201      	add	r2, pc, #4	@ (adr r2, 800a328 <USBD_GetDescriptor+0x108>)
 800a322:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a326:	bf00      	nop
 800a328:	0800a341 	.word	0x0800a341
 800a32c:	0800a375 	.word	0x0800a375
 800a330:	0800a3a9 	.word	0x0800a3a9
 800a334:	0800a3dd 	.word	0x0800a3dd
 800a338:	0800a411 	.word	0x0800a411
 800a33c:	0800a445 	.word	0x0800a445
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a346:	685b      	ldr	r3, [r3, #4]
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d00b      	beq.n	800a364 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a352:	685b      	ldr	r3, [r3, #4]
 800a354:	687a      	ldr	r2, [r7, #4]
 800a356:	7c12      	ldrb	r2, [r2, #16]
 800a358:	f107 0108 	add.w	r1, r7, #8
 800a35c:	4610      	mov	r0, r2
 800a35e:	4798      	blx	r3
 800a360:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a362:	e091      	b.n	800a488 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a364:	6839      	ldr	r1, [r7, #0]
 800a366:	6878      	ldr	r0, [r7, #4]
 800a368:	f000 fab2 	bl	800a8d0 <USBD_CtlError>
            err++;
 800a36c:	7afb      	ldrb	r3, [r7, #11]
 800a36e:	3301      	adds	r3, #1
 800a370:	72fb      	strb	r3, [r7, #11]
          break;
 800a372:	e089      	b.n	800a488 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a37a:	689b      	ldr	r3, [r3, #8]
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d00b      	beq.n	800a398 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a386:	689b      	ldr	r3, [r3, #8]
 800a388:	687a      	ldr	r2, [r7, #4]
 800a38a:	7c12      	ldrb	r2, [r2, #16]
 800a38c:	f107 0108 	add.w	r1, r7, #8
 800a390:	4610      	mov	r0, r2
 800a392:	4798      	blx	r3
 800a394:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a396:	e077      	b.n	800a488 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a398:	6839      	ldr	r1, [r7, #0]
 800a39a:	6878      	ldr	r0, [r7, #4]
 800a39c:	f000 fa98 	bl	800a8d0 <USBD_CtlError>
            err++;
 800a3a0:	7afb      	ldrb	r3, [r7, #11]
 800a3a2:	3301      	adds	r3, #1
 800a3a4:	72fb      	strb	r3, [r7, #11]
          break;
 800a3a6:	e06f      	b.n	800a488 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a3ae:	68db      	ldr	r3, [r3, #12]
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d00b      	beq.n	800a3cc <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a3ba:	68db      	ldr	r3, [r3, #12]
 800a3bc:	687a      	ldr	r2, [r7, #4]
 800a3be:	7c12      	ldrb	r2, [r2, #16]
 800a3c0:	f107 0108 	add.w	r1, r7, #8
 800a3c4:	4610      	mov	r0, r2
 800a3c6:	4798      	blx	r3
 800a3c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a3ca:	e05d      	b.n	800a488 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a3cc:	6839      	ldr	r1, [r7, #0]
 800a3ce:	6878      	ldr	r0, [r7, #4]
 800a3d0:	f000 fa7e 	bl	800a8d0 <USBD_CtlError>
            err++;
 800a3d4:	7afb      	ldrb	r3, [r7, #11]
 800a3d6:	3301      	adds	r3, #1
 800a3d8:	72fb      	strb	r3, [r7, #11]
          break;
 800a3da:	e055      	b.n	800a488 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a3e2:	691b      	ldr	r3, [r3, #16]
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d00b      	beq.n	800a400 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a3ee:	691b      	ldr	r3, [r3, #16]
 800a3f0:	687a      	ldr	r2, [r7, #4]
 800a3f2:	7c12      	ldrb	r2, [r2, #16]
 800a3f4:	f107 0108 	add.w	r1, r7, #8
 800a3f8:	4610      	mov	r0, r2
 800a3fa:	4798      	blx	r3
 800a3fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a3fe:	e043      	b.n	800a488 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a400:	6839      	ldr	r1, [r7, #0]
 800a402:	6878      	ldr	r0, [r7, #4]
 800a404:	f000 fa64 	bl	800a8d0 <USBD_CtlError>
            err++;
 800a408:	7afb      	ldrb	r3, [r7, #11]
 800a40a:	3301      	adds	r3, #1
 800a40c:	72fb      	strb	r3, [r7, #11]
          break;
 800a40e:	e03b      	b.n	800a488 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a416:	695b      	ldr	r3, [r3, #20]
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d00b      	beq.n	800a434 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a422:	695b      	ldr	r3, [r3, #20]
 800a424:	687a      	ldr	r2, [r7, #4]
 800a426:	7c12      	ldrb	r2, [r2, #16]
 800a428:	f107 0108 	add.w	r1, r7, #8
 800a42c:	4610      	mov	r0, r2
 800a42e:	4798      	blx	r3
 800a430:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a432:	e029      	b.n	800a488 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a434:	6839      	ldr	r1, [r7, #0]
 800a436:	6878      	ldr	r0, [r7, #4]
 800a438:	f000 fa4a 	bl	800a8d0 <USBD_CtlError>
            err++;
 800a43c:	7afb      	ldrb	r3, [r7, #11]
 800a43e:	3301      	adds	r3, #1
 800a440:	72fb      	strb	r3, [r7, #11]
          break;
 800a442:	e021      	b.n	800a488 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a44a:	699b      	ldr	r3, [r3, #24]
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d00b      	beq.n	800a468 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a456:	699b      	ldr	r3, [r3, #24]
 800a458:	687a      	ldr	r2, [r7, #4]
 800a45a:	7c12      	ldrb	r2, [r2, #16]
 800a45c:	f107 0108 	add.w	r1, r7, #8
 800a460:	4610      	mov	r0, r2
 800a462:	4798      	blx	r3
 800a464:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a466:	e00f      	b.n	800a488 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a468:	6839      	ldr	r1, [r7, #0]
 800a46a:	6878      	ldr	r0, [r7, #4]
 800a46c:	f000 fa30 	bl	800a8d0 <USBD_CtlError>
            err++;
 800a470:	7afb      	ldrb	r3, [r7, #11]
 800a472:	3301      	adds	r3, #1
 800a474:	72fb      	strb	r3, [r7, #11]
          break;
 800a476:	e007      	b.n	800a488 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800a478:	6839      	ldr	r1, [r7, #0]
 800a47a:	6878      	ldr	r0, [r7, #4]
 800a47c:	f000 fa28 	bl	800a8d0 <USBD_CtlError>
          err++;
 800a480:	7afb      	ldrb	r3, [r7, #11]
 800a482:	3301      	adds	r3, #1
 800a484:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800a486:	bf00      	nop
      }
      break;
 800a488:	e037      	b.n	800a4fa <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	7c1b      	ldrb	r3, [r3, #16]
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d109      	bne.n	800a4a6 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a498:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a49a:	f107 0208 	add.w	r2, r7, #8
 800a49e:	4610      	mov	r0, r2
 800a4a0:	4798      	blx	r3
 800a4a2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a4a4:	e029      	b.n	800a4fa <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a4a6:	6839      	ldr	r1, [r7, #0]
 800a4a8:	6878      	ldr	r0, [r7, #4]
 800a4aa:	f000 fa11 	bl	800a8d0 <USBD_CtlError>
        err++;
 800a4ae:	7afb      	ldrb	r3, [r7, #11]
 800a4b0:	3301      	adds	r3, #1
 800a4b2:	72fb      	strb	r3, [r7, #11]
      break;
 800a4b4:	e021      	b.n	800a4fa <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	7c1b      	ldrb	r3, [r3, #16]
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d10d      	bne.n	800a4da <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a4c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a4c6:	f107 0208 	add.w	r2, r7, #8
 800a4ca:	4610      	mov	r0, r2
 800a4cc:	4798      	blx	r3
 800a4ce:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	3301      	adds	r3, #1
 800a4d4:	2207      	movs	r2, #7
 800a4d6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a4d8:	e00f      	b.n	800a4fa <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a4da:	6839      	ldr	r1, [r7, #0]
 800a4dc:	6878      	ldr	r0, [r7, #4]
 800a4de:	f000 f9f7 	bl	800a8d0 <USBD_CtlError>
        err++;
 800a4e2:	7afb      	ldrb	r3, [r7, #11]
 800a4e4:	3301      	adds	r3, #1
 800a4e6:	72fb      	strb	r3, [r7, #11]
      break;
 800a4e8:	e007      	b.n	800a4fa <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800a4ea:	6839      	ldr	r1, [r7, #0]
 800a4ec:	6878      	ldr	r0, [r7, #4]
 800a4ee:	f000 f9ef 	bl	800a8d0 <USBD_CtlError>
      err++;
 800a4f2:	7afb      	ldrb	r3, [r7, #11]
 800a4f4:	3301      	adds	r3, #1
 800a4f6:	72fb      	strb	r3, [r7, #11]
      break;
 800a4f8:	bf00      	nop
  }

  if (err != 0U)
 800a4fa:	7afb      	ldrb	r3, [r7, #11]
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d11e      	bne.n	800a53e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800a500:	683b      	ldr	r3, [r7, #0]
 800a502:	88db      	ldrh	r3, [r3, #6]
 800a504:	2b00      	cmp	r3, #0
 800a506:	d016      	beq.n	800a536 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800a508:	893b      	ldrh	r3, [r7, #8]
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d00e      	beq.n	800a52c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800a50e:	683b      	ldr	r3, [r7, #0]
 800a510:	88da      	ldrh	r2, [r3, #6]
 800a512:	893b      	ldrh	r3, [r7, #8]
 800a514:	4293      	cmp	r3, r2
 800a516:	bf28      	it	cs
 800a518:	4613      	movcs	r3, r2
 800a51a:	b29b      	uxth	r3, r3
 800a51c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a51e:	893b      	ldrh	r3, [r7, #8]
 800a520:	461a      	mov	r2, r3
 800a522:	68f9      	ldr	r1, [r7, #12]
 800a524:	6878      	ldr	r0, [r7, #4]
 800a526:	f000 fa44 	bl	800a9b2 <USBD_CtlSendData>
 800a52a:	e009      	b.n	800a540 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800a52c:	6839      	ldr	r1, [r7, #0]
 800a52e:	6878      	ldr	r0, [r7, #4]
 800a530:	f000 f9ce 	bl	800a8d0 <USBD_CtlError>
 800a534:	e004      	b.n	800a540 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800a536:	6878      	ldr	r0, [r7, #4]
 800a538:	f000 fa95 	bl	800aa66 <USBD_CtlSendStatus>
 800a53c:	e000      	b.n	800a540 <USBD_GetDescriptor+0x320>
    return;
 800a53e:	bf00      	nop
  }
}
 800a540:	3710      	adds	r7, #16
 800a542:	46bd      	mov	sp, r7
 800a544:	bd80      	pop	{r7, pc}
 800a546:	bf00      	nop

0800a548 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a548:	b580      	push	{r7, lr}
 800a54a:	b084      	sub	sp, #16
 800a54c:	af00      	add	r7, sp, #0
 800a54e:	6078      	str	r0, [r7, #4]
 800a550:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a552:	683b      	ldr	r3, [r7, #0]
 800a554:	889b      	ldrh	r3, [r3, #4]
 800a556:	2b00      	cmp	r3, #0
 800a558:	d131      	bne.n	800a5be <USBD_SetAddress+0x76>
 800a55a:	683b      	ldr	r3, [r7, #0]
 800a55c:	88db      	ldrh	r3, [r3, #6]
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d12d      	bne.n	800a5be <USBD_SetAddress+0x76>
 800a562:	683b      	ldr	r3, [r7, #0]
 800a564:	885b      	ldrh	r3, [r3, #2]
 800a566:	2b7f      	cmp	r3, #127	@ 0x7f
 800a568:	d829      	bhi.n	800a5be <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a56a:	683b      	ldr	r3, [r7, #0]
 800a56c:	885b      	ldrh	r3, [r3, #2]
 800a56e:	b2db      	uxtb	r3, r3
 800a570:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a574:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a57c:	b2db      	uxtb	r3, r3
 800a57e:	2b03      	cmp	r3, #3
 800a580:	d104      	bne.n	800a58c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800a582:	6839      	ldr	r1, [r7, #0]
 800a584:	6878      	ldr	r0, [r7, #4]
 800a586:	f000 f9a3 	bl	800a8d0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a58a:	e01d      	b.n	800a5c8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	7bfa      	ldrb	r2, [r7, #15]
 800a590:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a594:	7bfb      	ldrb	r3, [r7, #15]
 800a596:	4619      	mov	r1, r3
 800a598:	6878      	ldr	r0, [r7, #4]
 800a59a:	f000 feb9 	bl	800b310 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a59e:	6878      	ldr	r0, [r7, #4]
 800a5a0:	f000 fa61 	bl	800aa66 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a5a4:	7bfb      	ldrb	r3, [r7, #15]
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d004      	beq.n	800a5b4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	2202      	movs	r2, #2
 800a5ae:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a5b2:	e009      	b.n	800a5c8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	2201      	movs	r2, #1
 800a5b8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a5bc:	e004      	b.n	800a5c8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a5be:	6839      	ldr	r1, [r7, #0]
 800a5c0:	6878      	ldr	r0, [r7, #4]
 800a5c2:	f000 f985 	bl	800a8d0 <USBD_CtlError>
  }
}
 800a5c6:	bf00      	nop
 800a5c8:	bf00      	nop
 800a5ca:	3710      	adds	r7, #16
 800a5cc:	46bd      	mov	sp, r7
 800a5ce:	bd80      	pop	{r7, pc}

0800a5d0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a5d0:	b580      	push	{r7, lr}
 800a5d2:	b084      	sub	sp, #16
 800a5d4:	af00      	add	r7, sp, #0
 800a5d6:	6078      	str	r0, [r7, #4]
 800a5d8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a5da:	2300      	movs	r3, #0
 800a5dc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a5de:	683b      	ldr	r3, [r7, #0]
 800a5e0:	885b      	ldrh	r3, [r3, #2]
 800a5e2:	b2da      	uxtb	r2, r3
 800a5e4:	4b4c      	ldr	r3, [pc, #304]	@ (800a718 <USBD_SetConfig+0x148>)
 800a5e6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a5e8:	4b4b      	ldr	r3, [pc, #300]	@ (800a718 <USBD_SetConfig+0x148>)
 800a5ea:	781b      	ldrb	r3, [r3, #0]
 800a5ec:	2b01      	cmp	r3, #1
 800a5ee:	d905      	bls.n	800a5fc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a5f0:	6839      	ldr	r1, [r7, #0]
 800a5f2:	6878      	ldr	r0, [r7, #4]
 800a5f4:	f000 f96c 	bl	800a8d0 <USBD_CtlError>
    return USBD_FAIL;
 800a5f8:	2303      	movs	r3, #3
 800a5fa:	e088      	b.n	800a70e <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a602:	b2db      	uxtb	r3, r3
 800a604:	2b02      	cmp	r3, #2
 800a606:	d002      	beq.n	800a60e <USBD_SetConfig+0x3e>
 800a608:	2b03      	cmp	r3, #3
 800a60a:	d025      	beq.n	800a658 <USBD_SetConfig+0x88>
 800a60c:	e071      	b.n	800a6f2 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800a60e:	4b42      	ldr	r3, [pc, #264]	@ (800a718 <USBD_SetConfig+0x148>)
 800a610:	781b      	ldrb	r3, [r3, #0]
 800a612:	2b00      	cmp	r3, #0
 800a614:	d01c      	beq.n	800a650 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800a616:	4b40      	ldr	r3, [pc, #256]	@ (800a718 <USBD_SetConfig+0x148>)
 800a618:	781b      	ldrb	r3, [r3, #0]
 800a61a:	461a      	mov	r2, r3
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a620:	4b3d      	ldr	r3, [pc, #244]	@ (800a718 <USBD_SetConfig+0x148>)
 800a622:	781b      	ldrb	r3, [r3, #0]
 800a624:	4619      	mov	r1, r3
 800a626:	6878      	ldr	r0, [r7, #4]
 800a628:	f7ff f992 	bl	8009950 <USBD_SetClassConfig>
 800a62c:	4603      	mov	r3, r0
 800a62e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800a630:	7bfb      	ldrb	r3, [r7, #15]
 800a632:	2b00      	cmp	r3, #0
 800a634:	d004      	beq.n	800a640 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800a636:	6839      	ldr	r1, [r7, #0]
 800a638:	6878      	ldr	r0, [r7, #4]
 800a63a:	f000 f949 	bl	800a8d0 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a63e:	e065      	b.n	800a70c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800a640:	6878      	ldr	r0, [r7, #4]
 800a642:	f000 fa10 	bl	800aa66 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	2203      	movs	r2, #3
 800a64a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800a64e:	e05d      	b.n	800a70c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800a650:	6878      	ldr	r0, [r7, #4]
 800a652:	f000 fa08 	bl	800aa66 <USBD_CtlSendStatus>
      break;
 800a656:	e059      	b.n	800a70c <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a658:	4b2f      	ldr	r3, [pc, #188]	@ (800a718 <USBD_SetConfig+0x148>)
 800a65a:	781b      	ldrb	r3, [r3, #0]
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d112      	bne.n	800a686 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	2202      	movs	r2, #2
 800a664:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800a668:	4b2b      	ldr	r3, [pc, #172]	@ (800a718 <USBD_SetConfig+0x148>)
 800a66a:	781b      	ldrb	r3, [r3, #0]
 800a66c:	461a      	mov	r2, r3
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a672:	4b29      	ldr	r3, [pc, #164]	@ (800a718 <USBD_SetConfig+0x148>)
 800a674:	781b      	ldrb	r3, [r3, #0]
 800a676:	4619      	mov	r1, r3
 800a678:	6878      	ldr	r0, [r7, #4]
 800a67a:	f7ff f985 	bl	8009988 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a67e:	6878      	ldr	r0, [r7, #4]
 800a680:	f000 f9f1 	bl	800aa66 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a684:	e042      	b.n	800a70c <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800a686:	4b24      	ldr	r3, [pc, #144]	@ (800a718 <USBD_SetConfig+0x148>)
 800a688:	781b      	ldrb	r3, [r3, #0]
 800a68a:	461a      	mov	r2, r3
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	685b      	ldr	r3, [r3, #4]
 800a690:	429a      	cmp	r2, r3
 800a692:	d02a      	beq.n	800a6ea <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	685b      	ldr	r3, [r3, #4]
 800a698:	b2db      	uxtb	r3, r3
 800a69a:	4619      	mov	r1, r3
 800a69c:	6878      	ldr	r0, [r7, #4]
 800a69e:	f7ff f973 	bl	8009988 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a6a2:	4b1d      	ldr	r3, [pc, #116]	@ (800a718 <USBD_SetConfig+0x148>)
 800a6a4:	781b      	ldrb	r3, [r3, #0]
 800a6a6:	461a      	mov	r2, r3
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a6ac:	4b1a      	ldr	r3, [pc, #104]	@ (800a718 <USBD_SetConfig+0x148>)
 800a6ae:	781b      	ldrb	r3, [r3, #0]
 800a6b0:	4619      	mov	r1, r3
 800a6b2:	6878      	ldr	r0, [r7, #4]
 800a6b4:	f7ff f94c 	bl	8009950 <USBD_SetClassConfig>
 800a6b8:	4603      	mov	r3, r0
 800a6ba:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a6bc:	7bfb      	ldrb	r3, [r7, #15]
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d00f      	beq.n	800a6e2 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800a6c2:	6839      	ldr	r1, [r7, #0]
 800a6c4:	6878      	ldr	r0, [r7, #4]
 800a6c6:	f000 f903 	bl	800a8d0 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	685b      	ldr	r3, [r3, #4]
 800a6ce:	b2db      	uxtb	r3, r3
 800a6d0:	4619      	mov	r1, r3
 800a6d2:	6878      	ldr	r0, [r7, #4]
 800a6d4:	f7ff f958 	bl	8009988 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	2202      	movs	r2, #2
 800a6dc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800a6e0:	e014      	b.n	800a70c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800a6e2:	6878      	ldr	r0, [r7, #4]
 800a6e4:	f000 f9bf 	bl	800aa66 <USBD_CtlSendStatus>
      break;
 800a6e8:	e010      	b.n	800a70c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800a6ea:	6878      	ldr	r0, [r7, #4]
 800a6ec:	f000 f9bb 	bl	800aa66 <USBD_CtlSendStatus>
      break;
 800a6f0:	e00c      	b.n	800a70c <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800a6f2:	6839      	ldr	r1, [r7, #0]
 800a6f4:	6878      	ldr	r0, [r7, #4]
 800a6f6:	f000 f8eb 	bl	800a8d0 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a6fa:	4b07      	ldr	r3, [pc, #28]	@ (800a718 <USBD_SetConfig+0x148>)
 800a6fc:	781b      	ldrb	r3, [r3, #0]
 800a6fe:	4619      	mov	r1, r3
 800a700:	6878      	ldr	r0, [r7, #4]
 800a702:	f7ff f941 	bl	8009988 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a706:	2303      	movs	r3, #3
 800a708:	73fb      	strb	r3, [r7, #15]
      break;
 800a70a:	bf00      	nop
  }

  return ret;
 800a70c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a70e:	4618      	mov	r0, r3
 800a710:	3710      	adds	r7, #16
 800a712:	46bd      	mov	sp, r7
 800a714:	bd80      	pop	{r7, pc}
 800a716:	bf00      	nop
 800a718:	20000bac 	.word	0x20000bac

0800a71c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a71c:	b580      	push	{r7, lr}
 800a71e:	b082      	sub	sp, #8
 800a720:	af00      	add	r7, sp, #0
 800a722:	6078      	str	r0, [r7, #4]
 800a724:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a726:	683b      	ldr	r3, [r7, #0]
 800a728:	88db      	ldrh	r3, [r3, #6]
 800a72a:	2b01      	cmp	r3, #1
 800a72c:	d004      	beq.n	800a738 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a72e:	6839      	ldr	r1, [r7, #0]
 800a730:	6878      	ldr	r0, [r7, #4]
 800a732:	f000 f8cd 	bl	800a8d0 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a736:	e023      	b.n	800a780 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a73e:	b2db      	uxtb	r3, r3
 800a740:	2b02      	cmp	r3, #2
 800a742:	dc02      	bgt.n	800a74a <USBD_GetConfig+0x2e>
 800a744:	2b00      	cmp	r3, #0
 800a746:	dc03      	bgt.n	800a750 <USBD_GetConfig+0x34>
 800a748:	e015      	b.n	800a776 <USBD_GetConfig+0x5a>
 800a74a:	2b03      	cmp	r3, #3
 800a74c:	d00b      	beq.n	800a766 <USBD_GetConfig+0x4a>
 800a74e:	e012      	b.n	800a776 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	2200      	movs	r2, #0
 800a754:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	3308      	adds	r3, #8
 800a75a:	2201      	movs	r2, #1
 800a75c:	4619      	mov	r1, r3
 800a75e:	6878      	ldr	r0, [r7, #4]
 800a760:	f000 f927 	bl	800a9b2 <USBD_CtlSendData>
        break;
 800a764:	e00c      	b.n	800a780 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	3304      	adds	r3, #4
 800a76a:	2201      	movs	r2, #1
 800a76c:	4619      	mov	r1, r3
 800a76e:	6878      	ldr	r0, [r7, #4]
 800a770:	f000 f91f 	bl	800a9b2 <USBD_CtlSendData>
        break;
 800a774:	e004      	b.n	800a780 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a776:	6839      	ldr	r1, [r7, #0]
 800a778:	6878      	ldr	r0, [r7, #4]
 800a77a:	f000 f8a9 	bl	800a8d0 <USBD_CtlError>
        break;
 800a77e:	bf00      	nop
}
 800a780:	bf00      	nop
 800a782:	3708      	adds	r7, #8
 800a784:	46bd      	mov	sp, r7
 800a786:	bd80      	pop	{r7, pc}

0800a788 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a788:	b580      	push	{r7, lr}
 800a78a:	b082      	sub	sp, #8
 800a78c:	af00      	add	r7, sp, #0
 800a78e:	6078      	str	r0, [r7, #4]
 800a790:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a798:	b2db      	uxtb	r3, r3
 800a79a:	3b01      	subs	r3, #1
 800a79c:	2b02      	cmp	r3, #2
 800a79e:	d81e      	bhi.n	800a7de <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a7a0:	683b      	ldr	r3, [r7, #0]
 800a7a2:	88db      	ldrh	r3, [r3, #6]
 800a7a4:	2b02      	cmp	r3, #2
 800a7a6:	d004      	beq.n	800a7b2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a7a8:	6839      	ldr	r1, [r7, #0]
 800a7aa:	6878      	ldr	r0, [r7, #4]
 800a7ac:	f000 f890 	bl	800a8d0 <USBD_CtlError>
        break;
 800a7b0:	e01a      	b.n	800a7e8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	2201      	movs	r2, #1
 800a7b6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d005      	beq.n	800a7ce <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	68db      	ldr	r3, [r3, #12]
 800a7c6:	f043 0202 	orr.w	r2, r3, #2
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	330c      	adds	r3, #12
 800a7d2:	2202      	movs	r2, #2
 800a7d4:	4619      	mov	r1, r3
 800a7d6:	6878      	ldr	r0, [r7, #4]
 800a7d8:	f000 f8eb 	bl	800a9b2 <USBD_CtlSendData>
      break;
 800a7dc:	e004      	b.n	800a7e8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a7de:	6839      	ldr	r1, [r7, #0]
 800a7e0:	6878      	ldr	r0, [r7, #4]
 800a7e2:	f000 f875 	bl	800a8d0 <USBD_CtlError>
      break;
 800a7e6:	bf00      	nop
  }
}
 800a7e8:	bf00      	nop
 800a7ea:	3708      	adds	r7, #8
 800a7ec:	46bd      	mov	sp, r7
 800a7ee:	bd80      	pop	{r7, pc}

0800a7f0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a7f0:	b580      	push	{r7, lr}
 800a7f2:	b082      	sub	sp, #8
 800a7f4:	af00      	add	r7, sp, #0
 800a7f6:	6078      	str	r0, [r7, #4]
 800a7f8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a7fa:	683b      	ldr	r3, [r7, #0]
 800a7fc:	885b      	ldrh	r3, [r3, #2]
 800a7fe:	2b01      	cmp	r3, #1
 800a800:	d106      	bne.n	800a810 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	2201      	movs	r2, #1
 800a806:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a80a:	6878      	ldr	r0, [r7, #4]
 800a80c:	f000 f92b 	bl	800aa66 <USBD_CtlSendStatus>
  }
}
 800a810:	bf00      	nop
 800a812:	3708      	adds	r7, #8
 800a814:	46bd      	mov	sp, r7
 800a816:	bd80      	pop	{r7, pc}

0800a818 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a818:	b580      	push	{r7, lr}
 800a81a:	b082      	sub	sp, #8
 800a81c:	af00      	add	r7, sp, #0
 800a81e:	6078      	str	r0, [r7, #4]
 800a820:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a828:	b2db      	uxtb	r3, r3
 800a82a:	3b01      	subs	r3, #1
 800a82c:	2b02      	cmp	r3, #2
 800a82e:	d80b      	bhi.n	800a848 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a830:	683b      	ldr	r3, [r7, #0]
 800a832:	885b      	ldrh	r3, [r3, #2]
 800a834:	2b01      	cmp	r3, #1
 800a836:	d10c      	bne.n	800a852 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	2200      	movs	r2, #0
 800a83c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a840:	6878      	ldr	r0, [r7, #4]
 800a842:	f000 f910 	bl	800aa66 <USBD_CtlSendStatus>
      }
      break;
 800a846:	e004      	b.n	800a852 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a848:	6839      	ldr	r1, [r7, #0]
 800a84a:	6878      	ldr	r0, [r7, #4]
 800a84c:	f000 f840 	bl	800a8d0 <USBD_CtlError>
      break;
 800a850:	e000      	b.n	800a854 <USBD_ClrFeature+0x3c>
      break;
 800a852:	bf00      	nop
  }
}
 800a854:	bf00      	nop
 800a856:	3708      	adds	r7, #8
 800a858:	46bd      	mov	sp, r7
 800a85a:	bd80      	pop	{r7, pc}

0800a85c <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a85c:	b580      	push	{r7, lr}
 800a85e:	b084      	sub	sp, #16
 800a860:	af00      	add	r7, sp, #0
 800a862:	6078      	str	r0, [r7, #4]
 800a864:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a866:	683b      	ldr	r3, [r7, #0]
 800a868:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	781a      	ldrb	r2, [r3, #0]
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	3301      	adds	r3, #1
 800a876:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	781a      	ldrb	r2, [r3, #0]
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	3301      	adds	r3, #1
 800a884:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a886:	68f8      	ldr	r0, [r7, #12]
 800a888:	f7ff fa92 	bl	8009db0 <SWAPBYTE>
 800a88c:	4603      	mov	r3, r0
 800a88e:	461a      	mov	r2, r3
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	3301      	adds	r3, #1
 800a898:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	3301      	adds	r3, #1
 800a89e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a8a0:	68f8      	ldr	r0, [r7, #12]
 800a8a2:	f7ff fa85 	bl	8009db0 <SWAPBYTE>
 800a8a6:	4603      	mov	r3, r0
 800a8a8:	461a      	mov	r2, r3
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	3301      	adds	r3, #1
 800a8b2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	3301      	adds	r3, #1
 800a8b8:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a8ba:	68f8      	ldr	r0, [r7, #12]
 800a8bc:	f7ff fa78 	bl	8009db0 <SWAPBYTE>
 800a8c0:	4603      	mov	r3, r0
 800a8c2:	461a      	mov	r2, r3
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	80da      	strh	r2, [r3, #6]
}
 800a8c8:	bf00      	nop
 800a8ca:	3710      	adds	r7, #16
 800a8cc:	46bd      	mov	sp, r7
 800a8ce:	bd80      	pop	{r7, pc}

0800a8d0 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a8d0:	b580      	push	{r7, lr}
 800a8d2:	b082      	sub	sp, #8
 800a8d4:	af00      	add	r7, sp, #0
 800a8d6:	6078      	str	r0, [r7, #4]
 800a8d8:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a8da:	2180      	movs	r1, #128	@ 0x80
 800a8dc:	6878      	ldr	r0, [r7, #4]
 800a8de:	f000 fcad 	bl	800b23c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a8e2:	2100      	movs	r1, #0
 800a8e4:	6878      	ldr	r0, [r7, #4]
 800a8e6:	f000 fca9 	bl	800b23c <USBD_LL_StallEP>
}
 800a8ea:	bf00      	nop
 800a8ec:	3708      	adds	r7, #8
 800a8ee:	46bd      	mov	sp, r7
 800a8f0:	bd80      	pop	{r7, pc}

0800a8f2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a8f2:	b580      	push	{r7, lr}
 800a8f4:	b086      	sub	sp, #24
 800a8f6:	af00      	add	r7, sp, #0
 800a8f8:	60f8      	str	r0, [r7, #12]
 800a8fa:	60b9      	str	r1, [r7, #8]
 800a8fc:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a8fe:	2300      	movs	r3, #0
 800a900:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	2b00      	cmp	r3, #0
 800a906:	d036      	beq.n	800a976 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800a90c:	6938      	ldr	r0, [r7, #16]
 800a90e:	f000 f836 	bl	800a97e <USBD_GetLen>
 800a912:	4603      	mov	r3, r0
 800a914:	3301      	adds	r3, #1
 800a916:	b29b      	uxth	r3, r3
 800a918:	005b      	lsls	r3, r3, #1
 800a91a:	b29a      	uxth	r2, r3
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a920:	7dfb      	ldrb	r3, [r7, #23]
 800a922:	68ba      	ldr	r2, [r7, #8]
 800a924:	4413      	add	r3, r2
 800a926:	687a      	ldr	r2, [r7, #4]
 800a928:	7812      	ldrb	r2, [r2, #0]
 800a92a:	701a      	strb	r2, [r3, #0]
  idx++;
 800a92c:	7dfb      	ldrb	r3, [r7, #23]
 800a92e:	3301      	adds	r3, #1
 800a930:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a932:	7dfb      	ldrb	r3, [r7, #23]
 800a934:	68ba      	ldr	r2, [r7, #8]
 800a936:	4413      	add	r3, r2
 800a938:	2203      	movs	r2, #3
 800a93a:	701a      	strb	r2, [r3, #0]
  idx++;
 800a93c:	7dfb      	ldrb	r3, [r7, #23]
 800a93e:	3301      	adds	r3, #1
 800a940:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a942:	e013      	b.n	800a96c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800a944:	7dfb      	ldrb	r3, [r7, #23]
 800a946:	68ba      	ldr	r2, [r7, #8]
 800a948:	4413      	add	r3, r2
 800a94a:	693a      	ldr	r2, [r7, #16]
 800a94c:	7812      	ldrb	r2, [r2, #0]
 800a94e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a950:	693b      	ldr	r3, [r7, #16]
 800a952:	3301      	adds	r3, #1
 800a954:	613b      	str	r3, [r7, #16]
    idx++;
 800a956:	7dfb      	ldrb	r3, [r7, #23]
 800a958:	3301      	adds	r3, #1
 800a95a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a95c:	7dfb      	ldrb	r3, [r7, #23]
 800a95e:	68ba      	ldr	r2, [r7, #8]
 800a960:	4413      	add	r3, r2
 800a962:	2200      	movs	r2, #0
 800a964:	701a      	strb	r2, [r3, #0]
    idx++;
 800a966:	7dfb      	ldrb	r3, [r7, #23]
 800a968:	3301      	adds	r3, #1
 800a96a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a96c:	693b      	ldr	r3, [r7, #16]
 800a96e:	781b      	ldrb	r3, [r3, #0]
 800a970:	2b00      	cmp	r3, #0
 800a972:	d1e7      	bne.n	800a944 <USBD_GetString+0x52>
 800a974:	e000      	b.n	800a978 <USBD_GetString+0x86>
    return;
 800a976:	bf00      	nop
  }
}
 800a978:	3718      	adds	r7, #24
 800a97a:	46bd      	mov	sp, r7
 800a97c:	bd80      	pop	{r7, pc}

0800a97e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a97e:	b480      	push	{r7}
 800a980:	b085      	sub	sp, #20
 800a982:	af00      	add	r7, sp, #0
 800a984:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a986:	2300      	movs	r3, #0
 800a988:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a98e:	e005      	b.n	800a99c <USBD_GetLen+0x1e>
  {
    len++;
 800a990:	7bfb      	ldrb	r3, [r7, #15]
 800a992:	3301      	adds	r3, #1
 800a994:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a996:	68bb      	ldr	r3, [r7, #8]
 800a998:	3301      	adds	r3, #1
 800a99a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a99c:	68bb      	ldr	r3, [r7, #8]
 800a99e:	781b      	ldrb	r3, [r3, #0]
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d1f5      	bne.n	800a990 <USBD_GetLen+0x12>
  }

  return len;
 800a9a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9a6:	4618      	mov	r0, r3
 800a9a8:	3714      	adds	r7, #20
 800a9aa:	46bd      	mov	sp, r7
 800a9ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b0:	4770      	bx	lr

0800a9b2 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a9b2:	b580      	push	{r7, lr}
 800a9b4:	b084      	sub	sp, #16
 800a9b6:	af00      	add	r7, sp, #0
 800a9b8:	60f8      	str	r0, [r7, #12]
 800a9ba:	60b9      	str	r1, [r7, #8]
 800a9bc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	2202      	movs	r2, #2
 800a9c2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	687a      	ldr	r2, [r7, #4]
 800a9ca:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	687a      	ldr	r2, [r7, #4]
 800a9d0:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	68ba      	ldr	r2, [r7, #8]
 800a9d6:	2100      	movs	r1, #0
 800a9d8:	68f8      	ldr	r0, [r7, #12]
 800a9da:	f000 fcb8 	bl	800b34e <USBD_LL_Transmit>

  return USBD_OK;
 800a9de:	2300      	movs	r3, #0
}
 800a9e0:	4618      	mov	r0, r3
 800a9e2:	3710      	adds	r7, #16
 800a9e4:	46bd      	mov	sp, r7
 800a9e6:	bd80      	pop	{r7, pc}

0800a9e8 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a9e8:	b580      	push	{r7, lr}
 800a9ea:	b084      	sub	sp, #16
 800a9ec:	af00      	add	r7, sp, #0
 800a9ee:	60f8      	str	r0, [r7, #12]
 800a9f0:	60b9      	str	r1, [r7, #8]
 800a9f2:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	68ba      	ldr	r2, [r7, #8]
 800a9f8:	2100      	movs	r1, #0
 800a9fa:	68f8      	ldr	r0, [r7, #12]
 800a9fc:	f000 fca7 	bl	800b34e <USBD_LL_Transmit>

  return USBD_OK;
 800aa00:	2300      	movs	r3, #0
}
 800aa02:	4618      	mov	r0, r3
 800aa04:	3710      	adds	r7, #16
 800aa06:	46bd      	mov	sp, r7
 800aa08:	bd80      	pop	{r7, pc}

0800aa0a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800aa0a:	b580      	push	{r7, lr}
 800aa0c:	b084      	sub	sp, #16
 800aa0e:	af00      	add	r7, sp, #0
 800aa10:	60f8      	str	r0, [r7, #12]
 800aa12:	60b9      	str	r1, [r7, #8]
 800aa14:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	2203      	movs	r2, #3
 800aa1a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	687a      	ldr	r2, [r7, #4]
 800aa22:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	687a      	ldr	r2, [r7, #4]
 800aa2a:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	68ba      	ldr	r2, [r7, #8]
 800aa32:	2100      	movs	r1, #0
 800aa34:	68f8      	ldr	r0, [r7, #12]
 800aa36:	f000 fcab 	bl	800b390 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800aa3a:	2300      	movs	r3, #0
}
 800aa3c:	4618      	mov	r0, r3
 800aa3e:	3710      	adds	r7, #16
 800aa40:	46bd      	mov	sp, r7
 800aa42:	bd80      	pop	{r7, pc}

0800aa44 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800aa44:	b580      	push	{r7, lr}
 800aa46:	b084      	sub	sp, #16
 800aa48:	af00      	add	r7, sp, #0
 800aa4a:	60f8      	str	r0, [r7, #12]
 800aa4c:	60b9      	str	r1, [r7, #8]
 800aa4e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	68ba      	ldr	r2, [r7, #8]
 800aa54:	2100      	movs	r1, #0
 800aa56:	68f8      	ldr	r0, [r7, #12]
 800aa58:	f000 fc9a 	bl	800b390 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800aa5c:	2300      	movs	r3, #0
}
 800aa5e:	4618      	mov	r0, r3
 800aa60:	3710      	adds	r7, #16
 800aa62:	46bd      	mov	sp, r7
 800aa64:	bd80      	pop	{r7, pc}

0800aa66 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800aa66:	b580      	push	{r7, lr}
 800aa68:	b082      	sub	sp, #8
 800aa6a:	af00      	add	r7, sp, #0
 800aa6c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	2204      	movs	r2, #4
 800aa72:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800aa76:	2300      	movs	r3, #0
 800aa78:	2200      	movs	r2, #0
 800aa7a:	2100      	movs	r1, #0
 800aa7c:	6878      	ldr	r0, [r7, #4]
 800aa7e:	f000 fc66 	bl	800b34e <USBD_LL_Transmit>

  return USBD_OK;
 800aa82:	2300      	movs	r3, #0
}
 800aa84:	4618      	mov	r0, r3
 800aa86:	3708      	adds	r7, #8
 800aa88:	46bd      	mov	sp, r7
 800aa8a:	bd80      	pop	{r7, pc}

0800aa8c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800aa8c:	b580      	push	{r7, lr}
 800aa8e:	b082      	sub	sp, #8
 800aa90:	af00      	add	r7, sp, #0
 800aa92:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	2205      	movs	r2, #5
 800aa98:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800aa9c:	2300      	movs	r3, #0
 800aa9e:	2200      	movs	r2, #0
 800aaa0:	2100      	movs	r1, #0
 800aaa2:	6878      	ldr	r0, [r7, #4]
 800aaa4:	f000 fc74 	bl	800b390 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800aaa8:	2300      	movs	r3, #0
}
 800aaaa:	4618      	mov	r0, r3
 800aaac:	3708      	adds	r7, #8
 800aaae:	46bd      	mov	sp, r7
 800aab0:	bd80      	pop	{r7, pc}
	...

0800aab4 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800aab4:	b580      	push	{r7, lr}
 800aab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800aab8:	2200      	movs	r2, #0
 800aaba:	4912      	ldr	r1, [pc, #72]	@ (800ab04 <MX_USB_Device_Init+0x50>)
 800aabc:	4812      	ldr	r0, [pc, #72]	@ (800ab08 <MX_USB_Device_Init+0x54>)
 800aabe:	f7fe fed9 	bl	8009874 <USBD_Init>
 800aac2:	4603      	mov	r3, r0
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d001      	beq.n	800aacc <MX_USB_Device_Init+0x18>
    Error_Handler();
 800aac8:	f7f5 fe9d 	bl	8000806 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800aacc:	490f      	ldr	r1, [pc, #60]	@ (800ab0c <MX_USB_Device_Init+0x58>)
 800aace:	480e      	ldr	r0, [pc, #56]	@ (800ab08 <MX_USB_Device_Init+0x54>)
 800aad0:	f7fe ff00 	bl	80098d4 <USBD_RegisterClass>
 800aad4:	4603      	mov	r3, r0
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d001      	beq.n	800aade <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800aada:	f7f5 fe94 	bl	8000806 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800aade:	490c      	ldr	r1, [pc, #48]	@ (800ab10 <MX_USB_Device_Init+0x5c>)
 800aae0:	4809      	ldr	r0, [pc, #36]	@ (800ab08 <MX_USB_Device_Init+0x54>)
 800aae2:	f7fe fe21 	bl	8009728 <USBD_CDC_RegisterInterface>
 800aae6:	4603      	mov	r3, r0
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d001      	beq.n	800aaf0 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800aaec:	f7f5 fe8b 	bl	8000806 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800aaf0:	4805      	ldr	r0, [pc, #20]	@ (800ab08 <MX_USB_Device_Init+0x54>)
 800aaf2:	f7fe ff16 	bl	8009922 <USBD_Start>
 800aaf6:	4603      	mov	r3, r0
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d001      	beq.n	800ab00 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800aafc:	f7f5 fe83 	bl	8000806 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800ab00:	bf00      	nop
 800ab02:	bd80      	pop	{r7, pc}
 800ab04:	20000140 	.word	0x20000140
 800ab08:	20000bb0 	.word	0x20000bb0
 800ab0c:	20000028 	.word	0x20000028
 800ab10:	2000012c 	.word	0x2000012c

0800ab14 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800ab14:	b580      	push	{r7, lr}
 800ab16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800ab18:	2200      	movs	r2, #0
 800ab1a:	4905      	ldr	r1, [pc, #20]	@ (800ab30 <CDC_Init_FS+0x1c>)
 800ab1c:	4805      	ldr	r0, [pc, #20]	@ (800ab34 <CDC_Init_FS+0x20>)
 800ab1e:	f7fe fe18 	bl	8009752 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800ab22:	4905      	ldr	r1, [pc, #20]	@ (800ab38 <CDC_Init_FS+0x24>)
 800ab24:	4803      	ldr	r0, [pc, #12]	@ (800ab34 <CDC_Init_FS+0x20>)
 800ab26:	f7fe fe32 	bl	800978e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800ab2a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800ab2c:	4618      	mov	r0, r3
 800ab2e:	bd80      	pop	{r7, pc}
 800ab30:	20001280 	.word	0x20001280
 800ab34:	20000bb0 	.word	0x20000bb0
 800ab38:	20000e80 	.word	0x20000e80

0800ab3c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800ab3c:	b480      	push	{r7}
 800ab3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800ab40:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800ab42:	4618      	mov	r0, r3
 800ab44:	46bd      	mov	sp, r7
 800ab46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab4a:	4770      	bx	lr

0800ab4c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800ab4c:	b480      	push	{r7}
 800ab4e:	b083      	sub	sp, #12
 800ab50:	af00      	add	r7, sp, #0
 800ab52:	4603      	mov	r3, r0
 800ab54:	6039      	str	r1, [r7, #0]
 800ab56:	71fb      	strb	r3, [r7, #7]
 800ab58:	4613      	mov	r3, r2
 800ab5a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800ab5c:	79fb      	ldrb	r3, [r7, #7]
 800ab5e:	2b23      	cmp	r3, #35	@ 0x23
 800ab60:	d84a      	bhi.n	800abf8 <CDC_Control_FS+0xac>
 800ab62:	a201      	add	r2, pc, #4	@ (adr r2, 800ab68 <CDC_Control_FS+0x1c>)
 800ab64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab68:	0800abf9 	.word	0x0800abf9
 800ab6c:	0800abf9 	.word	0x0800abf9
 800ab70:	0800abf9 	.word	0x0800abf9
 800ab74:	0800abf9 	.word	0x0800abf9
 800ab78:	0800abf9 	.word	0x0800abf9
 800ab7c:	0800abf9 	.word	0x0800abf9
 800ab80:	0800abf9 	.word	0x0800abf9
 800ab84:	0800abf9 	.word	0x0800abf9
 800ab88:	0800abf9 	.word	0x0800abf9
 800ab8c:	0800abf9 	.word	0x0800abf9
 800ab90:	0800abf9 	.word	0x0800abf9
 800ab94:	0800abf9 	.word	0x0800abf9
 800ab98:	0800abf9 	.word	0x0800abf9
 800ab9c:	0800abf9 	.word	0x0800abf9
 800aba0:	0800abf9 	.word	0x0800abf9
 800aba4:	0800abf9 	.word	0x0800abf9
 800aba8:	0800abf9 	.word	0x0800abf9
 800abac:	0800abf9 	.word	0x0800abf9
 800abb0:	0800abf9 	.word	0x0800abf9
 800abb4:	0800abf9 	.word	0x0800abf9
 800abb8:	0800abf9 	.word	0x0800abf9
 800abbc:	0800abf9 	.word	0x0800abf9
 800abc0:	0800abf9 	.word	0x0800abf9
 800abc4:	0800abf9 	.word	0x0800abf9
 800abc8:	0800abf9 	.word	0x0800abf9
 800abcc:	0800abf9 	.word	0x0800abf9
 800abd0:	0800abf9 	.word	0x0800abf9
 800abd4:	0800abf9 	.word	0x0800abf9
 800abd8:	0800abf9 	.word	0x0800abf9
 800abdc:	0800abf9 	.word	0x0800abf9
 800abe0:	0800abf9 	.word	0x0800abf9
 800abe4:	0800abf9 	.word	0x0800abf9
 800abe8:	0800abf9 	.word	0x0800abf9
 800abec:	0800abf9 	.word	0x0800abf9
 800abf0:	0800abf9 	.word	0x0800abf9
 800abf4:	0800abf9 	.word	0x0800abf9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800abf8:	bf00      	nop
  }

  return (USBD_OK);
 800abfa:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800abfc:	4618      	mov	r0, r3
 800abfe:	370c      	adds	r7, #12
 800ac00:	46bd      	mov	sp, r7
 800ac02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac06:	4770      	bx	lr

0800ac08 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800ac08:	b580      	push	{r7, lr}
 800ac0a:	b082      	sub	sp, #8
 800ac0c:	af00      	add	r7, sp, #0
 800ac0e:	6078      	str	r0, [r7, #4]
 800ac10:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800ac12:	6879      	ldr	r1, [r7, #4]
 800ac14:	4805      	ldr	r0, [pc, #20]	@ (800ac2c <CDC_Receive_FS+0x24>)
 800ac16:	f7fe fdba 	bl	800978e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800ac1a:	4804      	ldr	r0, [pc, #16]	@ (800ac2c <CDC_Receive_FS+0x24>)
 800ac1c:	f7fe fe00 	bl	8009820 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800ac20:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800ac22:	4618      	mov	r0, r3
 800ac24:	3708      	adds	r7, #8
 800ac26:	46bd      	mov	sp, r7
 800ac28:	bd80      	pop	{r7, pc}
 800ac2a:	bf00      	nop
 800ac2c:	20000bb0 	.word	0x20000bb0

0800ac30 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800ac30:	b580      	push	{r7, lr}
 800ac32:	b084      	sub	sp, #16
 800ac34:	af00      	add	r7, sp, #0
 800ac36:	6078      	str	r0, [r7, #4]
 800ac38:	460b      	mov	r3, r1
 800ac3a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800ac3c:	2300      	movs	r3, #0
 800ac3e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800ac40:	4b0d      	ldr	r3, [pc, #52]	@ (800ac78 <CDC_Transmit_FS+0x48>)
 800ac42:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ac46:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800ac48:	68bb      	ldr	r3, [r7, #8]
 800ac4a:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d001      	beq.n	800ac56 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800ac52:	2301      	movs	r3, #1
 800ac54:	e00b      	b.n	800ac6e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800ac56:	887b      	ldrh	r3, [r7, #2]
 800ac58:	461a      	mov	r2, r3
 800ac5a:	6879      	ldr	r1, [r7, #4]
 800ac5c:	4806      	ldr	r0, [pc, #24]	@ (800ac78 <CDC_Transmit_FS+0x48>)
 800ac5e:	f7fe fd78 	bl	8009752 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800ac62:	4805      	ldr	r0, [pc, #20]	@ (800ac78 <CDC_Transmit_FS+0x48>)
 800ac64:	f7fe fdac 	bl	80097c0 <USBD_CDC_TransmitPacket>
 800ac68:	4603      	mov	r3, r0
 800ac6a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800ac6c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac6e:	4618      	mov	r0, r3
 800ac70:	3710      	adds	r7, #16
 800ac72:	46bd      	mov	sp, r7
 800ac74:	bd80      	pop	{r7, pc}
 800ac76:	bf00      	nop
 800ac78:	20000bb0 	.word	0x20000bb0

0800ac7c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800ac7c:	b480      	push	{r7}
 800ac7e:	b087      	sub	sp, #28
 800ac80:	af00      	add	r7, sp, #0
 800ac82:	60f8      	str	r0, [r7, #12]
 800ac84:	60b9      	str	r1, [r7, #8]
 800ac86:	4613      	mov	r3, r2
 800ac88:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800ac8a:	2300      	movs	r3, #0
 800ac8c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800ac8e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ac92:	4618      	mov	r0, r3
 800ac94:	371c      	adds	r7, #28
 800ac96:	46bd      	mov	sp, r7
 800ac98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac9c:	4770      	bx	lr
	...

0800aca0 <CDC_Transmit_Is_Busy>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
uint8_t CDC_Transmit_Is_Busy(void)
{
 800aca0:	b480      	push	{r7}
 800aca2:	b083      	sub	sp, #12
 800aca4:	af00      	add	r7, sp, #0
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800aca6:	4b09      	ldr	r3, [pc, #36]	@ (800accc <CDC_Transmit_Is_Busy+0x2c>)
 800aca8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800acac:	607b      	str	r3, [r7, #4]
  if (hcdc->TxState != 0)
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d001      	beq.n	800acbc <CDC_Transmit_Is_Busy+0x1c>
  {
    return USBD_BUSY;
 800acb8:	2301      	movs	r3, #1
 800acba:	e000      	b.n	800acbe <CDC_Transmit_Is_Busy+0x1e>
  }  
  else
  {
    return USBD_OK;
 800acbc:	2300      	movs	r3, #0
  }
}
 800acbe:	4618      	mov	r0, r3
 800acc0:	370c      	adds	r7, #12
 800acc2:	46bd      	mov	sp, r7
 800acc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc8:	4770      	bx	lr
 800acca:	bf00      	nop
 800accc:	20000bb0 	.word	0x20000bb0

0800acd0 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800acd0:	b480      	push	{r7}
 800acd2:	b083      	sub	sp, #12
 800acd4:	af00      	add	r7, sp, #0
 800acd6:	4603      	mov	r3, r0
 800acd8:	6039      	str	r1, [r7, #0]
 800acda:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800acdc:	683b      	ldr	r3, [r7, #0]
 800acde:	2212      	movs	r2, #18
 800ace0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800ace2:	4b03      	ldr	r3, [pc, #12]	@ (800acf0 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800ace4:	4618      	mov	r0, r3
 800ace6:	370c      	adds	r7, #12
 800ace8:	46bd      	mov	sp, r7
 800acea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acee:	4770      	bx	lr
 800acf0:	20000160 	.word	0x20000160

0800acf4 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800acf4:	b480      	push	{r7}
 800acf6:	b083      	sub	sp, #12
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	4603      	mov	r3, r0
 800acfc:	6039      	str	r1, [r7, #0]
 800acfe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800ad00:	683b      	ldr	r3, [r7, #0]
 800ad02:	2204      	movs	r2, #4
 800ad04:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800ad06:	4b03      	ldr	r3, [pc, #12]	@ (800ad14 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800ad08:	4618      	mov	r0, r3
 800ad0a:	370c      	adds	r7, #12
 800ad0c:	46bd      	mov	sp, r7
 800ad0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad12:	4770      	bx	lr
 800ad14:	20000174 	.word	0x20000174

0800ad18 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ad18:	b580      	push	{r7, lr}
 800ad1a:	b082      	sub	sp, #8
 800ad1c:	af00      	add	r7, sp, #0
 800ad1e:	4603      	mov	r3, r0
 800ad20:	6039      	str	r1, [r7, #0]
 800ad22:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ad24:	79fb      	ldrb	r3, [r7, #7]
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d105      	bne.n	800ad36 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800ad2a:	683a      	ldr	r2, [r7, #0]
 800ad2c:	4907      	ldr	r1, [pc, #28]	@ (800ad4c <USBD_CDC_ProductStrDescriptor+0x34>)
 800ad2e:	4808      	ldr	r0, [pc, #32]	@ (800ad50 <USBD_CDC_ProductStrDescriptor+0x38>)
 800ad30:	f7ff fddf 	bl	800a8f2 <USBD_GetString>
 800ad34:	e004      	b.n	800ad40 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800ad36:	683a      	ldr	r2, [r7, #0]
 800ad38:	4904      	ldr	r1, [pc, #16]	@ (800ad4c <USBD_CDC_ProductStrDescriptor+0x34>)
 800ad3a:	4805      	ldr	r0, [pc, #20]	@ (800ad50 <USBD_CDC_ProductStrDescriptor+0x38>)
 800ad3c:	f7ff fdd9 	bl	800a8f2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ad40:	4b02      	ldr	r3, [pc, #8]	@ (800ad4c <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800ad42:	4618      	mov	r0, r3
 800ad44:	3708      	adds	r7, #8
 800ad46:	46bd      	mov	sp, r7
 800ad48:	bd80      	pop	{r7, pc}
 800ad4a:	bf00      	nop
 800ad4c:	20001680 	.word	0x20001680
 800ad50:	0800c608 	.word	0x0800c608

0800ad54 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ad54:	b580      	push	{r7, lr}
 800ad56:	b082      	sub	sp, #8
 800ad58:	af00      	add	r7, sp, #0
 800ad5a:	4603      	mov	r3, r0
 800ad5c:	6039      	str	r1, [r7, #0]
 800ad5e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ad60:	683a      	ldr	r2, [r7, #0]
 800ad62:	4904      	ldr	r1, [pc, #16]	@ (800ad74 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800ad64:	4804      	ldr	r0, [pc, #16]	@ (800ad78 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800ad66:	f7ff fdc4 	bl	800a8f2 <USBD_GetString>
  return USBD_StrDesc;
 800ad6a:	4b02      	ldr	r3, [pc, #8]	@ (800ad74 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800ad6c:	4618      	mov	r0, r3
 800ad6e:	3708      	adds	r7, #8
 800ad70:	46bd      	mov	sp, r7
 800ad72:	bd80      	pop	{r7, pc}
 800ad74:	20001680 	.word	0x20001680
 800ad78:	0800c620 	.word	0x0800c620

0800ad7c <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ad7c:	b580      	push	{r7, lr}
 800ad7e:	b082      	sub	sp, #8
 800ad80:	af00      	add	r7, sp, #0
 800ad82:	4603      	mov	r3, r0
 800ad84:	6039      	str	r1, [r7, #0]
 800ad86:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ad88:	683b      	ldr	r3, [r7, #0]
 800ad8a:	221a      	movs	r2, #26
 800ad8c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ad8e:	f000 f843 	bl	800ae18 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800ad92:	4b02      	ldr	r3, [pc, #8]	@ (800ad9c <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800ad94:	4618      	mov	r0, r3
 800ad96:	3708      	adds	r7, #8
 800ad98:	46bd      	mov	sp, r7
 800ad9a:	bd80      	pop	{r7, pc}
 800ad9c:	20000178 	.word	0x20000178

0800ada0 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ada0:	b580      	push	{r7, lr}
 800ada2:	b082      	sub	sp, #8
 800ada4:	af00      	add	r7, sp, #0
 800ada6:	4603      	mov	r3, r0
 800ada8:	6039      	str	r1, [r7, #0]
 800adaa:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800adac:	79fb      	ldrb	r3, [r7, #7]
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d105      	bne.n	800adbe <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800adb2:	683a      	ldr	r2, [r7, #0]
 800adb4:	4907      	ldr	r1, [pc, #28]	@ (800add4 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800adb6:	4808      	ldr	r0, [pc, #32]	@ (800add8 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800adb8:	f7ff fd9b 	bl	800a8f2 <USBD_GetString>
 800adbc:	e004      	b.n	800adc8 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800adbe:	683a      	ldr	r2, [r7, #0]
 800adc0:	4904      	ldr	r1, [pc, #16]	@ (800add4 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800adc2:	4805      	ldr	r0, [pc, #20]	@ (800add8 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800adc4:	f7ff fd95 	bl	800a8f2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800adc8:	4b02      	ldr	r3, [pc, #8]	@ (800add4 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800adca:	4618      	mov	r0, r3
 800adcc:	3708      	adds	r7, #8
 800adce:	46bd      	mov	sp, r7
 800add0:	bd80      	pop	{r7, pc}
 800add2:	bf00      	nop
 800add4:	20001680 	.word	0x20001680
 800add8:	0800c634 	.word	0x0800c634

0800addc <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800addc:	b580      	push	{r7, lr}
 800adde:	b082      	sub	sp, #8
 800ade0:	af00      	add	r7, sp, #0
 800ade2:	4603      	mov	r3, r0
 800ade4:	6039      	str	r1, [r7, #0]
 800ade6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ade8:	79fb      	ldrb	r3, [r7, #7]
 800adea:	2b00      	cmp	r3, #0
 800adec:	d105      	bne.n	800adfa <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800adee:	683a      	ldr	r2, [r7, #0]
 800adf0:	4907      	ldr	r1, [pc, #28]	@ (800ae10 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800adf2:	4808      	ldr	r0, [pc, #32]	@ (800ae14 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800adf4:	f7ff fd7d 	bl	800a8f2 <USBD_GetString>
 800adf8:	e004      	b.n	800ae04 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800adfa:	683a      	ldr	r2, [r7, #0]
 800adfc:	4904      	ldr	r1, [pc, #16]	@ (800ae10 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800adfe:	4805      	ldr	r0, [pc, #20]	@ (800ae14 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800ae00:	f7ff fd77 	bl	800a8f2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ae04:	4b02      	ldr	r3, [pc, #8]	@ (800ae10 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800ae06:	4618      	mov	r0, r3
 800ae08:	3708      	adds	r7, #8
 800ae0a:	46bd      	mov	sp, r7
 800ae0c:	bd80      	pop	{r7, pc}
 800ae0e:	bf00      	nop
 800ae10:	20001680 	.word	0x20001680
 800ae14:	0800c640 	.word	0x0800c640

0800ae18 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ae18:	b580      	push	{r7, lr}
 800ae1a:	b084      	sub	sp, #16
 800ae1c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ae1e:	4b0f      	ldr	r3, [pc, #60]	@ (800ae5c <Get_SerialNum+0x44>)
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ae24:	4b0e      	ldr	r3, [pc, #56]	@ (800ae60 <Get_SerialNum+0x48>)
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ae2a:	4b0e      	ldr	r3, [pc, #56]	@ (800ae64 <Get_SerialNum+0x4c>)
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ae30:	68fa      	ldr	r2, [r7, #12]
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	4413      	add	r3, r2
 800ae36:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d009      	beq.n	800ae52 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ae3e:	2208      	movs	r2, #8
 800ae40:	4909      	ldr	r1, [pc, #36]	@ (800ae68 <Get_SerialNum+0x50>)
 800ae42:	68f8      	ldr	r0, [r7, #12]
 800ae44:	f000 f814 	bl	800ae70 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ae48:	2204      	movs	r2, #4
 800ae4a:	4908      	ldr	r1, [pc, #32]	@ (800ae6c <Get_SerialNum+0x54>)
 800ae4c:	68b8      	ldr	r0, [r7, #8]
 800ae4e:	f000 f80f 	bl	800ae70 <IntToUnicode>
  }
}
 800ae52:	bf00      	nop
 800ae54:	3710      	adds	r7, #16
 800ae56:	46bd      	mov	sp, r7
 800ae58:	bd80      	pop	{r7, pc}
 800ae5a:	bf00      	nop
 800ae5c:	1fff7590 	.word	0x1fff7590
 800ae60:	1fff7594 	.word	0x1fff7594
 800ae64:	1fff7598 	.word	0x1fff7598
 800ae68:	2000017a 	.word	0x2000017a
 800ae6c:	2000018a 	.word	0x2000018a

0800ae70 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ae70:	b480      	push	{r7}
 800ae72:	b087      	sub	sp, #28
 800ae74:	af00      	add	r7, sp, #0
 800ae76:	60f8      	str	r0, [r7, #12]
 800ae78:	60b9      	str	r1, [r7, #8]
 800ae7a:	4613      	mov	r3, r2
 800ae7c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ae7e:	2300      	movs	r3, #0
 800ae80:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ae82:	2300      	movs	r3, #0
 800ae84:	75fb      	strb	r3, [r7, #23]
 800ae86:	e027      	b.n	800aed8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	0f1b      	lsrs	r3, r3, #28
 800ae8c:	2b09      	cmp	r3, #9
 800ae8e:	d80b      	bhi.n	800aea8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	0f1b      	lsrs	r3, r3, #28
 800ae94:	b2da      	uxtb	r2, r3
 800ae96:	7dfb      	ldrb	r3, [r7, #23]
 800ae98:	005b      	lsls	r3, r3, #1
 800ae9a:	4619      	mov	r1, r3
 800ae9c:	68bb      	ldr	r3, [r7, #8]
 800ae9e:	440b      	add	r3, r1
 800aea0:	3230      	adds	r2, #48	@ 0x30
 800aea2:	b2d2      	uxtb	r2, r2
 800aea4:	701a      	strb	r2, [r3, #0]
 800aea6:	e00a      	b.n	800aebe <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	0f1b      	lsrs	r3, r3, #28
 800aeac:	b2da      	uxtb	r2, r3
 800aeae:	7dfb      	ldrb	r3, [r7, #23]
 800aeb0:	005b      	lsls	r3, r3, #1
 800aeb2:	4619      	mov	r1, r3
 800aeb4:	68bb      	ldr	r3, [r7, #8]
 800aeb6:	440b      	add	r3, r1
 800aeb8:	3237      	adds	r2, #55	@ 0x37
 800aeba:	b2d2      	uxtb	r2, r2
 800aebc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	011b      	lsls	r3, r3, #4
 800aec2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800aec4:	7dfb      	ldrb	r3, [r7, #23]
 800aec6:	005b      	lsls	r3, r3, #1
 800aec8:	3301      	adds	r3, #1
 800aeca:	68ba      	ldr	r2, [r7, #8]
 800aecc:	4413      	add	r3, r2
 800aece:	2200      	movs	r2, #0
 800aed0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800aed2:	7dfb      	ldrb	r3, [r7, #23]
 800aed4:	3301      	adds	r3, #1
 800aed6:	75fb      	strb	r3, [r7, #23]
 800aed8:	7dfa      	ldrb	r2, [r7, #23]
 800aeda:	79fb      	ldrb	r3, [r7, #7]
 800aedc:	429a      	cmp	r2, r3
 800aede:	d3d3      	bcc.n	800ae88 <IntToUnicode+0x18>
  }
}
 800aee0:	bf00      	nop
 800aee2:	bf00      	nop
 800aee4:	371c      	adds	r7, #28
 800aee6:	46bd      	mov	sp, r7
 800aee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeec:	4770      	bx	lr
	...

0800aef0 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aef0:	b580      	push	{r7, lr}
 800aef2:	b094      	sub	sp, #80	@ 0x50
 800aef4:	af00      	add	r7, sp, #0
 800aef6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800aef8:	f107 030c 	add.w	r3, r7, #12
 800aefc:	2244      	movs	r2, #68	@ 0x44
 800aefe:	2100      	movs	r1, #0
 800af00:	4618      	mov	r0, r3
 800af02:	f000 fd03 	bl	800b90c <memset>
  if(pcdHandle->Instance==USB)
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	4a15      	ldr	r2, [pc, #84]	@ (800af60 <HAL_PCD_MspInit+0x70>)
 800af0c:	4293      	cmp	r3, r2
 800af0e:	d122      	bne.n	800af56 <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800af10:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800af14:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800af16:	2300      	movs	r3, #0
 800af18:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800af1a:	f107 030c 	add.w	r3, r7, #12
 800af1e:	4618      	mov	r0, r3
 800af20:	f7f9 fc50 	bl	80047c4 <HAL_RCCEx_PeriphCLKConfig>
 800af24:	4603      	mov	r3, r0
 800af26:	2b00      	cmp	r3, #0
 800af28:	d001      	beq.n	800af2e <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 800af2a:	f7f5 fc6c 	bl	8000806 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800af2e:	4b0d      	ldr	r3, [pc, #52]	@ (800af64 <HAL_PCD_MspInit+0x74>)
 800af30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800af32:	4a0c      	ldr	r2, [pc, #48]	@ (800af64 <HAL_PCD_MspInit+0x74>)
 800af34:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800af38:	6593      	str	r3, [r2, #88]	@ 0x58
 800af3a:	4b0a      	ldr	r3, [pc, #40]	@ (800af64 <HAL_PCD_MspInit+0x74>)
 800af3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800af3e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800af42:	60bb      	str	r3, [r7, #8]
 800af44:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800af46:	2200      	movs	r2, #0
 800af48:	2100      	movs	r1, #0
 800af4a:	2014      	movs	r0, #20
 800af4c:	f7f6 fbff 	bl	800174e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800af50:	2014      	movs	r0, #20
 800af52:	f7f6 fc16 	bl	8001782 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800af56:	bf00      	nop
 800af58:	3750      	adds	r7, #80	@ 0x50
 800af5a:	46bd      	mov	sp, r7
 800af5c:	bd80      	pop	{r7, pc}
 800af5e:	bf00      	nop
 800af60:	40005c00 	.word	0x40005c00
 800af64:	40021000 	.word	0x40021000

0800af68 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800af68:	b580      	push	{r7, lr}
 800af6a:	b082      	sub	sp, #8
 800af6c:	af00      	add	r7, sp, #0
 800af6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800af7c:	4619      	mov	r1, r3
 800af7e:	4610      	mov	r0, r2
 800af80:	f7fe fd1a 	bl	80099b8 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800af84:	bf00      	nop
 800af86:	3708      	adds	r7, #8
 800af88:	46bd      	mov	sp, r7
 800af8a:	bd80      	pop	{r7, pc}

0800af8c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800af8c:	b580      	push	{r7, lr}
 800af8e:	b082      	sub	sp, #8
 800af90:	af00      	add	r7, sp, #0
 800af92:	6078      	str	r0, [r7, #4]
 800af94:	460b      	mov	r3, r1
 800af96:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800af9e:	78fa      	ldrb	r2, [r7, #3]
 800afa0:	6879      	ldr	r1, [r7, #4]
 800afa2:	4613      	mov	r3, r2
 800afa4:	009b      	lsls	r3, r3, #2
 800afa6:	4413      	add	r3, r2
 800afa8:	00db      	lsls	r3, r3, #3
 800afaa:	440b      	add	r3, r1
 800afac:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800afb0:	681a      	ldr	r2, [r3, #0]
 800afb2:	78fb      	ldrb	r3, [r7, #3]
 800afb4:	4619      	mov	r1, r3
 800afb6:	f7fe fd54 	bl	8009a62 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800afba:	bf00      	nop
 800afbc:	3708      	adds	r7, #8
 800afbe:	46bd      	mov	sp, r7
 800afc0:	bd80      	pop	{r7, pc}

0800afc2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800afc2:	b580      	push	{r7, lr}
 800afc4:	b082      	sub	sp, #8
 800afc6:	af00      	add	r7, sp, #0
 800afc8:	6078      	str	r0, [r7, #4]
 800afca:	460b      	mov	r3, r1
 800afcc:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800afd4:	78fa      	ldrb	r2, [r7, #3]
 800afd6:	6879      	ldr	r1, [r7, #4]
 800afd8:	4613      	mov	r3, r2
 800afda:	009b      	lsls	r3, r3, #2
 800afdc:	4413      	add	r3, r2
 800afde:	00db      	lsls	r3, r3, #3
 800afe0:	440b      	add	r3, r1
 800afe2:	3324      	adds	r3, #36	@ 0x24
 800afe4:	681a      	ldr	r2, [r3, #0]
 800afe6:	78fb      	ldrb	r3, [r7, #3]
 800afe8:	4619      	mov	r1, r3
 800afea:	f7fe fd9d 	bl	8009b28 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800afee:	bf00      	nop
 800aff0:	3708      	adds	r7, #8
 800aff2:	46bd      	mov	sp, r7
 800aff4:	bd80      	pop	{r7, pc}

0800aff6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aff6:	b580      	push	{r7, lr}
 800aff8:	b082      	sub	sp, #8
 800affa:	af00      	add	r7, sp, #0
 800affc:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800b004:	4618      	mov	r0, r3
 800b006:	f7fe feb1 	bl	8009d6c <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800b00a:	bf00      	nop
 800b00c:	3708      	adds	r7, #8
 800b00e:	46bd      	mov	sp, r7
 800b010:	bd80      	pop	{r7, pc}

0800b012 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b012:	b580      	push	{r7, lr}
 800b014:	b084      	sub	sp, #16
 800b016:	af00      	add	r7, sp, #0
 800b018:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b01a:	2301      	movs	r3, #1
 800b01c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	795b      	ldrb	r3, [r3, #5]
 800b022:	2b02      	cmp	r3, #2
 800b024:	d001      	beq.n	800b02a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800b026:	f7f5 fbee 	bl	8000806 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800b030:	7bfa      	ldrb	r2, [r7, #15]
 800b032:	4611      	mov	r1, r2
 800b034:	4618      	mov	r0, r3
 800b036:	f7fe fe5b 	bl	8009cf0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800b040:	4618      	mov	r0, r3
 800b042:	f7fe fe07 	bl	8009c54 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800b046:	bf00      	nop
 800b048:	3710      	adds	r7, #16
 800b04a:	46bd      	mov	sp, r7
 800b04c:	bd80      	pop	{r7, pc}
	...

0800b050 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b050:	b580      	push	{r7, lr}
 800b052:	b082      	sub	sp, #8
 800b054:	af00      	add	r7, sp, #0
 800b056:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800b05e:	4618      	mov	r0, r3
 800b060:	f7fe fe56 	bl	8009d10 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	7a5b      	ldrb	r3, [r3, #9]
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d005      	beq.n	800b078 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b06c:	4b04      	ldr	r3, [pc, #16]	@ (800b080 <HAL_PCD_SuspendCallback+0x30>)
 800b06e:	691b      	ldr	r3, [r3, #16]
 800b070:	4a03      	ldr	r2, [pc, #12]	@ (800b080 <HAL_PCD_SuspendCallback+0x30>)
 800b072:	f043 0306 	orr.w	r3, r3, #6
 800b076:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800b078:	bf00      	nop
 800b07a:	3708      	adds	r7, #8
 800b07c:	46bd      	mov	sp, r7
 800b07e:	bd80      	pop	{r7, pc}
 800b080:	e000ed00 	.word	0xe000ed00

0800b084 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b084:	b580      	push	{r7, lr}
 800b086:	b082      	sub	sp, #8
 800b088:	af00      	add	r7, sp, #0
 800b08a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	7a5b      	ldrb	r3, [r3, #9]
 800b090:	2b00      	cmp	r3, #0
 800b092:	d007      	beq.n	800b0a4 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b094:	4b08      	ldr	r3, [pc, #32]	@ (800b0b8 <HAL_PCD_ResumeCallback+0x34>)
 800b096:	691b      	ldr	r3, [r3, #16]
 800b098:	4a07      	ldr	r2, [pc, #28]	@ (800b0b8 <HAL_PCD_ResumeCallback+0x34>)
 800b09a:	f023 0306 	bic.w	r3, r3, #6
 800b09e:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800b0a0:	f000 f9f8 	bl	800b494 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800b0aa:	4618      	mov	r0, r3
 800b0ac:	f7fe fe46 	bl	8009d3c <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800b0b0:	bf00      	nop
 800b0b2:	3708      	adds	r7, #8
 800b0b4:	46bd      	mov	sp, r7
 800b0b6:	bd80      	pop	{r7, pc}
 800b0b8:	e000ed00 	.word	0xe000ed00

0800b0bc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b0bc:	b580      	push	{r7, lr}
 800b0be:	b082      	sub	sp, #8
 800b0c0:	af00      	add	r7, sp, #0
 800b0c2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800b0c4:	4a2b      	ldr	r2, [pc, #172]	@ (800b174 <USBD_LL_Init+0xb8>)
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	4a29      	ldr	r2, [pc, #164]	@ (800b174 <USBD_LL_Init+0xb8>)
 800b0d0:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4

  hpcd_USB_FS.Instance = USB;
 800b0d4:	4b27      	ldr	r3, [pc, #156]	@ (800b174 <USBD_LL_Init+0xb8>)
 800b0d6:	4a28      	ldr	r2, [pc, #160]	@ (800b178 <USBD_LL_Init+0xbc>)
 800b0d8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800b0da:	4b26      	ldr	r3, [pc, #152]	@ (800b174 <USBD_LL_Init+0xb8>)
 800b0dc:	2208      	movs	r2, #8
 800b0de:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800b0e0:	4b24      	ldr	r3, [pc, #144]	@ (800b174 <USBD_LL_Init+0xb8>)
 800b0e2:	2202      	movs	r2, #2
 800b0e4:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800b0e6:	4b23      	ldr	r3, [pc, #140]	@ (800b174 <USBD_LL_Init+0xb8>)
 800b0e8:	2202      	movs	r2, #2
 800b0ea:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800b0ec:	4b21      	ldr	r3, [pc, #132]	@ (800b174 <USBD_LL_Init+0xb8>)
 800b0ee:	2200      	movs	r2, #0
 800b0f0:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800b0f2:	4b20      	ldr	r3, [pc, #128]	@ (800b174 <USBD_LL_Init+0xb8>)
 800b0f4:	2200      	movs	r2, #0
 800b0f6:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800b0f8:	4b1e      	ldr	r3, [pc, #120]	@ (800b174 <USBD_LL_Init+0xb8>)
 800b0fa:	2200      	movs	r2, #0
 800b0fc:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800b0fe:	4b1d      	ldr	r3, [pc, #116]	@ (800b174 <USBD_LL_Init+0xb8>)
 800b100:	2200      	movs	r2, #0
 800b102:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800b104:	481b      	ldr	r0, [pc, #108]	@ (800b174 <USBD_LL_Init+0xb8>)
 800b106:	f7f7 f87a 	bl	80021fe <HAL_PCD_Init>
 800b10a:	4603      	mov	r3, r0
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d001      	beq.n	800b114 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800b110:	f7f5 fb79 	bl	8000806 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800b11a:	2318      	movs	r3, #24
 800b11c:	2200      	movs	r2, #0
 800b11e:	2100      	movs	r1, #0
 800b120:	f7f8 fd01 	bl	8003b26 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800b12a:	2358      	movs	r3, #88	@ 0x58
 800b12c:	2200      	movs	r2, #0
 800b12e:	2180      	movs	r1, #128	@ 0x80
 800b130:	f7f8 fcf9 	bl	8003b26 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800b13a:	23c0      	movs	r3, #192	@ 0xc0
 800b13c:	2200      	movs	r2, #0
 800b13e:	2181      	movs	r1, #129	@ 0x81
 800b140:	f7f8 fcf1 	bl	8003b26 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800b14a:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800b14e:	2200      	movs	r2, #0
 800b150:	2101      	movs	r1, #1
 800b152:	f7f8 fce8 	bl	8003b26 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800b15c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b160:	2200      	movs	r2, #0
 800b162:	2182      	movs	r1, #130	@ 0x82
 800b164:	f7f8 fcdf 	bl	8003b26 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800b168:	2300      	movs	r3, #0
}
 800b16a:	4618      	mov	r0, r3
 800b16c:	3708      	adds	r7, #8
 800b16e:	46bd      	mov	sp, r7
 800b170:	bd80      	pop	{r7, pc}
 800b172:	bf00      	nop
 800b174:	20001880 	.word	0x20001880
 800b178:	40005c00 	.word	0x40005c00

0800b17c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b17c:	b580      	push	{r7, lr}
 800b17e:	b084      	sub	sp, #16
 800b180:	af00      	add	r7, sp, #0
 800b182:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b184:	2300      	movs	r3, #0
 800b186:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b188:	2300      	movs	r3, #0
 800b18a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800b192:	4618      	mov	r0, r3
 800b194:	f7f7 f901 	bl	800239a <HAL_PCD_Start>
 800b198:	4603      	mov	r3, r0
 800b19a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b19c:	7bfb      	ldrb	r3, [r7, #15]
 800b19e:	4618      	mov	r0, r3
 800b1a0:	f000 f97e 	bl	800b4a0 <USBD_Get_USB_Status>
 800b1a4:	4603      	mov	r3, r0
 800b1a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b1a8:	7bbb      	ldrb	r3, [r7, #14]
}
 800b1aa:	4618      	mov	r0, r3
 800b1ac:	3710      	adds	r7, #16
 800b1ae:	46bd      	mov	sp, r7
 800b1b0:	bd80      	pop	{r7, pc}

0800b1b2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b1b2:	b580      	push	{r7, lr}
 800b1b4:	b084      	sub	sp, #16
 800b1b6:	af00      	add	r7, sp, #0
 800b1b8:	6078      	str	r0, [r7, #4]
 800b1ba:	4608      	mov	r0, r1
 800b1bc:	4611      	mov	r1, r2
 800b1be:	461a      	mov	r2, r3
 800b1c0:	4603      	mov	r3, r0
 800b1c2:	70fb      	strb	r3, [r7, #3]
 800b1c4:	460b      	mov	r3, r1
 800b1c6:	70bb      	strb	r3, [r7, #2]
 800b1c8:	4613      	mov	r3, r2
 800b1ca:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b1cc:	2300      	movs	r3, #0
 800b1ce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b1d0:	2300      	movs	r3, #0
 800b1d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800b1da:	78bb      	ldrb	r3, [r7, #2]
 800b1dc:	883a      	ldrh	r2, [r7, #0]
 800b1de:	78f9      	ldrb	r1, [r7, #3]
 800b1e0:	f7f7 fa48 	bl	8002674 <HAL_PCD_EP_Open>
 800b1e4:	4603      	mov	r3, r0
 800b1e6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b1e8:	7bfb      	ldrb	r3, [r7, #15]
 800b1ea:	4618      	mov	r0, r3
 800b1ec:	f000 f958 	bl	800b4a0 <USBD_Get_USB_Status>
 800b1f0:	4603      	mov	r3, r0
 800b1f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b1f4:	7bbb      	ldrb	r3, [r7, #14]
}
 800b1f6:	4618      	mov	r0, r3
 800b1f8:	3710      	adds	r7, #16
 800b1fa:	46bd      	mov	sp, r7
 800b1fc:	bd80      	pop	{r7, pc}

0800b1fe <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b1fe:	b580      	push	{r7, lr}
 800b200:	b084      	sub	sp, #16
 800b202:	af00      	add	r7, sp, #0
 800b204:	6078      	str	r0, [r7, #4]
 800b206:	460b      	mov	r3, r1
 800b208:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b20a:	2300      	movs	r3, #0
 800b20c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b20e:	2300      	movs	r3, #0
 800b210:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800b218:	78fa      	ldrb	r2, [r7, #3]
 800b21a:	4611      	mov	r1, r2
 800b21c:	4618      	mov	r0, r3
 800b21e:	f7f7 fa88 	bl	8002732 <HAL_PCD_EP_Close>
 800b222:	4603      	mov	r3, r0
 800b224:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b226:	7bfb      	ldrb	r3, [r7, #15]
 800b228:	4618      	mov	r0, r3
 800b22a:	f000 f939 	bl	800b4a0 <USBD_Get_USB_Status>
 800b22e:	4603      	mov	r3, r0
 800b230:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b232:	7bbb      	ldrb	r3, [r7, #14]
}
 800b234:	4618      	mov	r0, r3
 800b236:	3710      	adds	r7, #16
 800b238:	46bd      	mov	sp, r7
 800b23a:	bd80      	pop	{r7, pc}

0800b23c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b23c:	b580      	push	{r7, lr}
 800b23e:	b084      	sub	sp, #16
 800b240:	af00      	add	r7, sp, #0
 800b242:	6078      	str	r0, [r7, #4]
 800b244:	460b      	mov	r3, r1
 800b246:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b248:	2300      	movs	r3, #0
 800b24a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b24c:	2300      	movs	r3, #0
 800b24e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800b256:	78fa      	ldrb	r2, [r7, #3]
 800b258:	4611      	mov	r1, r2
 800b25a:	4618      	mov	r0, r3
 800b25c:	f7f7 fb31 	bl	80028c2 <HAL_PCD_EP_SetStall>
 800b260:	4603      	mov	r3, r0
 800b262:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b264:	7bfb      	ldrb	r3, [r7, #15]
 800b266:	4618      	mov	r0, r3
 800b268:	f000 f91a 	bl	800b4a0 <USBD_Get_USB_Status>
 800b26c:	4603      	mov	r3, r0
 800b26e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b270:	7bbb      	ldrb	r3, [r7, #14]
}
 800b272:	4618      	mov	r0, r3
 800b274:	3710      	adds	r7, #16
 800b276:	46bd      	mov	sp, r7
 800b278:	bd80      	pop	{r7, pc}

0800b27a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b27a:	b580      	push	{r7, lr}
 800b27c:	b084      	sub	sp, #16
 800b27e:	af00      	add	r7, sp, #0
 800b280:	6078      	str	r0, [r7, #4]
 800b282:	460b      	mov	r3, r1
 800b284:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b286:	2300      	movs	r3, #0
 800b288:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b28a:	2300      	movs	r3, #0
 800b28c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800b294:	78fa      	ldrb	r2, [r7, #3]
 800b296:	4611      	mov	r1, r2
 800b298:	4618      	mov	r0, r3
 800b29a:	f7f7 fb64 	bl	8002966 <HAL_PCD_EP_ClrStall>
 800b29e:	4603      	mov	r3, r0
 800b2a0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b2a2:	7bfb      	ldrb	r3, [r7, #15]
 800b2a4:	4618      	mov	r0, r3
 800b2a6:	f000 f8fb 	bl	800b4a0 <USBD_Get_USB_Status>
 800b2aa:	4603      	mov	r3, r0
 800b2ac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b2ae:	7bbb      	ldrb	r3, [r7, #14]
}
 800b2b0:	4618      	mov	r0, r3
 800b2b2:	3710      	adds	r7, #16
 800b2b4:	46bd      	mov	sp, r7
 800b2b6:	bd80      	pop	{r7, pc}

0800b2b8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b2b8:	b480      	push	{r7}
 800b2ba:	b085      	sub	sp, #20
 800b2bc:	af00      	add	r7, sp, #0
 800b2be:	6078      	str	r0, [r7, #4]
 800b2c0:	460b      	mov	r3, r1
 800b2c2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800b2ca:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b2cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	da0b      	bge.n	800b2ec <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b2d4:	78fb      	ldrb	r3, [r7, #3]
 800b2d6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b2da:	68f9      	ldr	r1, [r7, #12]
 800b2dc:	4613      	mov	r3, r2
 800b2de:	009b      	lsls	r3, r3, #2
 800b2e0:	4413      	add	r3, r2
 800b2e2:	00db      	lsls	r3, r3, #3
 800b2e4:	440b      	add	r3, r1
 800b2e6:	3312      	adds	r3, #18
 800b2e8:	781b      	ldrb	r3, [r3, #0]
 800b2ea:	e00b      	b.n	800b304 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b2ec:	78fb      	ldrb	r3, [r7, #3]
 800b2ee:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b2f2:	68f9      	ldr	r1, [r7, #12]
 800b2f4:	4613      	mov	r3, r2
 800b2f6:	009b      	lsls	r3, r3, #2
 800b2f8:	4413      	add	r3, r2
 800b2fa:	00db      	lsls	r3, r3, #3
 800b2fc:	440b      	add	r3, r1
 800b2fe:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800b302:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b304:	4618      	mov	r0, r3
 800b306:	3714      	adds	r7, #20
 800b308:	46bd      	mov	sp, r7
 800b30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b30e:	4770      	bx	lr

0800b310 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b310:	b580      	push	{r7, lr}
 800b312:	b084      	sub	sp, #16
 800b314:	af00      	add	r7, sp, #0
 800b316:	6078      	str	r0, [r7, #4]
 800b318:	460b      	mov	r3, r1
 800b31a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b31c:	2300      	movs	r3, #0
 800b31e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b320:	2300      	movs	r3, #0
 800b322:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800b32a:	78fa      	ldrb	r2, [r7, #3]
 800b32c:	4611      	mov	r1, r2
 800b32e:	4618      	mov	r0, r3
 800b330:	f7f7 f97c 	bl	800262c <HAL_PCD_SetAddress>
 800b334:	4603      	mov	r3, r0
 800b336:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b338:	7bfb      	ldrb	r3, [r7, #15]
 800b33a:	4618      	mov	r0, r3
 800b33c:	f000 f8b0 	bl	800b4a0 <USBD_Get_USB_Status>
 800b340:	4603      	mov	r3, r0
 800b342:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b344:	7bbb      	ldrb	r3, [r7, #14]
}
 800b346:	4618      	mov	r0, r3
 800b348:	3710      	adds	r7, #16
 800b34a:	46bd      	mov	sp, r7
 800b34c:	bd80      	pop	{r7, pc}

0800b34e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b34e:	b580      	push	{r7, lr}
 800b350:	b086      	sub	sp, #24
 800b352:	af00      	add	r7, sp, #0
 800b354:	60f8      	str	r0, [r7, #12]
 800b356:	607a      	str	r2, [r7, #4]
 800b358:	603b      	str	r3, [r7, #0]
 800b35a:	460b      	mov	r3, r1
 800b35c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b35e:	2300      	movs	r3, #0
 800b360:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b362:	2300      	movs	r3, #0
 800b364:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800b36c:	7af9      	ldrb	r1, [r7, #11]
 800b36e:	683b      	ldr	r3, [r7, #0]
 800b370:	687a      	ldr	r2, [r7, #4]
 800b372:	f7f7 fa6f 	bl	8002854 <HAL_PCD_EP_Transmit>
 800b376:	4603      	mov	r3, r0
 800b378:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b37a:	7dfb      	ldrb	r3, [r7, #23]
 800b37c:	4618      	mov	r0, r3
 800b37e:	f000 f88f 	bl	800b4a0 <USBD_Get_USB_Status>
 800b382:	4603      	mov	r3, r0
 800b384:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b386:	7dbb      	ldrb	r3, [r7, #22]
}
 800b388:	4618      	mov	r0, r3
 800b38a:	3718      	adds	r7, #24
 800b38c:	46bd      	mov	sp, r7
 800b38e:	bd80      	pop	{r7, pc}

0800b390 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b390:	b580      	push	{r7, lr}
 800b392:	b086      	sub	sp, #24
 800b394:	af00      	add	r7, sp, #0
 800b396:	60f8      	str	r0, [r7, #12]
 800b398:	607a      	str	r2, [r7, #4]
 800b39a:	603b      	str	r3, [r7, #0]
 800b39c:	460b      	mov	r3, r1
 800b39e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b3a0:	2300      	movs	r3, #0
 800b3a2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b3a4:	2300      	movs	r3, #0
 800b3a6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800b3ae:	7af9      	ldrb	r1, [r7, #11]
 800b3b0:	683b      	ldr	r3, [r7, #0]
 800b3b2:	687a      	ldr	r2, [r7, #4]
 800b3b4:	f7f7 fa05 	bl	80027c2 <HAL_PCD_EP_Receive>
 800b3b8:	4603      	mov	r3, r0
 800b3ba:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b3bc:	7dfb      	ldrb	r3, [r7, #23]
 800b3be:	4618      	mov	r0, r3
 800b3c0:	f000 f86e 	bl	800b4a0 <USBD_Get_USB_Status>
 800b3c4:	4603      	mov	r3, r0
 800b3c6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b3c8:	7dbb      	ldrb	r3, [r7, #22]
}
 800b3ca:	4618      	mov	r0, r3
 800b3cc:	3718      	adds	r7, #24
 800b3ce:	46bd      	mov	sp, r7
 800b3d0:	bd80      	pop	{r7, pc}

0800b3d2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b3d2:	b580      	push	{r7, lr}
 800b3d4:	b082      	sub	sp, #8
 800b3d6:	af00      	add	r7, sp, #0
 800b3d8:	6078      	str	r0, [r7, #4]
 800b3da:	460b      	mov	r3, r1
 800b3dc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800b3e4:	78fa      	ldrb	r2, [r7, #3]
 800b3e6:	4611      	mov	r1, r2
 800b3e8:	4618      	mov	r0, r3
 800b3ea:	f7f7 fa1b 	bl	8002824 <HAL_PCD_EP_GetRxCount>
 800b3ee:	4603      	mov	r3, r0
}
 800b3f0:	4618      	mov	r0, r3
 800b3f2:	3708      	adds	r7, #8
 800b3f4:	46bd      	mov	sp, r7
 800b3f6:	bd80      	pop	{r7, pc}

0800b3f8 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b3f8:	b580      	push	{r7, lr}
 800b3fa:	b082      	sub	sp, #8
 800b3fc:	af00      	add	r7, sp, #0
 800b3fe:	6078      	str	r0, [r7, #4]
 800b400:	460b      	mov	r3, r1
 800b402:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800b404:	78fb      	ldrb	r3, [r7, #3]
 800b406:	2b00      	cmp	r3, #0
 800b408:	d002      	beq.n	800b410 <HAL_PCDEx_LPM_Callback+0x18>
 800b40a:	2b01      	cmp	r3, #1
 800b40c:	d013      	beq.n	800b436 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800b40e:	e023      	b.n	800b458 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	7a5b      	ldrb	r3, [r3, #9]
 800b414:	2b00      	cmp	r3, #0
 800b416:	d007      	beq.n	800b428 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800b418:	f000 f83c 	bl	800b494 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b41c:	4b10      	ldr	r3, [pc, #64]	@ (800b460 <HAL_PCDEx_LPM_Callback+0x68>)
 800b41e:	691b      	ldr	r3, [r3, #16]
 800b420:	4a0f      	ldr	r2, [pc, #60]	@ (800b460 <HAL_PCDEx_LPM_Callback+0x68>)
 800b422:	f023 0306 	bic.w	r3, r3, #6
 800b426:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800b42e:	4618      	mov	r0, r3
 800b430:	f7fe fc84 	bl	8009d3c <USBD_LL_Resume>
    break;
 800b434:	e010      	b.n	800b458 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800b43c:	4618      	mov	r0, r3
 800b43e:	f7fe fc67 	bl	8009d10 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	7a5b      	ldrb	r3, [r3, #9]
 800b446:	2b00      	cmp	r3, #0
 800b448:	d005      	beq.n	800b456 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b44a:	4b05      	ldr	r3, [pc, #20]	@ (800b460 <HAL_PCDEx_LPM_Callback+0x68>)
 800b44c:	691b      	ldr	r3, [r3, #16]
 800b44e:	4a04      	ldr	r2, [pc, #16]	@ (800b460 <HAL_PCDEx_LPM_Callback+0x68>)
 800b450:	f043 0306 	orr.w	r3, r3, #6
 800b454:	6113      	str	r3, [r2, #16]
    break;
 800b456:	bf00      	nop
}
 800b458:	bf00      	nop
 800b45a:	3708      	adds	r7, #8
 800b45c:	46bd      	mov	sp, r7
 800b45e:	bd80      	pop	{r7, pc}
 800b460:	e000ed00 	.word	0xe000ed00

0800b464 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b464:	b480      	push	{r7}
 800b466:	b083      	sub	sp, #12
 800b468:	af00      	add	r7, sp, #0
 800b46a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b46c:	4b03      	ldr	r3, [pc, #12]	@ (800b47c <USBD_static_malloc+0x18>)
}
 800b46e:	4618      	mov	r0, r3
 800b470:	370c      	adds	r7, #12
 800b472:	46bd      	mov	sp, r7
 800b474:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b478:	4770      	bx	lr
 800b47a:	bf00      	nop
 800b47c:	20001b5c 	.word	0x20001b5c

0800b480 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b480:	b480      	push	{r7}
 800b482:	b083      	sub	sp, #12
 800b484:	af00      	add	r7, sp, #0
 800b486:	6078      	str	r0, [r7, #4]

}
 800b488:	bf00      	nop
 800b48a:	370c      	adds	r7, #12
 800b48c:	46bd      	mov	sp, r7
 800b48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b492:	4770      	bx	lr

0800b494 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800b494:	b580      	push	{r7, lr}
 800b496:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800b498:	f7f5 f96a 	bl	8000770 <SystemClock_Config>
}
 800b49c:	bf00      	nop
 800b49e:	bd80      	pop	{r7, pc}

0800b4a0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b4a0:	b480      	push	{r7}
 800b4a2:	b085      	sub	sp, #20
 800b4a4:	af00      	add	r7, sp, #0
 800b4a6:	4603      	mov	r3, r0
 800b4a8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b4aa:	2300      	movs	r3, #0
 800b4ac:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b4ae:	79fb      	ldrb	r3, [r7, #7]
 800b4b0:	2b03      	cmp	r3, #3
 800b4b2:	d817      	bhi.n	800b4e4 <USBD_Get_USB_Status+0x44>
 800b4b4:	a201      	add	r2, pc, #4	@ (adr r2, 800b4bc <USBD_Get_USB_Status+0x1c>)
 800b4b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4ba:	bf00      	nop
 800b4bc:	0800b4cd 	.word	0x0800b4cd
 800b4c0:	0800b4d3 	.word	0x0800b4d3
 800b4c4:	0800b4d9 	.word	0x0800b4d9
 800b4c8:	0800b4df 	.word	0x0800b4df
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b4cc:	2300      	movs	r3, #0
 800b4ce:	73fb      	strb	r3, [r7, #15]
    break;
 800b4d0:	e00b      	b.n	800b4ea <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b4d2:	2303      	movs	r3, #3
 800b4d4:	73fb      	strb	r3, [r7, #15]
    break;
 800b4d6:	e008      	b.n	800b4ea <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b4d8:	2301      	movs	r3, #1
 800b4da:	73fb      	strb	r3, [r7, #15]
    break;
 800b4dc:	e005      	b.n	800b4ea <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b4de:	2303      	movs	r3, #3
 800b4e0:	73fb      	strb	r3, [r7, #15]
    break;
 800b4e2:	e002      	b.n	800b4ea <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b4e4:	2303      	movs	r3, #3
 800b4e6:	73fb      	strb	r3, [r7, #15]
    break;
 800b4e8:	bf00      	nop
  }
  return usb_status;
 800b4ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4ec:	4618      	mov	r0, r3
 800b4ee:	3714      	adds	r7, #20
 800b4f0:	46bd      	mov	sp, r7
 800b4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f6:	4770      	bx	lr

0800b4f8 <std>:
 800b4f8:	2300      	movs	r3, #0
 800b4fa:	b510      	push	{r4, lr}
 800b4fc:	4604      	mov	r4, r0
 800b4fe:	e9c0 3300 	strd	r3, r3, [r0]
 800b502:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b506:	6083      	str	r3, [r0, #8]
 800b508:	8181      	strh	r1, [r0, #12]
 800b50a:	6643      	str	r3, [r0, #100]	@ 0x64
 800b50c:	81c2      	strh	r2, [r0, #14]
 800b50e:	6183      	str	r3, [r0, #24]
 800b510:	4619      	mov	r1, r3
 800b512:	2208      	movs	r2, #8
 800b514:	305c      	adds	r0, #92	@ 0x5c
 800b516:	f000 f9f9 	bl	800b90c <memset>
 800b51a:	4b0d      	ldr	r3, [pc, #52]	@ (800b550 <std+0x58>)
 800b51c:	6263      	str	r3, [r4, #36]	@ 0x24
 800b51e:	4b0d      	ldr	r3, [pc, #52]	@ (800b554 <std+0x5c>)
 800b520:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b522:	4b0d      	ldr	r3, [pc, #52]	@ (800b558 <std+0x60>)
 800b524:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b526:	4b0d      	ldr	r3, [pc, #52]	@ (800b55c <std+0x64>)
 800b528:	6323      	str	r3, [r4, #48]	@ 0x30
 800b52a:	4b0d      	ldr	r3, [pc, #52]	@ (800b560 <std+0x68>)
 800b52c:	6224      	str	r4, [r4, #32]
 800b52e:	429c      	cmp	r4, r3
 800b530:	d006      	beq.n	800b540 <std+0x48>
 800b532:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b536:	4294      	cmp	r4, r2
 800b538:	d002      	beq.n	800b540 <std+0x48>
 800b53a:	33d0      	adds	r3, #208	@ 0xd0
 800b53c:	429c      	cmp	r4, r3
 800b53e:	d105      	bne.n	800b54c <std+0x54>
 800b540:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b544:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b548:	f000 ba58 	b.w	800b9fc <__retarget_lock_init_recursive>
 800b54c:	bd10      	pop	{r4, pc}
 800b54e:	bf00      	nop
 800b550:	0800b75d 	.word	0x0800b75d
 800b554:	0800b77f 	.word	0x0800b77f
 800b558:	0800b7b7 	.word	0x0800b7b7
 800b55c:	0800b7db 	.word	0x0800b7db
 800b560:	20001d7c 	.word	0x20001d7c

0800b564 <stdio_exit_handler>:
 800b564:	4a02      	ldr	r2, [pc, #8]	@ (800b570 <stdio_exit_handler+0xc>)
 800b566:	4903      	ldr	r1, [pc, #12]	@ (800b574 <stdio_exit_handler+0x10>)
 800b568:	4803      	ldr	r0, [pc, #12]	@ (800b578 <stdio_exit_handler+0x14>)
 800b56a:	f000 b869 	b.w	800b640 <_fwalk_sglue>
 800b56e:	bf00      	nop
 800b570:	20000194 	.word	0x20000194
 800b574:	0800c2b9 	.word	0x0800c2b9
 800b578:	200001a4 	.word	0x200001a4

0800b57c <cleanup_stdio>:
 800b57c:	6841      	ldr	r1, [r0, #4]
 800b57e:	4b0c      	ldr	r3, [pc, #48]	@ (800b5b0 <cleanup_stdio+0x34>)
 800b580:	4299      	cmp	r1, r3
 800b582:	b510      	push	{r4, lr}
 800b584:	4604      	mov	r4, r0
 800b586:	d001      	beq.n	800b58c <cleanup_stdio+0x10>
 800b588:	f000 fe96 	bl	800c2b8 <_fflush_r>
 800b58c:	68a1      	ldr	r1, [r4, #8]
 800b58e:	4b09      	ldr	r3, [pc, #36]	@ (800b5b4 <cleanup_stdio+0x38>)
 800b590:	4299      	cmp	r1, r3
 800b592:	d002      	beq.n	800b59a <cleanup_stdio+0x1e>
 800b594:	4620      	mov	r0, r4
 800b596:	f000 fe8f 	bl	800c2b8 <_fflush_r>
 800b59a:	68e1      	ldr	r1, [r4, #12]
 800b59c:	4b06      	ldr	r3, [pc, #24]	@ (800b5b8 <cleanup_stdio+0x3c>)
 800b59e:	4299      	cmp	r1, r3
 800b5a0:	d004      	beq.n	800b5ac <cleanup_stdio+0x30>
 800b5a2:	4620      	mov	r0, r4
 800b5a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b5a8:	f000 be86 	b.w	800c2b8 <_fflush_r>
 800b5ac:	bd10      	pop	{r4, pc}
 800b5ae:	bf00      	nop
 800b5b0:	20001d7c 	.word	0x20001d7c
 800b5b4:	20001de4 	.word	0x20001de4
 800b5b8:	20001e4c 	.word	0x20001e4c

0800b5bc <global_stdio_init.part.0>:
 800b5bc:	b510      	push	{r4, lr}
 800b5be:	4b0b      	ldr	r3, [pc, #44]	@ (800b5ec <global_stdio_init.part.0+0x30>)
 800b5c0:	4c0b      	ldr	r4, [pc, #44]	@ (800b5f0 <global_stdio_init.part.0+0x34>)
 800b5c2:	4a0c      	ldr	r2, [pc, #48]	@ (800b5f4 <global_stdio_init.part.0+0x38>)
 800b5c4:	601a      	str	r2, [r3, #0]
 800b5c6:	4620      	mov	r0, r4
 800b5c8:	2200      	movs	r2, #0
 800b5ca:	2104      	movs	r1, #4
 800b5cc:	f7ff ff94 	bl	800b4f8 <std>
 800b5d0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b5d4:	2201      	movs	r2, #1
 800b5d6:	2109      	movs	r1, #9
 800b5d8:	f7ff ff8e 	bl	800b4f8 <std>
 800b5dc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b5e0:	2202      	movs	r2, #2
 800b5e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b5e6:	2112      	movs	r1, #18
 800b5e8:	f7ff bf86 	b.w	800b4f8 <std>
 800b5ec:	20001eb4 	.word	0x20001eb4
 800b5f0:	20001d7c 	.word	0x20001d7c
 800b5f4:	0800b565 	.word	0x0800b565

0800b5f8 <__sfp_lock_acquire>:
 800b5f8:	4801      	ldr	r0, [pc, #4]	@ (800b600 <__sfp_lock_acquire+0x8>)
 800b5fa:	f000 ba00 	b.w	800b9fe <__retarget_lock_acquire_recursive>
 800b5fe:	bf00      	nop
 800b600:	20001ebd 	.word	0x20001ebd

0800b604 <__sfp_lock_release>:
 800b604:	4801      	ldr	r0, [pc, #4]	@ (800b60c <__sfp_lock_release+0x8>)
 800b606:	f000 b9fb 	b.w	800ba00 <__retarget_lock_release_recursive>
 800b60a:	bf00      	nop
 800b60c:	20001ebd 	.word	0x20001ebd

0800b610 <__sinit>:
 800b610:	b510      	push	{r4, lr}
 800b612:	4604      	mov	r4, r0
 800b614:	f7ff fff0 	bl	800b5f8 <__sfp_lock_acquire>
 800b618:	6a23      	ldr	r3, [r4, #32]
 800b61a:	b11b      	cbz	r3, 800b624 <__sinit+0x14>
 800b61c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b620:	f7ff bff0 	b.w	800b604 <__sfp_lock_release>
 800b624:	4b04      	ldr	r3, [pc, #16]	@ (800b638 <__sinit+0x28>)
 800b626:	6223      	str	r3, [r4, #32]
 800b628:	4b04      	ldr	r3, [pc, #16]	@ (800b63c <__sinit+0x2c>)
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d1f5      	bne.n	800b61c <__sinit+0xc>
 800b630:	f7ff ffc4 	bl	800b5bc <global_stdio_init.part.0>
 800b634:	e7f2      	b.n	800b61c <__sinit+0xc>
 800b636:	bf00      	nop
 800b638:	0800b57d 	.word	0x0800b57d
 800b63c:	20001eb4 	.word	0x20001eb4

0800b640 <_fwalk_sglue>:
 800b640:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b644:	4607      	mov	r7, r0
 800b646:	4688      	mov	r8, r1
 800b648:	4614      	mov	r4, r2
 800b64a:	2600      	movs	r6, #0
 800b64c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b650:	f1b9 0901 	subs.w	r9, r9, #1
 800b654:	d505      	bpl.n	800b662 <_fwalk_sglue+0x22>
 800b656:	6824      	ldr	r4, [r4, #0]
 800b658:	2c00      	cmp	r4, #0
 800b65a:	d1f7      	bne.n	800b64c <_fwalk_sglue+0xc>
 800b65c:	4630      	mov	r0, r6
 800b65e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b662:	89ab      	ldrh	r3, [r5, #12]
 800b664:	2b01      	cmp	r3, #1
 800b666:	d907      	bls.n	800b678 <_fwalk_sglue+0x38>
 800b668:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b66c:	3301      	adds	r3, #1
 800b66e:	d003      	beq.n	800b678 <_fwalk_sglue+0x38>
 800b670:	4629      	mov	r1, r5
 800b672:	4638      	mov	r0, r7
 800b674:	47c0      	blx	r8
 800b676:	4306      	orrs	r6, r0
 800b678:	3568      	adds	r5, #104	@ 0x68
 800b67a:	e7e9      	b.n	800b650 <_fwalk_sglue+0x10>

0800b67c <iprintf>:
 800b67c:	b40f      	push	{r0, r1, r2, r3}
 800b67e:	b507      	push	{r0, r1, r2, lr}
 800b680:	4906      	ldr	r1, [pc, #24]	@ (800b69c <iprintf+0x20>)
 800b682:	ab04      	add	r3, sp, #16
 800b684:	6808      	ldr	r0, [r1, #0]
 800b686:	f853 2b04 	ldr.w	r2, [r3], #4
 800b68a:	6881      	ldr	r1, [r0, #8]
 800b68c:	9301      	str	r3, [sp, #4]
 800b68e:	f000 fae9 	bl	800bc64 <_vfiprintf_r>
 800b692:	b003      	add	sp, #12
 800b694:	f85d eb04 	ldr.w	lr, [sp], #4
 800b698:	b004      	add	sp, #16
 800b69a:	4770      	bx	lr
 800b69c:	200001a0 	.word	0x200001a0

0800b6a0 <_puts_r>:
 800b6a0:	6a03      	ldr	r3, [r0, #32]
 800b6a2:	b570      	push	{r4, r5, r6, lr}
 800b6a4:	6884      	ldr	r4, [r0, #8]
 800b6a6:	4605      	mov	r5, r0
 800b6a8:	460e      	mov	r6, r1
 800b6aa:	b90b      	cbnz	r3, 800b6b0 <_puts_r+0x10>
 800b6ac:	f7ff ffb0 	bl	800b610 <__sinit>
 800b6b0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b6b2:	07db      	lsls	r3, r3, #31
 800b6b4:	d405      	bmi.n	800b6c2 <_puts_r+0x22>
 800b6b6:	89a3      	ldrh	r3, [r4, #12]
 800b6b8:	0598      	lsls	r0, r3, #22
 800b6ba:	d402      	bmi.n	800b6c2 <_puts_r+0x22>
 800b6bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b6be:	f000 f99e 	bl	800b9fe <__retarget_lock_acquire_recursive>
 800b6c2:	89a3      	ldrh	r3, [r4, #12]
 800b6c4:	0719      	lsls	r1, r3, #28
 800b6c6:	d502      	bpl.n	800b6ce <_puts_r+0x2e>
 800b6c8:	6923      	ldr	r3, [r4, #16]
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d135      	bne.n	800b73a <_puts_r+0x9a>
 800b6ce:	4621      	mov	r1, r4
 800b6d0:	4628      	mov	r0, r5
 800b6d2:	f000 f8c5 	bl	800b860 <__swsetup_r>
 800b6d6:	b380      	cbz	r0, 800b73a <_puts_r+0x9a>
 800b6d8:	f04f 35ff 	mov.w	r5, #4294967295
 800b6dc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b6de:	07da      	lsls	r2, r3, #31
 800b6e0:	d405      	bmi.n	800b6ee <_puts_r+0x4e>
 800b6e2:	89a3      	ldrh	r3, [r4, #12]
 800b6e4:	059b      	lsls	r3, r3, #22
 800b6e6:	d402      	bmi.n	800b6ee <_puts_r+0x4e>
 800b6e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b6ea:	f000 f989 	bl	800ba00 <__retarget_lock_release_recursive>
 800b6ee:	4628      	mov	r0, r5
 800b6f0:	bd70      	pop	{r4, r5, r6, pc}
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	da04      	bge.n	800b700 <_puts_r+0x60>
 800b6f6:	69a2      	ldr	r2, [r4, #24]
 800b6f8:	429a      	cmp	r2, r3
 800b6fa:	dc17      	bgt.n	800b72c <_puts_r+0x8c>
 800b6fc:	290a      	cmp	r1, #10
 800b6fe:	d015      	beq.n	800b72c <_puts_r+0x8c>
 800b700:	6823      	ldr	r3, [r4, #0]
 800b702:	1c5a      	adds	r2, r3, #1
 800b704:	6022      	str	r2, [r4, #0]
 800b706:	7019      	strb	r1, [r3, #0]
 800b708:	68a3      	ldr	r3, [r4, #8]
 800b70a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b70e:	3b01      	subs	r3, #1
 800b710:	60a3      	str	r3, [r4, #8]
 800b712:	2900      	cmp	r1, #0
 800b714:	d1ed      	bne.n	800b6f2 <_puts_r+0x52>
 800b716:	2b00      	cmp	r3, #0
 800b718:	da11      	bge.n	800b73e <_puts_r+0x9e>
 800b71a:	4622      	mov	r2, r4
 800b71c:	210a      	movs	r1, #10
 800b71e:	4628      	mov	r0, r5
 800b720:	f000 f85f 	bl	800b7e2 <__swbuf_r>
 800b724:	3001      	adds	r0, #1
 800b726:	d0d7      	beq.n	800b6d8 <_puts_r+0x38>
 800b728:	250a      	movs	r5, #10
 800b72a:	e7d7      	b.n	800b6dc <_puts_r+0x3c>
 800b72c:	4622      	mov	r2, r4
 800b72e:	4628      	mov	r0, r5
 800b730:	f000 f857 	bl	800b7e2 <__swbuf_r>
 800b734:	3001      	adds	r0, #1
 800b736:	d1e7      	bne.n	800b708 <_puts_r+0x68>
 800b738:	e7ce      	b.n	800b6d8 <_puts_r+0x38>
 800b73a:	3e01      	subs	r6, #1
 800b73c:	e7e4      	b.n	800b708 <_puts_r+0x68>
 800b73e:	6823      	ldr	r3, [r4, #0]
 800b740:	1c5a      	adds	r2, r3, #1
 800b742:	6022      	str	r2, [r4, #0]
 800b744:	220a      	movs	r2, #10
 800b746:	701a      	strb	r2, [r3, #0]
 800b748:	e7ee      	b.n	800b728 <_puts_r+0x88>
	...

0800b74c <puts>:
 800b74c:	4b02      	ldr	r3, [pc, #8]	@ (800b758 <puts+0xc>)
 800b74e:	4601      	mov	r1, r0
 800b750:	6818      	ldr	r0, [r3, #0]
 800b752:	f7ff bfa5 	b.w	800b6a0 <_puts_r>
 800b756:	bf00      	nop
 800b758:	200001a0 	.word	0x200001a0

0800b75c <__sread>:
 800b75c:	b510      	push	{r4, lr}
 800b75e:	460c      	mov	r4, r1
 800b760:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b764:	f000 f8fc 	bl	800b960 <_read_r>
 800b768:	2800      	cmp	r0, #0
 800b76a:	bfab      	itete	ge
 800b76c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b76e:	89a3      	ldrhlt	r3, [r4, #12]
 800b770:	181b      	addge	r3, r3, r0
 800b772:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b776:	bfac      	ite	ge
 800b778:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b77a:	81a3      	strhlt	r3, [r4, #12]
 800b77c:	bd10      	pop	{r4, pc}

0800b77e <__swrite>:
 800b77e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b782:	461f      	mov	r7, r3
 800b784:	898b      	ldrh	r3, [r1, #12]
 800b786:	05db      	lsls	r3, r3, #23
 800b788:	4605      	mov	r5, r0
 800b78a:	460c      	mov	r4, r1
 800b78c:	4616      	mov	r6, r2
 800b78e:	d505      	bpl.n	800b79c <__swrite+0x1e>
 800b790:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b794:	2302      	movs	r3, #2
 800b796:	2200      	movs	r2, #0
 800b798:	f000 f8d0 	bl	800b93c <_lseek_r>
 800b79c:	89a3      	ldrh	r3, [r4, #12]
 800b79e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b7a2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b7a6:	81a3      	strh	r3, [r4, #12]
 800b7a8:	4632      	mov	r2, r6
 800b7aa:	463b      	mov	r3, r7
 800b7ac:	4628      	mov	r0, r5
 800b7ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b7b2:	f000 b8e7 	b.w	800b984 <_write_r>

0800b7b6 <__sseek>:
 800b7b6:	b510      	push	{r4, lr}
 800b7b8:	460c      	mov	r4, r1
 800b7ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b7be:	f000 f8bd 	bl	800b93c <_lseek_r>
 800b7c2:	1c43      	adds	r3, r0, #1
 800b7c4:	89a3      	ldrh	r3, [r4, #12]
 800b7c6:	bf15      	itete	ne
 800b7c8:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b7ca:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b7ce:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b7d2:	81a3      	strheq	r3, [r4, #12]
 800b7d4:	bf18      	it	ne
 800b7d6:	81a3      	strhne	r3, [r4, #12]
 800b7d8:	bd10      	pop	{r4, pc}

0800b7da <__sclose>:
 800b7da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b7de:	f000 b89d 	b.w	800b91c <_close_r>

0800b7e2 <__swbuf_r>:
 800b7e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7e4:	460e      	mov	r6, r1
 800b7e6:	4614      	mov	r4, r2
 800b7e8:	4605      	mov	r5, r0
 800b7ea:	b118      	cbz	r0, 800b7f4 <__swbuf_r+0x12>
 800b7ec:	6a03      	ldr	r3, [r0, #32]
 800b7ee:	b90b      	cbnz	r3, 800b7f4 <__swbuf_r+0x12>
 800b7f0:	f7ff ff0e 	bl	800b610 <__sinit>
 800b7f4:	69a3      	ldr	r3, [r4, #24]
 800b7f6:	60a3      	str	r3, [r4, #8]
 800b7f8:	89a3      	ldrh	r3, [r4, #12]
 800b7fa:	071a      	lsls	r2, r3, #28
 800b7fc:	d501      	bpl.n	800b802 <__swbuf_r+0x20>
 800b7fe:	6923      	ldr	r3, [r4, #16]
 800b800:	b943      	cbnz	r3, 800b814 <__swbuf_r+0x32>
 800b802:	4621      	mov	r1, r4
 800b804:	4628      	mov	r0, r5
 800b806:	f000 f82b 	bl	800b860 <__swsetup_r>
 800b80a:	b118      	cbz	r0, 800b814 <__swbuf_r+0x32>
 800b80c:	f04f 37ff 	mov.w	r7, #4294967295
 800b810:	4638      	mov	r0, r7
 800b812:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b814:	6823      	ldr	r3, [r4, #0]
 800b816:	6922      	ldr	r2, [r4, #16]
 800b818:	1a98      	subs	r0, r3, r2
 800b81a:	6963      	ldr	r3, [r4, #20]
 800b81c:	b2f6      	uxtb	r6, r6
 800b81e:	4283      	cmp	r3, r0
 800b820:	4637      	mov	r7, r6
 800b822:	dc05      	bgt.n	800b830 <__swbuf_r+0x4e>
 800b824:	4621      	mov	r1, r4
 800b826:	4628      	mov	r0, r5
 800b828:	f000 fd46 	bl	800c2b8 <_fflush_r>
 800b82c:	2800      	cmp	r0, #0
 800b82e:	d1ed      	bne.n	800b80c <__swbuf_r+0x2a>
 800b830:	68a3      	ldr	r3, [r4, #8]
 800b832:	3b01      	subs	r3, #1
 800b834:	60a3      	str	r3, [r4, #8]
 800b836:	6823      	ldr	r3, [r4, #0]
 800b838:	1c5a      	adds	r2, r3, #1
 800b83a:	6022      	str	r2, [r4, #0]
 800b83c:	701e      	strb	r6, [r3, #0]
 800b83e:	6962      	ldr	r2, [r4, #20]
 800b840:	1c43      	adds	r3, r0, #1
 800b842:	429a      	cmp	r2, r3
 800b844:	d004      	beq.n	800b850 <__swbuf_r+0x6e>
 800b846:	89a3      	ldrh	r3, [r4, #12]
 800b848:	07db      	lsls	r3, r3, #31
 800b84a:	d5e1      	bpl.n	800b810 <__swbuf_r+0x2e>
 800b84c:	2e0a      	cmp	r6, #10
 800b84e:	d1df      	bne.n	800b810 <__swbuf_r+0x2e>
 800b850:	4621      	mov	r1, r4
 800b852:	4628      	mov	r0, r5
 800b854:	f000 fd30 	bl	800c2b8 <_fflush_r>
 800b858:	2800      	cmp	r0, #0
 800b85a:	d0d9      	beq.n	800b810 <__swbuf_r+0x2e>
 800b85c:	e7d6      	b.n	800b80c <__swbuf_r+0x2a>
	...

0800b860 <__swsetup_r>:
 800b860:	b538      	push	{r3, r4, r5, lr}
 800b862:	4b29      	ldr	r3, [pc, #164]	@ (800b908 <__swsetup_r+0xa8>)
 800b864:	4605      	mov	r5, r0
 800b866:	6818      	ldr	r0, [r3, #0]
 800b868:	460c      	mov	r4, r1
 800b86a:	b118      	cbz	r0, 800b874 <__swsetup_r+0x14>
 800b86c:	6a03      	ldr	r3, [r0, #32]
 800b86e:	b90b      	cbnz	r3, 800b874 <__swsetup_r+0x14>
 800b870:	f7ff fece 	bl	800b610 <__sinit>
 800b874:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b878:	0719      	lsls	r1, r3, #28
 800b87a:	d422      	bmi.n	800b8c2 <__swsetup_r+0x62>
 800b87c:	06da      	lsls	r2, r3, #27
 800b87e:	d407      	bmi.n	800b890 <__swsetup_r+0x30>
 800b880:	2209      	movs	r2, #9
 800b882:	602a      	str	r2, [r5, #0]
 800b884:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b888:	81a3      	strh	r3, [r4, #12]
 800b88a:	f04f 30ff 	mov.w	r0, #4294967295
 800b88e:	e033      	b.n	800b8f8 <__swsetup_r+0x98>
 800b890:	0758      	lsls	r0, r3, #29
 800b892:	d512      	bpl.n	800b8ba <__swsetup_r+0x5a>
 800b894:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b896:	b141      	cbz	r1, 800b8aa <__swsetup_r+0x4a>
 800b898:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b89c:	4299      	cmp	r1, r3
 800b89e:	d002      	beq.n	800b8a6 <__swsetup_r+0x46>
 800b8a0:	4628      	mov	r0, r5
 800b8a2:	f000 f8bd 	bl	800ba20 <_free_r>
 800b8a6:	2300      	movs	r3, #0
 800b8a8:	6363      	str	r3, [r4, #52]	@ 0x34
 800b8aa:	89a3      	ldrh	r3, [r4, #12]
 800b8ac:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b8b0:	81a3      	strh	r3, [r4, #12]
 800b8b2:	2300      	movs	r3, #0
 800b8b4:	6063      	str	r3, [r4, #4]
 800b8b6:	6923      	ldr	r3, [r4, #16]
 800b8b8:	6023      	str	r3, [r4, #0]
 800b8ba:	89a3      	ldrh	r3, [r4, #12]
 800b8bc:	f043 0308 	orr.w	r3, r3, #8
 800b8c0:	81a3      	strh	r3, [r4, #12]
 800b8c2:	6923      	ldr	r3, [r4, #16]
 800b8c4:	b94b      	cbnz	r3, 800b8da <__swsetup_r+0x7a>
 800b8c6:	89a3      	ldrh	r3, [r4, #12]
 800b8c8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b8cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b8d0:	d003      	beq.n	800b8da <__swsetup_r+0x7a>
 800b8d2:	4621      	mov	r1, r4
 800b8d4:	4628      	mov	r0, r5
 800b8d6:	f000 fd3d 	bl	800c354 <__smakebuf_r>
 800b8da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b8de:	f013 0201 	ands.w	r2, r3, #1
 800b8e2:	d00a      	beq.n	800b8fa <__swsetup_r+0x9a>
 800b8e4:	2200      	movs	r2, #0
 800b8e6:	60a2      	str	r2, [r4, #8]
 800b8e8:	6962      	ldr	r2, [r4, #20]
 800b8ea:	4252      	negs	r2, r2
 800b8ec:	61a2      	str	r2, [r4, #24]
 800b8ee:	6922      	ldr	r2, [r4, #16]
 800b8f0:	b942      	cbnz	r2, 800b904 <__swsetup_r+0xa4>
 800b8f2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b8f6:	d1c5      	bne.n	800b884 <__swsetup_r+0x24>
 800b8f8:	bd38      	pop	{r3, r4, r5, pc}
 800b8fa:	0799      	lsls	r1, r3, #30
 800b8fc:	bf58      	it	pl
 800b8fe:	6962      	ldrpl	r2, [r4, #20]
 800b900:	60a2      	str	r2, [r4, #8]
 800b902:	e7f4      	b.n	800b8ee <__swsetup_r+0x8e>
 800b904:	2000      	movs	r0, #0
 800b906:	e7f7      	b.n	800b8f8 <__swsetup_r+0x98>
 800b908:	200001a0 	.word	0x200001a0

0800b90c <memset>:
 800b90c:	4402      	add	r2, r0
 800b90e:	4603      	mov	r3, r0
 800b910:	4293      	cmp	r3, r2
 800b912:	d100      	bne.n	800b916 <memset+0xa>
 800b914:	4770      	bx	lr
 800b916:	f803 1b01 	strb.w	r1, [r3], #1
 800b91a:	e7f9      	b.n	800b910 <memset+0x4>

0800b91c <_close_r>:
 800b91c:	b538      	push	{r3, r4, r5, lr}
 800b91e:	4d06      	ldr	r5, [pc, #24]	@ (800b938 <_close_r+0x1c>)
 800b920:	2300      	movs	r3, #0
 800b922:	4604      	mov	r4, r0
 800b924:	4608      	mov	r0, r1
 800b926:	602b      	str	r3, [r5, #0]
 800b928:	f7f5 fa1b 	bl	8000d62 <_close>
 800b92c:	1c43      	adds	r3, r0, #1
 800b92e:	d102      	bne.n	800b936 <_close_r+0x1a>
 800b930:	682b      	ldr	r3, [r5, #0]
 800b932:	b103      	cbz	r3, 800b936 <_close_r+0x1a>
 800b934:	6023      	str	r3, [r4, #0]
 800b936:	bd38      	pop	{r3, r4, r5, pc}
 800b938:	20001eb8 	.word	0x20001eb8

0800b93c <_lseek_r>:
 800b93c:	b538      	push	{r3, r4, r5, lr}
 800b93e:	4d07      	ldr	r5, [pc, #28]	@ (800b95c <_lseek_r+0x20>)
 800b940:	4604      	mov	r4, r0
 800b942:	4608      	mov	r0, r1
 800b944:	4611      	mov	r1, r2
 800b946:	2200      	movs	r2, #0
 800b948:	602a      	str	r2, [r5, #0]
 800b94a:	461a      	mov	r2, r3
 800b94c:	f7f5 fa30 	bl	8000db0 <_lseek>
 800b950:	1c43      	adds	r3, r0, #1
 800b952:	d102      	bne.n	800b95a <_lseek_r+0x1e>
 800b954:	682b      	ldr	r3, [r5, #0]
 800b956:	b103      	cbz	r3, 800b95a <_lseek_r+0x1e>
 800b958:	6023      	str	r3, [r4, #0]
 800b95a:	bd38      	pop	{r3, r4, r5, pc}
 800b95c:	20001eb8 	.word	0x20001eb8

0800b960 <_read_r>:
 800b960:	b538      	push	{r3, r4, r5, lr}
 800b962:	4d07      	ldr	r5, [pc, #28]	@ (800b980 <_read_r+0x20>)
 800b964:	4604      	mov	r4, r0
 800b966:	4608      	mov	r0, r1
 800b968:	4611      	mov	r1, r2
 800b96a:	2200      	movs	r2, #0
 800b96c:	602a      	str	r2, [r5, #0]
 800b96e:	461a      	mov	r2, r3
 800b970:	f7f5 f9da 	bl	8000d28 <_read>
 800b974:	1c43      	adds	r3, r0, #1
 800b976:	d102      	bne.n	800b97e <_read_r+0x1e>
 800b978:	682b      	ldr	r3, [r5, #0]
 800b97a:	b103      	cbz	r3, 800b97e <_read_r+0x1e>
 800b97c:	6023      	str	r3, [r4, #0]
 800b97e:	bd38      	pop	{r3, r4, r5, pc}
 800b980:	20001eb8 	.word	0x20001eb8

0800b984 <_write_r>:
 800b984:	b538      	push	{r3, r4, r5, lr}
 800b986:	4d07      	ldr	r5, [pc, #28]	@ (800b9a4 <_write_r+0x20>)
 800b988:	4604      	mov	r4, r0
 800b98a:	4608      	mov	r0, r1
 800b98c:	4611      	mov	r1, r2
 800b98e:	2200      	movs	r2, #0
 800b990:	602a      	str	r2, [r5, #0]
 800b992:	461a      	mov	r2, r3
 800b994:	f7f5 fbb8 	bl	8001108 <_write>
 800b998:	1c43      	adds	r3, r0, #1
 800b99a:	d102      	bne.n	800b9a2 <_write_r+0x1e>
 800b99c:	682b      	ldr	r3, [r5, #0]
 800b99e:	b103      	cbz	r3, 800b9a2 <_write_r+0x1e>
 800b9a0:	6023      	str	r3, [r4, #0]
 800b9a2:	bd38      	pop	{r3, r4, r5, pc}
 800b9a4:	20001eb8 	.word	0x20001eb8

0800b9a8 <__errno>:
 800b9a8:	4b01      	ldr	r3, [pc, #4]	@ (800b9b0 <__errno+0x8>)
 800b9aa:	6818      	ldr	r0, [r3, #0]
 800b9ac:	4770      	bx	lr
 800b9ae:	bf00      	nop
 800b9b0:	200001a0 	.word	0x200001a0

0800b9b4 <__libc_init_array>:
 800b9b4:	b570      	push	{r4, r5, r6, lr}
 800b9b6:	4d0d      	ldr	r5, [pc, #52]	@ (800b9ec <__libc_init_array+0x38>)
 800b9b8:	4c0d      	ldr	r4, [pc, #52]	@ (800b9f0 <__libc_init_array+0x3c>)
 800b9ba:	1b64      	subs	r4, r4, r5
 800b9bc:	10a4      	asrs	r4, r4, #2
 800b9be:	2600      	movs	r6, #0
 800b9c0:	42a6      	cmp	r6, r4
 800b9c2:	d109      	bne.n	800b9d8 <__libc_init_array+0x24>
 800b9c4:	4d0b      	ldr	r5, [pc, #44]	@ (800b9f4 <__libc_init_array+0x40>)
 800b9c6:	4c0c      	ldr	r4, [pc, #48]	@ (800b9f8 <__libc_init_array+0x44>)
 800b9c8:	f000 fd32 	bl	800c430 <_init>
 800b9cc:	1b64      	subs	r4, r4, r5
 800b9ce:	10a4      	asrs	r4, r4, #2
 800b9d0:	2600      	movs	r6, #0
 800b9d2:	42a6      	cmp	r6, r4
 800b9d4:	d105      	bne.n	800b9e2 <__libc_init_array+0x2e>
 800b9d6:	bd70      	pop	{r4, r5, r6, pc}
 800b9d8:	f855 3b04 	ldr.w	r3, [r5], #4
 800b9dc:	4798      	blx	r3
 800b9de:	3601      	adds	r6, #1
 800b9e0:	e7ee      	b.n	800b9c0 <__libc_init_array+0xc>
 800b9e2:	f855 3b04 	ldr.w	r3, [r5], #4
 800b9e6:	4798      	blx	r3
 800b9e8:	3601      	adds	r6, #1
 800b9ea:	e7f2      	b.n	800b9d2 <__libc_init_array+0x1e>
 800b9ec:	0800c6cc 	.word	0x0800c6cc
 800b9f0:	0800c6cc 	.word	0x0800c6cc
 800b9f4:	0800c6cc 	.word	0x0800c6cc
 800b9f8:	0800c6d0 	.word	0x0800c6d0

0800b9fc <__retarget_lock_init_recursive>:
 800b9fc:	4770      	bx	lr

0800b9fe <__retarget_lock_acquire_recursive>:
 800b9fe:	4770      	bx	lr

0800ba00 <__retarget_lock_release_recursive>:
 800ba00:	4770      	bx	lr

0800ba02 <memcpy>:
 800ba02:	440a      	add	r2, r1
 800ba04:	4291      	cmp	r1, r2
 800ba06:	f100 33ff 	add.w	r3, r0, #4294967295
 800ba0a:	d100      	bne.n	800ba0e <memcpy+0xc>
 800ba0c:	4770      	bx	lr
 800ba0e:	b510      	push	{r4, lr}
 800ba10:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ba14:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ba18:	4291      	cmp	r1, r2
 800ba1a:	d1f9      	bne.n	800ba10 <memcpy+0xe>
 800ba1c:	bd10      	pop	{r4, pc}
	...

0800ba20 <_free_r>:
 800ba20:	b538      	push	{r3, r4, r5, lr}
 800ba22:	4605      	mov	r5, r0
 800ba24:	2900      	cmp	r1, #0
 800ba26:	d041      	beq.n	800baac <_free_r+0x8c>
 800ba28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ba2c:	1f0c      	subs	r4, r1, #4
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	bfb8      	it	lt
 800ba32:	18e4      	addlt	r4, r4, r3
 800ba34:	f000 f8e0 	bl	800bbf8 <__malloc_lock>
 800ba38:	4a1d      	ldr	r2, [pc, #116]	@ (800bab0 <_free_r+0x90>)
 800ba3a:	6813      	ldr	r3, [r2, #0]
 800ba3c:	b933      	cbnz	r3, 800ba4c <_free_r+0x2c>
 800ba3e:	6063      	str	r3, [r4, #4]
 800ba40:	6014      	str	r4, [r2, #0]
 800ba42:	4628      	mov	r0, r5
 800ba44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ba48:	f000 b8dc 	b.w	800bc04 <__malloc_unlock>
 800ba4c:	42a3      	cmp	r3, r4
 800ba4e:	d908      	bls.n	800ba62 <_free_r+0x42>
 800ba50:	6820      	ldr	r0, [r4, #0]
 800ba52:	1821      	adds	r1, r4, r0
 800ba54:	428b      	cmp	r3, r1
 800ba56:	bf01      	itttt	eq
 800ba58:	6819      	ldreq	r1, [r3, #0]
 800ba5a:	685b      	ldreq	r3, [r3, #4]
 800ba5c:	1809      	addeq	r1, r1, r0
 800ba5e:	6021      	streq	r1, [r4, #0]
 800ba60:	e7ed      	b.n	800ba3e <_free_r+0x1e>
 800ba62:	461a      	mov	r2, r3
 800ba64:	685b      	ldr	r3, [r3, #4]
 800ba66:	b10b      	cbz	r3, 800ba6c <_free_r+0x4c>
 800ba68:	42a3      	cmp	r3, r4
 800ba6a:	d9fa      	bls.n	800ba62 <_free_r+0x42>
 800ba6c:	6811      	ldr	r1, [r2, #0]
 800ba6e:	1850      	adds	r0, r2, r1
 800ba70:	42a0      	cmp	r0, r4
 800ba72:	d10b      	bne.n	800ba8c <_free_r+0x6c>
 800ba74:	6820      	ldr	r0, [r4, #0]
 800ba76:	4401      	add	r1, r0
 800ba78:	1850      	adds	r0, r2, r1
 800ba7a:	4283      	cmp	r3, r0
 800ba7c:	6011      	str	r1, [r2, #0]
 800ba7e:	d1e0      	bne.n	800ba42 <_free_r+0x22>
 800ba80:	6818      	ldr	r0, [r3, #0]
 800ba82:	685b      	ldr	r3, [r3, #4]
 800ba84:	6053      	str	r3, [r2, #4]
 800ba86:	4408      	add	r0, r1
 800ba88:	6010      	str	r0, [r2, #0]
 800ba8a:	e7da      	b.n	800ba42 <_free_r+0x22>
 800ba8c:	d902      	bls.n	800ba94 <_free_r+0x74>
 800ba8e:	230c      	movs	r3, #12
 800ba90:	602b      	str	r3, [r5, #0]
 800ba92:	e7d6      	b.n	800ba42 <_free_r+0x22>
 800ba94:	6820      	ldr	r0, [r4, #0]
 800ba96:	1821      	adds	r1, r4, r0
 800ba98:	428b      	cmp	r3, r1
 800ba9a:	bf04      	itt	eq
 800ba9c:	6819      	ldreq	r1, [r3, #0]
 800ba9e:	685b      	ldreq	r3, [r3, #4]
 800baa0:	6063      	str	r3, [r4, #4]
 800baa2:	bf04      	itt	eq
 800baa4:	1809      	addeq	r1, r1, r0
 800baa6:	6021      	streq	r1, [r4, #0]
 800baa8:	6054      	str	r4, [r2, #4]
 800baaa:	e7ca      	b.n	800ba42 <_free_r+0x22>
 800baac:	bd38      	pop	{r3, r4, r5, pc}
 800baae:	bf00      	nop
 800bab0:	20001ec4 	.word	0x20001ec4

0800bab4 <sbrk_aligned>:
 800bab4:	b570      	push	{r4, r5, r6, lr}
 800bab6:	4e0f      	ldr	r6, [pc, #60]	@ (800baf4 <sbrk_aligned+0x40>)
 800bab8:	460c      	mov	r4, r1
 800baba:	6831      	ldr	r1, [r6, #0]
 800babc:	4605      	mov	r5, r0
 800babe:	b911      	cbnz	r1, 800bac6 <sbrk_aligned+0x12>
 800bac0:	f000 fca6 	bl	800c410 <_sbrk_r>
 800bac4:	6030      	str	r0, [r6, #0]
 800bac6:	4621      	mov	r1, r4
 800bac8:	4628      	mov	r0, r5
 800baca:	f000 fca1 	bl	800c410 <_sbrk_r>
 800bace:	1c43      	adds	r3, r0, #1
 800bad0:	d103      	bne.n	800bada <sbrk_aligned+0x26>
 800bad2:	f04f 34ff 	mov.w	r4, #4294967295
 800bad6:	4620      	mov	r0, r4
 800bad8:	bd70      	pop	{r4, r5, r6, pc}
 800bada:	1cc4      	adds	r4, r0, #3
 800badc:	f024 0403 	bic.w	r4, r4, #3
 800bae0:	42a0      	cmp	r0, r4
 800bae2:	d0f8      	beq.n	800bad6 <sbrk_aligned+0x22>
 800bae4:	1a21      	subs	r1, r4, r0
 800bae6:	4628      	mov	r0, r5
 800bae8:	f000 fc92 	bl	800c410 <_sbrk_r>
 800baec:	3001      	adds	r0, #1
 800baee:	d1f2      	bne.n	800bad6 <sbrk_aligned+0x22>
 800baf0:	e7ef      	b.n	800bad2 <sbrk_aligned+0x1e>
 800baf2:	bf00      	nop
 800baf4:	20001ec0 	.word	0x20001ec0

0800baf8 <_malloc_r>:
 800baf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bafc:	1ccd      	adds	r5, r1, #3
 800bafe:	f025 0503 	bic.w	r5, r5, #3
 800bb02:	3508      	adds	r5, #8
 800bb04:	2d0c      	cmp	r5, #12
 800bb06:	bf38      	it	cc
 800bb08:	250c      	movcc	r5, #12
 800bb0a:	2d00      	cmp	r5, #0
 800bb0c:	4606      	mov	r6, r0
 800bb0e:	db01      	blt.n	800bb14 <_malloc_r+0x1c>
 800bb10:	42a9      	cmp	r1, r5
 800bb12:	d904      	bls.n	800bb1e <_malloc_r+0x26>
 800bb14:	230c      	movs	r3, #12
 800bb16:	6033      	str	r3, [r6, #0]
 800bb18:	2000      	movs	r0, #0
 800bb1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bb1e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800bbf4 <_malloc_r+0xfc>
 800bb22:	f000 f869 	bl	800bbf8 <__malloc_lock>
 800bb26:	f8d8 3000 	ldr.w	r3, [r8]
 800bb2a:	461c      	mov	r4, r3
 800bb2c:	bb44      	cbnz	r4, 800bb80 <_malloc_r+0x88>
 800bb2e:	4629      	mov	r1, r5
 800bb30:	4630      	mov	r0, r6
 800bb32:	f7ff ffbf 	bl	800bab4 <sbrk_aligned>
 800bb36:	1c43      	adds	r3, r0, #1
 800bb38:	4604      	mov	r4, r0
 800bb3a:	d158      	bne.n	800bbee <_malloc_r+0xf6>
 800bb3c:	f8d8 4000 	ldr.w	r4, [r8]
 800bb40:	4627      	mov	r7, r4
 800bb42:	2f00      	cmp	r7, #0
 800bb44:	d143      	bne.n	800bbce <_malloc_r+0xd6>
 800bb46:	2c00      	cmp	r4, #0
 800bb48:	d04b      	beq.n	800bbe2 <_malloc_r+0xea>
 800bb4a:	6823      	ldr	r3, [r4, #0]
 800bb4c:	4639      	mov	r1, r7
 800bb4e:	4630      	mov	r0, r6
 800bb50:	eb04 0903 	add.w	r9, r4, r3
 800bb54:	f000 fc5c 	bl	800c410 <_sbrk_r>
 800bb58:	4581      	cmp	r9, r0
 800bb5a:	d142      	bne.n	800bbe2 <_malloc_r+0xea>
 800bb5c:	6821      	ldr	r1, [r4, #0]
 800bb5e:	1a6d      	subs	r5, r5, r1
 800bb60:	4629      	mov	r1, r5
 800bb62:	4630      	mov	r0, r6
 800bb64:	f7ff ffa6 	bl	800bab4 <sbrk_aligned>
 800bb68:	3001      	adds	r0, #1
 800bb6a:	d03a      	beq.n	800bbe2 <_malloc_r+0xea>
 800bb6c:	6823      	ldr	r3, [r4, #0]
 800bb6e:	442b      	add	r3, r5
 800bb70:	6023      	str	r3, [r4, #0]
 800bb72:	f8d8 3000 	ldr.w	r3, [r8]
 800bb76:	685a      	ldr	r2, [r3, #4]
 800bb78:	bb62      	cbnz	r2, 800bbd4 <_malloc_r+0xdc>
 800bb7a:	f8c8 7000 	str.w	r7, [r8]
 800bb7e:	e00f      	b.n	800bba0 <_malloc_r+0xa8>
 800bb80:	6822      	ldr	r2, [r4, #0]
 800bb82:	1b52      	subs	r2, r2, r5
 800bb84:	d420      	bmi.n	800bbc8 <_malloc_r+0xd0>
 800bb86:	2a0b      	cmp	r2, #11
 800bb88:	d917      	bls.n	800bbba <_malloc_r+0xc2>
 800bb8a:	1961      	adds	r1, r4, r5
 800bb8c:	42a3      	cmp	r3, r4
 800bb8e:	6025      	str	r5, [r4, #0]
 800bb90:	bf18      	it	ne
 800bb92:	6059      	strne	r1, [r3, #4]
 800bb94:	6863      	ldr	r3, [r4, #4]
 800bb96:	bf08      	it	eq
 800bb98:	f8c8 1000 	streq.w	r1, [r8]
 800bb9c:	5162      	str	r2, [r4, r5]
 800bb9e:	604b      	str	r3, [r1, #4]
 800bba0:	4630      	mov	r0, r6
 800bba2:	f000 f82f 	bl	800bc04 <__malloc_unlock>
 800bba6:	f104 000b 	add.w	r0, r4, #11
 800bbaa:	1d23      	adds	r3, r4, #4
 800bbac:	f020 0007 	bic.w	r0, r0, #7
 800bbb0:	1ac2      	subs	r2, r0, r3
 800bbb2:	bf1c      	itt	ne
 800bbb4:	1a1b      	subne	r3, r3, r0
 800bbb6:	50a3      	strne	r3, [r4, r2]
 800bbb8:	e7af      	b.n	800bb1a <_malloc_r+0x22>
 800bbba:	6862      	ldr	r2, [r4, #4]
 800bbbc:	42a3      	cmp	r3, r4
 800bbbe:	bf0c      	ite	eq
 800bbc0:	f8c8 2000 	streq.w	r2, [r8]
 800bbc4:	605a      	strne	r2, [r3, #4]
 800bbc6:	e7eb      	b.n	800bba0 <_malloc_r+0xa8>
 800bbc8:	4623      	mov	r3, r4
 800bbca:	6864      	ldr	r4, [r4, #4]
 800bbcc:	e7ae      	b.n	800bb2c <_malloc_r+0x34>
 800bbce:	463c      	mov	r4, r7
 800bbd0:	687f      	ldr	r7, [r7, #4]
 800bbd2:	e7b6      	b.n	800bb42 <_malloc_r+0x4a>
 800bbd4:	461a      	mov	r2, r3
 800bbd6:	685b      	ldr	r3, [r3, #4]
 800bbd8:	42a3      	cmp	r3, r4
 800bbda:	d1fb      	bne.n	800bbd4 <_malloc_r+0xdc>
 800bbdc:	2300      	movs	r3, #0
 800bbde:	6053      	str	r3, [r2, #4]
 800bbe0:	e7de      	b.n	800bba0 <_malloc_r+0xa8>
 800bbe2:	230c      	movs	r3, #12
 800bbe4:	6033      	str	r3, [r6, #0]
 800bbe6:	4630      	mov	r0, r6
 800bbe8:	f000 f80c 	bl	800bc04 <__malloc_unlock>
 800bbec:	e794      	b.n	800bb18 <_malloc_r+0x20>
 800bbee:	6005      	str	r5, [r0, #0]
 800bbf0:	e7d6      	b.n	800bba0 <_malloc_r+0xa8>
 800bbf2:	bf00      	nop
 800bbf4:	20001ec4 	.word	0x20001ec4

0800bbf8 <__malloc_lock>:
 800bbf8:	4801      	ldr	r0, [pc, #4]	@ (800bc00 <__malloc_lock+0x8>)
 800bbfa:	f7ff bf00 	b.w	800b9fe <__retarget_lock_acquire_recursive>
 800bbfe:	bf00      	nop
 800bc00:	20001ebc 	.word	0x20001ebc

0800bc04 <__malloc_unlock>:
 800bc04:	4801      	ldr	r0, [pc, #4]	@ (800bc0c <__malloc_unlock+0x8>)
 800bc06:	f7ff befb 	b.w	800ba00 <__retarget_lock_release_recursive>
 800bc0a:	bf00      	nop
 800bc0c:	20001ebc 	.word	0x20001ebc

0800bc10 <__sfputc_r>:
 800bc10:	6893      	ldr	r3, [r2, #8]
 800bc12:	3b01      	subs	r3, #1
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	b410      	push	{r4}
 800bc18:	6093      	str	r3, [r2, #8]
 800bc1a:	da08      	bge.n	800bc2e <__sfputc_r+0x1e>
 800bc1c:	6994      	ldr	r4, [r2, #24]
 800bc1e:	42a3      	cmp	r3, r4
 800bc20:	db01      	blt.n	800bc26 <__sfputc_r+0x16>
 800bc22:	290a      	cmp	r1, #10
 800bc24:	d103      	bne.n	800bc2e <__sfputc_r+0x1e>
 800bc26:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bc2a:	f7ff bdda 	b.w	800b7e2 <__swbuf_r>
 800bc2e:	6813      	ldr	r3, [r2, #0]
 800bc30:	1c58      	adds	r0, r3, #1
 800bc32:	6010      	str	r0, [r2, #0]
 800bc34:	7019      	strb	r1, [r3, #0]
 800bc36:	4608      	mov	r0, r1
 800bc38:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bc3c:	4770      	bx	lr

0800bc3e <__sfputs_r>:
 800bc3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc40:	4606      	mov	r6, r0
 800bc42:	460f      	mov	r7, r1
 800bc44:	4614      	mov	r4, r2
 800bc46:	18d5      	adds	r5, r2, r3
 800bc48:	42ac      	cmp	r4, r5
 800bc4a:	d101      	bne.n	800bc50 <__sfputs_r+0x12>
 800bc4c:	2000      	movs	r0, #0
 800bc4e:	e007      	b.n	800bc60 <__sfputs_r+0x22>
 800bc50:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc54:	463a      	mov	r2, r7
 800bc56:	4630      	mov	r0, r6
 800bc58:	f7ff ffda 	bl	800bc10 <__sfputc_r>
 800bc5c:	1c43      	adds	r3, r0, #1
 800bc5e:	d1f3      	bne.n	800bc48 <__sfputs_r+0xa>
 800bc60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bc64 <_vfiprintf_r>:
 800bc64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc68:	460d      	mov	r5, r1
 800bc6a:	b09d      	sub	sp, #116	@ 0x74
 800bc6c:	4614      	mov	r4, r2
 800bc6e:	4698      	mov	r8, r3
 800bc70:	4606      	mov	r6, r0
 800bc72:	b118      	cbz	r0, 800bc7c <_vfiprintf_r+0x18>
 800bc74:	6a03      	ldr	r3, [r0, #32]
 800bc76:	b90b      	cbnz	r3, 800bc7c <_vfiprintf_r+0x18>
 800bc78:	f7ff fcca 	bl	800b610 <__sinit>
 800bc7c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bc7e:	07d9      	lsls	r1, r3, #31
 800bc80:	d405      	bmi.n	800bc8e <_vfiprintf_r+0x2a>
 800bc82:	89ab      	ldrh	r3, [r5, #12]
 800bc84:	059a      	lsls	r2, r3, #22
 800bc86:	d402      	bmi.n	800bc8e <_vfiprintf_r+0x2a>
 800bc88:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bc8a:	f7ff feb8 	bl	800b9fe <__retarget_lock_acquire_recursive>
 800bc8e:	89ab      	ldrh	r3, [r5, #12]
 800bc90:	071b      	lsls	r3, r3, #28
 800bc92:	d501      	bpl.n	800bc98 <_vfiprintf_r+0x34>
 800bc94:	692b      	ldr	r3, [r5, #16]
 800bc96:	b99b      	cbnz	r3, 800bcc0 <_vfiprintf_r+0x5c>
 800bc98:	4629      	mov	r1, r5
 800bc9a:	4630      	mov	r0, r6
 800bc9c:	f7ff fde0 	bl	800b860 <__swsetup_r>
 800bca0:	b170      	cbz	r0, 800bcc0 <_vfiprintf_r+0x5c>
 800bca2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bca4:	07dc      	lsls	r4, r3, #31
 800bca6:	d504      	bpl.n	800bcb2 <_vfiprintf_r+0x4e>
 800bca8:	f04f 30ff 	mov.w	r0, #4294967295
 800bcac:	b01d      	add	sp, #116	@ 0x74
 800bcae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bcb2:	89ab      	ldrh	r3, [r5, #12]
 800bcb4:	0598      	lsls	r0, r3, #22
 800bcb6:	d4f7      	bmi.n	800bca8 <_vfiprintf_r+0x44>
 800bcb8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bcba:	f7ff fea1 	bl	800ba00 <__retarget_lock_release_recursive>
 800bcbe:	e7f3      	b.n	800bca8 <_vfiprintf_r+0x44>
 800bcc0:	2300      	movs	r3, #0
 800bcc2:	9309      	str	r3, [sp, #36]	@ 0x24
 800bcc4:	2320      	movs	r3, #32
 800bcc6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bcca:	f8cd 800c 	str.w	r8, [sp, #12]
 800bcce:	2330      	movs	r3, #48	@ 0x30
 800bcd0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800be80 <_vfiprintf_r+0x21c>
 800bcd4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bcd8:	f04f 0901 	mov.w	r9, #1
 800bcdc:	4623      	mov	r3, r4
 800bcde:	469a      	mov	sl, r3
 800bce0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bce4:	b10a      	cbz	r2, 800bcea <_vfiprintf_r+0x86>
 800bce6:	2a25      	cmp	r2, #37	@ 0x25
 800bce8:	d1f9      	bne.n	800bcde <_vfiprintf_r+0x7a>
 800bcea:	ebba 0b04 	subs.w	fp, sl, r4
 800bcee:	d00b      	beq.n	800bd08 <_vfiprintf_r+0xa4>
 800bcf0:	465b      	mov	r3, fp
 800bcf2:	4622      	mov	r2, r4
 800bcf4:	4629      	mov	r1, r5
 800bcf6:	4630      	mov	r0, r6
 800bcf8:	f7ff ffa1 	bl	800bc3e <__sfputs_r>
 800bcfc:	3001      	adds	r0, #1
 800bcfe:	f000 80a7 	beq.w	800be50 <_vfiprintf_r+0x1ec>
 800bd02:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bd04:	445a      	add	r2, fp
 800bd06:	9209      	str	r2, [sp, #36]	@ 0x24
 800bd08:	f89a 3000 	ldrb.w	r3, [sl]
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	f000 809f 	beq.w	800be50 <_vfiprintf_r+0x1ec>
 800bd12:	2300      	movs	r3, #0
 800bd14:	f04f 32ff 	mov.w	r2, #4294967295
 800bd18:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bd1c:	f10a 0a01 	add.w	sl, sl, #1
 800bd20:	9304      	str	r3, [sp, #16]
 800bd22:	9307      	str	r3, [sp, #28]
 800bd24:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bd28:	931a      	str	r3, [sp, #104]	@ 0x68
 800bd2a:	4654      	mov	r4, sl
 800bd2c:	2205      	movs	r2, #5
 800bd2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd32:	4853      	ldr	r0, [pc, #332]	@ (800be80 <_vfiprintf_r+0x21c>)
 800bd34:	f7f4 fa74 	bl	8000220 <memchr>
 800bd38:	9a04      	ldr	r2, [sp, #16]
 800bd3a:	b9d8      	cbnz	r0, 800bd74 <_vfiprintf_r+0x110>
 800bd3c:	06d1      	lsls	r1, r2, #27
 800bd3e:	bf44      	itt	mi
 800bd40:	2320      	movmi	r3, #32
 800bd42:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bd46:	0713      	lsls	r3, r2, #28
 800bd48:	bf44      	itt	mi
 800bd4a:	232b      	movmi	r3, #43	@ 0x2b
 800bd4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bd50:	f89a 3000 	ldrb.w	r3, [sl]
 800bd54:	2b2a      	cmp	r3, #42	@ 0x2a
 800bd56:	d015      	beq.n	800bd84 <_vfiprintf_r+0x120>
 800bd58:	9a07      	ldr	r2, [sp, #28]
 800bd5a:	4654      	mov	r4, sl
 800bd5c:	2000      	movs	r0, #0
 800bd5e:	f04f 0c0a 	mov.w	ip, #10
 800bd62:	4621      	mov	r1, r4
 800bd64:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bd68:	3b30      	subs	r3, #48	@ 0x30
 800bd6a:	2b09      	cmp	r3, #9
 800bd6c:	d94b      	bls.n	800be06 <_vfiprintf_r+0x1a2>
 800bd6e:	b1b0      	cbz	r0, 800bd9e <_vfiprintf_r+0x13a>
 800bd70:	9207      	str	r2, [sp, #28]
 800bd72:	e014      	b.n	800bd9e <_vfiprintf_r+0x13a>
 800bd74:	eba0 0308 	sub.w	r3, r0, r8
 800bd78:	fa09 f303 	lsl.w	r3, r9, r3
 800bd7c:	4313      	orrs	r3, r2
 800bd7e:	9304      	str	r3, [sp, #16]
 800bd80:	46a2      	mov	sl, r4
 800bd82:	e7d2      	b.n	800bd2a <_vfiprintf_r+0xc6>
 800bd84:	9b03      	ldr	r3, [sp, #12]
 800bd86:	1d19      	adds	r1, r3, #4
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	9103      	str	r1, [sp, #12]
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	bfbb      	ittet	lt
 800bd90:	425b      	neglt	r3, r3
 800bd92:	f042 0202 	orrlt.w	r2, r2, #2
 800bd96:	9307      	strge	r3, [sp, #28]
 800bd98:	9307      	strlt	r3, [sp, #28]
 800bd9a:	bfb8      	it	lt
 800bd9c:	9204      	strlt	r2, [sp, #16]
 800bd9e:	7823      	ldrb	r3, [r4, #0]
 800bda0:	2b2e      	cmp	r3, #46	@ 0x2e
 800bda2:	d10a      	bne.n	800bdba <_vfiprintf_r+0x156>
 800bda4:	7863      	ldrb	r3, [r4, #1]
 800bda6:	2b2a      	cmp	r3, #42	@ 0x2a
 800bda8:	d132      	bne.n	800be10 <_vfiprintf_r+0x1ac>
 800bdaa:	9b03      	ldr	r3, [sp, #12]
 800bdac:	1d1a      	adds	r2, r3, #4
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	9203      	str	r2, [sp, #12]
 800bdb2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bdb6:	3402      	adds	r4, #2
 800bdb8:	9305      	str	r3, [sp, #20]
 800bdba:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800be90 <_vfiprintf_r+0x22c>
 800bdbe:	7821      	ldrb	r1, [r4, #0]
 800bdc0:	2203      	movs	r2, #3
 800bdc2:	4650      	mov	r0, sl
 800bdc4:	f7f4 fa2c 	bl	8000220 <memchr>
 800bdc8:	b138      	cbz	r0, 800bdda <_vfiprintf_r+0x176>
 800bdca:	9b04      	ldr	r3, [sp, #16]
 800bdcc:	eba0 000a 	sub.w	r0, r0, sl
 800bdd0:	2240      	movs	r2, #64	@ 0x40
 800bdd2:	4082      	lsls	r2, r0
 800bdd4:	4313      	orrs	r3, r2
 800bdd6:	3401      	adds	r4, #1
 800bdd8:	9304      	str	r3, [sp, #16]
 800bdda:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bdde:	4829      	ldr	r0, [pc, #164]	@ (800be84 <_vfiprintf_r+0x220>)
 800bde0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bde4:	2206      	movs	r2, #6
 800bde6:	f7f4 fa1b 	bl	8000220 <memchr>
 800bdea:	2800      	cmp	r0, #0
 800bdec:	d03f      	beq.n	800be6e <_vfiprintf_r+0x20a>
 800bdee:	4b26      	ldr	r3, [pc, #152]	@ (800be88 <_vfiprintf_r+0x224>)
 800bdf0:	bb1b      	cbnz	r3, 800be3a <_vfiprintf_r+0x1d6>
 800bdf2:	9b03      	ldr	r3, [sp, #12]
 800bdf4:	3307      	adds	r3, #7
 800bdf6:	f023 0307 	bic.w	r3, r3, #7
 800bdfa:	3308      	adds	r3, #8
 800bdfc:	9303      	str	r3, [sp, #12]
 800bdfe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800be00:	443b      	add	r3, r7
 800be02:	9309      	str	r3, [sp, #36]	@ 0x24
 800be04:	e76a      	b.n	800bcdc <_vfiprintf_r+0x78>
 800be06:	fb0c 3202 	mla	r2, ip, r2, r3
 800be0a:	460c      	mov	r4, r1
 800be0c:	2001      	movs	r0, #1
 800be0e:	e7a8      	b.n	800bd62 <_vfiprintf_r+0xfe>
 800be10:	2300      	movs	r3, #0
 800be12:	3401      	adds	r4, #1
 800be14:	9305      	str	r3, [sp, #20]
 800be16:	4619      	mov	r1, r3
 800be18:	f04f 0c0a 	mov.w	ip, #10
 800be1c:	4620      	mov	r0, r4
 800be1e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800be22:	3a30      	subs	r2, #48	@ 0x30
 800be24:	2a09      	cmp	r2, #9
 800be26:	d903      	bls.n	800be30 <_vfiprintf_r+0x1cc>
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d0c6      	beq.n	800bdba <_vfiprintf_r+0x156>
 800be2c:	9105      	str	r1, [sp, #20]
 800be2e:	e7c4      	b.n	800bdba <_vfiprintf_r+0x156>
 800be30:	fb0c 2101 	mla	r1, ip, r1, r2
 800be34:	4604      	mov	r4, r0
 800be36:	2301      	movs	r3, #1
 800be38:	e7f0      	b.n	800be1c <_vfiprintf_r+0x1b8>
 800be3a:	ab03      	add	r3, sp, #12
 800be3c:	9300      	str	r3, [sp, #0]
 800be3e:	462a      	mov	r2, r5
 800be40:	4b12      	ldr	r3, [pc, #72]	@ (800be8c <_vfiprintf_r+0x228>)
 800be42:	a904      	add	r1, sp, #16
 800be44:	4630      	mov	r0, r6
 800be46:	f3af 8000 	nop.w
 800be4a:	4607      	mov	r7, r0
 800be4c:	1c78      	adds	r0, r7, #1
 800be4e:	d1d6      	bne.n	800bdfe <_vfiprintf_r+0x19a>
 800be50:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800be52:	07d9      	lsls	r1, r3, #31
 800be54:	d405      	bmi.n	800be62 <_vfiprintf_r+0x1fe>
 800be56:	89ab      	ldrh	r3, [r5, #12]
 800be58:	059a      	lsls	r2, r3, #22
 800be5a:	d402      	bmi.n	800be62 <_vfiprintf_r+0x1fe>
 800be5c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800be5e:	f7ff fdcf 	bl	800ba00 <__retarget_lock_release_recursive>
 800be62:	89ab      	ldrh	r3, [r5, #12]
 800be64:	065b      	lsls	r3, r3, #25
 800be66:	f53f af1f 	bmi.w	800bca8 <_vfiprintf_r+0x44>
 800be6a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800be6c:	e71e      	b.n	800bcac <_vfiprintf_r+0x48>
 800be6e:	ab03      	add	r3, sp, #12
 800be70:	9300      	str	r3, [sp, #0]
 800be72:	462a      	mov	r2, r5
 800be74:	4b05      	ldr	r3, [pc, #20]	@ (800be8c <_vfiprintf_r+0x228>)
 800be76:	a904      	add	r1, sp, #16
 800be78:	4630      	mov	r0, r6
 800be7a:	f000 f879 	bl	800bf70 <_printf_i>
 800be7e:	e7e4      	b.n	800be4a <_vfiprintf_r+0x1e6>
 800be80:	0800c690 	.word	0x0800c690
 800be84:	0800c69a 	.word	0x0800c69a
 800be88:	00000000 	.word	0x00000000
 800be8c:	0800bc3f 	.word	0x0800bc3f
 800be90:	0800c696 	.word	0x0800c696

0800be94 <_printf_common>:
 800be94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800be98:	4616      	mov	r6, r2
 800be9a:	4698      	mov	r8, r3
 800be9c:	688a      	ldr	r2, [r1, #8]
 800be9e:	690b      	ldr	r3, [r1, #16]
 800bea0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800bea4:	4293      	cmp	r3, r2
 800bea6:	bfb8      	it	lt
 800bea8:	4613      	movlt	r3, r2
 800beaa:	6033      	str	r3, [r6, #0]
 800beac:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800beb0:	4607      	mov	r7, r0
 800beb2:	460c      	mov	r4, r1
 800beb4:	b10a      	cbz	r2, 800beba <_printf_common+0x26>
 800beb6:	3301      	adds	r3, #1
 800beb8:	6033      	str	r3, [r6, #0]
 800beba:	6823      	ldr	r3, [r4, #0]
 800bebc:	0699      	lsls	r1, r3, #26
 800bebe:	bf42      	ittt	mi
 800bec0:	6833      	ldrmi	r3, [r6, #0]
 800bec2:	3302      	addmi	r3, #2
 800bec4:	6033      	strmi	r3, [r6, #0]
 800bec6:	6825      	ldr	r5, [r4, #0]
 800bec8:	f015 0506 	ands.w	r5, r5, #6
 800becc:	d106      	bne.n	800bedc <_printf_common+0x48>
 800bece:	f104 0a19 	add.w	sl, r4, #25
 800bed2:	68e3      	ldr	r3, [r4, #12]
 800bed4:	6832      	ldr	r2, [r6, #0]
 800bed6:	1a9b      	subs	r3, r3, r2
 800bed8:	42ab      	cmp	r3, r5
 800beda:	dc26      	bgt.n	800bf2a <_printf_common+0x96>
 800bedc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800bee0:	6822      	ldr	r2, [r4, #0]
 800bee2:	3b00      	subs	r3, #0
 800bee4:	bf18      	it	ne
 800bee6:	2301      	movne	r3, #1
 800bee8:	0692      	lsls	r2, r2, #26
 800beea:	d42b      	bmi.n	800bf44 <_printf_common+0xb0>
 800beec:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800bef0:	4641      	mov	r1, r8
 800bef2:	4638      	mov	r0, r7
 800bef4:	47c8      	blx	r9
 800bef6:	3001      	adds	r0, #1
 800bef8:	d01e      	beq.n	800bf38 <_printf_common+0xa4>
 800befa:	6823      	ldr	r3, [r4, #0]
 800befc:	6922      	ldr	r2, [r4, #16]
 800befe:	f003 0306 	and.w	r3, r3, #6
 800bf02:	2b04      	cmp	r3, #4
 800bf04:	bf02      	ittt	eq
 800bf06:	68e5      	ldreq	r5, [r4, #12]
 800bf08:	6833      	ldreq	r3, [r6, #0]
 800bf0a:	1aed      	subeq	r5, r5, r3
 800bf0c:	68a3      	ldr	r3, [r4, #8]
 800bf0e:	bf0c      	ite	eq
 800bf10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bf14:	2500      	movne	r5, #0
 800bf16:	4293      	cmp	r3, r2
 800bf18:	bfc4      	itt	gt
 800bf1a:	1a9b      	subgt	r3, r3, r2
 800bf1c:	18ed      	addgt	r5, r5, r3
 800bf1e:	2600      	movs	r6, #0
 800bf20:	341a      	adds	r4, #26
 800bf22:	42b5      	cmp	r5, r6
 800bf24:	d11a      	bne.n	800bf5c <_printf_common+0xc8>
 800bf26:	2000      	movs	r0, #0
 800bf28:	e008      	b.n	800bf3c <_printf_common+0xa8>
 800bf2a:	2301      	movs	r3, #1
 800bf2c:	4652      	mov	r2, sl
 800bf2e:	4641      	mov	r1, r8
 800bf30:	4638      	mov	r0, r7
 800bf32:	47c8      	blx	r9
 800bf34:	3001      	adds	r0, #1
 800bf36:	d103      	bne.n	800bf40 <_printf_common+0xac>
 800bf38:	f04f 30ff 	mov.w	r0, #4294967295
 800bf3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf40:	3501      	adds	r5, #1
 800bf42:	e7c6      	b.n	800bed2 <_printf_common+0x3e>
 800bf44:	18e1      	adds	r1, r4, r3
 800bf46:	1c5a      	adds	r2, r3, #1
 800bf48:	2030      	movs	r0, #48	@ 0x30
 800bf4a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800bf4e:	4422      	add	r2, r4
 800bf50:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800bf54:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800bf58:	3302      	adds	r3, #2
 800bf5a:	e7c7      	b.n	800beec <_printf_common+0x58>
 800bf5c:	2301      	movs	r3, #1
 800bf5e:	4622      	mov	r2, r4
 800bf60:	4641      	mov	r1, r8
 800bf62:	4638      	mov	r0, r7
 800bf64:	47c8      	blx	r9
 800bf66:	3001      	adds	r0, #1
 800bf68:	d0e6      	beq.n	800bf38 <_printf_common+0xa4>
 800bf6a:	3601      	adds	r6, #1
 800bf6c:	e7d9      	b.n	800bf22 <_printf_common+0x8e>
	...

0800bf70 <_printf_i>:
 800bf70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bf74:	7e0f      	ldrb	r7, [r1, #24]
 800bf76:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800bf78:	2f78      	cmp	r7, #120	@ 0x78
 800bf7a:	4691      	mov	r9, r2
 800bf7c:	4680      	mov	r8, r0
 800bf7e:	460c      	mov	r4, r1
 800bf80:	469a      	mov	sl, r3
 800bf82:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800bf86:	d807      	bhi.n	800bf98 <_printf_i+0x28>
 800bf88:	2f62      	cmp	r7, #98	@ 0x62
 800bf8a:	d80a      	bhi.n	800bfa2 <_printf_i+0x32>
 800bf8c:	2f00      	cmp	r7, #0
 800bf8e:	f000 80d2 	beq.w	800c136 <_printf_i+0x1c6>
 800bf92:	2f58      	cmp	r7, #88	@ 0x58
 800bf94:	f000 80b9 	beq.w	800c10a <_printf_i+0x19a>
 800bf98:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bf9c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800bfa0:	e03a      	b.n	800c018 <_printf_i+0xa8>
 800bfa2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800bfa6:	2b15      	cmp	r3, #21
 800bfa8:	d8f6      	bhi.n	800bf98 <_printf_i+0x28>
 800bfaa:	a101      	add	r1, pc, #4	@ (adr r1, 800bfb0 <_printf_i+0x40>)
 800bfac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bfb0:	0800c009 	.word	0x0800c009
 800bfb4:	0800c01d 	.word	0x0800c01d
 800bfb8:	0800bf99 	.word	0x0800bf99
 800bfbc:	0800bf99 	.word	0x0800bf99
 800bfc0:	0800bf99 	.word	0x0800bf99
 800bfc4:	0800bf99 	.word	0x0800bf99
 800bfc8:	0800c01d 	.word	0x0800c01d
 800bfcc:	0800bf99 	.word	0x0800bf99
 800bfd0:	0800bf99 	.word	0x0800bf99
 800bfd4:	0800bf99 	.word	0x0800bf99
 800bfd8:	0800bf99 	.word	0x0800bf99
 800bfdc:	0800c11d 	.word	0x0800c11d
 800bfe0:	0800c047 	.word	0x0800c047
 800bfe4:	0800c0d7 	.word	0x0800c0d7
 800bfe8:	0800bf99 	.word	0x0800bf99
 800bfec:	0800bf99 	.word	0x0800bf99
 800bff0:	0800c13f 	.word	0x0800c13f
 800bff4:	0800bf99 	.word	0x0800bf99
 800bff8:	0800c047 	.word	0x0800c047
 800bffc:	0800bf99 	.word	0x0800bf99
 800c000:	0800bf99 	.word	0x0800bf99
 800c004:	0800c0df 	.word	0x0800c0df
 800c008:	6833      	ldr	r3, [r6, #0]
 800c00a:	1d1a      	adds	r2, r3, #4
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	6032      	str	r2, [r6, #0]
 800c010:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c014:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c018:	2301      	movs	r3, #1
 800c01a:	e09d      	b.n	800c158 <_printf_i+0x1e8>
 800c01c:	6833      	ldr	r3, [r6, #0]
 800c01e:	6820      	ldr	r0, [r4, #0]
 800c020:	1d19      	adds	r1, r3, #4
 800c022:	6031      	str	r1, [r6, #0]
 800c024:	0606      	lsls	r6, r0, #24
 800c026:	d501      	bpl.n	800c02c <_printf_i+0xbc>
 800c028:	681d      	ldr	r5, [r3, #0]
 800c02a:	e003      	b.n	800c034 <_printf_i+0xc4>
 800c02c:	0645      	lsls	r5, r0, #25
 800c02e:	d5fb      	bpl.n	800c028 <_printf_i+0xb8>
 800c030:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c034:	2d00      	cmp	r5, #0
 800c036:	da03      	bge.n	800c040 <_printf_i+0xd0>
 800c038:	232d      	movs	r3, #45	@ 0x2d
 800c03a:	426d      	negs	r5, r5
 800c03c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c040:	4859      	ldr	r0, [pc, #356]	@ (800c1a8 <_printf_i+0x238>)
 800c042:	230a      	movs	r3, #10
 800c044:	e011      	b.n	800c06a <_printf_i+0xfa>
 800c046:	6821      	ldr	r1, [r4, #0]
 800c048:	6833      	ldr	r3, [r6, #0]
 800c04a:	0608      	lsls	r0, r1, #24
 800c04c:	f853 5b04 	ldr.w	r5, [r3], #4
 800c050:	d402      	bmi.n	800c058 <_printf_i+0xe8>
 800c052:	0649      	lsls	r1, r1, #25
 800c054:	bf48      	it	mi
 800c056:	b2ad      	uxthmi	r5, r5
 800c058:	2f6f      	cmp	r7, #111	@ 0x6f
 800c05a:	4853      	ldr	r0, [pc, #332]	@ (800c1a8 <_printf_i+0x238>)
 800c05c:	6033      	str	r3, [r6, #0]
 800c05e:	bf14      	ite	ne
 800c060:	230a      	movne	r3, #10
 800c062:	2308      	moveq	r3, #8
 800c064:	2100      	movs	r1, #0
 800c066:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c06a:	6866      	ldr	r6, [r4, #4]
 800c06c:	60a6      	str	r6, [r4, #8]
 800c06e:	2e00      	cmp	r6, #0
 800c070:	bfa2      	ittt	ge
 800c072:	6821      	ldrge	r1, [r4, #0]
 800c074:	f021 0104 	bicge.w	r1, r1, #4
 800c078:	6021      	strge	r1, [r4, #0]
 800c07a:	b90d      	cbnz	r5, 800c080 <_printf_i+0x110>
 800c07c:	2e00      	cmp	r6, #0
 800c07e:	d04b      	beq.n	800c118 <_printf_i+0x1a8>
 800c080:	4616      	mov	r6, r2
 800c082:	fbb5 f1f3 	udiv	r1, r5, r3
 800c086:	fb03 5711 	mls	r7, r3, r1, r5
 800c08a:	5dc7      	ldrb	r7, [r0, r7]
 800c08c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c090:	462f      	mov	r7, r5
 800c092:	42bb      	cmp	r3, r7
 800c094:	460d      	mov	r5, r1
 800c096:	d9f4      	bls.n	800c082 <_printf_i+0x112>
 800c098:	2b08      	cmp	r3, #8
 800c09a:	d10b      	bne.n	800c0b4 <_printf_i+0x144>
 800c09c:	6823      	ldr	r3, [r4, #0]
 800c09e:	07df      	lsls	r7, r3, #31
 800c0a0:	d508      	bpl.n	800c0b4 <_printf_i+0x144>
 800c0a2:	6923      	ldr	r3, [r4, #16]
 800c0a4:	6861      	ldr	r1, [r4, #4]
 800c0a6:	4299      	cmp	r1, r3
 800c0a8:	bfde      	ittt	le
 800c0aa:	2330      	movle	r3, #48	@ 0x30
 800c0ac:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c0b0:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c0b4:	1b92      	subs	r2, r2, r6
 800c0b6:	6122      	str	r2, [r4, #16]
 800c0b8:	f8cd a000 	str.w	sl, [sp]
 800c0bc:	464b      	mov	r3, r9
 800c0be:	aa03      	add	r2, sp, #12
 800c0c0:	4621      	mov	r1, r4
 800c0c2:	4640      	mov	r0, r8
 800c0c4:	f7ff fee6 	bl	800be94 <_printf_common>
 800c0c8:	3001      	adds	r0, #1
 800c0ca:	d14a      	bne.n	800c162 <_printf_i+0x1f2>
 800c0cc:	f04f 30ff 	mov.w	r0, #4294967295
 800c0d0:	b004      	add	sp, #16
 800c0d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c0d6:	6823      	ldr	r3, [r4, #0]
 800c0d8:	f043 0320 	orr.w	r3, r3, #32
 800c0dc:	6023      	str	r3, [r4, #0]
 800c0de:	4833      	ldr	r0, [pc, #204]	@ (800c1ac <_printf_i+0x23c>)
 800c0e0:	2778      	movs	r7, #120	@ 0x78
 800c0e2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c0e6:	6823      	ldr	r3, [r4, #0]
 800c0e8:	6831      	ldr	r1, [r6, #0]
 800c0ea:	061f      	lsls	r7, r3, #24
 800c0ec:	f851 5b04 	ldr.w	r5, [r1], #4
 800c0f0:	d402      	bmi.n	800c0f8 <_printf_i+0x188>
 800c0f2:	065f      	lsls	r7, r3, #25
 800c0f4:	bf48      	it	mi
 800c0f6:	b2ad      	uxthmi	r5, r5
 800c0f8:	6031      	str	r1, [r6, #0]
 800c0fa:	07d9      	lsls	r1, r3, #31
 800c0fc:	bf44      	itt	mi
 800c0fe:	f043 0320 	orrmi.w	r3, r3, #32
 800c102:	6023      	strmi	r3, [r4, #0]
 800c104:	b11d      	cbz	r5, 800c10e <_printf_i+0x19e>
 800c106:	2310      	movs	r3, #16
 800c108:	e7ac      	b.n	800c064 <_printf_i+0xf4>
 800c10a:	4827      	ldr	r0, [pc, #156]	@ (800c1a8 <_printf_i+0x238>)
 800c10c:	e7e9      	b.n	800c0e2 <_printf_i+0x172>
 800c10e:	6823      	ldr	r3, [r4, #0]
 800c110:	f023 0320 	bic.w	r3, r3, #32
 800c114:	6023      	str	r3, [r4, #0]
 800c116:	e7f6      	b.n	800c106 <_printf_i+0x196>
 800c118:	4616      	mov	r6, r2
 800c11a:	e7bd      	b.n	800c098 <_printf_i+0x128>
 800c11c:	6833      	ldr	r3, [r6, #0]
 800c11e:	6825      	ldr	r5, [r4, #0]
 800c120:	6961      	ldr	r1, [r4, #20]
 800c122:	1d18      	adds	r0, r3, #4
 800c124:	6030      	str	r0, [r6, #0]
 800c126:	062e      	lsls	r6, r5, #24
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	d501      	bpl.n	800c130 <_printf_i+0x1c0>
 800c12c:	6019      	str	r1, [r3, #0]
 800c12e:	e002      	b.n	800c136 <_printf_i+0x1c6>
 800c130:	0668      	lsls	r0, r5, #25
 800c132:	d5fb      	bpl.n	800c12c <_printf_i+0x1bc>
 800c134:	8019      	strh	r1, [r3, #0]
 800c136:	2300      	movs	r3, #0
 800c138:	6123      	str	r3, [r4, #16]
 800c13a:	4616      	mov	r6, r2
 800c13c:	e7bc      	b.n	800c0b8 <_printf_i+0x148>
 800c13e:	6833      	ldr	r3, [r6, #0]
 800c140:	1d1a      	adds	r2, r3, #4
 800c142:	6032      	str	r2, [r6, #0]
 800c144:	681e      	ldr	r6, [r3, #0]
 800c146:	6862      	ldr	r2, [r4, #4]
 800c148:	2100      	movs	r1, #0
 800c14a:	4630      	mov	r0, r6
 800c14c:	f7f4 f868 	bl	8000220 <memchr>
 800c150:	b108      	cbz	r0, 800c156 <_printf_i+0x1e6>
 800c152:	1b80      	subs	r0, r0, r6
 800c154:	6060      	str	r0, [r4, #4]
 800c156:	6863      	ldr	r3, [r4, #4]
 800c158:	6123      	str	r3, [r4, #16]
 800c15a:	2300      	movs	r3, #0
 800c15c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c160:	e7aa      	b.n	800c0b8 <_printf_i+0x148>
 800c162:	6923      	ldr	r3, [r4, #16]
 800c164:	4632      	mov	r2, r6
 800c166:	4649      	mov	r1, r9
 800c168:	4640      	mov	r0, r8
 800c16a:	47d0      	blx	sl
 800c16c:	3001      	adds	r0, #1
 800c16e:	d0ad      	beq.n	800c0cc <_printf_i+0x15c>
 800c170:	6823      	ldr	r3, [r4, #0]
 800c172:	079b      	lsls	r3, r3, #30
 800c174:	d413      	bmi.n	800c19e <_printf_i+0x22e>
 800c176:	68e0      	ldr	r0, [r4, #12]
 800c178:	9b03      	ldr	r3, [sp, #12]
 800c17a:	4298      	cmp	r0, r3
 800c17c:	bfb8      	it	lt
 800c17e:	4618      	movlt	r0, r3
 800c180:	e7a6      	b.n	800c0d0 <_printf_i+0x160>
 800c182:	2301      	movs	r3, #1
 800c184:	4632      	mov	r2, r6
 800c186:	4649      	mov	r1, r9
 800c188:	4640      	mov	r0, r8
 800c18a:	47d0      	blx	sl
 800c18c:	3001      	adds	r0, #1
 800c18e:	d09d      	beq.n	800c0cc <_printf_i+0x15c>
 800c190:	3501      	adds	r5, #1
 800c192:	68e3      	ldr	r3, [r4, #12]
 800c194:	9903      	ldr	r1, [sp, #12]
 800c196:	1a5b      	subs	r3, r3, r1
 800c198:	42ab      	cmp	r3, r5
 800c19a:	dcf2      	bgt.n	800c182 <_printf_i+0x212>
 800c19c:	e7eb      	b.n	800c176 <_printf_i+0x206>
 800c19e:	2500      	movs	r5, #0
 800c1a0:	f104 0619 	add.w	r6, r4, #25
 800c1a4:	e7f5      	b.n	800c192 <_printf_i+0x222>
 800c1a6:	bf00      	nop
 800c1a8:	0800c6a1 	.word	0x0800c6a1
 800c1ac:	0800c6b2 	.word	0x0800c6b2

0800c1b0 <__sflush_r>:
 800c1b0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c1b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c1b8:	0716      	lsls	r6, r2, #28
 800c1ba:	4605      	mov	r5, r0
 800c1bc:	460c      	mov	r4, r1
 800c1be:	d454      	bmi.n	800c26a <__sflush_r+0xba>
 800c1c0:	684b      	ldr	r3, [r1, #4]
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	dc02      	bgt.n	800c1cc <__sflush_r+0x1c>
 800c1c6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	dd48      	ble.n	800c25e <__sflush_r+0xae>
 800c1cc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c1ce:	2e00      	cmp	r6, #0
 800c1d0:	d045      	beq.n	800c25e <__sflush_r+0xae>
 800c1d2:	2300      	movs	r3, #0
 800c1d4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c1d8:	682f      	ldr	r7, [r5, #0]
 800c1da:	6a21      	ldr	r1, [r4, #32]
 800c1dc:	602b      	str	r3, [r5, #0]
 800c1de:	d030      	beq.n	800c242 <__sflush_r+0x92>
 800c1e0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c1e2:	89a3      	ldrh	r3, [r4, #12]
 800c1e4:	0759      	lsls	r1, r3, #29
 800c1e6:	d505      	bpl.n	800c1f4 <__sflush_r+0x44>
 800c1e8:	6863      	ldr	r3, [r4, #4]
 800c1ea:	1ad2      	subs	r2, r2, r3
 800c1ec:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c1ee:	b10b      	cbz	r3, 800c1f4 <__sflush_r+0x44>
 800c1f0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c1f2:	1ad2      	subs	r2, r2, r3
 800c1f4:	2300      	movs	r3, #0
 800c1f6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c1f8:	6a21      	ldr	r1, [r4, #32]
 800c1fa:	4628      	mov	r0, r5
 800c1fc:	47b0      	blx	r6
 800c1fe:	1c43      	adds	r3, r0, #1
 800c200:	89a3      	ldrh	r3, [r4, #12]
 800c202:	d106      	bne.n	800c212 <__sflush_r+0x62>
 800c204:	6829      	ldr	r1, [r5, #0]
 800c206:	291d      	cmp	r1, #29
 800c208:	d82b      	bhi.n	800c262 <__sflush_r+0xb2>
 800c20a:	4a2a      	ldr	r2, [pc, #168]	@ (800c2b4 <__sflush_r+0x104>)
 800c20c:	410a      	asrs	r2, r1
 800c20e:	07d6      	lsls	r6, r2, #31
 800c210:	d427      	bmi.n	800c262 <__sflush_r+0xb2>
 800c212:	2200      	movs	r2, #0
 800c214:	6062      	str	r2, [r4, #4]
 800c216:	04d9      	lsls	r1, r3, #19
 800c218:	6922      	ldr	r2, [r4, #16]
 800c21a:	6022      	str	r2, [r4, #0]
 800c21c:	d504      	bpl.n	800c228 <__sflush_r+0x78>
 800c21e:	1c42      	adds	r2, r0, #1
 800c220:	d101      	bne.n	800c226 <__sflush_r+0x76>
 800c222:	682b      	ldr	r3, [r5, #0]
 800c224:	b903      	cbnz	r3, 800c228 <__sflush_r+0x78>
 800c226:	6560      	str	r0, [r4, #84]	@ 0x54
 800c228:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c22a:	602f      	str	r7, [r5, #0]
 800c22c:	b1b9      	cbz	r1, 800c25e <__sflush_r+0xae>
 800c22e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c232:	4299      	cmp	r1, r3
 800c234:	d002      	beq.n	800c23c <__sflush_r+0x8c>
 800c236:	4628      	mov	r0, r5
 800c238:	f7ff fbf2 	bl	800ba20 <_free_r>
 800c23c:	2300      	movs	r3, #0
 800c23e:	6363      	str	r3, [r4, #52]	@ 0x34
 800c240:	e00d      	b.n	800c25e <__sflush_r+0xae>
 800c242:	2301      	movs	r3, #1
 800c244:	4628      	mov	r0, r5
 800c246:	47b0      	blx	r6
 800c248:	4602      	mov	r2, r0
 800c24a:	1c50      	adds	r0, r2, #1
 800c24c:	d1c9      	bne.n	800c1e2 <__sflush_r+0x32>
 800c24e:	682b      	ldr	r3, [r5, #0]
 800c250:	2b00      	cmp	r3, #0
 800c252:	d0c6      	beq.n	800c1e2 <__sflush_r+0x32>
 800c254:	2b1d      	cmp	r3, #29
 800c256:	d001      	beq.n	800c25c <__sflush_r+0xac>
 800c258:	2b16      	cmp	r3, #22
 800c25a:	d11e      	bne.n	800c29a <__sflush_r+0xea>
 800c25c:	602f      	str	r7, [r5, #0]
 800c25e:	2000      	movs	r0, #0
 800c260:	e022      	b.n	800c2a8 <__sflush_r+0xf8>
 800c262:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c266:	b21b      	sxth	r3, r3
 800c268:	e01b      	b.n	800c2a2 <__sflush_r+0xf2>
 800c26a:	690f      	ldr	r7, [r1, #16]
 800c26c:	2f00      	cmp	r7, #0
 800c26e:	d0f6      	beq.n	800c25e <__sflush_r+0xae>
 800c270:	0793      	lsls	r3, r2, #30
 800c272:	680e      	ldr	r6, [r1, #0]
 800c274:	bf08      	it	eq
 800c276:	694b      	ldreq	r3, [r1, #20]
 800c278:	600f      	str	r7, [r1, #0]
 800c27a:	bf18      	it	ne
 800c27c:	2300      	movne	r3, #0
 800c27e:	eba6 0807 	sub.w	r8, r6, r7
 800c282:	608b      	str	r3, [r1, #8]
 800c284:	f1b8 0f00 	cmp.w	r8, #0
 800c288:	dde9      	ble.n	800c25e <__sflush_r+0xae>
 800c28a:	6a21      	ldr	r1, [r4, #32]
 800c28c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c28e:	4643      	mov	r3, r8
 800c290:	463a      	mov	r2, r7
 800c292:	4628      	mov	r0, r5
 800c294:	47b0      	blx	r6
 800c296:	2800      	cmp	r0, #0
 800c298:	dc08      	bgt.n	800c2ac <__sflush_r+0xfc>
 800c29a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c29e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c2a2:	81a3      	strh	r3, [r4, #12]
 800c2a4:	f04f 30ff 	mov.w	r0, #4294967295
 800c2a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c2ac:	4407      	add	r7, r0
 800c2ae:	eba8 0800 	sub.w	r8, r8, r0
 800c2b2:	e7e7      	b.n	800c284 <__sflush_r+0xd4>
 800c2b4:	dfbffffe 	.word	0xdfbffffe

0800c2b8 <_fflush_r>:
 800c2b8:	b538      	push	{r3, r4, r5, lr}
 800c2ba:	690b      	ldr	r3, [r1, #16]
 800c2bc:	4605      	mov	r5, r0
 800c2be:	460c      	mov	r4, r1
 800c2c0:	b913      	cbnz	r3, 800c2c8 <_fflush_r+0x10>
 800c2c2:	2500      	movs	r5, #0
 800c2c4:	4628      	mov	r0, r5
 800c2c6:	bd38      	pop	{r3, r4, r5, pc}
 800c2c8:	b118      	cbz	r0, 800c2d2 <_fflush_r+0x1a>
 800c2ca:	6a03      	ldr	r3, [r0, #32]
 800c2cc:	b90b      	cbnz	r3, 800c2d2 <_fflush_r+0x1a>
 800c2ce:	f7ff f99f 	bl	800b610 <__sinit>
 800c2d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d0f3      	beq.n	800c2c2 <_fflush_r+0xa>
 800c2da:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c2dc:	07d0      	lsls	r0, r2, #31
 800c2de:	d404      	bmi.n	800c2ea <_fflush_r+0x32>
 800c2e0:	0599      	lsls	r1, r3, #22
 800c2e2:	d402      	bmi.n	800c2ea <_fflush_r+0x32>
 800c2e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c2e6:	f7ff fb8a 	bl	800b9fe <__retarget_lock_acquire_recursive>
 800c2ea:	4628      	mov	r0, r5
 800c2ec:	4621      	mov	r1, r4
 800c2ee:	f7ff ff5f 	bl	800c1b0 <__sflush_r>
 800c2f2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c2f4:	07da      	lsls	r2, r3, #31
 800c2f6:	4605      	mov	r5, r0
 800c2f8:	d4e4      	bmi.n	800c2c4 <_fflush_r+0xc>
 800c2fa:	89a3      	ldrh	r3, [r4, #12]
 800c2fc:	059b      	lsls	r3, r3, #22
 800c2fe:	d4e1      	bmi.n	800c2c4 <_fflush_r+0xc>
 800c300:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c302:	f7ff fb7d 	bl	800ba00 <__retarget_lock_release_recursive>
 800c306:	e7dd      	b.n	800c2c4 <_fflush_r+0xc>

0800c308 <__swhatbuf_r>:
 800c308:	b570      	push	{r4, r5, r6, lr}
 800c30a:	460c      	mov	r4, r1
 800c30c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c310:	2900      	cmp	r1, #0
 800c312:	b096      	sub	sp, #88	@ 0x58
 800c314:	4615      	mov	r5, r2
 800c316:	461e      	mov	r6, r3
 800c318:	da0d      	bge.n	800c336 <__swhatbuf_r+0x2e>
 800c31a:	89a3      	ldrh	r3, [r4, #12]
 800c31c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c320:	f04f 0100 	mov.w	r1, #0
 800c324:	bf14      	ite	ne
 800c326:	2340      	movne	r3, #64	@ 0x40
 800c328:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c32c:	2000      	movs	r0, #0
 800c32e:	6031      	str	r1, [r6, #0]
 800c330:	602b      	str	r3, [r5, #0]
 800c332:	b016      	add	sp, #88	@ 0x58
 800c334:	bd70      	pop	{r4, r5, r6, pc}
 800c336:	466a      	mov	r2, sp
 800c338:	f000 f848 	bl	800c3cc <_fstat_r>
 800c33c:	2800      	cmp	r0, #0
 800c33e:	dbec      	blt.n	800c31a <__swhatbuf_r+0x12>
 800c340:	9901      	ldr	r1, [sp, #4]
 800c342:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c346:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c34a:	4259      	negs	r1, r3
 800c34c:	4159      	adcs	r1, r3
 800c34e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c352:	e7eb      	b.n	800c32c <__swhatbuf_r+0x24>

0800c354 <__smakebuf_r>:
 800c354:	898b      	ldrh	r3, [r1, #12]
 800c356:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c358:	079d      	lsls	r5, r3, #30
 800c35a:	4606      	mov	r6, r0
 800c35c:	460c      	mov	r4, r1
 800c35e:	d507      	bpl.n	800c370 <__smakebuf_r+0x1c>
 800c360:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c364:	6023      	str	r3, [r4, #0]
 800c366:	6123      	str	r3, [r4, #16]
 800c368:	2301      	movs	r3, #1
 800c36a:	6163      	str	r3, [r4, #20]
 800c36c:	b003      	add	sp, #12
 800c36e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c370:	ab01      	add	r3, sp, #4
 800c372:	466a      	mov	r2, sp
 800c374:	f7ff ffc8 	bl	800c308 <__swhatbuf_r>
 800c378:	9f00      	ldr	r7, [sp, #0]
 800c37a:	4605      	mov	r5, r0
 800c37c:	4639      	mov	r1, r7
 800c37e:	4630      	mov	r0, r6
 800c380:	f7ff fbba 	bl	800baf8 <_malloc_r>
 800c384:	b948      	cbnz	r0, 800c39a <__smakebuf_r+0x46>
 800c386:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c38a:	059a      	lsls	r2, r3, #22
 800c38c:	d4ee      	bmi.n	800c36c <__smakebuf_r+0x18>
 800c38e:	f023 0303 	bic.w	r3, r3, #3
 800c392:	f043 0302 	orr.w	r3, r3, #2
 800c396:	81a3      	strh	r3, [r4, #12]
 800c398:	e7e2      	b.n	800c360 <__smakebuf_r+0xc>
 800c39a:	89a3      	ldrh	r3, [r4, #12]
 800c39c:	6020      	str	r0, [r4, #0]
 800c39e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c3a2:	81a3      	strh	r3, [r4, #12]
 800c3a4:	9b01      	ldr	r3, [sp, #4]
 800c3a6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c3aa:	b15b      	cbz	r3, 800c3c4 <__smakebuf_r+0x70>
 800c3ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c3b0:	4630      	mov	r0, r6
 800c3b2:	f000 f81d 	bl	800c3f0 <_isatty_r>
 800c3b6:	b128      	cbz	r0, 800c3c4 <__smakebuf_r+0x70>
 800c3b8:	89a3      	ldrh	r3, [r4, #12]
 800c3ba:	f023 0303 	bic.w	r3, r3, #3
 800c3be:	f043 0301 	orr.w	r3, r3, #1
 800c3c2:	81a3      	strh	r3, [r4, #12]
 800c3c4:	89a3      	ldrh	r3, [r4, #12]
 800c3c6:	431d      	orrs	r5, r3
 800c3c8:	81a5      	strh	r5, [r4, #12]
 800c3ca:	e7cf      	b.n	800c36c <__smakebuf_r+0x18>

0800c3cc <_fstat_r>:
 800c3cc:	b538      	push	{r3, r4, r5, lr}
 800c3ce:	4d07      	ldr	r5, [pc, #28]	@ (800c3ec <_fstat_r+0x20>)
 800c3d0:	2300      	movs	r3, #0
 800c3d2:	4604      	mov	r4, r0
 800c3d4:	4608      	mov	r0, r1
 800c3d6:	4611      	mov	r1, r2
 800c3d8:	602b      	str	r3, [r5, #0]
 800c3da:	f7f4 fcce 	bl	8000d7a <_fstat>
 800c3de:	1c43      	adds	r3, r0, #1
 800c3e0:	d102      	bne.n	800c3e8 <_fstat_r+0x1c>
 800c3e2:	682b      	ldr	r3, [r5, #0]
 800c3e4:	b103      	cbz	r3, 800c3e8 <_fstat_r+0x1c>
 800c3e6:	6023      	str	r3, [r4, #0]
 800c3e8:	bd38      	pop	{r3, r4, r5, pc}
 800c3ea:	bf00      	nop
 800c3ec:	20001eb8 	.word	0x20001eb8

0800c3f0 <_isatty_r>:
 800c3f0:	b538      	push	{r3, r4, r5, lr}
 800c3f2:	4d06      	ldr	r5, [pc, #24]	@ (800c40c <_isatty_r+0x1c>)
 800c3f4:	2300      	movs	r3, #0
 800c3f6:	4604      	mov	r4, r0
 800c3f8:	4608      	mov	r0, r1
 800c3fa:	602b      	str	r3, [r5, #0]
 800c3fc:	f7f4 fccd 	bl	8000d9a <_isatty>
 800c400:	1c43      	adds	r3, r0, #1
 800c402:	d102      	bne.n	800c40a <_isatty_r+0x1a>
 800c404:	682b      	ldr	r3, [r5, #0]
 800c406:	b103      	cbz	r3, 800c40a <_isatty_r+0x1a>
 800c408:	6023      	str	r3, [r4, #0]
 800c40a:	bd38      	pop	{r3, r4, r5, pc}
 800c40c:	20001eb8 	.word	0x20001eb8

0800c410 <_sbrk_r>:
 800c410:	b538      	push	{r3, r4, r5, lr}
 800c412:	4d06      	ldr	r5, [pc, #24]	@ (800c42c <_sbrk_r+0x1c>)
 800c414:	2300      	movs	r3, #0
 800c416:	4604      	mov	r4, r0
 800c418:	4608      	mov	r0, r1
 800c41a:	602b      	str	r3, [r5, #0]
 800c41c:	f7f4 fcd6 	bl	8000dcc <_sbrk>
 800c420:	1c43      	adds	r3, r0, #1
 800c422:	d102      	bne.n	800c42a <_sbrk_r+0x1a>
 800c424:	682b      	ldr	r3, [r5, #0]
 800c426:	b103      	cbz	r3, 800c42a <_sbrk_r+0x1a>
 800c428:	6023      	str	r3, [r4, #0]
 800c42a:	bd38      	pop	{r3, r4, r5, pc}
 800c42c:	20001eb8 	.word	0x20001eb8

0800c430 <_init>:
 800c430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c432:	bf00      	nop
 800c434:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c436:	bc08      	pop	{r3}
 800c438:	469e      	mov	lr, r3
 800c43a:	4770      	bx	lr

0800c43c <_fini>:
 800c43c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c43e:	bf00      	nop
 800c440:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c442:	bc08      	pop	{r3}
 800c444:	469e      	mov	lr, r3
 800c446:	4770      	bx	lr
